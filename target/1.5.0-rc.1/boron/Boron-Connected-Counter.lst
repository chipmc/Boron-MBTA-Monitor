
/Users/chipmc/Documents/Maker/Particle/Projects/Boron-Connected-Counter/target/1.5.0-rc.1/boron/Boron-Connected-Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009c90  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000ddcb0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000174  2003def0  000ddcb4  0001def0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000078c  2003e064  2003e064  0002e064  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  000dde28  000dde28  0002de28  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dde54  000dde54  0002de54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00113618  00000000  00000000  0002de58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000156c8  00000000  00000000  00141470  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000260c1  00000000  00000000  00156b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000030f8  00000000  00000000  0017cbf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005798  00000000  00000000  0017fcf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003af64  00000000  00000000  00185489  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000346fd  00000000  00000000  001c03ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010bd69  00000000  00000000  001f4aea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000f814  00000000  00000000  00300854  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fd27 	bl	d9a84 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fd2c 	bl	d9a9a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003def0 	.word	0x2003def0
   d404c:	000ddcb4 	.word	0x000ddcb4
   d4050:	2003e064 	.word	0x2003e064
   d4054:	2003e064 	.word	0x2003e064
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f004 fbad 	bl	d87bc <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000ddcb0 	.word	0x000ddcb0
   d4084:	000ddc6c 	.word	0x000ddc6c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 ba8e 	b.w	d55a8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 ffd9 	bl	d5044 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f004 bb53 	b.w	d8740 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 be53 	b.w	d6d44 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 be59 	b.w	d6d54 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 be57 	b.w	d6d54 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z9sensorISRv>:
}

// Here are the various hardware and timer interrupt service routines
void sensorISR()
{
  sensorDetect = true;                              // sets the sensor flag for the main loop
   d40b8:	4b01      	ldr	r3, [pc, #4]	; (d40c0 <_Z9sensorISRv+0x8>)
   d40ba:	2201      	movs	r2, #1
   d40bc:	701a      	strb	r2, [r3, #0]
   d40be:	4770      	bx	lr
   d40c0:	2003e068 	.word	0x2003e068

000d40c4 <_Z11watchdogISRv>:
}

void watchdogISR()
{
  watchdogFlag = true;
   d40c4:	4b01      	ldr	r3, [pc, #4]	; (d40cc <_Z11watchdogISRv+0x8>)
   d40c6:	2201      	movs	r2, #1
   d40c8:	701a      	strb	r2, [r3, #0]
   d40ca:	4770      	bx	lr
   d40cc:	2003e0bc 	.word	0x2003e0bc

000d40d0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40d0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40d2:	6803      	ldr	r3, [r0, #0]
   d40d4:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40d6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40d8:	d904      	bls.n	d40e4 <nrf_gpio_pin_port_decode+0x14>
   d40da:	4a07      	ldr	r2, [pc, #28]	; (d40f8 <nrf_gpio_pin_port_decode+0x28>)
   d40dc:	2100      	movs	r1, #0
   d40de:	200a      	movs	r0, #10
   d40e0:	f002 fcf8 	bl	d6ad4 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d40e4:	6823      	ldr	r3, [r4, #0]
   d40e6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40e8:	bf83      	ittte	hi
   d40ea:	f003 031f 	andhi.w	r3, r3, #31
   d40ee:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d40f0:	4802      	ldrhi	r0, [pc, #8]	; (d40fc <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d40f2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d40f6:	bd10      	pop	{r4, pc}
   d40f8:	000d67c5 	.word	0x000d67c5
   d40fc:	50000300 	.word	0x50000300

000d4100 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d4100:	b507      	push	{r0, r1, r2, lr}
   d4102:	ab02      	add	r3, sp, #8
   d4104:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4108:	4618      	mov	r0, r3
   d410a:	f7ff ffe1 	bl	d40d0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d410e:	9a01      	ldr	r2, [sp, #4]
   d4110:	2301      	movs	r3, #1
   d4112:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4114:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}
   d4118:	b003      	add	sp, #12
   d411a:	f85d fb04 	ldr.w	pc, [sp], #4

000d411e <nrf_gpio_pin_clear>:


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
   d411e:	b507      	push	{r0, r1, r2, lr}
   d4120:	ab02      	add	r3, sp, #8
   d4122:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4126:	4618      	mov	r0, r3
   d4128:	f7ff ffd2 	bl	d40d0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d412c:	9a01      	ldr	r2, [sp, #4]
   d412e:	2301      	movs	r3, #1
   d4130:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4132:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
}
   d4136:	b003      	add	sp, #12
   d4138:	f85d fb04 	ldr.w	pc, [sp], #4

000d413c <_Z9resetFRAM6String>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
  return !Particle.connected();
}

int resetFRAM(String command)                                     // Will reset the local counts
{
   d413c:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d413e:	4904      	ldr	r1, [pc, #16]	; (d4150 <_Z9resetFRAM6String+0x14>)
   d4140:	f003 fef9 	bl	d7f36 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4144:	b118      	cbz	r0, d414e <_Z9resetFRAM6String+0x12>
  {
    fram.erase();
   d4146:	4803      	ldr	r0, [pc, #12]	; (d4154 <_Z9resetFRAM6String+0x18>)
   d4148:	f001 fd62 	bl	d5c10 <_ZN6MB85RC5eraseEv>
    return 1;
   d414c:	2001      	movs	r0, #1
  }
  else return 0;
}
   d414e:	bd08      	pop	{r3, pc}
   d4150:	000dd101 	.word	0x000dd101
   d4154:	2003e074 	.word	0x2003e074

000d4158 <_Z7sendNow6String>:
  }
  return 1;                                                           // Returns 1 to let the user know if was reset
}

int sendNow(String command) // Function to force sending data in current hour
{
   d4158:	b508      	push	{r3, lr}
   d415a:	4904      	ldr	r1, [pc, #16]	; (d416c <_Z7sendNow6String+0x14>)
   d415c:	f003 feeb 	bl	d7f36 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4160:	b118      	cbz	r0, d416a <_Z7sendNow6String+0x12>
  {
    state = REPORTING_STATE;
   d4162:	4b03      	ldr	r3, [pc, #12]	; (d4170 <_Z7sendNow6String+0x18>)
   d4164:	2205      	movs	r2, #5
   d4166:	701a      	strb	r2, [r3, #0]
    return 1;
   d4168:	2001      	movs	r0, #1
  }
  else return 0;
}
   d416a:	bd08      	pop	{r3, pc}
   d416c:	000dd101 	.word	0x000dd101
   d4170:	2003e0b5 	.word	0x2003e0b5

000d4174 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4174:	b510      	push	{r4, lr}
   d4176:	4b03      	ldr	r3, [pc, #12]	; (d4184 <_ZN8MB85RC64D1Ev+0x10>)
   d4178:	6003      	str	r3, [r0, #0]
   d417a:	4604      	mov	r4, r0
   d417c:	f001 fd10 	bl	d5ba0 <_ZN6MB85RCD1Ev>
   d4180:	4620      	mov	r0, r4
   d4182:	bd10      	pop	{r4, pc}
   d4184:	000dccd4 	.word	0x000dccd4

000d4188 <_ZN8MB85RC64D0Ev>:
   d4188:	b510      	push	{r4, lr}
   d418a:	4604      	mov	r4, r0
   d418c:	f7ff fff2 	bl	d4174 <_ZN8MB85RC64D1Ev>
   d4190:	4620      	mov	r0, r4
   d4192:	2110      	movs	r1, #16
   d4194:	f004 fc35 	bl	d8a02 <_ZdlPvj>
   d4198:	4620      	mov	r0, r4
   d419a:	bd10      	pop	{r4, pc}

000d419c <_Z11resetCounts6String>:
  }
  else return 0;
}

int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
   d419c:	b508      	push	{r3, lr}
   d419e:	490a      	ldr	r1, [pc, #40]	; (d41c8 <_Z11resetCounts6String+0x2c>)
   d41a0:	f003 fec9 	bl	d7f36 <_ZNK6String6equalsEPKc>
   d41a4:	2300      	movs	r3, #0
  if (command == "1")
   d41a6:	b168      	cbz	r0, d41c4 <_Z11resetCounts6String+0x28>
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d41a8:	4a08      	ldr	r2, [pc, #32]	; (d41cc <_Z11resetCounts6String+0x30>)
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d41aa:	4909      	ldr	r1, [pc, #36]	; (d41d0 <_Z11resetCounts6String+0x34>)
int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
  if (command == "1")
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
   d41ac:	6013      	str	r3, [r2, #0]

int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
  if (command == "1")
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d41ae:	6093      	str	r3, [r2, #8]
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
    current.alertCount = 0;                                           // Reset count variables
   d41b0:	6153      	str	r3, [r2, #20]
    current.hourlyCountInFlight = 0;                                  // In the off-chance there is data in flight
   d41b2:	6053      	str	r3, [r2, #4]
    dataInFlight = false;
   d41b4:	4a07      	ldr	r2, [pc, #28]	; (d41d4 <_Z11resetCounts6String+0x38>)
{
  if (command == "1")
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d41b6:	614b      	str	r3, [r1, #20]
    current.alertCount = 0;                                           // Reset count variables
    current.hourlyCountInFlight = 0;                                  // In the off-chance there is data in flight
    dataInFlight = false;
   d41b8:	7013      	strb	r3, [r2, #0]
    currentCountsWriteNeeded = true;                                  // Make sure we write to FRAM back in the main loop
   d41ba:	4b07      	ldr	r3, [pc, #28]	; (d41d8 <_Z11resetCounts6String+0x3c>)
   d41bc:	2001      	movs	r0, #1
   d41be:	7018      	strb	r0, [r3, #0]
    systemStatusWriteNeeded = true;
   d41c0:	4b06      	ldr	r3, [pc, #24]	; (d41dc <_Z11resetCounts6String+0x40>)
   d41c2:	7018      	strb	r0, [r3, #0]
    return 1;
  }
  else return 0;
}
   d41c4:	bd08      	pop	{r3, pc}
   d41c6:	bf00      	nop
   d41c8:	000dd101 	.word	0x000dd101
   d41cc:	2003e12c 	.word	0x2003e12c
   d41d0:	2003e16c 	.word	0x2003e16c
   d41d4:	2003e148 	.word	0x2003e148
   d41d8:	2003e128 	.word	0x2003e128
   d41dc:	2003e149 	.word	0x2003e149

000d41e0 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41e0:	b510      	push	{r4, lr}
   d41e2:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d41e4:	6800      	ldr	r0, [r0, #0]
   d41e6:	b108      	cbz	r0, d41ec <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41e8:	f002 fdb4 	bl	d6d54 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41ec:	4620      	mov	r0, r4
   d41ee:	bd10      	pop	{r4, pc}

000d41f0 <_ZN10CloudClass12syncTimeDoneEv.isra.36>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d41f0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41f2:	2000      	movs	r0, #0
   d41f4:	f002 fd3e 	bl	d6c74 <spark_sync_time_pending>
   d41f8:	b128      	cbz	r0, d4206 <_ZN10CloudClass12syncTimeDoneEv.isra.36+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41fa:	f002 fd13 	bl	d6c24 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41fe:	f080 0001 	eor.w	r0, r0, #1
   d4202:	b2c0      	uxtb	r0, r0
   d4204:	bd08      	pop	{r3, pc}
   d4206:	2001      	movs	r0, #1
    }
   d4208:	bd08      	pop	{r3, pc}

000d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d420a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d420c:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4210:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4212:	f88d 3000 	strb.w	r3, [sp]
   d4216:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4218:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d421a:	f003 f8bf 	bl	d739c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d421e:	4628      	mov	r0, r5
   d4220:	b003      	add	sp, #12
   d4222:	bd30      	pop	{r4, r5, pc}

000d4224 <_Z17getSignalStrengthv>:
  systemStatusWriteNeeded=true;
}


void getSignalStrength()
{
   d4224:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4226:	4d19      	ldr	r5, [pc, #100]	; (d428c <_Z17getSignalStrengthv+0x68>)
   d4228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  systemStatusWriteNeeded=true;
}


void getSignalStrength()
{
   d422a:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d422c:	ac04      	add	r4, sp, #16
   d422e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4234:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4238:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d423c:	4914      	ldr	r1, [pc, #80]	; (d4290 <_Z17getSignalStrengthv+0x6c>)
   d423e:	a80e      	add	r0, sp, #56	; 0x38
   d4240:	f002 fe22 	bl	d6e88 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d4244:	a80e      	add	r0, sp, #56	; 0x38
   d4246:	f002 fe72 	bl	d6f2e <_ZNK14CellularSignal19getAccessTechnologyEv>
   d424a:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d424c:	a80e      	add	r0, sp, #56	; 0x38
   d424e:	f002 febf 	bl	d6fd0 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d4252:	a80e      	add	r0, sp, #56	; 0x38
  CellularSignal sig = Cellular.RSSI();

  auto rat = sig.getAccessTechnology();

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4254:	ee10 5a10 	vmov	r5, s0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d4258:	f002 fea0 	bl	d6f9c <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d425c:	ab18      	add	r3, sp, #96	; 0x60
   d425e:	ee10 0a10 	vmov	r0, s0
   d4262:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d4266:	f004 fe7d 	bl	d8f64 <__aeabi_f2d>
   d426a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d426e:	4628      	mov	r0, r5
   d4270:	f004 fe78 	bl	d8f64 <__aeabi_f2d>
   d4274:	e9cd 0100 	strd	r0, r1, [sp]
   d4278:	4a06      	ldr	r2, [pc, #24]	; (d4294 <_Z17getSignalStrengthv+0x70>)
   d427a:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d427e:	4806      	ldr	r0, [pc, #24]	; (d4298 <_Z17getSignalStrengthv+0x74>)
   d4280:	2140      	movs	r1, #64	; 0x40
   d4282:	f002 fd87 	bl	d6d94 <snprintf>
}
   d4286:	b019      	add	sp, #100	; 0x64
   d4288:	bd30      	pop	{r4, r5, pc}
   d428a:	bf00      	nop
   d428c:	000dcce8 	.word	0x000dcce8
   d4290:	2003e1a0 	.word	0x2003e1a0
   d4294:	000dcd14 	.word	0x000dcd14
   d4298:	2003e0dc 	.word	0x2003e0dc
   d429c:	00000000 	.word	0x00000000

000d42a0 <_Z14getTemperaturev>:

int getTemperature()
{
   d42a0:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
   d42a2:	200f      	movs	r0, #15
   d42a4:	f004 fb2f 	bl	d8906 <analogRead>
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
   d42a8:	f004 fe4a 	bl	d8f40 <__aeabi_i2d>
   d42ac:	a320      	add	r3, pc, #128	; (adr r3, d4330 <_Z14getTemperaturev+0x90>)
   d42ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42b2:	f004 feab 	bl	d900c <__aeabi_dmul>
   d42b6:	f005 f9a1 	bl	d95fc <__aeabi_d2f>
  voltage /= 4096.0;                                                  // Electron is different than the Arduino where there are only 1024 steps
  int temperatureC = int(((voltage - 0.5) * 100));                    //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);              // now convert to Fahrenheit
   d42ba:	eddf 7a15 	vldr	s15, [pc, #84]	; d4310 <_Z14getTemperaturev+0x70>
   d42be:	ee07 0a10 	vmov	s14, r0
   d42c2:	ee67 7a27 	vmul.f32	s15, s14, s15
   d42c6:	ee17 0a90 	vmov	r0, s15
   d42ca:	f004 fe4b 	bl	d8f64 <__aeabi_f2d>
   d42ce:	2200      	movs	r2, #0
   d42d0:	4b10      	ldr	r3, [pc, #64]	; (d4314 <_Z14getTemperaturev+0x74>)
   d42d2:	f004 fce7 	bl	d8ca4 <__aeabi_dsub>
   d42d6:	2200      	movs	r2, #0
   d42d8:	4b0f      	ldr	r3, [pc, #60]	; (d4318 <_Z14getTemperaturev+0x78>)
   d42da:	f004 fe97 	bl	d900c <__aeabi_dmul>
   d42de:	f005 f945 	bl	d956c <__aeabi_d2iz>
   d42e2:	f004 fe2d 	bl	d8f40 <__aeabi_i2d>
   d42e6:	2200      	movs	r2, #0
   d42e8:	4b0c      	ldr	r3, [pc, #48]	; (d431c <_Z14getTemperaturev+0x7c>)
   d42ea:	f004 fe8f 	bl	d900c <__aeabi_dmul>
   d42ee:	2200      	movs	r2, #0
   d42f0:	4b0b      	ldr	r3, [pc, #44]	; (d4320 <_Z14getTemperaturev+0x80>)
   d42f2:	f004 ffb5 	bl	d9260 <__aeabi_ddiv>
   d42f6:	2200      	movs	r2, #0
   d42f8:	4b0a      	ldr	r3, [pc, #40]	; (d4324 <_Z14getTemperaturev+0x84>)
   d42fa:	f004 fcd5 	bl	d8ca8 <__adddf3>
   d42fe:	f005 f935 	bl	d956c <__aeabi_d2iz>
   d4302:	4b09      	ldr	r3, [pc, #36]	; (d4328 <_Z14getTemperaturev+0x88>)
   d4304:	6118      	str	r0, [r3, #16]
  currentCountsWriteNeeded=true;
   d4306:	4b09      	ldr	r3, [pc, #36]	; (d432c <_Z14getTemperaturev+0x8c>)
   d4308:	2201      	movs	r2, #1
   d430a:	701a      	strb	r2, [r3, #0]
  return current.temperature;
}
   d430c:	bd08      	pop	{r3, pc}
   d430e:	bf00      	nop
   d4310:	39800000 	.word	0x39800000
   d4314:	3fe00000 	.word	0x3fe00000
   d4318:	40590000 	.word	0x40590000
   d431c:	40220000 	.word	0x40220000
   d4320:	40140000 	.word	0x40140000
   d4324:	40400000 	.word	0x40400000
   d4328:	2003e12c 	.word	0x2003e12c
   d432c:	2003e128 	.word	0x2003e128
   d4330:	66666666 	.word	0x66666666
   d4334:	400a6666 	.word	0x400a6666

000d4338 <_Z16takeMeasurementsv>:
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call
void takeMeasurements()
{
   d4338:	b508      	push	{r3, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d433a:	4b0b      	ldr	r3, [pc, #44]	; (d4368 <_Z16takeMeasurementsv+0x30>)
   d433c:	2200      	movs	r2, #0
   d433e:	4611      	mov	r1, r2
   d4340:	6858      	ldr	r0, [r3, #4]
   d4342:	f002 fcc7 	bl	d6cd4 <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d4346:	b108      	cbz	r0, d434c <_Z16takeMeasurementsv+0x14>
   d4348:	f7ff ff6c 	bl	d4224 <_Z17getSignalStrengthv>
  getTemperature();                                                   // Get Temperature at startup as well
   d434c:	f7ff ffa8 	bl	d42a0 <_Z14getTemperaturev>
  sysStatus.stateOfCharge = int(batteryMonitor.getSoC());             // Percentage of full charge
   d4350:	4806      	ldr	r0, [pc, #24]	; (d436c <_Z16takeMeasurementsv+0x34>)
   d4352:	f003 fa2f 	bl	d77b4 <_ZN9FuelGauge6getSoCEv>
   d4356:	4b06      	ldr	r3, [pc, #24]	; (d4370 <_Z16takeMeasurementsv+0x38>)
   d4358:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  systemStatusWriteNeeded=true;
   d435c:	2201      	movs	r2, #1
// These are the functions that are part of the takeMeasurements call
void takeMeasurements()
{
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
  getTemperature();                                                   // Get Temperature at startup as well
  sysStatus.stateOfCharge = int(batteryMonitor.getSoC());             // Percentage of full charge
   d435e:	ed83 0a02 	vstr	s0, [r3, #8]
  systemStatusWriteNeeded=true;
   d4362:	4b04      	ldr	r3, [pc, #16]	; (d4374 <_Z16takeMeasurementsv+0x3c>)
   d4364:	701a      	strb	r2, [r3, #0]
   d4366:	bd08      	pop	{r3, pc}
   d4368:	2003e1a0 	.word	0x2003e1a0
   d436c:	2003e0a4 	.word	0x2003e0a4
   d4370:	2003e16c 	.word	0x2003e16c
   d4374:	2003e149 	.word	0x2003e149

000d4378 <_Z11petWatchdogv>:
{
  watchdogFlag = true;
}

void petWatchdog()
{
   d4378:	b510      	push	{r4, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d437a:	4c0d      	ldr	r4, [pc, #52]	; (d43b0 <_Z11petWatchdogv+0x38>)
   d437c:	6823      	ldr	r3, [r4, #0]
    nrf_gpio_pin_set(nrf_pin);
   d437e:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
   d4382:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   d4386:	f003 031f 	and.w	r3, r3, #31
   d438a:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d438e:	f7ff feb7 	bl	d4100 <nrf_gpio_pin_set>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4392:	6823      	ldr	r3, [r4, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d4394:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
   d4398:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   d439c:	f003 031f 	and.w	r3, r3, #31
   d43a0:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d43a4:	f7ff febb 	bl	d411e <nrf_gpio_pin_clear>
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
  digitalWriteFast(donePin, LOW);
  watchdogFlag = false;
   d43a8:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <_Z11petWatchdogv+0x3c>)
   d43aa:	2200      	movs	r2, #0
   d43ac:	701a      	strb	r2, [r3, #0]
   d43ae:	bd10      	pop	{r4, pc}
   d43b0:	2003e0d4 	.word	0x2003e0d4
   d43b4:	2003e0bc 	.word	0x2003e0bc

000d43b8 <_Z9PMICresetv>:
}

// Power Management function
void PMICreset() {
  if (sysStatus.solarPowerMode) {
   d43b8:	4b15      	ldr	r3, [pc, #84]	; (d4410 <_Z9PMICresetv+0x58>)
   d43ba:	4816      	ldr	r0, [pc, #88]	; (d4414 <_Z9PMICresetv+0x5c>)
   d43bc:	7959      	ldrb	r1, [r3, #5]
   d43be:	b199      	cbz	r1, d43e8 <_Z9PMICresetv+0x30>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d43c0:	f44f 7361 	mov.w	r3, #900	; 0x384
   d43c4:	8103      	strh	r3, [r0, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d43c6:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d43ca:	80c3      	strh	r3, [r0, #6]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d43cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d43d0:	8143      	strh	r3, [r0, #10]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d43d2:	f241 0370 	movw	r3, #4208	; 0x1070
   d43d6:	8183      	strh	r3, [r0, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d43d8:	6803      	ldr	r3, [r0, #0]
   d43da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d43de:	f043 0301 	orr.w	r3, r3, #1
   d43e2:	6003      	str	r3, [r0, #0]
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d43e4:	2100      	movs	r1, #0
   d43e6:	e011      	b.n	d440c <_Z9PMICresetv+0x54>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d43e8:	f240 53dc 	movw	r3, #1500	; 0x5dc
   d43ec:	8103      	strh	r3, [r0, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d43ee:	f241 0370 	movw	r3, #4208	; 0x1070
   d43f2:	80c3      	strh	r3, [r0, #6]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d43f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d43f8:	8143      	strh	r3, [r0, #10]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d43fa:	f241 0310 	movw	r3, #4112	; 0x1010
   d43fe:	8183      	strh	r3, [r0, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4400:	6803      	ldr	r3, [r0, #0]
   d4402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4406:	f043 0301 	orr.w	r3, r3, #1
   d440a:	6003      	str	r3, [r0, #0]
   d440c:	f002 bbd8 	b.w	d6bc0 <system_power_management_set_config>
   d4410:	2003e16c 	.word	0x2003e16c
   d4414:	2003e14c 	.word	0x2003e14c

000d4418 <_Z17checkSystemValuesv>:
  sysStatus.closeTime = 24;

  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
   d4418:	b538      	push	{r3, r4, r5, lr}
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d441a:	4c38      	ldr	r4, [pc, #224]	; (d44fc <_Z17checkSystemValuesv+0xe4>)
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d441c:	4d37      	ldr	r5, [pc, #220]	; (d44fc <_Z17checkSystemValuesv+0xe4>)

  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
   d441e:	f7ff ff8b 	bl	d4338 <_Z16takeMeasurementsv>
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d4422:	78a3      	ldrb	r3, [r4, #2]
   d4424:	2b01      	cmp	r3, #1
   d4426:	bf84      	itt	hi
   d4428:	2300      	movhi	r3, #0
   d442a:	70a3      	strbhi	r3, [r4, #2]
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d442c:	78e3      	ldrb	r3, [r4, #3]
   d442e:	2b01      	cmp	r3, #1
   d4430:	d906      	bls.n	d4440 <_Z17checkSystemValuesv+0x28>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4432:	f002 fbf7 	bl	d6c24 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d4436:	b110      	cbz	r0, d443e <_Z17checkSystemValuesv+0x26>
   d4438:	2301      	movs	r3, #1
   d443a:	70eb      	strb	r3, [r5, #3]
   d443c:	e000      	b.n	d4440 <_Z17checkSystemValuesv+0x28>
    else sysStatus.connectedStatus = false;
   d443e:	70e8      	strb	r0, [r5, #3]
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d4440:	7923      	ldrb	r3, [r4, #4]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.debounce < 0 || sysStatus.debounce > 6000) sysStatus.debounce = 1000;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4442:	edd4 7a06 	vldr	s15, [r4, #24]
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
    if (Particle.connected()) sysStatus.connectedStatus = true;
    else sysStatus.connectedStatus = false;
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d4446:	2b01      	cmp	r3, #1
   d4448:	bf82      	ittt	hi
   d444a:	4b2c      	ldrhi	r3, [pc, #176]	; (d44fc <_Z17checkSystemValuesv+0xe4>)
   d444c:	2200      	movhi	r2, #0
   d444e:	711a      	strbhi	r2, [r3, #4]
  if (sysStatus.solarPowerMode < 0 || sysStatus.solarPowerMode >1) sysStatus.solarPowerMode = 0;
   d4450:	7963      	ldrb	r3, [r4, #5]
   d4452:	2b01      	cmp	r3, #1
   d4454:	bf82      	ittt	hi
   d4456:	4b29      	ldrhi	r3, [pc, #164]	; (d44fc <_Z17checkSystemValuesv+0xe4>)
   d4458:	2200      	movhi	r2, #0
   d445a:	715a      	strbhi	r2, [r3, #5]
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) sysStatus.lowPowerMode = 0;
   d445c:	79a3      	ldrb	r3, [r4, #6]
   d445e:	2b01      	cmp	r3, #1
   d4460:	bf82      	ittt	hi
   d4462:	4b26      	ldrhi	r3, [pc, #152]	; (d44fc <_Z17checkSystemValuesv+0xe4>)
   d4464:	2200      	movhi	r2, #0
   d4466:	719a      	strbhi	r2, [r3, #6]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d4468:	68a2      	ldr	r2, [r4, #8]
   d446a:	4b24      	ldr	r3, [pc, #144]	; (d44fc <_Z17checkSystemValuesv+0xe4>)
   d446c:	2a1d      	cmp	r2, #29
   d446e:	bfd4      	ite	le
   d4470:	2201      	movle	r2, #1
  else sysStatus.lowBatteryMode = false;
   d4472:	2200      	movgt	r2, #0
   d4474:	71da      	strb	r2, [r3, #7]
  if (sysStatus.debounce < 0 || sysStatus.debounce > 6000) sysStatus.debounce = 1000;
   d4476:	6922      	ldr	r2, [r4, #16]
   d4478:	f241 7370 	movw	r3, #6000	; 0x1770
   d447c:	429a      	cmp	r2, r3
   d447e:	bf82      	ittt	hi
   d4480:	4b1e      	ldrhi	r3, [pc, #120]	; (d44fc <_Z17checkSystemValuesv+0xe4>)
   d4482:	f44f 727a 	movhi.w	r2, #1000	; 0x3e8
   d4486:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4488:	6963      	ldr	r3, [r4, #20]
   d448a:	2bff      	cmp	r3, #255	; 0xff
   d448c:	bf88      	it	hi
   d448e:	4b1b      	ldrhi	r3, [pc, #108]	; (d44fc <_Z17checkSystemValuesv+0xe4>)
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4490:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) sysStatus.lowPowerMode = 0;
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.debounce < 0 || sysStatus.debounce > 6000) sysStatus.debounce = 1000;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4494:	bf88      	it	hi
   d4496:	2200      	movhi	r2, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4498:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) sysStatus.lowPowerMode = 0;
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.debounce < 0 || sysStatus.debounce > 6000) sysStatus.debounce = 1000;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d449c:	bf88      	it	hi
   d449e:	615a      	strhi	r2, [r3, #20]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d44a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d44a4:	d406      	bmi.n	d44b4 <_Z17checkSystemValuesv+0x9c>
   d44a6:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d44aa:	eef4 7ac7 	vcmpe.f32	s15, s14
   d44ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d44b2:	dd01      	ble.n	d44b8 <_Z17checkSystemValuesv+0xa0>
   d44b4:	4b12      	ldr	r3, [pc, #72]	; (d4500 <_Z17checkSystemValuesv+0xe8>)
   d44b6:	61a3      	str	r3, [r4, #24]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d44b8:	edd4 7a07 	vldr	s15, [r4, #28]
   d44bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d44c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d44c4:	d406      	bmi.n	d44d4 <_Z17checkSystemValuesv+0xbc>
   d44c6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d44ca:	eef4 7ac7 	vcmpe.f32	s15, s14
   d44ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d44d2:	dd02      	ble.n	d44da <_Z17checkSystemValuesv+0xc2>
   d44d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d44d8:	61e3      	str	r3, [r4, #28]
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
   d44da:	6a23      	ldr	r3, [r4, #32]
   d44dc:	2b0c      	cmp	r3, #12
   d44de:	bf82      	ittt	hi
   d44e0:	4b06      	ldrhi	r3, [pc, #24]	; (d44fc <_Z17checkSystemValuesv+0xe4>)
   d44e2:	2200      	movhi	r2, #0
   d44e4:	621a      	strhi	r2, [r3, #32]
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 24) sysStatus.closeTime = 24;
   d44e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d44e8:	3b0c      	subs	r3, #12
   d44ea:	2b0c      	cmp	r3, #12
   d44ec:	bf82      	ittt	hi
   d44ee:	4b03      	ldrhi	r3, [pc, #12]	; (d44fc <_Z17checkSystemValuesv+0xe4>)
   d44f0:	2218      	movhi	r2, #24
   d44f2:	625a      	strhi	r2, [r3, #36]	; 0x24
  // None for lastHookResponse

  systemStatusWriteNeeded = true;
   d44f4:	4b03      	ldr	r3, [pc, #12]	; (d4504 <_Z17checkSystemValuesv+0xec>)
   d44f6:	2201      	movs	r2, #1
   d44f8:	701a      	strb	r2, [r3, #0]
   d44fa:	bd38      	pop	{r3, r4, r5, pc}
   d44fc:	2003e16c 	.word	0x2003e16c
   d4500:	c0a00000 	.word	0xc0a00000
   d4504:	2003e149 	.word	0x2003e149

000d4508 <_Z12notConnectedv>:
  systemStatusWriteNeeded = true;
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d4508:	b508      	push	{r3, lr}
   d450a:	f002 fb8b 	bl	d6c24 <spark_cloud_flag_connected>
  return !Particle.connected();
   d450e:	f080 0001 	eor.w	r0, r0, #1
}
   d4512:	b2c0      	uxtb	r0, r0
   d4514:	bd08      	pop	{r3, pc}
	...

000d4518 <_Z22disconnectFromParticlev>:
    return 0;                                                    // Failed to connect
  }
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
   d4518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d451a:	f002 fb7b 	bl	d6c14 <spark_cloud_flag_disconnect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d451e:	2000      	movs	r0, #0
   d4520:	f002 f978 	bl	d6814 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4524:	2500      	movs	r5, #0
   d4526:	4604      	mov	r4, r0
   d4528:	f643 2697 	movw	r6, #14999	; 0x3a97
   d452c:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d452e:	2000      	movs	r0, #0
   d4530:	f002 f970 	bl	d6814 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4534:	1b00      	subs	r0, r0, r4
   d4536:	eb61 0105 	sbc.w	r1, r1, r5
   d453a:	428f      	cmp	r7, r1
   d453c:	bf08      	it	eq
   d453e:	4286      	cmpeq	r6, r0
   d4540:	d305      	bcc.n	d454e <_Z22disconnectFromParticlev+0x36>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d4542:	f7ff ffe1 	bl	d4508 <_Z12notConnectedv>
   d4546:	b910      	cbnz	r0, d454e <_Z22disconnectFromParticlev+0x36>
            spark_process();
   d4548:	f002 fb54 	bl	d6bf4 <spark_process>
   d454c:	e7ef      	b.n	d452e <_Z22disconnectFromParticlev+0x16>
   d454e:	f7ff ffdb 	bl	d4508 <_Z12notConnectedv>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4552:	4809      	ldr	r0, [pc, #36]	; (d4578 <_Z22disconnectFromParticlev+0x60>)
   d4554:	2300      	movs	r3, #0
   d4556:	4619      	mov	r1, r3
   d4558:	461a      	mov	r2, r3
   d455a:	6840      	ldr	r0, [r0, #4]
   d455c:	f002 fbca 	bl	d6cf4 <network_off>
  Cellular.off();
  sysStatus.connectedStatus = false;
   d4560:	4b06      	ldr	r3, [pc, #24]	; (d457c <_Z22disconnectFromParticlev+0x64>)
   d4562:	2200      	movs	r2, #0
   d4564:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d4566:	4b06      	ldr	r3, [pc, #24]	; (d4580 <_Z22disconnectFromParticlev+0x68>)
   d4568:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
   d456a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
  Cellular.off();
  sysStatus.connectedStatus = false;
  systemStatusWriteNeeded = true;
   d456e:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4570:	f002 fc30 	bl	d6dd4 <delay>
  return true;
}
   d4574:	4620      	mov	r0, r4
   d4576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4578:	2003e1a0 	.word	0x2003e1a0
   d457c:	2003e16c 	.word	0x2003e16c
   d4580:	2003e149 	.word	0x2003e149

000d4584 <_Z15resetEverythingv>:
    return 1;
  }
  else return 0;
}

void resetEverything() {                                            // The device is waking up in a new day or is a new install
   d4584:	b538      	push	{r3, r4, r5, lr}
  current.dailyCount = 0;                              // Reset the counts in FRAM as well
   d4586:	4d08      	ldr	r5, [pc, #32]	; (d45a8 <_Z15resetEverythingv+0x24>)
   d4588:	2400      	movs	r4, #0
   d458a:	60ac      	str	r4, [r5, #8]
  current.hourlyCount = 0;
   d458c:	602c      	str	r4, [r5, #0]
  current.hourlyCountInFlight = 0;
   d458e:	606c      	str	r4, [r5, #4]
  current.lastCountTime = Time.now();                      // Set the time context to the new day
   d4590:	f003 ff6b 	bl	d846a <_ZN9TimeClass3nowEv>
  sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
   d4594:	4b05      	ldr	r3, [pc, #20]	; (d45ac <_Z15resetEverythingv+0x28>)
  currentCountsWriteNeeded=true;
   d4596:	4a06      	ldr	r2, [pc, #24]	; (d45b0 <_Z15resetEverythingv+0x2c>)
void resetEverything() {                                            // The device is waking up in a new day or is a new install
  current.dailyCount = 0;                              // Reset the counts in FRAM as well
  current.hourlyCount = 0;
  current.hourlyCountInFlight = 0;
  current.lastCountTime = Time.now();                      // Set the time context to the new day
  sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
   d4598:	615c      	str	r4, [r3, #20]
  currentCountsWriteNeeded=true;
   d459a:	2301      	movs	r3, #1
   d459c:	7013      	strb	r3, [r2, #0]
  systemStatusWriteNeeded=true;
   d459e:	4a05      	ldr	r2, [pc, #20]	; (d45b4 <_Z15resetEverythingv+0x30>)

void resetEverything() {                                            // The device is waking up in a new day or is a new install
  current.dailyCount = 0;                              // Reset the counts in FRAM as well
  current.hourlyCount = 0;
  current.hourlyCountInFlight = 0;
  current.lastCountTime = Time.now();                      // Set the time context to the new day
   d45a0:	60e8      	str	r0, [r5, #12]
  sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
   d45a2:	616c      	str	r4, [r5, #20]
  currentCountsWriteNeeded=true;
  systemStatusWriteNeeded=true;
   d45a4:	7013      	strb	r3, [r2, #0]
   d45a6:	bd38      	pop	{r3, r4, r5, pc}
   d45a8:	2003e12c 	.word	0x2003e12c
   d45ac:	2003e16c 	.word	0x2003e16c
   d45b0:	2003e128 	.word	0x2003e128
   d45b4:	2003e149 	.word	0x2003e149

000d45b8 <_Z20meterParticlePublishv>:
  systemStatusWriteNeeded = true;
  return 1;
}

bool meterParticlePublish(void)
{
   d45b8:	b510      	push	{r4, lr}
  static unsigned long lastPublish=0;                                   // Initialize and store value here
  if(millis() - lastPublish >= 1000) {                                  // Particle rate limits at 1 publish per second
   d45ba:	4c07      	ldr	r4, [pc, #28]	; (d45d8 <_Z20meterParticlePublishv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d45bc:	f002 f90a 	bl	d67d4 <HAL_Timer_Get_Milli_Seconds>
   d45c0:	6823      	ldr	r3, [r4, #0]
   d45c2:	1ac0      	subs	r0, r0, r3
   d45c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d45c8:	d304      	bcc.n	d45d4 <_Z20meterParticlePublishv+0x1c>
   d45ca:	f002 f903 	bl	d67d4 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d45ce:	6020      	str	r0, [r4, #0]
   d45d0:	2001      	movs	r0, #1
   d45d2:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
   d45d4:	2000      	movs	r0, #0
}
   d45d6:	bd10      	pop	{r4, pc}
   d45d8:	2003e11c 	.word	0x2003e11c

000d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d45dc:	b508      	push	{r3, lr}
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
  waitUntil(meterParticlePublish);
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  waitUntil(meterParticlePublish);
   d45de:	f7ff ffeb 	bl	d45b8 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d45e2:	b118      	cbz	r0, d45ec <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d45e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d45e8:	f7ff bfe6 	b.w	d45b8 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d45ec:	f002 fb02 	bl	d6bf4 <spark_process>
   d45f0:	e7f5      	b.n	d45de <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62+0x2>
	...

000d45f4 <_Z14fullModemResetv>:
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
  }
  Serial.println(stateTransitionString);
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d45f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d45f6:	f002 fb0d 	bl	d6c14 <spark_cloud_flag_disconnect>
   d45fa:	f002 f8eb 	bl	d67d4 <HAL_Timer_Get_Milli_Seconds>
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d45fe:	f643 2597 	movw	r5, #14999	; 0x3a97
   d4602:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4604:	f002 fb0e 	bl	d6c24 <spark_cloud_flag_connected>
   d4608:	b140      	cbz	r0, d461c <_Z14fullModemResetv+0x28>
   d460a:	f002 f8e3 	bl	d67d4 <HAL_Timer_Get_Milli_Seconds>
   d460e:	1b00      	subs	r0, r0, r4
   d4610:	42a8      	cmp	r0, r5
   d4612:	d803      	bhi.n	d461c <_Z14fullModemResetv+0x28>
		delay(100);
   d4614:	2064      	movs	r0, #100	; 0x64
   d4616:	f002 fbdd 	bl	d6dd4 <delay>
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d461a:	e7f3      	b.n	d4604 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d461c:	2100      	movs	r1, #0
   d461e:	4b09      	ldr	r3, [pc, #36]	; (d4644 <_Z14fullModemResetv+0x50>)
   d4620:	f247 5230 	movw	r2, #30000	; 0x7530
   d4624:	4608      	mov	r0, r1
   d4626:	f002 f885 	bl	d6734 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=15\r\n");
	delay(1000);
   d462a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d462e:	f002 fbd1 	bl	d6dd4 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d4632:	4b05      	ldr	r3, [pc, #20]	; (d4648 <_Z14fullModemResetv+0x54>)
   d4634:	220a      	movs	r2, #10
   d4636:	681b      	ldr	r3, [r3, #0]
   d4638:	2101      	movs	r1, #1
   d463a:	4668      	mov	r0, sp
   d463c:	f003 fcec 	bl	d8018 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4640:	b003      	add	sp, #12
   d4642:	bd30      	pop	{r4, r5, pc}
   d4644:	000dcd2d 	.word	0x000dcd2d
   d4648:	2003e0c4 	.word	0x2003e0c4

000d464c <_Z8isDSTusav>:
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(t), PRIVATE);
  return 1;
}

bool isDSTusa() {
   d464c:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
   d464e:	f003 ff27 	bl	d84a0 <_ZN9TimeClass3dayEv>
   d4652:	4605      	mov	r5, r0
  int month = Time.month();
   d4654:	f003 ff35 	bl	d84c2 <_ZN9TimeClass5monthEv>
   d4658:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d465a:	f003 ff2b 	bl	d84b4 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d465e:	1f23      	subs	r3, r4, #4
   d4660:	2b06      	cmp	r3, #6
   d4662:	d90e      	bls.n	d4682 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d4664:	1ee3      	subs	r3, r4, #3
   d4666:	2b08      	cmp	r3, #8
   d4668:	d80d      	bhi.n	d4686 <_Z8isDSTusav+0x3a>
  { // before March or after October is definetly standard time
    return false;
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
   d466a:	3801      	subs	r0, #1
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d466c:	1a2d      	subs	r5, r5, r0
   d466e:	d501      	bpl.n	d4674 <_Z8isDSTusav+0x28>
   d4670:	2c0b      	cmp	r4, #11
   d4672:	e002      	b.n	d467a <_Z8isDSTusav+0x2e>
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d4674:	2d07      	cmp	r5, #7
   d4676:	dd06      	ble.n	d4686 <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d4678:	2c03      	cmp	r4, #3
   d467a:	bf14      	ite	ne
   d467c:	2000      	movne	r0, #0
   d467e:	2001      	moveq	r0, #1
   d4680:	bd38      	pop	{r3, r4, r5, pc}
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
  { // April to October definetly DST
    return true;
   d4682:	2001      	movs	r0, #1
   d4684:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (month < 3 || month > 11)
  { // before March or after October is definetly standard time
    return false;
   d4686:	2000      	movs	r0, #0
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d4688:	bd38      	pop	{r3, r4, r5, pc}

000d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d468a:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d468c:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d468e:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4690:	b17c      	cbz	r4, d46b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4692:	6863      	ldr	r3, [r4, #4]
   d4694:	3b01      	subs	r3, #1
   d4696:	6063      	str	r3, [r4, #4]
   d4698:	b95b      	cbnz	r3, d46b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d469a:	6823      	ldr	r3, [r4, #0]
   d469c:	4620      	mov	r0, r4
   d469e:	689b      	ldr	r3, [r3, #8]
   d46a0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d46a2:	68a3      	ldr	r3, [r4, #8]
   d46a4:	3b01      	subs	r3, #1
   d46a6:	60a3      	str	r3, [r4, #8]
   d46a8:	b91b      	cbnz	r3, d46b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d46aa:	6823      	ldr	r3, [r4, #0]
   d46ac:	4620      	mov	r0, r4
   d46ae:	68db      	ldr	r3, [r3, #12]
   d46b0:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d46b2:	4628      	mov	r0, r5
   d46b4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d46b8 <_Z9sendEventv>:
  pinResetFast(blueLED);                                              // Turn off the blue LED
  sensorDetect = false;                                               // Reset the flag
}


void sendEvent() {
   d46b8:	b510      	push	{r4, lr}
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i, \"temp\":%i, \"resets\":%i, \"alerts\":%i, \"maxmin\":%i}",current.hourlyCount, current.dailyCount, sysStatus.stateOfCharge, current.temperature, sysStatus.resetCount, current.alertCount, current.maxMinValue);
   d46ba:	4c19      	ldr	r4, [pc, #100]	; (d4720 <_Z9sendEventv+0x68>)
  pinResetFast(blueLED);                                              // Turn off the blue LED
  sensorDetect = false;                                               // Reset the flag
}


void sendEvent() {
   d46bc:	b0c8      	sub	sp, #288	; 0x120
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i, \"temp\":%i, \"resets\":%i, \"alerts\":%i, \"maxmin\":%i}",current.hourlyCount, current.dailyCount, sysStatus.stateOfCharge, current.temperature, sysStatus.resetCount, current.alertCount, current.maxMinValue);
   d46be:	69a3      	ldr	r3, [r4, #24]
   d46c0:	9305      	str	r3, [sp, #20]
   d46c2:	6963      	ldr	r3, [r4, #20]
   d46c4:	9304      	str	r3, [sp, #16]
   d46c6:	4b17      	ldr	r3, [pc, #92]	; (d4724 <_Z9sendEventv+0x6c>)
   d46c8:	695a      	ldr	r2, [r3, #20]
   d46ca:	9203      	str	r2, [sp, #12]
   d46cc:	6922      	ldr	r2, [r4, #16]
   d46ce:	9202      	str	r2, [sp, #8]
   d46d0:	689b      	ldr	r3, [r3, #8]
   d46d2:	9301      	str	r3, [sp, #4]
   d46d4:	68a3      	ldr	r3, [r4, #8]
   d46d6:	9300      	str	r3, [sp, #0]
   d46d8:	4a13      	ldr	r2, [pc, #76]	; (d4728 <_Z9sendEventv+0x70>)
   d46da:	6823      	ldr	r3, [r4, #0]
   d46dc:	f44f 7180 	mov.w	r1, #256	; 0x100
   d46e0:	a808      	add	r0, sp, #32
   d46e2:	f002 fb57 	bl	d6d94 <snprintf>
   d46e6:	4b11      	ldr	r3, [pc, #68]	; (d472c <_Z9sendEventv+0x74>)
  Particle.publish("Ubidots-Car-Hook", data, PRIVATE);
   d46e8:	4911      	ldr	r1, [pc, #68]	; (d4730 <_Z9sendEventv+0x78>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d46ea:	781b      	ldrb	r3, [r3, #0]
   d46ec:	2200      	movs	r2, #0
   d46ee:	f88d 2000 	strb.w	r2, [sp]
   d46f2:	a806      	add	r0, sp, #24
   d46f4:	aa08      	add	r2, sp, #32
   d46f6:	f7ff fd88 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d46fa:	a807      	add	r0, sp, #28
   d46fc:	f7ff ffc5 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  dataInFlight = true;                                                // set the data inflight flag
   d4700:	4b0c      	ldr	r3, [pc, #48]	; (d4734 <_Z9sendEventv+0x7c>)
   d4702:	2201      	movs	r2, #1
   d4704:	701a      	strb	r2, [r3, #0]
   d4706:	f002 f865 	bl	d67d4 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d470a:	4b0b      	ldr	r3, [pc, #44]	; (d4738 <_Z9sendEventv+0x80>)
   d470c:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();
   d470e:	f003 feb3 	bl	d8478 <_ZN9TimeClass4hourEv>
   d4712:	4b0a      	ldr	r3, [pc, #40]	; (d473c <_Z9sendEventv+0x84>)
   d4714:	6018      	str	r0, [r3, #0]
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
   d4716:	6823      	ldr	r3, [r4, #0]
   d4718:	6063      	str	r3, [r4, #4]
}
   d471a:	b048      	add	sp, #288	; 0x120
   d471c:	bd10      	pop	{r4, pc}
   d471e:	bf00      	nop
   d4720:	2003e12c 	.word	0x2003e12c
   d4724:	2003e16c 	.word	0x2003e16c
   d4728:	000dcd3a 	.word	0x000dcd3a
   d472c:	2003e0a0 	.word	0x2003e0a0
   d4730:	000dcd93 	.word	0x000dcd93
   d4734:	2003e148 	.word	0x2003e148
   d4738:	2003e0b0 	.word	0x2003e0b0
   d473c:	2003e0b8 	.word	0x2003e0b8

000d4740 <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4740:	b510      	push	{r4, lr}
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d4742:	780b      	ldrb	r3, [r1, #0]
  webhookTimeStamp = millis();
  currentHourlyPeriod = Time.hour();
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4744:	b094      	sub	sp, #80	; 0x50
   d4746:	460c      	mov	r4, r1
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d4748:	b923      	cbnz	r3, d4754 <_Z14UbidotsHandlerPKcS0_+0x14>
    snprintf(responseString, sizeof(responseString),"No Data");
   d474a:	491c      	ldr	r1, [pc, #112]	; (d47bc <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d474c:	a804      	add	r0, sp, #16
   d474e:	f005 fc2d 	bl	d9fac <strcpy>
   d4752:	e017      	b.n	d4784 <_Z14UbidotsHandlerPKcS0_+0x44>
  }
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4754:	4608      	mov	r0, r1
   d4756:	f004 ffdd 	bl	d9714 <atoi>
   d475a:	28c8      	cmp	r0, #200	; 0xc8
   d475c:	d004      	beq.n	d4768 <_Z14UbidotsHandlerPKcS0_+0x28>
   d475e:	4620      	mov	r0, r4
   d4760:	f004 ffd8 	bl	d9714 <atoi>
   d4764:	28c9      	cmp	r0, #201	; 0xc9
   d4766:	d11e      	bne.n	d47a6 <_Z14UbidotsHandlerPKcS0_+0x66>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4768:	4915      	ldr	r1, [pc, #84]	; (d47c0 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d476a:	a804      	add	r0, sp, #16
   d476c:	f005 fc1e 	bl	d9fac <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4770:	f003 fe7b 	bl	d846a <_ZN9TimeClass3nowEv>
   d4774:	4b13      	ldr	r3, [pc, #76]	; (d47c4 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d4776:	6298      	str	r0, [r3, #40]	; 0x28
    systemStatusWriteNeeded = true;
   d4778:	4b13      	ldr	r3, [pc, #76]	; (d47c8 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d477a:	2201      	movs	r2, #1
   d477c:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d477e:	4b13      	ldr	r3, [pc, #76]	; (d47cc <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d4780:	2200      	movs	r2, #0
   d4782:	701a      	strb	r2, [r3, #0]
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
  }
  waitUntil(meterParticlePublish);
   d4784:	f7ff ff2a 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d4788:	4b11      	ldr	r3, [pc, #68]	; (d47d0 <_Z14UbidotsHandlerPKcS0_+0x90>)
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
   d478a:	4912      	ldr	r1, [pc, #72]	; (d47d4 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d478c:	781b      	ldrb	r3, [r3, #0]
   d478e:	2200      	movs	r2, #0
   d4790:	f88d 2000 	strb.w	r2, [sp]
   d4794:	a802      	add	r0, sp, #8
   d4796:	aa04      	add	r2, sp, #16
   d4798:	f7ff fd37 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d479c:	a803      	add	r0, sp, #12
   d479e:	f7ff ff74 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d47a2:	b014      	add	sp, #80	; 0x50
   d47a4:	bd10      	pop	{r4, pc}
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
    systemStatusWriteNeeded = true;
    dataInFlight = false;                                             // Data has been received
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d47a6:	4620      	mov	r0, r4
   d47a8:	f004 ffb4 	bl	d9714 <atoi>
   d47ac:	4a0a      	ldr	r2, [pc, #40]	; (d47d8 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d47ae:	4603      	mov	r3, r0
   d47b0:	2140      	movs	r1, #64	; 0x40
   d47b2:	a804      	add	r0, sp, #16
   d47b4:	f002 faee 	bl	d6d94 <snprintf>
   d47b8:	e7e4      	b.n	d4784 <_Z14UbidotsHandlerPKcS0_+0x44>
   d47ba:	bf00      	nop
   d47bc:	000dcda4 	.word	0x000dcda4
   d47c0:	000dcdb9 	.word	0x000dcdb9
   d47c4:	2003e16c 	.word	0x2003e16c
   d47c8:	2003e149 	.word	0x2003e149
   d47cc:	2003e148 	.word	0x2003e148
   d47d0:	2003e0a0 	.word	0x2003e0a0
   d47d4:	000dcdac 	.word	0x000dcdac
   d47d8:	000dcdcb 	.word	0x000dcdcb

000d47dc <_Z11recordCountv>:
  rtc.loop();                                                         // keeps the clock up to date
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
}

void recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the Arduino
{
   d47dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d47e0:	4d44      	ldr	r5, [pc, #272]	; (d48f4 <_Z11recordCountv+0x118>)
   d47e2:	f8df 8140 	ldr.w	r8, [pc, #320]	; d4924 <_Z11recordCountv+0x148>
   d47e6:	682b      	ldr	r3, [r5, #0]
    nrf_gpio_pin_set(nrf_pin);
   d47e8:	f893 0070 	ldrb.w	r0, [r3, #112]	; 0x70
   d47ec:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   d47f0:	f003 031f 	and.w	r3, r3, #31
   d47f4:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d47f8:	b0c4      	sub	sp, #272	; 0x110
   d47fa:	f7ff fc81 	bl	d4100 <nrf_gpio_pin_set>
   d47fe:	f001 ffe9 	bl	d67d4 <HAL_Timer_Get_Milli_Seconds>
  static byte currentMinutePeriod;                                    // Current minute
  static unsigned long lastCountMillis = 0;

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
   d4802:	4b3d      	ldr	r3, [pc, #244]	; (d48f8 <_Z11recordCountv+0x11c>)
   d4804:	681a      	ldr	r2, [r3, #0]
   d4806:	1a80      	subs	r0, r0, r2
   d4808:	4a3c      	ldr	r2, [pc, #240]	; (d48fc <_Z11recordCountv+0x120>)
   d480a:	6911      	ldr	r1, [r2, #16]
   d480c:	4288      	cmp	r0, r1
   d480e:	461c      	mov	r4, r3
   d4810:	4616      	mov	r6, r2
   d4812:	d222      	bcs.n	d485a <_Z11recordCountv+0x7e>
   d4814:	f898 7000 	ldrb.w	r7, [r8]
   d4818:	b9ff      	cbnz	r7, d485a <_Z11recordCountv+0x7e>
      snprintf(data, sizeof(data), "Count, hourly: %i, daily: %i",current.hourlyCount,current.dailyCount);
      waitUntil(meterParticlePublish);
      Particle.publish("Count",data, PRIVATE);                           // Helpful for monitoring and calibration
    }
  }
  else if(sysStatus.verboseMode && Particle.connected()) {
   d481a:	7913      	ldrb	r3, [r2, #4]
   d481c:	b11b      	cbz	r3, d4826 <_Z11recordCountv+0x4a>
   d481e:	f002 fa01 	bl	d6c24 <spark_cloud_flag_connected>
   d4822:	2800      	cmp	r0, #0
   d4824:	d156      	bne.n	d48d4 <_Z11recordCountv+0xf8>
    waitUntil(meterParticlePublish);
    Particle.publish("Event","Debounced", PRIVATE);
  }

  if (!digitalRead(userSwitch)) loadSystemDefaults();                 // A low value means someone is pushing this button - will trigger a send to Ubidots and take out of low power mode
   d4826:	2004      	movs	r0, #4
   d4828:	f004 f85a 	bl	d88e0 <digitalRead>
   d482c:	b908      	cbnz	r0, d4832 <_Z11recordCountv+0x56>
   d482e:	f000 f8c9 	bl	d49c4 <_Z18loadSystemDefaultsv>

  currentCountsWriteNeeded = true;                                    // Write updated values to FRAM
   d4832:	4b33      	ldr	r3, [pc, #204]	; (d4900 <_Z11recordCountv+0x124>)
   d4834:	2201      	movs	r2, #1
   d4836:	701a      	strb	r2, [r3, #0]
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4838:	682b      	ldr	r3, [r5, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d483a:	f893 0070 	ldrb.w	r0, [r3, #112]	; 0x70
   d483e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   d4842:	f003 031f 	and.w	r3, r3, #31
   d4846:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d484a:	f7ff fc68 	bl	d411e <nrf_gpio_pin_clear>
  pinResetFast(blueLED);                                              // Turn off the blue LED
  sensorDetect = false;                                               // Reset the flag
   d484e:	4b2d      	ldr	r3, [pc, #180]	; (d4904 <_Z11recordCountv+0x128>)
   d4850:	2200      	movs	r2, #0
   d4852:	701a      	strb	r2, [r3, #0]
}
   d4854:	b044      	add	sp, #272	; 0x110
   d4856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d485a:	f001 ffbb 	bl	d67d4 <HAL_Timer_Get_Milli_Seconds>

  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
    lastCountMillis = millis();
    awokeFromNap = false;                                             // Reset the awoke flag

    if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
   d485e:	4f2a      	ldr	r7, [pc, #168]	; (d4908 <_Z11recordCountv+0x12c>)
  static unsigned long lastCountMillis = 0;

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
    lastCountMillis = millis();
   d4860:	6020      	str	r0, [r4, #0]
    awokeFromNap = false;                                             // Reset the awoke flag
   d4862:	2300      	movs	r3, #0

    if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
   d4864:	783c      	ldrb	r4, [r7, #0]

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
    lastCountMillis = millis();
    awokeFromNap = false;                                             // Reset the awoke flag
   d4866:	f888 3000 	strb.w	r3, [r8]

    if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
   d486a:	f003 fe0f 	bl	d848c <_ZN9TimeClass6minuteEv>
   d486e:	4284      	cmp	r4, r0
   d4870:	4c26      	ldr	r4, [pc, #152]	; (d490c <_Z11recordCountv+0x130>)
   d4872:	d004      	beq.n	d487e <_Z11recordCountv+0xa2>
      currentMinutePeriod = Time.minute();                            // Reset period
   d4874:	f003 fe0a 	bl	d848c <_ZN9TimeClass6minuteEv>
      current.maxMinValue = 1;                                         // Reset for the new minute
   d4878:	2301      	movs	r3, #1
  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
    lastCountMillis = millis();
    awokeFromNap = false;                                             // Reset the awoke flag

    if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
      currentMinutePeriod = Time.minute();                            // Reset period
   d487a:	7038      	strb	r0, [r7, #0]
      current.maxMinValue = 1;                                         // Reset for the new minute
   d487c:	61a3      	str	r3, [r4, #24]
    }
    current.maxMinValue++;
   d487e:	69a3      	ldr	r3, [r4, #24]
   d4880:	4f22      	ldr	r7, [pc, #136]	; (d490c <_Z11recordCountv+0x130>)
   d4882:	3301      	adds	r3, #1
   d4884:	61a3      	str	r3, [r4, #24]

    current.lastCountTime = Time.now();
   d4886:	f003 fdf0 	bl	d846a <_ZN9TimeClass3nowEv>
    current.hourlyCount++;                                                // Increment the PersonCount
   d488a:	6823      	ldr	r3, [r4, #0]
      currentMinutePeriod = Time.minute();                            // Reset period
      current.maxMinValue = 1;                                         // Reset for the new minute
    }
    current.maxMinValue++;

    current.lastCountTime = Time.now();
   d488c:	60e0      	str	r0, [r4, #12]
    current.hourlyCount++;                                                // Increment the PersonCount
   d488e:	3301      	adds	r3, #1
   d4890:	6023      	str	r3, [r4, #0]
    current.dailyCount++;                                                 // Increment the PersonCount
   d4892:	68a3      	ldr	r3, [r4, #8]
   d4894:	3301      	adds	r3, #1
   d4896:	60a3      	str	r3, [r4, #8]
    if (sysStatus.verboseMode && Particle.connected()) {
   d4898:	7933      	ldrb	r3, [r6, #4]
   d489a:	2b00      	cmp	r3, #0
   d489c:	d0c3      	beq.n	d4826 <_Z11recordCountv+0x4a>
   d489e:	f002 f9c1 	bl	d6c24 <spark_cloud_flag_connected>
   d48a2:	2800      	cmp	r0, #0
   d48a4:	d0bf      	beq.n	d4826 <_Z11recordCountv+0x4a>
      char data[256];                                                    // Store the date in this character array - not global
      snprintf(data, sizeof(data), "Count, hourly: %i, daily: %i",current.hourlyCount,current.dailyCount);
   d48a6:	68bb      	ldr	r3, [r7, #8]
   d48a8:	9300      	str	r3, [sp, #0]
   d48aa:	683b      	ldr	r3, [r7, #0]
   d48ac:	4a18      	ldr	r2, [pc, #96]	; (d4910 <_Z11recordCountv+0x134>)
   d48ae:	f44f 7180 	mov.w	r1, #256	; 0x100
   d48b2:	a804      	add	r0, sp, #16
   d48b4:	f002 fa6e 	bl	d6d94 <snprintf>
      waitUntil(meterParticlePublish);
   d48b8:	f7ff fe90 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d48bc:	4b15      	ldr	r3, [pc, #84]	; (d4914 <_Z11recordCountv+0x138>)
      Particle.publish("Count",data, PRIVATE);                           // Helpful for monitoring and calibration
   d48be:	4916      	ldr	r1, [pc, #88]	; (d4918 <_Z11recordCountv+0x13c>)
   d48c0:	781b      	ldrb	r3, [r3, #0]
   d48c2:	2200      	movs	r2, #0
   d48c4:	f88d 2000 	strb.w	r2, [sp]
   d48c8:	a802      	add	r0, sp, #8
   d48ca:	aa04      	add	r2, sp, #16
   d48cc:	f7ff fc9d 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d48d0:	a803      	add	r0, sp, #12
   d48d2:	e00b      	b.n	d48ec <_Z11recordCountv+0x110>
    }
  }
  else if(sysStatus.verboseMode && Particle.connected()) {
    waitUntil(meterParticlePublish);
   d48d4:	f7ff fe82 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d48d8:	4b0e      	ldr	r3, [pc, #56]	; (d4914 <_Z11recordCountv+0x138>)
    Particle.publish("Event","Debounced", PRIVATE);
   d48da:	4a10      	ldr	r2, [pc, #64]	; (d491c <_Z11recordCountv+0x140>)
   d48dc:	781b      	ldrb	r3, [r3, #0]
   d48de:	4910      	ldr	r1, [pc, #64]	; (d4920 <_Z11recordCountv+0x144>)
   d48e0:	f88d 7000 	strb.w	r7, [sp]
   d48e4:	a804      	add	r0, sp, #16
   d48e6:	f7ff fc90 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d48ea:	a805      	add	r0, sp, #20
   d48ec:	f7ff fecd 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d48f0:	e799      	b.n	d4826 <_Z11recordCountv+0x4a>
   d48f2:	bf00      	nop
   d48f4:	2003e0d4 	.word	0x2003e0d4
   d48f8:	2003e120 	.word	0x2003e120
   d48fc:	2003e16c 	.word	0x2003e16c
   d4900:	2003e128 	.word	0x2003e128
   d4904:	2003e068 	.word	0x2003e068
   d4908:	2003e0b6 	.word	0x2003e0b6
   d490c:	2003e12c 	.word	0x2003e12c
   d4910:	000dcde8 	.word	0x000dcde8
   d4914:	2003e0a0 	.word	0x2003e0a0
   d4918:	000dcfe3 	.word	0x000dcfe3
   d491c:	000dce05 	.word	0x000dce05
   d4920:	000dce0f 	.word	0x000dce0f
   d4924:	2003e0b4 	.word	0x2003e0b4

000d4928 <_Z17connectToParticlev>:

 // These are the particle functions that allow you to configure and run the device
 // They are intended to allow for customization and control during installations
 // and to allow for management.

bool connectToParticle() {
   d4928:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d492c:	4820      	ldr	r0, [pc, #128]	; (d49b0 <_Z17connectToParticlev+0x88>)
   d492e:	2300      	movs	r3, #0
   d4930:	461a      	mov	r2, r3
   d4932:	4619      	mov	r1, r3
   d4934:	6840      	ldr	r0, [r0, #4]
   d4936:	f002 f9d5 	bl	d6ce4 <network_on>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d493a:	f002 f963 	bl	d6c04 <spark_cloud_flag_connect>
   d493e:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4942:	f240 36e7 	movw	r6, #999	; 0x3e7
   d4946:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4948:	2000      	movs	r0, #0
   d494a:	f001 ff63 	bl	d6814 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d494e:	f04f 0900 	mov.w	r9, #0
   d4952:	4680      	mov	r8, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4954:	2000      	movs	r0, #0
   d4956:	f001 ff5d 	bl	d6814 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d495a:	ebb0 0008 	subs.w	r0, r0, r8
   d495e:	eb61 0109 	sbc.w	r1, r1, r9
   d4962:	428f      	cmp	r7, r1
   d4964:	bf08      	it	eq
   d4966:	4286      	cmpeq	r6, r0
   d4968:	d305      	bcc.n	d4976 <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d496a:	f002 f95b 	bl	d6c24 <spark_cloud_flag_connected>
   d496e:	b910      	cbnz	r0, d4976 <_Z17connectToParticlev+0x4e>
            spark_process();
   d4970:	f002 f940 	bl	d6bf4 <spark_process>
   d4974:	e7ee      	b.n	d4954 <_Z17connectToParticlev+0x2c>
   d4976:	f002 f955 	bl	d6c24 <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d497a:	b148      	cbz	r0, d4990 <_Z17connectToParticlev+0x68>
   d497c:	f002 f952 	bl	d6c24 <spark_cloud_flag_connected>
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
    Particle.process();
  }
  if (Particle.connected()) {
   d4980:	b1a0      	cbz	r0, d49ac <_Z17connectToParticlev+0x84>
    sysStatus.connectedStatus = true;
   d4982:	4a0c      	ldr	r2, [pc, #48]	; (d49b4 <_Z17connectToParticlev+0x8c>)
   d4984:	2301      	movs	r3, #1
   d4986:	70d3      	strb	r3, [r2, #3]
    systemStatusWriteNeeded = true;
   d4988:	4a0b      	ldr	r2, [pc, #44]	; (d49b8 <_Z17connectToParticlev+0x90>)
   d498a:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
   d498c:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
   d4990:	4b0a      	ldr	r3, [pc, #40]	; (d49bc <_Z17connectToParticlev+0x94>)
   d4992:	781b      	ldrb	r3, [r3, #0]
   d4994:	b10b      	cbz	r3, d499a <_Z17connectToParticlev+0x72>
   d4996:	f7ff ff21 	bl	d47dc <_Z11recordCountv>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d499a:	f001 ff1b 	bl	d67d4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d499e:	4b08      	ldr	r3, [pc, #32]	; (d49c0 <_Z17connectToParticlev+0x98>)
   d49a0:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d49a2:	f002 f927 	bl	d6bf4 <spark_process>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d49a6:	3c01      	subs	r4, #1
   d49a8:	d0e8      	beq.n	d497c <_Z17connectToParticlev+0x54>
   d49aa:	e7cd      	b.n	d4948 <_Z17connectToParticlev+0x20>
    return 1;                               // Were able to connect successfully
  }
  else {
    return 0;                                                    // Failed to connect
  }
}
   d49ac:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
   d49b0:	2003e1a0 	.word	0x2003e1a0
   d49b4:	2003e16c 	.word	0x2003e16c
   d49b8:	2003e149 	.word	0x2003e149
   d49bc:	2003e068 	.word	0x2003e068
   d49c0:	2003e5dc 	.word	0x2003e5dc

000d49c4 <_Z18loadSystemDefaultsv>:
    .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST) ;
    System.setPowerConfiguration(conf);
  }
}

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d49c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
   d49c6:	f7ff ffaf 	bl	d4928 <_Z17connectToParticlev>
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
   d49ca:	f7ff fcb5 	bl	d4338 <_Z16takeMeasurementsv>
  waitUntil(meterParticlePublish);
   d49ce:	f7ff fe05 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49d2:	f002 f927 	bl	d6c24 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
   d49d6:	b160      	cbz	r0, d49f2 <_Z18loadSystemDefaultsv+0x2e>
   d49d8:	4b15      	ldr	r3, [pc, #84]	; (d4a30 <_Z18loadSystemDefaultsv+0x6c>)
   d49da:	4916      	ldr	r1, [pc, #88]	; (d4a34 <_Z18loadSystemDefaultsv+0x70>)
   d49dc:	781b      	ldrb	r3, [r3, #0]
   d49de:	2200      	movs	r2, #0
   d49e0:	f88d 2000 	strb.w	r2, [sp]
   d49e4:	a802      	add	r0, sp, #8
   d49e6:	4a14      	ldr	r2, [pc, #80]	; (d4a38 <_Z18loadSystemDefaultsv+0x74>)
   d49e8:	f7ff fc0f 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d49ec:	a803      	add	r0, sp, #12
   d49ee:	f7ff fe4c 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  sysStatus.structuresVersion = 1;
   d49f2:	4a12      	ldr	r2, [pc, #72]	; (d4a3c <_Z18loadSystemDefaultsv+0x78>)
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d49f4:	6890      	ldr	r0, [r2, #8]
   d49f6:	281d      	cmp	r0, #29
   d49f8:	bfcc      	ite	gt
   d49fa:	2000      	movgt	r0, #0
   d49fc:	2001      	movle	r0, #1
   d49fe:	71d0      	strb	r0, [r2, #7]
  else sysStatus.lowBatteryMode = false;
  sysStatus.lowPowerMode = false;
  sysStatus.debounce = 1000;
   d4a00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
  sysStatus.metricUnits = false;
   d4a04:	2300      	movs	r3, #0
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  sysStatus.lowPowerMode = false;
  sysStatus.debounce = 1000;
   d4a06:	6110      	str	r0, [r2, #16]
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d4a08:	480d      	ldr	r0, [pc, #52]	; (d4a40 <_Z18loadSystemDefaultsv+0x7c>)
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
  sysStatus.metricUnits = false;
   d4a0a:	7093      	strb	r3, [r2, #2]
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  sysStatus.lowPowerMode = false;
   d4a0c:	7193      	strb	r3, [r2, #6]
  sysStatus.debounce = 1000;
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d4a0e:	6190      	str	r0, [r2, #24]
  sysStatus.dstOffset = 1;
  sysStatus.openTime = 0;
   d4a10:	6213      	str	r3, [r2, #32]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  sysStatus.lowPowerMode = false;
  sysStatus.debounce = 1000;
  sysStatus.timezone = -5;                                          // Default is East Coast Time
  sysStatus.dstOffset = 1;
   d4a12:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  sysStatus.openTime = 0;
  sysStatus.closeTime = 24;
   d4a16:	2318      	movs	r3, #24
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
   d4a18:	2101      	movs	r1, #1
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  sysStatus.lowPowerMode = false;
  sysStatus.debounce = 1000;
  sysStatus.timezone = -5;                                          // Default is East Coast Time
  sysStatus.dstOffset = 1;
   d4a1a:	61d0      	str	r0, [r2, #28]
  sysStatus.openTime = 0;
  sysStatus.closeTime = 24;
   d4a1c:	6253      	str	r3, [r2, #36]	; 0x24
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4a1e:	4809      	ldr	r0, [pc, #36]	; (d4a44 <_Z18loadSystemDefaultsv+0x80>)
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
   d4a20:	7011      	strb	r1, [r2, #0]
   d4a22:	232c      	movs	r3, #44	; 0x2c
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = true;
   d4a24:	7111      	strb	r1, [r2, #4]
   d4a26:	f001 f980 	bl	d5d2a <_ZN6MB85RC9writeDataEjPKhj>
  sysStatus.dstOffset = 1;
  sysStatus.openTime = 0;
  sysStatus.closeTime = 24;

  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}
   d4a2a:	b005      	add	sp, #20
   d4a2c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4a30:	2003e0a0 	.word	0x2003e0a0
   d4a34:	000dce7e 	.word	0x000dce7e
   d4a38:	000dce15 	.word	0x000dce15
   d4a3c:	2003e16c 	.word	0x2003e16c
   d4a40:	c0a00000 	.word	0xc0a00000
   d4a44:	2003e074 	.word	0x2003e074

000d4a48 <_Z12hardResetNow6String>:
  }
  else return 0;
}

int hardResetNow(String command)                                      // Will perform a hard reset on the Electron
{
   d4a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4a4a:	490f      	ldr	r1, [pc, #60]	; (d4a88 <_Z12hardResetNow6String+0x40>)
   d4a4c:	f003 fa73 	bl	d7f36 <_ZNK6String6equalsEPKc>
   d4a50:	2400      	movs	r4, #0
  if (command == "1")
   d4a52:	b1b0      	cbz	r0, d4a82 <_Z12hardResetNow6String+0x3a>
   d4a54:	4b0d      	ldr	r3, [pc, #52]	; (d4a8c <_Z12hardResetNow6String+0x44>)
  {
    Particle.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d4a56:	4a0e      	ldr	r2, [pc, #56]	; (d4a90 <_Z12hardResetNow6String+0x48>)
   d4a58:	781b      	ldrb	r3, [r3, #0]
   d4a5a:	490e      	ldr	r1, [pc, #56]	; (d4a94 <_Z12hardResetNow6String+0x4c>)
   d4a5c:	f88d 4000 	strb.w	r4, [sp]
   d4a60:	a802      	add	r0, sp, #8
   d4a62:	f7ff fbd2 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d4a66:	a803      	add	r0, sp, #12
   d4a68:	f7ff fe0f 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    digitalWrite(deepSleepPin,HIGH);                              // This will cut all power to the Boron AND everything it powers
   d4a6c:	2101      	movs	r1, #1
   d4a6e:	2006      	movs	r0, #6
   d4a70:	f003 ff1d 	bl	d88ae <digitalWrite>
    rtc.setAlarm(10);
   d4a74:	4623      	mov	r3, r4
   d4a76:	2201      	movs	r2, #1
   d4a78:	210a      	movs	r1, #10
   d4a7a:	4807      	ldr	r0, [pc, #28]	; (d4a98 <_Z12hardResetNow6String+0x50>)
   d4a7c:	f001 fdcd 	bl	d661a <_ZN8MCP794108setAlarmEibi>
   d4a80:	2001      	movs	r0, #1
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}
   d4a82:	b004      	add	sp, #16
   d4a84:	bd10      	pop	{r4, pc}
   d4a86:	bf00      	nop
   d4a88:	000dd101 	.word	0x000dd101
   d4a8c:	2003e0a0 	.word	0x2003e0a0
   d4a90:	000dce2d 	.word	0x000dce2d
   d4a94:	000dcf6a 	.word	0x000dcf6a
   d4a98:	2003e084 	.word	0x2003e084

000d4a9c <_Z11setDebounce6String>:

int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
   d4a9c:	b570      	push	{r4, r5, r6, lr}
   d4a9e:	b086      	sub	sp, #24
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
   d4aa0:	a903      	add	r1, sp, #12
   d4aa2:	6800      	ldr	r0, [r0, #0]
   d4aa4:	f006 fe08 	bl	db6b8 <strtof>
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4aa8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d4aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ab0:	d435      	bmi.n	d4b1e <_Z11setDebounce6String+0x82>
   d4ab2:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d4ab6:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4abe:	bfcc      	ite	gt
   d4ac0:	2501      	movgt	r5, #1
   d4ac2:	2500      	movle	r5, #0
   d4ac4:	bb5d      	cbnz	r5, d4b1e <_Z11setDebounce6String+0x82>
  sysStatus.debounce = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d4ac6:	eddf 7a18 	vldr	s15, [pc, #96]	; d4b28 <_Z11setDebounce6String+0x8c>
  systemStatusWriteNeeded = true;
   d4aca:	4b18      	ldr	r3, [pc, #96]	; (d4b2c <_Z11setDebounce6String+0x90>)
int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.debounce = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d4acc:	4e18      	ldr	r6, [pc, #96]	; (d4b30 <_Z11setDebounce6String+0x94>)
   d4ace:	ee60 7a27 	vmul.f32	s15, s0, s15
  systemStatusWriteNeeded = true;
   d4ad2:	2401      	movs	r4, #1
int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.debounce = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d4ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  systemStatusWriteNeeded = true;
   d4ad8:	701c      	strb	r4, [r3, #0]
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",inputDebounce);
   d4ada:	ee10 0a10 	vmov	r0, s0
int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.debounce = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d4ade:	edc6 7a04 	vstr	s15, [r6, #16]
  systemStatusWriteNeeded = true;
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",inputDebounce);
   d4ae2:	f004 fa3f 	bl	d8f64 <__aeabi_f2d>
   d4ae6:	4a13      	ldr	r2, [pc, #76]	; (d4b34 <_Z11setDebounce6String+0x98>)
   d4ae8:	e9cd 0100 	strd	r0, r1, [sp]
   d4aec:	2108      	movs	r1, #8
   d4aee:	4812      	ldr	r0, [pc, #72]	; (d4b38 <_Z11setDebounce6String+0x9c>)
   d4af0:	f002 f950 	bl	d6d94 <snprintf>
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
   d4af4:	7933      	ldrb	r3, [r6, #4]
   d4af6:	b1a3      	cbz	r3, d4b22 <_Z11setDebounce6String+0x86>
   d4af8:	f002 f894 	bl	d6c24 <spark_cloud_flag_connected>
   d4afc:	b188      	cbz	r0, d4b22 <_Z11setDebounce6String+0x86>
    waitUntil(meterParticlePublish);
   d4afe:	f7ff fd6d 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d4b02:	4b0e      	ldr	r3, [pc, #56]	; (d4b3c <_Z11setDebounce6String+0xa0>)
    Particle.publish("Debounce",debounceStr, PRIVATE);
   d4b04:	4a0c      	ldr	r2, [pc, #48]	; (d4b38 <_Z11setDebounce6String+0x9c>)
   d4b06:	781b      	ldrb	r3, [r3, #0]
   d4b08:	490d      	ldr	r1, [pc, #52]	; (d4b40 <_Z11setDebounce6String+0xa4>)
   d4b0a:	f88d 5000 	strb.w	r5, [sp]
   d4b0e:	a804      	add	r0, sp, #16
   d4b10:	f7ff fb7b 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d4b14:	a805      	add	r0, sp, #20
   d4b16:	f7ff fdb8 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b1a:	4620      	mov	r0, r4
   d4b1c:	e002      	b.n	d4b24 <_Z11setDebounce6String+0x88>

int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4b1e:	2000      	movs	r0, #0
   d4b20:	e000      	b.n	d4b24 <_Z11setDebounce6String+0x88>
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",inputDebounce);
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
    waitUntil(meterParticlePublish);
    Particle.publish("Debounce",debounceStr, PRIVATE);
  }
  return 1;                                                           // Returns 1 to let the user know if was reset
   d4b22:	2001      	movs	r0, #1
}
   d4b24:	b006      	add	sp, #24
   d4b26:	bd70      	pop	{r4, r5, r6, pc}
   d4b28:	447a0000 	.word	0x447a0000
   d4b2c:	2003e149 	.word	0x2003e149
   d4b30:	2003e16c 	.word	0x2003e16c
   d4b34:	000dce45 	.word	0x000dce45
   d4b38:	2003df65 	.word	0x2003df65
   d4b3c:	2003e0a0 	.word	0x2003e0a0
   d4b40:	000dd0b4 	.word	0x000dd0b4

000d4b44 <_Z12setSolarMode6String>:
  currentCountsWriteNeeded=true;
  systemStatusWriteNeeded=true;
}

int setSolarMode(String command) // Function to force sending data in current hour
{
   d4b44:	b530      	push	{r4, r5, lr}
   d4b46:	4922      	ldr	r1, [pc, #136]	; (d4bd0 <_Z12setSolarMode6String+0x8c>)
   d4b48:	b085      	sub	sp, #20
   d4b4a:	4604      	mov	r4, r0
   d4b4c:	f003 f9f3 	bl	d7f36 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4b50:	4605      	mov	r5, r0
   d4b52:	b1d8      	cbz	r0, d4b8c <_Z12setSolarMode6String+0x48>
  {
    sysStatus.solarPowerMode = true;
   d4b54:	4b1f      	ldr	r3, [pc, #124]	; (d4bd4 <_Z12setSolarMode6String+0x90>)
   d4b56:	2401      	movs	r4, #1
   d4b58:	715c      	strb	r4, [r3, #5]
    PMICreset();                                               // Change the power management Settings
   d4b5a:	f7ff fc2d 	bl	d43b8 <_Z9PMICresetv>
    systemStatusWriteNeeded=true;
   d4b5e:	4b1e      	ldr	r3, [pc, #120]	; (d4bd8 <_Z12setSolarMode6String+0x94>)
   d4b60:	701c      	strb	r4, [r3, #0]
    waitUntil(meterParticlePublish);
   d4b62:	f7ff fd3b 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d4b66:	f002 f85d 	bl	d6c24 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set Solar Powered Mode", PRIVATE);
   d4b6a:	b908      	cbnz	r0, d4b70 <_Z12setSolarMode6String+0x2c>
    return 1;
   d4b6c:	2001      	movs	r0, #1
   d4b6e:	e02c      	b.n	d4bca <_Z12setSolarMode6String+0x86>
   d4b70:	4b1a      	ldr	r3, [pc, #104]	; (d4bdc <_Z12setSolarMode6String+0x98>)
  {
    sysStatus.solarPowerMode = true;
    PMICreset();                                               // Change the power management Settings
    systemStatusWriteNeeded=true;
    waitUntil(meterParticlePublish);
    if (Particle.connected()) Particle.publish("Mode","Set Solar Powered Mode", PRIVATE);
   d4b72:	491b      	ldr	r1, [pc, #108]	; (d4be0 <_Z12setSolarMode6String+0x9c>)
   d4b74:	781b      	ldrb	r3, [r3, #0]
   d4b76:	2200      	movs	r2, #0
   d4b78:	f88d 2000 	strb.w	r2, [sp]
   d4b7c:	a802      	add	r0, sp, #8
   d4b7e:	4a19      	ldr	r2, [pc, #100]	; (d4be4 <_Z12setSolarMode6String+0xa0>)
   d4b80:	f7ff fb43 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d4b84:	a803      	add	r0, sp, #12
   d4b86:	f7ff fd80 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b8a:	e7ef      	b.n	d4b6c <_Z12setSolarMode6String+0x28>
   d4b8c:	4916      	ldr	r1, [pc, #88]	; (d4be8 <_Z12setSolarMode6String+0xa4>)
   d4b8e:	4620      	mov	r0, r4
   d4b90:	f003 f9d1 	bl	d7f36 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4b94:	b1c8      	cbz	r0, d4bca <_Z12setSolarMode6String+0x86>
  {
    sysStatus.solarPowerMode = false;
   d4b96:	4b0f      	ldr	r3, [pc, #60]	; (d4bd4 <_Z12setSolarMode6String+0x90>)
   d4b98:	715d      	strb	r5, [r3, #5]
    systemStatusWriteNeeded=true;
   d4b9a:	4b0f      	ldr	r3, [pc, #60]	; (d4bd8 <_Z12setSolarMode6String+0x94>)
   d4b9c:	2401      	movs	r4, #1
   d4b9e:	701c      	strb	r4, [r3, #0]
    PMICreset();                                                // Change the power management settings
   d4ba0:	f7ff fc0a 	bl	d43b8 <_Z9PMICresetv>
    waitUntil(meterParticlePublish);
   d4ba4:	f7ff fd1a 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d4ba8:	f002 f83c 	bl	d6c24 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Cleared Solar Powered Mode", PRIVATE);
   d4bac:	2800      	cmp	r0, #0
   d4bae:	d0dd      	beq.n	d4b6c <_Z12setSolarMode6String+0x28>
   d4bb0:	4b0a      	ldr	r3, [pc, #40]	; (d4bdc <_Z12setSolarMode6String+0x98>)
   d4bb2:	4a0e      	ldr	r2, [pc, #56]	; (d4bec <_Z12setSolarMode6String+0xa8>)
   d4bb4:	781b      	ldrb	r3, [r3, #0]
   d4bb6:	490a      	ldr	r1, [pc, #40]	; (d4be0 <_Z12setSolarMode6String+0x9c>)
   d4bb8:	f88d 5000 	strb.w	r5, [sp]
   d4bbc:	a802      	add	r0, sp, #8
   d4bbe:	f7ff fb24 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d4bc2:	a803      	add	r0, sp, #12
   d4bc4:	f7ff fd61 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bc8:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4bca:	b005      	add	sp, #20
   d4bcc:	bd30      	pop	{r4, r5, pc}
   d4bce:	bf00      	nop
   d4bd0:	000dd101 	.word	0x000dd101
   d4bd4:	2003e16c 	.word	0x2003e16c
   d4bd8:	2003e149 	.word	0x2003e149
   d4bdc:	2003e0a0 	.word	0x2003e0a0
   d4be0:	000dce7e 	.word	0x000dce7e
   d4be4:	000dce4f 	.word	0x000dce4f
   d4be8:	000dce66 	.word	0x000dce66
   d4bec:	000dce68 	.word	0x000dce68

000d4bf0 <_Z14setverboseMode6String>:

int setverboseMode(String command) // Function to force sending data in current hour
{
   d4bf0:	b530      	push	{r4, r5, lr}
   d4bf2:	4920      	ldr	r1, [pc, #128]	; (d4c74 <_Z14setverboseMode6String+0x84>)
   d4bf4:	b085      	sub	sp, #20
   d4bf6:	4604      	mov	r4, r0
   d4bf8:	f003 f99d 	bl	d7f36 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4bfc:	4605      	mov	r5, r0
   d4bfe:	b1c8      	cbz	r0, d4c34 <_Z14setverboseMode6String+0x44>
  {
    sysStatus.verboseMode = true;
   d4c00:	4b1d      	ldr	r3, [pc, #116]	; (d4c78 <_Z14setverboseMode6String+0x88>)
   d4c02:	2401      	movs	r4, #1
   d4c04:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d4c06:	4b1d      	ldr	r3, [pc, #116]	; (d4c7c <_Z14setverboseMode6String+0x8c>)
   d4c08:	701c      	strb	r4, [r3, #0]
    waitUntil(meterParticlePublish);
   d4c0a:	f7ff fce7 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d4c0e:	f002 f809 	bl	d6c24 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set Verbose Mode", PRIVATE);
   d4c12:	b908      	cbnz	r0, d4c18 <_Z14setverboseMode6String+0x28>
    return 1;
   d4c14:	2001      	movs	r0, #1
   d4c16:	e02a      	b.n	d4c6e <_Z14setverboseMode6String+0x7e>
   d4c18:	4b19      	ldr	r3, [pc, #100]	; (d4c80 <_Z14setverboseMode6String+0x90>)
  if (command == "1")
  {
    sysStatus.verboseMode = true;
    systemStatusWriteNeeded = true;
    waitUntil(meterParticlePublish);
    if (Particle.connected()) Particle.publish("Mode","Set Verbose Mode", PRIVATE);
   d4c1a:	491a      	ldr	r1, [pc, #104]	; (d4c84 <_Z14setverboseMode6String+0x94>)
   d4c1c:	781b      	ldrb	r3, [r3, #0]
   d4c1e:	2200      	movs	r2, #0
   d4c20:	f88d 2000 	strb.w	r2, [sp]
   d4c24:	a802      	add	r0, sp, #8
   d4c26:	4a18      	ldr	r2, [pc, #96]	; (d4c88 <_Z14setverboseMode6String+0x98>)
   d4c28:	f7ff faef 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d4c2c:	a803      	add	r0, sp, #12
   d4c2e:	f7ff fd2c 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c32:	e7ef      	b.n	d4c14 <_Z14setverboseMode6String+0x24>
   d4c34:	4915      	ldr	r1, [pc, #84]	; (d4c8c <_Z14setverboseMode6String+0x9c>)
   d4c36:	4620      	mov	r0, r4
   d4c38:	f003 f97d 	bl	d7f36 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4c3c:	b1b8      	cbz	r0, d4c6e <_Z14setverboseMode6String+0x7e>
  {
    sysStatus.verboseMode = false;
   d4c3e:	4b0e      	ldr	r3, [pc, #56]	; (d4c78 <_Z14setverboseMode6String+0x88>)
   d4c40:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d4c42:	4b0e      	ldr	r3, [pc, #56]	; (d4c7c <_Z14setverboseMode6String+0x8c>)
   d4c44:	2401      	movs	r4, #1
   d4c46:	701c      	strb	r4, [r3, #0]
    waitUntil(meterParticlePublish);
   d4c48:	f7ff fcc8 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d4c4c:	f001 ffea 	bl	d6c24 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d4c50:	2800      	cmp	r0, #0
   d4c52:	d0df      	beq.n	d4c14 <_Z14setverboseMode6String+0x24>
   d4c54:	4b0a      	ldr	r3, [pc, #40]	; (d4c80 <_Z14setverboseMode6String+0x90>)
   d4c56:	4a0e      	ldr	r2, [pc, #56]	; (d4c90 <_Z14setverboseMode6String+0xa0>)
   d4c58:	781b      	ldrb	r3, [r3, #0]
   d4c5a:	490a      	ldr	r1, [pc, #40]	; (d4c84 <_Z14setverboseMode6String+0x94>)
   d4c5c:	f88d 5000 	strb.w	r5, [sp]
   d4c60:	a802      	add	r0, sp, #8
   d4c62:	f7ff fad2 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d4c66:	a803      	add	r0, sp, #12
   d4c68:	f7ff fd0f 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c6c:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4c6e:	b005      	add	sp, #20
   d4c70:	bd30      	pop	{r4, r5, pc}
   d4c72:	bf00      	nop
   d4c74:	000dd101 	.word	0x000dd101
   d4c78:	2003e16c 	.word	0x2003e16c
   d4c7c:	2003e149 	.word	0x2003e149
   d4c80:	2003e0a0 	.word	0x2003e0a0
   d4c84:	000dce7e 	.word	0x000dce7e
   d4c88:	000dce83 	.word	0x000dce83
   d4c8c:	000dce66 	.word	0x000dce66
   d4c90:	000dce94 	.word	0x000dce94
   d4c94:	00000000 	.word	0x00000000

000d4c98 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
   d4c98:	b570      	push	{r4, r5, r6, lr}
   d4c9a:	b0cc      	sub	sp, #304	; 0x130
   d4c9c:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d4c9e:	f003 fbe4 	bl	d846a <_ZN9TimeClass3nowEv>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4ca2:	220a      	movs	r2, #10

int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d4ca4:	4605      	mov	r5, r0
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4ca6:	a905      	add	r1, sp, #20
   d4ca8:	6820      	ldr	r0, [r4, #0]
   d4caa:	f006 fdab 	bl	db804 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d4cae:	f100 030c 	add.w	r3, r0, #12
   d4cb2:	b2db      	uxtb	r3, r3
   d4cb4:	2b18      	cmp	r3, #24
   d4cb6:	d855      	bhi.n	d4d64 <_Z11setTimeZone6String+0xcc>
int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4cb8:	b244      	sxtb	r4, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d4cba:	ee07 4a90 	vmov	s15, r4
   d4cbe:	4b2e      	ldr	r3, [pc, #184]	; (d4d78 <_Z11setTimeZone6String+0xe0>)
   d4cc0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d4cc4:	ed83 0a06 	vstr	s0, [r3, #24]
  Time.zone(sysStatus.timezone);
   d4cc8:	f003 faa8 	bl	d821c <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d4ccc:	4b2b      	ldr	r3, [pc, #172]	; (d4d7c <_Z11setTimeZone6String+0xe4>)
   d4cce:	2201      	movs	r2, #1
   d4cd0:	701a      	strb	r2, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d4cd2:	f003 fa95 	bl	d8200 <_ZN9TimeClass5localEv>
   d4cd6:	4606      	mov	r6, r0
   d4cd8:	f003 fbc7 	bl	d846a <_ZN9TimeClass3nowEv>
   d4cdc:	1a30      	subs	r0, r6, r0
   d4cde:	f004 f92f 	bl	d8f40 <__aeabi_i2d>
   d4ce2:	a323      	add	r3, pc, #140	; (adr r3, d4d70 <_Z11setTimeZone6String+0xd8>)
   d4ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ce8:	f004 faba 	bl	d9260 <__aeabi_ddiv>
   d4cec:	4a24      	ldr	r2, [pc, #144]	; (d4d80 <_Z11setTimeZone6String+0xe8>)
   d4cee:	e9cd 0100 	strd	r0, r1, [sp]
   d4cf2:	210a      	movs	r1, #10
   d4cf4:	4823      	ldr	r0, [pc, #140]	; (d4d84 <_Z11setTimeZone6String+0xec>)
   d4cf6:	f002 f84d 	bl	d6d94 <snprintf>
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d4cfa:	4623      	mov	r3, r4
   d4cfc:	4a22      	ldr	r2, [pc, #136]	; (d4d88 <_Z11setTimeZone6String+0xf0>)
   d4cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4d02:	a80c      	add	r0, sp, #48	; 0x30
   d4d04:	f002 f846 	bl	d6d94 <snprintf>
  waitUntil(meterParticlePublish);
   d4d08:	f7ff fc68 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d4d0c:	f001 ff8a 	bl	d6c24 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d4d10:	b160      	cbz	r0, d4d2c <_Z11setTimeZone6String+0x94>
   d4d12:	4b1e      	ldr	r3, [pc, #120]	; (d4d8c <_Z11setTimeZone6String+0xf4>)
   d4d14:	491e      	ldr	r1, [pc, #120]	; (d4d90 <_Z11setTimeZone6String+0xf8>)
   d4d16:	781b      	ldrb	r3, [r3, #0]
   d4d18:	2200      	movs	r2, #0
   d4d1a:	f88d 2000 	strb.w	r2, [sp]
   d4d1e:	a808      	add	r0, sp, #32
   d4d20:	aa0c      	add	r2, sp, #48	; 0x30
   d4d22:	f7ff fa72 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d4d26:	a809      	add	r0, sp, #36	; 0x24
   d4d28:	f7ff fcaf 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  waitUntil(meterParticlePublish);
   d4d2c:	f7ff fc56 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d4d30:	f001 ff78 	bl	d6c24 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(t), PRIVATE);
   d4d34:	b1c0      	cbz	r0, d4d68 <_Z11setTimeZone6String+0xd0>
   d4d36:	4629      	mov	r1, r5
   d4d38:	a808      	add	r0, sp, #32
   d4d3a:	f003 fabf 	bl	d82bc <_ZN9TimeClass7timeStrEl>
   d4d3e:	9b08      	ldr	r3, [sp, #32]
   d4d40:	9303      	str	r3, [sp, #12]
   d4d42:	4b12      	ldr	r3, [pc, #72]	; (d4d8c <_Z11setTimeZone6String+0xf4>)
   d4d44:	4912      	ldr	r1, [pc, #72]	; (d4d90 <_Z11setTimeZone6String+0xf8>)
   d4d46:	781b      	ldrb	r3, [r3, #0]
   d4d48:	2200      	movs	r2, #0
   d4d4a:	f88d 2000 	strb.w	r2, [sp]
   d4d4e:	a806      	add	r0, sp, #24
   d4d50:	9a03      	ldr	r2, [sp, #12]
   d4d52:	f7ff fa5a 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d4d56:	a807      	add	r0, sp, #28
   d4d58:	f7ff fc97 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d5c:	a808      	add	r0, sp, #32
   d4d5e:	f003 f876 	bl	d7e4e <_ZN6StringD1Ev>
   d4d62:	e001      	b.n	d4d68 <_Z11setTimeZone6String+0xd0>
{
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d4d64:	2000      	movs	r0, #0
   d4d66:	e000      	b.n	d4d6a <_Z11setTimeZone6String+0xd2>
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(t), PRIVATE);
  return 1;
   d4d68:	2001      	movs	r0, #1
}
   d4d6a:	b04c      	add	sp, #304	; 0x130
   d4d6c:	bd70      	pop	{r4, r5, r6, pc}
   d4d6e:	bf00      	nop
   d4d70:	00000000 	.word	0x00000000
   d4d74:	40ac2000 	.word	0x40ac2000
   d4d78:	2003e16c 	.word	0x2003e16c
   d4d7c:	2003e149 	.word	0x2003e149
   d4d80:	000dcea9 	.word	0x000dcea9
   d4d84:	2003e069 	.word	0x2003e069
   d4d88:	000dceb3 	.word	0x000dceb3
   d4d8c:	2003e0a0 	.word	0x2003e0a0
   d4d90:	000dd01a 	.word	0x000dd01a

000d4d94 <_Z11setOpenTime6String>:

int setOpenTime(String command)
{
   d4d94:	b510      	push	{r4, lr}
   d4d96:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
   d4d98:	220a      	movs	r2, #10
   d4d9a:	a903      	add	r1, sp, #12
   d4d9c:	6800      	ldr	r0, [r0, #0]
   d4d9e:	f006 fd31 	bl	db804 <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4da2:	2817      	cmp	r0, #23

int setOpenTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
   d4da4:	4603      	mov	r3, r0
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4da6:	d81d      	bhi.n	d4de4 <_Z11setOpenTime6String+0x50>
  sysStatus.openTime = tempTime;
   d4da8:	4a11      	ldr	r2, [pc, #68]	; (d4df0 <_Z11setOpenTime6String+0x5c>)
   d4daa:	6210      	str	r0, [r2, #32]
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
   d4dac:	4a11      	ldr	r2, [pc, #68]	; (d4df4 <_Z11setOpenTime6String+0x60>)
   d4dae:	2401      	movs	r4, #1
  snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d4db0:	f44f 7180 	mov.w	r1, #256	; 0x100
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
   d4db4:	7014      	strb	r4, [r2, #0]
  snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d4db6:	a806      	add	r0, sp, #24
   d4db8:	4a0f      	ldr	r2, [pc, #60]	; (d4df8 <_Z11setOpenTime6String+0x64>)
   d4dba:	f001 ffeb 	bl	d6d94 <snprintf>
  waitUntil(meterParticlePublish);
   d4dbe:	f7ff fc0d 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d4dc2:	f001 ff2f 	bl	d6c24 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d4dc6:	b178      	cbz	r0, d4de8 <_Z11setOpenTime6String+0x54>
   d4dc8:	4b0c      	ldr	r3, [pc, #48]	; (d4dfc <_Z11setOpenTime6String+0x68>)
   d4dca:	490d      	ldr	r1, [pc, #52]	; (d4e00 <_Z11setOpenTime6String+0x6c>)
   d4dcc:	781b      	ldrb	r3, [r3, #0]
   d4dce:	2200      	movs	r2, #0
   d4dd0:	f88d 2000 	strb.w	r2, [sp]
   d4dd4:	a804      	add	r0, sp, #16
   d4dd6:	aa06      	add	r2, sp, #24
   d4dd8:	f7ff fa17 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d4ddc:	a805      	add	r0, sp, #20
   d4dde:	f7ff fc54 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4de2:	e001      	b.n	d4de8 <_Z11setOpenTime6String+0x54>
int setOpenTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4de4:	2000      	movs	r0, #0
   d4de6:	e000      	b.n	d4dea <_Z11setOpenTime6String+0x56>
  sysStatus.openTime = tempTime;
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  return 1;
   d4de8:	4620      	mov	r0, r4
}
   d4dea:	b046      	add	sp, #280	; 0x118
   d4dec:	bd10      	pop	{r4, pc}
   d4dee:	bf00      	nop
   d4df0:	2003e16c 	.word	0x2003e16c
   d4df4:	2003e149 	.word	0x2003e149
   d4df8:	000dcec7 	.word	0x000dcec7
   d4dfc:	2003e0a0 	.word	0x2003e0a0
   d4e00:	000dd01a 	.word	0x000dd01a

000d4e04 <_Z12setCloseTime6String>:

int setCloseTime(String command)
{
   d4e04:	b510      	push	{r4, lr}
   d4e06:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4e08:	220a      	movs	r2, #10
   d4e0a:	a903      	add	r1, sp, #12
   d4e0c:	6800      	ldr	r0, [r0, #0]
   d4e0e:	f006 fcf9 	bl	db804 <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4e12:	2818      	cmp	r0, #24

int setCloseTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4e14:	4603      	mov	r3, r0
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4e16:	d81d      	bhi.n	d4e54 <_Z12setCloseTime6String+0x50>
  sysStatus.closeTime = tempTime;
   d4e18:	4a11      	ldr	r2, [pc, #68]	; (d4e60 <_Z12setCloseTime6String+0x5c>)
   d4e1a:	6250      	str	r0, [r2, #36]	; 0x24
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4e1c:	4a11      	ldr	r2, [pc, #68]	; (d4e64 <_Z12setCloseTime6String+0x60>)
   d4e1e:	2401      	movs	r4, #1
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4e20:	f44f 7180 	mov.w	r1, #256	; 0x100
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  sysStatus.closeTime = tempTime;
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4e24:	7014      	strb	r4, [r2, #0]
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4e26:	a806      	add	r0, sp, #24
   d4e28:	4a0f      	ldr	r2, [pc, #60]	; (d4e68 <_Z12setCloseTime6String+0x64>)
   d4e2a:	f001 ffb3 	bl	d6d94 <snprintf>
  waitUntil(meterParticlePublish);
   d4e2e:	f7ff fbd5 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d4e32:	f001 fef7 	bl	d6c24 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d4e36:	b178      	cbz	r0, d4e58 <_Z12setCloseTime6String+0x54>
   d4e38:	4b0c      	ldr	r3, [pc, #48]	; (d4e6c <_Z12setCloseTime6String+0x68>)
   d4e3a:	490d      	ldr	r1, [pc, #52]	; (d4e70 <_Z12setCloseTime6String+0x6c>)
   d4e3c:	781b      	ldrb	r3, [r3, #0]
   d4e3e:	2200      	movs	r2, #0
   d4e40:	f88d 2000 	strb.w	r2, [sp]
   d4e44:	a804      	add	r0, sp, #16
   d4e46:	aa06      	add	r2, sp, #24
   d4e48:	f7ff f9df 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d4e4c:	a805      	add	r0, sp, #20
   d4e4e:	f7ff fc1c 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e52:	e001      	b.n	d4e58 <_Z12setCloseTime6String+0x54>
int setCloseTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4e54:	2000      	movs	r0, #0
   d4e56:	e000      	b.n	d4e5a <_Z12setCloseTime6String+0x56>
  sysStatus.closeTime = tempTime;
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  return 1;
   d4e58:	4620      	mov	r0, r4
}
   d4e5a:	b046      	add	sp, #280	; 0x118
   d4e5c:	bd10      	pop	{r4, pc}
   d4e5e:	bf00      	nop
   d4e60:	2003e16c 	.word	0x2003e16c
   d4e64:	2003e149 	.word	0x2003e149
   d4e68:	000dcedb 	.word	0x000dcedb
   d4e6c:	2003e0a0 	.word	0x2003e0a0
   d4e70:	000dd01a 	.word	0x000dd01a

000d4e74 <_Z15setLowPowerMode6String>:


int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4e74:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4e76:	4927      	ldr	r1, [pc, #156]	; (d4f14 <_Z15setLowPowerMode6String+0xa0>)
   d4e78:	b085      	sub	sp, #20
   d4e7a:	4604      	mov	r4, r0
   d4e7c:	f003 f85b 	bl	d7f36 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4e80:	b928      	cbnz	r0, d4e8e <_Z15setLowPowerMode6String+0x1a>
   d4e82:	4925      	ldr	r1, [pc, #148]	; (d4f18 <_Z15setLowPowerMode6String+0xa4>)
   d4e84:	4620      	mov	r0, r4
   d4e86:	f003 f856 	bl	d7f36 <_ZNK6String6equalsEPKc>
   d4e8a:	2800      	cmp	r0, #0
   d4e8c:	d03f      	beq.n	d4f0e <_Z15setLowPowerMode6String+0x9a>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4e8e:	4921      	ldr	r1, [pc, #132]	; (d4f14 <_Z15setLowPowerMode6String+0xa0>)
   d4e90:	4620      	mov	r0, r4
   d4e92:	f003 f850 	bl	d7f36 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4e96:	4605      	mov	r5, r0
   d4e98:	b140      	cbz	r0, d4eac <_Z15setLowPowerMode6String+0x38>
  {
    if (sysStatus.verboseMode && Particle.connected()) {
   d4e9a:	4b20      	ldr	r3, [pc, #128]	; (d4f1c <_Z15setLowPowerMode6String+0xa8>)
   d4e9c:	791a      	ldrb	r2, [r3, #4]
   d4e9e:	461c      	mov	r4, r3
   d4ea0:	b112      	cbz	r2, d4ea8 <_Z15setLowPowerMode6String+0x34>
   d4ea2:	f001 febf 	bl	d6c24 <spark_cloud_flag_connected>
   d4ea6:	b998      	cbnz	r0, d4ed0 <_Z15setLowPowerMode6String+0x5c>
      waitUntil(meterParticlePublish);
      Particle.publish("Mode","Low Power", PRIVATE);
    }
    sysStatus.lowPowerMode = true;
   d4ea8:	2301      	movs	r3, #1
   d4eaa:	e00c      	b.n	d4ec6 <_Z15setLowPowerMode6String+0x52>
   d4eac:	491a      	ldr	r1, [pc, #104]	; (d4f18 <_Z15setLowPowerMode6String+0xa4>)
   d4eae:	4620      	mov	r0, r4
   d4eb0:	f003 f841 	bl	d7f36 <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d4eb4:	b140      	cbz	r0, d4ec8 <_Z15setLowPowerMode6String+0x54>
  {
    if (sysStatus.verboseMode && Particle.connected()) {
   d4eb6:	4b19      	ldr	r3, [pc, #100]	; (d4f1c <_Z15setLowPowerMode6String+0xa8>)
   d4eb8:	791a      	ldrb	r2, [r3, #4]
   d4eba:	461c      	mov	r4, r3
   d4ebc:	b112      	cbz	r2, d4ec4 <_Z15setLowPowerMode6String+0x50>
   d4ebe:	f001 feb1 	bl	d6c24 <spark_cloud_flag_connected>
   d4ec2:	b9a8      	cbnz	r0, d4ef0 <_Z15setLowPowerMode6String+0x7c>
      waitUntil(meterParticlePublish);
      Particle.publish("Mode","Normal Operations", PRIVATE);
    }
    sysStatus.lowPowerMode = false;
   d4ec4:	2300      	movs	r3, #0
   d4ec6:	71a3      	strb	r3, [r4, #6]
  }
  systemStatusWriteNeeded = true;
   d4ec8:	4b15      	ldr	r3, [pc, #84]	; (d4f20 <_Z15setLowPowerMode6String+0xac>)
   d4eca:	2001      	movs	r0, #1
   d4ecc:	7018      	strb	r0, [r3, #0]
   d4ece:	e01e      	b.n	d4f0e <_Z15setLowPowerMode6String+0x9a>
{
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
  if (command == "1")                                                 // Command calls for setting lowPowerMode
  {
    if (sysStatus.verboseMode && Particle.connected()) {
      waitUntil(meterParticlePublish);
   d4ed0:	f7ff fb84 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d4ed4:	4b13      	ldr	r3, [pc, #76]	; (d4f24 <_Z15setLowPowerMode6String+0xb0>)
      Particle.publish("Mode","Low Power", PRIVATE);
   d4ed6:	4914      	ldr	r1, [pc, #80]	; (d4f28 <_Z15setLowPowerMode6String+0xb4>)
   d4ed8:	781b      	ldrb	r3, [r3, #0]
   d4eda:	2200      	movs	r2, #0
   d4edc:	f88d 2000 	strb.w	r2, [sp]
   d4ee0:	a802      	add	r0, sp, #8
   d4ee2:	4a12      	ldr	r2, [pc, #72]	; (d4f2c <_Z15setLowPowerMode6String+0xb8>)
   d4ee4:	f7ff f991 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d4ee8:	a803      	add	r0, sp, #12
   d4eea:	f7ff fbce 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4eee:	e7db      	b.n	d4ea8 <_Z15setLowPowerMode6String+0x34>
    sysStatus.lowPowerMode = true;
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
  {
    if (sysStatus.verboseMode && Particle.connected()) {
      waitUntil(meterParticlePublish);
   d4ef0:	f7ff fb74 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d4ef4:	4b0b      	ldr	r3, [pc, #44]	; (d4f24 <_Z15setLowPowerMode6String+0xb0>)
      Particle.publish("Mode","Normal Operations", PRIVATE);
   d4ef6:	4a0e      	ldr	r2, [pc, #56]	; (d4f30 <_Z15setLowPowerMode6String+0xbc>)
   d4ef8:	781b      	ldrb	r3, [r3, #0]
   d4efa:	490b      	ldr	r1, [pc, #44]	; (d4f28 <_Z15setLowPowerMode6String+0xb4>)
   d4efc:	f88d 5000 	strb.w	r5, [sp]
   d4f00:	a802      	add	r0, sp, #8
   d4f02:	f7ff f982 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d4f06:	a803      	add	r0, sp, #12
   d4f08:	f7ff fbbf 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f0c:	e7da      	b.n	d4ec4 <_Z15setLowPowerMode6String+0x50>
    }
    sysStatus.lowPowerMode = false;
  }
  systemStatusWriteNeeded = true;
  return 1;
}
   d4f0e:	b005      	add	sp, #20
   d4f10:	bd30      	pop	{r4, r5, pc}
   d4f12:	bf00      	nop
   d4f14:	000dd101 	.word	0x000dd101
   d4f18:	000dce66 	.word	0x000dce66
   d4f1c:	2003e16c 	.word	0x2003e16c
   d4f20:	2003e149 	.word	0x2003e149
   d4f24:	2003e0a0 	.word	0x2003e0a0
   d4f28:	000dce7e 	.word	0x000dce7e
   d4f2c:	000dcef2 	.word	0x000dcef2
   d4f30:	000dcefc 	.word	0x000dcefc

000d4f34 <_Z22publishStateTransitionv>:
  }
  else return 0;
}

void publishStateTransition(void)
{
   d4f34:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4f36:	4d16      	ldr	r5, [pc, #88]	; (d4f90 <_Z22publishStateTransitionv+0x5c>)
   d4f38:	4c16      	ldr	r4, [pc, #88]	; (d4f94 <_Z22publishStateTransitionv+0x60>)
   d4f3a:	4917      	ldr	r1, [pc, #92]	; (d4f98 <_Z22publishStateTransitionv+0x64>)
   d4f3c:	782a      	ldrb	r2, [r5, #0]
   d4f3e:	7820      	ldrb	r0, [r4, #0]
  }
  else return 0;
}

void publishStateTransition(void)
{
   d4f40:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4f42:	230e      	movs	r3, #14
   d4f44:	fb03 1202 	mla	r2, r3, r2, r1
   d4f48:	9200      	str	r2, [sp, #0]
   d4f4a:	fb03 1300 	mla	r3, r3, r0, r1
   d4f4e:	4a13      	ldr	r2, [pc, #76]	; (d4f9c <_Z22publishStateTransitionv+0x68>)
   d4f50:	2128      	movs	r1, #40	; 0x28
   d4f52:	a804      	add	r0, sp, #16
   d4f54:	f001 ff1e 	bl	d6d94 <snprintf>
  oldState = state;
   d4f58:	782b      	ldrb	r3, [r5, #0]
   d4f5a:	7023      	strb	r3, [r4, #0]
   d4f5c:	f001 fe62 	bl	d6c24 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d4f60:	b170      	cbz	r0, d4f80 <_Z22publishStateTransitionv+0x4c>
    waitUntil(meterParticlePublish);
   d4f62:	f7ff fb3b 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d4f66:	4b0e      	ldr	r3, [pc, #56]	; (d4fa0 <_Z22publishStateTransitionv+0x6c>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d4f68:	490e      	ldr	r1, [pc, #56]	; (d4fa4 <_Z22publishStateTransitionv+0x70>)
   d4f6a:	781b      	ldrb	r3, [r3, #0]
   d4f6c:	2200      	movs	r2, #0
   d4f6e:	f88d 2000 	strb.w	r2, [sp]
   d4f72:	a802      	add	r0, sp, #8
   d4f74:	aa04      	add	r2, sp, #16
   d4f76:	f7ff f948 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d4f7a:	a803      	add	r0, sp, #12
   d4f7c:	f7ff fb85 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  Serial.println(stateTransitionString);
   d4f80:	f003 fb9a 	bl	d86b8 <_Z16_fetch_usbserialv>
   d4f84:	a904      	add	r1, sp, #16
   d4f86:	f002 fef6 	bl	d7d76 <_ZN5Print7printlnEPKc>
}
   d4f8a:	b00f      	add	sp, #60	; 0x3c
   d4f8c:	bd30      	pop	{r4, r5, pc}
   d4f8e:	bf00      	nop
   d4f90:	2003e0b5 	.word	0x2003e0b5
   d4f94:	2003e0ac 	.word	0x2003e0ac
   d4f98:	2003def0 	.word	0x2003def0
   d4f9c:	000dcf0e 	.word	0x000dcf0e
   d4fa0:	2003e0a0 	.word	0x2003e0a0
   d4fa4:	000dcf1c 	.word	0x000dcf1c

000d4fa8 <_Z12dailyCleanupv>:
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
   d4fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4fac:	b085      	sub	sp, #20
  waitUntil(meterParticlePublish);
   d4fae:	f7ff fb15 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d4fb2:	4b1f      	ldr	r3, [pc, #124]	; (d5030 <_Z12dailyCleanupv+0x88>)
  Particle.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d4fb4:	4a1f      	ldr	r2, [pc, #124]	; (d5034 <_Z12dailyCleanupv+0x8c>)
   d4fb6:	781b      	ldrb	r3, [r3, #0]
   d4fb8:	491f      	ldr	r1, [pc, #124]	; (d5038 <_Z12dailyCleanupv+0x90>)

  sysStatus.verboseMode = false;
   d4fba:	4c20      	ldr	r4, [pc, #128]	; (d503c <_Z12dailyCleanupv+0x94>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4fbc:	2500      	movs	r5, #0
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
  waitUntil(meterParticlePublish);
  Particle.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d4fbe:	a802      	add	r0, sp, #8
   d4fc0:	f88d 5000 	strb.w	r5, [sp]
   d4fc4:	f7ff f921 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d4fc8:	a803      	add	r0, sp, #12
   d4fca:	f7ff fb5e 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  sysStatus.verboseMode = false;
   d4fce:	7125      	strb	r5, [r4, #4]
   d4fd0:	f001 fe28 	bl	d6c24 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4fd4:	b110      	cbz	r0, d4fdc <_Z12dailyCleanupv+0x34>
            return false;
        }
        return spark_sync_time(NULL);
   d4fd6:	4628      	mov	r0, r5
   d4fd8:	f001 fe44 	bl	d6c64 <spark_sync_time>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4fdc:	2000      	movs	r0, #0
   d4fde:	f001 fc19 	bl	d6814 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4fe2:	2700      	movs	r7, #0
   d4fe4:	4606      	mov	r6, r0
   d4fe6:	f247 582f 	movw	r8, #29999	; 0x752f
   d4fea:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4fee:	2000      	movs	r0, #0
   d4ff0:	f001 fc10 	bl	d6814 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4ff4:	1b80      	subs	r0, r0, r6
   d4ff6:	eb61 0107 	sbc.w	r1, r1, r7
   d4ffa:	4589      	cmp	r9, r1
   d4ffc:	bf08      	it	eq
   d4ffe:	4580      	cmpeq	r8, r0
   d5000:	d305      	bcc.n	d500e <_Z12dailyCleanupv+0x66>

  Particle.syncTime();                                                // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
   d5002:	f7ff f8f5 	bl	d41f0 <_ZN10CloudClass12syncTimeDoneEv.isra.36>
   d5006:	b910      	cbnz	r0, d500e <_Z12dailyCleanupv+0x66>
            spark_process();
   d5008:	f001 fdf4 	bl	d6bf4 <spark_process>
   d500c:	e7ef      	b.n	d4fee <_Z12dailyCleanupv+0x46>
   d500e:	f7ff f8ef 	bl	d41f0 <_ZN10CloudClass12syncTimeDoneEv.isra.36>

  if (sysStatus.solarPowerMode || sysStatus.stateOfCharge <= 70) {    // If Solar or if the battery is being discharged
   d5012:	7963      	ldrb	r3, [r4, #5]
   d5014:	b91b      	cbnz	r3, d501e <_Z12dailyCleanupv+0x76>
   d5016:	4b09      	ldr	r3, [pc, #36]	; (d503c <_Z12dailyCleanupv+0x94>)
   d5018:	689b      	ldr	r3, [r3, #8]
   d501a:	2b46      	cmp	r3, #70	; 0x46
   d501c:	dc01      	bgt.n	d5022 <_Z12dailyCleanupv+0x7a>
    sysStatus.lowPowerMode = true;
   d501e:	2301      	movs	r3, #1
   d5020:	71a3      	strb	r3, [r4, #6]
  }
  systemStatusWriteNeeded=true;
   d5022:	4b07      	ldr	r3, [pc, #28]	; (d5040 <_Z12dailyCleanupv+0x98>)
   d5024:	2201      	movs	r2, #1
   d5026:	701a      	strb	r2, [r3, #0]
}
   d5028:	b005      	add	sp, #20
   d502a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d502e:	bf00      	nop
   d5030:	2003e0a0 	.word	0x2003e0a0
   d5034:	000dcf2d 	.word	0x000dcf2d
   d5038:	000dcf35 	.word	0x000dcf35
   d503c:	2003e16c 	.word	0x2003e16c
   d5040:	2003e149 	.word	0x2003e149

000d5044 <loop>:

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
}

void loop()
{
   d5044:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(state) {
   d5046:	4c97      	ldr	r4, [pc, #604]	; (d52a4 <loop+0x260>)
   d5048:	7823      	ldrb	r3, [r4, #0]
   d504a:	3b01      	subs	r3, #1

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
}

void loop()
{
   d504c:	b089      	sub	sp, #36	; 0x24
  switch(state) {
   d504e:	2b05      	cmp	r3, #5
   d5050:	f200 81e6 	bhi.w	d5420 <loop+0x3dc>
   d5054:	e8df f013 	tbh	[pc, r3, lsl #1]
   d5058:	0006016c 	.word	0x0006016c
   d505c:	00a60063 	.word	0x00a60063
   d5060:	011500e8 	.word	0x011500e8
  case IDLE_STATE:                                                    // Where we spend most time - note, the order of these conditionals is important
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5064:	4d90      	ldr	r5, [pc, #576]	; (d52a8 <loop+0x264>)
   d5066:	792b      	ldrb	r3, [r5, #4]
   d5068:	b12b      	cbz	r3, d5076 <loop+0x32>
   d506a:	4b90      	ldr	r3, [pc, #576]	; (d52ac <loop+0x268>)
   d506c:	781b      	ldrb	r3, [r3, #0]
   d506e:	2b02      	cmp	r3, #2
   d5070:	d001      	beq.n	d5076 <loop+0x32>
   d5072:	f7ff ff5f 	bl	d4f34 <_Z22publishStateTransitionv>
    if (watchdogFlag) petWatchdog();                                  // Watchdog flag is raised - time to pet the watchdog
   d5076:	4b8e      	ldr	r3, [pc, #568]	; (d52b0 <loop+0x26c>)
   d5078:	781b      	ldrb	r3, [r3, #0]
   d507a:	b10b      	cbz	r3, d5080 <loop+0x3c>
   d507c:	f7ff f97c 	bl	d4378 <_Z11petWatchdogv>
    if (sensorDetect) recordCount();                                  // The ISR had raised the sensor flag
   d5080:	4b8c      	ldr	r3, [pc, #560]	; (d52b4 <loop+0x270>)
   d5082:	781b      	ldrb	r3, [r3, #0]
   d5084:	b10b      	cbz	r3, d508a <loop+0x46>
   d5086:	f7ff fba9 	bl	d47dc <_Z11recordCountv>
    if (current.hourlyCountInFlight) {                                // Cleared here as there could be counts coming in while "in Flight"
   d508a:	4b8b      	ldr	r3, [pc, #556]	; (d52b8 <loop+0x274>)
   d508c:	4f8b      	ldr	r7, [pc, #556]	; (d52bc <loop+0x278>)
   d508e:	6859      	ldr	r1, [r3, #4]
   d5090:	b169      	cbz	r1, d50ae <loop+0x6a>
      current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d5092:	681a      	ldr	r2, [r3, #0]
   d5094:	1a52      	subs	r2, r2, r1
   d5096:	601a      	str	r2, [r3, #0]
      current.hourlyCountInFlight = current.maxMinValue = current.alertCount = 0; // Zero out the counts until next reporting period
   d5098:	2200      	movs	r2, #0
   d509a:	615a      	str	r2, [r3, #20]
   d509c:	619a      	str	r2, [r3, #24]
   d509e:	605a      	str	r2, [r3, #4]
      currentCountsWriteNeeded=true;
   d50a0:	2301      	movs	r3, #1
   d50a2:	703b      	strb	r3, [r7, #0]
      if (Time.hour() == 0) resetEverything();                        // We have reported for the previous day - reset for the next - only needed if no sleep
   d50a4:	f003 f9e8 	bl	d8478 <_ZN9TimeClass4hourEv>
   d50a8:	b908      	cbnz	r0, d50ae <loop+0x6a>
   d50aa:	f7ff fa6b 	bl	d4584 <_Z15resetEverythingv>
    }
    if (systemStatusWriteNeeded) {
   d50ae:	4e84      	ldr	r6, [pc, #528]	; (d52c0 <loop+0x27c>)
   d50b0:	7833      	ldrb	r3, [r6, #0]
   d50b2:	b13b      	cbz	r3, d50c4 <loop+0x80>
   d50b4:	232c      	movs	r3, #44	; 0x2c
   d50b6:	4a7c      	ldr	r2, [pc, #496]	; (d52a8 <loop+0x264>)
   d50b8:	4882      	ldr	r0, [pc, #520]	; (d52c4 <loop+0x280>)
   d50ba:	2101      	movs	r1, #1
   d50bc:	f000 fe35 	bl	d5d2a <_ZN6MB85RC9writeDataEjPKhj>
      fram.put(FRAM::systemStatusAddr,sysStatus);
      systemStatusWriteNeeded = false;
   d50c0:	2300      	movs	r3, #0
   d50c2:	7033      	strb	r3, [r6, #0]
    }
    if (currentCountsWriteNeeded) {
   d50c4:	783b      	ldrb	r3, [r7, #0]
   d50c6:	b12b      	cbz	r3, d50d4 <loop+0x90>
   d50c8:	231c      	movs	r3, #28
   d50ca:	4a7b      	ldr	r2, [pc, #492]	; (d52b8 <loop+0x274>)
   d50cc:	487d      	ldr	r0, [pc, #500]	; (d52c4 <loop+0x280>)
   d50ce:	2150      	movs	r1, #80	; 0x50
   d50d0:	f000 fe2b 	bl	d5d2a <_ZN6MB85RC9writeDataEjPKhj>
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
    }
    systemStatusWriteNeeded = currentCountsWriteNeeded = false;
   d50d4:	2300      	movs	r3, #0
   d50d6:	703b      	strb	r3, [r7, #0]
   d50d8:	7033      	strb	r3, [r6, #0]
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;  // When in low power mode, we can nap between taps
   d50da:	79ab      	ldrb	r3, [r5, #6]
   d50dc:	b14b      	cbz	r3, d50f2 <loop+0xae>
   d50de:	f001 fb79 	bl	d67d4 <HAL_Timer_Get_Milli_Seconds>
   d50e2:	4b79      	ldr	r3, [pc, #484]	; (d52c8 <loop+0x284>)
   d50e4:	681b      	ldr	r3, [r3, #0]
   d50e6:	1ac0      	subs	r0, r0, r3
   d50e8:	4b78      	ldr	r3, [pc, #480]	; (d52cc <loop+0x288>)
   d50ea:	681b      	ldr	r3, [r3, #0]
   d50ec:	4298      	cmp	r0, r3
   d50ee:	f200 819c 	bhi.w	d542a <loop+0x3e6>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;  // We want to report on the hour but not after bedtime
   d50f2:	f003 f9c1 	bl	d8478 <_ZN9TimeClass4hourEv>
   d50f6:	4b76      	ldr	r3, [pc, #472]	; (d52d0 <loop+0x28c>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	4298      	cmp	r0, r3
   d50fc:	bf1c      	itt	ne
   d50fe:	2305      	movne	r3, #5
   d5100:	7023      	strbne	r3, [r4, #0]
    if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d5102:	f003 f9b9 	bl	d8478 <_ZN9TimeClass4hourEv>
   d5106:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5108:	4298      	cmp	r0, r3
   d510a:	f280 8191 	bge.w	d5430 <loop+0x3ec>
   d510e:	f003 f9b3 	bl	d8478 <_ZN9TimeClass4hourEv>
   d5112:	4b65      	ldr	r3, [pc, #404]	; (d52a8 <loop+0x264>)
   d5114:	6a1b      	ldr	r3, [r3, #32]
   d5116:	4298      	cmp	r0, r3
   d5118:	f2c0 818a 	blt.w	d5430 <loop+0x3ec>
   d511c:	e180      	b.n	d5420 <loop+0x3dc>
    break;

  case SLEEPING_STATE: {                                              // This state is triggered once the park closes and runs until it opens
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d511e:	4b62      	ldr	r3, [pc, #392]	; (d52a8 <loop+0x264>)
   d5120:	791a      	ldrb	r2, [r3, #4]
   d5122:	461d      	mov	r5, r3
   d5124:	b12a      	cbz	r2, d5132 <loop+0xee>
   d5126:	4b61      	ldr	r3, [pc, #388]	; (d52ac <loop+0x268>)
   d5128:	781b      	ldrb	r3, [r3, #0]
   d512a:	2b03      	cmp	r3, #3
   d512c:	d001      	beq.n	d5132 <loop+0xee>
   d512e:	f7ff ff01 	bl	d4f34 <_Z22publishStateTransitionv>
    detachInterrupt(intPin);                                          // Done sensing for the day
   d5132:	200d      	movs	r0, #13
   d5134:	f002 fc00 	bl	d7938 <_Z15detachInterruptt>

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d5138:	4b66      	ldr	r3, [pc, #408]	; (d52d4 <loop+0x290>)
   d513a:	681b      	ldr	r3, [r3, #0]
    nrf_gpio_pin_set(nrf_pin);
   d513c:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
   d5140:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   d5144:	f003 031f 	and.w	r3, r3, #31
   d5148:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d514c:	f7fe ffd8 	bl	d4100 <nrf_gpio_pin_set>
    pinSetFast(disableModule);                                        // Turn off the pressure module for the hour
    if (current.hourlyCount) {                                        // If this number is not zero then we need to send this last count
   d5150:	4b59      	ldr	r3, [pc, #356]	; (d52b8 <loop+0x274>)
   d5152:	681b      	ldr	r3, [r3, #0]
   d5154:	b10b      	cbz	r3, d515a <loop+0x116>
      state = REPORTING_STATE;
   d5156:	2305      	movs	r3, #5
   d5158:	e0e8      	b.n	d532c <loop+0x2e8>
      break;
    }
    if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   d515a:	78eb      	ldrb	r3, [r5, #3]
   d515c:	b10b      	cbz	r3, d5162 <loop+0x11e>
   d515e:	f7ff f9db 	bl	d4518 <_Z22disconnectFromParticlev>
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d5162:	2100      	movs	r1, #0
   d5164:	2007      	movs	r0, #7
   d5166:	f003 fba2 	bl	d88ae <digitalWrite>
    petWatchdog();
   d516a:	f7ff f905 	bl	d4378 <_Z11petWatchdogv>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d516e:	f003 f97c 	bl	d846a <_ZN9TimeClass3nowEv>
    rtc.setAlarm(wakeInSeconds);                                      // Very deep sleep till the next hour - then resets
   d5172:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d5176:	fb90 f1f3 	sdiv	r1, r0, r3
   d517a:	fb01 0013 	mls	r0, r1, r3, r0
   d517e:	1a19      	subs	r1, r3, r0
   d5180:	f5b1 6f61 	cmp.w	r1, #3600	; 0xe10
   d5184:	bfa8      	it	ge
   d5186:	f44f 6161 	movge.w	r1, #3600	; 0xe10
   d518a:	2300      	movs	r3, #0
   d518c:	2201      	movs	r2, #1
   d518e:	4852      	ldr	r0, [pc, #328]	; (d52d8 <loop+0x294>)
   d5190:	f001 fa43 	bl	d661a <_ZN8MCP794108setAlarmEibi>
    System.sleep(SLEEP_MODE_SOFTPOWEROFF);                            // Sleeps then the RTC will wake on D8
   d5194:	4b51      	ldr	r3, [pc, #324]	; (d52dc <loop+0x298>)
   d5196:	2200      	movs	r2, #0
   d5198:	681b      	ldr	r3, [r3, #0]
   d519a:	2102      	movs	r1, #2
   d519c:	a806      	add	r0, sp, #24
   d519e:	f002 ff3b 	bl	d8018 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    } break;
   d51a2:	e13d      	b.n	d5420 <loop+0x3dc>

  case NAPPING_STATE: {  // This state puts the device in low power mode quickly
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d51a4:	4d40      	ldr	r5, [pc, #256]	; (d52a8 <loop+0x264>)
   d51a6:	792b      	ldrb	r3, [r5, #4]
   d51a8:	b12b      	cbz	r3, d51b6 <loop+0x172>
   d51aa:	4b40      	ldr	r3, [pc, #256]	; (d52ac <loop+0x268>)
   d51ac:	781b      	ldrb	r3, [r3, #0]
   d51ae:	2b04      	cmp	r3, #4
   d51b0:	d001      	beq.n	d51b6 <loop+0x172>
   d51b2:	f7ff febf 	bl	d4f34 <_Z22publishStateTransitionv>
    if (sensorDetect) break;                                          // Don't nap until we are done with event
   d51b6:	4b3f      	ldr	r3, [pc, #252]	; (d52b4 <loop+0x270>)
   d51b8:	781a      	ldrb	r2, [r3, #0]
   d51ba:	461e      	mov	r6, r3
   d51bc:	2a00      	cmp	r2, #0
   d51be:	f040 812f 	bne.w	d5420 <loop+0x3dc>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // If we are in connected mode we need to Disconnect from Particle
   d51c2:	78eb      	ldrb	r3, [r5, #3]
   d51c4:	b10b      	cbz	r3, d51ca <loop+0x186>
   d51c6:	f7ff f9a7 	bl	d4518 <_Z22disconnectFromParticlev>
    stayAwake = sysStatus.debounce;                                   // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   d51ca:	4b40      	ldr	r3, [pc, #256]	; (d52cc <loop+0x288>)
   d51cc:	692a      	ldr	r2, [r5, #16]
   d51ce:	601a      	str	r2, [r3, #0]
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d51d0:	f003 f94b 	bl	d846a <_ZN9TimeClass3nowEv>
   d51d4:	4605      	mov	r5, r0
    petWatchdog();                                                    // Reset the watchdog timer interval
   d51d6:	f7ff f8cf 	bl	d4378 <_Z11petWatchdogv>
   d51da:	4b40      	ldr	r3, [pc, #256]	; (d52dc <loop+0x298>)
   d51dc:	220d      	movs	r2, #13
   d51de:	681b      	ldr	r3, [r3, #0]
   d51e0:	f8ad 2016 	strh.w	r2, [sp, #22]
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(sleepMode, flag, s.count()); }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(std::chrono::seconds s) { return sleep(s.count()); }

    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
   d51e4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   d51e8:	9302      	str	r3, [sp, #8]
   d51ea:	fb95 f3f2 	sdiv	r3, r5, r2
   d51ee:	fb02 5013 	mls	r0, r2, r3, r5
   d51f2:	1a10      	subs	r0, r2, r0
   d51f4:	4290      	cmp	r0, r2
   d51f6:	bfa8      	it	ge
   d51f8:	4610      	movge	r0, r2
   d51fa:	2701      	movs	r7, #1
   d51fc:	9001      	str	r0, [sp, #4]
   d51fe:	f10d 0315 	add.w	r3, sp, #21
   d5202:	9700      	str	r7, [sp, #0]
   d5204:	463a      	mov	r2, r7
   d5206:	f10d 0116 	add.w	r1, sp, #22
   d520a:	a806      	add	r0, sp, #24
   d520c:	f88d 7015 	strb.w	r7, [sp, #21]
   d5210:	f002 ff40 	bl	d8094 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.sleep(intPin, RISING, wakeInSeconds);                      // Sensor will wake us with an interrupt or timeout at the hour
    if (sensorDetect) {                                               // Executions starts here after sleep - time or sensor interrupt?
   d5214:	7833      	ldrb	r3, [r6, #0]
   d5216:	b12b      	cbz	r3, d5224 <loop+0x1e0>
      awokeFromNap=true;                                              // Since millis() stops when sleeping - need this to debounce
   d5218:	4b31      	ldr	r3, [pc, #196]	; (d52e0 <loop+0x29c>)
   d521a:	701f      	strb	r7, [r3, #0]
   d521c:	f001 fada 	bl	d67d4 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d5220:	4b29      	ldr	r3, [pc, #164]	; (d52c8 <loop+0x284>)
   d5222:	6018      	str	r0, [r3, #0]
    }
    state = IDLE_STATE;                                               // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
   d5224:	2302      	movs	r3, #2
   d5226:	e081      	b.n	d532c <loop+0x2e8>
    } break;

  case REPORTING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5228:	4d1f      	ldr	r5, [pc, #124]	; (d52a8 <loop+0x264>)
   d522a:	792b      	ldrb	r3, [r5, #4]
   d522c:	b12b      	cbz	r3, d523a <loop+0x1f6>
   d522e:	4b1f      	ldr	r3, [pc, #124]	; (d52ac <loop+0x268>)
   d5230:	781b      	ldrb	r3, [r3, #0]
   d5232:	2b05      	cmp	r3, #5
   d5234:	d001      	beq.n	d523a <loop+0x1f6>
   d5236:	f7ff fe7d 	bl	d4f34 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();              // Only attempt to connect if not already New process to get connected
   d523a:	78eb      	ldrb	r3, [r5, #3]
   d523c:	b90b      	cbnz	r3, d5242 <loop+0x1fe>
   d523e:	f7ff fb73 	bl	d4928 <_Z17connectToParticlev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5242:	f001 fcef 	bl	d6c24 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5246:	b160      	cbz	r0, d5262 <loop+0x21e>
      if (Time.hour() == sysStatus.openTime) dailyCleanup();          // Once a day, clean house
   d5248:	f003 f916 	bl	d8478 <_ZN9TimeClass4hourEv>
   d524c:	6a2b      	ldr	r3, [r5, #32]
   d524e:	4298      	cmp	r0, r3
   d5250:	d101      	bne.n	d5256 <loop+0x212>
   d5252:	f7ff fea9 	bl	d4fa8 <_Z12dailyCleanupv>
      takeMeasurements();                                             // Update Temp, Battery and Signal Strength values
   d5256:	f7ff f86f 	bl	d4338 <_Z16takeMeasurementsv>
      sendEvent();                                                    // Send data to Ubidots
   d525a:	f7ff fa2d 	bl	d46b8 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d525e:	2306      	movs	r3, #6
   d5260:	e004      	b.n	d526c <loop+0x228>
   d5262:	f001 fab7 	bl	d67d4 <HAL_Timer_Get_Milli_Seconds>
    }
    else {
      resetTimeStamp = millis();
   d5266:	4b1f      	ldr	r3, [pc, #124]	; (d52e4 <loop+0x2a0>)
   d5268:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;
   d526a:	2301      	movs	r3, #1
   d526c:	7023      	strb	r3, [r4, #0]
    }
    if (sysStatus.lowPowerMode) Time.setTime(rtc.getRTCTime());
   d526e:	79ab      	ldrb	r3, [r5, #6]
   d5270:	2b00      	cmp	r3, #0
   d5272:	f000 80d5 	beq.w	d5420 <loop+0x3dc>
   d5276:	4818      	ldr	r0, [pc, #96]	; (d52d8 <loop+0x294>)
   d5278:	f000 fff2 	bl	d6260 <_ZNK8MCP7941010getRTCTimeEv>
   d527c:	f003 f814 	bl	d82a8 <_ZN9TimeClass7setTimeEl>
   d5280:	e0ce      	b.n	d5420 <loop+0x3dc>
    break;

  case RESP_WAIT_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5282:	4b09      	ldr	r3, [pc, #36]	; (d52a8 <loop+0x264>)
   d5284:	791b      	ldrb	r3, [r3, #4]
   d5286:	b12b      	cbz	r3, d5294 <loop+0x250>
   d5288:	4b08      	ldr	r3, [pc, #32]	; (d52ac <loop+0x268>)
   d528a:	781b      	ldrb	r3, [r3, #0]
   d528c:	2b06      	cmp	r3, #6
   d528e:	d001      	beq.n	d5294 <loop+0x250>
   d5290:	f7ff fe50 	bl	d4f34 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received back to IDLE state
   d5294:	4b14      	ldr	r3, [pc, #80]	; (d52e8 <loop+0x2a4>)
   d5296:	781b      	ldrb	r3, [r3, #0]
   d5298:	bb53      	cbnz	r3, d52f0 <loop+0x2ac>
      stayAwake = stayAwakeLong;                                      // Keeps Electron awake after reboot - helps with recovery
   d529a:	4b0c      	ldr	r3, [pc, #48]	; (d52cc <loop+0x288>)
   d529c:	4a13      	ldr	r2, [pc, #76]	; (d52ec <loop+0x2a8>)
   d529e:	601a      	str	r2, [r3, #0]
   d52a0:	e7bc      	b.n	d521c <loop+0x1d8>
   d52a2:	bf00      	nop
   d52a4:	2003e0b5 	.word	0x2003e0b5
   d52a8:	2003e16c 	.word	0x2003e16c
   d52ac:	2003e0ac 	.word	0x2003e0ac
   d52b0:	2003e0bc 	.word	0x2003e0bc
   d52b4:	2003e068 	.word	0x2003e068
   d52b8:	2003e12c 	.word	0x2003e12c
   d52bc:	2003e128 	.word	0x2003e128
   d52c0:	2003e149 	.word	0x2003e149
   d52c4:	2003e074 	.word	0x2003e074
   d52c8:	2003e0d8 	.word	0x2003e0d8
   d52cc:	2003e0c0 	.word	0x2003e0c0
   d52d0:	2003e0b8 	.word	0x2003e0b8
   d52d4:	2003e0d4 	.word	0x2003e0d4
   d52d8:	2003e084 	.word	0x2003e084
   d52dc:	2003e0c4 	.word	0x2003e0c4
   d52e0:	2003e0b4 	.word	0x2003e0b4
   d52e4:	2003e124 	.word	0x2003e124
   d52e8:	2003e148 	.word	0x2003e148
   d52ec:	00015f90 	.word	0x00015f90
   d52f0:	f001 fa70 	bl	d67d4 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
      state = IDLE_STATE;
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d52f4:	4b4f      	ldr	r3, [pc, #316]	; (d5434 <loop+0x3f0>)
   d52f6:	681b      	ldr	r3, [r3, #0]
   d52f8:	1ac0      	subs	r0, r0, r3
   d52fa:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d52fe:	4298      	cmp	r0, r3
   d5300:	f240 808e 	bls.w	d5420 <loop+0x3dc>
   d5304:	f001 fa66 	bl	d67d4 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5308:	4b4b      	ldr	r3, [pc, #300]	; (d5438 <loop+0x3f4>)
   d530a:	6018      	str	r0, [r3, #0]
      waitUntil(meterParticlePublish);
   d530c:	f7ff f966 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d5310:	4b4a      	ldr	r3, [pc, #296]	; (d543c <loop+0x3f8>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5312:	494b      	ldr	r1, [pc, #300]	; (d5440 <loop+0x3fc>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5314:	781b      	ldrb	r3, [r3, #0]
   d5316:	2200      	movs	r2, #0
   d5318:	f88d 2000 	strb.w	r2, [sp]
   d531c:	a806      	add	r0, sp, #24
   d531e:	4a49      	ldr	r2, [pc, #292]	; (d5444 <loop+0x400>)
   d5320:	f7fe ff73 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d5324:	a807      	add	r0, sp, #28
   d5326:	f7ff f9b0 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
   d532a:	2301      	movs	r3, #1
   d532c:	7023      	strb	r3, [r4, #0]
   d532e:	e077      	b.n	d5420 <loop+0x3dc>
    }
    break;

  case ERROR_STATE:                                                   // To be enhanced - where we deal with errors
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5330:	4c45      	ldr	r4, [pc, #276]	; (d5448 <loop+0x404>)
   d5332:	7923      	ldrb	r3, [r4, #4]
   d5334:	b12b      	cbz	r3, d5342 <loop+0x2fe>
   d5336:	4b45      	ldr	r3, [pc, #276]	; (d544c <loop+0x408>)
   d5338:	781b      	ldrb	r3, [r3, #0]
   d533a:	2b01      	cmp	r3, #1
   d533c:	d001      	beq.n	d5342 <loop+0x2fe>
   d533e:	f7ff fdf9 	bl	d4f34 <_Z22publishStateTransitionv>
   d5342:	f001 fa47 	bl	d67d4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d5346:	4b3c      	ldr	r3, [pc, #240]	; (d5438 <loop+0x3f4>)
   d5348:	681b      	ldr	r3, [r3, #0]
   d534a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d534e:	3330      	adds	r3, #48	; 0x30
   d5350:	4298      	cmp	r0, r3
   d5352:	d965      	bls.n	d5420 <loop+0x3dc>
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d5354:	6963      	ldr	r3, [r4, #20]
   d5356:	2b03      	cmp	r3, #3
   d5358:	dc18      	bgt.n	d538c <loop+0x348>
        waitUntil(meterParticlePublish);
   d535a:	f7ff f93f 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d535e:	f001 fc61 	bl	d6c24 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d5362:	b160      	cbz	r0, d537e <loop+0x33a>
   d5364:	4b35      	ldr	r3, [pc, #212]	; (d543c <loop+0x3f8>)
   d5366:	493a      	ldr	r1, [pc, #232]	; (d5450 <loop+0x40c>)
   d5368:	781b      	ldrb	r3, [r3, #0]
   d536a:	2200      	movs	r2, #0
   d536c:	f88d 2000 	strb.w	r2, [sp]
   d5370:	a806      	add	r0, sp, #24
   d5372:	4a38      	ldr	r2, [pc, #224]	; (d5454 <loop+0x410>)
   d5374:	f7fe ff49 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d5378:	a807      	add	r0, sp, #28
   d537a:	f7ff f986 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d537e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5382:	f001 fd27 	bl	d6dd4 <delay>
        System.reset();
   d5386:	f002 fe44 	bl	d8012 <_ZN11SystemClass5resetEv>
   d538a:	e049      	b.n	d5420 <loop+0x3dc>
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d538c:	f003 f86d 	bl	d846a <_ZN9TimeClass3nowEv>
   d5390:	4b2d      	ldr	r3, [pc, #180]	; (d5448 <loop+0x404>)
   d5392:	4e31      	ldr	r6, [pc, #196]	; (d5458 <loop+0x414>)
   d5394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5396:	1ac0      	subs	r0, r0, r3
   d5398:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d539c:	d924      	bls.n	d53e8 <loop+0x3a4>
        waitUntil(meterParticlePublish);
   d539e:	f7ff f91d 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d53a2:	f001 fc3f 	bl	d6c24 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d53a6:	b160      	cbz	r0, d53c2 <loop+0x37e>
   d53a8:	4b24      	ldr	r3, [pc, #144]	; (d543c <loop+0x3f8>)
   d53aa:	4929      	ldr	r1, [pc, #164]	; (d5450 <loop+0x40c>)
   d53ac:	781b      	ldrb	r3, [r3, #0]
   d53ae:	2200      	movs	r2, #0
   d53b0:	f88d 2000 	strb.w	r2, [sp]
   d53b4:	a806      	add	r0, sp, #24
   d53b6:	4a29      	ldr	r2, [pc, #164]	; (d545c <loop+0x418>)
   d53b8:	f7fe ff27 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d53bc:	a807      	add	r0, sp, #28
   d53be:	f7ff f964 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d53c2:	2500      	movs	r5, #0
        System.reset();
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
        waitUntil(meterParticlePublish);
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
        delay(2000);
   d53c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d53c8:	f001 fd04 	bl	d6dd4 <delay>
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d53cc:	6165      	str	r5, [r4, #20]
        systemStatusWriteNeeded=true;
   d53ce:	2401      	movs	r4, #1
        digitalWrite(deepSleepPin,HIGH);                              // This will cut all power to the Boron AND everything it powers
   d53d0:	4621      	mov	r1, r4
   d53d2:	2006      	movs	r0, #6
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
        waitUntil(meterParticlePublish);
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
        delay(2000);
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
        systemStatusWriteNeeded=true;
   d53d4:	7034      	strb	r4, [r6, #0]
        digitalWrite(deepSleepPin,HIGH);                              // This will cut all power to the Boron AND everything it powers
   d53d6:	f003 fa6a 	bl	d88ae <digitalWrite>
        rtc.setAlarm(10);
   d53da:	462b      	mov	r3, r5
   d53dc:	4622      	mov	r2, r4
   d53de:	210a      	movs	r1, #10
   d53e0:	481f      	ldr	r0, [pc, #124]	; (d5460 <loop+0x41c>)
   d53e2:	f001 f91a 	bl	d661a <_ZN8MCP794108setAlarmEibi>
   d53e6:	e01b      	b.n	d5420 <loop+0x3dc>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        waitUntil(meterParticlePublish);
   d53e8:	f7ff f8f8 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d53ec:	f001 fc1a 	bl	d6c24 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d53f0:	b160      	cbz	r0, d540c <loop+0x3c8>
   d53f2:	4b12      	ldr	r3, [pc, #72]	; (d543c <loop+0x3f8>)
   d53f4:	4916      	ldr	r1, [pc, #88]	; (d5450 <loop+0x40c>)
   d53f6:	781b      	ldrb	r3, [r3, #0]
   d53f8:	2200      	movs	r2, #0
   d53fa:	f88d 2000 	strb.w	r2, [sp]
   d53fe:	a806      	add	r0, sp, #24
   d5400:	4a18      	ldr	r2, [pc, #96]	; (d5464 <loop+0x420>)
   d5402:	f7fe ff02 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d5406:	a807      	add	r0, sp, #28
   d5408:	f7ff f93f 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d540c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5410:	f001 fce0 	bl	d6dd4 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d5414:	2300      	movs	r3, #0
   d5416:	6163      	str	r3, [r4, #20]
        systemStatusWriteNeeded=true;
   d5418:	2301      	movs	r3, #1
   d541a:	7033      	strb	r3, [r6, #0]
        fullModemReset();                                             // Full Modem reset and reboots
   d541c:	f7ff f8ea 	bl	d45f4 <_Z14fullModemResetv>
      }
    }
    break;
  }
  rtc.loop();                                                         // keeps the clock up to date
   d5420:	480f      	ldr	r0, [pc, #60]	; (d5460 <loop+0x41c>)
   d5422:	f001 f845 	bl	d64b0 <_ZN8MCP794104loopEv>
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
}
   d5426:	b009      	add	sp, #36	; 0x24
   d5428:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (currentCountsWriteNeeded) {
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
    }
    systemStatusWriteNeeded = currentCountsWriteNeeded = false;
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;  // When in low power mode, we can nap between taps
   d542a:	2304      	movs	r3, #4
   d542c:	7023      	strb	r3, [r4, #0]
   d542e:	e660      	b.n	d50f2 <loop+0xae>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;  // We want to report on the hour but not after bedtime
    if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d5430:	2303      	movs	r3, #3
   d5432:	e77b      	b.n	d532c <loop+0x2e8>
   d5434:	2003e0b0 	.word	0x2003e0b0
   d5438:	2003e124 	.word	0x2003e124
   d543c:	2003e0a0 	.word	0x2003e0a0
   d5440:	000dcf43 	.word	0x000dcf43
   d5444:	000dcd39 	.word	0x000dcd39
   d5448:	2003e16c 	.word	0x2003e16c
   d544c:	2003e0ac 	.word	0x2003e0ac
   d5450:	000dcf70 	.word	0x000dcf70
   d5454:	000dcf5c 	.word	0x000dcf5c
   d5458:	2003e149 	.word	0x2003e149
   d545c:	000dcf76 	.word	0x000dcf76
   d5460:	2003e084 	.word	0x2003e084
   d5464:	000dcf90 	.word	0x000dcf90

000d5468 <_Z12setDSTOffset6String>:
    sysStatus.lowPowerMode = true;
  }
  systemStatusWriteNeeded=true;
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d5468:	b530      	push	{r4, r5, lr}
   d546a:	ed2d 8b02 	vpush	{d8}
   d546e:	b0cd      	sub	sp, #308	; 0x134
   d5470:	4605      	mov	r5, r0
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d5472:	f002 fffa 	bl	d846a <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d5476:	220a      	movs	r2, #10
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d5478:	4604      	mov	r4, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d547a:	a905      	add	r1, sp, #20
   d547c:	6828      	ldr	r0, [r5, #0]
   d547e:	f006 f9c1 	bl	db804 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d5482:	b2c3      	uxtb	r3, r0
   d5484:	2b02      	cmp	r3, #2
   d5486:	d867      	bhi.n	d5558 <_Z12setDSTOffset6String+0xf0>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d5488:	b240      	sxtb	r0, r0
   d548a:	ee07 0a90 	vmov	s15, r0
   d548e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   d5492:	eeb0 0a48 	vmov.f32	s0, s16
   d5496:	f002 fedd 	bl	d8254 <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d549a:	4b35      	ldr	r3, [pc, #212]	; (d5570 <_Z12setDSTOffset6String+0x108>)
   d549c:	ed83 8a07 	vstr	s16, [r3, #28]
  systemStatusWriteNeeded = true;
   d54a0:	4b34      	ldr	r3, [pc, #208]	; (d5574 <_Z12setDSTOffset6String+0x10c>)
   d54a2:	2201      	movs	r2, #1
   d54a4:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d54a6:	ee18 0a10 	vmov	r0, s16
   d54aa:	f003 fd5b 	bl	d8f64 <__aeabi_f2d>
   d54ae:	4a32      	ldr	r2, [pc, #200]	; (d5578 <_Z12setDSTOffset6String+0x110>)
   d54b0:	e9cd 0100 	strd	r0, r1, [sp]
   d54b4:	f44f 7180 	mov.w	r1, #256	; 0x100
   d54b8:	a80c      	add	r0, sp, #48	; 0x30
   d54ba:	f001 fc6b 	bl	d6d94 <snprintf>
  waitUntil(meterParticlePublish);
   d54be:	f7ff f88d 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d54c2:	f002 ffb1 	bl	d8428 <_ZN9TimeClass7isValidEv>
   d54c6:	b138      	cbz	r0, d54d8 <_Z12setDSTOffset6String+0x70>
   d54c8:	f7ff f8c0 	bl	d464c <_Z8isDSTusav>
   d54cc:	b110      	cbz	r0, d54d4 <_Z12setDSTOffset6String+0x6c>
   d54ce:	f002 fedb 	bl	d8288 <_ZN9TimeClass8beginDSTEv>
   d54d2:	e001      	b.n	d54d8 <_Z12setDSTOffset6String+0x70>
   d54d4:	f002 fee2 	bl	d829c <_ZN9TimeClass6endDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d54d8:	f002 fe92 	bl	d8200 <_ZN9TimeClass5localEv>
   d54dc:	4605      	mov	r5, r0
   d54de:	f002 ffc4 	bl	d846a <_ZN9TimeClass3nowEv>
   d54e2:	1a28      	subs	r0, r5, r0
   d54e4:	f003 fd2c 	bl	d8f40 <__aeabi_i2d>
   d54e8:	a31f      	add	r3, pc, #124	; (adr r3, d5568 <_Z12setDSTOffset6String+0x100>)
   d54ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d54ee:	f003 feb7 	bl	d9260 <__aeabi_ddiv>
   d54f2:	4a22      	ldr	r2, [pc, #136]	; (d557c <_Z12setDSTOffset6String+0x114>)
   d54f4:	e9cd 0100 	strd	r0, r1, [sp]
   d54f8:	210a      	movs	r1, #10
   d54fa:	4821      	ldr	r0, [pc, #132]	; (d5580 <_Z12setDSTOffset6String+0x118>)
   d54fc:	f001 fc4a 	bl	d6d94 <snprintf>
   d5500:	f001 fb90 	bl	d6c24 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d5504:	b160      	cbz	r0, d5520 <_Z12setDSTOffset6String+0xb8>
   d5506:	4b1f      	ldr	r3, [pc, #124]	; (d5584 <_Z12setDSTOffset6String+0x11c>)
   d5508:	491f      	ldr	r1, [pc, #124]	; (d5588 <_Z12setDSTOffset6String+0x120>)
   d550a:	781b      	ldrb	r3, [r3, #0]
   d550c:	2200      	movs	r2, #0
   d550e:	f88d 2000 	strb.w	r2, [sp]
   d5512:	a808      	add	r0, sp, #32
   d5514:	aa0c      	add	r2, sp, #48	; 0x30
   d5516:	f7fe fe78 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d551a:	a809      	add	r0, sp, #36	; 0x24
   d551c:	f7ff f8b5 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  waitUntil(meterParticlePublish);
   d5520:	f7ff f85c 	bl	d45dc <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.62>
   d5524:	f001 fb7e 	bl	d6c24 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(t), PRIVATE);
   d5528:	b1c0      	cbz	r0, d555c <_Z12setDSTOffset6String+0xf4>
   d552a:	4621      	mov	r1, r4
   d552c:	a808      	add	r0, sp, #32
   d552e:	f002 fec5 	bl	d82bc <_ZN9TimeClass7timeStrEl>
   d5532:	9b08      	ldr	r3, [sp, #32]
   d5534:	9303      	str	r3, [sp, #12]
   d5536:	4b13      	ldr	r3, [pc, #76]	; (d5584 <_Z12setDSTOffset6String+0x11c>)
   d5538:	4913      	ldr	r1, [pc, #76]	; (d5588 <_Z12setDSTOffset6String+0x120>)
   d553a:	781b      	ldrb	r3, [r3, #0]
   d553c:	2200      	movs	r2, #0
   d553e:	f88d 2000 	strb.w	r2, [sp]
   d5542:	a806      	add	r0, sp, #24
   d5544:	9a03      	ldr	r2, [sp, #12]
   d5546:	f7fe fe60 	bl	d420a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.119.constprop.126>
   d554a:	a807      	add	r0, sp, #28
   d554c:	f7ff f89d 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5550:	a808      	add	r0, sp, #32
   d5552:	f002 fc7c 	bl	d7e4e <_ZN6StringD1Ev>
   d5556:	e001      	b.n	d555c <_Z12setDSTOffset6String+0xf4>
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d5558:	2000      	movs	r0, #0
   d555a:	e000      	b.n	d555e <_Z12setDSTOffset6String+0xf6>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(t), PRIVATE);
  return 1;
   d555c:	2001      	movs	r0, #1
}
   d555e:	b04d      	add	sp, #308	; 0x134
   d5560:	ecbd 8b02 	vpop	{d8}
   d5564:	bd30      	pop	{r4, r5, pc}
   d5566:	bf00      	nop
   d5568:	00000000 	.word	0x00000000
   d556c:	40ac2000 	.word	0x40ac2000
   d5570:	2003e16c 	.word	0x2003e16c
   d5574:	2003e149 	.word	0x2003e149
   d5578:	000dcfaf 	.word	0x000dcfaf
   d557c:	000dcea9 	.word	0x000dcea9
   d5580:	2003e069 	.word	0x2003e069
   d5584:	2003e0a0 	.word	0x2003e0a0
   d5588:	000dd01a 	.word	0x000dd01a

000d558c <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::value(), NULL);
   d558c:	2300      	movs	r3, #0
   d558e:	2202      	movs	r2, #2
   d5590:	f001 bb20 	b.w	d6bd4 <spark_variable>

000d5594 <_ZN10CloudClass8variableIA11_cIA10_cEEEbRKT_DpRKT0_>:
   d5594:	2300      	movs	r3, #0
   d5596:	2204      	movs	r2, #4
   d5598:	f001 bb1c 	b.w	d6bd4 <spark_variable>

000d559c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d559c:	4602      	mov	r2, r0
   d559e:	4801      	ldr	r0, [pc, #4]	; (d55a4 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d55a0:	f001 bddb 	b.w	d715a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d55a4:	000d712f 	.word	0x000d712f

000d55a8 <setup>:
// Pressure Sensor Variables
char debounceStr[8] = "NA";                         // String to make debounce more readable on the mobile app
volatile bool sensorDetect = false;                 // This is the flag that an interrupt is triggered

void setup()                                        // Note: Disconnected Setup()
{
   d55a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d55ac:	4fb8      	ldr	r7, [pc, #736]	; (d5890 <setup+0x2e8>)
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);      // Subscribe to the integration response event

  Particle.variable("HourlyCount", current.hourlyCount);                // Define my Particle variables
  Particle.variable("DailyCount", current.dailyCount);                  // Note: Don't have to be connected for any of this!!!
  Particle.variable("Signal", SignalString);
  Particle.variable("ResetCount", sysStatus.resetCount);
   d55ae:	4cb9      	ldr	r4, [pc, #740]	; (d5894 <setup+0x2ec>)
   d55b0:	683b      	ldr	r3, [r7, #0]
   d55b2:	f8df 83b8 	ldr.w	r8, [pc, #952]	; d596c <setup+0x3c4>
    nrf_gpio_pin_clear(nrf_pin);
   d55b6:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
   d55ba:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   d55be:	f003 031f 	and.w	r3, r3, #31
// Pressure Sensor Variables
char debounceStr[8] = "NA";                         // String to make debounce more readable on the mobile app
volatile bool sensorDetect = false;                 // This is the flag that an interrupt is triggered

void setup()                                        // Note: Disconnected Setup()
{
   d55c2:	b0ad      	sub	sp, #180	; 0xb4
   d55c4:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d55c8:	f7fe fda9 	bl	d411e <nrf_gpio_pin_clear>
       3) After a reset event
    All three of these have some common code - this will go first then we will set a conditional
    to determine which of the three we are in and finish the code
  */
  pinResetFast(deepSleepPin);                       // Make sure since this pin can turn off the device
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d55cc:	2100      	movs	r1, #0
   d55ce:	2008      	movs	r0, #8
   d55d0:	f003 f95c 	bl	d888c <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d55d4:	2100      	movs	r1, #0
   d55d6:	2004      	movs	r0, #4
   d55d8:	f003 f958 	bl	d888c <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d55dc:	2101      	movs	r1, #1
   d55de:	2007      	movs	r0, #7
   d55e0:	f003 f954 	bl	d888c <pinMode>
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d55e4:	2101      	movs	r1, #1
   d55e6:	2005      	movs	r0, #5
   d55e8:	f003 f950 	bl	d888c <pinMode>
  pinMode(deepSleepPin,OUTPUT);                     // For a hard reset active HIGH
   d55ec:	2101      	movs	r1, #1
   d55ee:	2006      	movs	r0, #6
   d55f0:	f003 f94c 	bl	d888c <pinMode>
  // Pressure / PIR Module Pin Setup
  pinMode(intPin,INPUT_PULLDOWN);                   // pressure sensor interrupt
   d55f4:	2103      	movs	r1, #3
   d55f6:	200d      	movs	r0, #13
   d55f8:	f003 f948 	bl	d888c <pinMode>
  pinMode(disableModule,OUTPUT);                    // Turns on the module when pulled low
   d55fc:	2101      	movs	r1, #1
   d55fe:	200c      	movs	r0, #12
   d5600:	f003 f944 	bl	d888c <pinMode>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d5604:	683b      	ldr	r3, [r7, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d5606:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
   d560a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   d560e:	f003 031f 	and.w	r3, r3, #31
   d5612:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d5616:	f7fe fd82 	bl	d411e <nrf_gpio_pin_clear>
  pinResetFast(disableModule);                      // Turn on the module - send high to switch off board
  pinMode(ledPower,OUTPUT);                         // Turn on the lights
   d561a:	2101      	movs	r1, #1
   d561c:	200b      	movs	r0, #11
   d561e:	f003 f935 	bl	d888c <pinMode>

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d5622:	683b      	ldr	r3, [r7, #0]
    nrf_gpio_pin_set(nrf_pin);
   d5624:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
   d5628:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   d562c:	f003 031f 	and.w	r3, r3, #31
  pinSetFast(ledPower);                             // Turns on the LED on the pressure sensor board

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d5630:	2500      	movs	r5, #0
   d5632:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d5636:	f7fe fd63 	bl	d4100 <nrf_gpio_pin_set>
  pinMode(disableModule,OUTPUT);                    // Turns on the module when pulled low
  pinResetFast(disableModule);                      // Turn on the module - send high to switch off board
  pinMode(ledPower,OUTPUT);                         // Turn on the lights
  pinSetFast(ledPower);                             // Turns on the LED on the pressure sensor board

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
   d563a:	f7fe fe9d 	bl	d4378 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d563e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5642:	2201      	movs	r2, #1
   d5644:	4994      	ldr	r1, [pc, #592]	; (d5898 <setup+0x2f0>)
   d5646:	9500      	str	r5, [sp, #0]
   d5648:	2008      	movs	r0, #8
   d564a:	f002 f94d 	bl	d78e8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d564e:	a804      	add	r0, sp, #16
   d5650:	f001 faf0 	bl	d6c34 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d5654:	462b      	mov	r3, r5
   d5656:	227d      	movs	r2, #125	; 0x7d
   d5658:	a90c      	add	r1, sp, #48	; 0x30
   d565a:	a804      	add	r0, sp, #16
   d565c:	f002 fc7d 	bl	d7f5a <_ZNK6String8getBytesEPhjj>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5660:	462b      	mov	r3, r5
   d5662:	462a      	mov	r2, r5
   d5664:	498d      	ldr	r1, [pc, #564]	; (d589c <setup+0x2f4>)
   d5666:	9501      	str	r5, [sp, #4]
   d5668:	9500      	str	r5, [sp, #0]
   d566a:	a80c      	add	r0, sp, #48	; 0x30
   d566c:	f001 faf2 	bl	d6c54 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);          // Puts the deviceID into the response topic array
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);      // Subscribe to the integration response event

  Particle.variable("HourlyCount", current.hourlyCount);                // Define my Particle variables
   d5670:	498b      	ldr	r1, [pc, #556]	; (d58a0 <setup+0x2f8>)
   d5672:	488c      	ldr	r0, [pc, #560]	; (d58a4 <setup+0x2fc>)
   d5674:	f7ff ff8a 	bl	d558c <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("DailyCount", current.dailyCount);                  // Note: Don't have to be connected for any of this!!!
   d5678:	498b      	ldr	r1, [pc, #556]	; (d58a8 <setup+0x300>)
   d567a:	488c      	ldr	r0, [pc, #560]	; (d58ac <setup+0x304>)
   d567c:	f7ff ff86 	bl	d558c <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("Signal", SignalString);
   d5680:	498b      	ldr	r1, [pc, #556]	; (d58b0 <setup+0x308>)
   d5682:	488c      	ldr	r0, [pc, #560]	; (d58b4 <setup+0x30c>)
   d5684:	f7ff ff86 	bl	d5594 <_ZN10CloudClass8variableIA11_cIA10_cEEEbRKT_DpRKT0_>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d5688:	f104 0114 	add.w	r1, r4, #20
   d568c:	488a      	ldr	r0, [pc, #552]	; (d58b8 <setup+0x310>)
   d568e:	f7ff ff7d 	bl	d558c <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("Temperature",current.temperature);
   d5692:	498a      	ldr	r1, [pc, #552]	; (d58bc <setup+0x314>)
   d5694:	488a      	ldr	r0, [pc, #552]	; (d58c0 <setup+0x318>)
   d5696:	f7ff ff79 	bl	d558c <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("Release",currentPointRelease);
   d569a:	498a      	ldr	r1, [pc, #552]	; (d58c4 <setup+0x31c>)
   d569c:	488a      	ldr	r0, [pc, #552]	; (d58c8 <setup+0x320>)
   d569e:	f7ff ff79 	bl	d5594 <_ZN10CloudClass8variableIA11_cIA10_cEEEbRKT_DpRKT0_>
  Particle.variable("stateOfChg", sysStatus.stateOfCharge);
   d56a2:	f104 0108 	add.w	r1, r4, #8
   d56a6:	4889      	ldr	r0, [pc, #548]	; (d58cc <setup+0x324>)
   d56a8:	f7ff ff70 	bl	d558c <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("lowPowerMode",(bool)sysStatus.lowPowerMode);
   d56ac:	79a3      	ldrb	r3, [r4, #6]
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::value(), NULL);
   d56ae:	4888      	ldr	r0, [pc, #544]	; (d58d0 <setup+0x328>)
   d56b0:	1b5b      	subs	r3, r3, r5
   d56b2:	ae2c      	add	r6, sp, #176	; 0xb0
   d56b4:	bf18      	it	ne
   d56b6:	2301      	movne	r3, #1
   d56b8:	f806 3d90 	strb.w	r3, [r6, #-144]!
   d56bc:	2201      	movs	r2, #1
   d56be:	462b      	mov	r3, r5
   d56c0:	4631      	mov	r1, r6
   d56c2:	f001 fa87 	bl	d6bd4 <spark_variable>
  Particle.variable("OpenTime",sysStatus.openTime);
   d56c6:	f104 0120 	add.w	r1, r4, #32
   d56ca:	4882      	ldr	r0, [pc, #520]	; (d58d4 <setup+0x32c>)
   d56cc:	f7ff ff5e 	bl	d558c <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("CloseTime",sysStatus.closeTime);
   d56d0:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d56d4:	4880      	ldr	r0, [pc, #512]	; (d58d8 <setup+0x330>)
   d56d6:	f7ff ff59 	bl	d558c <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("Debounce",debounceStr);
   d56da:	4980      	ldr	r1, [pc, #512]	; (d58dc <setup+0x334>)
   d56dc:	4880      	ldr	r0, [pc, #512]	; (d58e0 <setup+0x338>)
   d56de:	f7ff ff59 	bl	d5594 <_ZN10CloudClass8variableIA11_cIA10_cEEEbRKT_DpRKT0_>
  Particle.variable("Alerts",current.alertCount);
   d56e2:	4980      	ldr	r1, [pc, #512]	; (d58e4 <setup+0x33c>)
   d56e4:	4880      	ldr	r0, [pc, #512]	; (d58e8 <setup+0x340>)
   d56e6:	f7ff ff51 	bl	d558c <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("TimeOffset",currentOffsetStr);
   d56ea:	4980      	ldr	r1, [pc, #512]	; (d58ec <setup+0x344>)
   d56ec:	4880      	ldr	r0, [pc, #512]	; (d58f0 <setup+0x348>)
   d56ee:	f7ff ff51 	bl	d5594 <_ZN10CloudClass8variableIA11_cIA10_cEEEbRKT_DpRKT0_>

  Particle.function("resetFRAM", resetFRAM);                          // These are the functions exposed to the mobile app and console
   d56f2:	4980      	ldr	r1, [pc, #512]	; (d58f4 <setup+0x34c>)
   d56f4:	4880      	ldr	r0, [pc, #512]	; (d58f8 <setup+0x350>)
   d56f6:	f7ff ff51 	bl	d559c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("resetCounts",resetCounts);
   d56fa:	4980      	ldr	r1, [pc, #512]	; (d58fc <setup+0x354>)
   d56fc:	4880      	ldr	r0, [pc, #512]	; (d5900 <setup+0x358>)
   d56fe:	f7ff ff4d 	bl	d559c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("HardReset",hardResetNow);
   d5702:	4980      	ldr	r1, [pc, #512]	; (d5904 <setup+0x35c>)
   d5704:	4880      	ldr	r0, [pc, #512]	; (d5908 <setup+0x360>)
   d5706:	f7ff ff49 	bl	d559c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SendNow",sendNow);
   d570a:	4980      	ldr	r1, [pc, #512]	; (d590c <setup+0x364>)
   d570c:	4880      	ldr	r0, [pc, #512]	; (d5910 <setup+0x368>)
   d570e:	f7ff ff45 	bl	d559c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
   d5712:	4980      	ldr	r1, [pc, #512]	; (d5914 <setup+0x36c>)
   d5714:	4880      	ldr	r0, [pc, #512]	; (d5918 <setup+0x370>)
   d5716:	f7ff ff41 	bl	d559c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Solar-Mode",setSolarMode);
   d571a:	4980      	ldr	r1, [pc, #512]	; (d591c <setup+0x374>)
   d571c:	4880      	ldr	r0, [pc, #512]	; (d5920 <setup+0x378>)
   d571e:	f7ff ff3d 	bl	d559c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setverboseMode);
   d5722:	4980      	ldr	r1, [pc, #512]	; (d5924 <setup+0x37c>)
   d5724:	4880      	ldr	r0, [pc, #512]	; (d5928 <setup+0x380>)
   d5726:	f7ff ff39 	bl	d559c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);
   d572a:	4980      	ldr	r1, [pc, #512]	; (d592c <setup+0x384>)
   d572c:	4880      	ldr	r0, [pc, #512]	; (d5930 <setup+0x388>)
   d572e:	f7ff ff35 	bl	d559c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-DSTOffset",setDSTOffset);
   d5732:	4980      	ldr	r1, [pc, #512]	; (d5934 <setup+0x38c>)
   d5734:	4880      	ldr	r0, [pc, #512]	; (d5938 <setup+0x390>)
   d5736:	f7ff ff31 	bl	d559c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-OpenTime",setOpenTime);
   d573a:	4980      	ldr	r1, [pc, #512]	; (d593c <setup+0x394>)
   d573c:	4880      	ldr	r0, [pc, #512]	; (d5940 <setup+0x398>)
   d573e:	f7ff ff2d 	bl	d559c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Close",setCloseTime);
   d5742:	4980      	ldr	r1, [pc, #512]	; (d5944 <setup+0x39c>)
   d5744:	4880      	ldr	r0, [pc, #512]	; (d5948 <setup+0x3a0>)
   d5746:	f7ff ff29 	bl	d559c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Debounce",setDebounce);
   d574a:	4980      	ldr	r1, [pc, #512]	; (d594c <setup+0x3a4>)
   d574c:	4880      	ldr	r0, [pc, #512]	; (d5950 <setup+0x3a8>)
   d574e:	f7ff ff25 	bl	d559c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>

  // Load FRAM and reset variables to their correct values
  fram.begin();                                                       // Initialize the FRAM module
   d5752:	4880      	ldr	r0, [pc, #512]	; (d5954 <setup+0x3ac>)
   d5754:	f000 fa52 	bl	d5bfc <_ZN6MB85RC5beginEv>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5758:	2301      	movs	r3, #1
   d575a:	f10d 020f 	add.w	r2, sp, #15
   d575e:	4629      	mov	r1, r5
   d5760:	487c      	ldr	r0, [pc, #496]	; (d5954 <setup+0x3ac>)
   d5762:	f000 fa8d 	bl	d5c80 <_ZN6MB85RC8readDataEjPhj>

  byte tempVersion;
  fram.get(FRAM::versionAddr, tempVersion);
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d5766:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d576a:	2b02      	cmp	r3, #2
   d576c:	d01a      	beq.n	d57a4 <setup+0x1fc>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d576e:	4879      	ldr	r0, [pc, #484]	; (d5954 <setup+0x3ac>)
   d5770:	f000 fa4e 	bl	d5c10 <_ZN6MB85RC5eraseEv>
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5774:	2304      	movs	r3, #4
   d5776:	4a78      	ldr	r2, [pc, #480]	; (d5958 <setup+0x3b0>)
   d5778:	4876      	ldr	r0, [pc, #472]	; (d5954 <setup+0x3ac>)
   d577a:	4629      	mov	r1, r5
   d577c:	f000 fad5 	bl	d5d2a <_ZN6MB85RC9writeDataEjPKhj>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5780:	2301      	movs	r3, #1
   d5782:	f10d 020f 	add.w	r2, sp, #15
   d5786:	4629      	mov	r1, r5
   d5788:	4872      	ldr	r0, [pc, #456]	; (d5954 <setup+0x3ac>)
   d578a:	f000 fa79 	bl	d5c80 <_ZN6MB85RC8readDataEjPhj>
    fram.put(FRAM::versionAddr, FRAMversionNumber);                   // Put the right value in
    fram.get(FRAM::versionAddr, tempVersion);                         // See if this worked
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;        // Device will not work without FRAM
   d578e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d5792:	2b02      	cmp	r3, #2
   d5794:	d003      	beq.n	d579e <setup+0x1f6>
   d5796:	2301      	movs	r3, #1
   d5798:	f888 3000 	strb.w	r3, [r8]
   d579c:	e008      	b.n	d57b0 <setup+0x208>
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d579e:	f7ff f911 	bl	d49c4 <_Z18loadSystemDefaultsv>
   d57a2:	e005      	b.n	d57b0 <setup+0x208>
   d57a4:	232c      	movs	r3, #44	; 0x2c
   d57a6:	4622      	mov	r2, r4
   d57a8:	2101      	movs	r1, #1
   d57aa:	486a      	ldr	r0, [pc, #424]	; (d5954 <setup+0x3ac>)
   d57ac:	f000 fa68 	bl	d5c80 <_ZN6MB85RC8readDataEjPhj>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d57b0:	2500      	movs	r5, #0
  }
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range
   d57b2:	f7fe fe31 	bl	d4418 <_Z17checkSystemValuesv>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d57b6:	462a      	mov	r2, r5
   d57b8:	4629      	mov	r1, r5
   d57ba:	4630      	mov	r0, r6
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d57bc:	9508      	str	r5, [sp, #32]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d57be:	f000 fff1 	bl	d67a4 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d57c2:	9b08      	ldr	r3, [sp, #32]

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d57c4:	2b14      	cmp	r3, #20
   d57c6:	f000 8150 	beq.w	d5a6a <setup+0x4c2>
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d57ca:	462a      	mov	r2, r5
   d57cc:	4629      	mov	r1, r5
   d57ce:	4630      	mov	r0, r6
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d57d0:	9508      	str	r5, [sp, #32]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d57d2:	f000 ffe7 	bl	d67a4 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d57d6:	9b08      	ldr	r3, [sp, #32]
   d57d8:	2b8c      	cmp	r3, #140	; 0x8c
   d57da:	f000 8146 	beq.w	d5a6a <setup+0x4c2>
    sysStatus.resetCount++;
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
  }

  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec", (float)sysStatus.debounce/1000.0);
   d57de:	edd4 7a04 	vldr	s15, [r4, #16]
   d57e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d57e6:	ee17 0a90 	vmov	r0, s15
   d57ea:	f003 fbbb 	bl	d8f64 <__aeabi_f2d>
   d57ee:	4b5b      	ldr	r3, [pc, #364]	; (d595c <setup+0x3b4>)
   d57f0:	2200      	movs	r2, #0
   d57f2:	f003 fd35 	bl	d9260 <__aeabi_ddiv>
   d57f6:	4a5a      	ldr	r2, [pc, #360]	; (d5960 <setup+0x3b8>)
   d57f8:	e9cd 0100 	strd	r0, r1, [sp]
   d57fc:	2108      	movs	r1, #8
   d57fe:	4837      	ldr	r0, [pc, #220]	; (d58dc <setup+0x334>)
   d5800:	f001 fac8 	bl	d6d94 <snprintf>

  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
   d5804:	ed94 0a07 	vldr	s0, [r4, #28]
   d5808:	f002 fd24 	bl	d8254 <_ZN9TimeClass12setDSTOffsetEf>
  if (!Time.isValid()) Time.setTime(rtc.getRTCTime());
   d580c:	f002 fe0c 	bl	d8428 <_ZN9TimeClass7isValidEv>
   d5810:	b920      	cbnz	r0, d581c <setup+0x274>
   d5812:	4854      	ldr	r0, [pc, #336]	; (d5964 <setup+0x3bc>)
   d5814:	f000 fd24 	bl	d6260 <_ZNK8MCP7941010getRTCTimeEv>
   d5818:	f002 fd46 	bl	d82a8 <_ZN9TimeClass7setTimeEl>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
   d581c:	f7fe ff16 	bl	d464c <_Z8isDSTusav>
   d5820:	b110      	cbz	r0, d5828 <setup+0x280>
   d5822:	f002 fd31 	bl	d8288 <_ZN9TimeClass8beginDSTEv>
   d5826:	e001      	b.n	d582c <setup+0x284>
   d5828:	f002 fd38 	bl	d829c <_ZN9TimeClass6endDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
   d582c:	ed94 0a06 	vldr	s0, [r4, #24]
   d5830:	f8df 913c 	ldr.w	r9, [pc, #316]	; d5970 <setup+0x3c8>
   d5834:	f002 fcf2 	bl	d821c <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d5838:	f002 fce2 	bl	d8200 <_ZN9TimeClass5localEv>
   d583c:	4605      	mov	r5, r0
   d583e:	f002 fe14 	bl	d846a <_ZN9TimeClass3nowEv>
   d5842:	1a28      	subs	r0, r5, r0
   d5844:	f003 fb7c 	bl	d8f40 <__aeabi_i2d>
   d5848:	a30f      	add	r3, pc, #60	; (adr r3, d5888 <setup+0x2e0>)
   d584a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d584e:	f003 fd07 	bl	d9260 <__aeabi_ddiv>
   d5852:	4d13      	ldr	r5, [pc, #76]	; (d58a0 <setup+0x2f8>)
   d5854:	4a44      	ldr	r2, [pc, #272]	; (d5968 <setup+0x3c0>)
   d5856:	e9cd 0100 	strd	r0, r1, [sp]
   d585a:	210a      	movs	r1, #10
   d585c:	4823      	ldr	r0, [pc, #140]	; (d58ec <setup+0x344>)
   d585e:	f001 fa99 	bl	d6d94 <snprintf>

  rtc.setup();                                                        // Start the real time clock
   d5862:	4840      	ldr	r0, [pc, #256]	; (d5964 <setup+0x3bc>)
   d5864:	f000 fd0c 	bl	d6280 <_ZN8MCP794105setupEv>
   d5868:	231c      	movs	r3, #28
   d586a:	462a      	mov	r2, r5
   d586c:	2150      	movs	r1, #80	; 0x50
   d586e:	4839      	ldr	r0, [pc, #228]	; (d5954 <setup+0x3ac>)
   d5870:	f000 fa06 	bl	d5c80 <_ZN6MB85RC8readDataEjPhj>

  // Done with the System Stuff - now load the current counts
  fram.get(FRAM::currentCountsAddr,current);
  if (current.hourlyCount) currentHourlyPeriod = Time.hour(current.lastCountTime);
   d5874:	682b      	ldr	r3, [r5, #0]
   d5876:	2b00      	cmp	r3, #0
   d5878:	d07c      	beq.n	d5974 <setup+0x3cc>
   d587a:	68e8      	ldr	r0, [r5, #12]
   d587c:	f002 fc9c 	bl	d81b8 <_ZN9TimeClass4hourEl>
   d5880:	e07a      	b.n	d5978 <setup+0x3d0>
   d5882:	bf00      	nop
   d5884:	f3af 8000 	nop.w
   d5888:	00000000 	.word	0x00000000
   d588c:	40ac2000 	.word	0x40ac2000
   d5890:	2003e0d4 	.word	0x2003e0d4
   d5894:	2003e16c 	.word	0x2003e16c
   d5898:	000d40c5 	.word	0x000d40c5
   d589c:	000d4741 	.word	0x000d4741
   d58a0:	2003e12c 	.word	0x2003e12c
   d58a4:	000dcfc0 	.word	0x000dcfc0
   d58a8:	2003e134 	.word	0x2003e134
   d58ac:	000dcfcc 	.word	0x000dcfcc
   d58b0:	2003e0dc 	.word	0x2003e0dc
   d58b4:	000dcfd7 	.word	0x000dcfd7
   d58b8:	000dcfde 	.word	0x000dcfde
   d58bc:	2003e13c 	.word	0x2003e13c
   d58c0:	000dcfe9 	.word	0x000dcfe9
   d58c4:	2003df60 	.word	0x2003df60
   d58c8:	000dcff5 	.word	0x000dcff5
   d58cc:	000dcffd 	.word	0x000dcffd
   d58d0:	000dd008 	.word	0x000dd008
   d58d4:	000dd09d 	.word	0x000dd09d
   d58d8:	000dd015 	.word	0x000dd015
   d58dc:	2003df65 	.word	0x2003df65
   d58e0:	000dd0b4 	.word	0x000dd0b4
   d58e4:	2003e140 	.word	0x2003e140
   d58e8:	000dd01f 	.word	0x000dd01f
   d58ec:	2003e069 	.word	0x2003e069
   d58f0:	000dd026 	.word	0x000dd026
   d58f4:	000d413d 	.word	0x000d413d
   d58f8:	000dd031 	.word	0x000dd031
   d58fc:	000d419d 	.word	0x000d419d
   d5900:	000dd03b 	.word	0x000dd03b
   d5904:	000d4a49 	.word	0x000d4a49
   d5908:	000dd047 	.word	0x000dd047
   d590c:	000d4159 	.word	0x000d4159
   d5910:	000dd051 	.word	0x000dd051
   d5914:	000d4e75 	.word	0x000d4e75
   d5918:	000dd059 	.word	0x000dd059
   d591c:	000d4b45 	.word	0x000d4b45
   d5920:	000dd066 	.word	0x000dd066
   d5924:	000d4bf1 	.word	0x000d4bf1
   d5928:	000dd071 	.word	0x000dd071
   d592c:	000d4c99 	.word	0x000d4c99
   d5930:	000dd07e 	.word	0x000dd07e
   d5934:	000d5469 	.word	0x000d5469
   d5938:	000dd08b 	.word	0x000dd08b
   d593c:	000d4d95 	.word	0x000d4d95
   d5940:	000dd099 	.word	0x000dd099
   d5944:	000d4e05 	.word	0x000d4e05
   d5948:	000dd0a6 	.word	0x000dd0a6
   d594c:	000d4a9d 	.word	0x000d4a9d
   d5950:	000dd0b0 	.word	0x000dd0b0
   d5954:	2003e074 	.word	0x2003e074
   d5958:	000dcd10 	.word	0x000dcd10
   d595c:	408f4000 	.word	0x408f4000
   d5960:	000dce45 	.word	0x000dce45
   d5964:	2003e084 	.word	0x2003e084
   d5968:	000dcea9 	.word	0x000dcea9
   d596c:	2003e0b5 	.word	0x2003e0b5
   d5970:	2003e0b8 	.word	0x2003e0b8
  else currentHourlyPeriod = Time.hour();                              // The local time hourly period for reporting purposes
   d5974:	f002 fd80 	bl	d8478 <_ZN9TimeClass4hourEv>
   d5978:	f8c9 0000 	str.w	r0, [r9]

  Serial.println(Time.timeStr(rtc.getRTCTime()));  // ******* - Debug code
   d597c:	f002 fe9c 	bl	d86b8 <_Z16_fetch_usbserialv>
   d5980:	4681      	mov	r9, r0
   d5982:	483f      	ldr	r0, [pc, #252]	; (d5a80 <setup+0x4d8>)
   d5984:	f000 fc6c 	bl	d6260 <_ZNK8MCP7941010getRTCTimeEv>
   d5988:	4601      	mov	r1, r0
   d598a:	4630      	mov	r0, r6
   d598c:	f002 fc96 	bl	d82bc <_ZN9TimeClass7timeStrEl>
   d5990:	9908      	ldr	r1, [sp, #32]
   d5992:	4648      	mov	r0, r9
   d5994:	f002 f9ef 	bl	d7d76 <_ZN5Print7printlnEPKc>
   d5998:	4630      	mov	r0, r6
   d599a:	f002 fa58 	bl	d7e4e <_ZN6StringD1Ev>
  Serial.println(Time.timeStr(Time.local()));
   d599e:	f002 fe8b 	bl	d86b8 <_Z16_fetch_usbserialv>
   d59a2:	4681      	mov	r9, r0
   d59a4:	f002 fc2c 	bl	d8200 <_ZN9TimeClass5localEv>
   d59a8:	4601      	mov	r1, r0
   d59aa:	4630      	mov	r0, r6
   d59ac:	f002 fc86 	bl	d82bc <_ZN9TimeClass7timeStrEl>
   d59b0:	9908      	ldr	r1, [sp, #32]
   d59b2:	4648      	mov	r0, r9
   d59b4:	f002 f9df 	bl	d7d76 <_ZN5Print7printlnEPKc>
   d59b8:	4630      	mov	r0, r6
   d59ba:	f002 fa48 	bl	d7e4e <_ZN6StringD1Ev>

  PMICreset();                                                        // Executes commands that set up the PMIC for Solar charging
   d59be:	f7fe fcfb 	bl	d43b8 <_Z9PMICresetv>

  if (!digitalRead(userSwitch)) loadSystemDefaults();                 // Make sure the device wakes up and connects
   d59c2:	2004      	movs	r0, #4
   d59c4:	f002 ff8c 	bl	d88e0 <digitalRead>
   d59c8:	b908      	cbnz	r0, d59ce <setup+0x426>
   d59ca:	f7fe fffb 	bl	d49c4 <_Z18loadSystemDefaultsv>

  // Here is where the code diverges based on why we are running Setup()
  // Deterimine when the last counts were taken check when starting test to determine if we reload values or start counts over
  if (Time.day() != Time.day(current.lastCountTime)) {    // ******  - These are debug lines
   d59ce:	f002 fd67 	bl	d84a0 <_ZN9TimeClass3dayEv>
   d59d2:	4681      	mov	r9, r0
   d59d4:	68e8      	ldr	r0, [r5, #12]
   d59d6:	f002 fbf7 	bl	d81c8 <_ZN9TimeClass3dayEl>
   d59da:	4581      	cmp	r9, r0
   d59dc:	d010      	beq.n	d5a00 <setup+0x458>
    resetEverything();                                               // Zero the counts for the new day
   d59de:	f7fe fdd1 	bl	d4584 <_Z15resetEverythingv>
    if (sysStatus.solarPowerMode && !sysStatus.lowPowerMode) {
   d59e2:	7963      	ldrb	r3, [r4, #5]
   d59e4:	b163      	cbz	r3, d5a00 <setup+0x458>
   d59e6:	4b27      	ldr	r3, [pc, #156]	; (d5a84 <setup+0x4dc>)
   d59e8:	799b      	ldrb	r3, [r3, #6]
   d59ea:	b94b      	cbnz	r3, d5a00 <setup+0x458>
      setLowPowerMode("1");                                           // If we are running on solar, we will reset to lowPowerMode at Midnight
   d59ec:	4926      	ldr	r1, [pc, #152]	; (d5a88 <setup+0x4e0>)
   d59ee:	4630      	mov	r0, r6
   d59f0:	f002 fa74 	bl	d7edc <_ZN6StringC1EPK19__FlashStringHelper>
   d59f4:	4630      	mov	r0, r6
   d59f6:	f7ff fa3d 	bl	d4e74 <_Z15setLowPowerMode6String>
   d59fa:	4630      	mov	r0, r6
   d59fc:	f002 fa27 	bl	d7e4e <_ZN6StringD1Ev>
    }
  }

  if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) {} // The park is closed - don't connect
   d5a00:	f002 fd3a 	bl	d8478 <_ZN9TimeClass4hourEv>
   d5a04:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5a06:	4d1f      	ldr	r5, [pc, #124]	; (d5a84 <setup+0x4dc>)
   d5a08:	4298      	cmp	r0, r3
   d5a0a:	da17      	bge.n	d5a3c <setup+0x494>
   d5a0c:	f002 fd34 	bl	d8478 <_ZN9TimeClass4hourEv>
   d5a10:	6a2b      	ldr	r3, [r5, #32]
   d5a12:	4298      	cmp	r0, r3
   d5a14:	db12      	blt.n	d5a3c <setup+0x494>
  else {                                                              // Park is open let's get ready for the day
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
   d5a16:	2300      	movs	r3, #0
   d5a18:	9300      	str	r3, [sp, #0]
   d5a1a:	2201      	movs	r2, #1
   d5a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5a20:	491a      	ldr	r1, [pc, #104]	; (d5a8c <setup+0x4e4>)
   d5a22:	200d      	movs	r0, #13
   d5a24:	f001 ff60 	bl	d78e8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    if (sysStatus.connectedStatus && !Particle.connected()) connectToParticle(); // Only going to connect if we are in connectionMode
   d5a28:	78eb      	ldrb	r3, [r5, #3]
   d5a2a:	b113      	cbz	r3, d5a32 <setup+0x48a>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5a2c:	f001 f8fa 	bl	d6c24 <spark_cloud_flag_connected>
   d5a30:	b310      	cbz	r0, d5a78 <setup+0x4d0>
    takeMeasurements();                                               // Populates values so you can read them before the hour
   d5a32:	f7fe fc81 	bl	d4338 <_Z16takeMeasurementsv>
    stayAwake = stayAwakeLong;                                        // Keeps Electron awake after reboot - helps with recovery
   d5a36:	4b16      	ldr	r3, [pc, #88]	; (d5a90 <setup+0x4e8>)
   d5a38:	4a16      	ldr	r2, [pc, #88]	; (d5a94 <setup+0x4ec>)
   d5a3a:	601a      	str	r2, [r3, #0]
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d5a3c:	683b      	ldr	r3, [r7, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d5a3e:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
   d5a42:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   d5a46:	f003 031f 	and.w	r3, r3, #31
   d5a4a:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d5a4e:	f7fe fb66 	bl	d411e <nrf_gpio_pin_clear>
  }

  pinResetFast(ledPower);                                             // Turns off the LED on the sensor board

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d5a52:	f898 3000 	ldrb.w	r3, [r8]
   d5a56:	b913      	cbnz	r3, d5a5e <setup+0x4b6>
   d5a58:	4b0f      	ldr	r3, [pc, #60]	; (d5a98 <setup+0x4f0>)
   d5a5a:	2202      	movs	r2, #2
   d5a5c:	701a      	strb	r2, [r3, #0]

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond

  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d5a5e:	a804      	add	r0, sp, #16
   d5a60:	f002 f9f5 	bl	d7e4e <_ZN6StringD1Ev>
  }

  pinResetFast(ledPower);                                             // Turns off the LED on the sensor board

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
}
   d5a64:	b02d      	add	sp, #180	; 0xb4
   d5a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
    sysStatus.resetCount++;
   d5a6a:	6963      	ldr	r3, [r4, #20]
   d5a6c:	3301      	adds	r3, #1
   d5a6e:	6163      	str	r3, [r4, #20]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d5a70:	4b0a      	ldr	r3, [pc, #40]	; (d5a9c <setup+0x4f4>)
   d5a72:	2201      	movs	r2, #1
   d5a74:	701a      	strb	r2, [r3, #0]
   d5a76:	e6b2      	b.n	d57de <setup+0x236>
  }

  if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) {} // The park is closed - don't connect
  else {                                                              // Park is open let's get ready for the day
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
    if (sysStatus.connectedStatus && !Particle.connected()) connectToParticle(); // Only going to connect if we are in connectionMode
   d5a78:	f7fe ff56 	bl	d4928 <_Z17connectToParticlev>
   d5a7c:	e7d9      	b.n	d5a32 <setup+0x48a>
   d5a7e:	bf00      	nop
   d5a80:	2003e084 	.word	0x2003e084
   d5a84:	2003e16c 	.word	0x2003e16c
   d5a88:	000dd101 	.word	0x000dd101
   d5a8c:	000d40b9 	.word	0x000d40b9
   d5a90:	2003e0c0 	.word	0x2003e0c0
   d5a94:	00015f90 	.word	0x00015f90
   d5a98:	2003e0b5 	.word	0x2003e0b5
   d5a9c:	2003e149 	.word	0x2003e149

000d5aa0 <_GLOBAL__sub_I___appProductID>:
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d5aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5aa2:	4b31      	ldr	r3, [pc, #196]	; (d5b68 <_GLOBAL__sub_I___appProductID+0xc8>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5aa4:	4d31      	ldr	r5, [pc, #196]	; (d5b6c <_GLOBAL__sub_I___appProductID+0xcc>)
#include "MCP79410RK.h"                             // Real Time Clock
#include "MB85RC256V-FRAM-RK.h"                     // Rickkas Particle based FRAM Library
#include "UnitTestCode.h"                           // This code will exercise the device

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5aa6:	4e32      	ldr	r6, [pc, #200]	; (d5b70 <_GLOBAL__sub_I___appProductID+0xd0>)
   d5aa8:	2400      	movs	r4, #0
   d5aaa:	601c      	str	r4, [r3, #0]
   d5aac:	4b31      	ldr	r3, [pc, #196]	; (d5b74 <_GLOBAL__sub_I___appProductID+0xd4>)
   d5aae:	2701      	movs	r7, #1
   d5ab0:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5ab2:	f000 feb7 	bl	d6824 <HAL_Pin_Map>
   d5ab6:	4b30      	ldr	r3, [pc, #192]	; (d5b78 <_GLOBAL__sub_I___appProductID+0xd8>)
   d5ab8:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5aba:	f002 feab 	bl	d8814 <spark_protocol_instance>
   d5abe:	4623      	mov	r3, r4
   d5ac0:	4622      	mov	r2, r4
   d5ac2:	f642 2170 	movw	r1, #10864	; 0x2a70
   d5ac6:	f002 fead 	bl	d8824 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5aca:	f002 fea3 	bl	d8814 <spark_protocol_instance>
   d5ace:	4622      	mov	r2, r4
   d5ad0:	4623      	mov	r3, r4
   d5ad2:	2102      	movs	r1, #2
   d5ad4:	f002 feae 	bl	d8834 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5ad8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5adc:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5ade:	602c      	str	r4, [r5, #0]
   d5ae0:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5ae2:	71ac      	strb	r4, [r5, #6]
   d5ae4:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5ae6:	2002      	movs	r0, #2
   d5ae8:	f001 f80c 	bl	d6b04 <set_system_mode>
   d5aec:	4632      	mov	r2, r6
   d5aee:	4923      	ldr	r1, [pc, #140]	; (d5b7c <_GLOBAL__sub_I___appProductID+0xdc>)
   d5af0:	4628      	mov	r0, r5
   d5af2:	f002 ff81 	bl	d89f8 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
   d5af6:	4d22      	ldr	r5, [pc, #136]	; (d5b80 <_GLOBAL__sub_I___appProductID+0xe0>)
#include "MB85RC256V-FRAM-RK.h"                     // Rickkas Particle based FRAM Library
#include "UnitTestCode.h"                           // This code will exercise the device

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5af8:	4621      	mov	r1, r4
   d5afa:	4638      	mov	r0, r7
   d5afc:	f001 f81a 	bl	d6b34 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d5b00:	4639      	mov	r1, r7
   d5b02:	2004      	movs	r0, #4
   d5b04:	f000 fe3e 	bl	d6784 <HAL_Feature_Set>
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
   d5b08:	4621      	mov	r1, r4
   d5b0a:	4628      	mov	r0, r5
   d5b0c:	f001 fe12 	bl	d7734 <_ZN9FuelGaugeC1Eb>
   d5b10:	4628      	mov	r0, r5

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d5b12:	4d1c      	ldr	r5, [pc, #112]	; (d5b84 <_GLOBAL__sub_I___appProductID+0xe4>)
   d5b14:	491c      	ldr	r1, [pc, #112]	; (d5b88 <_GLOBAL__sub_I___appProductID+0xe8>)
   d5b16:	4632      	mov	r2, r6
   d5b18:	2720      	movs	r7, #32
   d5b1a:	f002 ff6d 	bl	d89f8 <__aeabi_atexit>
   d5b1e:	463a      	mov	r2, r7
   d5b20:	4621      	mov	r1, r4
   d5b22:	4628      	mov	r0, r5
   d5b24:	f003 ffb9 	bl	d9a9a <memset>
        conf_.size = sizeof(conf_);
   d5b28:	716f      	strb	r7, [r5, #5]
	/**
	 * @brief Constructor for MCP79410 objects.
	 *
	 * @param wire The I2C interface to use. Optional, default is Wire. On some devices you can use Wire1.
	 */
	MCP79410(TwoWire &wire = Wire);
   d5b2a:	f002 ff03 	bl	d8934 <_Z19__fetch_global_Wirev>
SystemPowerConfiguration conf;                      // Initalize the PMIC class so you can call the Power Management functions below.
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
   d5b2e:	4d17      	ldr	r5, [pc, #92]	; (d5b8c <_GLOBAL__sub_I___appProductID+0xec>)
   d5b30:	4601      	mov	r1, r0
   d5b32:	4628      	mov	r0, r5
   d5b34:	f000 fae2 	bl	d60fc <_ZN8MCP79410C1ER7TwoWire>
   d5b38:	4632      	mov	r2, r6
   d5b3a:	4915      	ldr	r1, [pc, #84]	; (d5b90 <_GLOBAL__sub_I___appProductID+0xf0>)
   d5b3c:	4628      	mov	r0, r5
   d5b3e:	f002 ff5b 	bl	d89f8 <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5b42:	f002 fef7 	bl	d8934 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5b46:	4d13      	ldr	r5, [pc, #76]	; (d5b94 <_GLOBAL__sub_I___appProductID+0xf4>)
   d5b48:	4623      	mov	r3, r4
   d5b4a:	4601      	mov	r1, r0
   d5b4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5b50:	4628      	mov	r0, r5
   d5b52:	f000 f849 	bl	d5be8 <_ZN6MB85RCC1ER7TwoWireji>
   d5b56:	4b10      	ldr	r3, [pc, #64]	; (d5b98 <_GLOBAL__sub_I___appProductID+0xf8>)
   d5b58:	602b      	str	r3, [r5, #0]
   d5b5a:	4632      	mov	r2, r6
   d5b5c:	4628      	mov	r0, r5
   d5b5e:	490f      	ldr	r1, [pc, #60]	; (d5b9c <_GLOBAL__sub_I___appProductID+0xfc>)
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d5b60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
SystemPowerConfiguration conf;                      // Initalize the PMIC class so you can call the Power Management functions below.
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5b64:	f002 bf48 	b.w	d89f8 <__aeabi_atexit>
   d5b68:	2003e0c4 	.word	0x2003e0c4
   d5b6c:	2003e0c8 	.word	0x2003e0c8
   d5b70:	2003e064 	.word	0x2003e064
   d5b74:	2003e0a0 	.word	0x2003e0a0
   d5b78:	2003e0d4 	.word	0x2003e0d4
   d5b7c:	000d41e1 	.word	0x000d41e1
   d5b80:	2003e0a4 	.word	0x2003e0a4
   d5b84:	2003e14c 	.word	0x2003e14c
   d5b88:	000d7753 	.word	0x000d7753
   d5b8c:	2003e084 	.word	0x2003e084
   d5b90:	000d5e71 	.word	0x000d5e71
   d5b94:	2003e074 	.word	0x2003e074
   d5b98:	000dccd4 	.word	0x000dccd4
   d5b9c:	000d4175 	.word	0x000d4175

000d5ba0 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5ba0:	4770      	bx	lr

000d5ba2 <_ZN6MB85RCD0Ev>:

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
   d5ba2:	b510      	push	{r4, lr}
}
   d5ba4:	2110      	movs	r1, #16

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
   d5ba6:	4604      	mov	r4, r0
}
   d5ba8:	f002 ff2b 	bl	d8a02 <_ZdlPvj>
   d5bac:	4620      	mov	r0, r4
   d5bae:	bd10      	pop	{r4, pc}

000d5bb0 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5bb0:	6803      	ldr	r3, [r0, #0]
   d5bb2:	b2c9      	uxtb	r1, r1
   d5bb4:	689b      	ldr	r3, [r3, #8]
   d5bb6:	4718      	bx	r3

000d5bb8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5bb8:	b40e      	push	{r1, r2, r3}
   d5bba:	b500      	push	{lr}
   d5bbc:	b08c      	sub	sp, #48	; 0x30
   d5bbe:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d5bc0:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5bc2:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d5bc6:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5bc8:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d5bcc:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5bce:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5bd0:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5bd2:	aa04      	add	r2, sp, #16
   d5bd4:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5bd6:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5bd8:	f000 ff84 	bl	d6ae4 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d5bdc:	b00c      	add	sp, #48	; 0x30
   d5bde:	f85d eb04 	ldr.w	lr, [sp], #4
   d5be2:	b003      	add	sp, #12
   d5be4:	4770      	bx	lr
	...

000d5be8 <_ZN6MB85RCC1ER7TwoWireji>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5be8:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d5bea:	4d03      	ldr	r5, [pc, #12]	; (d5bf8 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d5bec:	6005      	str	r5, [r0, #0]
   d5bee:	6041      	str	r1, [r0, #4]
   d5bf0:	6082      	str	r2, [r0, #8]
   d5bf2:	60c3      	str	r3, [r0, #12]
}
   d5bf4:	bd30      	pop	{r4, r5, pc}
   d5bf6:	bf00      	nop
   d5bf8:	000dd188 	.word	0x000dd188

000d5bfc <_ZN6MB85RC5beginEv>:

MB85RC::~MB85RC() {
}

void MB85RC::begin() {
	wire.begin();
   d5bfc:	6840      	ldr	r0, [r0, #4]
   d5bfe:	f001 be3d 	b.w	d787c <_ZN7TwoWire5beginEv>

000d5c02 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5c02:	b510      	push	{r4, lr}
   d5c04:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5c06:	6800      	ldr	r0, [r0, #0]
   d5c08:	f001 fe64 	bl	d78d4 <_ZN7TwoWire6unlockEv>
   d5c0c:	4620      	mov	r0, r4
   d5c0e:	bd10      	pop	{r4, pc}

000d5c10 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5c14:	b08a      	sub	sp, #40	; 0x28
   d5c16:	4607      	mov	r7, r0

	WITH_LOCK(wire) {
   d5c18:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5c1a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5c1c:	f001 fe51 	bl	d78c2 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5c20:	221e      	movs	r2, #30
   d5c22:	2100      	movs	r1, #0
   d5c24:	a802      	add	r0, sp, #8

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
		size_t totalLen = memorySize;
   d5c26:	68be      	ldr	r6, [r7, #8]

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5c28:	f003 ff37 	bl	d9a9a <memset>
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
   d5c2c:	2500      	movs	r5, #0
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
   d5c2e:	b1de      	cbz	r6, d5c68 <_ZN6MB85RC5eraseEv+0x58>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5c30:	683b      	ldr	r3, [r7, #0]
   d5c32:	2e1e      	cmp	r6, #30
   d5c34:	46b0      	mov	r8, r6
   d5c36:	bf28      	it	cs
   d5c38:	f04f 081e 	movcs.w	r8, #30
   d5c3c:	68dc      	ldr	r4, [r3, #12]
   d5c3e:	aa02      	add	r2, sp, #8
   d5c40:	4643      	mov	r3, r8
   d5c42:	4629      	mov	r1, r5
   d5c44:	4638      	mov	r0, r7
   d5c46:	47a0      	blx	r4
			if (!result) {
   d5c48:	4604      	mov	r4, r0
   d5c4a:	b948      	cbnz	r0, d5c60 <_ZN6MB85RC5eraseEv+0x50>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d5c4c:	462a      	mov	r2, r5
   d5c4e:	490a      	ldr	r1, [pc, #40]	; (d5c78 <_ZN6MB85RC5eraseEv+0x68>)
   d5c50:	480a      	ldr	r0, [pc, #40]	; (d5c7c <_ZN6MB85RC5eraseEv+0x6c>)
   d5c52:	f7ff ffb1 	bl	d5bb8 <_ZNK5spark6Logger4infoEPKcz>
   d5c56:	a801      	add	r0, sp, #4
   d5c58:	f7ff ffd3 	bl	d5c02 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				return false;
   d5c5c:	4620      	mov	r0, r4
   d5c5e:	e007      	b.n	d5c70 <_ZN6MB85RC5eraseEv+0x60>
			}

			totalLen -= count;
   d5c60:	ebc8 0606 	rsb	r6, r8, r6
			framAddr += count;
   d5c64:	4445      	add	r5, r8
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
   d5c66:	e7e2      	b.n	d5c2e <_ZN6MB85RC5eraseEv+0x1e>
	wire.begin();
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
   d5c68:	a801      	add	r0, sp, #4
   d5c6a:	f7ff ffca 	bl	d5c02 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			totalLen -= count;
			framAddr += count;
		}
	}

	return true;
   d5c6e:	2001      	movs	r0, #1
}
   d5c70:	b00a      	add	sp, #40	; 0x28
   d5c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5c76:	bf00      	nop
   d5c78:	000dd103 	.word	0x000dd103
   d5c7c:	2003e268 	.word	0x2003e268

000d5c80 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5c80:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5c84:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5c86:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5c88:	9001      	str	r0, [sp, #4]

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5c8a:	460e      	mov	r6, r1
   d5c8c:	4617      	mov	r7, r2
   d5c8e:	4698      	mov	r8, r3
      { _M_device.lock(); }
   d5c90:	f001 fe17 	bl	d78c2 <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {

		while(dataLen > 0) {
   d5c94:	f1b8 0f00 	cmp.w	r8, #0
   d5c98:	d101      	bne.n	d5c9e <_ZN6MB85RC8readDataEjPhj+0x1e>
   d5c9a:	2401      	movs	r4, #1
   d5c9c:	e03e      	b.n	d5d1c <_ZN6MB85RC8readDataEjPhj+0x9c>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5c9e:	68e1      	ldr	r1, [r4, #12]
   d5ca0:	6860      	ldr	r0, [r4, #4]
   d5ca2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5ca6:	f001 fe01 	bl	d78ac <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5caa:	0a31      	lsrs	r1, r6, #8
   d5cac:	6860      	ldr	r0, [r4, #4]
   d5cae:	f7ff ff7f 	bl	d5bb0 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5cb2:	4631      	mov	r1, r6
   d5cb4:	6860      	ldr	r0, [r4, #4]
   d5cb6:	f7ff ff7b 	bl	d5bb0 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5cba:	2100      	movs	r1, #0
   d5cbc:	6860      	ldr	r0, [r4, #4]
   d5cbe:	f001 fdf8 	bl	d78b2 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5cc2:	b108      	cbz	r0, d5cc8 <_ZN6MB85RC8readDataEjPhj+0x48>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5cc4:	2400      	movs	r4, #0
   d5cc6:	e029      	b.n	d5d1c <_ZN6MB85RC8readDataEjPhj+0x9c>
   d5cc8:	f1b8 0f20 	cmp.w	r8, #32
			size_t bytesToRead = dataLen;
			if (bytesToRead > 32) {
				bytesToRead = 32;
			}

			wire.requestFrom(addr | DEVICE_ADDR, bytesToRead, true);
   d5ccc:	68e1      	ldr	r1, [r4, #12]
   d5cce:	6860      	ldr	r0, [r4, #4]
   d5cd0:	46c1      	mov	r9, r8
   d5cd2:	bf28      	it	cs
   d5cd4:	f04f 0920 	movcs.w	r9, #32
   d5cd8:	2301      	movs	r3, #1
   d5cda:	464a      	mov	r2, r9
   d5cdc:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5ce0:	f001 fddb 	bl	d789a <_ZN7TwoWire11requestFromEiii>

			if (Wire.available() < (int) bytesToRead) {
   d5ce4:	f002 fe26 	bl	d8934 <_Z19__fetch_global_Wirev>
   d5ce8:	6803      	ldr	r3, [r0, #0]
   d5cea:	691b      	ldr	r3, [r3, #16]
   d5cec:	4798      	blx	r3
   d5cee:	4581      	cmp	r9, r0
   d5cf0:	dce8      	bgt.n	d5cc4 <_ZN6MB85RC8readDataEjPhj+0x44>
   d5cf2:	463d      	mov	r5, r7
   d5cf4:	ebc7 0a06 	rsb	sl, r7, r6
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
				*data++ = Wire.read();    // receive a byte as character
   d5cf8:	f002 fe1c 	bl	d8934 <_Z19__fetch_global_Wirev>
   d5cfc:	6803      	ldr	r3, [r0, #0]
   d5cfe:	695b      	ldr	r3, [r3, #20]
   d5d00:	4798      	blx	r3
   d5d02:	f805 0b01 	strb.w	r0, [r5], #1
			if (Wire.available() < (int) bytesToRead) {
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d5d06:	1bea      	subs	r2, r5, r7
   d5d08:	ebc5 0308 	rsb	r3, r5, r8
   d5d0c:	4591      	cmp	r9, r2
   d5d0e:	eb05 060a 	add.w	r6, r5, sl
   d5d12:	443b      	add	r3, r7
   d5d14:	d8f0      	bhi.n	d5cf8 <_ZN6MB85RC8readDataEjPhj+0x78>
   d5d16:	4698      	mov	r8, r3
				*data++ = Wire.read();    // receive a byte as character
   d5d18:	462f      	mov	r7, r5
   d5d1a:	e7bb      	b.n	d5c94 <_ZN6MB85RC8readDataEjPhj+0x14>


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
   d5d1c:	a801      	add	r0, sp, #4
   d5d1e:	f7ff ff70 	bl	d5c02 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5d22:	4620      	mov	r0, r4
   d5d24:	b002      	add	sp, #8
   d5d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5d2a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5d2a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5d2e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5d30:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5d32:	9001      	str	r0, [sp, #4]
	}
	return result;
}


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5d34:	460d      	mov	r5, r1
   d5d36:	4690      	mov	r8, r2
   d5d38:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5d3a:	f001 fdc2 	bl	d78c2 <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {
		while(dataLen > 0) {
   d5d3e:	b34f      	cbz	r7, d5d94 <_ZN6MB85RC9writeDataEjPKhj+0x6a>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5d40:	68e1      	ldr	r1, [r4, #12]
   d5d42:	6860      	ldr	r0, [r4, #4]
   d5d44:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5d48:	f001 fdb0 	bl	d78ac <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5d4c:	0a29      	lsrs	r1, r5, #8
   d5d4e:	6860      	ldr	r0, [r4, #4]
   d5d50:	f7ff ff2e 	bl	d5bb0 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5d54:	4629      	mov	r1, r5
   d5d56:	6860      	ldr	r0, [r4, #4]
   d5d58:	f7ff ff2a 	bl	d5bb0 <_ZN7TwoWire5writeEj>
   d5d5c:	f108 091e 	add.w	r9, r8, #30
   d5d60:	4646      	mov	r6, r8
   d5d62:	ebc8 0a05 	rsb	sl, r8, r5

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
				wire.write(*data);
   d5d66:	6860      	ldr	r0, [r4, #4]
   d5d68:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5d6c:	6803      	ldr	r3, [r0, #0]
   d5d6e:	689b      	ldr	r3, [r3, #8]
   d5d70:	4798      	blx	r3
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5d72:	45b1      	cmp	r9, r6
   d5d74:	eb06 050a 	add.w	r5, r6, sl
				wire.write(*data);
				framAddr++;
				data++;
   d5d78:	46b0      	mov	r8, r6
				dataLen--;
   d5d7a:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5d7e:	d001      	beq.n	d5d84 <_ZN6MB85RC9writeDataEjPKhj+0x5a>
   d5d80:	2f00      	cmp	r7, #0
   d5d82:	d1f0      	bne.n	d5d66 <_ZN6MB85RC9writeDataEjPKhj+0x3c>
				framAddr++;
				data++;
				dataLen--;
			}

			int stat = wire.endTransmission(true);
   d5d84:	2101      	movs	r1, #1
   d5d86:	6860      	ldr	r0, [r4, #4]
   d5d88:	f001 fd93 	bl	d78b2 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5d8c:	2800      	cmp	r0, #0
   d5d8e:	d0d6      	beq.n	d5d3e <_ZN6MB85RC9writeDataEjPKhj+0x14>
   d5d90:	2400      	movs	r4, #0
   d5d92:	e000      	b.n	d5d96 <_ZN6MB85RC9writeDataEjPKhj+0x6c>
   d5d94:	2401      	movs	r4, #1


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
   d5d96:	a801      	add	r0, sp, #4
   d5d98:	f7ff ff33 	bl	d5c02 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5d9c:	4620      	mov	r0, r4
   d5d9e:	b002      	add	sp, #8
   d5da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5da4 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5da8:	b08b      	sub	sp, #44	; 0x2c
   d5daa:	460e      	mov	r6, r1
   d5dac:	4615      	mov	r5, r2
   d5dae:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5db0:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5db2:	9001      	str	r0, [sp, #4]
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5db4:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d5db6:	f001 fd84 	bl	d78c2 <_ZN7TwoWire4lockEv>

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
   d5dba:	42ae      	cmp	r6, r5
   d5dbc:	d223      	bcs.n	d5e06 <_ZN6MB85RC8moveDataEjjj+0x62>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5dbe:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5dc0:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5dc2:	b90c      	cbnz	r4, d5dc8 <_ZN6MB85RC8moveDataEjjj+0x24>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5dc4:	2401      	movs	r4, #1
   d5dc6:	e03f      	b.n	d5e48 <_ZN6MB85RC8moveDataEjjj+0xa4>
   d5dc8:	2c1e      	cmp	r4, #30
   d5dca:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5dcc:	f8d8 3000 	ldr.w	r3, [r8]
   d5dd0:	bf28      	it	cs
   d5dd2:	271e      	movcs	r7, #30
			while(numBytes > 0) {
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
   d5dd4:	1bf6      	subs	r6, r6, r7
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5dd6:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5dda:	aa02      	add	r2, sp, #8
   d5ddc:	463b      	mov	r3, r7
   d5dde:	4631      	mov	r1, r6
   d5de0:	4640      	mov	r0, r8
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;
   d5de2:	1bed      	subs	r5, r5, r7

				result = readData(framAddrFrom, buf, count);
   d5de4:	47c8      	blx	r9
				if (!result) {
   d5de6:	b908      	cbnz	r0, d5dec <_ZN6MB85RC8moveDataEjjj+0x48>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5de8:	2400      	movs	r4, #0
   d5dea:	e02d      	b.n	d5e48 <_ZN6MB85RC8moveDataEjjj+0xa4>

				result = readData(framAddrFrom, buf, count);
				if (!result) {
					break;
				}
				result = writeData(framAddrTo, buf, count);
   d5dec:	f8d8 3000 	ldr.w	r3, [r8]
   d5df0:	aa02      	add	r2, sp, #8
   d5df2:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5df6:	4629      	mov	r1, r5
   d5df8:	463b      	mov	r3, r7
   d5dfa:	4640      	mov	r0, r8
   d5dfc:	47c8      	blx	r9
				if (!result) {
   d5dfe:	2800      	cmp	r0, #0
   d5e00:	d0f2      	beq.n	d5de8 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}

				numBytes -= count;
   d5e02:	1be4      	subs	r4, r4, r7
	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
			framAddrTo += numBytes;
			while(numBytes > 0) {
   d5e04:	e7dd      	b.n	d5dc2 <_ZN6MB85RC8moveDataEjjj+0x1e>
				numBytes -= count;
			}

		}
		else
		if (framAddrFrom > framAddrTo) {
   d5e06:	d9dd      	bls.n	d5dc4 <_ZN6MB85RC8moveDataEjjj+0x20>
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
   d5e08:	2c00      	cmp	r4, #0
   d5e0a:	d0db      	beq.n	d5dc4 <_ZN6MB85RC8moveDataEjjj+0x20>
   d5e0c:	2c1e      	cmp	r4, #30
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				result = readData(framAddrFrom, buf, count);
   d5e0e:	f8d8 3000 	ldr.w	r3, [r8]
   d5e12:	4627      	mov	r7, r4
   d5e14:	bf28      	it	cs
   d5e16:	271e      	movcs	r7, #30
   d5e18:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5e1c:	aa02      	add	r2, sp, #8
   d5e1e:	463b      	mov	r3, r7
   d5e20:	4631      	mov	r1, r6
   d5e22:	4640      	mov	r0, r8
   d5e24:	47c8      	blx	r9
				if (!result) {
   d5e26:	2800      	cmp	r0, #0
   d5e28:	d0de      	beq.n	d5de8 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				result = writeData(framAddrTo, buf, count);
   d5e2a:	f8d8 3000 	ldr.w	r3, [r8]
   d5e2e:	aa02      	add	r2, sp, #8
   d5e30:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5e34:	4629      	mov	r1, r5
   d5e36:	463b      	mov	r3, r7
   d5e38:	4640      	mov	r0, r8
   d5e3a:	47c8      	blx	r9
				if (!result) {
   d5e3c:	2800      	cmp	r0, #0
   d5e3e:	d0d3      	beq.n	d5de8 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				framAddrFrom += count;
   d5e40:	443e      	add	r6, r7
				framAddrTo += count;
   d5e42:	443d      	add	r5, r7
				numBytes -= count;
   d5e44:	1be4      	subs	r4, r4, r7

		}
		else
		if (framAddrFrom > framAddrTo) {
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
   d5e46:	e7df      	b.n	d5e08 <_ZN6MB85RC8moveDataEjjj+0x64>
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5e48:	a801      	add	r0, sp, #4
   d5e4a:	f7ff feda 	bl	d5c02 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5e4e:	4620      	mov	r0, r4
   d5e50:	b00b      	add	sp, #44	; 0x2c
   d5e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5e56 <_GLOBAL__sub_I__ZN6MB85RCC2ER7TwoWireji>:
   d5e56:	f000 bce5 	b.w	d6824 <HAL_Pin_Map>

000d5e5a <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d5e5a:	2040      	movs	r0, #64	; 0x40
   d5e5c:	4770      	bx	lr

000d5e5e <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d5e5e:	2000      	movs	r0, #0
   d5e60:	4770      	bx	lr

000d5e62 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d5e62:	2080      	movs	r0, #128	; 0x80
   d5e64:	4770      	bx	lr

000d5e66 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d5e66:	20ff      	movs	r0, #255	; 0xff
   d5e68:	4770      	bx	lr

000d5e6a <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d5e6a:	4770      	bx	lr

000d5e6c <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d5e6c:	4770      	bx	lr

000d5e6e <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d5e6e:	4770      	bx	lr

000d5e70 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d5e70:	4770      	bx	lr

000d5e72 <_ZN12MCP79410TimeD0Ev>:

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d5e72:	b510      	push	{r4, lr}

}
   d5e74:	2114      	movs	r1, #20

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d5e76:	4604      	mov	r4, r0

}
   d5e78:	f002 fdc3 	bl	d8a02 <_ZdlPvj>
   d5e7c:	4620      	mov	r0, r4
   d5e7e:	bd10      	pop	{r4, pc}

000d5e80 <_ZN12MCP79410SRAMD0Ev>:

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d5e80:	b510      	push	{r4, lr}

}
   d5e82:	2108      	movs	r1, #8

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d5e84:	4604      	mov	r4, r0

}
   d5e86:	f002 fdbc 	bl	d8a02 <_ZdlPvj>
   d5e8a:	4620      	mov	r0, r4
   d5e8c:	bd10      	pop	{r4, pc}

000d5e8e <_ZN14MCP79410EEPROMD0Ev>:
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d5e8e:	b510      	push	{r4, lr}

}
   d5e90:	2108      	movs	r1, #8
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d5e92:	4604      	mov	r4, r0

}
   d5e94:	f002 fdb5 	bl	d8a02 <_ZdlPvj>
   d5e98:	4620      	mov	r0, r4
   d5e9a:	bd10      	pop	{r4, pc}

000d5e9c <_ZN8MCP79410D0Ev>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d5e9c:	b510      	push	{r4, lr}

}
   d5e9e:	211c      	movs	r1, #28
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d5ea0:	4604      	mov	r4, r0

}
   d5ea2:	f002 fdae 	bl	d8a02 <_ZdlPvj>
   d5ea6:	4620      	mov	r0, r4
   d5ea8:	bd10      	pop	{r4, pc}

000d5eaa <_ZN18MCP79410MemoryBase5eraseEv>:

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d5eaa:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d5eae:	6803      	ldr	r3, [r0, #0]
   d5eb0:	68db      	ldr	r3, [r3, #12]

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d5eb2:	4605      	mov	r5, r0
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d5eb4:	4798      	blx	r3
   d5eb6:	2210      	movs	r2, #16
   d5eb8:	4601      	mov	r1, r0
   d5eba:	4668      	mov	r0, sp
   d5ebc:	f003 fded 	bl	d9a9a <memset>

	size_t len = length();
   d5ec0:	682b      	ldr	r3, [r5, #0]
   d5ec2:	4628      	mov	r0, r5
   d5ec4:	689b      	ldr	r3, [r3, #8]
   d5ec6:	4798      	blx	r3
	size_t offset = 0;
   d5ec8:	2400      	movs	r4, #0
bool MCP79410MemoryBase::erase() {
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
   d5eca:	4607      	mov	r7, r0
MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
	bool bResult = false;
   d5ecc:	4620      	mov	r0, r4
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d5ece:	42bc      	cmp	r4, r7
   d5ed0:	d20e      	bcs.n	d5ef0 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		size_t count = sizeof(buf);
		if (count > (len - offset)) {
   d5ed2:	1b3e      	subs	r6, r7, r4

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d5ed4:	2e10      	cmp	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d5ed6:	682b      	ldr	r3, [r5, #0]

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d5ed8:	bf28      	it	cs
   d5eda:	2610      	movcs	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d5edc:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d5ee0:	466a      	mov	r2, sp
   d5ee2:	4633      	mov	r3, r6
   d5ee4:	4621      	mov	r1, r4
   d5ee6:	4628      	mov	r0, r5
   d5ee8:	47c0      	blx	r8
		if (!bResult) {
   d5eea:	b108      	cbz	r0, d5ef0 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
			break;
		}

		offset += count;
   d5eec:	4434      	add	r4, r6
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d5eee:	e7ee      	b.n	d5ece <_ZN18MCP79410MemoryBase5eraseEv+0x24>

		offset += count;
	}

	return bResult;
}
   d5ef0:	b004      	add	sp, #16
   d5ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5ef6 <_ZN12MCP79410Time5clearEv>:

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d5ef6:	2300      	movs	r3, #0
	rawMonth = 1;
   d5ef8:	2201      	movs	r2, #1

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d5efa:	7283      	strb	r3, [r0, #10]
	rawMonth = 1;
   d5efc:	72c2      	strb	r2, [r0, #11]
	rawDayOfMonth = 1;
   d5efe:	7302      	strb	r2, [r0, #12]
	rawDayOfWeek = 1;
   d5f00:	7342      	strb	r2, [r0, #13]
	rawHour = 0;
   d5f02:	7383      	strb	r3, [r0, #14]
	rawMinute = 0;
   d5f04:	73c3      	strb	r3, [r0, #15]
	rawSecond = 0;
   d5f06:	7403      	strb	r3, [r0, #16]
	alarmMode = 0;
   d5f08:	7443      	strb	r3, [r0, #17]
   d5f0a:	4770      	bx	lr

000d5f0c <_ZN12MCP79410TimeC1Ev>:
	return (stat == 0);
}



MCP79410Time::MCP79410Time() {
   d5f0c:	2201      	movs	r2, #1
   d5f0e:	b508      	push	{r3, lr}
   d5f10:	7142      	strb	r2, [r0, #5]
   d5f12:	2202      	movs	r2, #2
   d5f14:	7182      	strb	r2, [r0, #6]
   d5f16:	2203      	movs	r2, #3
   d5f18:	4b06      	ldr	r3, [pc, #24]	; (d5f34 <_ZN12MCP79410TimeC1Ev+0x28>)
   d5f1a:	71c2      	strb	r2, [r0, #7]
   d5f1c:	2204      	movs	r2, #4
   d5f1e:	6003      	str	r3, [r0, #0]
   d5f20:	7202      	strb	r2, [r0, #8]
   d5f22:	2300      	movs	r3, #0
   d5f24:	2207      	movs	r2, #7
   d5f26:	7103      	strb	r3, [r0, #4]
   d5f28:	7242      	strb	r2, [r0, #9]
   d5f2a:	7443      	strb	r3, [r0, #17]
	clear();
   d5f2c:	f7ff ffe3 	bl	d5ef6 <_ZN12MCP79410Time5clearEv>
}
   d5f30:	bd08      	pop	{r3, pc}
   d5f32:	bf00      	nop
   d5f34:	000dd2e8 	.word	0x000dd2e8

000d5f38 <_ZN12MCP79410Time8bcdToIntEh>:
	return String(buf);
}

// [static]
int MCP79410Time::bcdToInt(uint8_t value) {
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5f38:	0903      	lsrs	r3, r0, #4
}
   d5f3a:	220a      	movs	r2, #10
   d5f3c:	f000 000f 	and.w	r0, r0, #15
   d5f40:	fb02 0003 	mla	r0, r2, r3, r0
   d5f44:	4770      	bx	lr

000d5f46 <_ZNK12MCP79410Time7getYearEv>:
	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
}

int MCP79410Time::getYear() const {
   d5f46:	b508      	push	{r3, lr}
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
   d5f48:	7a80      	ldrb	r0, [r0, #10]
   d5f4a:	f7ff fff5 	bl	d5f38 <_ZN12MCP79410Time8bcdToIntEh>
}
   d5f4e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d5f52:	bd08      	pop	{r3, pc}

000d5f54 <_ZNK12MCP79410Time8getMonthEv>:
void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
}

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
   d5f54:	7ac0      	ldrb	r0, [r0, #11]
   d5f56:	f000 001f 	and.w	r0, r0, #31
   d5f5a:	f7ff bfed 	b.w	d5f38 <_ZN12MCP79410Time8bcdToIntEh>

000d5f5e <_ZNK12MCP79410Time13getDayOfMonthEv>:
	rawMonth = intToBcd(value);
}


int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
   d5f5e:	7b00      	ldrb	r0, [r0, #12]
   d5f60:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d5f64:	f7ff bfe8 	b.w	d5f38 <_ZN12MCP79410Time8bcdToIntEh>

000d5f68 <_ZNK12MCP79410Time7getHourEv>:
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
}


int MCP79410Time::getHour() const {
   d5f68:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d5f6a:	7b81      	ldrb	r1, [r0, #14]
   d5f6c:	064a      	lsls	r2, r1, #25
   d5f6e:	d50d      	bpl.n	d5f8c <_ZNK12MCP79410Time7getHourEv+0x24>
		// Bit 6 = 1 (12 hour format)
		int hour12 = bcdToInt(rawHour & 0x1f);
   d5f70:	f001 001f 	and.w	r0, r1, #31
   d5f74:	f7ff ffe0 	bl	d5f38 <_ZN12MCP79410Time8bcdToIntEh>

		if (rawHour & 0x20) {
   d5f78:	068b      	lsls	r3, r1, #26
   d5f7a:	d503      	bpl.n	d5f84 <_ZNK12MCP79410Time7getHourEv+0x1c>
			// Bit 5 = 1 (PM)
			if (hour12 == 12) {
   d5f7c:	280c      	cmp	r0, #12
   d5f7e:	d00b      	beq.n	d5f98 <_ZNK12MCP79410Time7getHourEv+0x30>
				// 12 PM = 12
				return 12;
			}
			else {
				return hour12 + 12;
   d5f80:	300c      	adds	r0, #12
   d5f82:	bd08      	pop	{r3, pc}
			}
		}
		else {
			// Bit 5 = 0 (AM)
			if (hour12 == 12) {
   d5f84:	280c      	cmp	r0, #12
   d5f86:	bf08      	it	eq
   d5f88:	2000      	moveq	r0, #0
   d5f8a:	bd08      	pop	{r3, pc}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d5f8c:	f001 003f 	and.w	r0, r1, #63	; 0x3f
	}
}
   d5f90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d5f94:	f7ff bfd0 	b.w	d5f38 <_ZN12MCP79410Time8bcdToIntEh>
	}
}
   d5f98:	bd08      	pop	{r3, pc}

000d5f9a <_ZNK12MCP79410Time9getMinuteEv>:
}



int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
   d5f9a:	7bc0      	ldrb	r0, [r0, #15]
   d5f9c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5fa0:	f7ff bfca 	b.w	d5f38 <_ZN12MCP79410Time8bcdToIntEh>

000d5fa4 <_ZNK12MCP79410Time9getSecondEv>:
}


int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
   d5fa4:	7c00      	ldrb	r0, [r0, #16]
   d5fa6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5faa:	f7ff bfc5 	b.w	d5f38 <_ZN12MCP79410Time8bcdToIntEh>

000d5fae <_ZNK12MCP79410Time10toUnixTimeEv>:
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d5fae:	b510      	push	{r4, lr}
   d5fb0:	b08a      	sub	sp, #40	; 0x28
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d5fb2:	2224      	movs	r2, #36	; 0x24
   d5fb4:	2100      	movs	r1, #0
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d5fb6:	4604      	mov	r4, r0
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d5fb8:	a801      	add	r0, sp, #4
   d5fba:	f003 fd6e 	bl	d9a9a <memset>

	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d5fbe:	4620      	mov	r0, r4
   d5fc0:	f7ff ffc1 	bl	d5f46 <_ZNK12MCP79410Time7getYearEv>
   d5fc4:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d5fc8:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d5fca:	4620      	mov	r0, r4
   d5fcc:	f7ff ffc2 	bl	d5f54 <_ZNK12MCP79410Time8getMonthEv>
   d5fd0:	3801      	subs	r0, #1
   d5fd2:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d5fd4:	4620      	mov	r0, r4
   d5fd6:	f7ff ffc2 	bl	d5f5e <_ZNK12MCP79410Time13getDayOfMonthEv>
   d5fda:	9004      	str	r0, [sp, #16]

	tm.tm_hour = getHour();
   d5fdc:	4620      	mov	r0, r4
   d5fde:	f7ff ffc3 	bl	d5f68 <_ZNK12MCP79410Time7getHourEv>
   d5fe2:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d5fe4:	4620      	mov	r0, r4
   d5fe6:	f7ff ffd8 	bl	d5f9a <_ZNK12MCP79410Time9getMinuteEv>
   d5fea:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d5fec:	4620      	mov	r0, r4
   d5fee:	f7ff ffd9 	bl	d5fa4 <_ZNK12MCP79410Time9getSecondEv>
   d5ff2:	9001      	str	r0, [sp, #4]

	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
   d5ff4:	a801      	add	r0, sp, #4
   d5ff6:	f003 fe35 	bl	d9c64 <mktime>
}
   d5ffa:	b00a      	add	sp, #40	; 0x28
   d5ffc:	bd10      	pop	{r4, pc}

000d5ffe <_ZN12MCP79410Time8intToBcdEi>:
uint8_t MCP79410Time::intToBcd(int value) {
	uint8_t result;

	result = (uint8_t) (((value / 10) % 10) << 4);

	result |= (uint8_t) (value % 10);
   d5ffe:	220a      	movs	r2, #10
   d6000:	fb90 f3f2 	sdiv	r3, r0, r2
   d6004:	fb93 f1f2 	sdiv	r1, r3, r2
   d6008:	fb02 3111 	mls	r1, r2, r1, r3
   d600c:	fb02 0313 	mls	r3, r2, r3, r0
   d6010:	ea43 1001 	orr.w	r0, r3, r1, lsl #4

	return result;
}
   d6014:	b2c0      	uxtb	r0, r0
   d6016:	4770      	bx	lr

000d6018 <_ZN12MCP79410Time7setYearEi>:
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
   d6018:	2364      	movs	r3, #100	; 0x64
int MCP79410Time::getYear() const {
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
   d601a:	b510      	push	{r4, lr}
   d601c:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d601e:	fb91 f0f3 	sdiv	r0, r1, r3
   d6022:	fb00 1013 	mls	r0, r0, r3, r1
   d6026:	f7ff ffea 	bl	d5ffe <_ZN12MCP79410Time8intToBcdEi>
   d602a:	72a0      	strb	r0, [r4, #10]
   d602c:	bd10      	pop	{r4, pc}

000d602e <_ZN12MCP79410Time8setMonthEi>:

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
}

void MCP79410Time::setMonth(int value) {
   d602e:	b510      	push	{r4, lr}
   d6030:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d6032:	4608      	mov	r0, r1
   d6034:	f7ff ffe3 	bl	d5ffe <_ZN12MCP79410Time8intToBcdEi>
   d6038:	72e0      	strb	r0, [r4, #11]
   d603a:	bd10      	pop	{r4, pc}

000d603c <_ZN12MCP79410Time13setDayOfMonthEi>:

int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
}

void MCP79410Time::setDayOfMonth(int value) {
   d603c:	b510      	push	{r4, lr}
   d603e:	4604      	mov	r4, r0
	rawDayOfMonth &= ~0x3f;
	rawDayOfMonth |= intToBcd(value);
   d6040:	4608      	mov	r0, r1
   d6042:	f7ff ffdc 	bl	d5ffe <_ZN12MCP79410Time8intToBcdEi>
   d6046:	7b23      	ldrb	r3, [r4, #12]
   d6048:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d604c:	4318      	orrs	r0, r3
   d604e:	7320      	strb	r0, [r4, #12]
   d6050:	bd10      	pop	{r4, pc}

000d6052 <_ZN12MCP79410Time12setDayOfWeekEi>:
	// rawDayOfWeek has the day of week 1 - 7 in the low bits. However, it does not enforce a particular day of week scheme;
	// it just keeps rolling it as time increments.
	return bcdToInt(rawDayOfWeek & 0x7) - 1;
}

void MCP79410Time::setDayOfWeek(int value) {
   d6052:	b510      	push	{r4, lr}
   d6054:	4604      	mov	r4, r0
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
   d6056:	1c48      	adds	r0, r1, #1
   d6058:	f7ff ffd1 	bl	d5ffe <_ZN12MCP79410Time8intToBcdEi>
   d605c:	7b63      	ldrb	r3, [r4, #13]
   d605e:	f023 0307 	bic.w	r3, r3, #7
   d6062:	4318      	orrs	r0, r3
   d6064:	7360      	strb	r0, [r4, #13]
   d6066:	bd10      	pop	{r4, pc}

000d6068 <_ZN12MCP79410Time7setHourEi>:
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
	}
}

void MCP79410Time::setHour(int value) {
   d6068:	b510      	push	{r4, lr}
   d606a:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d606c:	4608      	mov	r0, r1
   d606e:	f7ff ffc6 	bl	d5ffe <_ZN12MCP79410Time8intToBcdEi>
   d6072:	73a0      	strb	r0, [r4, #14]
   d6074:	bd10      	pop	{r4, pc}

000d6076 <_ZN12MCP79410Time9setMinuteEi>:

int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
}

void MCP79410Time::setMinute(int value) {
   d6076:	b510      	push	{r4, lr}
   d6078:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d607a:	4608      	mov	r0, r1
   d607c:	f7ff ffbf 	bl	d5ffe <_ZN12MCP79410Time8intToBcdEi>
   d6080:	73e0      	strb	r0, [r4, #15]
   d6082:	bd10      	pop	{r4, pc}

000d6084 <_ZN12MCP79410Time9setSecondEi>:
int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
}

void MCP79410Time::setSecond(int value) {
   d6084:	b510      	push	{r4, lr}
   d6086:	4604      	mov	r4, r0
	rawSecond &= ~0x7f;
	rawSecond |= intToBcd(value);
   d6088:	4608      	mov	r0, r1
   d608a:	f7ff ffb8 	bl	d5ffe <_ZN12MCP79410Time8intToBcdEi>
   d608e:	7c23      	ldrb	r3, [r4, #16]
   d6090:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d6094:	4318      	orrs	r0, r3
   d6096:	7420      	strb	r0, [r4, #16]
   d6098:	bd10      	pop	{r4, pc}

000d609a <_ZN12MCP79410Time12fromUnixTimeEl>:
	rawSecond = 0;
	alarmMode = 0;
}


void MCP79410Time::fromUnixTime(time_t time) {
   d609a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d609c:	4604      	mov	r4, r0
   d609e:	a802      	add	r0, sp, #8
   d60a0:	f840 1d04 	str.w	r1, [r0, #-4]!
	struct tm *tm = gmtime(&time);
   d60a4:	f003 fb48 	bl	d9738 <gmtime>
   d60a8:	4605      	mov	r5, r0

	// Technically tm_year is years since 1900 but we can't represent dates not in 2000 - 2099
	setYear(tm->tm_year);
   d60aa:	6941      	ldr	r1, [r0, #20]
   d60ac:	4620      	mov	r0, r4
   d60ae:	f7ff ffb3 	bl	d6018 <_ZN12MCP79410Time7setYearEi>

	// 0 <= tm_mon <= 11! We use the more conventional 1-12 for getMonth/setMonth
	setMonth(tm->tm_mon + 1);
   d60b2:	6929      	ldr	r1, [r5, #16]
   d60b4:	4620      	mov	r0, r4
   d60b6:	3101      	adds	r1, #1
   d60b8:	f7ff ffb9 	bl	d602e <_ZN12MCP79410Time8setMonthEi>

	setDayOfMonth(tm->tm_mday);
   d60bc:	68e9      	ldr	r1, [r5, #12]
   d60be:	4620      	mov	r0, r4
   d60c0:	f7ff ffbc 	bl	d603c <_ZN12MCP79410Time13setDayOfMonthEi>

	setDayOfWeek(tm->tm_wday);
   d60c4:	69a9      	ldr	r1, [r5, #24]
   d60c6:	4620      	mov	r0, r4
   d60c8:	f7ff ffc3 	bl	d6052 <_ZN12MCP79410Time12setDayOfWeekEi>


	// days since Sunday – [0, 6]

	setHour(tm->tm_hour); // tm_hour is 0-23
   d60cc:	68a9      	ldr	r1, [r5, #8]
   d60ce:	4620      	mov	r0, r4
   d60d0:	f7ff ffca 	bl	d6068 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d60d4:	6869      	ldr	r1, [r5, #4]
   d60d6:	4620      	mov	r0, r4
   d60d8:	f7ff ffcd 	bl	d6076 <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d60dc:	6829      	ldr	r1, [r5, #0]
   d60de:	293b      	cmp	r1, #59	; 0x3b
   d60e0:	bfa8      	it	ge
   d60e2:	213b      	movge	r1, #59	; 0x3b
   d60e4:	4620      	mov	r0, r4
   d60e6:	f7ff ffcd 	bl	d6084 <_ZN12MCP79410Time9setSecondEi>
}
   d60ea:	b003      	add	sp, #12
   d60ec:	bd30      	pop	{r4, r5, pc}

000d60ee <_ZN12MCP79410Time12setAlarmTimeEl>:
	clear();
	alarmMode = ALARM_DAY_OF_MONTH;
	setDayOfMonth(dayOfMonth);
}

void MCP79410Time::setAlarmTime(time_t unixTime) {
   d60ee:	b510      	push	{r4, lr}
   d60f0:	4604      	mov	r4, r0
	fromUnixTime(unixTime);
   d60f2:	f7ff ffd2 	bl	d609a <_ZN12MCP79410Time12fromUnixTimeEl>
	alarmMode = ALARM_MONTH_DAY_DOW_HMS;
   d60f6:	7a63      	ldrb	r3, [r4, #9]
   d60f8:	7463      	strb	r3, [r4, #17]
   d60fa:	bd10      	pop	{r4, pc}

000d60fc <_ZN8MCP79410C1ER7TwoWire>:

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d60fc:	4a08      	ldr	r2, [pc, #32]	; (d6120 <_ZN8MCP79410C1ER7TwoWire+0x24>)
   d60fe:	6002      	str	r2, [r0, #0]
   d6100:	2200      	movs	r2, #0
   d6102:	7202      	strb	r2, [r0, #8]
   d6104:	7242      	strb	r2, [r0, #9]
   d6106:	2201      	movs	r2, #1
   d6108:	7282      	strb	r2, [r0, #10]
   d610a:	4603      	mov	r3, r0
   d610c:	2203      	movs	r2, #3
   d610e:	72c2      	strb	r2, [r0, #11]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6110:	4a04      	ldr	r2, [pc, #16]	; (d6124 <_ZN8MCP79410C1ER7TwoWire+0x28>)

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d6112:	6041      	str	r1, [r0, #4]
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d6114:	6118      	str	r0, [r3, #16]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6116:	60c2      	str	r2, [r0, #12]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6118:	4a03      	ldr	r2, [pc, #12]	; (d6128 <_ZN8MCP79410C1ER7TwoWire+0x2c>)
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d611a:	6198      	str	r0, [r3, #24]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d611c:	6142      	str	r2, [r0, #20]
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}
   d611e:	4770      	bx	lr
   d6120:	000dd2f8 	.word	0x000dd2f8
   d6124:	000dd1c8 	.word	0x000dd1c8
   d6128:	000dd1a4 	.word	0x000dd1a4

000d612c <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d612c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6130:	4605      	mov	r5, r0
   d6132:	460f      	mov	r7, r1
   d6134:	4691      	mov	r9, r2
   d6136:	469a      	mov	sl, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6138:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d613a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d613c:	429c      	cmp	r4, r3
   d613e:	d230      	bcs.n	d61a2 <_ZNK8MCP7941010deviceReadEhhPhj+0x76>
		wire.beginTransmission(i2cAddr);
   d6140:	4639      	mov	r1, r7
   d6142:	6868      	ldr	r0, [r5, #4]
   d6144:	f001 fbae 	bl	d78a4 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6148:	eb09 0104 	add.w	r1, r9, r4
   d614c:	6868      	ldr	r0, [r5, #4]
   d614e:	f7ff fd2f 	bl	d5bb0 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d6152:	2100      	movs	r1, #0
   d6154:	6868      	ldr	r0, [r5, #4]
   d6156:	f001 fbac 	bl	d78b2 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d615a:	4606      	mov	r6, r0
   d615c:	b9d8      	cbnz	r0, d6196 <_ZNK8MCP7941010deviceReadEhhPhj+0x6a>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d615e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d6160:	6868      	ldr	r0, [r5, #4]
		wire.beginTransmission(i2cAddr);
		wire.write(addr + offset);
		stat = wire.endTransmission(false);
		if (stat == 0) {
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d6162:	1b1a      	subs	r2, r3, r4
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d6164:	2a20      	cmp	r2, #32
   d6166:	bf28      	it	cs
   d6168:	2220      	movcs	r2, #32
   d616a:	2301      	movs	r3, #1
   d616c:	b2d2      	uxtb	r2, r2
   d616e:	4639      	mov	r1, r7
   d6170:	f001 fb8a 	bl	d7888 <_ZN7TwoWire11requestFromEhhh>
   d6174:	eb0a 0804 	add.w	r8, sl, r4
   d6178:	4683      	mov	fp, r0
   d617a:	4646      	mov	r6, r8
			for(size_t ii = 0; ii < count; ii++) {
   d617c:	ebc8 0306 	rsb	r3, r8, r6
   d6180:	459b      	cmp	fp, r3
   d6182:	d906      	bls.n	d6192 <_ZNK8MCP7941010deviceReadEhhPhj+0x66>
				buf[ii + offset] = wire.read();
   d6184:	6868      	ldr	r0, [r5, #4]
   d6186:	6803      	ldr	r3, [r0, #0]
   d6188:	695b      	ldr	r3, [r3, #20]
   d618a:	4798      	blx	r3
   d618c:	f806 0b01 	strb.w	r0, [r6], #1
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
			for(size_t ii = 0; ii < count; ii++) {
   d6190:	e7f4      	b.n	d617c <_ZNK8MCP7941010deviceReadEhhPhj+0x50>
				buf[ii + offset] = wire.read();
			}
			offset += count;
   d6192:	445c      	add	r4, fp
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d6194:	e7d1      	b.n	d613a <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
				buf[ii + offset] = wire.read();
			}
			offset += count;
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d6196:	4602      	mov	r2, r0
   d6198:	4904      	ldr	r1, [pc, #16]	; (d61ac <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d619a:	4805      	ldr	r0, [pc, #20]	; (d61b0 <_ZNK8MCP7941010deviceReadEhhPhj+0x84>)
   d619c:	f7ff fd0c 	bl	d5bb8 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d61a0:	e000      	b.n	d61a4 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
   d61a2:	2600      	movs	r6, #0
		}
	}
	return stat;
}
   d61a4:	4630      	mov	r0, r6
   d61a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d61aa:	bf00      	nop
   d61ac:	000dd242 	.word	0x000dd242
   d61b0:	2003e198 	.word	0x2003e198

000d61b4 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
	buf[6] = time.rawYear;

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
}

uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d61b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d61b6:	2301      	movs	r3, #1
   d61b8:	9300      	str	r3, [sp, #0]
   d61ba:	460a      	mov	r2, r1
   d61bc:	ab03      	add	r3, sp, #12
   d61be:	216f      	movs	r1, #111	; 0x6f
   d61c0:	f7ff ffb4 	bl	d612c <_ZNK8MCP7941010deviceReadEhhPhj>
   d61c4:	b910      	cbnz	r0, d61cc <_ZNK8MCP7941022deviceReadRegisterByteEh+0x18>
		// log.trace("deviceReadRegisterByte addr=%02x value=%02x", addr, buf[0]);
		return buf[0];
   d61c6:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d61ca:	e000      	b.n	d61ce <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1a>
	}
	else {
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
   d61cc:	2000      	movs	r0, #0
	}
}
   d61ce:	b005      	add	sp, #20
   d61d0:	f85d fb04 	ldr.w	pc, [sp], #4

000d61d4 <_ZNK8MCP7941020getOscillatorRunningEv>:

bool MCP79410::getPowerFail() const {
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_PWRFAIL) != 0;
}

bool MCP79410::getOscillatorRunning() const {
   d61d4:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d61d6:	2103      	movs	r1, #3
   d61d8:	f7ff ffec 	bl	d61b4 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d61dc:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d61e0:	bd08      	pop	{r3, pc}

000d61e2 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>:
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d61e2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d61e4:	461e      	mov	r6, r3
   d61e6:	2b00      	cmp	r3, #0
   d61e8:	bf0c      	ite	eq
   d61ea:	2307      	moveq	r3, #7
   d61ec:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d61ee:	9300      	str	r3, [sp, #0]
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d61f0:	4614      	mov	r4, r2
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d61f2:	ab02      	add	r3, sp, #8
   d61f4:	460a      	mov	r2, r1
   d61f6:	216f      	movs	r1, #111	; 0x6f
   d61f8:	f7ff ff98 	bl	d612c <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d61fc:	4605      	mov	r5, r0
   d61fe:	b9d8      	cbnz	r0, d6238 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			time.rawSecond = buf[0];
   d6200:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6204:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d6206:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d620a:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d620c:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d6210:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d6212:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6216:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d6218:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d621c:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d621e:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6222:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d6224:	b91e      	cbnz	r6, d622e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x4c>
				time.rawYear = buf[6];
   d6226:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d622a:	72a3      	strb	r3, [r4, #10]
   d622c:	e004      	b.n	d6238 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			}
			else {
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d622e:	f002 f94f 	bl	d84d0 <_ZN9TimeClass4yearEv>
   d6232:	f7ff fee4 	bl	d5ffe <_ZN12MCP79410Time8intToBcdEi>
   d6236:	72a0      	strb	r0, [r4, #10]
			time.rawYear = MCP79410Time::intToBcd(Time.year());
		}
	}

	return stat;
}
   d6238:	4628      	mov	r0, r5
   d623a:	b004      	add	sp, #16
   d623c:	bd70      	pop	{r4, r5, r6, pc}

000d623e <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
	else {
		return 0;
	}
}

bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d623e:	b538      	push	{r3, r4, r5, lr}
   d6240:	2300      	movs	r3, #0
   d6242:	460c      	mov	r4, r1
   d6244:	460a      	mov	r2, r1
   d6246:	4619      	mov	r1, r3
   d6248:	4605      	mov	r5, r0
   d624a:	f7ff ffca 	bl	d61e2 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
	if (stat == 0) {
   d624e:	b928      	cbnz	r0, d625c <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6250:	7aa3      	ldrb	r3, [r4, #10]
   d6252:	b11b      	cbz	r3, d625c <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
   d6254:	4628      	mov	r0, r5
   d6256:	f7ff ffbd 	bl	d61d4 <_ZNK8MCP7941020getOscillatorRunningEv>
   d625a:	b900      	cbnz	r0, d625e <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
			return true;
		}
		else {
			return false;
   d625c:	2000      	movs	r0, #0
		}
	}
	else {
		return false;
	}
}
   d625e:	bd38      	pop	{r3, r4, r5, pc}

000d6260 <_ZNK8MCP7941010getRTCTimeEv>:

bool MCP79410::isRTCValid() const {
	return getRTCTime() != 0;
}

time_t MCP79410::getRTCTime() const {
   d6260:	b510      	push	{r4, lr}
   d6262:	b086      	sub	sp, #24
   d6264:	4604      	mov	r4, r0
	MCP79410Time time;
   d6266:	a801      	add	r0, sp, #4
   d6268:	f7ff fe50 	bl	d5f0c <_ZN12MCP79410TimeC1Ev>

	bool bResult = getRTCTime(time);
   d626c:	a901      	add	r1, sp, #4
   d626e:	4620      	mov	r0, r4
   d6270:	f7ff ffe5 	bl	d623e <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d6274:	b110      	cbz	r0, d627c <_ZNK8MCP7941010getRTCTimeEv+0x1c>
		return time.toUnixTime();
   d6276:	a801      	add	r0, sp, #4
   d6278:	f7ff fe99 	bl	d5fae <_ZNK12MCP79410Time10toUnixTimeEv>
	}
	else {
		return 0;
	}
}
   d627c:	b006      	add	sp, #24
   d627e:	bd10      	pop	{r4, pc}

000d6280 <_ZN8MCP794105setupEv>:

MCP79410::~MCP79410() {

}

void MCP79410::setup() {
   d6280:	b530      	push	{r4, r5, lr}
   d6282:	4604      	mov	r4, r0
   d6284:	b085      	sub	sp, #20
	wire.begin();
   d6286:	6840      	ldr	r0, [r0, #4]
   d6288:	f001 faf8 	bl	d787c <_ZN7TwoWire5beginEv>

	if (!Time.isValid()) {
   d628c:	f002 f8cc 	bl	d8428 <_ZN9TimeClass7isValidEv>
   d6290:	b9c0      	cbnz	r0, d62c4 <_ZN8MCP794105setupEv+0x44>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d6292:	7ae3      	ldrb	r3, [r4, #11]
   d6294:	079b      	lsls	r3, r3, #30
   d6296:	d515      	bpl.n	d62c4 <_ZN8MCP794105setupEv+0x44>
			time_t rtcTime = getRTCTime();
   d6298:	4620      	mov	r0, r4
   d629a:	f7ff ffe1 	bl	d6260 <_ZNK8MCP7941010getRTCTimeEv>
			if (rtcTime != 0) {
   d629e:	4605      	mov	r5, r0
   d62a0:	b180      	cbz	r0, d62c4 <_ZN8MCP794105setupEv+0x44>
				Time.setTime(rtcTime);
   d62a2:	f002 f801 	bl	d82a8 <_ZN9TimeClass7setTimeEl>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d62a6:	4b09      	ldr	r3, [pc, #36]	; (d62cc <_ZN8MCP794105setupEv+0x4c>)
   d62a8:	4909      	ldr	r1, [pc, #36]	; (d62d0 <_ZN8MCP794105setupEv+0x50>)
   d62aa:	681b      	ldr	r3, [r3, #0]
   d62ac:	462a      	mov	r2, r5
   d62ae:	4668      	mov	r0, sp
   d62b0:	f002 f888 	bl	d83c4 <_ZN9TimeClass6formatElPKc>
   d62b4:	4807      	ldr	r0, [pc, #28]	; (d62d4 <_ZN8MCP794105setupEv+0x54>)
   d62b6:	9a00      	ldr	r2, [sp, #0]
   d62b8:	4907      	ldr	r1, [pc, #28]	; (d62d8 <_ZN8MCP794105setupEv+0x58>)
   d62ba:	f7ff fc7d 	bl	d5bb8 <_ZNK5spark6Logger4infoEPKcz>
   d62be:	4668      	mov	r0, sp
   d62c0:	f001 fdc5 	bl	d7e4e <_ZN6StringD1Ev>
			}
		}
	}

	setupDone = true;
   d62c4:	2301      	movs	r3, #1
   d62c6:	7223      	strb	r3, [r4, #8]
}
   d62c8:	b005      	add	sp, #20
   d62ca:	bd30      	pop	{r4, r5, pc}
   d62cc:	2003df74 	.word	0x2003df74
   d62d0:	2003e488 	.word	0x2003e488
   d62d4:	2003e198 	.word	0x2003e198
   d62d8:	000dd25c 	.word	0x000dd25c

000d62dc <_ZN14MCP79410EEPROM8readDataEjPhj>:

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d62dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d62e0:	eb01 0803 	add.w	r8, r1, r3

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d62e4:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d62e6:	6803      	ldr	r3, [r0, #0]
   d62e8:	689b      	ldr	r3, [r3, #8]

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d62ea:	4604      	mov	r4, r0
   d62ec:	460d      	mov	r5, r1
   d62ee:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d62f0:	4798      	blx	r3
   d62f2:	4580      	cmp	r8, r0
   d62f4:	d80a      	bhi.n	d630c <_ZN14MCP79410EEPROM8readDataEjPhj+0x30>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d62f6:	9600      	str	r6, [sp, #0]
   d62f8:	463b      	mov	r3, r7
   d62fa:	b2ea      	uxtb	r2, r5
   d62fc:	2157      	movs	r1, #87	; 0x57
   d62fe:	6860      	ldr	r0, [r4, #4]
   d6300:	f7ff ff14 	bl	d612c <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d6304:	fab0 f080 	clz	r0, r0
   d6308:	0940      	lsrs	r0, r0, #5
   d630a:	e000      	b.n	d630e <_ZN14MCP79410EEPROM8readDataEjPhj+0x32>

bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d630c:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}
   d630e:	b002      	add	sp, #8
   d6310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6314 <_ZN12MCP79410SRAM8readDataEjPhj>:

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6314:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d6318:	eb01 0803 	add.w	r8, r1, r3

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d631c:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d631e:	6803      	ldr	r3, [r0, #0]
   d6320:	689b      	ldr	r3, [r3, #8]

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6322:	4605      	mov	r5, r0
   d6324:	460c      	mov	r4, r1
   d6326:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d6328:	4798      	blx	r3
   d632a:	4580      	cmp	r8, r0
   d632c:	d80c      	bhi.n	d6348 <_ZN12MCP79410SRAM8readDataEjPhj+0x34>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d632e:	f104 0220 	add.w	r2, r4, #32
   d6332:	9600      	str	r6, [sp, #0]
   d6334:	463b      	mov	r3, r7
   d6336:	b2d2      	uxtb	r2, r2
   d6338:	216f      	movs	r1, #111	; 0x6f
   d633a:	6868      	ldr	r0, [r5, #4]
   d633c:	f7ff fef6 	bl	d612c <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d6340:	fab0 f080 	clz	r0, r0
   d6344:	0940      	lsrs	r0, r0, #5
   d6346:	e000      	b.n	d634a <_ZN12MCP79410SRAM8readDataEjPhj+0x36>

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d6348:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d634a:	b002      	add	sp, #8
   d634c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6350 <_ZN8MCP7941011deviceWriteEhhPKhj>:
		}
	}
	return stat;
}

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6354:	4607      	mov	r7, r0
   d6356:	4689      	mov	r9, r1
   d6358:	4692      	mov	sl, r2
   d635a:	469b      	mov	fp, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d635c:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d635e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6360:	429c      	cmp	r4, r3
   d6362:	d228      	bcs.n	d63b6 <_ZN8MCP7941011deviceWriteEhhPKhj+0x66>
		wire.beginTransmission(i2cAddr);
   d6364:	4649      	mov	r1, r9
   d6366:	6878      	ldr	r0, [r7, #4]
   d6368:	f001 fa9c 	bl	d78a4 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d636c:	eb0a 0104 	add.w	r1, sl, r4
   d6370:	6878      	ldr	r0, [r7, #4]
   d6372:	f7ff fc1d 	bl	d5bb0 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d6376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6378:	1b1e      	subs	r6, r3, r4
   d637a:	2e1f      	cmp	r6, #31
   d637c:	eb0b 0804 	add.w	r8, fp, r4
   d6380:	bf28      	it	cs
   d6382:	261f      	movcs	r6, #31
   d6384:	4645      	mov	r5, r8
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d6386:	6878      	ldr	r0, [r7, #4]
   d6388:	f815 1b01 	ldrb.w	r1, [r5], #1
   d638c:	6802      	ldr	r2, [r0, #0]
   d638e:	6892      	ldr	r2, [r2, #8]
   d6390:	4790      	blx	r2
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d6392:	ebc8 0205 	rsb	r2, r8, r5
   d6396:	42b2      	cmp	r2, r6
   d6398:	d3f5      	bcc.n	d6386 <_ZN8MCP7941011deviceWriteEhhPKhj+0x36>
			wire.write(buf[ii + offset]);
		}

		stat = wire.endTransmission(true);
   d639a:	2101      	movs	r1, #1
   d639c:	6878      	ldr	r0, [r7, #4]
   d639e:	f001 fa88 	bl	d78b2 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d63a2:	4605      	mov	r5, r0
   d63a4:	b128      	cbz	r0, d63b2 <_ZN8MCP7941011deviceWriteEhhPKhj+0x62>
			log.info("deviceWrite failed stat=%d", stat);
   d63a6:	4602      	mov	r2, r0
   d63a8:	4905      	ldr	r1, [pc, #20]	; (d63c0 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d63aa:	4806      	ldr	r0, [pc, #24]	; (d63c4 <_ZN8MCP7941011deviceWriteEhhPKhj+0x74>)
   d63ac:	f7ff fc04 	bl	d5bb8 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d63b0:	e002      	b.n	d63b8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		}

		offset += count;
   d63b2:	4434      	add	r4, r6
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d63b4:	e7d3      	b.n	d635e <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d63b6:	2500      	movs	r5, #0

		offset += count;
	}

	return stat;
}
   d63b8:	4628      	mov	r0, r5
   d63ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d63be:	bf00      	nop
   d63c0:	000dd271 	.word	0x000dd271
   d63c4:	2003e198 	.word	0x2003e198

000d63c8 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
	}

	return stat;
}

int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d63c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[7];

	buf[0] = time.rawSecond;
   d63ca:	7c13      	ldrb	r3, [r2, #16]
   d63cc:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d63d0:	7bd3      	ldrb	r3, [r2, #15]
   d63d2:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d63d6:	7b93      	ldrb	r3, [r2, #14]
   d63d8:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d63dc:	7b53      	ldrb	r3, [r2, #13]
   d63de:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d63e2:	7b13      	ldrb	r3, [r2, #12]
   d63e4:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d63e8:	7ad3      	ldrb	r3, [r2, #11]
   d63ea:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d63ee:	7a93      	ldrb	r3, [r2, #10]
   d63f0:	f88d 300e 	strb.w	r3, [sp, #14]

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d63f4:	2307      	movs	r3, #7
   d63f6:	9300      	str	r3, [sp, #0]
   d63f8:	460a      	mov	r2, r1
   d63fa:	ab02      	add	r3, sp, #8
   d63fc:	216f      	movs	r1, #111	; 0x6f
   d63fe:	f7ff ffa7 	bl	d6350 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d6402:	b005      	add	sp, #20
   d6404:	f85d fb04 	ldr.w	pc, [sp], #4

000d6408 <_ZN8MCP7941010setRTCTimeEl>:
		log.info("cloud time not valid");
	}
	return bResult;
}

bool MCP79410::setRTCTime(time_t unixTime) {
   d6408:	b510      	push	{r4, lr}
   d640a:	b086      	sub	sp, #24
   d640c:	4604      	mov	r4, r0
	MCP79410Time time;
   d640e:	a801      	add	r0, sp, #4
   d6410:	f7ff fd7c 	bl	d5f0c <_ZN12MCP79410TimeC1Ev>

	time.fromUnixTime(unixTime);
   d6414:	a801      	add	r0, sp, #4
   d6416:	f7ff fe40 	bl	d609a <_ZN12MCP79410Time12fromUnixTimeEl>

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d641a:	f89d 3014 	ldrb.w	r3, [sp, #20]

	// Default is to enable the battery
	if (batteryEnable) {
   d641e:	7aa2      	ldrb	r2, [r4, #10]
	MCP79410Time time;

	time.fromUnixTime(unixTime);

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6420:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d6424:	f88d 3014 	strb.w	r3, [sp, #20]
   d6428:	f89d 3011 	ldrb.w	r3, [sp, #17]

	// Default is to enable the battery
	if (batteryEnable) {
   d642c:	b112      	cbz	r2, d6434 <_ZN8MCP7941010setRTCTimeEl+0x2c>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d642e:	f043 0308 	orr.w	r3, r3, #8
   d6432:	e001      	b.n	d6438 <_ZN8MCP7941010setRTCTimeEl+0x30>
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d6434:	f023 0308 	bic.w	r3, r3, #8
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d6438:	aa01      	add	r2, sp, #4
   d643a:	2100      	movs	r1, #0
   d643c:	4620      	mov	r0, r4
	// Default is to enable the battery
	if (batteryEnable) {
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d643e:	f88d 3011 	strb.w	r3, [sp, #17]
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d6442:	f7ff ffc1 	bl	d63c8 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d6446:	fab0 f080 	clz	r0, r0
   d644a:	0940      	lsrs	r0, r0, #5
   d644c:	b006      	add	sp, #24
   d644e:	bd10      	pop	{r4, pc}

000d6450 <_ZN8MCP7941015setRTCFromCloudEv>:
			}
		}
	}
}

bool MCP79410::setRTCFromCloud() {
   d6450:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6452:	4606      	mov	r6, r0
	bool bResult = false;

	if (Time.isValid()) {
   d6454:	f001 ffe8 	bl	d8428 <_ZN9TimeClass7isValidEv>
   d6458:	4604      	mov	r4, r0
   d645a:	b1b8      	cbz	r0, d648c <_ZN8MCP7941015setRTCFromCloudEv+0x3c>
		time_t now = Time.now();
   d645c:	f002 f805 	bl	d846a <_ZN9TimeClass3nowEv>
   d6460:	4605      	mov	r5, r0
		bResult = setRTCTime(now);
   d6462:	4601      	mov	r1, r0
   d6464:	4630      	mov	r0, r6
   d6466:	f7ff ffcf 	bl	d6408 <_ZN8MCP7941010setRTCTimeEl>

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d646a:	4b0c      	ldr	r3, [pc, #48]	; (d649c <_ZN8MCP7941015setRTCFromCloudEv+0x4c>)
   d646c:	490c      	ldr	r1, [pc, #48]	; (d64a0 <_ZN8MCP7941015setRTCFromCloudEv+0x50>)
   d646e:	681b      	ldr	r3, [r3, #0]
   d6470:	462a      	mov	r2, r5
bool MCP79410::setRTCFromCloud() {
	bool bResult = false;

	if (Time.isValid()) {
		time_t now = Time.now();
		bResult = setRTCTime(now);
   d6472:	4604      	mov	r4, r0

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d6474:	4668      	mov	r0, sp
   d6476:	f001 ffa5 	bl	d83c4 <_ZN9TimeClass6formatElPKc>
   d647a:	9a00      	ldr	r2, [sp, #0]
   d647c:	4909      	ldr	r1, [pc, #36]	; (d64a4 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d647e:	480a      	ldr	r0, [pc, #40]	; (d64a8 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6480:	f7ff fb9a 	bl	d5bb8 <_ZNK5spark6Logger4infoEPKcz>
   d6484:	4668      	mov	r0, sp
   d6486:	f001 fce2 	bl	d7e4e <_ZN6StringD1Ev>
   d648a:	e003      	b.n	d6494 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
	}
	else {
		log.info("cloud time not valid");
   d648c:	4907      	ldr	r1, [pc, #28]	; (d64ac <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d648e:	4806      	ldr	r0, [pc, #24]	; (d64a8 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6490:	f7ff fb92 	bl	d5bb8 <_ZNK5spark6Logger4infoEPKcz>
	}
	return bResult;
}
   d6494:	4620      	mov	r0, r4
   d6496:	b004      	add	sp, #16
   d6498:	bd70      	pop	{r4, r5, r6, pc}
   d649a:	bf00      	nop
   d649c:	2003df74 	.word	0x2003df74
   d64a0:	2003e488 	.word	0x2003e488
   d64a4:	000dd28c 	.word	0x000dd28c
   d64a8:	2003e198 	.word	0x2003e198
   d64ac:	000dd2a2 	.word	0x000dd2a2

000d64b0 <_ZN8MCP794104loopEv>:
	}

	setupDone = true;
}

void MCP79410::loop() {
   d64b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d64b2:	7a45      	ldrb	r5, [r0, #9]
	}

	setupDone = true;
}

void MCP79410::loop() {
   d64b4:	4604      	mov	r4, r0
	if (!timeSet) {
   d64b6:	b98d      	cbnz	r5, d64dc <_ZN8MCP794104loopEv+0x2c>
		// Time has not been synchronized from the cloud
		if (Time.isValid()) {
   d64b8:	f001 ffb6 	bl	d8428 <_ZN9TimeClass7isValidEv>
   d64bc:	b170      	cbz	r0, d64dc <_ZN8MCP794104loopEv+0x2c>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d64be:	a802      	add	r0, sp, #8
        return spark_sync_time_last(&tm, nullptr);
   d64c0:	4629      	mov	r1, r5
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d64c2:	f840 5d04 	str.w	r5, [r0, #-4]!
        return spark_sync_time_last(&tm, nullptr);
   d64c6:	f000 fbdd 	bl	d6c84 <spark_sync_time_last>
			// Also check timeSyncedLast, because if we set Time from RTC, then Time will
			// be valid, but not synchronized yet
			unsigned long lastSync = Particle.timeSyncedLast();
			if (lastSync != 0) {
   d64ca:	b138      	cbz	r0, d64dc <_ZN8MCP794104loopEv+0x2c>
				// Time is valid and synchronized
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d64cc:	7ae3      	ldrb	r3, [r4, #11]
   d64ce:	07db      	lsls	r3, r3, #31
   d64d0:	d502      	bpl.n	d64d8 <_ZN8MCP794104loopEv+0x28>
					setRTCFromCloud();
   d64d2:	4620      	mov	r0, r4
   d64d4:	f7ff ffbc 	bl	d6450 <_ZN8MCP7941015setRTCFromCloudEv>
				}
				timeSet = true;
   d64d8:	2301      	movs	r3, #1
   d64da:	7263      	strb	r3, [r4, #9]
			}
		}
	}
}
   d64dc:	b003      	add	sp, #12
   d64de:	bd30      	pop	{r4, r5, pc}

000d64e0 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
	}
}

int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d64e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	// log.trace("deviceWriteRegisterByte addr=%02x value=%02x", addr, value);

	buf[0] = value;
   d64e2:	ab04      	add	r3, sp, #16
   d64e4:	f803 2d04 	strb.w	r2, [r3, #-4]!

	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d64e8:	2201      	movs	r2, #1
   d64ea:	9200      	str	r2, [sp, #0]
   d64ec:	460a      	mov	r2, r1
   d64ee:	216f      	movs	r1, #111	; 0x6f
   d64f0:	f7ff ff2e 	bl	d6350 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d64f4:	b005      	add	sp, #20
   d64f6:	f85d fb04 	ldr.w	pc, [sp], #4

000d64fa <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
		return deviceWriteRegisterByteMask(addr, ~value, 0);
	}
}


int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d64fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d64fc:	4614      	mov	r4, r2
   d64fe:	4605      	mov	r5, r0
   d6500:	460e      	mov	r6, r1
   d6502:	461f      	mov	r7, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d6504:	f7ff fe56 	bl	d61b4 <_ZNK8MCP7941022deviceReadRegisterByteEh>

	value &= andMask;
   d6508:	4020      	ands	r0, r4
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d650a:	ea40 0207 	orr.w	r2, r0, r7
   d650e:	4631      	mov	r1, r6
   d6510:	4628      	mov	r0, r5
}
   d6512:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	value &= andMask;
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d6516:	f7ff bfe3 	b.w	d64e0 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d651a <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>:

int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
   d651a:	b113      	cbz	r3, d6522 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0x8>
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d651c:	4613      	mov	r3, r2
   d651e:	22ff      	movs	r2, #255	; 0xff
   d6520:	e001      	b.n	d6526 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0xc>
	}
	else {
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d6522:	43d2      	mvns	r2, r2
   d6524:	b2d2      	uxtb	r2, r2
   d6526:	f7ff bfe8 	b.w	d64fa <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>

000d652a <_ZN8MCP7941014clearInterruptEi>:
	 *
	 * @param offset 0 to get the base, or a constant like MCP79410::REG_ALARM_WKDAY_OFFSET (3).
	 *
	 * @return Returns either MCP79410::REG_ALARM0 or MCP79410::REG_ALARM1 plus the given offset
	 */
	uint8_t getAlarmRegister(int alarmNum, int offset = 0) { return ((alarmNum == 0) ? REG_ALARM0 : REG_ALARM1) + offset; };
   d652a:	2900      	cmp	r1, #0

	return (wkday & REG_ALARM_WKDAY_ALMIF) != 0;
}

void MCP79410::clearInterrupt(int alarmNum) {
	deviceWriteRegisterFlag(getAlarmRegister(alarmNum, REG_ALARM_WKDAY_OFFSET), REG_ALARM_WKDAY_ALMIF, false);
   d652c:	f04f 0300 	mov.w	r3, #0
   d6530:	f04f 0208 	mov.w	r2, #8
   d6534:	bf14      	ite	ne
   d6536:	2114      	movne	r1, #20
   d6538:	210d      	moveq	r1, #13
   d653a:	f7ff bfee 	b.w	d651a <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>

000d653e <_ZN12MCP79410SRAM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d653e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d6542:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6546:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d6548:	6803      	ldr	r3, [r0, #0]
   d654a:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d654c:	4605      	mov	r5, r0
   d654e:	460c      	mov	r4, r1
   d6550:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d6552:	4798      	blx	r3
   d6554:	4580      	cmp	r8, r0
   d6556:	d80c      	bhi.n	d6572 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x34>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6558:	f104 0220 	add.w	r2, r4, #32
   d655c:	9600      	str	r6, [sp, #0]
   d655e:	463b      	mov	r3, r7
   d6560:	b2d2      	uxtb	r2, r2
   d6562:	216f      	movs	r1, #111	; 0x6f
   d6564:	6868      	ldr	r0, [r5, #4]
   d6566:	f7ff fef3 	bl	d6350 <_ZN8MCP7941011deviceWriteEhhPKhj>

	return (stat == 0);
   d656a:	fab0 f080 	clz	r0, r0
   d656e:	0940      	lsrs	r0, r0, #5
   d6570:	e000      	b.n	d6574 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d6572:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d6574:	b002      	add	sp, #8
   d6576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d657a <_ZN8MCP794108setAlarmERK12MCP79410Timebi>:
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d657a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d657c:	2b01      	cmp	r3, #1
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d657e:	b085      	sub	sp, #20
   d6580:	4606      	mov	r6, r0
   d6582:	460c      	mov	r4, r1
   d6584:	4617      	mov	r7, r2
   d6586:	461d      	mov	r5, r3
	if (alarmNum < 0 || alarmNum > 1) {
   d6588:	d901      	bls.n	d658e <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d658a:	2000      	movs	r0, #0
   d658c:	e043      	b.n	d6616 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x9c>
	}

	if (getOscillatorRunning()) {
   d658e:	f7ff fe21 	bl	d61d4 <_ZNK8MCP7941020getOscillatorRunningEv>
   d6592:	2800      	cmp	r0, #0
   d6594:	d0f9      	beq.n	d658a <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x10>
		uint8_t buf[6];

		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);
   d6596:	4629      	mov	r1, r5
   d6598:	4630      	mov	r0, r6
   d659a:	f7ff ffc6 	bl	d652a <_ZN8MCP7941014clearInterruptEi>

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d659e:	7c23      	ldrb	r3, [r4, #16]
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d65a0:	7b22      	ldrb	r2, [r4, #12]
		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d65a2:	f88d 3008 	strb.w	r3, [sp, #8]
		buf[1] = time.rawMinute;
   d65a6:	7be3      	ldrb	r3, [r4, #15]
   d65a8:	f88d 3009 	strb.w	r3, [sp, #9]
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d65ac:	f88d 200c 	strb.w	r2, [sp, #12]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d65b0:	7ba3      	ldrb	r3, [r4, #14]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d65b2:	7ae2      	ldrb	r2, [r4, #11]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d65b4:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d65b8:	f88d 200d 	strb.w	r2, [sp, #13]
		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
   d65bc:	7b63      	ldrb	r3, [r4, #13]
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;

		if (polarity) {
   d65be:	b117      	cbz	r7, d65c6 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x4c>
			// REG_ALARM_WKDAY_ALMPOL: 1 = alarm triggered, 0 = alarm did not trigger
			buf[3] |= REG_ALARM_WKDAY_ALMPOL;
   d65c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d65c4:	e001      	b.n	d65ca <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x50>
		}
		else {
			buf[3] &= ~REG_ALARM_WKDAY_ALMPOL;
   d65c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d65ca:	f88d 300b 	strb.w	r3, [sp, #11]
		}
		buf[3] |= (time.alarmMode & 0x7) << 4;
   d65ce:	7c63      	ldrb	r3, [r4, #17]
   d65d0:	f89d 200b 	ldrb.w	r2, [sp, #11]
   d65d4:	011b      	lsls	r3, r3, #4
   d65d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   d65da:	4313      	orrs	r3, r2
   d65dc:	2d00      	cmp	r5, #0
   d65de:	f88d 300b 	strb.w	r3, [sp, #11]

		uint8_t reg = getAlarmRegister(alarmNum);

		// log.trace("setAlarm %02x%02x%02x%02x%02x%02x starting at reg=%02x", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], reg);

		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
   d65e2:	f04f 0306 	mov.w	r3, #6
   d65e6:	9300      	str	r3, [sp, #0]
   d65e8:	bf08      	it	eq
   d65ea:	220a      	moveq	r2, #10
   d65ec:	ab02      	add	r3, sp, #8
   d65ee:	bf18      	it	ne
   d65f0:	2211      	movne	r2, #17
   d65f2:	216f      	movs	r1, #111	; 0x6f
   d65f4:	4630      	mov	r0, r6
   d65f6:	f7ff feab 	bl	d6350 <_ZN8MCP7941011deviceWriteEhhPKhj>
		if (stat == 0) {
   d65fa:	4604      	mov	r4, r0
   d65fc:	b940      	cbnz	r0, d6610 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x96>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d65fe:	2d00      	cmp	r5, #0
int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d6600:	bf0c      	ite	eq
   d6602:	2310      	moveq	r3, #16
   d6604:	2320      	movne	r3, #32
   d6606:	22ff      	movs	r2, #255	; 0xff
   d6608:	2107      	movs	r1, #7
   d660a:	4630      	mov	r0, r6
   d660c:	f7ff ff75 	bl	d64fa <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
		if (stat == 0) {
			deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), true);
		}

		return (stat == 0);
   d6610:	fab4 f084 	clz	r0, r4
   d6614:	0940      	lsrs	r0, r0, #5
	}
	else {
		return false;
	}
}
   d6616:	b005      	add	sp, #20
   d6618:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d661a <_ZN8MCP794108setAlarmEibi>:

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d661a:	b5f0      	push	{r4, r5, r6, r7, lr}
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d661c:	2b01      	cmp	r3, #1
	else {
		return false;
	}
}

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d661e:	b087      	sub	sp, #28
   d6620:	4606      	mov	r6, r0
   d6622:	460c      	mov	r4, r1
   d6624:	4617      	mov	r7, r2
   d6626:	461d      	mov	r5, r3
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d6628:	d901      	bls.n	d662e <_ZN8MCP794108setAlarmEibi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d662a:	2000      	movs	r0, #0
   d662c:	e010      	b.n	d6650 <_ZN8MCP794108setAlarmEibi+0x36>
	}

	time_t unixTime = getRTCTime();
   d662e:	f7ff fe17 	bl	d6260 <_ZNK8MCP7941010getRTCTimeEv>
	if (unixTime != 0) {
   d6632:	2800      	cmp	r0, #0
   d6634:	d0f9      	beq.n	d662a <_ZN8MCP794108setAlarmEibi+0x10>
		unixTime += secondsFromNow;
   d6636:	1901      	adds	r1, r0, r4

		// Set an alarm for month, dayOfMonth, dayOfWeek, hour, minute, second
		MCP79410Time time;
   d6638:	a801      	add	r0, sp, #4
   d663a:	f7ff fc67 	bl	d5f0c <_ZN12MCP79410TimeC1Ev>
		time.setAlarmTime(unixTime);
   d663e:	a801      	add	r0, sp, #4
   d6640:	f7ff fd55 	bl	d60ee <_ZN12MCP79410Time12setAlarmTimeEl>

		return setAlarm(time, polarity, alarmNum);
   d6644:	462b      	mov	r3, r5
   d6646:	463a      	mov	r2, r7
   d6648:	a901      	add	r1, sp, #4
   d664a:	4630      	mov	r0, r6
   d664c:	f7ff ff95 	bl	d657a <_ZN8MCP794108setAlarmERK12MCP79410Timebi>
	}
	else {
		// RTC is not set or not running, cannot set an alarm
		return false;
	}
}
   d6650:	b007      	add	sp, #28
   d6652:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6654 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d6654:	b538      	push	{r3, r4, r5, lr}
   d6656:	4605      	mov	r5, r0
   d6658:	2432      	movs	r4, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d665a:	2157      	movs	r1, #87	; 0x57
   d665c:	6868      	ldr	r0, [r5, #4]
   d665e:	f001 f921 	bl	d78a4 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d6662:	2101      	movs	r1, #1
   d6664:	6868      	ldr	r0, [r5, #4]
   d6666:	f001 f924 	bl	d78b2 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d666a:	b108      	cbz	r0, d6670 <_ZN8MCP7941013waitForEEPROMEv+0x1c>

	return stat;
}

void MCP79410::waitForEEPROM() {
	for(size_t tries = 0; tries < 50; tries++) {
   d666c:	3c01      	subs	r4, #1
   d666e:	d1f4      	bne.n	d665a <_ZN8MCP7941013waitForEEPROMEv+0x6>
   d6670:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6674 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
	}

	return stat;
}

int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6678:	4605      	mov	r5, r0
   d667a:	18d7      	adds	r7, r2, r3
   d667c:	4614      	mov	r4, r2
	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
		wire.write(addr + offset);
   d667e:	ebc2 0801 	rsb	r8, r2, r1
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d6682:	42bc      	cmp	r4, r7
   d6684:	d01e      	beq.n	d66c4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x50>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d6686:	2157      	movs	r1, #87	; 0x57
   d6688:	6868      	ldr	r0, [r5, #4]
   d668a:	f001 f90b 	bl	d78a4 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d668e:	eb08 0104 	add.w	r1, r8, r4
   d6692:	6868      	ldr	r0, [r5, #4]
   d6694:	f7ff fa8c 	bl	d5bb0 <_ZN7TwoWire5writeEj>
		// if (bufLen != 1) {
		//	log.trace("deviceWriteEEPROM addr=%02x count=%u", addr + offset, count);
		// }

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d6698:	6868      	ldr	r0, [r5, #4]
   d669a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d669e:	6803      	ldr	r3, [r0, #0]
   d66a0:	689b      	ldr	r3, [r3, #8]
   d66a2:	4798      	blx	r3
		}

		stat = wire.endTransmission(true);
   d66a4:	2101      	movs	r1, #1
   d66a6:	6868      	ldr	r0, [r5, #4]
   d66a8:	f001 f903 	bl	d78b2 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d66ac:	4606      	mov	r6, r0
   d66ae:	b128      	cbz	r0, d66bc <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x48>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d66b0:	4602      	mov	r2, r0
   d66b2:	4906      	ldr	r1, [pc, #24]	; (d66cc <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d66b4:	4806      	ldr	r0, [pc, #24]	; (d66d0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d66b6:	f7ff fa7f 	bl	d5bb8 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d66ba:	e004      	b.n	d66c6 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x52>
		}

		waitForEEPROM();
   d66bc:	4628      	mov	r0, r5
   d66be:	f7ff ffc9 	bl	d6654 <_ZN8MCP7941013waitForEEPROMEv>
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d66c2:	e7de      	b.n	d6682 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d66c4:	2600      	movs	r6, #0

		offset += count;
	}

	return stat;
}
   d66c6:	4630      	mov	r0, r6
   d66c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d66cc:	000dd2b7 	.word	0x000dd2b7
   d66d0:	2003e198 	.word	0x2003e198

000d66d4 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d66d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d66d8:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d66dc:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d66de:	6803      	ldr	r3, [r0, #0]
   d66e0:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d66e2:	4604      	mov	r4, r0
   d66e4:	460d      	mov	r5, r1
   d66e6:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d66e8:	4798      	blx	r3
   d66ea:	4580      	cmp	r8, r0
   d66ec:	d80a      	bhi.n	d6704 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x30>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d66ee:	4633      	mov	r3, r6
   d66f0:	463a      	mov	r2, r7
   d66f2:	b2e9      	uxtb	r1, r5
   d66f4:	6860      	ldr	r0, [r4, #4]
   d66f6:	f7ff ffbd 	bl	d6674 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>

	return (stat == 0);
   d66fa:	fab0 f080 	clz	r0, r0
   d66fe:	0940      	lsrs	r0, r0, #5
   d6700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d6704:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);

	return (stat == 0);
}
   d6706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d670c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
		if (stat == 0) {
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d670c:	b508      	push	{r3, lr}
   d670e:	f000 f889 	bl	d6824 <HAL_Pin_Map>
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6712:	4b02      	ldr	r3, [pc, #8]	; (d671c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x10>)
   d6714:	4a02      	ldr	r2, [pc, #8]	; (d6720 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x14>)
   d6716:	601a      	str	r2, [r3, #0]
   d6718:	bd08      	pop	{r3, pc}
   d671a:	bf00      	nop
   d671c:	2003e198 	.word	0x2003e198
   d6720:	000dd2d8 	.word	0x000dd2d8

000d6724 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d6724:	b508      	push	{r3, lr}
   d6726:	4b02      	ldr	r3, [pc, #8]	; (d6730 <cellular_signal+0xc>)
   d6728:	681b      	ldr	r3, [r3, #0]
   d672a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d672c:	9301      	str	r3, [sp, #4]
   d672e:	bd08      	pop	{r3, pc}
   d6730:	00030274 	.word	0x00030274

000d6734 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d6734:	b508      	push	{r3, lr}
   d6736:	4b02      	ldr	r3, [pc, #8]	; (d6740 <cellular_command+0xc>)
   d6738:	681b      	ldr	r3, [r3, #0]
   d673a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d673c:	9301      	str	r3, [sp, #4]
   d673e:	bd08      	pop	{r3, pc}
   d6740:	00030274 	.word	0x00030274

000d6744 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6744:	b508      	push	{r3, lr}
   d6746:	4b02      	ldr	r3, [pc, #8]	; (d6750 <os_thread_is_current+0xc>)
   d6748:	681b      	ldr	r3, [r3, #0]
   d674a:	689b      	ldr	r3, [r3, #8]
   d674c:	9301      	str	r3, [sp, #4]
   d674e:	bd08      	pop	{r3, pc}
   d6750:	00030248 	.word	0x00030248

000d6754 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6754:	b508      	push	{r3, lr}
   d6756:	4b02      	ldr	r3, [pc, #8]	; (d6760 <os_thread_join+0xc>)
   d6758:	681b      	ldr	r3, [r3, #0]
   d675a:	691b      	ldr	r3, [r3, #16]
   d675c:	9301      	str	r3, [sp, #4]
   d675e:	bd08      	pop	{r3, pc}
   d6760:	00030248 	.word	0x00030248

000d6764 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6764:	b508      	push	{r3, lr}
   d6766:	4b02      	ldr	r3, [pc, #8]	; (d6770 <os_thread_cleanup+0xc>)
   d6768:	681b      	ldr	r3, [r3, #0]
   d676a:	695b      	ldr	r3, [r3, #20]
   d676c:	9301      	str	r3, [sp, #4]
   d676e:	bd08      	pop	{r3, pc}
   d6770:	00030248 	.word	0x00030248

000d6774 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6774:	b508      	push	{r3, lr}
   d6776:	4b02      	ldr	r3, [pc, #8]	; (d6780 <os_mutex_recursive_create+0xc>)
   d6778:	681b      	ldr	r3, [r3, #0]
   d677a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d677c:	9301      	str	r3, [sp, #4]
   d677e:	bd08      	pop	{r3, pc}
   d6780:	00030248 	.word	0x00030248

000d6784 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d6784:	b508      	push	{r3, lr}
   d6786:	4b02      	ldr	r3, [pc, #8]	; (d6790 <HAL_Feature_Set+0xc>)
   d6788:	681b      	ldr	r3, [r3, #0]
   d678a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d678c:	9301      	str	r3, [sp, #4]
   d678e:	bd08      	pop	{r3, pc}
   d6790:	00030234 	.word	0x00030234

000d6794 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d6794:	b508      	push	{r3, lr}
   d6796:	4b02      	ldr	r3, [pc, #8]	; (d67a0 <HAL_Core_System_Reset_Ex+0xc>)
   d6798:	681b      	ldr	r3, [r3, #0]
   d679a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d679c:	9301      	str	r3, [sp, #4]
   d679e:	bd08      	pop	{r3, pc}
   d67a0:	00030234 	.word	0x00030234

000d67a4 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d67a4:	b508      	push	{r3, lr}
   d67a6:	4b02      	ldr	r3, [pc, #8]	; (d67b0 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d67a8:	681b      	ldr	r3, [r3, #0]
   d67aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d67ac:	9301      	str	r3, [sp, #4]
   d67ae:	bd08      	pop	{r3, pc}
   d67b0:	00030234 	.word	0x00030234

000d67b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d67b4:	b508      	push	{r3, lr}
   d67b6:	4b02      	ldr	r3, [pc, #8]	; (d67c0 <HAL_RNG_GetRandomNumber+0xc>)
   d67b8:	681b      	ldr	r3, [r3, #0]
   d67ba:	685b      	ldr	r3, [r3, #4]
   d67bc:	9301      	str	r3, [sp, #4]
   d67be:	bd08      	pop	{r3, pc}
   d67c0:	00030218 	.word	0x00030218

000d67c4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d67c4:	b508      	push	{r3, lr}
   d67c6:	4b02      	ldr	r3, [pc, #8]	; (d67d0 <HAL_Delay_Microseconds+0xc>)
   d67c8:	681b      	ldr	r3, [r3, #0]
   d67ca:	68db      	ldr	r3, [r3, #12]
   d67cc:	9301      	str	r3, [sp, #4]
   d67ce:	bd08      	pop	{r3, pc}
   d67d0:	00030218 	.word	0x00030218

000d67d4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d67d4:	b508      	push	{r3, lr}
   d67d6:	4b02      	ldr	r3, [pc, #8]	; (d67e0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d67d8:	681b      	ldr	r3, [r3, #0]
   d67da:	695b      	ldr	r3, [r3, #20]
   d67dc:	9301      	str	r3, [sp, #4]
   d67de:	bd08      	pop	{r3, pc}
   d67e0:	00030218 	.word	0x00030218

000d67e4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d67e4:	b508      	push	{r3, lr}
   d67e6:	4b02      	ldr	r3, [pc, #8]	; (d67f0 <HAL_RTC_Get_UnixTime+0xc>)
   d67e8:	681b      	ldr	r3, [r3, #0]
   d67ea:	69db      	ldr	r3, [r3, #28]
   d67ec:	9301      	str	r3, [sp, #4]
   d67ee:	bd08      	pop	{r3, pc}
   d67f0:	00030218 	.word	0x00030218

000d67f4 <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
   d67f4:	b508      	push	{r3, lr}
   d67f6:	4b02      	ldr	r3, [pc, #8]	; (d6800 <HAL_RTC_Set_UnixTime+0xc>)
   d67f8:	681b      	ldr	r3, [r3, #0]
   d67fa:	6a1b      	ldr	r3, [r3, #32]
   d67fc:	9301      	str	r3, [sp, #4]
   d67fe:	bd08      	pop	{r3, pc}
   d6800:	00030218 	.word	0x00030218

000d6804 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d6804:	b508      	push	{r3, lr}
   d6806:	4b02      	ldr	r3, [pc, #8]	; (d6810 <HAL_RTC_Time_Is_Valid+0xc>)
   d6808:	681b      	ldr	r3, [r3, #0]
   d680a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d680c:	9301      	str	r3, [sp, #4]
   d680e:	bd08      	pop	{r3, pc}
   d6810:	00030218 	.word	0x00030218

000d6814 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d6814:	b508      	push	{r3, lr}
   d6816:	4b02      	ldr	r3, [pc, #8]	; (d6820 <hal_timer_millis+0xc>)
   d6818:	681b      	ldr	r3, [r3, #0]
   d681a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d681c:	9301      	str	r3, [sp, #4]
   d681e:	bd08      	pop	{r3, pc}
   d6820:	00030218 	.word	0x00030218

000d6824 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6824:	b508      	push	{r3, lr}
   d6826:	4b02      	ldr	r3, [pc, #8]	; (d6830 <HAL_Pin_Map+0xc>)
   d6828:	681b      	ldr	r3, [r3, #0]
   d682a:	681b      	ldr	r3, [r3, #0]
   d682c:	9301      	str	r3, [sp, #4]
   d682e:	bd08      	pop	{r3, pc}
   d6830:	0003022c 	.word	0x0003022c

000d6834 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6834:	b508      	push	{r3, lr}
   d6836:	4b02      	ldr	r3, [pc, #8]	; (d6840 <HAL_Validate_Pin_Function+0xc>)
   d6838:	681b      	ldr	r3, [r3, #0]
   d683a:	685b      	ldr	r3, [r3, #4]
   d683c:	9301      	str	r3, [sp, #4]
   d683e:	bd08      	pop	{r3, pc}
   d6840:	0003022c 	.word	0x0003022c

000d6844 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6844:	b508      	push	{r3, lr}
   d6846:	4b02      	ldr	r3, [pc, #8]	; (d6850 <HAL_Pin_Mode+0xc>)
   d6848:	681b      	ldr	r3, [r3, #0]
   d684a:	689b      	ldr	r3, [r3, #8]
   d684c:	9301      	str	r3, [sp, #4]
   d684e:	bd08      	pop	{r3, pc}
   d6850:	0003022c 	.word	0x0003022c

000d6854 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6854:	b508      	push	{r3, lr}
   d6856:	4b02      	ldr	r3, [pc, #8]	; (d6860 <HAL_Get_Pin_Mode+0xc>)
   d6858:	681b      	ldr	r3, [r3, #0]
   d685a:	68db      	ldr	r3, [r3, #12]
   d685c:	9301      	str	r3, [sp, #4]
   d685e:	bd08      	pop	{r3, pc}
   d6860:	0003022c 	.word	0x0003022c

000d6864 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6864:	b508      	push	{r3, lr}
   d6866:	4b02      	ldr	r3, [pc, #8]	; (d6870 <HAL_GPIO_Write+0xc>)
   d6868:	681b      	ldr	r3, [r3, #0]
   d686a:	691b      	ldr	r3, [r3, #16]
   d686c:	9301      	str	r3, [sp, #4]
   d686e:	bd08      	pop	{r3, pc}
   d6870:	0003022c 	.word	0x0003022c

000d6874 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6874:	b508      	push	{r3, lr}
   d6876:	4b02      	ldr	r3, [pc, #8]	; (d6880 <HAL_GPIO_Read+0xc>)
   d6878:	681b      	ldr	r3, [r3, #0]
   d687a:	695b      	ldr	r3, [r3, #20]
   d687c:	9301      	str	r3, [sp, #4]
   d687e:	bd08      	pop	{r3, pc}
   d6880:	0003022c 	.word	0x0003022c

000d6884 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d6884:	b508      	push	{r3, lr}
   d6886:	4b02      	ldr	r3, [pc, #8]	; (d6890 <HAL_Interrupts_Attach+0xc>)
   d6888:	681b      	ldr	r3, [r3, #0]
   d688a:	699b      	ldr	r3, [r3, #24]
   d688c:	9301      	str	r3, [sp, #4]
   d688e:	bd08      	pop	{r3, pc}
   d6890:	0003022c 	.word	0x0003022c

000d6894 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d6894:	b508      	push	{r3, lr}
   d6896:	4b02      	ldr	r3, [pc, #8]	; (d68a0 <HAL_Interrupts_Detach+0xc>)
   d6898:	681b      	ldr	r3, [r3, #0]
   d689a:	69db      	ldr	r3, [r3, #28]
   d689c:	9301      	str	r3, [sp, #4]
   d689e:	bd08      	pop	{r3, pc}
   d68a0:	0003022c 	.word	0x0003022c

000d68a4 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d68a4:	b508      	push	{r3, lr}
   d68a6:	4b02      	ldr	r3, [pc, #8]	; (d68b0 <HAL_ADC_Read+0xc>)
   d68a8:	681b      	ldr	r3, [r3, #0]
   d68aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d68ac:	9301      	str	r3, [sp, #4]
   d68ae:	bd08      	pop	{r3, pc}
   d68b0:	0003022c 	.word	0x0003022c

000d68b4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d68b4:	b508      	push	{r3, lr}
   d68b6:	4b02      	ldr	r3, [pc, #8]	; (d68c0 <HAL_I2C_Begin+0xc>)
   d68b8:	681b      	ldr	r3, [r3, #0]
   d68ba:	68db      	ldr	r3, [r3, #12]
   d68bc:	9301      	str	r3, [sp, #4]
   d68be:	bd08      	pop	{r3, pc}
   d68c0:	00030228 	.word	0x00030228

000d68c4 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d68c4:	b508      	push	{r3, lr}
   d68c6:	4b02      	ldr	r3, [pc, #8]	; (d68d0 <HAL_I2C_Request_Data+0xc>)
   d68c8:	681b      	ldr	r3, [r3, #0]
   d68ca:	695b      	ldr	r3, [r3, #20]
   d68cc:	9301      	str	r3, [sp, #4]
   d68ce:	bd08      	pop	{r3, pc}
   d68d0:	00030228 	.word	0x00030228

000d68d4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d68d4:	b508      	push	{r3, lr}
   d68d6:	4b02      	ldr	r3, [pc, #8]	; (d68e0 <HAL_I2C_Begin_Transmission+0xc>)
   d68d8:	681b      	ldr	r3, [r3, #0]
   d68da:	699b      	ldr	r3, [r3, #24]
   d68dc:	9301      	str	r3, [sp, #4]
   d68de:	bd08      	pop	{r3, pc}
   d68e0:	00030228 	.word	0x00030228

000d68e4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d68e4:	b508      	push	{r3, lr}
   d68e6:	4b02      	ldr	r3, [pc, #8]	; (d68f0 <HAL_I2C_End_Transmission+0xc>)
   d68e8:	681b      	ldr	r3, [r3, #0]
   d68ea:	69db      	ldr	r3, [r3, #28]
   d68ec:	9301      	str	r3, [sp, #4]
   d68ee:	bd08      	pop	{r3, pc}
   d68f0:	00030228 	.word	0x00030228

000d68f4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d68f4:	b508      	push	{r3, lr}
   d68f6:	4b02      	ldr	r3, [pc, #8]	; (d6900 <HAL_I2C_Write_Data+0xc>)
   d68f8:	681b      	ldr	r3, [r3, #0]
   d68fa:	6a1b      	ldr	r3, [r3, #32]
   d68fc:	9301      	str	r3, [sp, #4]
   d68fe:	bd08      	pop	{r3, pc}
   d6900:	00030228 	.word	0x00030228

000d6904 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6904:	b508      	push	{r3, lr}
   d6906:	4b02      	ldr	r3, [pc, #8]	; (d6910 <HAL_I2C_Available_Data+0xc>)
   d6908:	681b      	ldr	r3, [r3, #0]
   d690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d690c:	9301      	str	r3, [sp, #4]
   d690e:	bd08      	pop	{r3, pc}
   d6910:	00030228 	.word	0x00030228

000d6914 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6914:	b508      	push	{r3, lr}
   d6916:	4b02      	ldr	r3, [pc, #8]	; (d6920 <HAL_I2C_Read_Data+0xc>)
   d6918:	681b      	ldr	r3, [r3, #0]
   d691a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d691c:	9301      	str	r3, [sp, #4]
   d691e:	bd08      	pop	{r3, pc}
   d6920:	00030228 	.word	0x00030228

000d6924 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6924:	b508      	push	{r3, lr}
   d6926:	4b02      	ldr	r3, [pc, #8]	; (d6930 <HAL_I2C_Peek_Data+0xc>)
   d6928:	681b      	ldr	r3, [r3, #0]
   d692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d692c:	9301      	str	r3, [sp, #4]
   d692e:	bd08      	pop	{r3, pc}
   d6930:	00030228 	.word	0x00030228

000d6934 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6934:	b508      	push	{r3, lr}
   d6936:	4b02      	ldr	r3, [pc, #8]	; (d6940 <HAL_I2C_Flush_Data+0xc>)
   d6938:	681b      	ldr	r3, [r3, #0]
   d693a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d693c:	9301      	str	r3, [sp, #4]
   d693e:	bd08      	pop	{r3, pc}
   d6940:	00030228 	.word	0x00030228

000d6944 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6944:	b508      	push	{r3, lr}
   d6946:	4b02      	ldr	r3, [pc, #8]	; (d6950 <HAL_I2C_Is_Enabled+0xc>)
   d6948:	681b      	ldr	r3, [r3, #0]
   d694a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d694c:	9301      	str	r3, [sp, #4]
   d694e:	bd08      	pop	{r3, pc}
   d6950:	00030228 	.word	0x00030228

000d6954 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d6954:	b508      	push	{r3, lr}
   d6956:	4b02      	ldr	r3, [pc, #8]	; (d6960 <HAL_I2C_Init+0xc>)
   d6958:	681b      	ldr	r3, [r3, #0]
   d695a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d695c:	9301      	str	r3, [sp, #4]
   d695e:	bd08      	pop	{r3, pc}
   d6960:	00030228 	.word	0x00030228

000d6964 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d6964:	b508      	push	{r3, lr}
   d6966:	4b02      	ldr	r3, [pc, #8]	; (d6970 <HAL_I2C_Acquire+0xc>)
   d6968:	681b      	ldr	r3, [r3, #0]
   d696a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d696c:	9301      	str	r3, [sp, #4]
   d696e:	bd08      	pop	{r3, pc}
   d6970:	00030228 	.word	0x00030228

000d6974 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d6974:	b508      	push	{r3, lr}
   d6976:	4b02      	ldr	r3, [pc, #8]	; (d6980 <HAL_I2C_Release+0xc>)
   d6978:	681b      	ldr	r3, [r3, #0]
   d697a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d697c:	9301      	str	r3, [sp, #4]
   d697e:	bd08      	pop	{r3, pc}
   d6980:	00030228 	.word	0x00030228

000d6984 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6984:	b508      	push	{r3, lr}
   d6986:	4b02      	ldr	r3, [pc, #8]	; (d6990 <inet_inet_ntop+0xc>)
   d6988:	681b      	ldr	r3, [r3, #0]
   d698a:	695b      	ldr	r3, [r3, #20]
   d698c:	9301      	str	r3, [sp, #4]
   d698e:	bd08      	pop	{r3, pc}
   d6990:	00030264 	.word	0x00030264

000d6994 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6994:	b508      	push	{r3, lr}
   d6996:	4b02      	ldr	r3, [pc, #8]	; (d69a0 <netdb_freeaddrinfo+0xc>)
   d6998:	681b      	ldr	r3, [r3, #0]
   d699a:	689b      	ldr	r3, [r3, #8]
   d699c:	9301      	str	r3, [sp, #4]
   d699e:	bd08      	pop	{r3, pc}
   d69a0:	00030268 	.word	0x00030268

000d69a4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d69a4:	b508      	push	{r3, lr}
   d69a6:	4b02      	ldr	r3, [pc, #8]	; (d69b0 <netdb_getaddrinfo+0xc>)
   d69a8:	681b      	ldr	r3, [r3, #0]
   d69aa:	68db      	ldr	r3, [r3, #12]
   d69ac:	9301      	str	r3, [sp, #4]
   d69ae:	bd08      	pop	{r3, pc}
   d69b0:	00030268 	.word	0x00030268

000d69b4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d69b4:	b508      	push	{r3, lr}
   d69b6:	4b02      	ldr	r3, [pc, #8]	; (d69c0 <HAL_SPI_Init+0xc>)
   d69b8:	681b      	ldr	r3, [r3, #0]
   d69ba:	69db      	ldr	r3, [r3, #28]
   d69bc:	9301      	str	r3, [sp, #4]
   d69be:	bd08      	pop	{r3, pc}
   d69c0:	00030230 	.word	0x00030230

000d69c4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d69c4:	b508      	push	{r3, lr}
   d69c6:	4b02      	ldr	r3, [pc, #8]	; (d69d0 <HAL_SPI_Is_Enabled+0xc>)
   d69c8:	681b      	ldr	r3, [r3, #0]
   d69ca:	6a1b      	ldr	r3, [r3, #32]
   d69cc:	9301      	str	r3, [sp, #4]
   d69ce:	bd08      	pop	{r3, pc}
   d69d0:	00030230 	.word	0x00030230

000d69d4 <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d69d4:	b508      	push	{r3, lr}
   d69d6:	4b02      	ldr	r3, [pc, #8]	; (d69e0 <HAL_SPI_Acquire+0xc>)
   d69d8:	681b      	ldr	r3, [r3, #0]
   d69da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d69dc:	9301      	str	r3, [sp, #4]
   d69de:	bd08      	pop	{r3, pc}
   d69e0:	00030230 	.word	0x00030230

000d69e4 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d69e4:	b508      	push	{r3, lr}
   d69e6:	4b02      	ldr	r3, [pc, #8]	; (d69f0 <HAL_SPI_Release+0xc>)
   d69e8:	681b      	ldr	r3, [r3, #0]
   d69ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d69ec:	9301      	str	r3, [sp, #4]
   d69ee:	bd08      	pop	{r3, pc}
   d69f0:	00030230 	.word	0x00030230

000d69f4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d69f4:	b508      	push	{r3, lr}
   d69f6:	4b02      	ldr	r3, [pc, #8]	; (d6a00 <HAL_USART_Init+0xc>)
   d69f8:	681b      	ldr	r3, [r3, #0]
   d69fa:	681b      	ldr	r3, [r3, #0]
   d69fc:	9301      	str	r3, [sp, #4]
   d69fe:	bd08      	pop	{r3, pc}
   d6a00:	0003023c 	.word	0x0003023c

000d6a04 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6a04:	b508      	push	{r3, lr}
   d6a06:	4b02      	ldr	r3, [pc, #8]	; (d6a10 <HAL_USART_Write_Data+0xc>)
   d6a08:	681b      	ldr	r3, [r3, #0]
   d6a0a:	68db      	ldr	r3, [r3, #12]
   d6a0c:	9301      	str	r3, [sp, #4]
   d6a0e:	bd08      	pop	{r3, pc}
   d6a10:	0003023c 	.word	0x0003023c

000d6a14 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6a14:	b508      	push	{r3, lr}
   d6a16:	4b02      	ldr	r3, [pc, #8]	; (d6a20 <HAL_USART_Available_Data+0xc>)
   d6a18:	681b      	ldr	r3, [r3, #0]
   d6a1a:	691b      	ldr	r3, [r3, #16]
   d6a1c:	9301      	str	r3, [sp, #4]
   d6a1e:	bd08      	pop	{r3, pc}
   d6a20:	0003023c 	.word	0x0003023c

000d6a24 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6a24:	b508      	push	{r3, lr}
   d6a26:	4b02      	ldr	r3, [pc, #8]	; (d6a30 <HAL_USART_Read_Data+0xc>)
   d6a28:	681b      	ldr	r3, [r3, #0]
   d6a2a:	695b      	ldr	r3, [r3, #20]
   d6a2c:	9301      	str	r3, [sp, #4]
   d6a2e:	bd08      	pop	{r3, pc}
   d6a30:	0003023c 	.word	0x0003023c

000d6a34 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6a34:	b508      	push	{r3, lr}
   d6a36:	4b02      	ldr	r3, [pc, #8]	; (d6a40 <HAL_USART_Peek_Data+0xc>)
   d6a38:	681b      	ldr	r3, [r3, #0]
   d6a3a:	699b      	ldr	r3, [r3, #24]
   d6a3c:	9301      	str	r3, [sp, #4]
   d6a3e:	bd08      	pop	{r3, pc}
   d6a40:	0003023c 	.word	0x0003023c

000d6a44 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6a44:	b508      	push	{r3, lr}
   d6a46:	4b02      	ldr	r3, [pc, #8]	; (d6a50 <HAL_USART_Flush_Data+0xc>)
   d6a48:	681b      	ldr	r3, [r3, #0]
   d6a4a:	69db      	ldr	r3, [r3, #28]
   d6a4c:	9301      	str	r3, [sp, #4]
   d6a4e:	bd08      	pop	{r3, pc}
   d6a50:	0003023c 	.word	0x0003023c

000d6a54 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6a54:	b508      	push	{r3, lr}
   d6a56:	4b02      	ldr	r3, [pc, #8]	; (d6a60 <HAL_USART_Is_Enabled+0xc>)
   d6a58:	681b      	ldr	r3, [r3, #0]
   d6a5a:	6a1b      	ldr	r3, [r3, #32]
   d6a5c:	9301      	str	r3, [sp, #4]
   d6a5e:	bd08      	pop	{r3, pc}
   d6a60:	0003023c 	.word	0x0003023c

000d6a64 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6a64:	b508      	push	{r3, lr}
   d6a66:	4b02      	ldr	r3, [pc, #8]	; (d6a70 <HAL_USART_Available_Data_For_Write+0xc>)
   d6a68:	681b      	ldr	r3, [r3, #0]
   d6a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6a6c:	9301      	str	r3, [sp, #4]
   d6a6e:	bd08      	pop	{r3, pc}
   d6a70:	0003023c 	.word	0x0003023c

000d6a74 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6a74:	b508      	push	{r3, lr}
   d6a76:	4b02      	ldr	r3, [pc, #8]	; (d6a80 <HAL_USB_USART_Init+0xc>)
   d6a78:	681b      	ldr	r3, [r3, #0]
   d6a7a:	681b      	ldr	r3, [r3, #0]
   d6a7c:	9301      	str	r3, [sp, #4]
   d6a7e:	bd08      	pop	{r3, pc}
   d6a80:	0003024c 	.word	0x0003024c

000d6a84 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6a84:	b508      	push	{r3, lr}
   d6a86:	4b02      	ldr	r3, [pc, #8]	; (d6a90 <HAL_USB_USART_Available_Data+0xc>)
   d6a88:	681b      	ldr	r3, [r3, #0]
   d6a8a:	691b      	ldr	r3, [r3, #16]
   d6a8c:	9301      	str	r3, [sp, #4]
   d6a8e:	bd08      	pop	{r3, pc}
   d6a90:	0003024c 	.word	0x0003024c

000d6a94 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6a94:	b508      	push	{r3, lr}
   d6a96:	4b02      	ldr	r3, [pc, #8]	; (d6aa0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6a98:	681b      	ldr	r3, [r3, #0]
   d6a9a:	695b      	ldr	r3, [r3, #20]
   d6a9c:	9301      	str	r3, [sp, #4]
   d6a9e:	bd08      	pop	{r3, pc}
   d6aa0:	0003024c 	.word	0x0003024c

000d6aa4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6aa4:	b508      	push	{r3, lr}
   d6aa6:	4b02      	ldr	r3, [pc, #8]	; (d6ab0 <HAL_USB_USART_Receive_Data+0xc>)
   d6aa8:	681b      	ldr	r3, [r3, #0]
   d6aaa:	699b      	ldr	r3, [r3, #24]
   d6aac:	9301      	str	r3, [sp, #4]
   d6aae:	bd08      	pop	{r3, pc}
   d6ab0:	0003024c 	.word	0x0003024c

000d6ab4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6ab4:	b508      	push	{r3, lr}
   d6ab6:	4b02      	ldr	r3, [pc, #8]	; (d6ac0 <HAL_USB_USART_Send_Data+0xc>)
   d6ab8:	681b      	ldr	r3, [r3, #0]
   d6aba:	69db      	ldr	r3, [r3, #28]
   d6abc:	9301      	str	r3, [sp, #4]
   d6abe:	bd08      	pop	{r3, pc}
   d6ac0:	0003024c 	.word	0x0003024c

000d6ac4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6ac4:	b508      	push	{r3, lr}
   d6ac6:	4b02      	ldr	r3, [pc, #8]	; (d6ad0 <HAL_USB_USART_Flush_Data+0xc>)
   d6ac8:	681b      	ldr	r3, [r3, #0]
   d6aca:	6a1b      	ldr	r3, [r3, #32]
   d6acc:	9301      	str	r3, [sp, #4]
   d6ace:	bd08      	pop	{r3, pc}
   d6ad0:	0003024c 	.word	0x0003024c

000d6ad4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6ad4:	b508      	push	{r3, lr}
   d6ad6:	4b02      	ldr	r3, [pc, #8]	; (d6ae0 <panic_+0xc>)
   d6ad8:	681b      	ldr	r3, [r3, #0]
   d6ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6adc:	9301      	str	r3, [sp, #4]
   d6ade:	bd08      	pop	{r3, pc}
   d6ae0:	00030260 	.word	0x00030260

000d6ae4 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6ae4:	b508      	push	{r3, lr}
   d6ae6:	4b02      	ldr	r3, [pc, #8]	; (d6af0 <log_message_v+0xc>)
   d6ae8:	681b      	ldr	r3, [r3, #0]
   d6aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6aec:	9301      	str	r3, [sp, #4]
   d6aee:	bd08      	pop	{r3, pc}
   d6af0:	00030260 	.word	0x00030260

000d6af4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6af4:	b508      	push	{r3, lr}
   d6af6:	4b02      	ldr	r3, [pc, #8]	; (d6b00 <system_mode+0xc>)
   d6af8:	681b      	ldr	r3, [r3, #0]
   d6afa:	681b      	ldr	r3, [r3, #0]
   d6afc:	9301      	str	r3, [sp, #4]
   d6afe:	bd08      	pop	{r3, pc}
   d6b00:	00030220 	.word	0x00030220

000d6b04 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6b04:	b508      	push	{r3, lr}
   d6b06:	4b02      	ldr	r3, [pc, #8]	; (d6b10 <set_system_mode+0xc>)
   d6b08:	681b      	ldr	r3, [r3, #0]
   d6b0a:	685b      	ldr	r3, [r3, #4]
   d6b0c:	9301      	str	r3, [sp, #4]
   d6b0e:	bd08      	pop	{r3, pc}
   d6b10:	00030220 	.word	0x00030220

000d6b14 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6b14:	b508      	push	{r3, lr}
   d6b16:	4b02      	ldr	r3, [pc, #8]	; (d6b20 <system_delay_ms+0xc>)
   d6b18:	681b      	ldr	r3, [r3, #0]
   d6b1a:	695b      	ldr	r3, [r3, #20]
   d6b1c:	9301      	str	r3, [sp, #4]
   d6b1e:	bd08      	pop	{r3, pc}
   d6b20:	00030220 	.word	0x00030220

000d6b24 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d6b24:	b508      	push	{r3, lr}
   d6b26:	4b02      	ldr	r3, [pc, #8]	; (d6b30 <system_sleep+0xc>)
   d6b28:	681b      	ldr	r3, [r3, #0]
   d6b2a:	699b      	ldr	r3, [r3, #24]
   d6b2c:	9301      	str	r3, [sp, #4]
   d6b2e:	bd08      	pop	{r3, pc}
   d6b30:	00030220 	.word	0x00030220

000d6b34 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6b34:	b508      	push	{r3, lr}
   d6b36:	4b02      	ldr	r3, [pc, #8]	; (d6b40 <system_thread_set_state+0xc>)
   d6b38:	681b      	ldr	r3, [r3, #0]
   d6b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6b3c:	9301      	str	r3, [sp, #4]
   d6b3e:	bd08      	pop	{r3, pc}
   d6b40:	00030220 	.word	0x00030220

000d6b44 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6b44:	b508      	push	{r3, lr}
   d6b46:	4b02      	ldr	r3, [pc, #8]	; (d6b50 <application_thread_current+0xc>)
   d6b48:	681b      	ldr	r3, [r3, #0]
   d6b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6b4c:	9301      	str	r3, [sp, #4]
   d6b4e:	bd08      	pop	{r3, pc}
   d6b50:	00030220 	.word	0x00030220

000d6b54 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6b54:	b508      	push	{r3, lr}
   d6b56:	4b02      	ldr	r3, [pc, #8]	; (d6b60 <application_thread_invoke+0xc>)
   d6b58:	681b      	ldr	r3, [r3, #0]
   d6b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6b5c:	9301      	str	r3, [sp, #4]
   d6b5e:	bd08      	pop	{r3, pc}
   d6b60:	00030220 	.word	0x00030220

000d6b64 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6b64:	b508      	push	{r3, lr}
   d6b66:	4b02      	ldr	r3, [pc, #8]	; (d6b70 <system_thread_get_state+0xc>)
   d6b68:	681b      	ldr	r3, [r3, #0]
   d6b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6b6c:	9301      	str	r3, [sp, #4]
   d6b6e:	bd08      	pop	{r3, pc}
   d6b70:	00030220 	.word	0x00030220

000d6b74 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d6b74:	b508      	push	{r3, lr}
   d6b76:	4b02      	ldr	r3, [pc, #8]	; (d6b80 <system_notify_time_changed+0xc>)
   d6b78:	681b      	ldr	r3, [r3, #0]
   d6b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6b7c:	9301      	str	r3, [sp, #4]
   d6b7e:	bd08      	pop	{r3, pc}
   d6b80:	00030220 	.word	0x00030220

000d6b84 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6b84:	b508      	push	{r3, lr}
   d6b86:	4b03      	ldr	r3, [pc, #12]	; (d6b94 <system_ctrl_set_app_request_handler+0x10>)
   d6b88:	681b      	ldr	r3, [r3, #0]
   d6b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6b8e:	9301      	str	r3, [sp, #4]
   d6b90:	bd08      	pop	{r3, pc}
   d6b92:	0000      	.short	0x0000
   d6b94:	00030220 	.word	0x00030220

000d6b98 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6b98:	b508      	push	{r3, lr}
   d6b9a:	4b03      	ldr	r3, [pc, #12]	; (d6ba8 <system_ctrl_set_result+0x10>)
   d6b9c:	681b      	ldr	r3, [r3, #0]
   d6b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6ba2:	9301      	str	r3, [sp, #4]
   d6ba4:	bd08      	pop	{r3, pc}
   d6ba6:	0000      	.short	0x0000
   d6ba8:	00030220 	.word	0x00030220

000d6bac <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d6bac:	b508      	push	{r3, lr}
   d6bae:	4b03      	ldr	r3, [pc, #12]	; (d6bbc <system_sleep_pins+0x10>)
   d6bb0:	681b      	ldr	r3, [r3, #0]
   d6bb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d6bb6:	9301      	str	r3, [sp, #4]
   d6bb8:	bd08      	pop	{r3, pc}
   d6bba:	0000      	.short	0x0000
   d6bbc:	00030220 	.word	0x00030220

000d6bc0 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d6bc0:	b508      	push	{r3, lr}
   d6bc2:	4b03      	ldr	r3, [pc, #12]	; (d6bd0 <system_power_management_set_config+0x10>)
   d6bc4:	681b      	ldr	r3, [r3, #0]
   d6bc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d6bca:	9301      	str	r3, [sp, #4]
   d6bcc:	bd08      	pop	{r3, pc}
   d6bce:	0000      	.short	0x0000
   d6bd0:	00030220 	.word	0x00030220

000d6bd4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d6bd4:	b508      	push	{r3, lr}
   d6bd6:	4b02      	ldr	r3, [pc, #8]	; (d6be0 <spark_variable+0xc>)
   d6bd8:	681b      	ldr	r3, [r3, #0]
   d6bda:	681b      	ldr	r3, [r3, #0]
   d6bdc:	9301      	str	r3, [sp, #4]
   d6bde:	bd08      	pop	{r3, pc}
   d6be0:	00030244 	.word	0x00030244

000d6be4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d6be4:	b508      	push	{r3, lr}
   d6be6:	4b02      	ldr	r3, [pc, #8]	; (d6bf0 <spark_function+0xc>)
   d6be8:	681b      	ldr	r3, [r3, #0]
   d6bea:	685b      	ldr	r3, [r3, #4]
   d6bec:	9301      	str	r3, [sp, #4]
   d6bee:	bd08      	pop	{r3, pc}
   d6bf0:	00030244 	.word	0x00030244

000d6bf4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6bf4:	b508      	push	{r3, lr}
   d6bf6:	4b02      	ldr	r3, [pc, #8]	; (d6c00 <spark_process+0xc>)
   d6bf8:	681b      	ldr	r3, [r3, #0]
   d6bfa:	689b      	ldr	r3, [r3, #8]
   d6bfc:	9301      	str	r3, [sp, #4]
   d6bfe:	bd08      	pop	{r3, pc}
   d6c00:	00030244 	.word	0x00030244

000d6c04 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d6c04:	b508      	push	{r3, lr}
   d6c06:	4b02      	ldr	r3, [pc, #8]	; (d6c10 <spark_cloud_flag_connect+0xc>)
   d6c08:	681b      	ldr	r3, [r3, #0]
   d6c0a:	68db      	ldr	r3, [r3, #12]
   d6c0c:	9301      	str	r3, [sp, #4]
   d6c0e:	bd08      	pop	{r3, pc}
   d6c10:	00030244 	.word	0x00030244

000d6c14 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d6c14:	b508      	push	{r3, lr}
   d6c16:	4b02      	ldr	r3, [pc, #8]	; (d6c20 <spark_cloud_flag_disconnect+0xc>)
   d6c18:	681b      	ldr	r3, [r3, #0]
   d6c1a:	691b      	ldr	r3, [r3, #16]
   d6c1c:	9301      	str	r3, [sp, #4]
   d6c1e:	bd08      	pop	{r3, pc}
   d6c20:	00030244 	.word	0x00030244

000d6c24 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6c24:	b508      	push	{r3, lr}
   d6c26:	4b02      	ldr	r3, [pc, #8]	; (d6c30 <spark_cloud_flag_connected+0xc>)
   d6c28:	681b      	ldr	r3, [r3, #0]
   d6c2a:	695b      	ldr	r3, [r3, #20]
   d6c2c:	9301      	str	r3, [sp, #4]
   d6c2e:	bd08      	pop	{r3, pc}
   d6c30:	00030244 	.word	0x00030244

000d6c34 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6c34:	b508      	push	{r3, lr}
   d6c36:	4b02      	ldr	r3, [pc, #8]	; (d6c40 <spark_deviceID+0xc>)
   d6c38:	681b      	ldr	r3, [r3, #0]
   d6c3a:	69db      	ldr	r3, [r3, #28]
   d6c3c:	9301      	str	r3, [sp, #4]
   d6c3e:	bd08      	pop	{r3, pc}
   d6c40:	00030244 	.word	0x00030244

000d6c44 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6c44:	b508      	push	{r3, lr}
   d6c46:	4b02      	ldr	r3, [pc, #8]	; (d6c50 <spark_send_event+0xc>)
   d6c48:	681b      	ldr	r3, [r3, #0]
   d6c4a:	6a1b      	ldr	r3, [r3, #32]
   d6c4c:	9301      	str	r3, [sp, #4]
   d6c4e:	bd08      	pop	{r3, pc}
   d6c50:	00030244 	.word	0x00030244

000d6c54 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6c54:	b508      	push	{r3, lr}
   d6c56:	4b02      	ldr	r3, [pc, #8]	; (d6c60 <spark_subscribe+0xc>)
   d6c58:	681b      	ldr	r3, [r3, #0]
   d6c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6c5c:	9301      	str	r3, [sp, #4]
   d6c5e:	bd08      	pop	{r3, pc}
   d6c60:	00030244 	.word	0x00030244

000d6c64 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6c64:	b508      	push	{r3, lr}
   d6c66:	4b02      	ldr	r3, [pc, #8]	; (d6c70 <spark_sync_time+0xc>)
   d6c68:	681b      	ldr	r3, [r3, #0]
   d6c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6c6c:	9301      	str	r3, [sp, #4]
   d6c6e:	bd08      	pop	{r3, pc}
   d6c70:	00030244 	.word	0x00030244

000d6c74 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6c74:	b508      	push	{r3, lr}
   d6c76:	4b02      	ldr	r3, [pc, #8]	; (d6c80 <spark_sync_time_pending+0xc>)
   d6c78:	681b      	ldr	r3, [r3, #0]
   d6c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6c7c:	9301      	str	r3, [sp, #4]
   d6c7e:	bd08      	pop	{r3, pc}
   d6c80:	00030244 	.word	0x00030244

000d6c84 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
   d6c84:	b508      	push	{r3, lr}
   d6c86:	4b02      	ldr	r3, [pc, #8]	; (d6c90 <spark_sync_time_last+0xc>)
   d6c88:	681b      	ldr	r3, [r3, #0]
   d6c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6c8c:	9301      	str	r3, [sp, #4]
   d6c8e:	bd08      	pop	{r3, pc}
   d6c90:	00030244 	.word	0x00030244

000d6c94 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6c94:	b508      	push	{r3, lr}
   d6c96:	4b02      	ldr	r3, [pc, #8]	; (d6ca0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6c98:	681b      	ldr	r3, [r3, #0]
   d6c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6c9c:	9301      	str	r3, [sp, #4]
   d6c9e:	bd08      	pop	{r3, pc}
   d6ca0:	00030244 	.word	0x00030244

000d6ca4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6ca4:	b508      	push	{r3, lr}
   d6ca6:	4b02      	ldr	r3, [pc, #8]	; (d6cb0 <network_connect+0xc>)
   d6ca8:	681b      	ldr	r3, [r3, #0]
   d6caa:	685b      	ldr	r3, [r3, #4]
   d6cac:	9301      	str	r3, [sp, #4]
   d6cae:	bd08      	pop	{r3, pc}
   d6cb0:	00030240 	.word	0x00030240

000d6cb4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6cb4:	b508      	push	{r3, lr}
   d6cb6:	4b02      	ldr	r3, [pc, #8]	; (d6cc0 <network_connecting+0xc>)
   d6cb8:	681b      	ldr	r3, [r3, #0]
   d6cba:	689b      	ldr	r3, [r3, #8]
   d6cbc:	9301      	str	r3, [sp, #4]
   d6cbe:	bd08      	pop	{r3, pc}
   d6cc0:	00030240 	.word	0x00030240

000d6cc4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6cc4:	b508      	push	{r3, lr}
   d6cc6:	4b02      	ldr	r3, [pc, #8]	; (d6cd0 <network_disconnect+0xc>)
   d6cc8:	681b      	ldr	r3, [r3, #0]
   d6cca:	68db      	ldr	r3, [r3, #12]
   d6ccc:	9301      	str	r3, [sp, #4]
   d6cce:	bd08      	pop	{r3, pc}
   d6cd0:	00030240 	.word	0x00030240

000d6cd4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6cd4:	b508      	push	{r3, lr}
   d6cd6:	4b02      	ldr	r3, [pc, #8]	; (d6ce0 <network_ready+0xc>)
   d6cd8:	681b      	ldr	r3, [r3, #0]
   d6cda:	691b      	ldr	r3, [r3, #16]
   d6cdc:	9301      	str	r3, [sp, #4]
   d6cde:	bd08      	pop	{r3, pc}
   d6ce0:	00030240 	.word	0x00030240

000d6ce4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6ce4:	b508      	push	{r3, lr}
   d6ce6:	4b02      	ldr	r3, [pc, #8]	; (d6cf0 <network_on+0xc>)
   d6ce8:	681b      	ldr	r3, [r3, #0]
   d6cea:	695b      	ldr	r3, [r3, #20]
   d6cec:	9301      	str	r3, [sp, #4]
   d6cee:	bd08      	pop	{r3, pc}
   d6cf0:	00030240 	.word	0x00030240

000d6cf4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6cf4:	b508      	push	{r3, lr}
   d6cf6:	4b02      	ldr	r3, [pc, #8]	; (d6d00 <network_off+0xc>)
   d6cf8:	681b      	ldr	r3, [r3, #0]
   d6cfa:	699b      	ldr	r3, [r3, #24]
   d6cfc:	9301      	str	r3, [sp, #4]
   d6cfe:	bd08      	pop	{r3, pc}
   d6d00:	00030240 	.word	0x00030240

000d6d04 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6d04:	b508      	push	{r3, lr}
   d6d06:	4b02      	ldr	r3, [pc, #8]	; (d6d10 <network_listen+0xc>)
   d6d08:	681b      	ldr	r3, [r3, #0]
   d6d0a:	69db      	ldr	r3, [r3, #28]
   d6d0c:	9301      	str	r3, [sp, #4]
   d6d0e:	bd08      	pop	{r3, pc}
   d6d10:	00030240 	.word	0x00030240

000d6d14 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6d14:	b508      	push	{r3, lr}
   d6d16:	4b02      	ldr	r3, [pc, #8]	; (d6d20 <network_listening+0xc>)
   d6d18:	681b      	ldr	r3, [r3, #0]
   d6d1a:	6a1b      	ldr	r3, [r3, #32]
   d6d1c:	9301      	str	r3, [sp, #4]
   d6d1e:	bd08      	pop	{r3, pc}
   d6d20:	00030240 	.word	0x00030240

000d6d24 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6d24:	b508      	push	{r3, lr}
   d6d26:	4b02      	ldr	r3, [pc, #8]	; (d6d30 <network_set_listen_timeout+0xc>)
   d6d28:	681b      	ldr	r3, [r3, #0]
   d6d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6d2c:	9301      	str	r3, [sp, #4]
   d6d2e:	bd08      	pop	{r3, pc}
   d6d30:	00030240 	.word	0x00030240

000d6d34 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6d34:	b508      	push	{r3, lr}
   d6d36:	4b02      	ldr	r3, [pc, #8]	; (d6d40 <network_get_listen_timeout+0xc>)
   d6d38:	681b      	ldr	r3, [r3, #0]
   d6d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6d3c:	9301      	str	r3, [sp, #4]
   d6d3e:	bd08      	pop	{r3, pc}
   d6d40:	00030240 	.word	0x00030240

000d6d44 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6d44:	b508      	push	{r3, lr}
   d6d46:	4b02      	ldr	r3, [pc, #8]	; (d6d50 <malloc+0xc>)
   d6d48:	681b      	ldr	r3, [r3, #0]
   d6d4a:	681b      	ldr	r3, [r3, #0]
   d6d4c:	9301      	str	r3, [sp, #4]
   d6d4e:	bd08      	pop	{r3, pc}
   d6d50:	0003021c 	.word	0x0003021c

000d6d54 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6d54:	b508      	push	{r3, lr}
   d6d56:	4b02      	ldr	r3, [pc, #8]	; (d6d60 <free+0xc>)
   d6d58:	681b      	ldr	r3, [r3, #0]
   d6d5a:	685b      	ldr	r3, [r3, #4]
   d6d5c:	9301      	str	r3, [sp, #4]
   d6d5e:	bd08      	pop	{r3, pc}
   d6d60:	0003021c 	.word	0x0003021c

000d6d64 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6d64:	b508      	push	{r3, lr}
   d6d66:	4b02      	ldr	r3, [pc, #8]	; (d6d70 <realloc+0xc>)
   d6d68:	681b      	ldr	r3, [r3, #0]
   d6d6a:	689b      	ldr	r3, [r3, #8]
   d6d6c:	9301      	str	r3, [sp, #4]
   d6d6e:	bd08      	pop	{r3, pc}
   d6d70:	0003021c 	.word	0x0003021c

000d6d74 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6d74:	b508      	push	{r3, lr}
   d6d76:	4b02      	ldr	r3, [pc, #8]	; (d6d80 <siprintf+0xc>)
   d6d78:	681b      	ldr	r3, [r3, #0]
   d6d7a:	691b      	ldr	r3, [r3, #16]
   d6d7c:	9301      	str	r3, [sp, #4]
   d6d7e:	bd08      	pop	{r3, pc}
   d6d80:	0003021c 	.word	0x0003021c

000d6d84 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d6d84:	b508      	push	{r3, lr}
   d6d86:	4b02      	ldr	r3, [pc, #8]	; (d6d90 <siscanf+0xc>)
   d6d88:	681b      	ldr	r3, [r3, #0]
   d6d8a:	699b      	ldr	r3, [r3, #24]
   d6d8c:	9301      	str	r3, [sp, #4]
   d6d8e:	bd08      	pop	{r3, pc}
   d6d90:	0003021c 	.word	0x0003021c

000d6d94 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6d94:	b508      	push	{r3, lr}
   d6d96:	4b02      	ldr	r3, [pc, #8]	; (d6da0 <snprintf+0xc>)
   d6d98:	681b      	ldr	r3, [r3, #0]
   d6d9a:	69db      	ldr	r3, [r3, #28]
   d6d9c:	9301      	str	r3, [sp, #4]
   d6d9e:	bd08      	pop	{r3, pc}
   d6da0:	0003021c 	.word	0x0003021c

000d6da4 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d6da4:	b508      	push	{r3, lr}
   d6da6:	4b02      	ldr	r3, [pc, #8]	; (d6db0 <sniprintf+0xc>)
   d6da8:	681b      	ldr	r3, [r3, #0]
   d6daa:	6a1b      	ldr	r3, [r3, #32]
   d6dac:	9301      	str	r3, [sp, #4]
   d6dae:	bd08      	pop	{r3, pc}
   d6db0:	0003021c 	.word	0x0003021c

000d6db4 <abort>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6db4:	b508      	push	{r3, lr}
   d6db6:	4b02      	ldr	r3, [pc, #8]	; (d6dc0 <abort+0xc>)
   d6db8:	681b      	ldr	r3, [r3, #0]
   d6dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6dbc:	9301      	str	r3, [sp, #4]
   d6dbe:	bd08      	pop	{r3, pc}
   d6dc0:	0003021c 	.word	0x0003021c

000d6dc4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6dc4:	b508      	push	{r3, lr}
   d6dc6:	4b02      	ldr	r3, [pc, #8]	; (d6dd0 <_malloc_r+0xc>)
   d6dc8:	681b      	ldr	r3, [r3, #0]
   d6dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6dcc:	9301      	str	r3, [sp, #4]
   d6dce:	bd08      	pop	{r3, pc}
   d6dd0:	0003021c 	.word	0x0003021c

000d6dd4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6dd4:	2100      	movs	r1, #0
   d6dd6:	f7ff be9d 	b.w	d6b14 <system_delay_ms>

000d6dda <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6dda:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6ddc:	6883      	ldr	r3, [r0, #8]
   d6dde:	4604      	mov	r4, r0
   d6de0:	b90b      	cbnz	r3, d6de6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6de2:	f001 fe10 	bl	d8a06 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6de6:	68c3      	ldr	r3, [r0, #12]
   d6de8:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6dea:	68a3      	ldr	r3, [r4, #8]
   d6dec:	b11b      	cbz	r3, d6df6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6dee:	2203      	movs	r2, #3
   d6df0:	4621      	mov	r1, r4
   d6df2:	4620      	mov	r0, r4
   d6df4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6df6:	4620      	mov	r0, r4
   d6df8:	2110      	movs	r1, #16
}
   d6dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6dfe:	f001 be00 	b.w	d8a02 <_ZdlPvj>

000d6e02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6e02:	680b      	ldr	r3, [r1, #0]
   d6e04:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6e06:	b113      	cbz	r3, d6e0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6e08:	685a      	ldr	r2, [r3, #4]
   d6e0a:	3201      	adds	r2, #1
   d6e0c:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d6e0e:	4770      	bx	lr

000d6e10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6e10:	4802      	ldr	r0, [pc, #8]	; (d6e1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d6e12:	2300      	movs	r3, #0
   d6e14:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6e16:	f7ff bcad 	b.w	d6774 <os_mutex_recursive_create>
   d6e1a:	bf00      	nop
   d6e1c:	2003e19c 	.word	0x2003e19c

000d6e20 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6e20:	2200      	movs	r2, #0
   d6e22:	4611      	mov	r1, r2
   d6e24:	6840      	ldr	r0, [r0, #4]
   d6e26:	f7ff bf55 	b.w	d6cd4 <network_ready>

000d6e2a <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6e2a:	2200      	movs	r2, #0
   d6e2c:	4611      	mov	r1, r2
   d6e2e:	6840      	ldr	r0, [r0, #4]
   d6e30:	f7ff bf70 	b.w	d6d14 <network_listening>

000d6e34 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6e34:	2200      	movs	r2, #0
   d6e36:	4611      	mov	r1, r2
   d6e38:	6840      	ldr	r0, [r0, #4]
   d6e3a:	f7ff bf7b 	b.w	d6d34 <network_get_listen_timeout>

000d6e3e <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6e3e:	2200      	movs	r2, #0
   d6e40:	6840      	ldr	r0, [r0, #4]
   d6e42:	f7ff bf6f 	b.w	d6d24 <network_set_listen_timeout>

000d6e46 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6e46:	2200      	movs	r2, #0
   d6e48:	f081 0101 	eor.w	r1, r1, #1
   d6e4c:	6840      	ldr	r0, [r0, #4]
   d6e4e:	f7ff bf59 	b.w	d6d04 <network_listen>

000d6e52 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d6e52:	2300      	movs	r3, #0
   d6e54:	461a      	mov	r2, r3
   d6e56:	4619      	mov	r1, r3
   d6e58:	6840      	ldr	r0, [r0, #4]
   d6e5a:	f7ff bf4b 	b.w	d6cf4 <network_off>

000d6e5e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d6e5e:	2300      	movs	r3, #0
   d6e60:	461a      	mov	r2, r3
   d6e62:	4619      	mov	r1, r3
   d6e64:	6840      	ldr	r0, [r0, #4]
   d6e66:	f7ff bf3d 	b.w	d6ce4 <network_on>

000d6e6a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6e6a:	2200      	movs	r2, #0
   d6e6c:	4611      	mov	r1, r2
   d6e6e:	6840      	ldr	r0, [r0, #4]
   d6e70:	f7ff bf20 	b.w	d6cb4 <network_connecting>

000d6e74 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e74:	2200      	movs	r2, #0
   d6e76:	2102      	movs	r1, #2
   d6e78:	6840      	ldr	r0, [r0, #4]
   d6e7a:	f7ff bf23 	b.w	d6cc4 <network_disconnect>

000d6e7e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6e7e:	2300      	movs	r3, #0
   d6e80:	461a      	mov	r2, r3
   d6e82:	6840      	ldr	r0, [r0, #4]
   d6e84:	f7ff bf0e 	b.w	d6ca4 <network_connect>

000d6e88 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d6e88:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d6e8a:	4b1b      	ldr	r3, [pc, #108]	; (d6ef8 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d6e8c:	6003      	str	r3, [r0, #0]
   d6e8e:	2500      	movs	r5, #0
   d6e90:	460f      	mov	r7, r1
   d6e92:	3328      	adds	r3, #40	; 0x28
   d6e94:	2618      	movs	r6, #24
   d6e96:	b089      	sub	sp, #36	; 0x24
   d6e98:	6043      	str	r3, [r0, #4]
   d6e9a:	6085      	str	r5, [r0, #8]
   d6e9c:	60c5      	str	r5, [r0, #12]
   d6e9e:	4632      	mov	r2, r6
   d6ea0:	4629      	mov	r1, r5
   d6ea2:	4604      	mov	r4, r0
   d6ea4:	3010      	adds	r0, #16
   d6ea6:	f002 fdf8 	bl	d9a9a <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d6eaa:	462a      	mov	r2, r5
   d6eac:	4629      	mov	r1, r5
   d6eae:	6878      	ldr	r0, [r7, #4]
   d6eb0:	f7ff ff10 	bl	d6cd4 <network_ready>
   d6eb4:	b908      	cbnz	r0, d6eba <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d6eb6:	60a0      	str	r0, [r4, #8]
            return sig;
   d6eb8:	e01b      	b.n	d6ef2 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d6eba:	4629      	mov	r1, r5
   d6ebc:	4632      	mov	r2, r6
   d6ebe:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d6ec0:	9500      	str	r5, [sp, #0]
   d6ec2:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d6ec4:	f002 fde9 	bl	d9a9a <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6ec8:	a902      	add	r1, sp, #8
   d6eca:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d6ecc:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6ed0:	f7ff fc28 	bl	d6724 <cellular_signal>
   d6ed4:	b110      	cbz	r0, d6edc <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d6ed6:	2301      	movs	r3, #1
   d6ed8:	60a3      	str	r3, [r4, #8]
            return sig;
   d6eda:	e00a      	b.n	d6ef2 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d6edc:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d6ede:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d6ee0:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d6ee2:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d6ee4:	b90b      	cbnz	r3, d6eea <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d6ee6:	2302      	movs	r3, #2
   d6ee8:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d6eea:	a902      	add	r1, sp, #8
   d6eec:	4620      	mov	r0, r4
   d6eee:	f000 f889 	bl	d7004 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d6ef2:	4620      	mov	r0, r4
   d6ef4:	b009      	add	sp, #36	; 0x24
   d6ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6ef8:	000dd33c 	.word	0x000dd33c

000d6efc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6efc:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6efe:	4c08      	ldr	r4, [pc, #32]	; (d6f20 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d6f00:	2528      	movs	r5, #40	; 0x28
   d6f02:	462a      	mov	r2, r5
   d6f04:	2100      	movs	r1, #0
   d6f06:	4620      	mov	r0, r4
   d6f08:	f002 fdc7 	bl	d9a9a <memset>
        cid = -1;
   d6f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6f10:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6f12:	4b04      	ldr	r3, [pc, #16]	; (d6f24 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d6f14:	8025      	strh	r5, [r4, #0]
   d6f16:	2204      	movs	r2, #4
   d6f18:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6f1a:	4a03      	ldr	r2, [pc, #12]	; (d6f28 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6f1c:	601a      	str	r2, [r3, #0]
   d6f1e:	bd38      	pop	{r3, r4, r5, pc}
   d6f20:	2003e1a8 	.word	0x2003e1a8
   d6f24:	2003e1a0 	.word	0x2003e1a0
   d6f28:	000dd308 	.word	0x000dd308

000d6f2c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d6f2c:	4770      	bx	lr

000d6f2e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d6f2e:	7d00      	ldrb	r0, [r0, #20]
   d6f30:	4770      	bx	lr
	...

000d6f34 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d6f34:	7d03      	ldrb	r3, [r0, #20]
   d6f36:	b11b      	cbz	r3, d6f40 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d6f38:	6983      	ldr	r3, [r0, #24]
   d6f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6f3e:	d102      	bne.n	d6f46 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d6f40:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6f58 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d6f44:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d6f46:	ee07 3a90 	vmov	s15, r3
   d6f4a:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6f5c <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d6f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6f52:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d6f56:	4770      	bx	lr
   d6f58:	00000000 	.word	0x00000000
   d6f5c:	42c80000 	.word	0x42c80000

000d6f60 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d6f60:	7d03      	ldrb	r3, [r0, #20]
   d6f62:	b11b      	cbz	r3, d6f6c <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d6f64:	6a03      	ldr	r3, [r0, #32]
   d6f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6f6a:	d102      	bne.n	d6f72 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d6f6c:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6f84 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d6f70:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d6f72:	ee07 3a90 	vmov	s15, r3
   d6f76:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6f88 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d6f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6f7e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d6f82:	4770      	bx	lr
   d6f84:	00000000 	.word	0x00000000
   d6f88:	42c80000 	.word	0x42c80000

000d6f8c <_ZN14CellularSignalD0Ev>:
   d6f8c:	b510      	push	{r4, lr}
   d6f8e:	2128      	movs	r1, #40	; 0x28
   d6f90:	4604      	mov	r4, r0
   d6f92:	f001 fd36 	bl	d8a02 <_ZdlPvj>
   d6f96:	4620      	mov	r0, r4
   d6f98:	bd10      	pop	{r4, pc}
	...

000d6f9c <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d6f9c:	7d03      	ldrb	r3, [r0, #20]
   d6f9e:	b17b      	cbz	r3, d6fc0 <_ZNK14CellularSignal10getQualityEv+0x24>
   d6fa0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d6fa2:	2b00      	cmp	r3, #0
   d6fa4:	db0c      	blt.n	d6fc0 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d6fa6:	ee07 3a90 	vmov	s15, r3
   d6faa:	eddf 6a07 	vldr	s13, [pc, #28]	; d6fc8 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d6fae:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6fcc <_ZNK14CellularSignal10getQualityEv+0x30>
   d6fb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d6fb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6fba:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6fbe:	4770      	bx	lr
    }

    return -1.0f;
   d6fc0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6fc4:	4770      	bx	lr
   d6fc6:	bf00      	nop
   d6fc8:	477fff00 	.word	0x477fff00
   d6fcc:	42c80000 	.word	0x42c80000

000d6fd0 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d6fd0:	7d03      	ldrb	r3, [r0, #20]
   d6fd2:	b17b      	cbz	r3, d6ff4 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d6fd4:	69c3      	ldr	r3, [r0, #28]
   d6fd6:	2b00      	cmp	r3, #0
   d6fd8:	db0c      	blt.n	d6ff4 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d6fda:	ee07 3a90 	vmov	s15, r3
   d6fde:	eddf 6a07 	vldr	s13, [pc, #28]	; d6ffc <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d6fe2:	ed9f 0a07 	vldr	s0, [pc, #28]	; d7000 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d6fe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d6fea:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6fee:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6ff2:	4770      	bx	lr
    }

    return -1.0f;
   d6ff4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6ff8:	4770      	bx	lr
   d6ffa:	bf00      	nop
   d6ffc:	477fff00 	.word	0x477fff00
   d7000:	42c80000 	.word	0x42c80000

000d7004 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d7004:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d7006:	460d      	mov	r5, r1
   d7008:	f100 0410 	add.w	r4, r0, #16
   d700c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d700e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7010:	e895 0003 	ldmia.w	r5, {r0, r1}
   d7014:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d7018:	2001      	movs	r0, #1
   d701a:	bd30      	pop	{r4, r5, pc}

000d701c <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d701c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7020:	4607      	mov	r7, r0
   d7022:	460c      	mov	r4, r1
{
    if (base == 0) {
   d7024:	4615      	mov	r5, r2
   d7026:	b92a      	cbnz	r2, d7034 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d7028:	6803      	ldr	r3, [r0, #0]
   d702a:	b2c9      	uxtb	r1, r1
   d702c:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d702e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d7032:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d7034:	2900      	cmp	r1, #0
   d7036:	da07      	bge.n	d7048 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d7038:	2a0a      	cmp	r2, #10
   d703a:	d105      	bne.n	d7048 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d703c:	212d      	movs	r1, #45	; 0x2d
   d703e:	f000 fe8b 	bl	d7d58 <_ZN5Print5printEc>
            val = -n;
   d7042:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d7044:	4606      	mov	r6, r0
            val = -n;
   d7046:	e001      	b.n	d704c <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d7048:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d704a:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d704c:	b2ea      	uxtb	r2, r5
   d704e:	4638      	mov	r0, r7
   d7050:	f000 fe9b 	bl	d7d8a <_ZN5Print11printNumberEmh>
    }
}
   d7054:	4430      	add	r0, r6
   d7056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d705a <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d705a:	b570      	push	{r4, r5, r6, lr}
   d705c:	460d      	mov	r5, r1
   d705e:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d7060:	220a      	movs	r2, #10
   d7062:	6881      	ldr	r1, [r0, #8]
   d7064:	4628      	mov	r0, r5
   d7066:	f7ff ffd9 	bl	d701c <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d706a:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d706c:	4604      	mov	r4, r0
    n += p.print(',');
   d706e:	4628      	mov	r0, r5
   d7070:	f000 fe72 	bl	d7d58 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d7074:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d7076:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d7078:	68f1      	ldr	r1, [r6, #12]
   d707a:	4628      	mov	r0, r5
   d707c:	f7ff ffce 	bl	d701c <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d7080:	4420      	add	r0, r4
   d7082:	bd70      	pop	{r4, r5, r6, pc}

000d7084 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d7084:	f1a0 0004 	sub.w	r0, r0, #4
   d7088:	f7ff bfe7 	b.w	d705a <_ZNK14CellularSignal7printToER5Print>

000d708c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d708c:	4770      	bx	lr

000d708e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d708e:	2000      	movs	r0, #0
   d7090:	4770      	bx	lr

000d7092 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7092:	b510      	push	{r4, lr}
   d7094:	2110      	movs	r1, #16
   d7096:	4604      	mov	r4, r0
   d7098:	f001 fcb3 	bl	d8a02 <_ZdlPvj>
   d709c:	4620      	mov	r0, r4
   d709e:	bd10      	pop	{r4, pc}

000d70a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d70a0:	b508      	push	{r3, lr}
      { delete this; }
   d70a2:	b108      	cbz	r0, d70a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d70a4:	f7ff fff5 	bl	d7092 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d70a8:	bd08      	pop	{r3, pc}

000d70aa <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d70aa:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d70ac:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d70ae:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d70b0:	b113      	cbz	r3, d70b8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d70b2:	2203      	movs	r2, #3
   d70b4:	4601      	mov	r1, r0
   d70b6:	4798      	blx	r3
    }
   d70b8:	4620      	mov	r0, r4
   d70ba:	bd10      	pop	{r4, pc}

000d70bc <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d70bc:	2200      	movs	r2, #0
   d70be:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d70c0:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d70c2:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d70c6:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d70c8:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d70cc:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d70ce:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d70d0:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d70d2:	680c      	ldr	r4, [r1, #0]
   d70d4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d70d6:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d70d8:	bd10      	pop	{r4, pc}

000d70da <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d70da:	b510      	push	{r4, lr}
   d70dc:	4604      	mov	r4, r0
    free((void*)msg_);
   d70de:	6800      	ldr	r0, [r0, #0]
   d70e0:	f7ff fe38 	bl	d6d54 <free>
}
   d70e4:	4620      	mov	r0, r4
   d70e6:	bd10      	pop	{r4, pc}

000d70e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d70e8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d70ea:	68c4      	ldr	r4, [r0, #12]
   d70ec:	b1f4      	cbz	r4, d712c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d70ee:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d70f0:	2b02      	cmp	r3, #2
   d70f2:	d103      	bne.n	d70fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d70f4:	f104 000c 	add.w	r0, r4, #12
   d70f8:	f7ff ffef 	bl	d70da <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d70fc:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d70fe:	b135      	cbz	r5, d710e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7100:	4628      	mov	r0, r5
   d7102:	f7ff ffd2 	bl	d70aa <_ZNSt14_Function_baseD1Ev>
   d7106:	2110      	movs	r1, #16
   d7108:	4628      	mov	r0, r5
   d710a:	f001 fc7a 	bl	d8a02 <_ZdlPvj>
   d710e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7110:	b135      	cbz	r5, d7120 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7112:	4628      	mov	r0, r5
   d7114:	f7ff ffc9 	bl	d70aa <_ZNSt14_Function_baseD1Ev>
   d7118:	2110      	movs	r1, #16
   d711a:	4628      	mov	r0, r5
   d711c:	f001 fc71 	bl	d8a02 <_ZdlPvj>
   d7120:	4620      	mov	r0, r4
   d7122:	2114      	movs	r1, #20
   d7124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7128:	f001 bc6b 	b.w	d8a02 <_ZdlPvj>
   d712c:	bd38      	pop	{r3, r4, r5, pc}

000d712e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d712e:	b510      	push	{r4, lr}
   d7130:	b088      	sub	sp, #32
   d7132:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d7134:	4668      	mov	r0, sp
   d7136:	f000 fed1 	bl	d7edc <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d713a:	4669      	mov	r1, sp
   d713c:	a804      	add	r0, sp, #16
   d713e:	f000 feef 	bl	d7f20 <_ZN6StringC1ERKS_>
   d7142:	a804      	add	r0, sp, #16
   d7144:	47a0      	blx	r4
   d7146:	4604      	mov	r4, r0
   d7148:	a804      	add	r0, sp, #16
   d714a:	f000 fe80 	bl	d7e4e <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d714e:	4668      	mov	r0, sp
   d7150:	f000 fe7d 	bl	d7e4e <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d7154:	4620      	mov	r0, r4
   d7156:	b008      	add	sp, #32
   d7158:	bd10      	pop	{r4, pc}

000d715a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d715a:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d715c:	2410      	movs	r4, #16
   d715e:	b085      	sub	sp, #20
   d7160:	4607      	mov	r7, r0
   d7162:	460e      	mov	r6, r1
   d7164:	4615      	mov	r5, r2
   d7166:	2100      	movs	r1, #0
   d7168:	4622      	mov	r2, r4
   d716a:	4668      	mov	r0, sp
   d716c:	f002 fc95 	bl	d9a9a <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d7170:	2200      	movs	r2, #0
   d7172:	4669      	mov	r1, sp
   d7174:	4610      	mov	r0, r2
         size = sizeof(*this);
   d7176:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d717a:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d717c:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d717e:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d7180:	f7ff fd30 	bl	d6be4 <spark_function>
}
   d7184:	b005      	add	sp, #20
   d7186:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7188 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d7188:	b513      	push	{r0, r1, r4, lr}
   d718a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d718c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d7190:	2300      	movs	r3, #0
   d7192:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7194:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7196:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7198:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d719a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d719c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d719e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d71a0:	f7fd fa73 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d71a4:	4620      	mov	r0, r4
   d71a6:	b002      	add	sp, #8
   d71a8:	bd10      	pop	{r4, pc}

000d71aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d71aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d71ac:	460c      	mov	r4, r1
   d71ae:	ad02      	add	r5, sp, #8
   d71b0:	f854 3b04 	ldr.w	r3, [r4], #4
   d71b4:	f845 3d08 	str.w	r3, [r5, #-8]!
   d71b8:	4606      	mov	r6, r0
   d71ba:	460f      	mov	r7, r1
   d71bc:	a801      	add	r0, sp, #4
   d71be:	4621      	mov	r1, r4
   d71c0:	f7ff fe1f 	bl	d6e02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d71c4:	4629      	mov	r1, r5
   d71c6:	4630      	mov	r0, r6
   d71c8:	f7ff ffde 	bl	d7188 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d71cc:	a801      	add	r0, sp, #4
   d71ce:	f7fd fa5c 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d71d2:	4620      	mov	r0, r4
   d71d4:	f7fd fa59 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d71d8:	4638      	mov	r0, r7
   d71da:	2108      	movs	r1, #8
   d71dc:	f001 fc11 	bl	d8a02 <_ZdlPvj>
        return p;
    }
   d71e0:	4630      	mov	r0, r6
   d71e2:	b003      	add	sp, #12
   d71e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d71e6 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d71e6:	b513      	push	{r0, r1, r4, lr}
   d71e8:	460b      	mov	r3, r1
   d71ea:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d71ec:	c803      	ldmia	r0, {r0, r1}
   d71ee:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d71f2:	e893 0003 	ldmia.w	r3, {r0, r1}
   d71f6:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d71fa:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d71fe:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7202:	b002      	add	sp, #8
   d7204:	bd10      	pop	{r4, pc}
	...

000d7208 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7208:	b538      	push	{r3, r4, r5, lr}
   d720a:	2300      	movs	r3, #0
   d720c:	4604      	mov	r4, r0
   d720e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7210:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7212:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7214:	f7fc ff41 	bl	d409a <_Znwj>
   d7218:	b128      	cbz	r0, d7226 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d721a:	2301      	movs	r3, #1
   d721c:	6043      	str	r3, [r0, #4]
   d721e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d7220:	4b02      	ldr	r3, [pc, #8]	; (d722c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d7222:	6003      	str	r3, [r0, #0]
   d7224:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7226:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d7228:	4620      	mov	r0, r4
   d722a:	bd38      	pop	{r3, r4, r5, pc}
   d722c:	000dd370 	.word	0x000dd370

000d7230 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7230:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7232:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7234:	b90a      	cbnz	r2, d723a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7236:	f001 fbe6 	bl	d8a06 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d723a:	68c3      	ldr	r3, [r0, #12]
    }
   d723c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7240:	4718      	bx	r3

000d7242 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7242:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7244:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7246:	f100 0110 	add.w	r1, r0, #16
   d724a:	f7ff fff1 	bl	d7230 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d724e:	bd08      	pop	{r3, pc}

000d7250 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7250:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7252:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7254:	b90a      	cbnz	r2, d725a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7256:	f001 fbd6 	bl	d8a06 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d725a:	68c3      	ldr	r3, [r0, #12]
    }
   d725c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7260:	4718      	bx	r3

000d7262 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7262:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7264:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7266:	f100 0110 	add.w	r1, r0, #16
   d726a:	f7ff fff1 	bl	d7250 <_ZNKSt8functionIFvRKbEEclES1_>
   d726e:	bd08      	pop	{r3, pc}

000d7270 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7270:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7272:	2300      	movs	r3, #0
   d7274:	6083      	str	r3, [r0, #8]
   d7276:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7278:	4604      	mov	r4, r0
   d727a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d727c:	b12b      	cbz	r3, d728a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d727e:	2202      	movs	r2, #2
   d7280:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7282:	68eb      	ldr	r3, [r5, #12]
   d7284:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7286:	68ab      	ldr	r3, [r5, #8]
   d7288:	60a3      	str	r3, [r4, #8]
	}
    }
   d728a:	4620      	mov	r0, r4
   d728c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7290 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d7290:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7292:	b089      	sub	sp, #36	; 0x24
   d7294:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d7296:	4668      	mov	r0, sp
   d7298:	f7ff ff10 	bl	d70bc <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d729c:	2300      	movs	r3, #0
   d729e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d72a2:	f04f 0202 	mov.w	r2, #2
   d72a6:	e8d4 3f4f 	ldrexb	r3, [r4]
   d72aa:	2b00      	cmp	r3, #0
   d72ac:	d103      	bne.n	d72b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d72ae:	e8c4 2f41 	strexb	r1, r2, [r4]
   d72b2:	2900      	cmp	r1, #0
   d72b4:	d1f7      	bne.n	d72a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d72b6:	d002      	beq.n	d72be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d72b8:	f88d 3008 	strb.w	r3, [sp, #8]
   d72bc:	e063      	b.n	d7386 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d72be:	f114 050c 	adds.w	r5, r4, #12
   d72c2:	d003      	beq.n	d72cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d72c4:	4669      	mov	r1, sp
   d72c6:	4628      	mov	r0, r5
   d72c8:	f7ff fef8 	bl	d70bc <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d72cc:	f3bf 8f5f 	dmb	sy
   d72d0:	2301      	movs	r3, #1
   d72d2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d72d4:	2000      	movs	r0, #0
   d72d6:	f104 0308 	add.w	r3, r4, #8
   d72da:	f3bf 8f5f 	dmb	sy
   d72de:	e853 6f00 	ldrex	r6, [r3]
   d72e2:	e843 0200 	strex	r2, r0, [r3]
   d72e6:	2a00      	cmp	r2, #0
   d72e8:	d1f9      	bne.n	d72de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d72ea:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d72ee:	2e00      	cmp	r6, #0
   d72f0:	d049      	beq.n	d7386 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d72f2:	f7ff fc27 	bl	d6b44 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d72f6:	b120      	cbz	r0, d7302 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d72f8:	4629      	mov	r1, r5
   d72fa:	4630      	mov	r0, r6
   d72fc:	f7ff ff98 	bl	d7230 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7300:	e03a      	b.n	d7378 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7302:	4631      	mov	r1, r6
   d7304:	a802      	add	r0, sp, #8
   d7306:	f7ff ffb3 	bl	d7270 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d730a:	68e0      	ldr	r0, [r4, #12]
   d730c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7310:	b108      	cbz	r0, d7316 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d7312:	f002 fe53 	bl	d9fbc <strdup>
   d7316:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7318:	2010      	movs	r0, #16
   d731a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d731e:	f7fc febc 	bl	d409a <_Znwj>
   d7322:	4605      	mov	r5, r0
   d7324:	b1e8      	cbz	r0, d7362 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7326:	2700      	movs	r7, #0
   d7328:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d732a:	2018      	movs	r0, #24
   d732c:	f7fc feb5 	bl	d409a <_Znwj>
   d7330:	4604      	mov	r4, r0
   d7332:	b188      	cbz	r0, d7358 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7334:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7336:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7338:	a802      	add	r0, sp, #8
   d733a:	f7ff ff54 	bl	d71e6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d733e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7340:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7342:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7344:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7346:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7348:	a906      	add	r1, sp, #24
   d734a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d734c:	60e3      	str	r3, [r4, #12]
   d734e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7352:	9205      	str	r2, [sp, #20]
   d7354:	f7ff feb2 	bl	d70bc <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7358:	4b0d      	ldr	r3, [pc, #52]	; (d7390 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d735a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d735c:	4b0d      	ldr	r3, [pc, #52]	; (d7394 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d735e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7360:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d7362:	a806      	add	r0, sp, #24
   d7364:	f7ff feb9 	bl	d70da <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7368:	a802      	add	r0, sp, #8
   d736a:	f7ff fe9e 	bl	d70aa <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d736e:	2200      	movs	r2, #0
   d7370:	4629      	mov	r1, r5
   d7372:	4809      	ldr	r0, [pc, #36]	; (d7398 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d7374:	f7ff fbee 	bl	d6b54 <application_thread_invoke>
   d7378:	4630      	mov	r0, r6
   d737a:	f7ff fe96 	bl	d70aa <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d737e:	2110      	movs	r1, #16
   d7380:	4630      	mov	r0, r6
   d7382:	f001 fb3e 	bl	d8a02 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d7386:	4668      	mov	r0, sp
   d7388:	f7ff fea7 	bl	d70da <_ZN8particle5ErrorD1Ev>
    }
   d738c:	b009      	add	sp, #36	; 0x24
   d738e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7390:	000d7243 	.word	0x000d7243
   d7394:	000d74b9 	.word	0x000d74b9
   d7398:	000d6ddb 	.word	0x000d6ddb

000d739c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d739c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d73a0:	b08b      	sub	sp, #44	; 0x2c
   d73a2:	4606      	mov	r6, r0
   d73a4:	460f      	mov	r7, r1
   d73a6:	4690      	mov	r8, r2
   d73a8:	4699      	mov	r9, r3
   d73aa:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d73ae:	f7ff fc39 	bl	d6c24 <spark_cloud_flag_connected>
   d73b2:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d73b4:	4683      	mov	fp, r0
   d73b6:	bb30      	cbnz	r0, d7406 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d73b8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d73bc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d73be:	a905      	add	r1, sp, #20
   d73c0:	4628      	mov	r0, r5
   d73c2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d73c6:	f7ff fe79 	bl	d70bc <_ZN8particle5ErrorC1EOS0_>
   d73ca:	2014      	movs	r0, #20
   d73cc:	f7fc fe65 	bl	d409a <_Znwj>
   d73d0:	4604      	mov	r4, r0
   d73d2:	b158      	cbz	r0, d73ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d73d4:	2302      	movs	r3, #2
   d73d6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d73d8:	2301      	movs	r3, #1
   d73da:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d73dc:	f8c0 b004 	str.w	fp, [r0, #4]
   d73e0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d73e4:	4629      	mov	r1, r5
   d73e6:	300c      	adds	r0, #12
   d73e8:	f7ff fe68 	bl	d70bc <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d73ec:	4630      	mov	r0, r6
   d73ee:	4621      	mov	r1, r4
   d73f0:	f840 4b04 	str.w	r4, [r0], #4
   d73f4:	f7ff ff08 	bl	d7208 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d73f8:	4628      	mov	r0, r5
   d73fa:	f7ff fe6e 	bl	d70da <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d73fe:	a805      	add	r0, sp, #20
   d7400:	f7ff fe6b 	bl	d70da <_ZN8particle5ErrorD1Ev>
   d7404:	e052      	b.n	d74ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7406:	2400      	movs	r4, #0
   d7408:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d740a:	2014      	movs	r0, #20
   d740c:	606c      	str	r4, [r5, #4]
   d740e:	60ac      	str	r4, [r5, #8]
   d7410:	9307      	str	r3, [sp, #28]
   d7412:	f7fc fe42 	bl	d409a <_Znwj>
   d7416:	4601      	mov	r1, r0
   d7418:	b118      	cbz	r0, d7422 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d741a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d741c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d741e:	6044      	str	r4, [r0, #4]
   d7420:	6084      	str	r4, [r0, #8]
   d7422:	a804      	add	r0, sp, #16
   d7424:	9103      	str	r1, [sp, #12]
   d7426:	f7ff feef 	bl	d7208 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d742a:	4b22      	ldr	r3, [pc, #136]	; (d74b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d742c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d742e:	2008      	movs	r0, #8
   d7430:	f7fc fe33 	bl	d409a <_Znwj>
   d7434:	4604      	mov	r4, r0
   d7436:	b128      	cbz	r0, d7444 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7438:	9b03      	ldr	r3, [sp, #12]
   d743a:	f840 3b04 	str.w	r3, [r0], #4
   d743e:	a904      	add	r1, sp, #16
   d7440:	f7ff fcdf 	bl	d6e02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7444:	9500      	str	r5, [sp, #0]
   d7446:	fa5f f38a 	uxtb.w	r3, sl
   d744a:	464a      	mov	r2, r9
   d744c:	4641      	mov	r1, r8
   d744e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d7450:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7452:	f7ff fbf7 	bl	d6c44 <spark_send_event>
   d7456:	b920      	cbnz	r0, d7462 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d7458:	9b03      	ldr	r3, [sp, #12]
   d745a:	785b      	ldrb	r3, [r3, #1]
   d745c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d7460:	b183      	cbz	r3, d7484 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d7462:	9b03      	ldr	r3, [sp, #12]
   d7464:	9305      	str	r3, [sp, #20]
   d7466:	a904      	add	r1, sp, #16
   d7468:	a806      	add	r0, sp, #24
   d746a:	f7ff fcca 	bl	d6e02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d746e:	a905      	add	r1, sp, #20
   d7470:	4630      	mov	r0, r6
   d7472:	f7ff fe89 	bl	d7188 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7476:	a806      	add	r0, sp, #24
   d7478:	f7fd f907 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d747c:	a804      	add	r0, sp, #16
   d747e:	f7fd f904 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7482:	e013      	b.n	d74ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d7484:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d7488:	a905      	add	r1, sp, #20
   d748a:	a803      	add	r0, sp, #12
   d748c:	9205      	str	r2, [sp, #20]
   d748e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7492:	f7ff fefd 	bl	d7290 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7496:	a805      	add	r0, sp, #20
   d7498:	f7ff fe1f 	bl	d70da <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d749c:	a805      	add	r0, sp, #20
   d749e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d74a0:	f7ff fe83 	bl	d71aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d74a4:	a806      	add	r0, sp, #24
   d74a6:	f7fd f8f0 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d74aa:	e7da      	b.n	d7462 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d74ac:	4630      	mov	r0, r6
   d74ae:	b00b      	add	sp, #44	; 0x2c
   d74b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d74b4:	000d7629 	.word	0x000d7629

000d74b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d74b8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d74ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d74bc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d74be:	d006      	beq.n	d74ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d74c0:	2a03      	cmp	r2, #3
   d74c2:	d017      	beq.n	d74f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d74c4:	2a01      	cmp	r2, #1
   d74c6:	d122      	bne.n	d750e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d74c8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d74ca:	6003      	str	r3, [r0, #0]
	      break;
   d74cc:	e01f      	b.n	d750e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d74ce:	2018      	movs	r0, #24
   d74d0:	680e      	ldr	r6, [r1, #0]
   d74d2:	f7fc fde2 	bl	d409a <_Znwj>
   d74d6:	4605      	mov	r5, r0
   d74d8:	b150      	cbz	r0, d74f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d74da:	4631      	mov	r1, r6
   d74dc:	f7ff fec8 	bl	d7270 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d74e0:	6930      	ldr	r0, [r6, #16]
   d74e2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d74e6:	b108      	cbz	r0, d74ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d74e8:	f002 fd68 	bl	d9fbc <strdup>
   d74ec:	6128      	str	r0, [r5, #16]
   d74ee:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d74f0:	6025      	str	r5, [r4, #0]
   d74f2:	e00c      	b.n	d750e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d74f4:	6804      	ldr	r4, [r0, #0]
   d74f6:	b154      	cbz	r4, d750e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d74f8:	f104 0010 	add.w	r0, r4, #16
   d74fc:	f7ff fded 	bl	d70da <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7500:	4620      	mov	r0, r4
   d7502:	f7ff fdd2 	bl	d70aa <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7506:	2118      	movs	r1, #24
   d7508:	4620      	mov	r0, r4
   d750a:	f001 fa7a 	bl	d8a02 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d750e:	2000      	movs	r0, #0
   d7510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7512 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7512:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7514:	2300      	movs	r3, #0
   d7516:	6083      	str	r3, [r0, #8]
   d7518:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d751a:	4604      	mov	r4, r0
   d751c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d751e:	b12b      	cbz	r3, d752c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7520:	2202      	movs	r2, #2
   d7522:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7524:	68eb      	ldr	r3, [r5, #12]
   d7526:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7528:	68ab      	ldr	r3, [r5, #8]
   d752a:	60a3      	str	r3, [r4, #8]
	}
    }
   d752c:	4620      	mov	r0, r4
   d752e:	bd38      	pop	{r3, r4, r5, pc}

000d7530 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7530:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7532:	b570      	push	{r4, r5, r6, lr}
   d7534:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7536:	d006      	beq.n	d7546 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d7538:	2a03      	cmp	r2, #3
   d753a:	d011      	beq.n	d7560 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d753c:	2a01      	cmp	r2, #1
   d753e:	d118      	bne.n	d7572 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7540:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7542:	6003      	str	r3, [r0, #0]
	      break;
   d7544:	e015      	b.n	d7572 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7546:	2014      	movs	r0, #20
   d7548:	680e      	ldr	r6, [r1, #0]
   d754a:	f7fc fda6 	bl	d409a <_Znwj>
   d754e:	4605      	mov	r5, r0
   d7550:	b120      	cbz	r0, d755c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7552:	4631      	mov	r1, r6
   d7554:	f7ff ffdd 	bl	d7512 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7558:	7c33      	ldrb	r3, [r6, #16]
   d755a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d755c:	6025      	str	r5, [r4, #0]
   d755e:	e008      	b.n	d7572 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7560:	6804      	ldr	r4, [r0, #0]
   d7562:	b134      	cbz	r4, d7572 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7564:	4620      	mov	r0, r4
   d7566:	f7ff fda0 	bl	d70aa <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d756a:	2114      	movs	r1, #20
   d756c:	4620      	mov	r0, r4
   d756e:	f001 fa48 	bl	d8a02 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7572:	2000      	movs	r0, #0
   d7574:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7578 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d7578:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d757a:	2300      	movs	r3, #0
   d757c:	b087      	sub	sp, #28
   d757e:	460c      	mov	r4, r1
   d7580:	f3bf 8f5f 	dmb	sy
   d7584:	e850 6f00 	ldrex	r6, [r0]
   d7588:	e840 3200 	strex	r2, r3, [r0]
   d758c:	2a00      	cmp	r2, #0
   d758e:	d1f9      	bne.n	d7584 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d7590:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7594:	2e00      	cmp	r6, #0
   d7596:	d03f      	beq.n	d7618 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7598:	4618      	mov	r0, r3
   d759a:	f7ff fad3 	bl	d6b44 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d759e:	4607      	mov	r7, r0
   d75a0:	b120      	cbz	r0, d75ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d75a2:	4621      	mov	r1, r4
   d75a4:	4630      	mov	r0, r6
   d75a6:	f7ff fe53 	bl	d7250 <_ZNKSt8functionIFvRKbEEclES1_>
   d75aa:	e02e      	b.n	d760a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d75ac:	4631      	mov	r1, r6
   d75ae:	a801      	add	r0, sp, #4
   d75b0:	f7ff ffaf 	bl	d7512 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d75b4:	7823      	ldrb	r3, [r4, #0]
   d75b6:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d75ba:	2010      	movs	r0, #16
   d75bc:	f7fc fd6d 	bl	d409a <_Znwj>
   d75c0:	4605      	mov	r5, r0
   d75c2:	b1d0      	cbz	r0, d75fa <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d75c4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d75c6:	2014      	movs	r0, #20
   d75c8:	f7fc fd67 	bl	d409a <_Znwj>
   d75cc:	4604      	mov	r4, r0
   d75ce:	b178      	cbz	r0, d75f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d75d0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d75d2:	4601      	mov	r1, r0
   d75d4:	a801      	add	r0, sp, #4
   d75d6:	f7ff fe06 	bl	d71e6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d75da:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d75dc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d75de:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d75e0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d75e2:	9203      	str	r2, [sp, #12]
   d75e4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d75e6:	60e3      	str	r3, [r4, #12]
   d75e8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d75ec:	9204      	str	r2, [sp, #16]
   d75ee:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d75f0:	4b0a      	ldr	r3, [pc, #40]	; (d761c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d75f2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d75f4:	4b0a      	ldr	r3, [pc, #40]	; (d7620 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d75f6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d75f8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d75fa:	a801      	add	r0, sp, #4
   d75fc:	f7ff fd55 	bl	d70aa <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7600:	2200      	movs	r2, #0
   d7602:	4629      	mov	r1, r5
   d7604:	4807      	ldr	r0, [pc, #28]	; (d7624 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d7606:	f7ff faa5 	bl	d6b54 <application_thread_invoke>
   d760a:	4630      	mov	r0, r6
   d760c:	f7ff fd4d 	bl	d70aa <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7610:	2110      	movs	r1, #16
   d7612:	4630      	mov	r0, r6
   d7614:	f001 f9f5 	bl	d8a02 <_ZdlPvj>
        }
    }
   d7618:	b007      	add	sp, #28
   d761a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d761c:	000d7263 	.word	0x000d7263
   d7620:	000d7531 	.word	0x000d7531
   d7624:	000d6ddb 	.word	0x000d6ddb

000d7628 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7628:	b530      	push	{r4, r5, lr}
   d762a:	b085      	sub	sp, #20
   d762c:	4604      	mov	r4, r0
   d762e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7630:	4668      	mov	r0, sp
   d7632:	4611      	mov	r1, r2
   d7634:	f7ff fdb9 	bl	d71aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7638:	b17c      	cbz	r4, d765a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d763a:	b224      	sxth	r4, r4
   d763c:	4628      	mov	r0, r5
   d763e:	b10d      	cbz	r5, d7644 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d7640:	f002 fcbc 	bl	d9fbc <strdup>
   d7644:	9002      	str	r0, [sp, #8]
   d7646:	a902      	add	r1, sp, #8
   d7648:	4668      	mov	r0, sp
   d764a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d764e:	f7ff fe1f 	bl	d7290 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7652:	a802      	add	r0, sp, #8
   d7654:	f7ff fd41 	bl	d70da <_ZN8particle5ErrorD1Ev>
   d7658:	e01d      	b.n	d7696 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d765a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d765c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7660:	f04f 0201 	mov.w	r2, #1
   d7664:	e8d0 3f4f 	ldrexb	r3, [r0]
   d7668:	42a3      	cmp	r3, r4
   d766a:	d103      	bne.n	d7674 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d766c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d7670:	2900      	cmp	r1, #0
   d7672:	d1f7      	bne.n	d7664 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d7674:	d002      	beq.n	d767c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d7676:	f88d 3008 	strb.w	r3, [sp, #8]
   d767a:	e00c      	b.n	d7696 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d767c:	f110 010c 	adds.w	r1, r0, #12
   d7680:	f04f 0301 	mov.w	r3, #1
   d7684:	bf18      	it	ne
   d7686:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7688:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d768c:	3004      	adds	r0, #4
   d768e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d7692:	f7ff ff71 	bl	d7578 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d7696:	a801      	add	r0, sp, #4
   d7698:	f7fc fff7 	bl	d468a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d769c:	b005      	add	sp, #20
   d769e:	bd30      	pop	{r4, r5, pc}

000d76a0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d76a0:	2200      	movs	r2, #0
   d76a2:	4611      	mov	r1, r2
   d76a4:	6840      	ldr	r0, [r0, #4]
   d76a6:	f7ff bb35 	b.w	d6d14 <network_listening>

000d76aa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d76aa:	2200      	movs	r2, #0
   d76ac:	4611      	mov	r1, r2
   d76ae:	6840      	ldr	r0, [r0, #4]
   d76b0:	f7ff bb40 	b.w	d6d34 <network_get_listen_timeout>

000d76b4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d76b4:	2200      	movs	r2, #0
   d76b6:	6840      	ldr	r0, [r0, #4]
   d76b8:	f7ff bb34 	b.w	d6d24 <network_set_listen_timeout>

000d76bc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d76bc:	2200      	movs	r2, #0
   d76be:	f081 0101 	eor.w	r1, r1, #1
   d76c2:	6840      	ldr	r0, [r0, #4]
   d76c4:	f7ff bb1e 	b.w	d6d04 <network_listen>

000d76c8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d76c8:	2300      	movs	r3, #0
   d76ca:	461a      	mov	r2, r3
   d76cc:	4619      	mov	r1, r3
   d76ce:	6840      	ldr	r0, [r0, #4]
   d76d0:	f7ff bb10 	b.w	d6cf4 <network_off>

000d76d4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d76d4:	2300      	movs	r3, #0
   d76d6:	461a      	mov	r2, r3
   d76d8:	4619      	mov	r1, r3
   d76da:	6840      	ldr	r0, [r0, #4]
   d76dc:	f7ff bb02 	b.w	d6ce4 <network_on>

000d76e0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d76e0:	2200      	movs	r2, #0
   d76e2:	4611      	mov	r1, r2
   d76e4:	6840      	ldr	r0, [r0, #4]
   d76e6:	f7ff baf5 	b.w	d6cd4 <network_ready>

000d76ea <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d76ea:	2200      	movs	r2, #0
   d76ec:	4611      	mov	r1, r2
   d76ee:	6840      	ldr	r0, [r0, #4]
   d76f0:	f7ff bae0 	b.w	d6cb4 <network_connecting>

000d76f4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d76f4:	2200      	movs	r2, #0
   d76f6:	2102      	movs	r1, #2
   d76f8:	6840      	ldr	r0, [r0, #4]
   d76fa:	f7ff bae3 	b.w	d6cc4 <network_disconnect>

000d76fe <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d76fe:	2300      	movs	r3, #0
   d7700:	461a      	mov	r2, r3
   d7702:	6840      	ldr	r0, [r0, #4]
   d7704:	f7ff bace 	b.w	d6ca4 <network_connect>

000d7708 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d7708:	4b02      	ldr	r3, [pc, #8]	; (d7714 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d770a:	2203      	movs	r2, #3
   d770c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d770e:	4a02      	ldr	r2, [pc, #8]	; (d7718 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7710:	601a      	str	r2, [r3, #0]
   d7712:	4770      	bx	lr
   d7714:	2003e1d0 	.word	0x2003e1d0
   d7718:	000dd38c 	.word	0x000dd38c

000d771c <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d771c:	6800      	ldr	r0, [r0, #0]
   d771e:	f000 b8d0 	b.w	d78c2 <_ZN7TwoWire4lockEv>

000d7722 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d7722:	b510      	push	{r4, lr}
   d7724:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d7726:	6001      	str	r1, [r0, #0]
   d7728:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d772a:	b10a      	cbz	r2, d7730 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d772c:	f7ff fff6 	bl	d771c <_ZN9FuelGauge4lockEv>
    }
}
   d7730:	4620      	mov	r0, r4
   d7732:	bd10      	pop	{r4, pc}

000d7734 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d7734:	b538      	push	{r3, r4, r5, lr}
   d7736:	4604      	mov	r4, r0
   d7738:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d773a:	f001 f91b 	bl	d8974 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d773e:	462a      	mov	r2, r5
   d7740:	4601      	mov	r1, r0
   d7742:	4620      	mov	r0, r4
   d7744:	f7ff ffed 	bl	d7722 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d7748:	4620      	mov	r0, r4
   d774a:	bd38      	pop	{r3, r4, r5, pc}

000d774c <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d774c:	6800      	ldr	r0, [r0, #0]
   d774e:	f000 b8c1 	b.w	d78d4 <_ZN7TwoWire6unlockEv>

000d7752 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d7752:	b510      	push	{r4, lr}
{
    if (lock_) {
   d7754:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d7756:	4604      	mov	r4, r0
{
    if (lock_) {
   d7758:	b10b      	cbz	r3, d775e <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d775a:	f7ff fff7 	bl	d774c <_ZN9FuelGauge6unlockEv>
    }
}
   d775e:	4620      	mov	r0, r4
   d7760:	bd10      	pop	{r4, pc}

000d7762 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d7762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7764:	4604      	mov	r4, r0
   d7766:	4616      	mov	r6, r2
   d7768:	461d      	mov	r5, r3
   d776a:	460f      	mov	r7, r1
   d776c:	f7ff ffd6 	bl	d771c <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d7770:	6820      	ldr	r0, [r4, #0]
   d7772:	2136      	movs	r1, #54	; 0x36
   d7774:	f000 f89a 	bl	d78ac <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d7778:	6820      	ldr	r0, [r4, #0]
   d777a:	6803      	ldr	r3, [r0, #0]
   d777c:	4639      	mov	r1, r7
   d777e:	689b      	ldr	r3, [r3, #8]
   d7780:	4798      	blx	r3
    i2c_.endTransmission(true);
   d7782:	2101      	movs	r1, #1
   d7784:	6820      	ldr	r0, [r4, #0]
   d7786:	f000 f894 	bl	d78b2 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d778a:	2202      	movs	r2, #2
   d778c:	2136      	movs	r1, #54	; 0x36
   d778e:	2301      	movs	r3, #1
   d7790:	6820      	ldr	r0, [r4, #0]
   d7792:	f000 f882 	bl	d789a <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
   d7796:	6820      	ldr	r0, [r4, #0]
   d7798:	6803      	ldr	r3, [r0, #0]
   d779a:	695b      	ldr	r3, [r3, #20]
   d779c:	4798      	blx	r3
   d779e:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d77a0:	6820      	ldr	r0, [r4, #0]
   d77a2:	6803      	ldr	r3, [r0, #0]
   d77a4:	695b      	ldr	r3, [r3, #20]
   d77a6:	4798      	blx	r3
   d77a8:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d77aa:	4620      	mov	r0, r4
}
   d77ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d77b0:	f7ff bfcc 	b.w	d774c <_ZN9FuelGauge6unlockEv>

000d77b4 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d77b4:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d77b6:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d77b8:	2200      	movs	r2, #0
	byte LSB = 0;
   d77ba:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d77be:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d77c2:	2104      	movs	r1, #4
   d77c4:	f10d 0206 	add.w	r2, sp, #6
   d77c8:	f7ff ffcb 	bl	d7762 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d77cc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d77d0:	f001 fbb6 	bl	d8f40 <__aeabi_i2d>
   d77d4:	2200      	movs	r2, #0
   d77d6:	4b09      	ldr	r3, [pc, #36]	; (d77fc <_ZN9FuelGauge6getSoCEv+0x48>)
   d77d8:	f001 fc18 	bl	d900c <__aeabi_dmul>
   d77dc:	f001 ff0e 	bl	d95fc <__aeabi_d2f>
   d77e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d77e4:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d77e8:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d77ec:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d77f0:	ee37 0a80 	vadd.f32	s0, s15, s0
   d77f4:	b003      	add	sp, #12
   d77f6:	f85d fb04 	ldr.w	pc, [sp], #4
   d77fa:	bf00      	nop
   d77fc:	3f700000 	.word	0x3f700000

000d7800 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d7800:	4770      	bx	lr

000d7802 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7804:	4606      	mov	r6, r0
   d7806:	4615      	mov	r5, r2
   d7808:	460c      	mov	r4, r1
   d780a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d780c:	42bc      	cmp	r4, r7
   d780e:	d006      	beq.n	d781e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7810:	6833      	ldr	r3, [r6, #0]
   d7812:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7816:	689b      	ldr	r3, [r3, #8]
   d7818:	4630      	mov	r0, r6
   d781a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d781c:	e7f6      	b.n	d780c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d781e:	4628      	mov	r0, r5
   d7820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7822 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7822:	2200      	movs	r2, #0
   d7824:	7c00      	ldrb	r0, [r0, #16]
   d7826:	f7ff b865 	b.w	d68f4 <HAL_I2C_Write_Data>

000d782a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d782a:	2100      	movs	r1, #0
   d782c:	7c00      	ldrb	r0, [r0, #16]
   d782e:	f7ff b869 	b.w	d6904 <HAL_I2C_Available_Data>

000d7832 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7832:	2100      	movs	r1, #0
   d7834:	7c00      	ldrb	r0, [r0, #16]
   d7836:	f7ff b86d 	b.w	d6914 <HAL_I2C_Read_Data>

000d783a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d783a:	2100      	movs	r1, #0
   d783c:	7c00      	ldrb	r0, [r0, #16]
   d783e:	f7ff b871 	b.w	d6924 <HAL_I2C_Peek_Data>

000d7842 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7842:	2100      	movs	r1, #0
   d7844:	7c00      	ldrb	r0, [r0, #16]
   d7846:	f7ff b875 	b.w	d6934 <HAL_I2C_Flush_Data>

000d784a <_ZN7TwoWireD0Ev>:
   d784a:	b510      	push	{r4, lr}
   d784c:	2114      	movs	r1, #20
   d784e:	4604      	mov	r4, r0
   d7850:	f001 f8d7 	bl	d8a02 <_ZdlPvj>
   d7854:	4620      	mov	r0, r4
   d7856:	bd10      	pop	{r4, pc}

000d7858 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d7858:	b510      	push	{r4, lr}
   d785a:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d785c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7860:	4608      	mov	r0, r1
   d7862:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7864:	2100      	movs	r1, #0
   d7866:	4b04      	ldr	r3, [pc, #16]	; (d7878 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d7868:	7420      	strb	r0, [r4, #16]
   d786a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d786c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d786e:	f7ff f871 	bl	d6954 <HAL_I2C_Init>

}
   d7872:	4620      	mov	r0, r4
   d7874:	bd10      	pop	{r4, pc}
   d7876:	bf00      	nop
   d7878:	000dd3c0 	.word	0x000dd3c0

000d787c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d787c:	2300      	movs	r3, #0
   d787e:	461a      	mov	r2, r3
   d7880:	4619      	mov	r1, r3
   d7882:	7c00      	ldrb	r0, [r0, #16]
   d7884:	f7ff b816 	b.w	d68b4 <HAL_I2C_Begin>

000d7888 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d7888:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d788a:	2400      	movs	r4, #0
   d788c:	7c00      	ldrb	r0, [r0, #16]
   d788e:	9400      	str	r4, [sp, #0]
   d7890:	f7ff f818 	bl	d68c4 <HAL_I2C_Request_Data>
  return result;
}
   d7894:	b2c0      	uxtb	r0, r0
   d7896:	b002      	add	sp, #8
   d7898:	bd10      	pop	{r4, pc}

000d789a <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
   d789a:	b2db      	uxtb	r3, r3
   d789c:	b2d2      	uxtb	r2, r2
   d789e:	b2c9      	uxtb	r1, r1
   d78a0:	f7ff bff2 	b.w	d7888 <_ZN7TwoWire11requestFromEhhh>

000d78a4 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d78a4:	2200      	movs	r2, #0
   d78a6:	7c00      	ldrb	r0, [r0, #16]
   d78a8:	f7ff b814 	b.w	d68d4 <HAL_I2C_Begin_Transmission>

000d78ac <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d78ac:	b2c9      	uxtb	r1, r1
   d78ae:	f7ff bff9 	b.w	d78a4 <_ZN7TwoWire17beginTransmissionEh>

000d78b2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d78b2:	2200      	movs	r2, #0
   d78b4:	7c00      	ldrb	r0, [r0, #16]
   d78b6:	f7ff b815 	b.w	d68e4 <HAL_I2C_End_Transmission>

000d78ba <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d78ba:	2100      	movs	r1, #0
   d78bc:	7c00      	ldrb	r0, [r0, #16]
   d78be:	f7ff b841 	b.w	d6944 <HAL_I2C_Is_Enabled>

000d78c2 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d78c2:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d78c4:	2100      	movs	r1, #0
   d78c6:	7c00      	ldrb	r0, [r0, #16]
   d78c8:	f7ff f84c 	bl	d6964 <HAL_I2C_Acquire>
}
   d78cc:	fab0 f080 	clz	r0, r0
   d78d0:	0940      	lsrs	r0, r0, #5
   d78d2:	bd08      	pop	{r3, pc}

000d78d4 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d78d4:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d78d6:	2100      	movs	r1, #0
   d78d8:	7c00      	ldrb	r0, [r0, #16]
   d78da:	f7ff f84b 	bl	d6974 <HAL_I2C_Release>
}
   d78de:	fab0 f080 	clz	r0, r0
   d78e2:	0940      	lsrs	r0, r0, #5
   d78e4:	bd08      	pop	{r3, pc}

000d78e6 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d78e6:	4700      	bx	r0

000d78e8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d78e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d78ea:	b085      	sub	sp, #20
   d78ec:	461c      	mov	r4, r3
   d78ee:	460e      	mov	r6, r1
   d78f0:	4617      	mov	r7, r2
   d78f2:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d78f4:	f7fe ffce 	bl	d6894 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d78f8:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d78fa:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d78fc:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d7900:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7902:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d7906:	bfa5      	ittet	ge
   d7908:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d790c:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d7910:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d7912:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7914:	9300      	str	r3, [sp, #0]
   d7916:	4632      	mov	r2, r6
   d7918:	463b      	mov	r3, r7
   d791a:	4906      	ldr	r1, [pc, #24]	; (d7934 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d791c:	bfa8      	it	ge
   d791e:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7922:	4628      	mov	r0, r5
   d7924:	f7fe ffae 	bl	d6884 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d7928:	fab0 f080 	clz	r0, r0
   d792c:	0940      	lsrs	r0, r0, #5
   d792e:	b005      	add	sp, #20
   d7930:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7932:	bf00      	nop
   d7934:	000d78e7 	.word	0x000d78e7

000d7938 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   d7938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d793a:	4606      	mov	r6, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   d793c:	f7fe ffaa 	bl	d6894 <HAL_Interrupts_Detach>
   d7940:	4607      	mov	r7, r0
   d7942:	b968      	cbnz	r0, d7960 <_Z15detachInterruptt+0x28>
        return false;
    }
    if (handlers[pin]) {
   d7944:	4d08      	ldr	r5, [pc, #32]	; (d7968 <_Z15detachInterruptt+0x30>)
   d7946:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
   d794a:	b15c      	cbz	r4, d7964 <_Z15detachInterruptt+0x2c>
   d794c:	4620      	mov	r0, r4
   d794e:	f7ff fbac 	bl	d70aa <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   d7952:	2110      	movs	r1, #16
   d7954:	4620      	mov	r0, r4
   d7956:	f001 f854 	bl	d8a02 <_ZdlPvj>
        handlers[pin] = nullptr;
   d795a:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   d795e:	e001      	b.n	d7964 <_Z15detachInterruptt+0x2c>
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
        return false;
   d7960:	2000      	movs	r0, #0
   d7962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (handlers[pin]) {
        delete handlers[pin];
        handlers[pin] = nullptr;
    }
    return true;
   d7964:	2001      	movs	r0, #1
}
   d7966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7968:	2003e1d8 	.word	0x2003e1d8

000d796c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d796c:	4770      	bx	lr

000d796e <_ZN9IPAddressD0Ev>:
   d796e:	b510      	push	{r4, lr}
   d7970:	2118      	movs	r1, #24
   d7972:	4604      	mov	r4, r0
   d7974:	f001 f845 	bl	d8a02 <_ZdlPvj>
   d7978:	4620      	mov	r0, r4
   d797a:	bd10      	pop	{r4, pc}

000d797c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d797c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d797e:	7d03      	ldrb	r3, [r0, #20]
   d7980:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7982:	b08d      	sub	sp, #52	; 0x34
   d7984:	460e      	mov	r6, r1
   d7986:	f100 0704 	add.w	r7, r0, #4
   d798a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d798e:	d002      	beq.n	d7996 <_ZNK9IPAddress7printToER5Print+0x1a>
   d7990:	f100 0508 	add.w	r5, r0, #8
   d7994:	e018      	b.n	d79c8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7996:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7998:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d799a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d799e:	232f      	movs	r3, #47	; 0x2f
   d79a0:	462a      	mov	r2, r5
   d79a2:	200a      	movs	r0, #10
   d79a4:	f7fe ffee 	bl	d6984 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d79a8:	4628      	mov	r0, r5
   d79aa:	f003 f837 	bl	daa1c <strlen>
   d79ae:	6833      	ldr	r3, [r6, #0]
   d79b0:	4602      	mov	r2, r0
   d79b2:	68db      	ldr	r3, [r3, #12]
   d79b4:	4629      	mov	r1, r5
   d79b6:	4630      	mov	r0, r6
   d79b8:	4798      	blx	r3
   d79ba:	e00f      	b.n	d79dc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d79bc:	b124      	cbz	r4, d79c8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d79be:	212e      	movs	r1, #46	; 0x2e
   d79c0:	4630      	mov	r0, r6
   d79c2:	f000 f9c9 	bl	d7d58 <_ZN5Print5printEc>
   d79c6:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d79c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d79cc:	220a      	movs	r2, #10
   d79ce:	4630      	mov	r0, r6
   d79d0:	f000 f9db 	bl	d7d8a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d79d4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d79d6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d79d8:	d1f0      	bne.n	d79bc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d79da:	4620      	mov	r0, r4
    }
    return n;
}
   d79dc:	b00d      	add	sp, #52	; 0x34
   d79de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d79e0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d79e0:	b510      	push	{r4, lr}
   d79e2:	4b05      	ldr	r3, [pc, #20]	; (d79f8 <_ZN9IPAddressC1Ev+0x18>)
   d79e4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d79e6:	2211      	movs	r2, #17
   d79e8:	f840 3b04 	str.w	r3, [r0], #4
   d79ec:	2100      	movs	r1, #0
   d79ee:	f002 f854 	bl	d9a9a <memset>
{
    clear();
}
   d79f2:	4620      	mov	r0, r4
   d79f4:	bd10      	pop	{r4, pc}
   d79f6:	bf00      	nop
   d79f8:	000dd3e8 	.word	0x000dd3e8

000d79fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d79fc:	4603      	mov	r3, r0
   d79fe:	4a07      	ldr	r2, [pc, #28]	; (d7a1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7a00:	b510      	push	{r4, lr}
   d7a02:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7a06:	f101 0210 	add.w	r2, r1, #16
   d7a0a:	f851 4b04 	ldr.w	r4, [r1], #4
   d7a0e:	f843 4b04 	str.w	r4, [r3], #4
   d7a12:	4291      	cmp	r1, r2
   d7a14:	d1f9      	bne.n	d7a0a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7a16:	780a      	ldrb	r2, [r1, #0]
   d7a18:	701a      	strb	r2, [r3, #0]
}
   d7a1a:	bd10      	pop	{r4, pc}
   d7a1c:	000dd3e8 	.word	0x000dd3e8

000d7a20 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7a20:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7a22:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7a26:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7a2a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7a2e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d7a32:	2304      	movs	r3, #4
   d7a34:	6041      	str	r1, [r0, #4]
   d7a36:	7503      	strb	r3, [r0, #20]
   d7a38:	bd10      	pop	{r4, pc}

000d7a3a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7a3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7a3c:	780d      	ldrb	r5, [r1, #0]
   d7a3e:	788b      	ldrb	r3, [r1, #2]
   d7a40:	784a      	ldrb	r2, [r1, #1]
   d7a42:	78c9      	ldrb	r1, [r1, #3]
   d7a44:	9100      	str	r1, [sp, #0]
   d7a46:	4629      	mov	r1, r5
   d7a48:	f7ff ffea 	bl	d7a20 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7a4c:	b003      	add	sp, #12
   d7a4e:	bd30      	pop	{r4, r5, pc}

000d7a50 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7a50:	4b01      	ldr	r3, [pc, #4]	; (d7a58 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7a52:	4a02      	ldr	r2, [pc, #8]	; (d7a5c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7a54:	601a      	str	r2, [r3, #0]
   d7a56:	4770      	bx	lr
   d7a58:	2003e268 	.word	0x2003e268
   d7a5c:	000dd464 	.word	0x000dd464

000d7a60 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7a60:	2200      	movs	r2, #0
   d7a62:	4611      	mov	r1, r2
   d7a64:	6840      	ldr	r0, [r0, #4]
   d7a66:	f7ff b955 	b.w	d6d14 <network_listening>

000d7a6a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7a6a:	2200      	movs	r2, #0
   d7a6c:	4611      	mov	r1, r2
   d7a6e:	6840      	ldr	r0, [r0, #4]
   d7a70:	f7ff b960 	b.w	d6d34 <network_get_listen_timeout>

000d7a74 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7a74:	2200      	movs	r2, #0
   d7a76:	6840      	ldr	r0, [r0, #4]
   d7a78:	f7ff b954 	b.w	d6d24 <network_set_listen_timeout>

000d7a7c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7a7c:	2200      	movs	r2, #0
   d7a7e:	f081 0101 	eor.w	r1, r1, #1
   d7a82:	6840      	ldr	r0, [r0, #4]
   d7a84:	f7ff b93e 	b.w	d6d04 <network_listen>

000d7a88 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7a88:	2300      	movs	r3, #0
   d7a8a:	461a      	mov	r2, r3
   d7a8c:	2101      	movs	r1, #1
   d7a8e:	6840      	ldr	r0, [r0, #4]
   d7a90:	f7ff b930 	b.w	d6cf4 <network_off>

000d7a94 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7a94:	2300      	movs	r3, #0
   d7a96:	461a      	mov	r2, r3
   d7a98:	4619      	mov	r1, r3
   d7a9a:	6840      	ldr	r0, [r0, #4]
   d7a9c:	f7ff b922 	b.w	d6ce4 <network_on>

000d7aa0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7aa0:	2200      	movs	r2, #0
   d7aa2:	4611      	mov	r1, r2
   d7aa4:	6840      	ldr	r0, [r0, #4]
   d7aa6:	f7ff b915 	b.w	d6cd4 <network_ready>

000d7aaa <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7aaa:	2200      	movs	r2, #0
   d7aac:	4611      	mov	r1, r2
   d7aae:	6840      	ldr	r0, [r0, #4]
   d7ab0:	f7ff b900 	b.w	d6cb4 <network_connecting>

000d7ab4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7ab4:	2200      	movs	r2, #0
   d7ab6:	2102      	movs	r1, #2
   d7ab8:	6840      	ldr	r0, [r0, #4]
   d7aba:	f7ff b903 	b.w	d6cc4 <network_disconnect>

000d7abe <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7abe:	2300      	movs	r3, #0
   d7ac0:	461a      	mov	r2, r3
   d7ac2:	6840      	ldr	r0, [r0, #4]
   d7ac4:	f7ff b8ee 	b.w	d6ca4 <network_connect>

000d7ac8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7ac8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7aca:	4605      	mov	r5, r0
   d7acc:	b188      	cbz	r0, d7af2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7ace:	6804      	ldr	r4, [r0, #0]
   d7ad0:	b14c      	cbz	r4, d7ae6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7ad2:	68a3      	ldr	r3, [r4, #8]
   d7ad4:	b11b      	cbz	r3, d7ade <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7ad6:	2203      	movs	r2, #3
   d7ad8:	4621      	mov	r1, r4
   d7ada:	4620      	mov	r0, r4
   d7adc:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7ade:	2110      	movs	r1, #16
   d7ae0:	4620      	mov	r0, r4
   d7ae2:	f000 ff8e 	bl	d8a02 <_ZdlPvj>
   d7ae6:	4628      	mov	r0, r5
   d7ae8:	2114      	movs	r1, #20
      }
   d7aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7aee:	f000 bf88 	b.w	d8a02 <_ZdlPvj>
   d7af2:	bd38      	pop	{r3, r4, r5, pc}

000d7af4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7af4:	b110      	cbz	r0, d7afc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7af6:	6803      	ldr	r3, [r0, #0]
   d7af8:	685b      	ldr	r3, [r3, #4]
   d7afa:	4718      	bx	r3
   d7afc:	4770      	bx	lr

000d7afe <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7afe:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7b00:	6803      	ldr	r3, [r0, #0]
   d7b02:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7b04:	b1bb      	cbz	r3, d7b36 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7b06:	6858      	ldr	r0, [r3, #4]
   d7b08:	f7fe fe1c 	bl	d6744 <os_thread_is_current>
   d7b0c:	b978      	cbnz	r0, d7b2e <_ZN6ThreadD1Ev+0x30>
   d7b0e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7b10:	7c5a      	ldrb	r2, [r3, #17]
   d7b12:	b912      	cbnz	r2, d7b1a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7b14:	6858      	ldr	r0, [r3, #4]
   d7b16:	f7fe fe1d 	bl	d6754 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7b1a:	6823      	ldr	r3, [r4, #0]
   d7b1c:	6858      	ldr	r0, [r3, #4]
   d7b1e:	f7fe fe21 	bl	d6764 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b22:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7b24:	2300      	movs	r3, #0
   d7b26:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7b28:	b128      	cbz	r0, d7b36 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7b2a:	f7ff ffcd 	bl	d7ac8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7b2e:	6820      	ldr	r0, [r4, #0]
   d7b30:	b108      	cbz	r0, d7b36 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7b32:	f7ff ffc9 	bl	d7ac8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7b36:	4620      	mov	r0, r4
   d7b38:	bd10      	pop	{r4, pc}
	...

000d7b3c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7b3c:	b538      	push	{r3, r4, r5, lr}
   d7b3e:	4b0c      	ldr	r3, [pc, #48]	; (d7b70 <_ZN5spark9MeshClassD1Ev+0x34>)
   d7b40:	6003      	str	r3, [r0, #0]
   d7b42:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7b44:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d7b48:	b108      	cbz	r0, d7b4e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7b4a:	f7fc faaa 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7b4e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d7b52:	b135      	cbz	r5, d7b62 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7b54:	4628      	mov	r0, r5
   d7b56:	f7ff ffd2 	bl	d7afe <_ZN6ThreadD1Ev>
   d7b5a:	2104      	movs	r1, #4
   d7b5c:	4628      	mov	r0, r5
   d7b5e:	f000 ff50 	bl	d8a02 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7b62:	68a0      	ldr	r0, [r4, #8]
   d7b64:	b108      	cbz	r0, d7b6a <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d7b66:	f7ff ffc5 	bl	d7af4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7b6a:	4620      	mov	r0, r4
   d7b6c:	bd38      	pop	{r3, r4, r5, pc}
   d7b6e:	bf00      	nop
   d7b70:	000dd4d0 	.word	0x000dd4d0

000d7b74 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7b74:	b538      	push	{r3, r4, r5, lr}
   d7b76:	4c0e      	ldr	r4, [pc, #56]	; (d7bb0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7b78:	4b0e      	ldr	r3, [pc, #56]	; (d7bb4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7b7a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7b7c:	2500      	movs	r5, #0
   d7b7e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7b80:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7b84:	6063      	str	r3, [r4, #4]
   d7b86:	60a5      	str	r5, [r4, #8]
   d7b88:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7b8c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7b90:	f7fe fdf0 	bl	d6774 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7b94:	4b08      	ldr	r3, [pc, #32]	; (d7bb8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7b96:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7b9a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7b9e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7ba0:	4620      	mov	r0, r4
   d7ba2:	4a06      	ldr	r2, [pc, #24]	; (d7bbc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7ba4:	4906      	ldr	r1, [pc, #24]	; (d7bc0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7baa:	f000 bf25 	b.w	d89f8 <__aeabi_atexit>
   d7bae:	bf00      	nop
   d7bb0:	2003e26c 	.word	0x2003e26c
   d7bb4:	000dd504 	.word	0x000dd504
   d7bb8:	000dd4d0 	.word	0x000dd4d0
   d7bbc:	2003e064 	.word	0x2003e064
   d7bc0:	000d7b3d 	.word	0x000d7b3d

000d7bc4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7bc4:	2300      	movs	r3, #0
   d7bc6:	461a      	mov	r2, r3
   d7bc8:	6840      	ldr	r0, [r0, #4]
   d7bca:	f7ff b86b 	b.w	d6ca4 <network_connect>

000d7bce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7bce:	2200      	movs	r2, #0
   d7bd0:	2102      	movs	r1, #2
   d7bd2:	6840      	ldr	r0, [r0, #4]
   d7bd4:	f7ff b876 	b.w	d6cc4 <network_disconnect>

000d7bd8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7bd8:	2200      	movs	r2, #0
   d7bda:	4611      	mov	r1, r2
   d7bdc:	6840      	ldr	r0, [r0, #4]
   d7bde:	f7ff b869 	b.w	d6cb4 <network_connecting>

000d7be2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7be2:	2200      	movs	r2, #0
   d7be4:	4611      	mov	r1, r2
   d7be6:	6840      	ldr	r0, [r0, #4]
   d7be8:	f7ff b874 	b.w	d6cd4 <network_ready>

000d7bec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7bec:	2300      	movs	r3, #0
   d7bee:	461a      	mov	r2, r3
   d7bf0:	4619      	mov	r1, r3
   d7bf2:	6840      	ldr	r0, [r0, #4]
   d7bf4:	f7ff b876 	b.w	d6ce4 <network_on>

000d7bf8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7bf8:	2300      	movs	r3, #0
   d7bfa:	461a      	mov	r2, r3
   d7bfc:	4619      	mov	r1, r3
   d7bfe:	6840      	ldr	r0, [r0, #4]
   d7c00:	f7ff b878 	b.w	d6cf4 <network_off>

000d7c04 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7c04:	2200      	movs	r2, #0
   d7c06:	f081 0101 	eor.w	r1, r1, #1
   d7c0a:	6840      	ldr	r0, [r0, #4]
   d7c0c:	f7ff b87a 	b.w	d6d04 <network_listen>

000d7c10 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7c10:	2200      	movs	r2, #0
   d7c12:	6840      	ldr	r0, [r0, #4]
   d7c14:	f7ff b886 	b.w	d6d24 <network_set_listen_timeout>

000d7c18 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7c18:	2200      	movs	r2, #0
   d7c1a:	4611      	mov	r1, r2
   d7c1c:	6840      	ldr	r0, [r0, #4]
   d7c1e:	f7ff b889 	b.w	d6d34 <network_get_listen_timeout>

000d7c22 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7c22:	2200      	movs	r2, #0
   d7c24:	4611      	mov	r1, r2
   d7c26:	6840      	ldr	r0, [r0, #4]
   d7c28:	f7ff b874 	b.w	d6d14 <network_listening>

000d7c2c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7c2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7c30:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7c32:	b095      	sub	sp, #84	; 0x54
   d7c34:	4616      	mov	r6, r2
   d7c36:	460d      	mov	r5, r1
   d7c38:	4607      	mov	r7, r0
    IPAddress addr;
   d7c3a:	f7ff fed1 	bl	d79e0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7c3e:	4621      	mov	r1, r4
   d7c40:	2220      	movs	r2, #32
   d7c42:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7c44:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7c46:	f001 ff28 	bl	d9a9a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7c4a:	2340      	movs	r3, #64	; 0x40
   d7c4c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7c4e:	4621      	mov	r1, r4
   d7c50:	466b      	mov	r3, sp
   d7c52:	aa0c      	add	r2, sp, #48	; 0x30
   d7c54:	4630      	mov	r0, r6
   d7c56:	f7fe fea5 	bl	d69a4 <netdb_getaddrinfo>
    if (!r) {
   d7c5a:	4604      	mov	r4, r0
   d7c5c:	2800      	cmp	r0, #0
   d7c5e:	d144      	bne.n	d7cea <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7c60:	4602      	mov	r2, r0
   d7c62:	2101      	movs	r1, #1
   d7c64:	6868      	ldr	r0, [r5, #4]
   d7c66:	f7ff f835 	bl	d6cd4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7c6a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7c6c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7c6e:	4622      	mov	r2, r4
   d7c70:	6868      	ldr	r0, [r5, #4]
   d7c72:	f7ff f82f 	bl	d6cd4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7c76:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7c78:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7c7a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7c7c:	2e00      	cmp	r6, #0
   d7c7e:	d034      	beq.n	d7cea <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7c80:	2900      	cmp	r1, #0
   d7c82:	d132      	bne.n	d7cea <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7c84:	6873      	ldr	r3, [r6, #4]
   d7c86:	2b02      	cmp	r3, #2
   d7c88:	d002      	beq.n	d7c90 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7c8a:	2b0a      	cmp	r3, #10
   d7c8c:	d009      	beq.n	d7ca2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7c8e:	e02a      	b.n	d7ce6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7c90:	f1b8 0f00 	cmp.w	r8, #0
   d7c94:	d027      	beq.n	d7ce6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7c96:	6971      	ldr	r1, [r6, #20]
   d7c98:	4638      	mov	r0, r7
   d7c9a:	3104      	adds	r1, #4
   d7c9c:	f7ff fecd 	bl	d7a3a <_ZN9IPAddressaSEPKh>
   d7ca0:	e020      	b.n	d7ce4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7ca2:	f1b9 0f00 	cmp.w	r9, #0
   d7ca6:	d01e      	beq.n	d7ce6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7ca8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7caa:	2211      	movs	r2, #17
   d7cac:	a801      	add	r0, sp, #4
   d7cae:	f001 fef4 	bl	d9a9a <memset>
                    a.v = 6;
   d7cb2:	2306      	movs	r3, #6
   d7cb4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7cb8:	ad01      	add	r5, sp, #4
   d7cba:	f104 0308 	add.w	r3, r4, #8
   d7cbe:	3418      	adds	r4, #24
   d7cc0:	6818      	ldr	r0, [r3, #0]
   d7cc2:	6859      	ldr	r1, [r3, #4]
   d7cc4:	462a      	mov	r2, r5
   d7cc6:	c203      	stmia	r2!, {r0, r1}
   d7cc8:	3308      	adds	r3, #8
   d7cca:	42a3      	cmp	r3, r4
   d7ccc:	4615      	mov	r5, r2
   d7cce:	d1f7      	bne.n	d7cc0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7cd0:	a901      	add	r1, sp, #4
   d7cd2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7cd4:	ad07      	add	r5, sp, #28
   d7cd6:	f7ff fe91 	bl	d79fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7cdc:	1d3c      	adds	r4, r7, #4
   d7cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ce0:	682b      	ldr	r3, [r5, #0]
   d7ce2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7ce4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7ce6:	69f6      	ldr	r6, [r6, #28]
   d7ce8:	e7c8      	b.n	d7c7c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7cea:	9800      	ldr	r0, [sp, #0]
   d7cec:	f7fe fe52 	bl	d6994 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7cf0:	4638      	mov	r0, r7
   d7cf2:	b015      	add	sp, #84	; 0x54
   d7cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7cf8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7cf8:	4b02      	ldr	r3, [pc, #8]	; (d7d04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7cfa:	4a03      	ldr	r2, [pc, #12]	; (d7d08 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7cfc:	601a      	str	r2, [r3, #0]
   d7cfe:	2200      	movs	r2, #0
   d7d00:	605a      	str	r2, [r3, #4]
   d7d02:	4770      	bx	lr
   d7d04:	2003e440 	.word	0x2003e440
   d7d08:	000dd504 	.word	0x000dd504

000d7d0c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7d0e:	4606      	mov	r6, r0
   d7d10:	460d      	mov	r5, r1
   d7d12:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7d14:	2400      	movs	r4, #0
  while (size--) {
   d7d16:	42bd      	cmp	r5, r7
   d7d18:	d00c      	beq.n	d7d34 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7d1a:	6833      	ldr	r3, [r6, #0]
   d7d1c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7d20:	689b      	ldr	r3, [r3, #8]
   d7d22:	4630      	mov	r0, r6
   d7d24:	4798      	blx	r3
     if (chunk>=0)
   d7d26:	2800      	cmp	r0, #0
   d7d28:	db01      	blt.n	d7d2e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7d2a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7d2c:	e7f3      	b.n	d7d16 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7d2e:	2c00      	cmp	r4, #0
   d7d30:	bf08      	it	eq
   d7d32:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7d34:	4620      	mov	r0, r4
   d7d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7d38 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7d38:	b570      	push	{r4, r5, r6, lr}
   d7d3a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7d3c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7d3e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7d40:	b149      	cbz	r1, d7d56 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7d42:	f002 fe6b 	bl	daa1c <strlen>
   d7d46:	682b      	ldr	r3, [r5, #0]
   d7d48:	4602      	mov	r2, r0
   d7d4a:	4621      	mov	r1, r4
   d7d4c:	4628      	mov	r0, r5
   d7d4e:	68db      	ldr	r3, [r3, #12]
    }
   d7d50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7d54:	4718      	bx	r3
    }
   d7d56:	bd70      	pop	{r4, r5, r6, pc}

000d7d58 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7d58:	6803      	ldr	r3, [r0, #0]
   d7d5a:	689b      	ldr	r3, [r3, #8]
   d7d5c:	4718      	bx	r3

000d7d5e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7d5e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7d60:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7d62:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7d64:	f7ff fff8 	bl	d7d58 <_ZN5Print5printEc>
  n += print('\n');
   d7d68:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d7d6a:	4604      	mov	r4, r0
  n += print('\n');
   d7d6c:	4628      	mov	r0, r5
   d7d6e:	f7ff fff3 	bl	d7d58 <_ZN5Print5printEc>
  return n;
}
   d7d72:	4420      	add	r0, r4
   d7d74:	bd38      	pop	{r3, r4, r5, pc}

000d7d76 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7d76:	b538      	push	{r3, r4, r5, lr}
   d7d78:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7d7a:	f7ff ffdd 	bl	d7d38 <_ZN5Print5writeEPKc>
   d7d7e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d7d80:	4628      	mov	r0, r5
   d7d82:	f7ff ffec 	bl	d7d5e <_ZN5Print7printlnEv>
  return n;
}
   d7d86:	4420      	add	r0, r4
   d7d88:	bd38      	pop	{r3, r4, r5, pc}

000d7d8a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7d8a:	b530      	push	{r4, r5, lr}
   d7d8c:	b08b      	sub	sp, #44	; 0x2c
   d7d8e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7d90:	2100      	movs	r1, #0
   d7d92:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7d96:	2a01      	cmp	r2, #1
   d7d98:	bf98      	it	ls
   d7d9a:	220a      	movls	r2, #10
   d7d9c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7da0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7da4:	fb05 3312 	mls	r3, r5, r2, r3
   d7da8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7dac:	2b09      	cmp	r3, #9
   d7dae:	bf94      	ite	ls
   d7db0:	3330      	addls	r3, #48	; 0x30
   d7db2:	3337      	addhi	r3, #55	; 0x37
   d7db4:	b2db      	uxtb	r3, r3
   d7db6:	4621      	mov	r1, r4
   d7db8:	f804 3901 	strb.w	r3, [r4], #-1
   d7dbc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d7dbe:	2d00      	cmp	r5, #0
   d7dc0:	d1ee      	bne.n	d7da0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7dc2:	f7ff ffb9 	bl	d7d38 <_ZN5Print5writeEPKc>
}
   d7dc6:	b00b      	add	sp, #44	; 0x2c
   d7dc8:	bd30      	pop	{r4, r5, pc}

000d7dca <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7dca:	b510      	push	{r4, lr}
   d7dcc:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7dce:	f7ff f96c 	bl	d70aa <_ZNSt14_Function_baseD1Ev>
   d7dd2:	4620      	mov	r0, r4
   d7dd4:	bd10      	pop	{r4, pc}
	...

000d7dd8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7dd8:	4803      	ldr	r0, [pc, #12]	; (d7de8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7dda:	4a04      	ldr	r2, [pc, #16]	; (d7dec <_GLOBAL__sub_I_RGB+0x14>)
   d7ddc:	4904      	ldr	r1, [pc, #16]	; (d7df0 <_GLOBAL__sub_I_RGB+0x18>)
   d7dde:	2300      	movs	r3, #0
   d7de0:	6083      	str	r3, [r0, #8]
   d7de2:	f000 be09 	b.w	d89f8 <__aeabi_atexit>
   d7de6:	bf00      	nop
   d7de8:	2003e448 	.word	0x2003e448
   d7dec:	2003e064 	.word	0x2003e064
   d7df0:	000d7dcb 	.word	0x000d7dcb

000d7df4 <_ZN8SPIClassD1Ev>:
  Mutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d7df4:	4770      	bx	lr

000d7df6 <_ZN8SPIClassD0Ev>:
   d7df6:	b510      	push	{r4, lr}
   d7df8:	210c      	movs	r1, #12
   d7dfa:	4604      	mov	r4, r0
   d7dfc:	f000 fe01 	bl	d8a02 <_ZdlPvj>
   d7e00:	4620      	mov	r0, r4
   d7e02:	bd10      	pop	{r4, pc}

000d7e04 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d7e04:	2100      	movs	r1, #0
   d7e06:	f7fe bde5 	b.w	d69d4 <HAL_SPI_Acquire>

000d7e0a <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d7e0a:	2100      	movs	r1, #0
   d7e0c:	f7fe bdea 	b.w	d69e4 <HAL_SPI_Release>

000d7e10 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7e10:	b510      	push	{r4, lr}
   d7e12:	4b05      	ldr	r3, [pc, #20]	; (d7e28 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d7e14:	6003      	str	r3, [r0, #0]
   d7e16:	4604      	mov	r4, r0
{
    _spi = spi;
   d7e18:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d7e1a:	4608      	mov	r0, r1
   d7e1c:	f7fe fdca 	bl	d69b4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7e20:	2300      	movs	r3, #0
   d7e22:	60a3      	str	r3, [r4, #8]
}
   d7e24:	4620      	mov	r0, r4
   d7e26:	bd10      	pop	{r4, pc}
   d7e28:	000dd538 	.word	0x000dd538

000d7e2c <_ZN8SPIClass9isEnabledEv>:
{
    // TODO: Implement
}

bool SPIClass::isEnabled()
{
   d7e2c:	b538      	push	{r3, r4, r5, lr}
   d7e2e:	4604      	mov	r4, r0
    bool result = false;

    if (!lock())
   d7e30:	7900      	ldrb	r0, [r0, #4]
   d7e32:	f7ff ffe7 	bl	d7e04 <_ZN8SPIClass4lockEv.isra.0>
   d7e36:	b938      	cbnz	r0, d7e48 <_ZN8SPIClass9isEnabledEv+0x1c>
    {
        result = HAL_SPI_Is_Enabled(_spi);
   d7e38:	7920      	ldrb	r0, [r4, #4]
   d7e3a:	f7fe fdc3 	bl	d69c4 <HAL_SPI_Is_Enabled>
   d7e3e:	4605      	mov	r5, r0
        unlock();
   d7e40:	7920      	ldrb	r0, [r4, #4]
   d7e42:	f7ff ffe2 	bl	d7e0a <_ZN8SPIClass6unlockEv.isra.1>
   d7e46:	e000      	b.n	d7e4a <_ZN8SPIClass9isEnabledEv+0x1e>
    // TODO: Implement
}

bool SPIClass::isEnabled()
{
    bool result = false;
   d7e48:	2500      	movs	r5, #0
    {
        result = HAL_SPI_Is_Enabled(_spi);
        unlock();
    }
    return result;
}
   d7e4a:	4628      	mov	r0, r5
   d7e4c:	bd38      	pop	{r3, r4, r5, pc}

000d7e4e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7e4e:	b510      	push	{r4, lr}
   d7e50:	4604      	mov	r4, r0
{
	free(buffer);
   d7e52:	6800      	ldr	r0, [r0, #0]
   d7e54:	f7fe ff7e 	bl	d6d54 <free>
}
   d7e58:	4620      	mov	r0, r4
   d7e5a:	bd10      	pop	{r4, pc}

000d7e5c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7e5c:	b510      	push	{r4, lr}
   d7e5e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7e60:	6800      	ldr	r0, [r0, #0]
   d7e62:	b108      	cbz	r0, d7e68 <_ZN6String10invalidateEv+0xc>
   d7e64:	f7fe ff76 	bl	d6d54 <free>
	buffer = NULL;
   d7e68:	2300      	movs	r3, #0
   d7e6a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7e6c:	60a3      	str	r3, [r4, #8]
   d7e6e:	6063      	str	r3, [r4, #4]
   d7e70:	bd10      	pop	{r4, pc}

000d7e72 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7e72:	b538      	push	{r3, r4, r5, lr}
   d7e74:	4604      	mov	r4, r0
   d7e76:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7e78:	6800      	ldr	r0, [r0, #0]
   d7e7a:	3101      	adds	r1, #1
   d7e7c:	f7fe ff72 	bl	d6d64 <realloc>
	if (newbuffer) {
   d7e80:	b110      	cbz	r0, d7e88 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7e82:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7e86:	2001      	movs	r0, #1
	}
	return 0;
}
   d7e88:	bd38      	pop	{r3, r4, r5, pc}

000d7e8a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7e8a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7e8c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7e8e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7e90:	b113      	cbz	r3, d7e98 <_ZN6String7reserveEj+0xe>
   d7e92:	6843      	ldr	r3, [r0, #4]
   d7e94:	428b      	cmp	r3, r1
   d7e96:	d207      	bcs.n	d7ea8 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7e98:	4620      	mov	r0, r4
   d7e9a:	f7ff ffea 	bl	d7e72 <_ZN6String12changeBufferEj>
   d7e9e:	b120      	cbz	r0, d7eaa <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7ea0:	68a3      	ldr	r3, [r4, #8]
   d7ea2:	b90b      	cbnz	r3, d7ea8 <_ZN6String7reserveEj+0x1e>
   d7ea4:	6822      	ldr	r2, [r4, #0]
   d7ea6:	7013      	strb	r3, [r2, #0]
   d7ea8:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7eaa:	bd10      	pop	{r4, pc}

000d7eac <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7eac:	b570      	push	{r4, r5, r6, lr}
   d7eae:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7eb0:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7eb2:	4604      	mov	r4, r0
   d7eb4:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d7eb6:	f7ff ffe8 	bl	d7e8a <_ZN6String7reserveEj>
   d7eba:	b918      	cbnz	r0, d7ec4 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7ebc:	4620      	mov	r0, r4
   d7ebe:	f7ff ffcd 	bl	d7e5c <_ZN6String10invalidateEv>
		return *this;
   d7ec2:	e009      	b.n	d7ed8 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d7ec4:	462a      	mov	r2, r5
   d7ec6:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7ec8:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7eca:	6820      	ldr	r0, [r4, #0]
   d7ecc:	f001 fdda 	bl	d9a84 <memcpy>
	buffer[len] = 0;
   d7ed0:	6822      	ldr	r2, [r4, #0]
   d7ed2:	68a3      	ldr	r3, [r4, #8]
   d7ed4:	2100      	movs	r1, #0
   d7ed6:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7ed8:	4620      	mov	r0, r4
   d7eda:	bd70      	pop	{r4, r5, r6, pc}

000d7edc <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7edc:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7ede:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7ee0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7ee2:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7ee4:	6043      	str	r3, [r0, #4]
	len = 0;
   d7ee6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7ee8:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7eea:	460d      	mov	r5, r1
   d7eec:	b139      	cbz	r1, d7efe <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7eee:	4608      	mov	r0, r1
   d7ef0:	f002 fd94 	bl	daa1c <strlen>
   d7ef4:	4629      	mov	r1, r5
   d7ef6:	4602      	mov	r2, r0
   d7ef8:	4620      	mov	r0, r4
   d7efa:	f7ff ffd7 	bl	d7eac <_ZN6String4copyEPKcj>
}
   d7efe:	4620      	mov	r0, r4
   d7f00:	bd38      	pop	{r3, r4, r5, pc}

000d7f02 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7f02:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d7f04:	b510      	push	{r4, lr}
   d7f06:	460b      	mov	r3, r1
   d7f08:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7f0a:	d007      	beq.n	d7f1c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7f0c:	6809      	ldr	r1, [r1, #0]
   d7f0e:	b119      	cbz	r1, d7f18 <_ZN6StringaSERKS_+0x16>
   d7f10:	689a      	ldr	r2, [r3, #8]
   d7f12:	f7ff ffcb 	bl	d7eac <_ZN6String4copyEPKcj>
   d7f16:	e001      	b.n	d7f1c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d7f18:	f7ff ffa0 	bl	d7e5c <_ZN6String10invalidateEv>

	return *this;
}
   d7f1c:	4620      	mov	r0, r4
   d7f1e:	bd10      	pop	{r4, pc}

000d7f20 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7f20:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7f22:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7f24:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7f26:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7f28:	6043      	str	r3, [r0, #4]
	len = 0;
   d7f2a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7f2c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d7f2e:	f7ff ffe8 	bl	d7f02 <_ZN6StringaSERKS_>
}
   d7f32:	4620      	mov	r0, r4
   d7f34:	bd10      	pop	{r4, pc}

000d7f36 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7f36:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7f38:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7f3a:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7f3c:	b912      	cbnz	r2, d7f44 <_ZNK6String6equalsEPKc+0xe>
   d7f3e:	b919      	cbnz	r1, d7f48 <_ZNK6String6equalsEPKc+0x12>
   d7f40:	2001      	movs	r0, #1
   d7f42:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d7f44:	b911      	cbnz	r1, d7f4c <_ZNK6String6equalsEPKc+0x16>
   d7f46:	6803      	ldr	r3, [r0, #0]
   d7f48:	7818      	ldrb	r0, [r3, #0]
   d7f4a:	e002      	b.n	d7f52 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d7f4c:	6800      	ldr	r0, [r0, #0]
   d7f4e:	f002 f823 	bl	d9f98 <strcmp>
   d7f52:	fab0 f080 	clz	r0, r0
   d7f56:	0940      	lsrs	r0, r0, #5
}
   d7f58:	bd08      	pop	{r3, pc}

000d7f5a <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d7f5a:	b570      	push	{r4, r5, r6, lr}
   d7f5c:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d7f5e:	b19a      	cbz	r2, d7f88 <_ZNK6String8getBytesEPhjj+0x2e>
   d7f60:	b191      	cbz	r1, d7f88 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d7f62:	6885      	ldr	r5, [r0, #8]
   d7f64:	429d      	cmp	r5, r3
   d7f66:	d802      	bhi.n	d7f6e <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d7f68:	2300      	movs	r3, #0
   d7f6a:	700b      	strb	r3, [r1, #0]
		return;
   d7f6c:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d7f6e:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d7f70:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d7f72:	6801      	ldr	r1, [r0, #0]
   d7f74:	42ac      	cmp	r4, r5
   d7f76:	bf28      	it	cs
   d7f78:	462c      	movcs	r4, r5
   d7f7a:	4419      	add	r1, r3
   d7f7c:	4622      	mov	r2, r4
   d7f7e:	4630      	mov	r0, r6
   d7f80:	f002 fd69 	bl	daa56 <strncpy>
	buf[n] = 0;
   d7f84:	2300      	movs	r3, #0
   d7f86:	5533      	strb	r3, [r6, r4]
   d7f88:	bd70      	pop	{r4, r5, r6, pc}

000d7f8a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7f8a:	b510      	push	{r4, lr}
   d7f8c:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7f8e:	6800      	ldr	r0, [r0, #0]
   d7f90:	b118      	cbz	r0, d7f9a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d7f92:	f7fe fedf 	bl	d6d54 <free>
            wakeupSource_ = nullptr;
   d7f96:	2300      	movs	r3, #0
   d7f98:	6023      	str	r3, [r4, #0]
   d7f9a:	bd10      	pop	{r4, pc}

000d7f9c <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7f9c:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d7f9e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d7fa2:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d7fa4:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7fa6:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d7fa8:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d7fac:	f8c0 2006 	str.w	r2, [r0, #6]
   d7fb0:	889b      	ldrh	r3, [r3, #4]
   d7fb2:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7fb4:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d7fb6:	f7ff ffe8 	bl	d7f8a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d7fba:	682b      	ldr	r3, [r5, #0]
   d7fbc:	b113      	cbz	r3, d7fc4 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d7fbe:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d7fc0:	2300      	movs	r3, #0
   d7fc2:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d7fc4:	4620      	mov	r0, r4
   d7fc6:	bd38      	pop	{r3, r4, r5, pc}

000d7fc8 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d7fc8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   d7fcc:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d7fce:	b90b      	cbnz	r3, d7fd4 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   d7fd0:	680a      	ldr	r2, [r1, #0]
   d7fd2:	b19a      	cbz	r2, d7ffc <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   d7fd4:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d7fd6:	b15c      	cbz	r4, d7ff0 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d7fd8:	88a2      	ldrh	r2, [r4, #4]
   d7fda:	2a01      	cmp	r2, #1
   d7fdc:	d003      	beq.n	d7fe6 <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   d7fde:	2a04      	cmp	r2, #4
   d7fe0:	d106      	bne.n	d7ff0 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d7fe2:	2202      	movs	r2, #2
   d7fe4:	e005      	b.n	d7ff2 <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d7fe6:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d7fe8:	814c      	strh	r4, [r1, #10]
   d7fea:	718a      	strb	r2, [r1, #6]
   d7fec:	810b      	strh	r3, [r1, #8]
                    break;
   d7fee:	e005      	b.n	d7ffc <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d7ff0:	2204      	movs	r2, #4
   d7ff2:	810b      	strh	r3, [r1, #8]
   d7ff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7ff8:	718a      	strb	r2, [r1, #6]
   d7ffa:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d7ffc:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d8000:	6003      	str	r3, [r0, #0]
   d8002:	888b      	ldrh	r3, [r1, #4]
   d8004:	8083      	strh	r3, [r0, #4]
    }
   d8006:	bd10      	pop	{r4, pc}

000d8008 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d8008:	4601      	mov	r1, r0
   d800a:	2200      	movs	r2, #0
   d800c:	208c      	movs	r0, #140	; 0x8c
   d800e:	f7fe bbc1 	b.w	d6794 <HAL_Core_System_Reset_Ex>

000d8012 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d8012:	2000      	movs	r0, #0
   d8014:	f7ff bff8 	b.w	d8008 <_ZN11SystemClass5resetEm>

000d8018 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d8018:	b530      	push	{r4, r5, lr}
   d801a:	4604      	mov	r4, r0
   d801c:	b085      	sub	sp, #20
   d801e:	4608      	mov	r0, r1
   d8020:	4611      	mov	r1, r2
   d8022:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d8024:	2300      	movs	r3, #0
   d8026:	f7fe fd7d 	bl	d6b24 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   d802a:	4d0d      	ldr	r5, [pc, #52]	; (d8060 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d802c:	f8ad 000c 	strh.w	r0, [sp, #12]
   d8030:	2300      	movs	r3, #0
   d8032:	a901      	add	r1, sp, #4
   d8034:	9301      	str	r3, [sp, #4]
   d8036:	f8ad 3008 	strh.w	r3, [sp, #8]
   d803a:	f88d 300a 	strb.w	r3, [sp, #10]
   d803e:	4628      	mov	r0, r5
   d8040:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8044:	f8ad 300e 	strh.w	r3, [sp, #14]
   d8048:	f7ff ffa8 	bl	d7f9c <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d804c:	a801      	add	r0, sp, #4
   d804e:	f7ff ff9c 	bl	d7f8a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d8052:	4620      	mov	r0, r4
   d8054:	4629      	mov	r1, r5
   d8056:	f7ff ffb7 	bl	d7fc8 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d805a:	4620      	mov	r0, r4
   d805c:	b005      	add	sp, #20
   d805e:	bd30      	pop	{r4, r5, pc}
   d8060:	2003e458 	.word	0x2003e458

000d8064 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d8064:	b510      	push	{r4, lr}
   d8066:	2400      	movs	r4, #0
   d8068:	7004      	strb	r4, [r0, #0]
   d806a:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d806c:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d806e:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d8072:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d8074:	dd07      	ble.n	d8086 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d8076:	3901      	subs	r1, #1
   d8078:	4299      	cmp	r1, r3
   d807a:	d209      	bcs.n	d8090 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d807c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d8080:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d8082:	2301      	movs	r3, #1
   d8084:	e001      	b.n	d808a <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d8086:	d102      	bne.n	d808e <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d8088:	2302      	movs	r3, #2
   d808a:	7003      	strb	r3, [r0, #0]
   d808c:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d808e:	8041      	strh	r1, [r0, #2]
    }
}
   d8090:	bd10      	pop	{r4, pc}
	...

000d8094 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d8094:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8096:	b08b      	sub	sp, #44	; 0x2c
   d8098:	4617      	mov	r7, r2
   d809a:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d809c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d809e:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d80a0:	460e      	mov	r6, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d80a2:	2400      	movs	r4, #0
   d80a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d80a6:	9402      	str	r4, [sp, #8]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d80a8:	4605      	mov	r5, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d80aa:	9300      	str	r3, [sp, #0]
   d80ac:	4639      	mov	r1, r7
   d80ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d80b0:	4630      	mov	r0, r6
   d80b2:	f7fe fd7b 	bl	d6bac <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
   d80b6:	463b      	mov	r3, r7
   d80b8:	4632      	mov	r2, r6
   d80ba:	4601      	mov	r1, r0
   d80bc:	a805      	add	r0, sp, #20
   d80be:	f7ff ffd1 	bl	d8064 <_ZN11SleepResultC1EiPKtj>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d80c2:	9407      	str	r4, [sp, #28]
   d80c4:	f8ad 4020 	strh.w	r4, [sp, #32]
   d80c8:	4c0d      	ldr	r4, [pc, #52]	; (d8100 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
   d80ca:	f89d 1014 	ldrb.w	r1, [sp, #20]
   d80ce:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   d80d2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d80d6:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   d80da:	4620      	mov	r0, r4
   d80dc:	a907      	add	r1, sp, #28
   d80de:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   d80e2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   d80e6:	f7ff ff59 	bl	d7f9c <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d80ea:	a807      	add	r0, sp, #28
   d80ec:	f7ff ff4d 	bl	d7f8a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d80f0:	4628      	mov	r0, r5
   d80f2:	4621      	mov	r1, r4
   d80f4:	f7ff ff68 	bl	d7fc8 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d80f8:	4628      	mov	r0, r5
   d80fa:	b00b      	add	sp, #44	; 0x2c
   d80fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d80fe:	bf00      	nop
   d8100:	2003e458 	.word	0x2003e458

000d8104 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8104:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8106:	4c09      	ldr	r4, [pc, #36]	; (d812c <_GLOBAL__sub_I_System+0x28>)
   d8108:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d810a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d810e:	6020      	str	r0, [r4, #0]
   d8110:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8112:	71a0      	strb	r0, [r4, #6]
   d8114:	8120      	strh	r0, [r4, #8]
   d8116:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8118:	f7fe fcf4 	bl	d6b04 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d811c:	4620      	mov	r0, r4
   d811e:	4a04      	ldr	r2, [pc, #16]	; (d8130 <_GLOBAL__sub_I_System+0x2c>)
   d8120:	4904      	ldr	r1, [pc, #16]	; (d8134 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d8126:	f000 bc67 	b.w	d89f8 <__aeabi_atexit>
   d812a:	bf00      	nop
   d812c:	2003e458 	.word	0x2003e458
   d8130:	2003e064 	.word	0x2003e064
   d8134:	000d41e1 	.word	0x000d41e1

000d8138 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d8138:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d813a:	4b14      	ldr	r3, [pc, #80]	; (d818c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d813c:	4f14      	ldr	r7, [pc, #80]	; (d8190 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d813e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d8140:	4b14      	ldr	r3, [pc, #80]	; (d8194 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d8142:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d8144:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d8146:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d8148:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d814a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d814c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d814e:	d01b      	beq.n	d8188 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d8150:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d8152:	ad01      	add	r5, sp, #4
   d8154:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d8158:	f001 fb98 	bl	d988c <localtime>
	calendar_time->tm_year += 1900;
   d815c:	6943      	ldr	r3, [r0, #20]
   d815e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d8162:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d8164:	4604      	mov	r4, r0
   d8166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d816a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d816c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d816e:	f8d4 e000 	ldr.w	lr, [r4]
   d8172:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8176:	ad01      	add	r5, sp, #4
   d8178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d817a:	4c07      	ldr	r4, [pc, #28]	; (d8198 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d817c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d817e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d8182:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8184:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d8188:	b00b      	add	sp, #44	; 0x2c
   d818a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d818c:	2003e498 	.word	0x2003e498
   d8190:	2003e494 	.word	0x2003e494
   d8194:	2003e490 	.word	0x2003e490
   d8198:	2003e464 	.word	0x2003e464

000d819c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d819c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d819e:	2000      	movs	r0, #0
   d81a0:	f7fe fd68 	bl	d6c74 <spark_sync_time_pending>
   d81a4:	b128      	cbz	r0, d81b2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d81a6:	f7fe fd3d 	bl	d6c24 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d81aa:	f080 0001 	eor.w	r0, r0, #1
   d81ae:	b2c0      	uxtb	r0, r0
   d81b0:	bd08      	pop	{r3, pc}
   d81b2:	2001      	movs	r0, #1
    }
   d81b4:	bd08      	pop	{r3, pc}
	...

000d81b8 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   d81b8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d81ba:	f7ff ffbd 	bl	d8138 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   d81be:	4b01      	ldr	r3, [pc, #4]	; (d81c4 <_ZN9TimeClass4hourEl+0xc>)
   d81c0:	6898      	ldr	r0, [r3, #8]
   d81c2:	bd08      	pop	{r3, pc}
   d81c4:	2003e464 	.word	0x2003e464

000d81c8 <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   d81c8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d81ca:	f7ff ffb5 	bl	d8138 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
   d81ce:	4b01      	ldr	r3, [pc, #4]	; (d81d4 <_ZN9TimeClass3dayEl+0xc>)
   d81d0:	68d8      	ldr	r0, [r3, #12]
   d81d2:	bd08      	pop	{r3, pc}
   d81d4:	2003e464 	.word	0x2003e464

000d81d8 <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   d81d8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d81da:	f7ff ffad 	bl	d8138 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   d81de:	4b02      	ldr	r3, [pc, #8]	; (d81e8 <_ZN9TimeClass7weekdayEl+0x10>)
   d81e0:	6998      	ldr	r0, [r3, #24]
}
   d81e2:	3001      	adds	r0, #1
   d81e4:	bd08      	pop	{r3, pc}
   d81e6:	bf00      	nop
   d81e8:	2003e464 	.word	0x2003e464

000d81ec <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d81ec:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d81ee:	f7ff ffa3 	bl	d8138 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d81f2:	4b02      	ldr	r3, [pc, #8]	; (d81fc <_ZN9TimeClass5monthEl+0x10>)
   d81f4:	6918      	ldr	r0, [r3, #16]
}
   d81f6:	3001      	adds	r0, #1
   d81f8:	bd08      	pop	{r3, pc}
   d81fa:	bf00      	nop
   d81fc:	2003e464 	.word	0x2003e464

000d8200 <_ZN9TimeClass5localEv>:
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
}

time_t TimeClass::local()
{
   d8200:	b508      	push	{r3, lr}
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
   d8202:	f7fe faef 	bl	d67e4 <HAL_RTC_Get_UnixTime>
   d8206:	4b03      	ldr	r3, [pc, #12]	; (d8214 <_ZN9TimeClass5localEv+0x14>)
   d8208:	681b      	ldr	r3, [r3, #0]
   d820a:	4418      	add	r0, r3
   d820c:	4b02      	ldr	r3, [pc, #8]	; (d8218 <_ZN9TimeClass5localEv+0x18>)
   d820e:	681b      	ldr	r3, [r3, #0]
}
   d8210:	4418      	add	r0, r3
   d8212:	bd08      	pop	{r3, pc}
   d8214:	2003e498 	.word	0x2003e498
   d8218:	2003e490 	.word	0x2003e490

000d821c <_ZN9TimeClass4zoneEf>:

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d821c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d8220:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d8224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8228:	d40f      	bmi.n	d824a <_ZN9TimeClass4zoneEf+0x2e>
   d822a:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d822e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d8232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8236:	dc08      	bgt.n	d824a <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d8238:	eddf 7a04 	vldr	s15, [pc, #16]	; d824c <_ZN9TimeClass4zoneEf+0x30>
   d823c:	4b04      	ldr	r3, [pc, #16]	; (d8250 <_ZN9TimeClass4zoneEf+0x34>)
   d823e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8242:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d8246:	ed83 0a00 	vstr	s0, [r3]
   d824a:	4770      	bx	lr
   d824c:	45610000 	.word	0x45610000
   d8250:	2003e498 	.word	0x2003e498

000d8254 <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   d8254:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d8258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d825c:	d40f      	bmi.n	d827e <_ZN9TimeClass12setDSTOffsetEf+0x2a>
   d825e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d8262:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d8266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d826a:	dc08      	bgt.n	d827e <_ZN9TimeClass12setDSTOffsetEf+0x2a>
    {
        return;
    }
    dst_cache = offset * 3600;
   d826c:	eddf 7a04 	vldr	s15, [pc, #16]	; d8280 <_ZN9TimeClass12setDSTOffsetEf+0x2c>
   d8270:	4b04      	ldr	r3, [pc, #16]	; (d8284 <_ZN9TimeClass12setDSTOffsetEf+0x30>)
   d8272:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8276:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d827a:	ed83 0a00 	vstr	s0, [r3]
   d827e:	4770      	bx	lr
   d8280:	45610000 	.word	0x45610000
   d8284:	2003df70 	.word	0x2003df70

000d8288 <_ZN9TimeClass8beginDSTEv>:
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   d8288:	4b02      	ldr	r3, [pc, #8]	; (d8294 <_ZN9TimeClass8beginDSTEv+0xc>)
   d828a:	681a      	ldr	r2, [r3, #0]
   d828c:	4b02      	ldr	r3, [pc, #8]	; (d8298 <_ZN9TimeClass8beginDSTEv+0x10>)
   d828e:	601a      	str	r2, [r3, #0]
   d8290:	4770      	bx	lr
   d8292:	bf00      	nop
   d8294:	2003df70 	.word	0x2003df70
   d8298:	2003e490 	.word	0x2003e490

000d829c <_ZN9TimeClass6endDSTEv>:
}

void TimeClass::endDST()
{
    dst_current_cache = 0;
   d829c:	4b01      	ldr	r3, [pc, #4]	; (d82a4 <_ZN9TimeClass6endDSTEv+0x8>)
   d829e:	2200      	movs	r2, #0
   d82a0:	601a      	str	r2, [r3, #0]
   d82a2:	4770      	bx	lr
   d82a4:	2003e490 	.word	0x2003e490

000d82a8 <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d82a8:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
   d82aa:	f7fe faa3 	bl	d67f4 <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d82ae:	2200      	movs	r2, #0
   d82b0:	4611      	mov	r1, r2
   d82b2:	4610      	mov	r0, r2
}
   d82b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d82b8:	f7fe bc5c 	b.w	d6b74 <system_notify_time_changed>

000d82bc <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d82bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d82be:	4b0e      	ldr	r3, [pc, #56]	; (d82f8 <_ZN9TimeClass7timeStrEl+0x3c>)
   d82c0:	681b      	ldr	r3, [r3, #0]
   d82c2:	4419      	add	r1, r3
   d82c4:	4b0d      	ldr	r3, [pc, #52]	; (d82fc <_ZN9TimeClass7timeStrEl+0x40>)
   d82c6:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d82c8:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d82ca:	a802      	add	r0, sp, #8
   d82cc:	4419      	add	r1, r3
   d82ce:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d82d2:	f001 fadb 	bl	d988c <localtime>
        char* ascstr = asctime(calendar_time);
   d82d6:	f001 f9e1 	bl	d969c <asctime>
   d82da:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d82dc:	f002 fb9e 	bl	daa1c <strlen>
        ascstr[len-1] = 0; // remove final newline
   d82e0:	4428      	add	r0, r5
   d82e2:	2300      	movs	r3, #0
   d82e4:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d82e8:	4629      	mov	r1, r5
   d82ea:	4620      	mov	r0, r4
   d82ec:	f7ff fdf6 	bl	d7edc <_ZN6StringC1EPK19__FlashStringHelper>
}
   d82f0:	4620      	mov	r0, r4
   d82f2:	b003      	add	sp, #12
   d82f4:	bd30      	pop	{r4, r5, pc}
   d82f6:	bf00      	nop
   d82f8:	2003e498 	.word	0x2003e498
   d82fc:	2003e490 	.word	0x2003e490

000d8300 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d8300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8304:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d8306:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d8308:	4607      	mov	r7, r0
   d830a:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d830c:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d830e:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d8310:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d8312:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d8314:	f002 fb9f 	bl	daa56 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d8318:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d831a:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d831c:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d8320:	f002 fb7c 	bl	daa1c <strlen>
   d8324:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d8326:	b925      	cbnz	r5, d8332 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
   d8328:	4924      	ldr	r1, [pc, #144]	; (d83bc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
   d832a:	a803      	add	r0, sp, #12
   d832c:	f001 fe3e 	bl	d9fac <strcpy>
   d8330:	e013      	b.n	d835a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d8332:	213c      	movs	r1, #60	; 0x3c
   d8334:	fb95 f2f1 	sdiv	r2, r5, r1
   d8338:	2a00      	cmp	r2, #0
   d833a:	bfb8      	it	lt
   d833c:	4252      	neglt	r2, r2
   d833e:	fb92 f3f1 	sdiv	r3, r2, r1
   d8342:	fb01 2213 	mls	r2, r1, r3, r2
   d8346:	9200      	str	r2, [sp, #0]
   d8348:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d834c:	4a1c      	ldr	r2, [pc, #112]	; (d83c0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
   d834e:	fb95 f3f3 	sdiv	r3, r5, r3
   d8352:	2110      	movs	r1, #16
   d8354:	a803      	add	r0, sp, #12
   d8356:	f7fe fd1d 	bl	d6d94 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d835a:	4625      	mov	r5, r4
   d835c:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d835e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   d8362:	45b2      	cmp	sl, r6
   d8364:	d91b      	bls.n	d839e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d8366:	782b      	ldrb	r3, [r5, #0]
   d8368:	2b25      	cmp	r3, #37	; 0x25
   d836a:	d116      	bne.n	d839a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
   d836c:	786b      	ldrb	r3, [r5, #1]
   d836e:	2b7a      	cmp	r3, #122	; 0x7a
   d8370:	d113      	bne.n	d839a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
   d8372:	a803      	add	r0, sp, #12
   d8374:	f002 fb52 	bl	daa1c <strlen>
   d8378:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d837a:	4430      	add	r0, r6
   d837c:	ebc6 020a 	rsb	r2, r6, sl
   d8380:	1ca9      	adds	r1, r5, #2
   d8382:	4420      	add	r0, r4
   d8384:	f001 fb7e 	bl	d9a84 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d8388:	4642      	mov	r2, r8
   d838a:	a903      	add	r1, sp, #12
   d838c:	4628      	mov	r0, r5
   d838e:	f001 fb79 	bl	d9a84 <memcpy>
            len = strlen(format_str);
   d8392:	4620      	mov	r0, r4
   d8394:	f002 fb42 	bl	daa1c <strlen>
   d8398:	4680      	mov	r8, r0
   d839a:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d839c:	e7de      	b.n	d835c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d839e:	464b      	mov	r3, r9
   d83a0:	4622      	mov	r2, r4
   d83a2:	2132      	movs	r1, #50	; 0x32
   d83a4:	a807      	add	r0, sp, #28
   d83a6:	f001 fe85 	bl	da0b4 <strftime>
    return String(buf);
   d83aa:	a907      	add	r1, sp, #28
   d83ac:	4638      	mov	r0, r7
   d83ae:	f7ff fd95 	bl	d7edc <_ZN6StringC1EPK19__FlashStringHelper>
}
   d83b2:	4638      	mov	r0, r7
   d83b4:	b024      	add	sp, #144	; 0x90
   d83b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d83ba:	bf00      	nop
   d83bc:	000ddb35 	.word	0x000ddb35
   d83c0:	000dd540 	.word	0x000dd540

000d83c4 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d83c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d83c6:	4605      	mov	r5, r0
   d83c8:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d83ca:	461c      	mov	r4, r3
   d83cc:	b913      	cbnz	r3, d83d4 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d83ce:	4b12      	ldr	r3, [pc, #72]	; (d8418 <_ZN9TimeClass6formatElPKc+0x54>)
   d83d0:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d83d2:	b12c      	cbz	r4, d83e0 <_ZN9TimeClass6formatElPKc+0x1c>
   d83d4:	4b11      	ldr	r3, [pc, #68]	; (d841c <_ZN9TimeClass6formatElPKc+0x58>)
   d83d6:	4620      	mov	r0, r4
   d83d8:	6819      	ldr	r1, [r3, #0]
   d83da:	f001 fddd 	bl	d9f98 <strcmp>
   d83de:	b920      	cbnz	r0, d83ea <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d83e0:	9901      	ldr	r1, [sp, #4]
   d83e2:	4628      	mov	r0, r5
   d83e4:	f7ff ff6a 	bl	d82bc <_ZN9TimeClass7timeStrEl>
   d83e8:	e013      	b.n	d8412 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d83ea:	4f0d      	ldr	r7, [pc, #52]	; (d8420 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d83ec:	9a01      	ldr	r2, [sp, #4]
   d83ee:	683b      	ldr	r3, [r7, #0]
   d83f0:	4e0c      	ldr	r6, [pc, #48]	; (d8424 <_ZN9TimeClass6formatElPKc+0x60>)
   d83f2:	441a      	add	r2, r3
   d83f4:	6833      	ldr	r3, [r6, #0]
   d83f6:	a802      	add	r0, sp, #8
   d83f8:	4413      	add	r3, r2
   d83fa:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d83fe:	f001 fa45 	bl	d988c <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d8402:	683a      	ldr	r2, [r7, #0]
   d8404:	6833      	ldr	r3, [r6, #0]
   d8406:	4601      	mov	r1, r0
   d8408:	4413      	add	r3, r2
   d840a:	4628      	mov	r0, r5
   d840c:	4622      	mov	r2, r4
   d840e:	f7ff ff77 	bl	d8300 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d8412:	4628      	mov	r0, r5
   d8414:	b003      	add	sp, #12
   d8416:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8418:	2003e48c 	.word	0x2003e48c
   d841c:	2003df74 	.word	0x2003df74
   d8420:	2003e498 	.word	0x2003e498
   d8424:	2003e490 	.word	0x2003e490

000d8428 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d8428:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d842a:	2000      	movs	r0, #0
   d842c:	f7fe f9ea 	bl	d6804 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d8430:	4604      	mov	r4, r0
   d8432:	b968      	cbnz	r0, d8450 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8434:	f7fe fb5e 	bl	d6af4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8438:	2801      	cmp	r0, #1
   d843a:	d10b      	bne.n	d8454 <_ZN9TimeClass7isValidEv+0x2c>
   d843c:	4620      	mov	r0, r4
   d843e:	f7fe fb91 	bl	d6b64 <system_thread_get_state>
   d8442:	b938      	cbnz	r0, d8454 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d8444:	f7ff feaa 	bl	d819c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8448:	b930      	cbnz	r0, d8458 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d844a:	f7fe fbd3 	bl	d6bf4 <spark_process>
   d844e:	e7f9      	b.n	d8444 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d8450:	2001      	movs	r0, #1
   d8452:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d8454:	2000      	movs	r0, #0
   d8456:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d8458:	f7ff fea0 	bl	d819c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d845c:	2000      	movs	r0, #0
   d845e:	f7fe f9d1 	bl	d6804 <HAL_RTC_Time_Is_Valid>
   d8462:	3000      	adds	r0, #0
   d8464:	bf18      	it	ne
   d8466:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d8468:	bd10      	pop	{r4, pc}

000d846a <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d846a:	b508      	push	{r3, lr}
    (void)isValid();
   d846c:	f7ff ffdc 	bl	d8428 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d8470:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d8474:	f7fe b9b6 	b.w	d67e4 <HAL_RTC_Get_UnixTime>

000d8478 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d8478:	b508      	push	{r3, lr}
	return hour(now());
   d847a:	f7ff fff6 	bl	d846a <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d847e:	f7ff fe5b 	bl	d8138 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d8482:	4b01      	ldr	r3, [pc, #4]	; (d8488 <_ZN9TimeClass4hourEv+0x10>)
   d8484:	6898      	ldr	r0, [r3, #8]
   d8486:	bd08      	pop	{r3, pc}
   d8488:	2003e464 	.word	0x2003e464

000d848c <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d848c:	b508      	push	{r3, lr}
	return minute(now());
   d848e:	f7ff ffec 	bl	d846a <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d8492:	f7ff fe51 	bl	d8138 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d8496:	4b01      	ldr	r3, [pc, #4]	; (d849c <_ZN9TimeClass6minuteEv+0x10>)
   d8498:	6858      	ldr	r0, [r3, #4]
   d849a:	bd08      	pop	{r3, pc}
   d849c:	2003e464 	.word	0x2003e464

000d84a0 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   d84a0:	b508      	push	{r3, lr}
	return day(now());
   d84a2:	f7ff ffe2 	bl	d846a <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d84a6:	f7ff fe47 	bl	d8138 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   d84aa:	4b01      	ldr	r3, [pc, #4]	; (d84b0 <_ZN9TimeClass3dayEv+0x10>)
   d84ac:	68d8      	ldr	r0, [r3, #12]
   d84ae:	bd08      	pop	{r3, pc}
   d84b0:	2003e464 	.word	0x2003e464

000d84b4 <_ZN9TimeClass7weekdayEv>:
	return calendar_time_cache.tm_mday;
}

/* the current weekday */
int TimeClass::weekday()
{
   d84b4:	b508      	push	{r3, lr}
	return weekday(now());
   d84b6:	f7ff ffd8 	bl	d846a <_ZN9TimeClass3nowEv>
}
   d84ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* the current weekday */
int TimeClass::weekday()
{
	return weekday(now());
   d84be:	f7ff be8b 	b.w	d81d8 <_ZN9TimeClass7weekdayEl>

000d84c2 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   d84c2:	b508      	push	{r3, lr}
	return month(now());
   d84c4:	f7ff ffd1 	bl	d846a <_ZN9TimeClass3nowEv>
}
   d84c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   d84cc:	f7ff be8e 	b.w	d81ec <_ZN9TimeClass5monthEl>

000d84d0 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d84d0:	b508      	push	{r3, lr}
	return year(now());
   d84d2:	f7ff ffca 	bl	d846a <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d84d6:	f7ff fe2f 	bl	d8138 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d84da:	4b01      	ldr	r3, [pc, #4]	; (d84e0 <_ZN9TimeClass4yearEv+0x10>)
   d84dc:	6958      	ldr	r0, [r3, #20]
   d84de:	bd08      	pop	{r3, pc}
   d84e0:	2003e464 	.word	0x2003e464

000d84e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d84e4:	4b02      	ldr	r3, [pc, #8]	; (d84f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d84e6:	681a      	ldr	r2, [r3, #0]
   d84e8:	4b02      	ldr	r3, [pc, #8]	; (d84f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d84ea:	601a      	str	r2, [r3, #0]
   d84ec:	4770      	bx	lr
   d84ee:	bf00      	nop
   d84f0:	2003df74 	.word	0x2003df74
   d84f4:	2003e48c 	.word	0x2003e48c

000d84f8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d84f8:	4770      	bx	lr

000d84fa <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d84fa:	7441      	strb	r1, [r0, #17]
   d84fc:	4770      	bx	lr

000d84fe <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d84fe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d8500:	7c00      	ldrb	r0, [r0, #16]
   d8502:	f7fe faaf 	bl	d6a64 <HAL_USART_Available_Data_For_Write>
}
   d8506:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d850a:	bd08      	pop	{r3, pc}

000d850c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d850c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d850e:	7c00      	ldrb	r0, [r0, #16]
   d8510:	f7fe fa80 	bl	d6a14 <HAL_USART_Available_Data>
}
   d8514:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8518:	bd08      	pop	{r3, pc}

000d851a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d851a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d851c:	7c00      	ldrb	r0, [r0, #16]
   d851e:	f7fe fa89 	bl	d6a34 <HAL_USART_Peek_Data>
}
   d8522:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8526:	bf28      	it	cs
   d8528:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d852c:	bd08      	pop	{r3, pc}

000d852e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d852e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d8530:	7c00      	ldrb	r0, [r0, #16]
   d8532:	f7fe fa77 	bl	d6a24 <HAL_USART_Read_Data>
}
   d8536:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d853a:	bf28      	it	cs
   d853c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d8540:	bd08      	pop	{r3, pc}

000d8542 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d8542:	7c00      	ldrb	r0, [r0, #16]
   d8544:	f7fe ba7e 	b.w	d6a44 <HAL_USART_Flush_Data>

000d8548 <_ZN11USARTSerialD0Ev>:
   d8548:	b510      	push	{r4, lr}
   d854a:	2114      	movs	r1, #20
   d854c:	4604      	mov	r4, r0
   d854e:	f000 fa58 	bl	d8a02 <_ZdlPvj>
   d8552:	4620      	mov	r0, r4
   d8554:	bd10      	pop	{r4, pc}

000d8556 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8556:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8558:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d855a:	4604      	mov	r4, r0
   d855c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d855e:	b925      	cbnz	r5, d856a <_ZN11USARTSerial5writeEh+0x14>
   d8560:	7c00      	ldrb	r0, [r0, #16]
   d8562:	f7fe fa7f 	bl	d6a64 <HAL_USART_Available_Data_For_Write>
   d8566:	2800      	cmp	r0, #0
   d8568:	dd05      	ble.n	d8576 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d856a:	4631      	mov	r1, r6
   d856c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d856e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8572:	f7fe ba47 	b.w	d6a04 <HAL_USART_Write_Data>
  }
  return 0;
}
   d8576:	4628      	mov	r0, r5
   d8578:	bd70      	pop	{r4, r5, r6, pc}
	...

000d857c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d857c:	b510      	push	{r4, lr}
   d857e:	4604      	mov	r4, r0
   d8580:	4608      	mov	r0, r1
   d8582:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8584:	2200      	movs	r2, #0
   d8586:	6062      	str	r2, [r4, #4]
   d8588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d858c:	60a2      	str	r2, [r4, #8]
   d858e:	4a05      	ldr	r2, [pc, #20]	; (d85a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8590:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d8592:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8594:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d8596:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d8598:	461a      	mov	r2, r3
   d859a:	f7fe fa2b 	bl	d69f4 <HAL_USART_Init>
}
   d859e:	4620      	mov	r0, r4
   d85a0:	bd10      	pop	{r4, pc}
   d85a2:	bf00      	nop
   d85a4:	000dd570 	.word	0x000dd570

000d85a8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d85a8:	7c00      	ldrb	r0, [r0, #16]
   d85aa:	f7fe ba53 	b.w	d6a54 <HAL_USART_Is_Enabled>
	...

000d85b0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d85b0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d85b2:	4d0c      	ldr	r5, [pc, #48]	; (d85e4 <_Z22__fetch_global_Serial1v+0x34>)
   d85b4:	6829      	ldr	r1, [r5, #0]
   d85b6:	f011 0401 	ands.w	r4, r1, #1
   d85ba:	d111      	bne.n	d85e0 <_Z22__fetch_global_Serial1v+0x30>
   d85bc:	4628      	mov	r0, r5
   d85be:	f7fb fd72 	bl	d40a6 <__cxa_guard_acquire>
   d85c2:	b168      	cbz	r0, d85e0 <_Z22__fetch_global_Serial1v+0x30>
   d85c4:	4a08      	ldr	r2, [pc, #32]	; (d85e8 <_Z22__fetch_global_Serial1v+0x38>)
   d85c6:	4b09      	ldr	r3, [pc, #36]	; (d85ec <_Z22__fetch_global_Serial1v+0x3c>)
   d85c8:	4809      	ldr	r0, [pc, #36]	; (d85f0 <_Z22__fetch_global_Serial1v+0x40>)
   d85ca:	4621      	mov	r1, r4
   d85cc:	f7ff ffd6 	bl	d857c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d85d0:	4628      	mov	r0, r5
   d85d2:	f7fb fd6d 	bl	d40b0 <__cxa_guard_release>
   d85d6:	4a07      	ldr	r2, [pc, #28]	; (d85f4 <_Z22__fetch_global_Serial1v+0x44>)
   d85d8:	4907      	ldr	r1, [pc, #28]	; (d85f8 <_Z22__fetch_global_Serial1v+0x48>)
   d85da:	4805      	ldr	r0, [pc, #20]	; (d85f0 <_Z22__fetch_global_Serial1v+0x40>)
   d85dc:	f000 fa0c 	bl	d89f8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d85e0:	4803      	ldr	r0, [pc, #12]	; (d85f0 <_Z22__fetch_global_Serial1v+0x40>)
   d85e2:	bd38      	pop	{r3, r4, r5, pc}
   d85e4:	2003e534 	.word	0x2003e534
   d85e8:	2003e538 	.word	0x2003e538
   d85ec:	2003e4b0 	.word	0x2003e4b0
   d85f0:	2003e49c 	.word	0x2003e49c
   d85f4:	2003e064 	.word	0x2003e064
   d85f8:	000d84f9 	.word	0x000d84f9

000d85fc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d85fc:	7441      	strb	r1, [r0, #17]
   d85fe:	4770      	bx	lr

000d8600 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8600:	4770      	bx	lr

000d8602 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d8602:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8604:	2100      	movs	r1, #0
   d8606:	7c00      	ldrb	r0, [r0, #16]
   d8608:	f7fe fa4c 	bl	d6aa4 <HAL_USB_USART_Receive_Data>
}
   d860c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8610:	bf28      	it	cs
   d8612:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d8616:	bd08      	pop	{r3, pc}

000d8618 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d8618:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d861a:	2101      	movs	r1, #1
   d861c:	7c00      	ldrb	r0, [r0, #16]
   d861e:	f7fe fa41 	bl	d6aa4 <HAL_USB_USART_Receive_Data>
}
   d8622:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8626:	bf28      	it	cs
   d8628:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d862c:	bd08      	pop	{r3, pc}

000d862e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d862e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8630:	7c00      	ldrb	r0, [r0, #16]
   d8632:	f7fe fa2f 	bl	d6a94 <HAL_USB_USART_Available_Data_For_Write>
}
   d8636:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d863a:	bd08      	pop	{r3, pc}

000d863c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d863c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d863e:	7c00      	ldrb	r0, [r0, #16]
   d8640:	f7fe fa20 	bl	d6a84 <HAL_USB_USART_Available_Data>
}
   d8644:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8648:	bd08      	pop	{r3, pc}

000d864a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d864a:	7c00      	ldrb	r0, [r0, #16]
   d864c:	f7fe ba3a 	b.w	d6ac4 <HAL_USB_USART_Flush_Data>

000d8650 <_ZN9USBSerialD0Ev>:
   d8650:	b510      	push	{r4, lr}
   d8652:	2114      	movs	r1, #20
   d8654:	4604      	mov	r4, r0
   d8656:	f000 f9d4 	bl	d8a02 <_ZdlPvj>
   d865a:	4620      	mov	r0, r4
   d865c:	bd10      	pop	{r4, pc}

000d865e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d865e:	b538      	push	{r3, r4, r5, lr}
   d8660:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8662:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8664:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8666:	f7fe fa15 	bl	d6a94 <HAL_USB_USART_Available_Data_For_Write>
   d866a:	2800      	cmp	r0, #0
   d866c:	dc01      	bgt.n	d8672 <_ZN9USBSerial5writeEh+0x14>
   d866e:	7c60      	ldrb	r0, [r4, #17]
   d8670:	b128      	cbz	r0, d867e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8672:	4629      	mov	r1, r5
   d8674:	7c20      	ldrb	r0, [r4, #16]
   d8676:	f7fe fa1d 	bl	d6ab4 <HAL_USB_USART_Send_Data>
   d867a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d867e:	bd38      	pop	{r3, r4, r5, pc}

000d8680 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8680:	b510      	push	{r4, lr}
   d8682:	4604      	mov	r4, r0
   d8684:	2300      	movs	r3, #0
   d8686:	6063      	str	r3, [r4, #4]
   d8688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d868c:	60a3      	str	r3, [r4, #8]
   d868e:	4b05      	ldr	r3, [pc, #20]	; (d86a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8690:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d8692:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8694:	4608      	mov	r0, r1
{
  _serial = serial;
   d8696:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8698:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d869a:	4611      	mov	r1, r2
   d869c:	f7fe f9ea 	bl	d6a74 <HAL_USB_USART_Init>
}
   d86a0:	4620      	mov	r0, r4
   d86a2:	bd10      	pop	{r4, pc}
   d86a4:	000dd5a0 	.word	0x000dd5a0

000d86a8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d86a8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d86aa:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d86ac:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d86ae:	2100      	movs	r1, #0
   d86b0:	f001 f9f3 	bl	d9a9a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d86b4:	4620      	mov	r0, r4
   d86b6:	bd10      	pop	{r4, pc}

000d86b8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d86b8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d86ba:	4d0e      	ldr	r5, [pc, #56]	; (d86f4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d86bc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d86be:	a801      	add	r0, sp, #4
   d86c0:	f7ff fff2 	bl	d86a8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d86c4:	6829      	ldr	r1, [r5, #0]
   d86c6:	f011 0401 	ands.w	r4, r1, #1
   d86ca:	d110      	bne.n	d86ee <_Z16_fetch_usbserialv+0x36>
   d86cc:	4628      	mov	r0, r5
   d86ce:	f7fb fcea 	bl	d40a6 <__cxa_guard_acquire>
   d86d2:	b160      	cbz	r0, d86ee <_Z16_fetch_usbserialv+0x36>
   d86d4:	aa01      	add	r2, sp, #4
   d86d6:	4621      	mov	r1, r4
   d86d8:	4807      	ldr	r0, [pc, #28]	; (d86f8 <_Z16_fetch_usbserialv+0x40>)
   d86da:	f7ff ffd1 	bl	d8680 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d86de:	4628      	mov	r0, r5
   d86e0:	f7fb fce6 	bl	d40b0 <__cxa_guard_release>
   d86e4:	4a05      	ldr	r2, [pc, #20]	; (d86fc <_Z16_fetch_usbserialv+0x44>)
   d86e6:	4906      	ldr	r1, [pc, #24]	; (d8700 <_Z16_fetch_usbserialv+0x48>)
   d86e8:	4803      	ldr	r0, [pc, #12]	; (d86f8 <_Z16_fetch_usbserialv+0x40>)
   d86ea:	f000 f985 	bl	d89f8 <__aeabi_atexit>
	return _usbserial;
}
   d86ee:	4802      	ldr	r0, [pc, #8]	; (d86f8 <_Z16_fetch_usbserialv+0x40>)
   d86f0:	b007      	add	sp, #28
   d86f2:	bd30      	pop	{r4, r5, pc}
   d86f4:	2003e5bc 	.word	0x2003e5bc
   d86f8:	2003e5c0 	.word	0x2003e5c0
   d86fc:	2003e064 	.word	0x2003e064
   d8700:	000d8601 	.word	0x000d8601

000d8704 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d8704:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8706:	4b0c      	ldr	r3, [pc, #48]	; (d8738 <serialEventRun+0x34>)
   d8708:	b133      	cbz	r3, d8718 <serialEventRun+0x14>
   d870a:	f7ff ffd5 	bl	d86b8 <_Z16_fetch_usbserialv>
   d870e:	6803      	ldr	r3, [r0, #0]
   d8710:	691b      	ldr	r3, [r3, #16]
   d8712:	4798      	blx	r3
   d8714:	2800      	cmp	r0, #0
   d8716:	dc09      	bgt.n	d872c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d8718:	4b08      	ldr	r3, [pc, #32]	; (d873c <serialEventRun+0x38>)
   d871a:	b163      	cbz	r3, d8736 <serialEventRun+0x32>
   d871c:	f7ff ff48 	bl	d85b0 <_Z22__fetch_global_Serial1v>
   d8720:	6803      	ldr	r3, [r0, #0]
   d8722:	691b      	ldr	r3, [r3, #16]
   d8724:	4798      	blx	r3
   d8726:	2800      	cmp	r0, #0
   d8728:	dc03      	bgt.n	d8732 <serialEventRun+0x2e>
   d872a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d872c:	f3af 8000 	nop.w
   d8730:	e7f2      	b.n	d8718 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d8732:	f3af 8000 	nop.w
   d8736:	bd08      	pop	{r3, pc}
	...

000d8740 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d8740:	b508      	push	{r3, lr}
	serialEventRun();
   d8742:	f7ff ffdf 	bl	d8704 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8746:	f7fe f845 	bl	d67d4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d874a:	4b01      	ldr	r3, [pc, #4]	; (d8750 <_post_loop+0x10>)
   d874c:	6018      	str	r0, [r3, #0]
   d874e:	bd08      	pop	{r3, pc}
   d8750:	2003e5dc 	.word	0x2003e5dc

000d8754 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8754:	4802      	ldr	r0, [pc, #8]	; (d8760 <_Z33system_initialize_user_backup_ramv+0xc>)
   d8756:	4a03      	ldr	r2, [pc, #12]	; (d8764 <_Z33system_initialize_user_backup_ramv+0x10>)
   d8758:	4903      	ldr	r1, [pc, #12]	; (d8768 <_Z33system_initialize_user_backup_ramv+0x14>)
   d875a:	1a12      	subs	r2, r2, r0
   d875c:	f001 b992 	b.w	d9a84 <memcpy>
   d8760:	2003f400 	.word	0x2003f400
   d8764:	2003f404 	.word	0x2003f404
   d8768:	000ddcb0 	.word	0x000ddcb0

000d876c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d876c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d876e:	2300      	movs	r3, #0
   d8770:	9300      	str	r3, [sp, #0]
   d8772:	461a      	mov	r2, r3
   d8774:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8778:	f7fe fa0e 	bl	d6b98 <system_ctrl_set_result>
}
   d877c:	b003      	add	sp, #12
   d877e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8784 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d8784:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8786:	8843      	ldrh	r3, [r0, #2]
   d8788:	2b0a      	cmp	r3, #10
   d878a:	d008      	beq.n	d879e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d878c:	2b50      	cmp	r3, #80	; 0x50
   d878e:	d109      	bne.n	d87a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d8790:	4b09      	ldr	r3, [pc, #36]	; (d87b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8792:	681b      	ldr	r3, [r3, #0]
   d8794:	b13b      	cbz	r3, d87a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d8796:	b003      	add	sp, #12
   d8798:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d879c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d879e:	f7ff ffe5 	bl	d876c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d87a2:	e006      	b.n	d87b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d87a4:	2300      	movs	r3, #0
   d87a6:	9300      	str	r3, [sp, #0]
   d87a8:	461a      	mov	r2, r3
   d87aa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d87ae:	f7fe f9f3 	bl	d6b98 <system_ctrl_set_result>
        break;
    }
}
   d87b2:	b003      	add	sp, #12
   d87b4:	f85d fb04 	ldr.w	pc, [sp], #4
   d87b8:	2003e5d4 	.word	0x2003e5d4

000d87bc <module_user_init_hook>:

void module_user_init_hook()
{
   d87bc:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d87be:	4c10      	ldr	r4, [pc, #64]	; (d8800 <module_user_init_hook+0x44>)
   d87c0:	4d10      	ldr	r5, [pc, #64]	; (d8804 <module_user_init_hook+0x48>)
   d87c2:	6823      	ldr	r3, [r4, #0]
   d87c4:	42ab      	cmp	r3, r5
   d87c6:	4b10      	ldr	r3, [pc, #64]	; (d8808 <module_user_init_hook+0x4c>)
   d87c8:	bf0c      	ite	eq
   d87ca:	2201      	moveq	r2, #1
   d87cc:	2200      	movne	r2, #0
   d87ce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d87d0:	d002      	beq.n	d87d8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d87d2:	f7ff ffbf 	bl	d8754 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d87d6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d87d8:	f7fd ffec 	bl	d67b4 <HAL_RNG_GetRandomNumber>
   d87dc:	4604      	mov	r4, r0
    srand(seed);
   d87de:	f001 fbb3 	bl	d9f48 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d87e2:	4b0a      	ldr	r3, [pc, #40]	; (d880c <module_user_init_hook+0x50>)
   d87e4:	b113      	cbz	r3, d87ec <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d87e6:	4620      	mov	r0, r4
   d87e8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d87ec:	2100      	movs	r1, #0
   d87ee:	4807      	ldr	r0, [pc, #28]	; (d880c <module_user_init_hook+0x50>)
   d87f0:	f7fe fa50 	bl	d6c94 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d87f4:	2100      	movs	r1, #0
   d87f6:	4806      	ldr	r0, [pc, #24]	; (d8810 <module_user_init_hook+0x54>)
}
   d87f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d87fc:	f7fe b9c2 	b.w	d6b84 <system_ctrl_set_app_request_handler>
   d8800:	2003f400 	.word	0x2003f400
   d8804:	9a271c1e 	.word	0x9a271c1e
   d8808:	2003e5d8 	.word	0x2003e5d8
   d880c:	00000000 	.word	0x00000000
   d8810:	000d8785 	.word	0x000d8785

000d8814 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d8814:	b508      	push	{r3, lr}
   d8816:	4b02      	ldr	r3, [pc, #8]	; (d8820 <spark_protocol_instance+0xc>)
   d8818:	681b      	ldr	r3, [r3, #0]
   d881a:	681b      	ldr	r3, [r3, #0]
   d881c:	9301      	str	r3, [sp, #4]
   d881e:	bd08      	pop	{r3, pc}
   d8820:	0003025c 	.word	0x0003025c

000d8824 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d8824:	b508      	push	{r3, lr}
   d8826:	4b02      	ldr	r3, [pc, #8]	; (d8830 <spark_protocol_set_product_id+0xc>)
   d8828:	681b      	ldr	r3, [r3, #0]
   d882a:	685b      	ldr	r3, [r3, #4]
   d882c:	9301      	str	r3, [sp, #4]
   d882e:	bd08      	pop	{r3, pc}
   d8830:	0003025c 	.word	0x0003025c

000d8834 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d8834:	b508      	push	{r3, lr}
   d8836:	4b02      	ldr	r3, [pc, #8]	; (d8840 <spark_protocol_set_product_firmware_version+0xc>)
   d8838:	681b      	ldr	r3, [r3, #0]
   d883a:	689b      	ldr	r3, [r3, #8]
   d883c:	9301      	str	r3, [sp, #4]
   d883e:	bd08      	pop	{r3, pc}
   d8840:	0003025c 	.word	0x0003025c

000d8844 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8844:	b510      	push	{r4, lr}
   d8846:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8848:	480f      	ldr	r0, [pc, #60]	; (d8888 <pinAvailable+0x44>)
   d884a:	f7ff faef 	bl	d7e2c <_ZN8SPIClass9isEnabledEv>
   d884e:	b128      	cbz	r0, d885c <pinAvailable+0x18>
   d8850:	f1a4 030b 	sub.w	r3, r4, #11
   d8854:	2b02      	cmp	r3, #2
   d8856:	d801      	bhi.n	d885c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d8858:	2000      	movs	r0, #0
   d885a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d885c:	f000 f86a 	bl	d8934 <_Z19__fetch_global_Wirev>
   d8860:	f7ff f82b 	bl	d78ba <_ZN7TwoWire9isEnabledEv>
   d8864:	b108      	cbz	r0, d886a <pinAvailable+0x26>
   d8866:	2c01      	cmp	r4, #1
   d8868:	d9f6      	bls.n	d8858 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d886a:	f7ff fea1 	bl	d85b0 <_Z22__fetch_global_Serial1v>
   d886e:	f7ff fe9b 	bl	d85a8 <_ZN11USARTSerial9isEnabledEv>
   d8872:	b118      	cbz	r0, d887c <pinAvailable+0x38>
   d8874:	f1a4 0309 	sub.w	r3, r4, #9
   d8878:	2b01      	cmp	r3, #1
   d887a:	d9ed      	bls.n	d8858 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d887c:	2c23      	cmp	r4, #35	; 0x23
   d887e:	bf8c      	ite	hi
   d8880:	2000      	movhi	r0, #0
   d8882:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8884:	bd10      	pop	{r4, pc}
   d8886:	bf00      	nop
   d8888:	2003e610 	.word	0x2003e610

000d888c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d888c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d888e:	b538      	push	{r3, r4, r5, lr}
   d8890:	4604      	mov	r4, r0
   d8892:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8894:	d80a      	bhi.n	d88ac <pinMode+0x20>
   d8896:	29ff      	cmp	r1, #255	; 0xff
   d8898:	d008      	beq.n	d88ac <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d889a:	f7ff ffd3 	bl	d8844 <pinAvailable>
   d889e:	b128      	cbz	r0, d88ac <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d88a0:	4629      	mov	r1, r5
   d88a2:	4620      	mov	r0, r4
}
   d88a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d88a8:	f7fd bfcc 	b.w	d6844 <HAL_Pin_Mode>
   d88ac:	bd38      	pop	{r3, r4, r5, pc}

000d88ae <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d88ae:	b538      	push	{r3, r4, r5, lr}
   d88b0:	4604      	mov	r4, r0
   d88b2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d88b4:	f7fd ffce 	bl	d6854 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d88b8:	28ff      	cmp	r0, #255	; 0xff
   d88ba:	d010      	beq.n	d88de <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d88bc:	2806      	cmp	r0, #6
   d88be:	d804      	bhi.n	d88ca <digitalWrite+0x1c>
   d88c0:	234d      	movs	r3, #77	; 0x4d
   d88c2:	fa23 f000 	lsr.w	r0, r3, r0
   d88c6:	07c3      	lsls	r3, r0, #31
   d88c8:	d409      	bmi.n	d88de <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d88ca:	4620      	mov	r0, r4
   d88cc:	f7ff ffba 	bl	d8844 <pinAvailable>
   d88d0:	b128      	cbz	r0, d88de <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d88d2:	4629      	mov	r1, r5
   d88d4:	4620      	mov	r0, r4
}
   d88d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d88da:	f7fd bfc3 	b.w	d6864 <HAL_GPIO_Write>
   d88de:	bd38      	pop	{r3, r4, r5, pc}

000d88e0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d88e0:	b510      	push	{r4, lr}
   d88e2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d88e4:	f7fd ffb6 	bl	d6854 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d88e8:	3804      	subs	r0, #4
   d88ea:	b2c0      	uxtb	r0, r0
   d88ec:	2801      	cmp	r0, #1
   d88ee:	d908      	bls.n	d8902 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d88f0:	4620      	mov	r0, r4
   d88f2:	f7ff ffa7 	bl	d8844 <pinAvailable>
   d88f6:	b120      	cbz	r0, d8902 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d88f8:	4620      	mov	r0, r4
}
   d88fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d88fe:	f7fd bfb9 	b.w	d6874 <HAL_GPIO_Read>
}
   d8902:	2000      	movs	r0, #0
   d8904:	bd10      	pop	{r4, pc}

000d8906 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8906:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d8908:	b510      	push	{r4, lr}
   d890a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d890c:	bf9c      	itt	ls
   d890e:	340e      	addls	r4, #14
   d8910:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8912:	4620      	mov	r0, r4
   d8914:	f7ff ff96 	bl	d8844 <pinAvailable>
   d8918:	b150      	cbz	r0, d8930 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d891a:	2103      	movs	r1, #3
   d891c:	4620      	mov	r0, r4
   d891e:	f7fd ff89 	bl	d6834 <HAL_Validate_Pin_Function>
   d8922:	2803      	cmp	r0, #3
   d8924:	d104      	bne.n	d8930 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8926:	4620      	mov	r0, r4
}
   d8928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d892c:	f7fd bfba 	b.w	d68a4 <HAL_ADC_Read>
}
   d8930:	2000      	movs	r0, #0
   d8932:	bd10      	pop	{r4, pc}

000d8934 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d8934:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d8936:	4d0b      	ldr	r5, [pc, #44]	; (d8964 <_Z19__fetch_global_Wirev+0x30>)
   d8938:	6829      	ldr	r1, [r5, #0]
   d893a:	f011 0401 	ands.w	r4, r1, #1
   d893e:	d10f      	bne.n	d8960 <_Z19__fetch_global_Wirev+0x2c>
   d8940:	4628      	mov	r0, r5
   d8942:	f7fb fbb0 	bl	d40a6 <__cxa_guard_acquire>
   d8946:	b158      	cbz	r0, d8960 <_Z19__fetch_global_Wirev+0x2c>
   d8948:	4621      	mov	r1, r4
   d894a:	4807      	ldr	r0, [pc, #28]	; (d8968 <_Z19__fetch_global_Wirev+0x34>)
   d894c:	f7fe ff84 	bl	d7858 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d8950:	4628      	mov	r0, r5
   d8952:	f7fb fbad 	bl	d40b0 <__cxa_guard_release>
   d8956:	4a05      	ldr	r2, [pc, #20]	; (d896c <_Z19__fetch_global_Wirev+0x38>)
   d8958:	4905      	ldr	r1, [pc, #20]	; (d8970 <_Z19__fetch_global_Wirev+0x3c>)
   d895a:	4803      	ldr	r0, [pc, #12]	; (d8968 <_Z19__fetch_global_Wirev+0x34>)
   d895c:	f000 f84c 	bl	d89f8 <__aeabi_atexit>
	return wire;
}
   d8960:	4801      	ldr	r0, [pc, #4]	; (d8968 <_Z19__fetch_global_Wirev+0x34>)
   d8962:	bd38      	pop	{r3, r4, r5, pc}
   d8964:	2003e5e0 	.word	0x2003e5e0
   d8968:	2003e5f8 	.word	0x2003e5f8
   d896c:	2003e064 	.word	0x2003e064
   d8970:	000d7801 	.word	0x000d7801

000d8974 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d8974:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   d8976:	4c0b      	ldr	r4, [pc, #44]	; (d89a4 <_Z20__fetch_global_Wire1v+0x30>)
   d8978:	6823      	ldr	r3, [r4, #0]
   d897a:	07db      	lsls	r3, r3, #31
   d897c:	d40f      	bmi.n	d899e <_Z20__fetch_global_Wire1v+0x2a>
   d897e:	4620      	mov	r0, r4
   d8980:	f7fb fb91 	bl	d40a6 <__cxa_guard_acquire>
   d8984:	b158      	cbz	r0, d899e <_Z20__fetch_global_Wire1v+0x2a>
   d8986:	2101      	movs	r1, #1
   d8988:	4807      	ldr	r0, [pc, #28]	; (d89a8 <_Z20__fetch_global_Wire1v+0x34>)
   d898a:	f7fe ff65 	bl	d7858 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d898e:	4620      	mov	r0, r4
   d8990:	f7fb fb8e 	bl	d40b0 <__cxa_guard_release>
   d8994:	4a05      	ldr	r2, [pc, #20]	; (d89ac <_Z20__fetch_global_Wire1v+0x38>)
   d8996:	4906      	ldr	r1, [pc, #24]	; (d89b0 <_Z20__fetch_global_Wire1v+0x3c>)
   d8998:	4803      	ldr	r0, [pc, #12]	; (d89a8 <_Z20__fetch_global_Wire1v+0x34>)
   d899a:	f000 f82d 	bl	d89f8 <__aeabi_atexit>
	return wire;
}
   d899e:	4802      	ldr	r0, [pc, #8]	; (d89a8 <_Z20__fetch_global_Wire1v+0x34>)
   d89a0:	bd10      	pop	{r4, pc}
   d89a2:	bf00      	nop
   d89a4:	2003e60c 	.word	0x2003e60c
   d89a8:	2003e5e4 	.word	0x2003e5e4
   d89ac:	2003e064 	.word	0x2003e064
   d89b0:	000d7801 	.word	0x000d7801

000d89b4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d89b4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d89b6:	4c0c      	ldr	r4, [pc, #48]	; (d89e8 <_GLOBAL__sub_I_SPI+0x34>)
   d89b8:	4e0c      	ldr	r6, [pc, #48]	; (d89ec <_GLOBAL__sub_I_SPI+0x38>)
   d89ba:	4d0d      	ldr	r5, [pc, #52]	; (d89f0 <_GLOBAL__sub_I_SPI+0x3c>)
   d89bc:	2100      	movs	r1, #0
   d89be:	4620      	mov	r0, r4
   d89c0:	f7ff fa26 	bl	d7e10 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d89c4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d89c6:	4c0b      	ldr	r4, [pc, #44]	; (d89f4 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d89c8:	4632      	mov	r2, r6
   d89ca:	4629      	mov	r1, r5
   d89cc:	f000 f814 	bl	d89f8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d89d0:	2101      	movs	r1, #1
   d89d2:	4620      	mov	r0, r4
   d89d4:	f7ff fa1c 	bl	d7e10 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d89d8:	4632      	mov	r2, r6
   d89da:	4629      	mov	r1, r5
   d89dc:	4620      	mov	r0, r4
   d89de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d89e2:	f000 b809 	b.w	d89f8 <__aeabi_atexit>
   d89e6:	bf00      	nop
   d89e8:	2003e610 	.word	0x2003e610
   d89ec:	2003e064 	.word	0x2003e064
   d89f0:	000d7df5 	.word	0x000d7df5
   d89f4:	2003e61c 	.word	0x2003e61c

000d89f8 <__aeabi_atexit>:
   d89f8:	460b      	mov	r3, r1
   d89fa:	4601      	mov	r1, r0
   d89fc:	4618      	mov	r0, r3
   d89fe:	f000 be8d 	b.w	d971c <__cxa_atexit>

000d8a02 <_ZdlPvj>:
   d8a02:	f7fb bb4c 	b.w	d409e <_ZdlPv>

000d8a06 <_ZSt25__throw_bad_function_callv>:
   d8a06:	b508      	push	{r3, lr}
   d8a08:	f7fe f9d4 	bl	d6db4 <abort>

000d8a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8a0c:	4b24      	ldr	r3, [pc, #144]	; (d8aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8a0e:	681a      	ldr	r2, [r3, #0]
   d8a10:	07d0      	lsls	r0, r2, #31
   d8a12:	bf5c      	itt	pl
   d8a14:	2201      	movpl	r2, #1
   d8a16:	601a      	strpl	r2, [r3, #0]
   d8a18:	4b22      	ldr	r3, [pc, #136]	; (d8aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8a1a:	681a      	ldr	r2, [r3, #0]
   d8a1c:	07d1      	lsls	r1, r2, #31
   d8a1e:	bf5c      	itt	pl
   d8a20:	2201      	movpl	r2, #1
   d8a22:	601a      	strpl	r2, [r3, #0]
   d8a24:	4b20      	ldr	r3, [pc, #128]	; (d8aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8a26:	681a      	ldr	r2, [r3, #0]
   d8a28:	07d2      	lsls	r2, r2, #31
   d8a2a:	bf5c      	itt	pl
   d8a2c:	2201      	movpl	r2, #1
   d8a2e:	601a      	strpl	r2, [r3, #0]
   d8a30:	4b1e      	ldr	r3, [pc, #120]	; (d8aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8a32:	681a      	ldr	r2, [r3, #0]
   d8a34:	07d0      	lsls	r0, r2, #31
   d8a36:	bf5c      	itt	pl
   d8a38:	2201      	movpl	r2, #1
   d8a3a:	601a      	strpl	r2, [r3, #0]
   d8a3c:	4b1c      	ldr	r3, [pc, #112]	; (d8ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8a3e:	681a      	ldr	r2, [r3, #0]
   d8a40:	07d1      	lsls	r1, r2, #31
   d8a42:	bf5c      	itt	pl
   d8a44:	2201      	movpl	r2, #1
   d8a46:	601a      	strpl	r2, [r3, #0]
   d8a48:	4b1a      	ldr	r3, [pc, #104]	; (d8ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8a4a:	681a      	ldr	r2, [r3, #0]
   d8a4c:	07d2      	lsls	r2, r2, #31
   d8a4e:	bf5c      	itt	pl
   d8a50:	2201      	movpl	r2, #1
   d8a52:	601a      	strpl	r2, [r3, #0]
   d8a54:	4b18      	ldr	r3, [pc, #96]	; (d8ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8a56:	681a      	ldr	r2, [r3, #0]
   d8a58:	07d0      	lsls	r0, r2, #31
   d8a5a:	bf5c      	itt	pl
   d8a5c:	2201      	movpl	r2, #1
   d8a5e:	601a      	strpl	r2, [r3, #0]
   d8a60:	4b16      	ldr	r3, [pc, #88]	; (d8abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8a62:	681a      	ldr	r2, [r3, #0]
   d8a64:	07d1      	lsls	r1, r2, #31
   d8a66:	bf5c      	itt	pl
   d8a68:	2201      	movpl	r2, #1
   d8a6a:	601a      	strpl	r2, [r3, #0]
   d8a6c:	4b14      	ldr	r3, [pc, #80]	; (d8ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8a6e:	681a      	ldr	r2, [r3, #0]
   d8a70:	07d2      	lsls	r2, r2, #31
   d8a72:	bf5c      	itt	pl
   d8a74:	2201      	movpl	r2, #1
   d8a76:	601a      	strpl	r2, [r3, #0]
   d8a78:	4b12      	ldr	r3, [pc, #72]	; (d8ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8a7a:	681a      	ldr	r2, [r3, #0]
   d8a7c:	07d0      	lsls	r0, r2, #31
   d8a7e:	bf5c      	itt	pl
   d8a80:	2201      	movpl	r2, #1
   d8a82:	601a      	strpl	r2, [r3, #0]
   d8a84:	4b10      	ldr	r3, [pc, #64]	; (d8ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8a86:	681a      	ldr	r2, [r3, #0]
   d8a88:	07d1      	lsls	r1, r2, #31
   d8a8a:	bf5c      	itt	pl
   d8a8c:	2201      	movpl	r2, #1
   d8a8e:	601a      	strpl	r2, [r3, #0]
   d8a90:	4b0e      	ldr	r3, [pc, #56]	; (d8acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8a92:	681a      	ldr	r2, [r3, #0]
   d8a94:	07d2      	lsls	r2, r2, #31
   d8a96:	bf5c      	itt	pl
   d8a98:	2201      	movpl	r2, #1
   d8a9a:	601a      	strpl	r2, [r3, #0]
   d8a9c:	4770      	bx	lr
   d8a9e:	bf00      	nop
   d8aa0:	2003e654 	.word	0x2003e654
   d8aa4:	2003e650 	.word	0x2003e650
   d8aa8:	2003e64c 	.word	0x2003e64c
   d8aac:	2003e648 	.word	0x2003e648
   d8ab0:	2003e644 	.word	0x2003e644
   d8ab4:	2003e640 	.word	0x2003e640
   d8ab8:	2003e63c 	.word	0x2003e63c
   d8abc:	2003e638 	.word	0x2003e638
   d8ac0:	2003e634 	.word	0x2003e634
   d8ac4:	2003e630 	.word	0x2003e630
   d8ac8:	2003e62c 	.word	0x2003e62c
   d8acc:	2003e628 	.word	0x2003e628

000d8ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8ad0:	4b18      	ldr	r3, [pc, #96]	; (d8b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8ad2:	681a      	ldr	r2, [r3, #0]
   d8ad4:	07d1      	lsls	r1, r2, #31
   d8ad6:	bf5c      	itt	pl
   d8ad8:	2201      	movpl	r2, #1
   d8ada:	601a      	strpl	r2, [r3, #0]
   d8adc:	4b16      	ldr	r3, [pc, #88]	; (d8b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8ade:	681a      	ldr	r2, [r3, #0]
   d8ae0:	07d2      	lsls	r2, r2, #31
   d8ae2:	bf5c      	itt	pl
   d8ae4:	2201      	movpl	r2, #1
   d8ae6:	601a      	strpl	r2, [r3, #0]
   d8ae8:	4b14      	ldr	r3, [pc, #80]	; (d8b3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8aea:	681a      	ldr	r2, [r3, #0]
   d8aec:	07d0      	lsls	r0, r2, #31
   d8aee:	bf5c      	itt	pl
   d8af0:	2201      	movpl	r2, #1
   d8af2:	601a      	strpl	r2, [r3, #0]
   d8af4:	4b12      	ldr	r3, [pc, #72]	; (d8b40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8af6:	681a      	ldr	r2, [r3, #0]
   d8af8:	07d1      	lsls	r1, r2, #31
   d8afa:	bf5c      	itt	pl
   d8afc:	2201      	movpl	r2, #1
   d8afe:	601a      	strpl	r2, [r3, #0]
   d8b00:	4b10      	ldr	r3, [pc, #64]	; (d8b44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8b02:	681a      	ldr	r2, [r3, #0]
   d8b04:	07d2      	lsls	r2, r2, #31
   d8b06:	bf5c      	itt	pl
   d8b08:	2201      	movpl	r2, #1
   d8b0a:	601a      	strpl	r2, [r3, #0]
   d8b0c:	4b0e      	ldr	r3, [pc, #56]	; (d8b48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8b0e:	681a      	ldr	r2, [r3, #0]
   d8b10:	07d0      	lsls	r0, r2, #31
   d8b12:	bf5c      	itt	pl
   d8b14:	2201      	movpl	r2, #1
   d8b16:	601a      	strpl	r2, [r3, #0]
   d8b18:	4b0c      	ldr	r3, [pc, #48]	; (d8b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8b1a:	681a      	ldr	r2, [r3, #0]
   d8b1c:	07d1      	lsls	r1, r2, #31
   d8b1e:	bf5c      	itt	pl
   d8b20:	2201      	movpl	r2, #1
   d8b22:	601a      	strpl	r2, [r3, #0]
   d8b24:	4b0a      	ldr	r3, [pc, #40]	; (d8b50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8b26:	681a      	ldr	r2, [r3, #0]
   d8b28:	07d2      	lsls	r2, r2, #31
   d8b2a:	bf5c      	itt	pl
   d8b2c:	2201      	movpl	r2, #1
   d8b2e:	601a      	strpl	r2, [r3, #0]
   d8b30:	4770      	bx	lr
   d8b32:	bf00      	nop
   d8b34:	2003e674 	.word	0x2003e674
   d8b38:	2003e670 	.word	0x2003e670
   d8b3c:	2003e66c 	.word	0x2003e66c
   d8b40:	2003e668 	.word	0x2003e668
   d8b44:	2003e664 	.word	0x2003e664
   d8b48:	2003e660 	.word	0x2003e660
   d8b4c:	2003e65c 	.word	0x2003e65c
   d8b50:	2003e658 	.word	0x2003e658

000d8b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8b54:	4b18      	ldr	r3, [pc, #96]	; (d8bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8b56:	681a      	ldr	r2, [r3, #0]
   d8b58:	07d1      	lsls	r1, r2, #31
   d8b5a:	bf5c      	itt	pl
   d8b5c:	2201      	movpl	r2, #1
   d8b5e:	601a      	strpl	r2, [r3, #0]
   d8b60:	4b16      	ldr	r3, [pc, #88]	; (d8bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8b62:	681a      	ldr	r2, [r3, #0]
   d8b64:	07d2      	lsls	r2, r2, #31
   d8b66:	bf5c      	itt	pl
   d8b68:	2201      	movpl	r2, #1
   d8b6a:	601a      	strpl	r2, [r3, #0]
   d8b6c:	4b14      	ldr	r3, [pc, #80]	; (d8bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8b6e:	681a      	ldr	r2, [r3, #0]
   d8b70:	07d0      	lsls	r0, r2, #31
   d8b72:	bf5c      	itt	pl
   d8b74:	2201      	movpl	r2, #1
   d8b76:	601a      	strpl	r2, [r3, #0]
   d8b78:	4b12      	ldr	r3, [pc, #72]	; (d8bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8b7a:	681a      	ldr	r2, [r3, #0]
   d8b7c:	07d1      	lsls	r1, r2, #31
   d8b7e:	bf5c      	itt	pl
   d8b80:	2201      	movpl	r2, #1
   d8b82:	601a      	strpl	r2, [r3, #0]
   d8b84:	4b10      	ldr	r3, [pc, #64]	; (d8bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8b86:	681a      	ldr	r2, [r3, #0]
   d8b88:	07d2      	lsls	r2, r2, #31
   d8b8a:	bf5c      	itt	pl
   d8b8c:	2201      	movpl	r2, #1
   d8b8e:	601a      	strpl	r2, [r3, #0]
   d8b90:	4b0e      	ldr	r3, [pc, #56]	; (d8bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8b92:	681a      	ldr	r2, [r3, #0]
   d8b94:	07d0      	lsls	r0, r2, #31
   d8b96:	bf5c      	itt	pl
   d8b98:	2201      	movpl	r2, #1
   d8b9a:	601a      	strpl	r2, [r3, #0]
   d8b9c:	4b0c      	ldr	r3, [pc, #48]	; (d8bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8b9e:	681a      	ldr	r2, [r3, #0]
   d8ba0:	07d1      	lsls	r1, r2, #31
   d8ba2:	bf5c      	itt	pl
   d8ba4:	2201      	movpl	r2, #1
   d8ba6:	601a      	strpl	r2, [r3, #0]
   d8ba8:	4b0a      	ldr	r3, [pc, #40]	; (d8bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8baa:	681a      	ldr	r2, [r3, #0]
   d8bac:	07d2      	lsls	r2, r2, #31
   d8bae:	bf5c      	itt	pl
   d8bb0:	2201      	movpl	r2, #1
   d8bb2:	601a      	strpl	r2, [r3, #0]
   d8bb4:	4770      	bx	lr
   d8bb6:	bf00      	nop
   d8bb8:	2003e694 	.word	0x2003e694
   d8bbc:	2003e690 	.word	0x2003e690
   d8bc0:	2003e68c 	.word	0x2003e68c
   d8bc4:	2003e688 	.word	0x2003e688
   d8bc8:	2003e684 	.word	0x2003e684
   d8bcc:	2003e680 	.word	0x2003e680
   d8bd0:	2003e67c 	.word	0x2003e67c
   d8bd4:	2003e678 	.word	0x2003e678

000d8bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8bd8:	4b24      	ldr	r3, [pc, #144]	; (d8c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8bda:	681a      	ldr	r2, [r3, #0]
   d8bdc:	07d0      	lsls	r0, r2, #31
   d8bde:	bf5c      	itt	pl
   d8be0:	2201      	movpl	r2, #1
   d8be2:	601a      	strpl	r2, [r3, #0]
   d8be4:	4b22      	ldr	r3, [pc, #136]	; (d8c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d8be6:	681a      	ldr	r2, [r3, #0]
   d8be8:	07d1      	lsls	r1, r2, #31
   d8bea:	bf5c      	itt	pl
   d8bec:	2201      	movpl	r2, #1
   d8bee:	601a      	strpl	r2, [r3, #0]
   d8bf0:	4b20      	ldr	r3, [pc, #128]	; (d8c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8bf2:	681a      	ldr	r2, [r3, #0]
   d8bf4:	07d2      	lsls	r2, r2, #31
   d8bf6:	bf5c      	itt	pl
   d8bf8:	2201      	movpl	r2, #1
   d8bfa:	601a      	strpl	r2, [r3, #0]
   d8bfc:	4b1e      	ldr	r3, [pc, #120]	; (d8c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8bfe:	681a      	ldr	r2, [r3, #0]
   d8c00:	07d0      	lsls	r0, r2, #31
   d8c02:	bf5c      	itt	pl
   d8c04:	2201      	movpl	r2, #1
   d8c06:	601a      	strpl	r2, [r3, #0]
   d8c08:	4b1c      	ldr	r3, [pc, #112]	; (d8c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8c0a:	681a      	ldr	r2, [r3, #0]
   d8c0c:	07d1      	lsls	r1, r2, #31
   d8c0e:	bf5c      	itt	pl
   d8c10:	2201      	movpl	r2, #1
   d8c12:	601a      	strpl	r2, [r3, #0]
   d8c14:	4b1a      	ldr	r3, [pc, #104]	; (d8c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d8c16:	681a      	ldr	r2, [r3, #0]
   d8c18:	07d2      	lsls	r2, r2, #31
   d8c1a:	bf5c      	itt	pl
   d8c1c:	2201      	movpl	r2, #1
   d8c1e:	601a      	strpl	r2, [r3, #0]
   d8c20:	4b18      	ldr	r3, [pc, #96]	; (d8c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8c22:	681a      	ldr	r2, [r3, #0]
   d8c24:	07d0      	lsls	r0, r2, #31
   d8c26:	bf5c      	itt	pl
   d8c28:	2201      	movpl	r2, #1
   d8c2a:	601a      	strpl	r2, [r3, #0]
   d8c2c:	4b16      	ldr	r3, [pc, #88]	; (d8c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8c2e:	681a      	ldr	r2, [r3, #0]
   d8c30:	07d1      	lsls	r1, r2, #31
   d8c32:	bf5c      	itt	pl
   d8c34:	2201      	movpl	r2, #1
   d8c36:	601a      	strpl	r2, [r3, #0]
   d8c38:	4b14      	ldr	r3, [pc, #80]	; (d8c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8c3a:	681a      	ldr	r2, [r3, #0]
   d8c3c:	07d2      	lsls	r2, r2, #31
   d8c3e:	bf5c      	itt	pl
   d8c40:	2201      	movpl	r2, #1
   d8c42:	601a      	strpl	r2, [r3, #0]
   d8c44:	4b12      	ldr	r3, [pc, #72]	; (d8c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8c46:	681a      	ldr	r2, [r3, #0]
   d8c48:	07d0      	lsls	r0, r2, #31
   d8c4a:	bf5c      	itt	pl
   d8c4c:	2201      	movpl	r2, #1
   d8c4e:	601a      	strpl	r2, [r3, #0]
   d8c50:	4b10      	ldr	r3, [pc, #64]	; (d8c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8c52:	681a      	ldr	r2, [r3, #0]
   d8c54:	07d1      	lsls	r1, r2, #31
   d8c56:	bf5c      	itt	pl
   d8c58:	2201      	movpl	r2, #1
   d8c5a:	601a      	strpl	r2, [r3, #0]
   d8c5c:	4b0e      	ldr	r3, [pc, #56]	; (d8c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8c5e:	681a      	ldr	r2, [r3, #0]
   d8c60:	07d2      	lsls	r2, r2, #31
   d8c62:	bf5c      	itt	pl
   d8c64:	2201      	movpl	r2, #1
   d8c66:	601a      	strpl	r2, [r3, #0]
   d8c68:	4770      	bx	lr
   d8c6a:	bf00      	nop
   d8c6c:	2003e6c4 	.word	0x2003e6c4
   d8c70:	2003e6c0 	.word	0x2003e6c0
   d8c74:	2003e6bc 	.word	0x2003e6bc
   d8c78:	2003e6b8 	.word	0x2003e6b8
   d8c7c:	2003e6b4 	.word	0x2003e6b4
   d8c80:	2003e6b0 	.word	0x2003e6b0
   d8c84:	2003e6ac 	.word	0x2003e6ac
   d8c88:	2003e6a8 	.word	0x2003e6a8
   d8c8c:	2003e6a4 	.word	0x2003e6a4
   d8c90:	2003e6a0 	.word	0x2003e6a0
   d8c94:	2003e69c 	.word	0x2003e69c
   d8c98:	2003e698 	.word	0x2003e698

000d8c9c <__aeabi_drsub>:
   d8c9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8ca0:	e002      	b.n	d8ca8 <__adddf3>
   d8ca2:	bf00      	nop

000d8ca4 <__aeabi_dsub>:
   d8ca4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8ca8 <__adddf3>:
   d8ca8:	b530      	push	{r4, r5, lr}
   d8caa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8cae:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8cb2:	ea94 0f05 	teq	r4, r5
   d8cb6:	bf08      	it	eq
   d8cb8:	ea90 0f02 	teqeq	r0, r2
   d8cbc:	bf1f      	itttt	ne
   d8cbe:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8cc2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8cc6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8cca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8cce:	f000 80e2 	beq.w	d8e96 <__adddf3+0x1ee>
   d8cd2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8cd6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8cda:	bfb8      	it	lt
   d8cdc:	426d      	neglt	r5, r5
   d8cde:	dd0c      	ble.n	d8cfa <__adddf3+0x52>
   d8ce0:	442c      	add	r4, r5
   d8ce2:	ea80 0202 	eor.w	r2, r0, r2
   d8ce6:	ea81 0303 	eor.w	r3, r1, r3
   d8cea:	ea82 0000 	eor.w	r0, r2, r0
   d8cee:	ea83 0101 	eor.w	r1, r3, r1
   d8cf2:	ea80 0202 	eor.w	r2, r0, r2
   d8cf6:	ea81 0303 	eor.w	r3, r1, r3
   d8cfa:	2d36      	cmp	r5, #54	; 0x36
   d8cfc:	bf88      	it	hi
   d8cfe:	bd30      	pophi	{r4, r5, pc}
   d8d00:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8d04:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8d08:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8d0c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8d10:	d002      	beq.n	d8d18 <__adddf3+0x70>
   d8d12:	4240      	negs	r0, r0
   d8d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8d18:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8d1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8d20:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8d24:	d002      	beq.n	d8d2c <__adddf3+0x84>
   d8d26:	4252      	negs	r2, r2
   d8d28:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8d2c:	ea94 0f05 	teq	r4, r5
   d8d30:	f000 80a7 	beq.w	d8e82 <__adddf3+0x1da>
   d8d34:	f1a4 0401 	sub.w	r4, r4, #1
   d8d38:	f1d5 0e20 	rsbs	lr, r5, #32
   d8d3c:	db0d      	blt.n	d8d5a <__adddf3+0xb2>
   d8d3e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8d42:	fa22 f205 	lsr.w	r2, r2, r5
   d8d46:	1880      	adds	r0, r0, r2
   d8d48:	f141 0100 	adc.w	r1, r1, #0
   d8d4c:	fa03 f20e 	lsl.w	r2, r3, lr
   d8d50:	1880      	adds	r0, r0, r2
   d8d52:	fa43 f305 	asr.w	r3, r3, r5
   d8d56:	4159      	adcs	r1, r3
   d8d58:	e00e      	b.n	d8d78 <__adddf3+0xd0>
   d8d5a:	f1a5 0520 	sub.w	r5, r5, #32
   d8d5e:	f10e 0e20 	add.w	lr, lr, #32
   d8d62:	2a01      	cmp	r2, #1
   d8d64:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8d68:	bf28      	it	cs
   d8d6a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8d6e:	fa43 f305 	asr.w	r3, r3, r5
   d8d72:	18c0      	adds	r0, r0, r3
   d8d74:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8d78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8d7c:	d507      	bpl.n	d8d8e <__adddf3+0xe6>
   d8d7e:	f04f 0e00 	mov.w	lr, #0
   d8d82:	f1dc 0c00 	rsbs	ip, ip, #0
   d8d86:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8d8a:	eb6e 0101 	sbc.w	r1, lr, r1
   d8d8e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8d92:	d31b      	bcc.n	d8dcc <__adddf3+0x124>
   d8d94:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8d98:	d30c      	bcc.n	d8db4 <__adddf3+0x10c>
   d8d9a:	0849      	lsrs	r1, r1, #1
   d8d9c:	ea5f 0030 	movs.w	r0, r0, rrx
   d8da0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8da4:	f104 0401 	add.w	r4, r4, #1
   d8da8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8dac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8db0:	f080 809a 	bcs.w	d8ee8 <__adddf3+0x240>
   d8db4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8db8:	bf08      	it	eq
   d8dba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8dbe:	f150 0000 	adcs.w	r0, r0, #0
   d8dc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8dc6:	ea41 0105 	orr.w	r1, r1, r5
   d8dca:	bd30      	pop	{r4, r5, pc}
   d8dcc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8dd0:	4140      	adcs	r0, r0
   d8dd2:	eb41 0101 	adc.w	r1, r1, r1
   d8dd6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8dda:	f1a4 0401 	sub.w	r4, r4, #1
   d8dde:	d1e9      	bne.n	d8db4 <__adddf3+0x10c>
   d8de0:	f091 0f00 	teq	r1, #0
   d8de4:	bf04      	itt	eq
   d8de6:	4601      	moveq	r1, r0
   d8de8:	2000      	moveq	r0, #0
   d8dea:	fab1 f381 	clz	r3, r1
   d8dee:	bf08      	it	eq
   d8df0:	3320      	addeq	r3, #32
   d8df2:	f1a3 030b 	sub.w	r3, r3, #11
   d8df6:	f1b3 0220 	subs.w	r2, r3, #32
   d8dfa:	da0c      	bge.n	d8e16 <__adddf3+0x16e>
   d8dfc:	320c      	adds	r2, #12
   d8dfe:	dd08      	ble.n	d8e12 <__adddf3+0x16a>
   d8e00:	f102 0c14 	add.w	ip, r2, #20
   d8e04:	f1c2 020c 	rsb	r2, r2, #12
   d8e08:	fa01 f00c 	lsl.w	r0, r1, ip
   d8e0c:	fa21 f102 	lsr.w	r1, r1, r2
   d8e10:	e00c      	b.n	d8e2c <__adddf3+0x184>
   d8e12:	f102 0214 	add.w	r2, r2, #20
   d8e16:	bfd8      	it	le
   d8e18:	f1c2 0c20 	rsble	ip, r2, #32
   d8e1c:	fa01 f102 	lsl.w	r1, r1, r2
   d8e20:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8e24:	bfdc      	itt	le
   d8e26:	ea41 010c 	orrle.w	r1, r1, ip
   d8e2a:	4090      	lslle	r0, r2
   d8e2c:	1ae4      	subs	r4, r4, r3
   d8e2e:	bfa2      	ittt	ge
   d8e30:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8e34:	4329      	orrge	r1, r5
   d8e36:	bd30      	popge	{r4, r5, pc}
   d8e38:	ea6f 0404 	mvn.w	r4, r4
   d8e3c:	3c1f      	subs	r4, #31
   d8e3e:	da1c      	bge.n	d8e7a <__adddf3+0x1d2>
   d8e40:	340c      	adds	r4, #12
   d8e42:	dc0e      	bgt.n	d8e62 <__adddf3+0x1ba>
   d8e44:	f104 0414 	add.w	r4, r4, #20
   d8e48:	f1c4 0220 	rsb	r2, r4, #32
   d8e4c:	fa20 f004 	lsr.w	r0, r0, r4
   d8e50:	fa01 f302 	lsl.w	r3, r1, r2
   d8e54:	ea40 0003 	orr.w	r0, r0, r3
   d8e58:	fa21 f304 	lsr.w	r3, r1, r4
   d8e5c:	ea45 0103 	orr.w	r1, r5, r3
   d8e60:	bd30      	pop	{r4, r5, pc}
   d8e62:	f1c4 040c 	rsb	r4, r4, #12
   d8e66:	f1c4 0220 	rsb	r2, r4, #32
   d8e6a:	fa20 f002 	lsr.w	r0, r0, r2
   d8e6e:	fa01 f304 	lsl.w	r3, r1, r4
   d8e72:	ea40 0003 	orr.w	r0, r0, r3
   d8e76:	4629      	mov	r1, r5
   d8e78:	bd30      	pop	{r4, r5, pc}
   d8e7a:	fa21 f004 	lsr.w	r0, r1, r4
   d8e7e:	4629      	mov	r1, r5
   d8e80:	bd30      	pop	{r4, r5, pc}
   d8e82:	f094 0f00 	teq	r4, #0
   d8e86:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8e8a:	bf06      	itte	eq
   d8e8c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8e90:	3401      	addeq	r4, #1
   d8e92:	3d01      	subne	r5, #1
   d8e94:	e74e      	b.n	d8d34 <__adddf3+0x8c>
   d8e96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8e9a:	bf18      	it	ne
   d8e9c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8ea0:	d029      	beq.n	d8ef6 <__adddf3+0x24e>
   d8ea2:	ea94 0f05 	teq	r4, r5
   d8ea6:	bf08      	it	eq
   d8ea8:	ea90 0f02 	teqeq	r0, r2
   d8eac:	d005      	beq.n	d8eba <__adddf3+0x212>
   d8eae:	ea54 0c00 	orrs.w	ip, r4, r0
   d8eb2:	bf04      	itt	eq
   d8eb4:	4619      	moveq	r1, r3
   d8eb6:	4610      	moveq	r0, r2
   d8eb8:	bd30      	pop	{r4, r5, pc}
   d8eba:	ea91 0f03 	teq	r1, r3
   d8ebe:	bf1e      	ittt	ne
   d8ec0:	2100      	movne	r1, #0
   d8ec2:	2000      	movne	r0, #0
   d8ec4:	bd30      	popne	{r4, r5, pc}
   d8ec6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8eca:	d105      	bne.n	d8ed8 <__adddf3+0x230>
   d8ecc:	0040      	lsls	r0, r0, #1
   d8ece:	4149      	adcs	r1, r1
   d8ed0:	bf28      	it	cs
   d8ed2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8ed6:	bd30      	pop	{r4, r5, pc}
   d8ed8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8edc:	bf3c      	itt	cc
   d8ede:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8ee2:	bd30      	popcc	{r4, r5, pc}
   d8ee4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8ee8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8eec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8ef0:	f04f 0000 	mov.w	r0, #0
   d8ef4:	bd30      	pop	{r4, r5, pc}
   d8ef6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8efa:	bf1a      	itte	ne
   d8efc:	4619      	movne	r1, r3
   d8efe:	4610      	movne	r0, r2
   d8f00:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8f04:	bf1c      	itt	ne
   d8f06:	460b      	movne	r3, r1
   d8f08:	4602      	movne	r2, r0
   d8f0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8f0e:	bf06      	itte	eq
   d8f10:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8f14:	ea91 0f03 	teqeq	r1, r3
   d8f18:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8f1c:	bd30      	pop	{r4, r5, pc}
   d8f1e:	bf00      	nop

000d8f20 <__aeabi_ui2d>:
   d8f20:	f090 0f00 	teq	r0, #0
   d8f24:	bf04      	itt	eq
   d8f26:	2100      	moveq	r1, #0
   d8f28:	4770      	bxeq	lr
   d8f2a:	b530      	push	{r4, r5, lr}
   d8f2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8f30:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8f34:	f04f 0500 	mov.w	r5, #0
   d8f38:	f04f 0100 	mov.w	r1, #0
   d8f3c:	e750      	b.n	d8de0 <__adddf3+0x138>
   d8f3e:	bf00      	nop

000d8f40 <__aeabi_i2d>:
   d8f40:	f090 0f00 	teq	r0, #0
   d8f44:	bf04      	itt	eq
   d8f46:	2100      	moveq	r1, #0
   d8f48:	4770      	bxeq	lr
   d8f4a:	b530      	push	{r4, r5, lr}
   d8f4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8f50:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8f54:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8f58:	bf48      	it	mi
   d8f5a:	4240      	negmi	r0, r0
   d8f5c:	f04f 0100 	mov.w	r1, #0
   d8f60:	e73e      	b.n	d8de0 <__adddf3+0x138>
   d8f62:	bf00      	nop

000d8f64 <__aeabi_f2d>:
   d8f64:	0042      	lsls	r2, r0, #1
   d8f66:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8f6a:	ea4f 0131 	mov.w	r1, r1, rrx
   d8f6e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8f72:	bf1f      	itttt	ne
   d8f74:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8f78:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8f7c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8f80:	4770      	bxne	lr
   d8f82:	f092 0f00 	teq	r2, #0
   d8f86:	bf14      	ite	ne
   d8f88:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8f8c:	4770      	bxeq	lr
   d8f8e:	b530      	push	{r4, r5, lr}
   d8f90:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8f94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8f98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8f9c:	e720      	b.n	d8de0 <__adddf3+0x138>
   d8f9e:	bf00      	nop

000d8fa0 <__aeabi_ul2d>:
   d8fa0:	ea50 0201 	orrs.w	r2, r0, r1
   d8fa4:	bf08      	it	eq
   d8fa6:	4770      	bxeq	lr
   d8fa8:	b530      	push	{r4, r5, lr}
   d8faa:	f04f 0500 	mov.w	r5, #0
   d8fae:	e00a      	b.n	d8fc6 <__aeabi_l2d+0x16>

000d8fb0 <__aeabi_l2d>:
   d8fb0:	ea50 0201 	orrs.w	r2, r0, r1
   d8fb4:	bf08      	it	eq
   d8fb6:	4770      	bxeq	lr
   d8fb8:	b530      	push	{r4, r5, lr}
   d8fba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8fbe:	d502      	bpl.n	d8fc6 <__aeabi_l2d+0x16>
   d8fc0:	4240      	negs	r0, r0
   d8fc2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8fc6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8fca:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8fce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8fd2:	f43f aedc 	beq.w	d8d8e <__adddf3+0xe6>
   d8fd6:	f04f 0203 	mov.w	r2, #3
   d8fda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8fde:	bf18      	it	ne
   d8fe0:	3203      	addne	r2, #3
   d8fe2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8fe6:	bf18      	it	ne
   d8fe8:	3203      	addne	r2, #3
   d8fea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8fee:	f1c2 0320 	rsb	r3, r2, #32
   d8ff2:	fa00 fc03 	lsl.w	ip, r0, r3
   d8ff6:	fa20 f002 	lsr.w	r0, r0, r2
   d8ffa:	fa01 fe03 	lsl.w	lr, r1, r3
   d8ffe:	ea40 000e 	orr.w	r0, r0, lr
   d9002:	fa21 f102 	lsr.w	r1, r1, r2
   d9006:	4414      	add	r4, r2
   d9008:	e6c1      	b.n	d8d8e <__adddf3+0xe6>
   d900a:	bf00      	nop

000d900c <__aeabi_dmul>:
   d900c:	b570      	push	{r4, r5, r6, lr}
   d900e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9012:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9016:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d901a:	bf1d      	ittte	ne
   d901c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9020:	ea94 0f0c 	teqne	r4, ip
   d9024:	ea95 0f0c 	teqne	r5, ip
   d9028:	f000 f8de 	bleq	d91e8 <__aeabi_dmul+0x1dc>
   d902c:	442c      	add	r4, r5
   d902e:	ea81 0603 	eor.w	r6, r1, r3
   d9032:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9036:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d903a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d903e:	bf18      	it	ne
   d9040:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9044:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9048:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d904c:	d038      	beq.n	d90c0 <__aeabi_dmul+0xb4>
   d904e:	fba0 ce02 	umull	ip, lr, r0, r2
   d9052:	f04f 0500 	mov.w	r5, #0
   d9056:	fbe1 e502 	umlal	lr, r5, r1, r2
   d905a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d905e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9062:	f04f 0600 	mov.w	r6, #0
   d9066:	fbe1 5603 	umlal	r5, r6, r1, r3
   d906a:	f09c 0f00 	teq	ip, #0
   d906e:	bf18      	it	ne
   d9070:	f04e 0e01 	orrne.w	lr, lr, #1
   d9074:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9078:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d907c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9080:	d204      	bcs.n	d908c <__aeabi_dmul+0x80>
   d9082:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9086:	416d      	adcs	r5, r5
   d9088:	eb46 0606 	adc.w	r6, r6, r6
   d908c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9090:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9094:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9098:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d909c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d90a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d90a4:	bf88      	it	hi
   d90a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d90aa:	d81e      	bhi.n	d90ea <__aeabi_dmul+0xde>
   d90ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d90b0:	bf08      	it	eq
   d90b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d90b6:	f150 0000 	adcs.w	r0, r0, #0
   d90ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d90be:	bd70      	pop	{r4, r5, r6, pc}
   d90c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d90c4:	ea46 0101 	orr.w	r1, r6, r1
   d90c8:	ea40 0002 	orr.w	r0, r0, r2
   d90cc:	ea81 0103 	eor.w	r1, r1, r3
   d90d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d90d4:	bfc2      	ittt	gt
   d90d6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d90da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d90de:	bd70      	popgt	{r4, r5, r6, pc}
   d90e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d90e4:	f04f 0e00 	mov.w	lr, #0
   d90e8:	3c01      	subs	r4, #1
   d90ea:	f300 80ab 	bgt.w	d9244 <__aeabi_dmul+0x238>
   d90ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d90f2:	bfde      	ittt	le
   d90f4:	2000      	movle	r0, #0
   d90f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d90fa:	bd70      	pople	{r4, r5, r6, pc}
   d90fc:	f1c4 0400 	rsb	r4, r4, #0
   d9100:	3c20      	subs	r4, #32
   d9102:	da35      	bge.n	d9170 <__aeabi_dmul+0x164>
   d9104:	340c      	adds	r4, #12
   d9106:	dc1b      	bgt.n	d9140 <__aeabi_dmul+0x134>
   d9108:	f104 0414 	add.w	r4, r4, #20
   d910c:	f1c4 0520 	rsb	r5, r4, #32
   d9110:	fa00 f305 	lsl.w	r3, r0, r5
   d9114:	fa20 f004 	lsr.w	r0, r0, r4
   d9118:	fa01 f205 	lsl.w	r2, r1, r5
   d911c:	ea40 0002 	orr.w	r0, r0, r2
   d9120:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9124:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9128:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d912c:	fa21 f604 	lsr.w	r6, r1, r4
   d9130:	eb42 0106 	adc.w	r1, r2, r6
   d9134:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9138:	bf08      	it	eq
   d913a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d913e:	bd70      	pop	{r4, r5, r6, pc}
   d9140:	f1c4 040c 	rsb	r4, r4, #12
   d9144:	f1c4 0520 	rsb	r5, r4, #32
   d9148:	fa00 f304 	lsl.w	r3, r0, r4
   d914c:	fa20 f005 	lsr.w	r0, r0, r5
   d9150:	fa01 f204 	lsl.w	r2, r1, r4
   d9154:	ea40 0002 	orr.w	r0, r0, r2
   d9158:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d915c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9160:	f141 0100 	adc.w	r1, r1, #0
   d9164:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9168:	bf08      	it	eq
   d916a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d916e:	bd70      	pop	{r4, r5, r6, pc}
   d9170:	f1c4 0520 	rsb	r5, r4, #32
   d9174:	fa00 f205 	lsl.w	r2, r0, r5
   d9178:	ea4e 0e02 	orr.w	lr, lr, r2
   d917c:	fa20 f304 	lsr.w	r3, r0, r4
   d9180:	fa01 f205 	lsl.w	r2, r1, r5
   d9184:	ea43 0302 	orr.w	r3, r3, r2
   d9188:	fa21 f004 	lsr.w	r0, r1, r4
   d918c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9190:	fa21 f204 	lsr.w	r2, r1, r4
   d9194:	ea20 0002 	bic.w	r0, r0, r2
   d9198:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d919c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d91a0:	bf08      	it	eq
   d91a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d91a6:	bd70      	pop	{r4, r5, r6, pc}
   d91a8:	f094 0f00 	teq	r4, #0
   d91ac:	d10f      	bne.n	d91ce <__aeabi_dmul+0x1c2>
   d91ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d91b2:	0040      	lsls	r0, r0, #1
   d91b4:	eb41 0101 	adc.w	r1, r1, r1
   d91b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d91bc:	bf08      	it	eq
   d91be:	3c01      	subeq	r4, #1
   d91c0:	d0f7      	beq.n	d91b2 <__aeabi_dmul+0x1a6>
   d91c2:	ea41 0106 	orr.w	r1, r1, r6
   d91c6:	f095 0f00 	teq	r5, #0
   d91ca:	bf18      	it	ne
   d91cc:	4770      	bxne	lr
   d91ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d91d2:	0052      	lsls	r2, r2, #1
   d91d4:	eb43 0303 	adc.w	r3, r3, r3
   d91d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d91dc:	bf08      	it	eq
   d91de:	3d01      	subeq	r5, #1
   d91e0:	d0f7      	beq.n	d91d2 <__aeabi_dmul+0x1c6>
   d91e2:	ea43 0306 	orr.w	r3, r3, r6
   d91e6:	4770      	bx	lr
   d91e8:	ea94 0f0c 	teq	r4, ip
   d91ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d91f0:	bf18      	it	ne
   d91f2:	ea95 0f0c 	teqne	r5, ip
   d91f6:	d00c      	beq.n	d9212 <__aeabi_dmul+0x206>
   d91f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d91fc:	bf18      	it	ne
   d91fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9202:	d1d1      	bne.n	d91a8 <__aeabi_dmul+0x19c>
   d9204:	ea81 0103 	eor.w	r1, r1, r3
   d9208:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d920c:	f04f 0000 	mov.w	r0, #0
   d9210:	bd70      	pop	{r4, r5, r6, pc}
   d9212:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9216:	bf06      	itte	eq
   d9218:	4610      	moveq	r0, r2
   d921a:	4619      	moveq	r1, r3
   d921c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9220:	d019      	beq.n	d9256 <__aeabi_dmul+0x24a>
   d9222:	ea94 0f0c 	teq	r4, ip
   d9226:	d102      	bne.n	d922e <__aeabi_dmul+0x222>
   d9228:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d922c:	d113      	bne.n	d9256 <__aeabi_dmul+0x24a>
   d922e:	ea95 0f0c 	teq	r5, ip
   d9232:	d105      	bne.n	d9240 <__aeabi_dmul+0x234>
   d9234:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9238:	bf1c      	itt	ne
   d923a:	4610      	movne	r0, r2
   d923c:	4619      	movne	r1, r3
   d923e:	d10a      	bne.n	d9256 <__aeabi_dmul+0x24a>
   d9240:	ea81 0103 	eor.w	r1, r1, r3
   d9244:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9248:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d924c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9250:	f04f 0000 	mov.w	r0, #0
   d9254:	bd70      	pop	{r4, r5, r6, pc}
   d9256:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d925a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d925e:	bd70      	pop	{r4, r5, r6, pc}

000d9260 <__aeabi_ddiv>:
   d9260:	b570      	push	{r4, r5, r6, lr}
   d9262:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9266:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d926a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d926e:	bf1d      	ittte	ne
   d9270:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9274:	ea94 0f0c 	teqne	r4, ip
   d9278:	ea95 0f0c 	teqne	r5, ip
   d927c:	f000 f8a7 	bleq	d93ce <__aeabi_ddiv+0x16e>
   d9280:	eba4 0405 	sub.w	r4, r4, r5
   d9284:	ea81 0e03 	eor.w	lr, r1, r3
   d9288:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d928c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9290:	f000 8088 	beq.w	d93a4 <__aeabi_ddiv+0x144>
   d9294:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9298:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d929c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d92a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d92a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d92a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d92ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d92b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d92b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d92b8:	429d      	cmp	r5, r3
   d92ba:	bf08      	it	eq
   d92bc:	4296      	cmpeq	r6, r2
   d92be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d92c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d92c6:	d202      	bcs.n	d92ce <__aeabi_ddiv+0x6e>
   d92c8:	085b      	lsrs	r3, r3, #1
   d92ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d92ce:	1ab6      	subs	r6, r6, r2
   d92d0:	eb65 0503 	sbc.w	r5, r5, r3
   d92d4:	085b      	lsrs	r3, r3, #1
   d92d6:	ea4f 0232 	mov.w	r2, r2, rrx
   d92da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d92de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d92e2:	ebb6 0e02 	subs.w	lr, r6, r2
   d92e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d92ea:	bf22      	ittt	cs
   d92ec:	1ab6      	subcs	r6, r6, r2
   d92ee:	4675      	movcs	r5, lr
   d92f0:	ea40 000c 	orrcs.w	r0, r0, ip
   d92f4:	085b      	lsrs	r3, r3, #1
   d92f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d92fa:	ebb6 0e02 	subs.w	lr, r6, r2
   d92fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9302:	bf22      	ittt	cs
   d9304:	1ab6      	subcs	r6, r6, r2
   d9306:	4675      	movcs	r5, lr
   d9308:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d930c:	085b      	lsrs	r3, r3, #1
   d930e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9312:	ebb6 0e02 	subs.w	lr, r6, r2
   d9316:	eb75 0e03 	sbcs.w	lr, r5, r3
   d931a:	bf22      	ittt	cs
   d931c:	1ab6      	subcs	r6, r6, r2
   d931e:	4675      	movcs	r5, lr
   d9320:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9324:	085b      	lsrs	r3, r3, #1
   d9326:	ea4f 0232 	mov.w	r2, r2, rrx
   d932a:	ebb6 0e02 	subs.w	lr, r6, r2
   d932e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9332:	bf22      	ittt	cs
   d9334:	1ab6      	subcs	r6, r6, r2
   d9336:	4675      	movcs	r5, lr
   d9338:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d933c:	ea55 0e06 	orrs.w	lr, r5, r6
   d9340:	d018      	beq.n	d9374 <__aeabi_ddiv+0x114>
   d9342:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9346:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d934a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d934e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9352:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9356:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d935a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d935e:	d1c0      	bne.n	d92e2 <__aeabi_ddiv+0x82>
   d9360:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9364:	d10b      	bne.n	d937e <__aeabi_ddiv+0x11e>
   d9366:	ea41 0100 	orr.w	r1, r1, r0
   d936a:	f04f 0000 	mov.w	r0, #0
   d936e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9372:	e7b6      	b.n	d92e2 <__aeabi_ddiv+0x82>
   d9374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9378:	bf04      	itt	eq
   d937a:	4301      	orreq	r1, r0
   d937c:	2000      	moveq	r0, #0
   d937e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9382:	bf88      	it	hi
   d9384:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9388:	f63f aeaf 	bhi.w	d90ea <__aeabi_dmul+0xde>
   d938c:	ebb5 0c03 	subs.w	ip, r5, r3
   d9390:	bf04      	itt	eq
   d9392:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d939a:	f150 0000 	adcs.w	r0, r0, #0
   d939e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d93a2:	bd70      	pop	{r4, r5, r6, pc}
   d93a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d93a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d93ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d93b0:	bfc2      	ittt	gt
   d93b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d93b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d93ba:	bd70      	popgt	{r4, r5, r6, pc}
   d93bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d93c0:	f04f 0e00 	mov.w	lr, #0
   d93c4:	3c01      	subs	r4, #1
   d93c6:	e690      	b.n	d90ea <__aeabi_dmul+0xde>
   d93c8:	ea45 0e06 	orr.w	lr, r5, r6
   d93cc:	e68d      	b.n	d90ea <__aeabi_dmul+0xde>
   d93ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d93d2:	ea94 0f0c 	teq	r4, ip
   d93d6:	bf08      	it	eq
   d93d8:	ea95 0f0c 	teqeq	r5, ip
   d93dc:	f43f af3b 	beq.w	d9256 <__aeabi_dmul+0x24a>
   d93e0:	ea94 0f0c 	teq	r4, ip
   d93e4:	d10a      	bne.n	d93fc <__aeabi_ddiv+0x19c>
   d93e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d93ea:	f47f af34 	bne.w	d9256 <__aeabi_dmul+0x24a>
   d93ee:	ea95 0f0c 	teq	r5, ip
   d93f2:	f47f af25 	bne.w	d9240 <__aeabi_dmul+0x234>
   d93f6:	4610      	mov	r0, r2
   d93f8:	4619      	mov	r1, r3
   d93fa:	e72c      	b.n	d9256 <__aeabi_dmul+0x24a>
   d93fc:	ea95 0f0c 	teq	r5, ip
   d9400:	d106      	bne.n	d9410 <__aeabi_ddiv+0x1b0>
   d9402:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9406:	f43f aefd 	beq.w	d9204 <__aeabi_dmul+0x1f8>
   d940a:	4610      	mov	r0, r2
   d940c:	4619      	mov	r1, r3
   d940e:	e722      	b.n	d9256 <__aeabi_dmul+0x24a>
   d9410:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9414:	bf18      	it	ne
   d9416:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d941a:	f47f aec5 	bne.w	d91a8 <__aeabi_dmul+0x19c>
   d941e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9422:	f47f af0d 	bne.w	d9240 <__aeabi_dmul+0x234>
   d9426:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d942a:	f47f aeeb 	bne.w	d9204 <__aeabi_dmul+0x1f8>
   d942e:	e712      	b.n	d9256 <__aeabi_dmul+0x24a>

000d9430 <__gedf2>:
   d9430:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d9434:	e006      	b.n	d9444 <__cmpdf2+0x4>
   d9436:	bf00      	nop

000d9438 <__ledf2>:
   d9438:	f04f 0c01 	mov.w	ip, #1
   d943c:	e002      	b.n	d9444 <__cmpdf2+0x4>
   d943e:	bf00      	nop

000d9440 <__cmpdf2>:
   d9440:	f04f 0c01 	mov.w	ip, #1
   d9444:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9448:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d944c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9450:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9454:	bf18      	it	ne
   d9456:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d945a:	d01b      	beq.n	d9494 <__cmpdf2+0x54>
   d945c:	b001      	add	sp, #4
   d945e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9462:	bf0c      	ite	eq
   d9464:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9468:	ea91 0f03 	teqne	r1, r3
   d946c:	bf02      	ittt	eq
   d946e:	ea90 0f02 	teqeq	r0, r2
   d9472:	2000      	moveq	r0, #0
   d9474:	4770      	bxeq	lr
   d9476:	f110 0f00 	cmn.w	r0, #0
   d947a:	ea91 0f03 	teq	r1, r3
   d947e:	bf58      	it	pl
   d9480:	4299      	cmppl	r1, r3
   d9482:	bf08      	it	eq
   d9484:	4290      	cmpeq	r0, r2
   d9486:	bf2c      	ite	cs
   d9488:	17d8      	asrcs	r0, r3, #31
   d948a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d948e:	f040 0001 	orr.w	r0, r0, #1
   d9492:	4770      	bx	lr
   d9494:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9498:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d949c:	d102      	bne.n	d94a4 <__cmpdf2+0x64>
   d949e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d94a2:	d107      	bne.n	d94b4 <__cmpdf2+0x74>
   d94a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d94a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d94ac:	d1d6      	bne.n	d945c <__cmpdf2+0x1c>
   d94ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d94b2:	d0d3      	beq.n	d945c <__cmpdf2+0x1c>
   d94b4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d94b8:	4770      	bx	lr
   d94ba:	bf00      	nop

000d94bc <__aeabi_cdrcmple>:
   d94bc:	4684      	mov	ip, r0
   d94be:	4610      	mov	r0, r2
   d94c0:	4662      	mov	r2, ip
   d94c2:	468c      	mov	ip, r1
   d94c4:	4619      	mov	r1, r3
   d94c6:	4663      	mov	r3, ip
   d94c8:	e000      	b.n	d94cc <__aeabi_cdcmpeq>
   d94ca:	bf00      	nop

000d94cc <__aeabi_cdcmpeq>:
   d94cc:	b501      	push	{r0, lr}
   d94ce:	f7ff ffb7 	bl	d9440 <__cmpdf2>
   d94d2:	2800      	cmp	r0, #0
   d94d4:	bf48      	it	mi
   d94d6:	f110 0f00 	cmnmi.w	r0, #0
   d94da:	bd01      	pop	{r0, pc}

000d94dc <__aeabi_dcmpeq>:
   d94dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d94e0:	f7ff fff4 	bl	d94cc <__aeabi_cdcmpeq>
   d94e4:	bf0c      	ite	eq
   d94e6:	2001      	moveq	r0, #1
   d94e8:	2000      	movne	r0, #0
   d94ea:	f85d fb08 	ldr.w	pc, [sp], #8
   d94ee:	bf00      	nop

000d94f0 <__aeabi_dcmplt>:
   d94f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d94f4:	f7ff ffea 	bl	d94cc <__aeabi_cdcmpeq>
   d94f8:	bf34      	ite	cc
   d94fa:	2001      	movcc	r0, #1
   d94fc:	2000      	movcs	r0, #0
   d94fe:	f85d fb08 	ldr.w	pc, [sp], #8
   d9502:	bf00      	nop

000d9504 <__aeabi_dcmple>:
   d9504:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9508:	f7ff ffe0 	bl	d94cc <__aeabi_cdcmpeq>
   d950c:	bf94      	ite	ls
   d950e:	2001      	movls	r0, #1
   d9510:	2000      	movhi	r0, #0
   d9512:	f85d fb08 	ldr.w	pc, [sp], #8
   d9516:	bf00      	nop

000d9518 <__aeabi_dcmpge>:
   d9518:	f84d ed08 	str.w	lr, [sp, #-8]!
   d951c:	f7ff ffce 	bl	d94bc <__aeabi_cdrcmple>
   d9520:	bf94      	ite	ls
   d9522:	2001      	movls	r0, #1
   d9524:	2000      	movhi	r0, #0
   d9526:	f85d fb08 	ldr.w	pc, [sp], #8
   d952a:	bf00      	nop

000d952c <__aeabi_dcmpgt>:
   d952c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9530:	f7ff ffc4 	bl	d94bc <__aeabi_cdrcmple>
   d9534:	bf34      	ite	cc
   d9536:	2001      	movcc	r0, #1
   d9538:	2000      	movcs	r0, #0
   d953a:	f85d fb08 	ldr.w	pc, [sp], #8
   d953e:	bf00      	nop

000d9540 <__aeabi_dcmpun>:
   d9540:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9544:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9548:	d102      	bne.n	d9550 <__aeabi_dcmpun+0x10>
   d954a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d954e:	d10a      	bne.n	d9566 <__aeabi_dcmpun+0x26>
   d9550:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9554:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9558:	d102      	bne.n	d9560 <__aeabi_dcmpun+0x20>
   d955a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d955e:	d102      	bne.n	d9566 <__aeabi_dcmpun+0x26>
   d9560:	f04f 0000 	mov.w	r0, #0
   d9564:	4770      	bx	lr
   d9566:	f04f 0001 	mov.w	r0, #1
   d956a:	4770      	bx	lr

000d956c <__aeabi_d2iz>:
   d956c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9570:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9574:	d215      	bcs.n	d95a2 <__aeabi_d2iz+0x36>
   d9576:	d511      	bpl.n	d959c <__aeabi_d2iz+0x30>
   d9578:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d957c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9580:	d912      	bls.n	d95a8 <__aeabi_d2iz+0x3c>
   d9582:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9586:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d958a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d958e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9592:	fa23 f002 	lsr.w	r0, r3, r2
   d9596:	bf18      	it	ne
   d9598:	4240      	negne	r0, r0
   d959a:	4770      	bx	lr
   d959c:	f04f 0000 	mov.w	r0, #0
   d95a0:	4770      	bx	lr
   d95a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d95a6:	d105      	bne.n	d95b4 <__aeabi_d2iz+0x48>
   d95a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d95ac:	bf08      	it	eq
   d95ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d95b2:	4770      	bx	lr
   d95b4:	f04f 0000 	mov.w	r0, #0
   d95b8:	4770      	bx	lr
   d95ba:	bf00      	nop

000d95bc <__aeabi_d2uiz>:
   d95bc:	004a      	lsls	r2, r1, #1
   d95be:	d211      	bcs.n	d95e4 <__aeabi_d2uiz+0x28>
   d95c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d95c4:	d211      	bcs.n	d95ea <__aeabi_d2uiz+0x2e>
   d95c6:	d50d      	bpl.n	d95e4 <__aeabi_d2uiz+0x28>
   d95c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d95cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d95d0:	d40e      	bmi.n	d95f0 <__aeabi_d2uiz+0x34>
   d95d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d95d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d95da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d95de:	fa23 f002 	lsr.w	r0, r3, r2
   d95e2:	4770      	bx	lr
   d95e4:	f04f 0000 	mov.w	r0, #0
   d95e8:	4770      	bx	lr
   d95ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d95ee:	d102      	bne.n	d95f6 <__aeabi_d2uiz+0x3a>
   d95f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d95f4:	4770      	bx	lr
   d95f6:	f04f 0000 	mov.w	r0, #0
   d95fa:	4770      	bx	lr

000d95fc <__aeabi_d2f>:
   d95fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9600:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9604:	bf24      	itt	cs
   d9606:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d960a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d960e:	d90d      	bls.n	d962c <__aeabi_d2f+0x30>
   d9610:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9614:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9618:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d961c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9620:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9624:	bf08      	it	eq
   d9626:	f020 0001 	biceq.w	r0, r0, #1
   d962a:	4770      	bx	lr
   d962c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9630:	d121      	bne.n	d9676 <__aeabi_d2f+0x7a>
   d9632:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9636:	bfbc      	itt	lt
   d9638:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d963c:	4770      	bxlt	lr
   d963e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9642:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9646:	f1c2 0218 	rsb	r2, r2, #24
   d964a:	f1c2 0c20 	rsb	ip, r2, #32
   d964e:	fa10 f30c 	lsls.w	r3, r0, ip
   d9652:	fa20 f002 	lsr.w	r0, r0, r2
   d9656:	bf18      	it	ne
   d9658:	f040 0001 	orrne.w	r0, r0, #1
   d965c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9660:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9664:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9668:	ea40 000c 	orr.w	r0, r0, ip
   d966c:	fa23 f302 	lsr.w	r3, r3, r2
   d9670:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9674:	e7cc      	b.n	d9610 <__aeabi_d2f+0x14>
   d9676:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d967a:	d107      	bne.n	d968c <__aeabi_d2f+0x90>
   d967c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9680:	bf1e      	ittt	ne
   d9682:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9686:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d968a:	4770      	bxne	lr
   d968c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9690:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9694:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9698:	4770      	bx	lr
   d969a:	bf00      	nop

000d969c <asctime>:
   d969c:	4b09      	ldr	r3, [pc, #36]	; (d96c4 <asctime+0x28>)
   d969e:	b570      	push	{r4, r5, r6, lr}
   d96a0:	681c      	ldr	r4, [r3, #0]
   d96a2:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d96a4:	4606      	mov	r6, r0
   d96a6:	b93d      	cbnz	r5, d96b8 <asctime+0x1c>
   d96a8:	201a      	movs	r0, #26
   d96aa:	f7fd fb4b 	bl	d6d44 <malloc>
   d96ae:	221a      	movs	r2, #26
   d96b0:	6420      	str	r0, [r4, #64]	; 0x40
   d96b2:	4629      	mov	r1, r5
   d96b4:	f000 f9f1 	bl	d9a9a <memset>
   d96b8:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d96ba:	4630      	mov	r0, r6
   d96bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d96c0:	f000 b802 	b.w	d96c8 <asctime_r>
   d96c4:	2003dfdc 	.word	0x2003dfdc

000d96c8 <asctime_r>:
   d96c8:	b510      	push	{r4, lr}
   d96ca:	460c      	mov	r4, r1
   d96cc:	6941      	ldr	r1, [r0, #20]
   d96ce:	6903      	ldr	r3, [r0, #16]
   d96d0:	6982      	ldr	r2, [r0, #24]
   d96d2:	b086      	sub	sp, #24
   d96d4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d96d8:	9104      	str	r1, [sp, #16]
   d96da:	6801      	ldr	r1, [r0, #0]
   d96dc:	9103      	str	r1, [sp, #12]
   d96de:	6841      	ldr	r1, [r0, #4]
   d96e0:	9102      	str	r1, [sp, #8]
   d96e2:	6881      	ldr	r1, [r0, #8]
   d96e4:	9101      	str	r1, [sp, #4]
   d96e6:	68c1      	ldr	r1, [r0, #12]
   d96e8:	9100      	str	r1, [sp, #0]
   d96ea:	4907      	ldr	r1, [pc, #28]	; (d9708 <asctime_r+0x40>)
   d96ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d96f0:	440b      	add	r3, r1
   d96f2:	4906      	ldr	r1, [pc, #24]	; (d970c <asctime_r+0x44>)
   d96f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d96f8:	440a      	add	r2, r1
   d96fa:	4620      	mov	r0, r4
   d96fc:	4904      	ldr	r1, [pc, #16]	; (d9710 <asctime_r+0x48>)
   d96fe:	f7fd fb39 	bl	d6d74 <siprintf>
   d9702:	4620      	mov	r0, r4
   d9704:	b006      	add	sp, #24
   d9706:	bd10      	pop	{r4, pc}
   d9708:	000dd5dd 	.word	0x000dd5dd
   d970c:	000dd5c8 	.word	0x000dd5c8
   d9710:	000dd601 	.word	0x000dd601

000d9714 <atoi>:
   d9714:	220a      	movs	r2, #10
   d9716:	2100      	movs	r1, #0
   d9718:	f002 b874 	b.w	db804 <strtol>

000d971c <__cxa_atexit>:
   d971c:	b510      	push	{r4, lr}
   d971e:	4c05      	ldr	r4, [pc, #20]	; (d9734 <__cxa_atexit+0x18>)
   d9720:	4613      	mov	r3, r2
   d9722:	b12c      	cbz	r4, d9730 <__cxa_atexit+0x14>
   d9724:	460a      	mov	r2, r1
   d9726:	4601      	mov	r1, r0
   d9728:	2002      	movs	r0, #2
   d972a:	f3af 8000 	nop.w
   d972e:	bd10      	pop	{r4, pc}
   d9730:	4620      	mov	r0, r4
   d9732:	bd10      	pop	{r4, pc}
   d9734:	00000000 	.word	0x00000000

000d9738 <gmtime>:
   d9738:	b538      	push	{r3, r4, r5, lr}
   d973a:	4b07      	ldr	r3, [pc, #28]	; (d9758 <gmtime+0x20>)
   d973c:	681c      	ldr	r4, [r3, #0]
   d973e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9740:	4605      	mov	r5, r0
   d9742:	b91b      	cbnz	r3, d974c <gmtime+0x14>
   d9744:	2024      	movs	r0, #36	; 0x24
   d9746:	f7fd fafd 	bl	d6d44 <malloc>
   d974a:	63e0      	str	r0, [r4, #60]	; 0x3c
   d974c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d974e:	4628      	mov	r0, r5
   d9750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9754:	f000 b802 	b.w	d975c <gmtime_r>
   d9758:	2003dfdc 	.word	0x2003dfdc

000d975c <gmtime_r>:
   d975c:	6802      	ldr	r2, [r0, #0]
   d975e:	4b47      	ldr	r3, [pc, #284]	; (d987c <gmtime_r+0x120>)
   d9760:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9762:	fb92 f4f3 	sdiv	r4, r2, r3
   d9766:	fb03 2214 	mls	r2, r3, r4, r2
   d976a:	2a00      	cmp	r2, #0
   d976c:	bfbc      	itt	lt
   d976e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d9772:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d9776:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d977a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d977e:	fb92 f3f0 	sdiv	r3, r2, r0
   d9782:	fb00 2213 	mls	r2, r0, r3, r2
   d9786:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d978a:	bfac      	ite	ge
   d978c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d9790:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d9794:	608b      	str	r3, [r1, #8]
   d9796:	fb92 f3f0 	sdiv	r3, r2, r0
   d979a:	fb00 2213 	mls	r2, r0, r3, r2
   d979e:	604b      	str	r3, [r1, #4]
   d97a0:	600a      	str	r2, [r1, #0]
   d97a2:	2307      	movs	r3, #7
   d97a4:	1ce2      	adds	r2, r4, #3
   d97a6:	fb92 f3f3 	sdiv	r3, r2, r3
   d97aa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d97ae:	1ad3      	subs	r3, r2, r3
   d97b0:	618b      	str	r3, [r1, #24]
   d97b2:	4b33      	ldr	r3, [pc, #204]	; (d9880 <gmtime_r+0x124>)
   d97b4:	4d33      	ldr	r5, [pc, #204]	; (d9884 <gmtime_r+0x128>)
   d97b6:	fb94 f5f5 	sdiv	r5, r4, r5
   d97ba:	fb03 4405 	mla	r4, r3, r5, r4
   d97be:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d97c2:	fbb4 f2f2 	udiv	r2, r4, r2
   d97c6:	4422      	add	r2, r4
   d97c8:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d97cc:	fbb4 f3f7 	udiv	r3, r4, r7
   d97d0:	1ad2      	subs	r2, r2, r3
   d97d2:	482d      	ldr	r0, [pc, #180]	; (d9888 <gmtime_r+0x12c>)
   d97d4:	fbb4 f0f0 	udiv	r0, r4, r0
   d97d8:	f648 6694 	movw	r6, #36500	; 0x8e94
   d97dc:	1a13      	subs	r3, r2, r0
   d97de:	fbb3 f6f6 	udiv	r6, r3, r6
   d97e2:	4434      	add	r4, r6
   d97e4:	f240 126d 	movw	r2, #365	; 0x16d
   d97e8:	fbb3 f0f2 	udiv	r0, r3, r2
   d97ec:	fbb3 f3f7 	udiv	r3, r3, r7
   d97f0:	1ae3      	subs	r3, r4, r3
   d97f2:	fb02 3310 	mls	r3, r2, r0, r3
   d97f6:	2499      	movs	r4, #153	; 0x99
   d97f8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d97fc:	3202      	adds	r2, #2
   d97fe:	fbb2 f2f4 	udiv	r2, r2, r4
   d9802:	2a0a      	cmp	r2, #10
   d9804:	fb04 f402 	mul.w	r4, r4, r2
   d9808:	f104 0602 	add.w	r6, r4, #2
   d980c:	f04f 0405 	mov.w	r4, #5
   d9810:	fbb6 f4f4 	udiv	r4, r6, r4
   d9814:	bf34      	ite	cc
   d9816:	2602      	movcc	r6, #2
   d9818:	f06f 0609 	mvncs.w	r6, #9
   d981c:	4416      	add	r6, r2
   d981e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9822:	fb02 0505 	mla	r5, r2, r5, r0
   d9826:	1c5f      	adds	r7, r3, #1
   d9828:	2e01      	cmp	r6, #1
   d982a:	bf98      	it	ls
   d982c:	3501      	addls	r5, #1
   d982e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d9832:	eba7 0704 	sub.w	r7, r7, r4
   d9836:	d302      	bcc.n	d983e <gmtime_r+0xe2>
   d9838:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d983c:	e014      	b.n	d9868 <gmtime_r+0x10c>
   d983e:	0782      	lsls	r2, r0, #30
   d9840:	d105      	bne.n	d984e <gmtime_r+0xf2>
   d9842:	2464      	movs	r4, #100	; 0x64
   d9844:	fbb0 f2f4 	udiv	r2, r0, r4
   d9848:	fb04 0212 	mls	r2, r4, r2, r0
   d984c:	b94a      	cbnz	r2, d9862 <gmtime_r+0x106>
   d984e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9852:	fbb0 f4f2 	udiv	r4, r0, r2
   d9856:	fb02 0014 	mls	r0, r2, r4, r0
   d985a:	fab0 f280 	clz	r2, r0
   d985e:	0952      	lsrs	r2, r2, #5
   d9860:	e000      	b.n	d9864 <gmtime_r+0x108>
   d9862:	2201      	movs	r2, #1
   d9864:	333b      	adds	r3, #59	; 0x3b
   d9866:	441a      	add	r2, r3
   d9868:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d986c:	2300      	movs	r3, #0
   d986e:	61ca      	str	r2, [r1, #28]
   d9870:	614d      	str	r5, [r1, #20]
   d9872:	610e      	str	r6, [r1, #16]
   d9874:	60cf      	str	r7, [r1, #12]
   d9876:	620b      	str	r3, [r1, #32]
   d9878:	4608      	mov	r0, r1
   d987a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d987c:	00015180 	.word	0x00015180
   d9880:	fffdc54f 	.word	0xfffdc54f
   d9884:	00023ab1 	.word	0x00023ab1
   d9888:	00023ab0 	.word	0x00023ab0

000d988c <localtime>:
   d988c:	b538      	push	{r3, r4, r5, lr}
   d988e:	4b07      	ldr	r3, [pc, #28]	; (d98ac <localtime+0x20>)
   d9890:	681c      	ldr	r4, [r3, #0]
   d9892:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9894:	4605      	mov	r5, r0
   d9896:	b91b      	cbnz	r3, d98a0 <localtime+0x14>
   d9898:	2024      	movs	r0, #36	; 0x24
   d989a:	f7fd fa53 	bl	d6d44 <malloc>
   d989e:	63e0      	str	r0, [r4, #60]	; 0x3c
   d98a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d98a2:	4628      	mov	r0, r5
   d98a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d98a8:	f000 b802 	b.w	d98b0 <localtime_r>
   d98ac:	2003dfdc 	.word	0x2003dfdc

000d98b0 <localtime_r>:
   d98b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d98b4:	460c      	mov	r4, r1
   d98b6:	4680      	mov	r8, r0
   d98b8:	f002 fdf0 	bl	dc49c <__gettzinfo>
   d98bc:	4621      	mov	r1, r4
   d98be:	4607      	mov	r7, r0
   d98c0:	4640      	mov	r0, r8
   d98c2:	f7ff ff4b 	bl	d975c <gmtime_r>
   d98c6:	6946      	ldr	r6, [r0, #20]
   d98c8:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d98cc:	07b3      	lsls	r3, r6, #30
   d98ce:	4604      	mov	r4, r0
   d98d0:	d105      	bne.n	d98de <localtime_r+0x2e>
   d98d2:	2264      	movs	r2, #100	; 0x64
   d98d4:	fb96 f3f2 	sdiv	r3, r6, r2
   d98d8:	fb02 6313 	mls	r3, r2, r3, r6
   d98dc:	b94b      	cbnz	r3, d98f2 <localtime_r+0x42>
   d98de:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d98e2:	fb96 f3f5 	sdiv	r3, r6, r5
   d98e6:	fb05 6513 	mls	r5, r5, r3, r6
   d98ea:	fab5 f385 	clz	r3, r5
   d98ee:	095b      	lsrs	r3, r3, #5
   d98f0:	e000      	b.n	d98f4 <localtime_r+0x44>
   d98f2:	2301      	movs	r3, #1
   d98f4:	4a5f      	ldr	r2, [pc, #380]	; (d9a74 <localtime_r+0x1c4>)
   d98f6:	2530      	movs	r5, #48	; 0x30
   d98f8:	fb05 2503 	mla	r5, r5, r3, r2
   d98fc:	f002 f8cc 	bl	dba98 <__tz_lock>
   d9900:	f002 f8cc 	bl	dba9c <_tzset_unlocked>
   d9904:	4b5c      	ldr	r3, [pc, #368]	; (d9a78 <localtime_r+0x1c8>)
   d9906:	681b      	ldr	r3, [r3, #0]
   d9908:	b1f3      	cbz	r3, d9948 <localtime_r+0x98>
   d990a:	687b      	ldr	r3, [r7, #4]
   d990c:	429e      	cmp	r6, r3
   d990e:	d105      	bne.n	d991c <localtime_r+0x6c>
   d9910:	6839      	ldr	r1, [r7, #0]
   d9912:	f8d8 3000 	ldr.w	r3, [r8]
   d9916:	69fa      	ldr	r2, [r7, #28]
   d9918:	b941      	cbnz	r1, d992c <localtime_r+0x7c>
   d991a:	e00a      	b.n	d9932 <localtime_r+0x82>
   d991c:	4630      	mov	r0, r6
   d991e:	f002 f813 	bl	db948 <__tzcalc_limits>
   d9922:	2800      	cmp	r0, #0
   d9924:	d1f4      	bne.n	d9910 <localtime_r+0x60>
   d9926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d992a:	e00d      	b.n	d9948 <localtime_r+0x98>
   d992c:	4293      	cmp	r3, r2
   d992e:	db08      	blt.n	d9942 <localtime_r+0x92>
   d9930:	e001      	b.n	d9936 <localtime_r+0x86>
   d9932:	4293      	cmp	r3, r2
   d9934:	da07      	bge.n	d9946 <localtime_r+0x96>
   d9936:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d9938:	4293      	cmp	r3, r2
   d993a:	bfac      	ite	ge
   d993c:	2300      	movge	r3, #0
   d993e:	2301      	movlt	r3, #1
   d9940:	e002      	b.n	d9948 <localtime_r+0x98>
   d9942:	2300      	movs	r3, #0
   d9944:	e000      	b.n	d9948 <localtime_r+0x98>
   d9946:	2301      	movs	r3, #1
   d9948:	6223      	str	r3, [r4, #32]
   d994a:	6a23      	ldr	r3, [r4, #32]
   d994c:	2b01      	cmp	r3, #1
   d994e:	bf0c      	ite	eq
   d9950:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d9952:	6a39      	ldrne	r1, [r7, #32]
   d9954:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9958:	203c      	movs	r0, #60	; 0x3c
   d995a:	fb91 f6f3 	sdiv	r6, r1, r3
   d995e:	fb03 1316 	mls	r3, r3, r6, r1
   d9962:	6861      	ldr	r1, [r4, #4]
   d9964:	fb93 f2f0 	sdiv	r2, r3, r0
   d9968:	fb00 3012 	mls	r0, r0, r2, r3
   d996c:	6823      	ldr	r3, [r4, #0]
   d996e:	1a89      	subs	r1, r1, r2
   d9970:	68a2      	ldr	r2, [r4, #8]
   d9972:	6061      	str	r1, [r4, #4]
   d9974:	1a1b      	subs	r3, r3, r0
   d9976:	1b92      	subs	r2, r2, r6
   d9978:	2b3b      	cmp	r3, #59	; 0x3b
   d997a:	6023      	str	r3, [r4, #0]
   d997c:	60a2      	str	r2, [r4, #8]
   d997e:	dd03      	ble.n	d9988 <localtime_r+0xd8>
   d9980:	3101      	adds	r1, #1
   d9982:	6061      	str	r1, [r4, #4]
   d9984:	3b3c      	subs	r3, #60	; 0x3c
   d9986:	e004      	b.n	d9992 <localtime_r+0xe2>
   d9988:	2b00      	cmp	r3, #0
   d998a:	da03      	bge.n	d9994 <localtime_r+0xe4>
   d998c:	3901      	subs	r1, #1
   d998e:	6061      	str	r1, [r4, #4]
   d9990:	333c      	adds	r3, #60	; 0x3c
   d9992:	6023      	str	r3, [r4, #0]
   d9994:	6863      	ldr	r3, [r4, #4]
   d9996:	2b3b      	cmp	r3, #59	; 0x3b
   d9998:	dd03      	ble.n	d99a2 <localtime_r+0xf2>
   d999a:	3201      	adds	r2, #1
   d999c:	60a2      	str	r2, [r4, #8]
   d999e:	3b3c      	subs	r3, #60	; 0x3c
   d99a0:	e004      	b.n	d99ac <localtime_r+0xfc>
   d99a2:	2b00      	cmp	r3, #0
   d99a4:	da03      	bge.n	d99ae <localtime_r+0xfe>
   d99a6:	3a01      	subs	r2, #1
   d99a8:	60a2      	str	r2, [r4, #8]
   d99aa:	333c      	adds	r3, #60	; 0x3c
   d99ac:	6063      	str	r3, [r4, #4]
   d99ae:	68a3      	ldr	r3, [r4, #8]
   d99b0:	2b17      	cmp	r3, #23
   d99b2:	dd22      	ble.n	d99fa <localtime_r+0x14a>
   d99b4:	69e2      	ldr	r2, [r4, #28]
   d99b6:	3201      	adds	r2, #1
   d99b8:	61e2      	str	r2, [r4, #28]
   d99ba:	69a2      	ldr	r2, [r4, #24]
   d99bc:	3201      	adds	r2, #1
   d99be:	2a06      	cmp	r2, #6
   d99c0:	bfc8      	it	gt
   d99c2:	2200      	movgt	r2, #0
   d99c4:	61a2      	str	r2, [r4, #24]
   d99c6:	68e2      	ldr	r2, [r4, #12]
   d99c8:	3b18      	subs	r3, #24
   d99ca:	3201      	adds	r2, #1
   d99cc:	60a3      	str	r3, [r4, #8]
   d99ce:	6923      	ldr	r3, [r4, #16]
   d99d0:	60e2      	str	r2, [r4, #12]
   d99d2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d99d6:	428a      	cmp	r2, r1
   d99d8:	dd46      	ble.n	d9a68 <localtime_r+0x1b8>
   d99da:	3301      	adds	r3, #1
   d99dc:	2b0c      	cmp	r3, #12
   d99de:	bf0c      	ite	eq
   d99e0:	6963      	ldreq	r3, [r4, #20]
   d99e2:	6123      	strne	r3, [r4, #16]
   d99e4:	eba2 0201 	sub.w	r2, r2, r1
   d99e8:	60e2      	str	r2, [r4, #12]
   d99ea:	bf01      	itttt	eq
   d99ec:	3301      	addeq	r3, #1
   d99ee:	2200      	moveq	r2, #0
   d99f0:	6122      	streq	r2, [r4, #16]
   d99f2:	6163      	streq	r3, [r4, #20]
   d99f4:	bf08      	it	eq
   d99f6:	61e2      	streq	r2, [r4, #28]
   d99f8:	e036      	b.n	d9a68 <localtime_r+0x1b8>
   d99fa:	2b00      	cmp	r3, #0
   d99fc:	da34      	bge.n	d9a68 <localtime_r+0x1b8>
   d99fe:	69e2      	ldr	r2, [r4, #28]
   d9a00:	3a01      	subs	r2, #1
   d9a02:	61e2      	str	r2, [r4, #28]
   d9a04:	69a2      	ldr	r2, [r4, #24]
   d9a06:	3a01      	subs	r2, #1
   d9a08:	bf48      	it	mi
   d9a0a:	2206      	movmi	r2, #6
   d9a0c:	61a2      	str	r2, [r4, #24]
   d9a0e:	68e2      	ldr	r2, [r4, #12]
   d9a10:	3318      	adds	r3, #24
   d9a12:	3a01      	subs	r2, #1
   d9a14:	60e2      	str	r2, [r4, #12]
   d9a16:	60a3      	str	r3, [r4, #8]
   d9a18:	bb32      	cbnz	r2, d9a68 <localtime_r+0x1b8>
   d9a1a:	6923      	ldr	r3, [r4, #16]
   d9a1c:	3b01      	subs	r3, #1
   d9a1e:	d401      	bmi.n	d9a24 <localtime_r+0x174>
   d9a20:	6123      	str	r3, [r4, #16]
   d9a22:	e01d      	b.n	d9a60 <localtime_r+0x1b0>
   d9a24:	230b      	movs	r3, #11
   d9a26:	6123      	str	r3, [r4, #16]
   d9a28:	6963      	ldr	r3, [r4, #20]
   d9a2a:	1e5a      	subs	r2, r3, #1
   d9a2c:	f012 0f03 	tst.w	r2, #3
   d9a30:	6162      	str	r2, [r4, #20]
   d9a32:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d9a36:	d105      	bne.n	d9a44 <localtime_r+0x194>
   d9a38:	2164      	movs	r1, #100	; 0x64
   d9a3a:	fb93 f2f1 	sdiv	r2, r3, r1
   d9a3e:	fb01 3212 	mls	r2, r1, r2, r3
   d9a42:	b94a      	cbnz	r2, d9a58 <localtime_r+0x1a8>
   d9a44:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d9a48:	fb93 f2f1 	sdiv	r2, r3, r1
   d9a4c:	fb01 3312 	mls	r3, r1, r2, r3
   d9a50:	fab3 f383 	clz	r3, r3
   d9a54:	095b      	lsrs	r3, r3, #5
   d9a56:	e000      	b.n	d9a5a <localtime_r+0x1aa>
   d9a58:	2301      	movs	r3, #1
   d9a5a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d9a5e:	61e3      	str	r3, [r4, #28]
   d9a60:	6923      	ldr	r3, [r4, #16]
   d9a62:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d9a66:	60e3      	str	r3, [r4, #12]
   d9a68:	f002 f817 	bl	dba9a <__tz_unlock>
   d9a6c:	4620      	mov	r0, r4
   d9a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9a72:	bf00      	nop
   d9a74:	000dd7ec 	.word	0x000dd7ec
   d9a78:	2003e7e4 	.word	0x2003e7e4

000d9a7c <_localeconv_r>:
   d9a7c:	4800      	ldr	r0, [pc, #0]	; (d9a80 <_localeconv_r+0x4>)
   d9a7e:	4770      	bx	lr
   d9a80:	2003dfe0 	.word	0x2003dfe0

000d9a84 <memcpy>:
   d9a84:	b510      	push	{r4, lr}
   d9a86:	1e43      	subs	r3, r0, #1
   d9a88:	440a      	add	r2, r1
   d9a8a:	4291      	cmp	r1, r2
   d9a8c:	d004      	beq.n	d9a98 <memcpy+0x14>
   d9a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9a92:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9a96:	e7f8      	b.n	d9a8a <memcpy+0x6>
   d9a98:	bd10      	pop	{r4, pc}

000d9a9a <memset>:
   d9a9a:	4402      	add	r2, r0
   d9a9c:	4603      	mov	r3, r0
   d9a9e:	4293      	cmp	r3, r2
   d9aa0:	d002      	beq.n	d9aa8 <memset+0xe>
   d9aa2:	f803 1b01 	strb.w	r1, [r3], #1
   d9aa6:	e7fa      	b.n	d9a9e <memset+0x4>
   d9aa8:	4770      	bx	lr
	...

000d9aac <validate_structure>:
   d9aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d9aae:	6801      	ldr	r1, [r0, #0]
   d9ab0:	293b      	cmp	r1, #59	; 0x3b
   d9ab2:	4604      	mov	r4, r0
   d9ab4:	d911      	bls.n	d9ada <validate_structure+0x2e>
   d9ab6:	223c      	movs	r2, #60	; 0x3c
   d9ab8:	4668      	mov	r0, sp
   d9aba:	f002 f979 	bl	dbdb0 <div>
   d9abe:	9a01      	ldr	r2, [sp, #4]
   d9ac0:	6863      	ldr	r3, [r4, #4]
   d9ac2:	9900      	ldr	r1, [sp, #0]
   d9ac4:	2a00      	cmp	r2, #0
   d9ac6:	440b      	add	r3, r1
   d9ac8:	6063      	str	r3, [r4, #4]
   d9aca:	bfbb      	ittet	lt
   d9acc:	323c      	addlt	r2, #60	; 0x3c
   d9ace:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d9ad2:	6022      	strge	r2, [r4, #0]
   d9ad4:	6022      	strlt	r2, [r4, #0]
   d9ad6:	bfb8      	it	lt
   d9ad8:	6063      	strlt	r3, [r4, #4]
   d9ada:	6861      	ldr	r1, [r4, #4]
   d9adc:	293b      	cmp	r1, #59	; 0x3b
   d9ade:	d911      	bls.n	d9b04 <validate_structure+0x58>
   d9ae0:	223c      	movs	r2, #60	; 0x3c
   d9ae2:	4668      	mov	r0, sp
   d9ae4:	f002 f964 	bl	dbdb0 <div>
   d9ae8:	9a01      	ldr	r2, [sp, #4]
   d9aea:	68a1      	ldr	r1, [r4, #8]
   d9aec:	9b00      	ldr	r3, [sp, #0]
   d9aee:	2a00      	cmp	r2, #0
   d9af0:	440b      	add	r3, r1
   d9af2:	60a3      	str	r3, [r4, #8]
   d9af4:	bfbb      	ittet	lt
   d9af6:	323c      	addlt	r2, #60	; 0x3c
   d9af8:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d9afc:	6062      	strge	r2, [r4, #4]
   d9afe:	6062      	strlt	r2, [r4, #4]
   d9b00:	bfb8      	it	lt
   d9b02:	60a3      	strlt	r3, [r4, #8]
   d9b04:	68a1      	ldr	r1, [r4, #8]
   d9b06:	2917      	cmp	r1, #23
   d9b08:	d911      	bls.n	d9b2e <validate_structure+0x82>
   d9b0a:	2218      	movs	r2, #24
   d9b0c:	4668      	mov	r0, sp
   d9b0e:	f002 f94f 	bl	dbdb0 <div>
   d9b12:	9a01      	ldr	r2, [sp, #4]
   d9b14:	68e1      	ldr	r1, [r4, #12]
   d9b16:	9b00      	ldr	r3, [sp, #0]
   d9b18:	2a00      	cmp	r2, #0
   d9b1a:	440b      	add	r3, r1
   d9b1c:	60e3      	str	r3, [r4, #12]
   d9b1e:	bfbb      	ittet	lt
   d9b20:	3218      	addlt	r2, #24
   d9b22:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d9b26:	60a2      	strge	r2, [r4, #8]
   d9b28:	60a2      	strlt	r2, [r4, #8]
   d9b2a:	bfb8      	it	lt
   d9b2c:	60e3      	strlt	r3, [r4, #12]
   d9b2e:	6921      	ldr	r1, [r4, #16]
   d9b30:	290b      	cmp	r1, #11
   d9b32:	d911      	bls.n	d9b58 <validate_structure+0xac>
   d9b34:	220c      	movs	r2, #12
   d9b36:	4668      	mov	r0, sp
   d9b38:	f002 f93a 	bl	dbdb0 <div>
   d9b3c:	9a01      	ldr	r2, [sp, #4]
   d9b3e:	6961      	ldr	r1, [r4, #20]
   d9b40:	9b00      	ldr	r3, [sp, #0]
   d9b42:	2a00      	cmp	r2, #0
   d9b44:	440b      	add	r3, r1
   d9b46:	6163      	str	r3, [r4, #20]
   d9b48:	bfbb      	ittet	lt
   d9b4a:	320c      	addlt	r2, #12
   d9b4c:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d9b50:	6122      	strge	r2, [r4, #16]
   d9b52:	6122      	strlt	r2, [r4, #16]
   d9b54:	bfb8      	it	lt
   d9b56:	6163      	strlt	r3, [r4, #20]
   d9b58:	6963      	ldr	r3, [r4, #20]
   d9b5a:	0799      	lsls	r1, r3, #30
   d9b5c:	d112      	bne.n	d9b84 <validate_structure+0xd8>
   d9b5e:	2164      	movs	r1, #100	; 0x64
   d9b60:	fb93 f2f1 	sdiv	r2, r3, r1
   d9b64:	fb01 3212 	mls	r2, r1, r2, r3
   d9b68:	b972      	cbnz	r2, d9b88 <validate_structure+0xdc>
   d9b6a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d9b6e:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d9b72:	fb93 f2f1 	sdiv	r2, r3, r1
   d9b76:	fb01 3312 	mls	r3, r1, r2, r3
   d9b7a:	2b00      	cmp	r3, #0
   d9b7c:	bf14      	ite	ne
   d9b7e:	231c      	movne	r3, #28
   d9b80:	231d      	moveq	r3, #29
   d9b82:	e002      	b.n	d9b8a <validate_structure+0xde>
   d9b84:	231c      	movs	r3, #28
   d9b86:	e000      	b.n	d9b8a <validate_structure+0xde>
   d9b88:	231d      	movs	r3, #29
   d9b8a:	68e2      	ldr	r2, [r4, #12]
   d9b8c:	2a00      	cmp	r2, #0
   d9b8e:	dd06      	ble.n	d9b9e <validate_structure+0xf2>
   d9b90:	4f33      	ldr	r7, [pc, #204]	; (d9c60 <validate_structure+0x1b4>)
   d9b92:	f04f 0e00 	mov.w	lr, #0
   d9b96:	2564      	movs	r5, #100	; 0x64
   d9b98:	f44f 76c8 	mov.w	r6, #400	; 0x190
   d9b9c:	e039      	b.n	d9c12 <validate_structure+0x166>
   d9b9e:	4f30      	ldr	r7, [pc, #192]	; (d9c60 <validate_structure+0x1b4>)
   d9ba0:	260b      	movs	r6, #11
   d9ba2:	2064      	movs	r0, #100	; 0x64
   d9ba4:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d9ba8:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   d9bac:	f1be 0f00 	cmp.w	lr, #0
   d9bb0:	dc53      	bgt.n	d9c5a <validate_structure+0x1ae>
   d9bb2:	6921      	ldr	r1, [r4, #16]
   d9bb4:	3901      	subs	r1, #1
   d9bb6:	6121      	str	r1, [r4, #16]
   d9bb8:	3101      	adds	r1, #1
   d9bba:	d118      	bne.n	d9bee <validate_structure+0x142>
   d9bbc:	6963      	ldr	r3, [r4, #20]
   d9bbe:	6126      	str	r6, [r4, #16]
   d9bc0:	1e59      	subs	r1, r3, #1
   d9bc2:	078a      	lsls	r2, r1, #30
   d9bc4:	6161      	str	r1, [r4, #20]
   d9bc6:	d10f      	bne.n	d9be8 <validate_structure+0x13c>
   d9bc8:	fb91 f2f0 	sdiv	r2, r1, r0
   d9bcc:	fb00 1112 	mls	r1, r0, r2, r1
   d9bd0:	b961      	cbnz	r1, d9bec <validate_structure+0x140>
   d9bd2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d9bd6:	fb93 f2f5 	sdiv	r2, r3, r5
   d9bda:	fb05 3312 	mls	r3, r5, r2, r3
   d9bde:	2b00      	cmp	r3, #0
   d9be0:	bf14      	ite	ne
   d9be2:	231c      	movne	r3, #28
   d9be4:	231d      	moveq	r3, #29
   d9be6:	e002      	b.n	d9bee <validate_structure+0x142>
   d9be8:	231c      	movs	r3, #28
   d9bea:	e000      	b.n	d9bee <validate_structure+0x142>
   d9bec:	231d      	movs	r3, #29
   d9bee:	6922      	ldr	r2, [r4, #16]
   d9bf0:	2a01      	cmp	r2, #1
   d9bf2:	bf14      	ite	ne
   d9bf4:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   d9bf8:	461a      	moveq	r2, r3
   d9bfa:	4472      	add	r2, lr
   d9bfc:	60e2      	str	r2, [r4, #12]
   d9bfe:	e7d3      	b.n	d9ba8 <validate_structure+0xfc>
   d9c00:	428b      	cmp	r3, r1
   d9c02:	da2a      	bge.n	d9c5a <validate_structure+0x1ae>
   d9c04:	4618      	mov	r0, r3
   d9c06:	3201      	adds	r2, #1
   d9c08:	1a09      	subs	r1, r1, r0
   d9c0a:	2a0c      	cmp	r2, #12
   d9c0c:	60e1      	str	r1, [r4, #12]
   d9c0e:	6122      	str	r2, [r4, #16]
   d9c10:	d008      	beq.n	d9c24 <validate_structure+0x178>
   d9c12:	6922      	ldr	r2, [r4, #16]
   d9c14:	68e1      	ldr	r1, [r4, #12]
   d9c16:	2a01      	cmp	r2, #1
   d9c18:	d0f2      	beq.n	d9c00 <validate_structure+0x154>
   d9c1a:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   d9c1e:	4281      	cmp	r1, r0
   d9c20:	dcf1      	bgt.n	d9c06 <validate_structure+0x15a>
   d9c22:	e01a      	b.n	d9c5a <validate_structure+0x1ae>
   d9c24:	6963      	ldr	r3, [r4, #20]
   d9c26:	f8c4 e010 	str.w	lr, [r4, #16]
   d9c2a:	1c5a      	adds	r2, r3, #1
   d9c2c:	0791      	lsls	r1, r2, #30
   d9c2e:	6162      	str	r2, [r4, #20]
   d9c30:	d10f      	bne.n	d9c52 <validate_structure+0x1a6>
   d9c32:	fb92 f1f5 	sdiv	r1, r2, r5
   d9c36:	fb05 2211 	mls	r2, r5, r1, r2
   d9c3a:	b962      	cbnz	r2, d9c56 <validate_structure+0x1aa>
   d9c3c:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   d9c40:	fb93 f2f6 	sdiv	r2, r3, r6
   d9c44:	fb06 3312 	mls	r3, r6, r2, r3
   d9c48:	2b00      	cmp	r3, #0
   d9c4a:	bf14      	ite	ne
   d9c4c:	231c      	movne	r3, #28
   d9c4e:	231d      	moveq	r3, #29
   d9c50:	e7df      	b.n	d9c12 <validate_structure+0x166>
   d9c52:	231c      	movs	r3, #28
   d9c54:	e7dd      	b.n	d9c12 <validate_structure+0x166>
   d9c56:	231d      	movs	r3, #29
   d9c58:	e7db      	b.n	d9c12 <validate_structure+0x166>
   d9c5a:	b003      	add	sp, #12
   d9c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9c5e:	bf00      	nop
   d9c60:	000dd7bc 	.word	0x000dd7bc

000d9c64 <mktime>:
   d9c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9c68:	4605      	mov	r5, r0
   d9c6a:	f002 fc17 	bl	dc49c <__gettzinfo>
   d9c6e:	4681      	mov	r9, r0
   d9c70:	4628      	mov	r0, r5
   d9c72:	f7ff ff1b 	bl	d9aac <validate_structure>
   d9c76:	e895 000c 	ldmia.w	r5, {r2, r3}
   d9c7a:	213c      	movs	r1, #60	; 0x3c
   d9c7c:	fb01 2303 	mla	r3, r1, r3, r2
   d9c80:	68aa      	ldr	r2, [r5, #8]
   d9c82:	68ec      	ldr	r4, [r5, #12]
   d9c84:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   d9c88:	fb08 3102 	mla	r1, r8, r2, r3
   d9c8c:	692b      	ldr	r3, [r5, #16]
   d9c8e:	4aab      	ldr	r2, [pc, #684]	; (d9f3c <mktime+0x2d8>)
   d9c90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   d9c94:	3c01      	subs	r4, #1
   d9c96:	2b01      	cmp	r3, #1
   d9c98:	4414      	add	r4, r2
   d9c9a:	696b      	ldr	r3, [r5, #20]
   d9c9c:	dd11      	ble.n	d9cc2 <mktime+0x5e>
   d9c9e:	079e      	lsls	r6, r3, #30
   d9ca0:	d10f      	bne.n	d9cc2 <mktime+0x5e>
   d9ca2:	2064      	movs	r0, #100	; 0x64
   d9ca4:	fb93 f2f0 	sdiv	r2, r3, r0
   d9ca8:	fb00 3212 	mls	r2, r0, r2, r3
   d9cac:	b942      	cbnz	r2, d9cc0 <mktime+0x5c>
   d9cae:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   d9cb2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9cb6:	fb96 f0f2 	sdiv	r0, r6, r2
   d9cba:	fb02 6210 	mls	r2, r2, r0, r6
   d9cbe:	b902      	cbnz	r2, d9cc2 <mktime+0x5e>
   d9cc0:	3401      	adds	r4, #1
   d9cc2:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   d9cc6:	3210      	adds	r2, #16
   d9cc8:	f644 6020 	movw	r0, #20000	; 0x4e20
   d9ccc:	4282      	cmp	r2, r0
   d9cce:	61ec      	str	r4, [r5, #28]
   d9cd0:	461f      	mov	r7, r3
   d9cd2:	f200 812e 	bhi.w	d9f32 <mktime+0x2ce>
   d9cd6:	2b46      	cmp	r3, #70	; 0x46
   d9cd8:	dd22      	ble.n	d9d20 <mktime+0xbc>
   d9cda:	2246      	movs	r2, #70	; 0x46
   d9cdc:	f240 1c6d 	movw	ip, #365	; 0x16d
   d9ce0:	2664      	movs	r6, #100	; 0x64
   d9ce2:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   d9ce6:	0790      	lsls	r0, r2, #30
   d9ce8:	d110      	bne.n	d9d0c <mktime+0xa8>
   d9cea:	fb92 f0f6 	sdiv	r0, r2, r6
   d9cee:	fb06 2010 	mls	r0, r6, r0, r2
   d9cf2:	b970      	cbnz	r0, d9d12 <mktime+0xae>
   d9cf4:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   d9cf8:	fb98 f0fe 	sdiv	r0, r8, lr
   d9cfc:	fb0e 8010 	mls	r0, lr, r0, r8
   d9d00:	2800      	cmp	r0, #0
   d9d02:	bf14      	ite	ne
   d9d04:	4660      	movne	r0, ip
   d9d06:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   d9d0a:	e004      	b.n	d9d16 <mktime+0xb2>
   d9d0c:	f240 106d 	movw	r0, #365	; 0x16d
   d9d10:	e001      	b.n	d9d16 <mktime+0xb2>
   d9d12:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   d9d16:	3201      	adds	r2, #1
   d9d18:	4293      	cmp	r3, r2
   d9d1a:	4404      	add	r4, r0
   d9d1c:	d1e3      	bne.n	d9ce6 <mktime+0x82>
   d9d1e:	e044      	b.n	d9daa <mktime+0x146>
   d9d20:	d043      	beq.n	d9daa <mktime+0x146>
   d9d22:	2245      	movs	r2, #69	; 0x45
   d9d24:	f240 1e6d 	movw	lr, #365	; 0x16d
   d9d28:	2664      	movs	r6, #100	; 0x64
   d9d2a:	f44f 77c8 	mov.w	r7, #400	; 0x190
   d9d2e:	429a      	cmp	r2, r3
   d9d30:	dd1a      	ble.n	d9d68 <mktime+0x104>
   d9d32:	0790      	lsls	r0, r2, #30
   d9d34:	d110      	bne.n	d9d58 <mktime+0xf4>
   d9d36:	fb92 f0f6 	sdiv	r0, r2, r6
   d9d3a:	fb06 2010 	mls	r0, r6, r0, r2
   d9d3e:	b970      	cbnz	r0, d9d5e <mktime+0xfa>
   d9d40:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   d9d44:	fb9c f0f7 	sdiv	r0, ip, r7
   d9d48:	fb07 c010 	mls	r0, r7, r0, ip
   d9d4c:	2800      	cmp	r0, #0
   d9d4e:	bf14      	ite	ne
   d9d50:	4670      	movne	r0, lr
   d9d52:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   d9d56:	e004      	b.n	d9d62 <mktime+0xfe>
   d9d58:	f240 106d 	movw	r0, #365	; 0x16d
   d9d5c:	e001      	b.n	d9d62 <mktime+0xfe>
   d9d5e:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   d9d62:	1a24      	subs	r4, r4, r0
   d9d64:	3a01      	subs	r2, #1
   d9d66:	e7e2      	b.n	d9d2e <mktime+0xca>
   d9d68:	2b45      	cmp	r3, #69	; 0x45
   d9d6a:	bfa8      	it	ge
   d9d6c:	2345      	movge	r3, #69	; 0x45
   d9d6e:	079e      	lsls	r6, r3, #30
   d9d70:	461f      	mov	r7, r3
   d9d72:	d114      	bne.n	d9d9e <mktime+0x13a>
   d9d74:	2264      	movs	r2, #100	; 0x64
   d9d76:	fb93 f3f2 	sdiv	r3, r3, r2
   d9d7a:	fb02 7313 	mls	r3, r2, r3, r7
   d9d7e:	b98b      	cbnz	r3, d9da4 <mktime+0x140>
   d9d80:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   d9d84:	f44f 73c8 	mov.w	r3, #400	; 0x190
   d9d88:	fb90 f2f3 	sdiv	r2, r0, r3
   d9d8c:	fb03 0312 	mls	r3, r3, r2, r0
   d9d90:	2b00      	cmp	r3, #0
   d9d92:	f240 136d 	movw	r3, #365	; 0x16d
   d9d96:	bf08      	it	eq
   d9d98:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   d9d9c:	e004      	b.n	d9da8 <mktime+0x144>
   d9d9e:	f240 136d 	movw	r3, #365	; 0x16d
   d9da2:	e001      	b.n	d9da8 <mktime+0x144>
   d9da4:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   d9da8:	1ae4      	subs	r4, r4, r3
   d9daa:	4865      	ldr	r0, [pc, #404]	; (d9f40 <mktime+0x2dc>)
   d9dac:	fb00 1804 	mla	r8, r0, r4, r1
   d9db0:	f001 fe72 	bl	dba98 <__tz_lock>
   d9db4:	f001 fe72 	bl	dba9c <_tzset_unlocked>
   d9db8:	4b62      	ldr	r3, [pc, #392]	; (d9f44 <mktime+0x2e0>)
   d9dba:	681e      	ldr	r6, [r3, #0]
   d9dbc:	2e00      	cmp	r6, #0
   d9dbe:	f000 80a4 	beq.w	d9f0a <mktime+0x2a6>
   d9dc2:	6a2b      	ldr	r3, [r5, #32]
   d9dc4:	6968      	ldr	r0, [r5, #20]
   d9dc6:	2b01      	cmp	r3, #1
   d9dc8:	bfa8      	it	ge
   d9dca:	2301      	movge	r3, #1
   d9dcc:	469a      	mov	sl, r3
   d9dce:	f8d9 3004 	ldr.w	r3, [r9, #4]
   d9dd2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d9dd6:	4298      	cmp	r0, r3
   d9dd8:	d10d      	bne.n	d9df6 <mktime+0x192>
   d9dda:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   d9dde:	f8d9 3020 	ldr.w	r3, [r9, #32]
   d9de2:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   d9de6:	f8d9 101c 	ldr.w	r1, [r9, #28]
   d9dea:	1ad6      	subs	r6, r2, r3
   d9dec:	45b0      	cmp	r8, r6
   d9dee:	eba1 0100 	sub.w	r1, r1, r0
   d9df2:	da05      	bge.n	d9e00 <mktime+0x19c>
   d9df4:	e007      	b.n	d9e06 <mktime+0x1a2>
   d9df6:	f001 fda7 	bl	db948 <__tzcalc_limits>
   d9dfa:	2800      	cmp	r0, #0
   d9dfc:	d1ed      	bne.n	d9dda <mktime+0x176>
   d9dfe:	e076      	b.n	d9eee <mktime+0x28a>
   d9e00:	1a12      	subs	r2, r2, r0
   d9e02:	4590      	cmp	r8, r2
   d9e04:	db73      	blt.n	d9eee <mktime+0x28a>
   d9e06:	f8d9 2000 	ldr.w	r2, [r9]
   d9e0a:	b112      	cbz	r2, d9e12 <mktime+0x1ae>
   d9e0c:	4588      	cmp	r8, r1
   d9e0e:	db77      	blt.n	d9f00 <mktime+0x29c>
   d9e10:	e001      	b.n	d9e16 <mktime+0x1b2>
   d9e12:	4588      	cmp	r8, r1
   d9e14:	da07      	bge.n	d9e26 <mktime+0x1c2>
   d9e16:	45b0      	cmp	r8, r6
   d9e18:	bfac      	ite	ge
   d9e1a:	2600      	movge	r6, #0
   d9e1c:	2601      	movlt	r6, #1
   d9e1e:	f1ba 0f00 	cmp.w	sl, #0
   d9e22:	da04      	bge.n	d9e2e <mktime+0x1ca>
   d9e24:	e064      	b.n	d9ef0 <mktime+0x28c>
   d9e26:	f1ba 0f00 	cmp.w	sl, #0
   d9e2a:	db63      	blt.n	d9ef4 <mktime+0x290>
   d9e2c:	2601      	movs	r6, #1
   d9e2e:	ea8a 0a06 	eor.w	sl, sl, r6
   d9e32:	f1ba 0f01 	cmp.w	sl, #1
   d9e36:	d15b      	bne.n	d9ef0 <mktime+0x28c>
   d9e38:	1a1b      	subs	r3, r3, r0
   d9e3a:	b906      	cbnz	r6, d9e3e <mktime+0x1da>
   d9e3c:	425b      	negs	r3, r3
   d9e3e:	682a      	ldr	r2, [r5, #0]
   d9e40:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   d9e44:	441a      	add	r2, r3
   d9e46:	602a      	str	r2, [r5, #0]
   d9e48:	4628      	mov	r0, r5
   d9e4a:	4498      	add	r8, r3
   d9e4c:	f7ff fe2e 	bl	d9aac <validate_structure>
   d9e50:	68eb      	ldr	r3, [r5, #12]
   d9e52:	ebb3 030a 	subs.w	r3, r3, sl
   d9e56:	d04b      	beq.n	d9ef0 <mktime+0x28c>
   d9e58:	2b01      	cmp	r3, #1
   d9e5a:	dc03      	bgt.n	d9e64 <mktime+0x200>
   d9e5c:	1c98      	adds	r0, r3, #2
   d9e5e:	bfd8      	it	le
   d9e60:	2301      	movle	r3, #1
   d9e62:	e001      	b.n	d9e68 <mktime+0x204>
   d9e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9e68:	69ea      	ldr	r2, [r5, #28]
   d9e6a:	441c      	add	r4, r3
   d9e6c:	189b      	adds	r3, r3, r2
   d9e6e:	d51d      	bpl.n	d9eac <mktime+0x248>
   d9e70:	1e7b      	subs	r3, r7, #1
   d9e72:	0799      	lsls	r1, r3, #30
   d9e74:	d114      	bne.n	d9ea0 <mktime+0x23c>
   d9e76:	2164      	movs	r1, #100	; 0x64
   d9e78:	fb93 f2f1 	sdiv	r2, r3, r1
   d9e7c:	fb01 3312 	mls	r3, r1, r2, r3
   d9e80:	b98b      	cbnz	r3, d9ea6 <mktime+0x242>
   d9e82:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   d9e86:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9e8a:	fb97 f3f2 	sdiv	r3, r7, r2
   d9e8e:	fb02 7713 	mls	r7, r2, r3, r7
   d9e92:	2f00      	cmp	r7, #0
   d9e94:	f240 136d 	movw	r3, #365	; 0x16d
   d9e98:	bf18      	it	ne
   d9e9a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   d9e9e:	e024      	b.n	d9eea <mktime+0x286>
   d9ea0:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   d9ea4:	e021      	b.n	d9eea <mktime+0x286>
   d9ea6:	f240 136d 	movw	r3, #365	; 0x16d
   d9eaa:	e01e      	b.n	d9eea <mktime+0x286>
   d9eac:	07ba      	lsls	r2, r7, #30
   d9eae:	d114      	bne.n	d9eda <mktime+0x276>
   d9eb0:	2164      	movs	r1, #100	; 0x64
   d9eb2:	fb97 f2f1 	sdiv	r2, r7, r1
   d9eb6:	fb01 7212 	mls	r2, r1, r2, r7
   d9eba:	b98a      	cbnz	r2, d9ee0 <mktime+0x27c>
   d9ebc:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   d9ec0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d9ec4:	fb97 f2f1 	sdiv	r2, r7, r1
   d9ec8:	fb01 7712 	mls	r7, r1, r2, r7
   d9ecc:	2f00      	cmp	r7, #0
   d9ece:	f240 126d 	movw	r2, #365	; 0x16d
   d9ed2:	bf08      	it	eq
   d9ed4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   d9ed8:	e004      	b.n	d9ee4 <mktime+0x280>
   d9eda:	f240 126d 	movw	r2, #365	; 0x16d
   d9ede:	e001      	b.n	d9ee4 <mktime+0x280>
   d9ee0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   d9ee4:	429a      	cmp	r2, r3
   d9ee6:	bfd8      	it	le
   d9ee8:	1a9b      	suble	r3, r3, r2
   d9eea:	61eb      	str	r3, [r5, #28]
   d9eec:	e000      	b.n	d9ef0 <mktime+0x28c>
   d9eee:	4656      	mov	r6, sl
   d9ef0:	2e01      	cmp	r6, #1
   d9ef2:	d10a      	bne.n	d9f0a <mktime+0x2a6>
   d9ef4:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   d9ef8:	2601      	movs	r6, #1
   d9efa:	eb08 0700 	add.w	r7, r8, r0
   d9efe:	e008      	b.n	d9f12 <mktime+0x2ae>
   d9f00:	f1ba 0f00 	cmp.w	sl, #0
   d9f04:	f04f 0600 	mov.w	r6, #0
   d9f08:	da91      	bge.n	d9e2e <mktime+0x1ca>
   d9f0a:	f8d9 0020 	ldr.w	r0, [r9, #32]
   d9f0e:	eb08 0700 	add.w	r7, r8, r0
   d9f12:	f001 fdc2 	bl	dba9a <__tz_unlock>
   d9f16:	3404      	adds	r4, #4
   d9f18:	2307      	movs	r3, #7
   d9f1a:	fb94 f3f3 	sdiv	r3, r4, r3
   d9f1e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d9f22:	1ae4      	subs	r4, r4, r3
   d9f24:	bf48      	it	mi
   d9f26:	3407      	addmi	r4, #7
   d9f28:	622e      	str	r6, [r5, #32]
   d9f2a:	61ac      	str	r4, [r5, #24]
   d9f2c:	4638      	mov	r0, r7
   d9f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9f32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9f3a:	bf00      	nop
   d9f3c:	000dd78c 	.word	0x000dd78c
   d9f40:	00015180 	.word	0x00015180
   d9f44:	2003e7e4 	.word	0x2003e7e4

000d9f48 <srand>:
   d9f48:	b538      	push	{r3, r4, r5, lr}
   d9f4a:	4b12      	ldr	r3, [pc, #72]	; (d9f94 <srand+0x4c>)
   d9f4c:	681c      	ldr	r4, [r3, #0]
   d9f4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9f50:	4605      	mov	r5, r0
   d9f52:	b9d3      	cbnz	r3, d9f8a <srand+0x42>
   d9f54:	2018      	movs	r0, #24
   d9f56:	f7fc fef5 	bl	d6d44 <malloc>
   d9f5a:	f243 330e 	movw	r3, #13070	; 0x330e
   d9f5e:	63a0      	str	r0, [r4, #56]	; 0x38
   d9f60:	8003      	strh	r3, [r0, #0]
   d9f62:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9f66:	8043      	strh	r3, [r0, #2]
   d9f68:	f241 2334 	movw	r3, #4660	; 0x1234
   d9f6c:	8083      	strh	r3, [r0, #4]
   d9f6e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9f72:	80c3      	strh	r3, [r0, #6]
   d9f74:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9f78:	8103      	strh	r3, [r0, #8]
   d9f7a:	2305      	movs	r3, #5
   d9f7c:	8143      	strh	r3, [r0, #10]
   d9f7e:	230b      	movs	r3, #11
   d9f80:	8183      	strh	r3, [r0, #12]
   d9f82:	2201      	movs	r2, #1
   d9f84:	2300      	movs	r3, #0
   d9f86:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9f8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9f8c:	2200      	movs	r2, #0
   d9f8e:	611d      	str	r5, [r3, #16]
   d9f90:	615a      	str	r2, [r3, #20]
   d9f92:	bd38      	pop	{r3, r4, r5, pc}
   d9f94:	2003dfdc 	.word	0x2003dfdc

000d9f98 <strcmp>:
   d9f98:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9f9c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9fa0:	2a01      	cmp	r2, #1
   d9fa2:	bf28      	it	cs
   d9fa4:	429a      	cmpcs	r2, r3
   d9fa6:	d0f7      	beq.n	d9f98 <strcmp>
   d9fa8:	1ad0      	subs	r0, r2, r3
   d9faa:	4770      	bx	lr

000d9fac <strcpy>:
   d9fac:	4603      	mov	r3, r0
   d9fae:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9fb2:	f803 2b01 	strb.w	r2, [r3], #1
   d9fb6:	2a00      	cmp	r2, #0
   d9fb8:	d1f9      	bne.n	d9fae <strcpy+0x2>
   d9fba:	4770      	bx	lr

000d9fbc <strdup>:
   d9fbc:	4b02      	ldr	r3, [pc, #8]	; (d9fc8 <strdup+0xc>)
   d9fbe:	4601      	mov	r1, r0
   d9fc0:	6818      	ldr	r0, [r3, #0]
   d9fc2:	f000 b803 	b.w	d9fcc <_strdup_r>
   d9fc6:	bf00      	nop
   d9fc8:	2003dfdc 	.word	0x2003dfdc

000d9fcc <_strdup_r>:
   d9fcc:	b570      	push	{r4, r5, r6, lr}
   d9fce:	4606      	mov	r6, r0
   d9fd0:	4608      	mov	r0, r1
   d9fd2:	460c      	mov	r4, r1
   d9fd4:	f000 fd22 	bl	daa1c <strlen>
   d9fd8:	1c45      	adds	r5, r0, #1
   d9fda:	4629      	mov	r1, r5
   d9fdc:	4630      	mov	r0, r6
   d9fde:	f7fc fef1 	bl	d6dc4 <_malloc_r>
   d9fe2:	4606      	mov	r6, r0
   d9fe4:	b118      	cbz	r0, d9fee <_strdup_r+0x22>
   d9fe6:	462a      	mov	r2, r5
   d9fe8:	4621      	mov	r1, r4
   d9fea:	f7ff fd4b 	bl	d9a84 <memcpy>
   d9fee:	4630      	mov	r0, r6
   d9ff0:	bd70      	pop	{r4, r5, r6, pc}

000d9ff2 <iso_year_adjust>:
   d9ff2:	6941      	ldr	r1, [r0, #20]
   d9ff4:	078b      	lsls	r3, r1, #30
   d9ff6:	b510      	push	{r4, lr}
   d9ff8:	d10c      	bne.n	da014 <iso_year_adjust+0x22>
   d9ffa:	2900      	cmp	r1, #0
   d9ffc:	f240 736c 	movw	r3, #1900	; 0x76c
   da000:	bfa8      	it	ge
   da002:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   da006:	440b      	add	r3, r1
   da008:	2464      	movs	r4, #100	; 0x64
   da00a:	fb93 f2f4 	sdiv	r2, r3, r4
   da00e:	fb04 3312 	mls	r3, r4, r2, r3
   da012:	b983      	cbnz	r3, da036 <iso_year_adjust+0x44>
   da014:	2900      	cmp	r1, #0
   da016:	f240 736c 	movw	r3, #1900	; 0x76c
   da01a:	bfa8      	it	ge
   da01c:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   da020:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da024:	440b      	add	r3, r1
   da026:	fb93 f1f2 	sdiv	r1, r3, r2
   da02a:	fb02 3311 	mls	r3, r2, r1, r3
   da02e:	fab3 f283 	clz	r2, r3
   da032:	0952      	lsrs	r2, r2, #5
   da034:	e000      	b.n	da038 <iso_year_adjust+0x46>
   da036:	2201      	movs	r2, #1
   da038:	6983      	ldr	r3, [r0, #24]
   da03a:	69c1      	ldr	r1, [r0, #28]
   da03c:	005b      	lsls	r3, r3, #1
   da03e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   da042:	4413      	add	r3, r2
   da044:	2b21      	cmp	r3, #33	; 0x21
   da046:	dc0e      	bgt.n	da066 <iso_year_adjust+0x74>
   da048:	2b20      	cmp	r3, #32
   da04a:	da2f      	bge.n	da0ac <iso_year_adjust+0xba>
   da04c:	2b0d      	cmp	r3, #13
   da04e:	dc02      	bgt.n	da056 <iso_year_adjust+0x64>
   da050:	2b0a      	cmp	r3, #10
   da052:	db05      	blt.n	da060 <iso_year_adjust+0x6e>
   da054:	e02a      	b.n	da0ac <iso_year_adjust+0xba>
   da056:	2b10      	cmp	r3, #16
   da058:	db26      	blt.n	da0a8 <iso_year_adjust+0xb6>
   da05a:	2b11      	cmp	r3, #17
   da05c:	dd26      	ble.n	da0ac <iso_year_adjust+0xba>
   da05e:	3b1c      	subs	r3, #28
   da060:	2b01      	cmp	r3, #1
   da062:	d923      	bls.n	da0ac <iso_year_adjust+0xba>
   da064:	e020      	b.n	da0a8 <iso_year_adjust+0xb6>
   da066:	f241 62c6 	movw	r2, #5830	; 0x16c6
   da06a:	4293      	cmp	r3, r2
   da06c:	dc0e      	bgt.n	da08c <iso_year_adjust+0x9a>
   da06e:	f241 62c2 	movw	r2, #5826	; 0x16c2
   da072:	4293      	cmp	r3, r2
   da074:	da16      	bge.n	da0a4 <iso_year_adjust+0xb2>
   da076:	f241 62a2 	movw	r2, #5794	; 0x16a2
   da07a:	4293      	cmp	r3, r2
   da07c:	d012      	beq.n	da0a4 <iso_year_adjust+0xb2>
   da07e:	db13      	blt.n	da0a8 <iso_year_adjust+0xb6>
   da080:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   da084:	3b12      	subs	r3, #18
   da086:	2b02      	cmp	r3, #2
   da088:	d90c      	bls.n	da0a4 <iso_year_adjust+0xb2>
   da08a:	e00d      	b.n	da0a8 <iso_year_adjust+0xb6>
   da08c:	f241 62d5 	movw	r2, #5845	; 0x16d5
   da090:	4293      	cmp	r3, r2
   da092:	d007      	beq.n	da0a4 <iso_year_adjust+0xb2>
   da094:	f241 62d7 	movw	r2, #5847	; 0x16d7
   da098:	4293      	cmp	r3, r2
   da09a:	d003      	beq.n	da0a4 <iso_year_adjust+0xb2>
   da09c:	f241 62d3 	movw	r2, #5843	; 0x16d3
   da0a0:	4293      	cmp	r3, r2
   da0a2:	d101      	bne.n	da0a8 <iso_year_adjust+0xb6>
   da0a4:	2001      	movs	r0, #1
   da0a6:	bd10      	pop	{r4, pc}
   da0a8:	2000      	movs	r0, #0
   da0aa:	bd10      	pop	{r4, pc}
   da0ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da0b0:	bd10      	pop	{r4, pc}
	...

000da0b4 <strftime>:
   da0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da0b8:	b093      	sub	sp, #76	; 0x4c
   da0ba:	460e      	mov	r6, r1
   da0bc:	461d      	mov	r5, r3
   da0be:	4607      	mov	r7, r0
   da0c0:	4691      	mov	r9, r2
   da0c2:	f001 fc31 	bl	db928 <__get_current_time_locale>
   da0c6:	2300      	movs	r3, #0
   da0c8:	9306      	str	r3, [sp, #24]
   da0ca:	461c      	mov	r4, r3
   da0cc:	1e73      	subs	r3, r6, #1
   da0ce:	9003      	str	r0, [sp, #12]
   da0d0:	9302      	str	r3, [sp, #8]
   da0d2:	f899 3000 	ldrb.w	r3, [r9]
   da0d6:	2b00      	cmp	r3, #0
   da0d8:	f000 8492 	beq.w	daa00 <strftime+0x94c>
   da0dc:	2b25      	cmp	r3, #37	; 0x25
   da0de:	d008      	beq.n	da0f2 <strftime+0x3e>
   da0e0:	9a02      	ldr	r2, [sp, #8]
   da0e2:	4294      	cmp	r4, r2
   da0e4:	f080 8490 	bcs.w	daa08 <strftime+0x954>
   da0e8:	553b      	strb	r3, [r7, r4]
   da0ea:	f109 0901 	add.w	r9, r9, #1
   da0ee:	3401      	adds	r4, #1
   da0f0:	e7ef      	b.n	da0d2 <strftime+0x1e>
   da0f2:	f899 a001 	ldrb.w	sl, [r9, #1]
   da0f6:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   da0fa:	d007      	beq.n	da10c <strftime+0x58>
   da0fc:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   da100:	d004      	beq.n	da10c <strftime+0x58>
   da102:	f109 0901 	add.w	r9, r9, #1
   da106:	f04f 0a00 	mov.w	sl, #0
   da10a:	e001      	b.n	da110 <strftime+0x5c>
   da10c:	f109 0902 	add.w	r9, r9, #2
   da110:	f899 3000 	ldrb.w	r3, [r9]
   da114:	3b31      	subs	r3, #49	; 0x31
   da116:	2b08      	cmp	r3, #8
   da118:	d808      	bhi.n	da12c <strftime+0x78>
   da11a:	4648      	mov	r0, r9
   da11c:	220a      	movs	r2, #10
   da11e:	a90a      	add	r1, sp, #40	; 0x28
   da120:	f001 fbf8 	bl	db914 <strtoul>
   da124:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   da128:	4680      	mov	r8, r0
   da12a:	e001      	b.n	da130 <strftime+0x7c>
   da12c:	f04f 0800 	mov.w	r8, #0
   da130:	f899 3000 	ldrb.w	r3, [r9]
   da134:	2b45      	cmp	r3, #69	; 0x45
   da136:	d001      	beq.n	da13c <strftime+0x88>
   da138:	2b4f      	cmp	r3, #79	; 0x4f
   da13a:	d101      	bne.n	da140 <strftime+0x8c>
   da13c:	f109 0901 	add.w	r9, r9, #1
   da140:	f899 0000 	ldrb.w	r0, [r9]
   da144:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   da148:	2b55      	cmp	r3, #85	; 0x55
   da14a:	f200 845d 	bhi.w	daa08 <strftime+0x954>
   da14e:	e8df f013 	tbh	[pc, r3, lsl #1]
   da152:	044a      	.short	0x044a
   da154:	045b045b 	.word	0x045b045b
   da158:	045b045b 	.word	0x045b045b
   da15c:	045b045b 	.word	0x045b045b
   da160:	045b045b 	.word	0x045b045b
   da164:	045b045b 	.word	0x045b045b
   da168:	045b045b 	.word	0x045b045b
   da16c:	045b045b 	.word	0x045b045b
   da170:	045b045b 	.word	0x045b045b
   da174:	045b045b 	.word	0x045b045b
   da178:	045b045b 	.word	0x045b045b
   da17c:	045b045b 	.word	0x045b045b
   da180:	045b045b 	.word	0x045b045b
   da184:	045b045b 	.word	0x045b045b
   da188:	006f045b 	.word	0x006f045b
   da18c:	00d400a1 	.word	0x00d400a1
   da190:	045b011a 	.word	0x045b011a
   da194:	01a0013f 	.word	0x01a0013f
   da198:	022d0226 	.word	0x022d0226
   da19c:	045b045b 	.word	0x045b045b
   da1a0:	0260045b 	.word	0x0260045b
   da1a4:	045b045b 	.word	0x045b045b
   da1a8:	045b0268 	.word	0x045b0268
   da1ac:	031d0297 	.word	0x031d0297
   da1b0:	033b0325 	.word	0x033b0325
   da1b4:	03860343 	.word	0x03860343
   da1b8:	03a000c6 	.word	0x03a000c6
   da1bc:	045b041f 	.word	0x045b041f
   da1c0:	045b045b 	.word	0x045b045b
   da1c4:	045b045b 	.word	0x045b045b
   da1c8:	0056045b 	.word	0x0056045b
   da1cc:	00ba0089 	.word	0x00ba0089
   da1d0:	010c010c 	.word	0x010c010c
   da1d4:	0171045b 	.word	0x0171045b
   da1d8:	045b0089 	.word	0x045b0089
   da1dc:	0226023d 	.word	0x0226023d
   da1e0:	025d022d 	.word	0x025d022d
   da1e4:	045b0262 	.word	0x045b0262
   da1e8:	045b0268 	.word	0x045b0268
   da1ec:	029c00be 	.word	0x029c00be
   da1f0:	032e031f 	.word	0x032e031f
   da1f4:	037f045b 	.word	0x037f045b
   da1f8:	039200c2 	.word	0x039200c2
   da1fc:	03e7      	.short	0x03e7
   da1fe:	69ab      	ldr	r3, [r5, #24]
   da200:	9a03      	ldr	r2, [sp, #12]
   da202:	3318      	adds	r3, #24
   da204:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   da208:	4640      	mov	r0, r8
   da20a:	f000 fc07 	bl	daa1c <strlen>
   da20e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da212:	193b      	adds	r3, r7, r4
   da214:	4420      	add	r0, r4
   da216:	4284      	cmp	r4, r0
   da218:	f000 83eb 	beq.w	da9f2 <strftime+0x93e>
   da21c:	9a02      	ldr	r2, [sp, #8]
   da21e:	4294      	cmp	r4, r2
   da220:	f080 83f2 	bcs.w	daa08 <strftime+0x954>
   da224:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da228:	f803 2b01 	strb.w	r2, [r3], #1
   da22c:	3401      	adds	r4, #1
   da22e:	e7f2      	b.n	da216 <strftime+0x162>
   da230:	69ab      	ldr	r3, [r5, #24]
   da232:	9a03      	ldr	r2, [sp, #12]
   da234:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   da238:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   da23c:	4640      	mov	r0, r8
   da23e:	f000 fbed 	bl	daa1c <strlen>
   da242:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da246:	193b      	adds	r3, r7, r4
   da248:	4420      	add	r0, r4
   da24a:	4284      	cmp	r4, r0
   da24c:	f000 83d1 	beq.w	da9f2 <strftime+0x93e>
   da250:	9a02      	ldr	r2, [sp, #8]
   da252:	4294      	cmp	r4, r2
   da254:	f080 83d8 	bcs.w	daa08 <strftime+0x954>
   da258:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da25c:	f803 2b01 	strb.w	r2, [r3], #1
   da260:	3401      	adds	r4, #1
   da262:	e7f2      	b.n	da24a <strftime+0x196>
   da264:	692b      	ldr	r3, [r5, #16]
   da266:	9a03      	ldr	r2, [sp, #12]
   da268:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   da26c:	4640      	mov	r0, r8
   da26e:	f000 fbd5 	bl	daa1c <strlen>
   da272:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da276:	193b      	adds	r3, r7, r4
   da278:	4420      	add	r0, r4
   da27a:	4284      	cmp	r4, r0
   da27c:	f000 83b9 	beq.w	da9f2 <strftime+0x93e>
   da280:	9a02      	ldr	r2, [sp, #8]
   da282:	4294      	cmp	r4, r2
   da284:	f080 83c0 	bcs.w	daa08 <strftime+0x954>
   da288:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da28c:	f803 2b01 	strb.w	r2, [r3], #1
   da290:	3401      	adds	r4, #1
   da292:	e7f2      	b.n	da27a <strftime+0x1c6>
   da294:	692b      	ldr	r3, [r5, #16]
   da296:	9a03      	ldr	r2, [sp, #12]
   da298:	330c      	adds	r3, #12
   da29a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   da29e:	4640      	mov	r0, r8
   da2a0:	f000 fbbc 	bl	daa1c <strlen>
   da2a4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da2a8:	193b      	adds	r3, r7, r4
   da2aa:	4420      	add	r0, r4
   da2ac:	4284      	cmp	r4, r0
   da2ae:	f000 83a0 	beq.w	da9f2 <strftime+0x93e>
   da2b2:	9a02      	ldr	r2, [sp, #8]
   da2b4:	4294      	cmp	r4, r2
   da2b6:	f080 83a7 	bcs.w	daa08 <strftime+0x954>
   da2ba:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da2be:	f803 2b01 	strb.w	r2, [r3], #1
   da2c2:	3401      	adds	r4, #1
   da2c4:	e7f2      	b.n	da2ac <strftime+0x1f8>
   da2c6:	9b03      	ldr	r3, [sp, #12]
   da2c8:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   da2cc:	e00a      	b.n	da2e4 <strftime+0x230>
   da2ce:	9b03      	ldr	r3, [sp, #12]
   da2d0:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   da2d4:	e006      	b.n	da2e4 <strftime+0x230>
   da2d6:	9b03      	ldr	r3, [sp, #12]
   da2d8:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   da2dc:	e002      	b.n	da2e4 <strftime+0x230>
   da2de:	9b03      	ldr	r3, [sp, #12]
   da2e0:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   da2e4:	4640      	mov	r0, r8
   da2e6:	f000 fb99 	bl	daa1c <strlen>
   da2ea:	f898 3000 	ldrb.w	r3, [r8]
   da2ee:	2b00      	cmp	r3, #0
   da2f0:	f000 837f 	beq.w	da9f2 <strftime+0x93e>
   da2f4:	462b      	mov	r3, r5
   da2f6:	4642      	mov	r2, r8
   da2f8:	e093      	b.n	da422 <strftime+0x36e>
   da2fa:	49b6      	ldr	r1, [pc, #728]	; (da5d4 <strftime+0x520>)
   da2fc:	f8d5 b014 	ldr.w	fp, [r5, #20]
   da300:	458b      	cmp	fp, r1
   da302:	bfac      	ite	ge
   da304:	2100      	movge	r1, #0
   da306:	2101      	movlt	r1, #1
   da308:	f1bb 0f00 	cmp.w	fp, #0
   da30c:	db04      	blt.n	da318 <strftime+0x264>
   da30e:	2064      	movs	r0, #100	; 0x64
   da310:	fb9b f0f0 	sdiv	r0, fp, r0
   da314:	3013      	adds	r0, #19
   da316:	e008      	b.n	da32a <strftime+0x276>
   da318:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   da31c:	9107      	str	r1, [sp, #28]
   da31e:	f001 fd43 	bl	dbda8 <abs>
   da322:	9907      	ldr	r1, [sp, #28]
   da324:	2364      	movs	r3, #100	; 0x64
   da326:	fb90 f0f3 	sdiv	r0, r0, r3
   da32a:	f1ba 0f00 	cmp.w	sl, #0
   da32e:	d008      	beq.n	da342 <strftime+0x28e>
   da330:	2863      	cmp	r0, #99	; 0x63
   da332:	dd09      	ble.n	da348 <strftime+0x294>
   da334:	4ba8      	ldr	r3, [pc, #672]	; (da5d8 <strftime+0x524>)
   da336:	4aa9      	ldr	r2, [pc, #676]	; (da5dc <strftime+0x528>)
   da338:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   da33c:	bf18      	it	ne
   da33e:	4613      	movne	r3, r2
   da340:	e003      	b.n	da34a <strftime+0x296>
   da342:	4ba6      	ldr	r3, [pc, #664]	; (da5dc <strftime+0x528>)
   da344:	4aa6      	ldr	r2, [pc, #664]	; (da5e0 <strftime+0x52c>)
   da346:	e001      	b.n	da34c <strftime+0x298>
   da348:	4ba4      	ldr	r3, [pc, #656]	; (da5dc <strftime+0x528>)
   da34a:	4aa6      	ldr	r2, [pc, #664]	; (da5e4 <strftime+0x530>)
   da34c:	9001      	str	r0, [sp, #4]
   da34e:	f1b8 0f01 	cmp.w	r8, #1
   da352:	bf98      	it	ls
   da354:	f04f 0802 	movls.w	r8, #2
   da358:	ebc1 0108 	rsb	r1, r1, r8
   da35c:	9100      	str	r1, [sp, #0]
   da35e:	489d      	ldr	r0, [pc, #628]	; (da5d4 <strftime+0x520>)
   da360:	49a1      	ldr	r1, [pc, #644]	; (da5e8 <strftime+0x534>)
   da362:	4583      	cmp	fp, r0
   da364:	bfb8      	it	lt
   da366:	460b      	movlt	r3, r1
   da368:	e21e      	b.n	da7a8 <strftime+0x6f4>
   da36a:	4aa0      	ldr	r2, [pc, #640]	; (da5ec <strftime+0x538>)
   da36c:	49a0      	ldr	r1, [pc, #640]	; (da5f0 <strftime+0x53c>)
   da36e:	68eb      	ldr	r3, [r5, #12]
   da370:	2864      	cmp	r0, #100	; 0x64
   da372:	bf08      	it	eq
   da374:	460a      	moveq	r2, r1
   da376:	1b31      	subs	r1, r6, r4
   da378:	1938      	adds	r0, r7, r4
   da37a:	f7fc fd13 	bl	d6da4 <sniprintf>
   da37e:	2800      	cmp	r0, #0
   da380:	f280 8302 	bge.w	da988 <strftime+0x8d4>
   da384:	e340      	b.n	daa08 <strftime+0x954>
   da386:	6968      	ldr	r0, [r5, #20]
   da388:	692b      	ldr	r3, [r5, #16]
   da38a:	2800      	cmp	r0, #0
   da38c:	f103 0b01 	add.w	fp, r3, #1
   da390:	eb07 0804 	add.w	r8, r7, r4
   da394:	ebc4 0a06 	rsb	sl, r4, r6
   da398:	68eb      	ldr	r3, [r5, #12]
   da39a:	db05      	blt.n	da3a8 <strftime+0x2f4>
   da39c:	2264      	movs	r2, #100	; 0x64
   da39e:	fb90 f1f2 	sdiv	r1, r0, r2
   da3a2:	fb02 0011 	mls	r0, r2, r1, r0
   da3a6:	e00a      	b.n	da3be <strftime+0x30a>
   da3a8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da3ac:	9307      	str	r3, [sp, #28]
   da3ae:	f001 fcfb 	bl	dbda8 <abs>
   da3b2:	2264      	movs	r2, #100	; 0x64
   da3b4:	9b07      	ldr	r3, [sp, #28]
   da3b6:	fb90 f1f2 	sdiv	r1, r0, r2
   da3ba:	fb01 0012 	mls	r0, r1, r2, r0
   da3be:	4a8d      	ldr	r2, [pc, #564]	; (da5f4 <strftime+0x540>)
   da3c0:	9001      	str	r0, [sp, #4]
   da3c2:	9300      	str	r3, [sp, #0]
   da3c4:	4651      	mov	r1, sl
   da3c6:	465b      	mov	r3, fp
   da3c8:	4640      	mov	r0, r8
   da3ca:	f7fc fceb 	bl	d6da4 <sniprintf>
   da3ce:	e7d6      	b.n	da37e <strftime+0x2ca>
   da3d0:	2325      	movs	r3, #37	; 0x25
   da3d2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   da3d6:	f1ba 0f00 	cmp.w	sl, #0
   da3da:	d007      	beq.n	da3ec <strftime+0x338>
   da3dc:	f1b8 0f05 	cmp.w	r8, #5
   da3e0:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   da3e4:	bf98      	it	ls
   da3e6:	f04f 0806 	movls.w	r8, #6
   da3ea:	e004      	b.n	da3f6 <strftime+0x342>
   da3ec:	232b      	movs	r3, #43	; 0x2b
   da3ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   da3f2:	f04f 080a 	mov.w	r8, #10
   da3f6:	f1b8 0306 	subs.w	r3, r8, #6
   da3fa:	d102      	bne.n	da402 <strftime+0x34e>
   da3fc:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   da400:	e00a      	b.n	da418 <strftime+0x364>
   da402:	4a7d      	ldr	r2, [pc, #500]	; (da5f8 <strftime+0x544>)
   da404:	211e      	movs	r1, #30
   da406:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   da40a:	f7fc fccb 	bl	d6da4 <sniprintf>
   da40e:	2800      	cmp	r0, #0
   da410:	ddf4      	ble.n	da3fc <strftime+0x348>
   da412:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   da416:	4418      	add	r0, r3
   da418:	4978      	ldr	r1, [pc, #480]	; (da5fc <strftime+0x548>)
   da41a:	f7ff fdc7 	bl	d9fac <strcpy>
   da41e:	462b      	mov	r3, r5
   da420:	aa0a      	add	r2, sp, #40	; 0x28
   da422:	1b31      	subs	r1, r6, r4
   da424:	1938      	adds	r0, r7, r4
   da426:	f7ff fe45 	bl	da0b4 <strftime>
   da42a:	2800      	cmp	r0, #0
   da42c:	f340 82ec 	ble.w	daa08 <strftime+0x954>
   da430:	4404      	add	r4, r0
   da432:	e2de      	b.n	da9f2 <strftime+0x93e>
   da434:	4628      	mov	r0, r5
   da436:	f7ff fddc 	bl	d9ff2 <iso_year_adjust>
   da43a:	4680      	mov	r8, r0
   da43c:	6968      	ldr	r0, [r5, #20]
   da43e:	2800      	cmp	r0, #0
   da440:	db05      	blt.n	da44e <strftime+0x39a>
   da442:	2264      	movs	r2, #100	; 0x64
   da444:	fb90 f1f2 	sdiv	r1, r0, r2
   da448:	fb02 0011 	mls	r0, r2, r1, r0
   da44c:	e008      	b.n	da460 <strftime+0x3ac>
   da44e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da452:	f001 fca9 	bl	dbda8 <abs>
   da456:	2264      	movs	r2, #100	; 0x64
   da458:	fb90 f3f2 	sdiv	r3, r0, r2
   da45c:	fb03 0012 	mls	r0, r3, r2, r0
   da460:	f1b8 0f00 	cmp.w	r8, #0
   da464:	da06      	bge.n	da474 <strftime+0x3c0>
   da466:	696a      	ldr	r2, [r5, #20]
   da468:	4b65      	ldr	r3, [pc, #404]	; (da600 <strftime+0x54c>)
   da46a:	429a      	cmp	r2, r3
   da46c:	bfb8      	it	lt
   da46e:	f04f 0801 	movlt.w	r8, #1
   da472:	e006      	b.n	da482 <strftime+0x3ce>
   da474:	d005      	beq.n	da482 <strftime+0x3ce>
   da476:	696a      	ldr	r2, [r5, #20]
   da478:	4b56      	ldr	r3, [pc, #344]	; (da5d4 <strftime+0x520>)
   da47a:	429a      	cmp	r2, r3
   da47c:	bfb8      	it	lt
   da47e:	f04f 38ff 	movlt.w	r8, #4294967295	; 0xffffffff
   da482:	2364      	movs	r3, #100	; 0x64
   da484:	4440      	add	r0, r8
   da486:	fb90 f2f3 	sdiv	r2, r0, r3
   da48a:	fb03 0012 	mls	r0, r3, r2, r0
   da48e:	4418      	add	r0, r3
   da490:	e1f9      	b.n	da886 <strftime+0x7d2>
   da492:	4b50      	ldr	r3, [pc, #320]	; (da5d4 <strftime+0x520>)
   da494:	6969      	ldr	r1, [r5, #20]
   da496:	9108      	str	r1, [sp, #32]
   da498:	4299      	cmp	r1, r3
   da49a:	bfac      	ite	ge
   da49c:	2300      	movge	r3, #0
   da49e:	2301      	movlt	r3, #1
   da4a0:	4628      	mov	r0, r5
   da4a2:	9307      	str	r3, [sp, #28]
   da4a4:	f7ff fda5 	bl	d9ff2 <iso_year_adjust>
   da4a8:	9908      	ldr	r1, [sp, #32]
   da4aa:	2900      	cmp	r1, #0
   da4ac:	4683      	mov	fp, r0
   da4ae:	db04      	blt.n	da4ba <strftime+0x406>
   da4b0:	2364      	movs	r3, #100	; 0x64
   da4b2:	fb91 f3f3 	sdiv	r3, r1, r3
   da4b6:	3313      	adds	r3, #19
   da4b8:	e008      	b.n	da4cc <strftime+0x418>
   da4ba:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   da4be:	9108      	str	r1, [sp, #32]
   da4c0:	f001 fc72 	bl	dbda8 <abs>
   da4c4:	9908      	ldr	r1, [sp, #32]
   da4c6:	2364      	movs	r3, #100	; 0x64
   da4c8:	fb90 f3f3 	sdiv	r3, r0, r3
   da4cc:	6968      	ldr	r0, [r5, #20]
   da4ce:	2800      	cmp	r0, #0
   da4d0:	db06      	blt.n	da4e0 <strftime+0x42c>
   da4d2:	f04f 0e64 	mov.w	lr, #100	; 0x64
   da4d6:	fb90 fcfe 	sdiv	ip, r0, lr
   da4da:	fb0e 001c 	mls	r0, lr, ip, r0
   da4de:	e00d      	b.n	da4fc <strftime+0x448>
   da4e0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da4e4:	9109      	str	r1, [sp, #36]	; 0x24
   da4e6:	9308      	str	r3, [sp, #32]
   da4e8:	f001 fc5e 	bl	dbda8 <abs>
   da4ec:	f04f 0e64 	mov.w	lr, #100	; 0x64
   da4f0:	9909      	ldr	r1, [sp, #36]	; 0x24
   da4f2:	9b08      	ldr	r3, [sp, #32]
   da4f4:	fb90 fcfe 	sdiv	ip, r0, lr
   da4f8:	fb0c 001e 	mls	r0, ip, lr, r0
   da4fc:	f1bb 0f00 	cmp.w	fp, #0
   da500:	da08      	bge.n	da514 <strftime+0x460>
   da502:	6969      	ldr	r1, [r5, #20]
   da504:	4a3e      	ldr	r2, [pc, #248]	; (da600 <strftime+0x54c>)
   da506:	4291      	cmp	r1, r2
   da508:	da0a      	bge.n	da520 <strftime+0x46c>
   da50a:	f04f 0b01 	mov.w	fp, #1
   da50e:	f8cd b01c 	str.w	fp, [sp, #28]
   da512:	e005      	b.n	da520 <strftime+0x46c>
   da514:	d004      	beq.n	da520 <strftime+0x46c>
   da516:	4a2f      	ldr	r2, [pc, #188]	; (da5d4 <strftime+0x520>)
   da518:	4291      	cmp	r1, r2
   da51a:	bfb8      	it	lt
   da51c:	f04f 3bff 	movlt.w	fp, #4294967295	; 0xffffffff
   da520:	eb0b 0200 	add.w	r2, fp, r0
   da524:	1c50      	adds	r0, r2, #1
   da526:	d102      	bne.n	da52e <strftime+0x47a>
   da528:	3b01      	subs	r3, #1
   da52a:	2263      	movs	r2, #99	; 0x63
   da52c:	e003      	b.n	da536 <strftime+0x482>
   da52e:	2a64      	cmp	r2, #100	; 0x64
   da530:	bf04      	itt	eq
   da532:	3301      	addeq	r3, #1
   da534:	2200      	moveq	r2, #0
   da536:	2064      	movs	r0, #100	; 0x64
   da538:	fb00 2303 	mla	r3, r0, r3, r2
   da53c:	9a07      	ldr	r2, [sp, #28]
   da53e:	b142      	cbz	r2, da552 <strftime+0x49e>
   da540:	222d      	movs	r2, #45	; 0x2d
   da542:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   da546:	f1b8 0f00 	cmp.w	r8, #0
   da54a:	d013      	beq.n	da574 <strftime+0x4c0>
   da54c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da550:	e010      	b.n	da574 <strftime+0x4c0>
   da552:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   da556:	d110      	bne.n	da57a <strftime+0x4c6>
   da558:	f242 720f 	movw	r2, #9999	; 0x270f
   da55c:	4293      	cmp	r3, r2
   da55e:	d90c      	bls.n	da57a <strftime+0x4c6>
   da560:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   da564:	f1b8 0f00 	cmp.w	r8, #0
   da568:	d1f0      	bne.n	da54c <strftime+0x498>
   da56a:	aa12      	add	r2, sp, #72	; 0x48
   da56c:	2125      	movs	r1, #37	; 0x25
   da56e:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   da572:	e00a      	b.n	da58a <strftime+0x4d6>
   da574:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   da578:	e000      	b.n	da57c <strftime+0x4c8>
   da57a:	aa0a      	add	r2, sp, #40	; 0x28
   da57c:	2125      	movs	r1, #37	; 0x25
   da57e:	7011      	strb	r1, [r2, #0]
   da580:	f1ba 0f00 	cmp.w	sl, #0
   da584:	d101      	bne.n	da58a <strftime+0x4d6>
   da586:	1c50      	adds	r0, r2, #1
   da588:	e002      	b.n	da590 <strftime+0x4dc>
   da58a:	2130      	movs	r1, #48	; 0x30
   da58c:	1c90      	adds	r0, r2, #2
   da58e:	7051      	strb	r1, [r2, #1]
   da590:	491c      	ldr	r1, [pc, #112]	; (da604 <strftime+0x550>)
   da592:	9307      	str	r3, [sp, #28]
   da594:	f7ff fd0a 	bl	d9fac <strcpy>
   da598:	9b07      	ldr	r3, [sp, #28]
   da59a:	9300      	str	r3, [sp, #0]
   da59c:	e1ad      	b.n	da8fa <strftime+0x846>
   da59e:	4a14      	ldr	r2, [pc, #80]	; (da5f0 <strftime+0x53c>)
   da5a0:	4912      	ldr	r1, [pc, #72]	; (da5ec <strftime+0x538>)
   da5a2:	68ab      	ldr	r3, [r5, #8]
   da5a4:	286b      	cmp	r0, #107	; 0x6b
   da5a6:	bf08      	it	eq
   da5a8:	460a      	moveq	r2, r1
   da5aa:	e6e4      	b.n	da376 <strftime+0x2c2>
   da5ac:	68a9      	ldr	r1, [r5, #8]
   da5ae:	230c      	movs	r3, #12
   da5b0:	b131      	cbz	r1, da5c0 <strftime+0x50c>
   da5b2:	4299      	cmp	r1, r3
   da5b4:	bf0e      	itee	eq
   da5b6:	460b      	moveq	r3, r1
   da5b8:	fb91 f2f3 	sdivne	r2, r1, r3
   da5bc:	fb03 1312 	mlsne	r3, r3, r2, r1
   da5c0:	4a0a      	ldr	r2, [pc, #40]	; (da5ec <strftime+0x538>)
   da5c2:	490b      	ldr	r1, [pc, #44]	; (da5f0 <strftime+0x53c>)
   da5c4:	2849      	cmp	r0, #73	; 0x49
   da5c6:	bf08      	it	eq
   da5c8:	460a      	moveq	r2, r1
   da5ca:	e6d4      	b.n	da376 <strftime+0x2c2>
   da5cc:	69eb      	ldr	r3, [r5, #28]
   da5ce:	4a0e      	ldr	r2, [pc, #56]	; (da608 <strftime+0x554>)
   da5d0:	3301      	adds	r3, #1
   da5d2:	e6d0      	b.n	da376 <strftime+0x2c2>
   da5d4:	fffff894 	.word	0xfffff894
   da5d8:	000dd85b 	.word	0x000dd85b
   da5dc:	000dcd39 	.word	0x000dcd39
   da5e0:	000dd84c 	.word	0x000dd84c
   da5e4:	000dd853 	.word	0x000dd853
   da5e8:	000dd85d 	.word	0x000dd85d
   da5ec:	000dd85f 	.word	0x000dd85f
   da5f0:	000dd86d 	.word	0x000dd86d
   da5f4:	000dd863 	.word	0x000dd863
   da5f8:	000dd872 	.word	0x000dd872
   da5fc:	000dd876 	.word	0x000dd876
   da600:	fffff895 	.word	0xfffff895
   da604:	000dd87e 	.word	0x000dd87e
   da608:	000dd882 	.word	0x000dd882
   da60c:	692b      	ldr	r3, [r5, #16]
   da60e:	3301      	adds	r3, #1
   da610:	e13d      	b.n	da88e <strftime+0x7da>
   da612:	686b      	ldr	r3, [r5, #4]
   da614:	e13b      	b.n	da88e <strftime+0x7da>
   da616:	9b02      	ldr	r3, [sp, #8]
   da618:	429c      	cmp	r4, r3
   da61a:	f080 81f5 	bcs.w	daa08 <strftime+0x954>
   da61e:	230a      	movs	r3, #10
   da620:	e1e5      	b.n	da9ee <strftime+0x93a>
   da622:	68ab      	ldr	r3, [r5, #8]
   da624:	9a03      	ldr	r2, [sp, #12]
   da626:	2b0b      	cmp	r3, #11
   da628:	bfcc      	ite	gt
   da62a:	23a4      	movgt	r3, #164	; 0xa4
   da62c:	23a0      	movle	r3, #160	; 0xa0
   da62e:	4413      	add	r3, r2
   da630:	f8d3 8004 	ldr.w	r8, [r3, #4]
   da634:	4640      	mov	r0, r8
   da636:	f000 f9f1 	bl	daa1c <strlen>
   da63a:	4bb2      	ldr	r3, [pc, #712]	; (da904 <strftime+0x850>)
   da63c:	f8d3 e000 	ldr.w	lr, [r3]
   da640:	1939      	adds	r1, r7, r4
   da642:	4642      	mov	r2, r8
   da644:	4420      	add	r0, r4
   da646:	4284      	cmp	r4, r0
   da648:	f000 81d3 	beq.w	da9f2 <strftime+0x93e>
   da64c:	9b02      	ldr	r3, [sp, #8]
   da64e:	429c      	cmp	r4, r3
   da650:	f080 81da 	bcs.w	daa08 <strftime+0x954>
   da654:	f899 3000 	ldrb.w	r3, [r9]
   da658:	2b50      	cmp	r3, #80	; 0x50
   da65a:	f104 0401 	add.w	r4, r4, #1
   da65e:	7813      	ldrb	r3, [r2, #0]
   da660:	d10a      	bne.n	da678 <strftime+0x5c4>
   da662:	eb0e 0c03 	add.w	ip, lr, r3
   da666:	f89c c001 	ldrb.w	ip, [ip, #1]
   da66a:	f00c 0c03 	and.w	ip, ip, #3
   da66e:	f1bc 0f01 	cmp.w	ip, #1
   da672:	bf08      	it	eq
   da674:	3320      	addeq	r3, #32
   da676:	b2db      	uxtb	r3, r3
   da678:	f801 3b01 	strb.w	r3, [r1], #1
   da67c:	3201      	adds	r2, #1
   da67e:	e7e2      	b.n	da646 <strftime+0x592>
   da680:	686b      	ldr	r3, [r5, #4]
   da682:	9300      	str	r3, [sp, #0]
   da684:	4aa0      	ldr	r2, [pc, #640]	; (da908 <strftime+0x854>)
   da686:	68ab      	ldr	r3, [r5, #8]
   da688:	e139      	b.n	da8fe <strftime+0x84a>
   da68a:	6a2b      	ldr	r3, [r5, #32]
   da68c:	2b00      	cmp	r3, #0
   da68e:	db17      	blt.n	da6c0 <strftime+0x60c>
   da690:	f001 fa02 	bl	dba98 <__tz_lock>
   da694:	9b06      	ldr	r3, [sp, #24]
   da696:	b91b      	cbnz	r3, da6a0 <strftime+0x5ec>
   da698:	f001 fa00 	bl	dba9c <_tzset_unlocked>
   da69c:	2301      	movs	r3, #1
   da69e:	9306      	str	r3, [sp, #24]
   da6a0:	f001 fefc 	bl	dc49c <__gettzinfo>
   da6a4:	6a2b      	ldr	r3, [r5, #32]
   da6a6:	2b00      	cmp	r3, #0
   da6a8:	bfd4      	ite	le
   da6aa:	2300      	movle	r3, #0
   da6ac:	2301      	movgt	r3, #1
   da6ae:	221c      	movs	r2, #28
   da6b0:	fb02 0003 	mla	r0, r2, r3, r0
   da6b4:	6a03      	ldr	r3, [r0, #32]
   da6b6:	f1c3 0800 	rsb	r8, r3, #0
   da6ba:	f001 f9ee 	bl	dba9a <__tz_unlock>
   da6be:	e001      	b.n	da6c4 <strftime+0x610>
   da6c0:	f04f 0800 	mov.w	r8, #0
   da6c4:	f8d5 e014 	ldr.w	lr, [r5, #20]
   da6c8:	4670      	mov	r0, lr
   da6ca:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   da6ce:	ea4f 71e0 	mov.w	r1, r0, asr #31
   da6d2:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   da6d6:	2a00      	cmp	r2, #0
   da6d8:	f173 0b00 	sbcs.w	fp, r3, #0
   da6dc:	ebc4 0c06 	rsb	ip, r4, r6
   da6e0:	eb07 0a04 	add.w	sl, r7, r4
   da6e4:	da03      	bge.n	da6ee <strftime+0x63a>
   da6e6:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   da6ea:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   da6ee:	0891      	lsrs	r1, r2, #2
   da6f0:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   da6f4:	109b      	asrs	r3, r3, #2
   da6f6:	9104      	str	r1, [sp, #16]
   da6f8:	9305      	str	r3, [sp, #20]
   da6fa:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   da6fe:	2364      	movs	r3, #100	; 0x64
   da700:	fb91 f1f3 	sdiv	r1, r1, r3
   da704:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   da708:	1a52      	subs	r2, r2, r1
   da70a:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   da70e:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   da712:	f44f 71c8 	mov.w	r1, #400	; 0x190
   da716:	fb90 f1f1 	sdiv	r1, r0, r1
   da71a:	1852      	adds	r2, r2, r1
   da71c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   da720:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   da724:	f240 116d 	movw	r1, #365	; 0x16d
   da728:	fb01 fe0e 	mul.w	lr, r1, lr
   da72c:	69e9      	ldr	r1, [r5, #28]
   da72e:	eb12 020e 	adds.w	r2, r2, lr
   da732:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   da736:	1852      	adds	r2, r2, r1
   da738:	f04f 0e18 	mov.w	lr, #24
   da73c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   da740:	fba2 010e 	umull	r0, r1, r2, lr
   da744:	fb0e 1103 	mla	r1, lr, r3, r1
   da748:	68ab      	ldr	r3, [r5, #8]
   da74a:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   da74e:	18c0      	adds	r0, r0, r3
   da750:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   da754:	fba0 230e 	umull	r2, r3, r0, lr
   da758:	fb0e 3301 	mla	r3, lr, r1, r3
   da75c:	6869      	ldr	r1, [r5, #4]
   da75e:	1852      	adds	r2, r2, r1
   da760:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   da764:	fba2 010e 	umull	r0, r1, r2, lr
   da768:	fb0e 1103 	mla	r1, lr, r3, r1
   da76c:	682b      	ldr	r3, [r5, #0]
   da76e:	4a67      	ldr	r2, [pc, #412]	; (da90c <strftime+0x858>)
   da770:	18c0      	adds	r0, r0, r3
   da772:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   da776:	ebb0 0008 	subs.w	r0, r0, r8
   da77a:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   da77e:	e9cd 0100 	strd	r0, r1, [sp]
   da782:	4661      	mov	r1, ip
   da784:	4650      	mov	r0, sl
   da786:	f7fc fb0d 	bl	d6da4 <sniprintf>
   da78a:	e5f8      	b.n	da37e <strftime+0x2ca>
   da78c:	682b      	ldr	r3, [r5, #0]
   da78e:	e07e      	b.n	da88e <strftime+0x7da>
   da790:	9b02      	ldr	r3, [sp, #8]
   da792:	429c      	cmp	r4, r3
   da794:	f080 8138 	bcs.w	daa08 <strftime+0x954>
   da798:	2309      	movs	r3, #9
   da79a:	e128      	b.n	da9ee <strftime+0x93a>
   da79c:	682b      	ldr	r3, [r5, #0]
   da79e:	9301      	str	r3, [sp, #4]
   da7a0:	686b      	ldr	r3, [r5, #4]
   da7a2:	9300      	str	r3, [sp, #0]
   da7a4:	4a5a      	ldr	r2, [pc, #360]	; (da910 <strftime+0x85c>)
   da7a6:	68ab      	ldr	r3, [r5, #8]
   da7a8:	1b31      	subs	r1, r6, r4
   da7aa:	1938      	adds	r0, r7, r4
   da7ac:	e60d      	b.n	da3ca <strftime+0x316>
   da7ae:	9b02      	ldr	r3, [sp, #8]
   da7b0:	429c      	cmp	r4, r3
   da7b2:	f080 8129 	bcs.w	daa08 <strftime+0x954>
   da7b6:	69ab      	ldr	r3, [r5, #24]
   da7b8:	1c62      	adds	r2, r4, #1
   da7ba:	b90b      	cbnz	r3, da7c0 <strftime+0x70c>
   da7bc:	2337      	movs	r3, #55	; 0x37
   da7be:	e000      	b.n	da7c2 <strftime+0x70e>
   da7c0:	3330      	adds	r3, #48	; 0x30
   da7c2:	553b      	strb	r3, [r7, r4]
   da7c4:	4614      	mov	r4, r2
   da7c6:	e114      	b.n	da9f2 <strftime+0x93e>
   da7c8:	69eb      	ldr	r3, [r5, #28]
   da7ca:	69aa      	ldr	r2, [r5, #24]
   da7cc:	3307      	adds	r3, #7
   da7ce:	1a9b      	subs	r3, r3, r2
   da7d0:	2207      	movs	r2, #7
   da7d2:	fb93 f3f2 	sdiv	r3, r3, r2
   da7d6:	e05a      	b.n	da88e <strftime+0x7da>
   da7d8:	4628      	mov	r0, r5
   da7da:	f7ff fc0a 	bl	d9ff2 <iso_year_adjust>
   da7de:	69aa      	ldr	r2, [r5, #24]
   da7e0:	b10a      	cbz	r2, da7e6 <strftime+0x732>
   da7e2:	1e53      	subs	r3, r2, #1
   da7e4:	e000      	b.n	da7e8 <strftime+0x734>
   da7e6:	2306      	movs	r3, #6
   da7e8:	2800      	cmp	r0, #0
   da7ea:	dc2f      	bgt.n	da84c <strftime+0x798>
   da7ec:	69ea      	ldr	r2, [r5, #28]
   da7ee:	d101      	bne.n	da7f4 <strftime+0x740>
   da7f0:	320a      	adds	r2, #10
   da7f2:	e03b      	b.n	da86c <strftime+0x7b8>
   da7f4:	1a9a      	subs	r2, r3, r2
   da7f6:	696b      	ldr	r3, [r5, #20]
   da7f8:	f240 716b 	movw	r1, #1899	; 0x76b
   da7fc:	2b00      	cmp	r3, #0
   da7fe:	bfb4      	ite	lt
   da800:	4608      	movlt	r0, r1
   da802:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   da806:	4418      	add	r0, r3
   da808:	0781      	lsls	r1, r0, #30
   da80a:	d107      	bne.n	da81c <strftime+0x768>
   da80c:	4601      	mov	r1, r0
   da80e:	f04f 0e64 	mov.w	lr, #100	; 0x64
   da812:	fb90 f0fe 	sdiv	r0, r0, lr
   da816:	fb0e 1110 	mls	r1, lr, r0, r1
   da81a:	b981      	cbnz	r1, da83e <strftime+0x78a>
   da81c:	2b00      	cmp	r3, #0
   da81e:	f240 716b 	movw	r1, #1899	; 0x76b
   da822:	bfa8      	it	ge
   da824:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   da828:	4419      	add	r1, r3
   da82a:	f44f 73c8 	mov.w	r3, #400	; 0x190
   da82e:	fb91 f0f3 	sdiv	r0, r1, r3
   da832:	fb03 1110 	mls	r1, r3, r0, r1
   da836:	fab1 f181 	clz	r1, r1
   da83a:	0949      	lsrs	r1, r1, #5
   da83c:	e000      	b.n	da840 <strftime+0x78c>
   da83e:	2101      	movs	r1, #1
   da840:	1a52      	subs	r2, r2, r1
   da842:	2a05      	cmp	r2, #5
   da844:	bfb4      	ite	lt
   da846:	2335      	movlt	r3, #53	; 0x35
   da848:	2334      	movge	r3, #52	; 0x34
   da84a:	e020      	b.n	da88e <strftime+0x7da>
   da84c:	2301      	movs	r3, #1
   da84e:	e01e      	b.n	da88e <strftime+0x7da>
   da850:	9b02      	ldr	r3, [sp, #8]
   da852:	429c      	cmp	r4, r3
   da854:	f080 80d8 	bcs.w	daa08 <strftime+0x954>
   da858:	69ab      	ldr	r3, [r5, #24]
   da85a:	3330      	adds	r3, #48	; 0x30
   da85c:	e0c7      	b.n	da9ee <strftime+0x93a>
   da85e:	69aa      	ldr	r2, [r5, #24]
   da860:	b10a      	cbz	r2, da866 <strftime+0x7b2>
   da862:	1e53      	subs	r3, r2, #1
   da864:	e000      	b.n	da868 <strftime+0x7b4>
   da866:	2306      	movs	r3, #6
   da868:	69ea      	ldr	r2, [r5, #28]
   da86a:	3207      	adds	r2, #7
   da86c:	1ad2      	subs	r2, r2, r3
   da86e:	2307      	movs	r3, #7
   da870:	fb92 f3f3 	sdiv	r3, r2, r3
   da874:	e00b      	b.n	da88e <strftime+0x7da>
   da876:	6968      	ldr	r0, [r5, #20]
   da878:	2800      	cmp	r0, #0
   da87a:	da03      	bge.n	da884 <strftime+0x7d0>
   da87c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da880:	f001 fa92 	bl	dbda8 <abs>
   da884:	2364      	movs	r3, #100	; 0x64
   da886:	fb90 f2f3 	sdiv	r2, r0, r3
   da88a:	fb02 0313 	mls	r3, r2, r3, r0
   da88e:	4a21      	ldr	r2, [pc, #132]	; (da914 <strftime+0x860>)
   da890:	e571      	b.n	da376 <strftime+0x2c2>
   da892:	696b      	ldr	r3, [r5, #20]
   da894:	4a20      	ldr	r2, [pc, #128]	; (da918 <strftime+0x864>)
   da896:	4293      	cmp	r3, r2
   da898:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   da89c:	da05      	bge.n	da8aa <strftime+0x7f6>
   da89e:	232d      	movs	r3, #45	; 0x2d
   da8a0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   da8a4:	f1cb 0b00 	rsb	fp, fp, #0
   da8a8:	e008      	b.n	da8bc <strftime+0x808>
   da8aa:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   da8ae:	d10d      	bne.n	da8cc <strftime+0x818>
   da8b0:	f242 730f 	movw	r3, #9999	; 0x270f
   da8b4:	459b      	cmp	fp, r3
   da8b6:	d911      	bls.n	da8dc <strftime+0x828>
   da8b8:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   da8bc:	f1b8 0f00 	cmp.w	r8, #0
   da8c0:	d001      	beq.n	da8c6 <strftime+0x812>
   da8c2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da8c6:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   da8ca:	e000      	b.n	da8ce <strftime+0x81a>
   da8cc:	ab0a      	add	r3, sp, #40	; 0x28
   da8ce:	2225      	movs	r2, #37	; 0x25
   da8d0:	701a      	strb	r2, [r3, #0]
   da8d2:	f1ba 0f00 	cmp.w	sl, #0
   da8d6:	d108      	bne.n	da8ea <strftime+0x836>
   da8d8:	1c58      	adds	r0, r3, #1
   da8da:	e009      	b.n	da8f0 <strftime+0x83c>
   da8dc:	f1b8 0f00 	cmp.w	r8, #0
   da8e0:	d1f4      	bne.n	da8cc <strftime+0x818>
   da8e2:	2325      	movs	r3, #37	; 0x25
   da8e4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   da8e8:	ab0a      	add	r3, sp, #40	; 0x28
   da8ea:	2230      	movs	r2, #48	; 0x30
   da8ec:	1c98      	adds	r0, r3, #2
   da8ee:	705a      	strb	r2, [r3, #1]
   da8f0:	490a      	ldr	r1, [pc, #40]	; (da91c <strftime+0x868>)
   da8f2:	f7ff fb5b 	bl	d9fac <strcpy>
   da8f6:	f8cd b000 	str.w	fp, [sp]
   da8fa:	4643      	mov	r3, r8
   da8fc:	aa0a      	add	r2, sp, #40	; 0x28
   da8fe:	1b31      	subs	r1, r6, r4
   da900:	1938      	adds	r0, r7, r4
   da902:	e03e      	b.n	da982 <strftime+0x8ce>
   da904:	2003df78 	.word	0x2003df78
   da908:	000dd891 	.word	0x000dd891
   da90c:	000dd887 	.word	0x000dd887
   da910:	000dd88c 	.word	0x000dd88c
   da914:	000dd86d 	.word	0x000dd86d
   da918:	fffff894 	.word	0xfffff894
   da91c:	000dd87e 	.word	0x000dd87e
   da920:	6a2b      	ldr	r3, [r5, #32]
   da922:	2b00      	cmp	r3, #0
   da924:	db65      	blt.n	da9f2 <strftime+0x93e>
   da926:	f001 f8b7 	bl	dba98 <__tz_lock>
   da92a:	9b06      	ldr	r3, [sp, #24]
   da92c:	b91b      	cbnz	r3, da936 <strftime+0x882>
   da92e:	f001 f8b5 	bl	dba9c <_tzset_unlocked>
   da932:	2301      	movs	r3, #1
   da934:	9306      	str	r3, [sp, #24]
   da936:	f001 fdb1 	bl	dc49c <__gettzinfo>
   da93a:	6a2b      	ldr	r3, [r5, #32]
   da93c:	2b00      	cmp	r3, #0
   da93e:	bfd4      	ite	le
   da940:	2300      	movle	r3, #0
   da942:	2301      	movgt	r3, #1
   da944:	221c      	movs	r2, #28
   da946:	fb02 0003 	mla	r0, r2, r3, r0
   da94a:	eb07 0a04 	add.w	sl, r7, r4
   da94e:	6a03      	ldr	r3, [r0, #32]
   da950:	f1c3 0800 	rsb	r8, r3, #0
   da954:	f001 f8a1 	bl	dba9a <__tz_unlock>
   da958:	233c      	movs	r3, #60	; 0x3c
   da95a:	fb98 f0f3 	sdiv	r0, r8, r3
   da95e:	9307      	str	r3, [sp, #28]
   da960:	f001 fda0 	bl	dc4a4 <labs>
   da964:	9b07      	ldr	r3, [sp, #28]
   da966:	fb90 f2f3 	sdiv	r2, r0, r3
   da96a:	ebc4 0b06 	rsb	fp, r4, r6
   da96e:	fb02 0013 	mls	r0, r2, r3, r0
   da972:	4a28      	ldr	r2, [pc, #160]	; (daa14 <strftime+0x960>)
   da974:	9000      	str	r0, [sp, #0]
   da976:	4659      	mov	r1, fp
   da978:	4650      	mov	r0, sl
   da97a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da97e:	fb98 f3f3 	sdiv	r3, r8, r3
   da982:	f7fc fa0f 	bl	d6da4 <sniprintf>
   da986:	e4fa      	b.n	da37e <strftime+0x2ca>
   da988:	4404      	add	r4, r0
   da98a:	42a6      	cmp	r6, r4
   da98c:	d831      	bhi.n	da9f2 <strftime+0x93e>
   da98e:	e03b      	b.n	daa08 <strftime+0x954>
   da990:	6a2b      	ldr	r3, [r5, #32]
   da992:	2b00      	cmp	r3, #0
   da994:	db2d      	blt.n	da9f2 <strftime+0x93e>
   da996:	f001 f87f 	bl	dba98 <__tz_lock>
   da99a:	9b06      	ldr	r3, [sp, #24]
   da99c:	b91b      	cbnz	r3, da9a6 <strftime+0x8f2>
   da99e:	f001 f87d 	bl	dba9c <_tzset_unlocked>
   da9a2:	2301      	movs	r3, #1
   da9a4:	9306      	str	r3, [sp, #24]
   da9a6:	6a2b      	ldr	r3, [r5, #32]
   da9a8:	4a1b      	ldr	r2, [pc, #108]	; (daa18 <strftime+0x964>)
   da9aa:	2b00      	cmp	r3, #0
   da9ac:	bfd4      	ite	le
   da9ae:	2300      	movle	r3, #0
   da9b0:	2301      	movgt	r3, #1
   da9b2:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   da9b6:	4640      	mov	r0, r8
   da9b8:	f000 f830 	bl	daa1c <strlen>
   da9bc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da9c0:	193b      	adds	r3, r7, r4
   da9c2:	4420      	add	r0, r4
   da9c4:	4284      	cmp	r4, r0
   da9c6:	d00b      	beq.n	da9e0 <strftime+0x92c>
   da9c8:	9a02      	ldr	r2, [sp, #8]
   da9ca:	4294      	cmp	r4, r2
   da9cc:	d205      	bcs.n	da9da <strftime+0x926>
   da9ce:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da9d2:	f803 2b01 	strb.w	r2, [r3], #1
   da9d6:	3401      	adds	r4, #1
   da9d8:	e7f4      	b.n	da9c4 <strftime+0x910>
   da9da:	f001 f85e 	bl	dba9a <__tz_unlock>
   da9de:	e013      	b.n	daa08 <strftime+0x954>
   da9e0:	f001 f85b 	bl	dba9a <__tz_unlock>
   da9e4:	e005      	b.n	da9f2 <strftime+0x93e>
   da9e6:	9b02      	ldr	r3, [sp, #8]
   da9e8:	429c      	cmp	r4, r3
   da9ea:	d20d      	bcs.n	daa08 <strftime+0x954>
   da9ec:	2325      	movs	r3, #37	; 0x25
   da9ee:	553b      	strb	r3, [r7, r4]
   da9f0:	3401      	adds	r4, #1
   da9f2:	f899 3000 	ldrb.w	r3, [r9]
   da9f6:	b11b      	cbz	r3, daa00 <strftime+0x94c>
   da9f8:	f109 0901 	add.w	r9, r9, #1
   da9fc:	f7ff bb69 	b.w	da0d2 <strftime+0x1e>
   daa00:	b126      	cbz	r6, daa0c <strftime+0x958>
   daa02:	2300      	movs	r3, #0
   daa04:	553b      	strb	r3, [r7, r4]
   daa06:	e001      	b.n	daa0c <strftime+0x958>
   daa08:	2000      	movs	r0, #0
   daa0a:	e000      	b.n	daa0e <strftime+0x95a>
   daa0c:	4620      	mov	r0, r4
   daa0e:	b013      	add	sp, #76	; 0x4c
   daa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daa14:	000dd89b 	.word	0x000dd89b
   daa18:	2003e018 	.word	0x2003e018

000daa1c <strlen>:
   daa1c:	4603      	mov	r3, r0
   daa1e:	f813 2b01 	ldrb.w	r2, [r3], #1
   daa22:	2a00      	cmp	r2, #0
   daa24:	d1fb      	bne.n	daa1e <strlen+0x2>
   daa26:	1a18      	subs	r0, r3, r0
   daa28:	3801      	subs	r0, #1
   daa2a:	4770      	bx	lr

000daa2c <strncmp>:
   daa2c:	b530      	push	{r4, r5, lr}
   daa2e:	b182      	cbz	r2, daa52 <strncmp+0x26>
   daa30:	1e45      	subs	r5, r0, #1
   daa32:	3901      	subs	r1, #1
   daa34:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   daa38:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   daa3c:	42a3      	cmp	r3, r4
   daa3e:	d106      	bne.n	daa4e <strncmp+0x22>
   daa40:	43ec      	mvns	r4, r5
   daa42:	4414      	add	r4, r2
   daa44:	42e0      	cmn	r0, r4
   daa46:	d001      	beq.n	daa4c <strncmp+0x20>
   daa48:	2b00      	cmp	r3, #0
   daa4a:	d1f3      	bne.n	daa34 <strncmp+0x8>
   daa4c:	461c      	mov	r4, r3
   daa4e:	1b18      	subs	r0, r3, r4
   daa50:	bd30      	pop	{r4, r5, pc}
   daa52:	4610      	mov	r0, r2
   daa54:	bd30      	pop	{r4, r5, pc}

000daa56 <strncpy>:
   daa56:	b510      	push	{r4, lr}
   daa58:	4603      	mov	r3, r0
   daa5a:	b142      	cbz	r2, daa6e <strncpy+0x18>
   daa5c:	f811 4b01 	ldrb.w	r4, [r1], #1
   daa60:	f803 4b01 	strb.w	r4, [r3], #1
   daa64:	3a01      	subs	r2, #1
   daa66:	2c00      	cmp	r4, #0
   daa68:	d1f7      	bne.n	daa5a <strncpy+0x4>
   daa6a:	441a      	add	r2, r3
   daa6c:	e000      	b.n	daa70 <strncpy+0x1a>
   daa6e:	bd10      	pop	{r4, pc}
   daa70:	4293      	cmp	r3, r2
   daa72:	d002      	beq.n	daa7a <strncpy+0x24>
   daa74:	f803 4b01 	strb.w	r4, [r3], #1
   daa78:	e7fa      	b.n	daa70 <strncpy+0x1a>
   daa7a:	bd10      	pop	{r4, pc}

000daa7c <sulp>:
   daa7c:	b570      	push	{r4, r5, r6, lr}
   daa7e:	4604      	mov	r4, r0
   daa80:	460d      	mov	r5, r1
   daa82:	ec45 4b10 	vmov	d0, r4, r5
   daa86:	4616      	mov	r6, r2
   daa88:	f001 ffd6 	bl	dca38 <__ulp>
   daa8c:	ec51 0b10 	vmov	r0, r1, d0
   daa90:	b17e      	cbz	r6, daab2 <sulp+0x36>
   daa92:	f3c5 530a 	ubfx	r3, r5, #20, #11
   daa96:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   daa9a:	2b00      	cmp	r3, #0
   daa9c:	dd09      	ble.n	daab2 <sulp+0x36>
   daa9e:	051b      	lsls	r3, r3, #20
   daaa0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   daaa4:	2400      	movs	r4, #0
   daaa6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   daaaa:	4622      	mov	r2, r4
   daaac:	462b      	mov	r3, r5
   daaae:	f7fe faad 	bl	d900c <__aeabi_dmul>
   daab2:	bd70      	pop	{r4, r5, r6, pc}
   daab4:	0000      	movs	r0, r0
	...

000daab8 <_strtod_r>:
   daab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daabc:	b09d      	sub	sp, #116	; 0x74
   daabe:	2300      	movs	r3, #0
   daac0:	9002      	str	r0, [sp, #8]
   daac2:	460c      	mov	r4, r1
   daac4:	9213      	str	r2, [sp, #76]	; 0x4c
   daac6:	9318      	str	r3, [sp, #96]	; 0x60
   daac8:	f04f 0a00 	mov.w	sl, #0
   daacc:	f04f 0b00 	mov.w	fp, #0
   daad0:	9117      	str	r1, [sp, #92]	; 0x5c
   daad2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   daad4:	781a      	ldrb	r2, [r3, #0]
   daad6:	2a0d      	cmp	r2, #13
   daad8:	d805      	bhi.n	daae6 <_strtod_r+0x2e>
   daada:	2a09      	cmp	r2, #9
   daadc:	d213      	bcs.n	dab06 <_strtod_r+0x4e>
   daade:	2a00      	cmp	r2, #0
   daae0:	f000 81ac 	beq.w	dae3c <_strtod_r+0x384>
   daae4:	e012      	b.n	dab0c <_strtod_r+0x54>
   daae6:	2a2b      	cmp	r2, #43	; 0x2b
   daae8:	d004      	beq.n	daaf4 <_strtod_r+0x3c>
   daaea:	2a2d      	cmp	r2, #45	; 0x2d
   daaec:	d004      	beq.n	daaf8 <_strtod_r+0x40>
   daaee:	2a20      	cmp	r2, #32
   daaf0:	d10c      	bne.n	dab0c <_strtod_r+0x54>
   daaf2:	e008      	b.n	dab06 <_strtod_r+0x4e>
   daaf4:	2200      	movs	r2, #0
   daaf6:	e000      	b.n	daafa <_strtod_r+0x42>
   daaf8:	2201      	movs	r2, #1
   daafa:	920c      	str	r2, [sp, #48]	; 0x30
   daafc:	1c5a      	adds	r2, r3, #1
   daafe:	9217      	str	r2, [sp, #92]	; 0x5c
   dab00:	785b      	ldrb	r3, [r3, #1]
   dab02:	b92b      	cbnz	r3, dab10 <_strtod_r+0x58>
   dab04:	e19a      	b.n	dae3c <_strtod_r+0x384>
   dab06:	3301      	adds	r3, #1
   dab08:	9317      	str	r3, [sp, #92]	; 0x5c
   dab0a:	e7e2      	b.n	daad2 <_strtod_r+0x1a>
   dab0c:	2300      	movs	r3, #0
   dab0e:	930c      	str	r3, [sp, #48]	; 0x30
   dab10:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   dab12:	782b      	ldrb	r3, [r5, #0]
   dab14:	2b30      	cmp	r3, #48	; 0x30
   dab16:	d15c      	bne.n	dabd2 <_strtod_r+0x11a>
   dab18:	786b      	ldrb	r3, [r5, #1]
   dab1a:	2b58      	cmp	r3, #88	; 0x58
   dab1c:	d001      	beq.n	dab22 <_strtod_r+0x6a>
   dab1e:	2b78      	cmp	r3, #120	; 0x78
   dab20:	d14c      	bne.n	dabbc <_strtod_r+0x104>
   dab22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dab24:	9301      	str	r3, [sp, #4]
   dab26:	ab18      	add	r3, sp, #96	; 0x60
   dab28:	9300      	str	r3, [sp, #0]
   dab2a:	4aa9      	ldr	r2, [pc, #676]	; (dadd0 <_strtod_r+0x318>)
   dab2c:	9802      	ldr	r0, [sp, #8]
   dab2e:	ab19      	add	r3, sp, #100	; 0x64
   dab30:	a917      	add	r1, sp, #92	; 0x5c
   dab32:	f001 f99c 	bl	dbe6e <__gethex>
   dab36:	f010 0607 	ands.w	r6, r0, #7
   dab3a:	4604      	mov	r4, r0
   dab3c:	f000 8587 	beq.w	db64e <_strtod_r+0xb96>
   dab40:	2e06      	cmp	r6, #6
   dab42:	d105      	bne.n	dab50 <_strtod_r+0x98>
   dab44:	3501      	adds	r5, #1
   dab46:	2300      	movs	r3, #0
   dab48:	9517      	str	r5, [sp, #92]	; 0x5c
   dab4a:	930c      	str	r3, [sp, #48]	; 0x30
   dab4c:	f000 bd7f 	b.w	db64e <_strtod_r+0xb96>
   dab50:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dab52:	b13a      	cbz	r2, dab64 <_strtod_r+0xac>
   dab54:	2135      	movs	r1, #53	; 0x35
   dab56:	a81a      	add	r0, sp, #104	; 0x68
   dab58:	f002 f85b 	bl	dcc12 <__copybits>
   dab5c:	9918      	ldr	r1, [sp, #96]	; 0x60
   dab5e:	9802      	ldr	r0, [sp, #8]
   dab60:	f001 fcd9 	bl	dc516 <_Bfree>
   dab64:	2e06      	cmp	r6, #6
   dab66:	d822      	bhi.n	dabae <_strtod_r+0xf6>
   dab68:	e8df f006 	tbb	[pc, r6]
   dab6c:	18080d04 	.word	0x18080d04
   dab70:	0d1d      	.short	0x0d1d
   dab72:	04          	.byte	0x04
   dab73:	00          	.byte	0x00
   dab74:	f04f 0b00 	mov.w	fp, #0
   dab78:	46da      	mov	sl, fp
   dab7a:	e018      	b.n	dabae <_strtod_r+0xf6>
   dab7c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   dab80:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   dab84:	e013      	b.n	dabae <_strtod_r+0xf6>
   dab86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   dab88:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dab8a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   dab8e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   dab92:	f202 4233 	addw	r2, r2, #1075	; 0x433
   dab96:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   dab9a:	e008      	b.n	dabae <_strtod_r+0xf6>
   dab9c:	f8df b234 	ldr.w	fp, [pc, #564]	; dadd4 <_strtod_r+0x31c>
   daba0:	f04f 0a00 	mov.w	sl, #0
   daba4:	e003      	b.n	dabae <_strtod_r+0xf6>
   daba6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   dabaa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dabae:	0721      	lsls	r1, r4, #28
   dabb0:	f140 854d 	bpl.w	db64e <_strtod_r+0xb96>
   dabb4:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   dabb8:	f000 bd49 	b.w	db64e <_strtod_r+0xb96>
   dabbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dabbe:	1c5a      	adds	r2, r3, #1
   dabc0:	9217      	str	r2, [sp, #92]	; 0x5c
   dabc2:	785b      	ldrb	r3, [r3, #1]
   dabc4:	2b30      	cmp	r3, #48	; 0x30
   dabc6:	d0f9      	beq.n	dabbc <_strtod_r+0x104>
   dabc8:	2b00      	cmp	r3, #0
   dabca:	f000 8540 	beq.w	db64e <_strtod_r+0xb96>
   dabce:	2301      	movs	r3, #1
   dabd0:	e000      	b.n	dabd4 <_strtod_r+0x11c>
   dabd2:	2300      	movs	r3, #0
   dabd4:	f04f 0800 	mov.w	r8, #0
   dabd8:	9306      	str	r3, [sp, #24]
   dabda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dabdc:	9307      	str	r3, [sp, #28]
   dabde:	f8cd 8014 	str.w	r8, [sp, #20]
   dabe2:	f8cd 8010 	str.w	r8, [sp, #16]
   dabe6:	220a      	movs	r2, #10
   dabe8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   dabea:	782e      	ldrb	r6, [r5, #0]
   dabec:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   dabf0:	b2d9      	uxtb	r1, r3
   dabf2:	2909      	cmp	r1, #9
   dabf4:	d80e      	bhi.n	dac14 <_strtod_r+0x15c>
   dabf6:	9904      	ldr	r1, [sp, #16]
   dabf8:	2908      	cmp	r1, #8
   dabfa:	bfdd      	ittte	le
   dabfc:	9905      	ldrle	r1, [sp, #20]
   dabfe:	fb02 3301 	mlale	r3, r2, r1, r3
   dac02:	9305      	strle	r3, [sp, #20]
   dac04:	fb02 3808 	mlagt	r8, r2, r8, r3
   dac08:	9b04      	ldr	r3, [sp, #16]
   dac0a:	3501      	adds	r5, #1
   dac0c:	3301      	adds	r3, #1
   dac0e:	9304      	str	r3, [sp, #16]
   dac10:	9517      	str	r5, [sp, #92]	; 0x5c
   dac12:	e7e9      	b.n	dabe8 <_strtod_r+0x130>
   dac14:	9802      	ldr	r0, [sp, #8]
   dac16:	f7fe ff31 	bl	d9a7c <_localeconv_r>
   dac1a:	6807      	ldr	r7, [r0, #0]
   dac1c:	9802      	ldr	r0, [sp, #8]
   dac1e:	f7fe ff2d 	bl	d9a7c <_localeconv_r>
   dac22:	6800      	ldr	r0, [r0, #0]
   dac24:	f7ff fefa 	bl	daa1c <strlen>
   dac28:	4639      	mov	r1, r7
   dac2a:	4602      	mov	r2, r0
   dac2c:	4628      	mov	r0, r5
   dac2e:	f7ff fefd 	bl	daa2c <strncmp>
   dac32:	4607      	mov	r7, r0
   dac34:	b128      	cbz	r0, dac42 <_strtod_r+0x18a>
   dac36:	2000      	movs	r0, #0
   dac38:	4633      	mov	r3, r6
   dac3a:	9d04      	ldr	r5, [sp, #16]
   dac3c:	4602      	mov	r2, r0
   dac3e:	4601      	mov	r1, r0
   dac40:	e057      	b.n	dacf2 <_strtod_r+0x23a>
   dac42:	9802      	ldr	r0, [sp, #8]
   dac44:	f7fe ff1a 	bl	d9a7c <_localeconv_r>
   dac48:	6800      	ldr	r0, [r0, #0]
   dac4a:	f7ff fee7 	bl	daa1c <strlen>
   dac4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dac50:	181a      	adds	r2, r3, r0
   dac52:	9217      	str	r2, [sp, #92]	; 0x5c
   dac54:	9a04      	ldr	r2, [sp, #16]
   dac56:	5c1b      	ldrb	r3, [r3, r0]
   dac58:	2a00      	cmp	r2, #0
   dac5a:	d142      	bne.n	dace2 <_strtod_r+0x22a>
   dac5c:	4610      	mov	r0, r2
   dac5e:	2b30      	cmp	r3, #48	; 0x30
   dac60:	d105      	bne.n	dac6e <_strtod_r+0x1b6>
   dac62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dac64:	1c5a      	adds	r2, r3, #1
   dac66:	9217      	str	r2, [sp, #92]	; 0x5c
   dac68:	3001      	adds	r0, #1
   dac6a:	785b      	ldrb	r3, [r3, #1]
   dac6c:	e7f7      	b.n	dac5e <_strtod_r+0x1a6>
   dac6e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   dac72:	2a08      	cmp	r2, #8
   dac74:	d843      	bhi.n	dacfe <_strtod_r+0x246>
   dac76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   dac78:	9207      	str	r2, [sp, #28]
   dac7a:	4602      	mov	r2, r0
   dac7c:	2000      	movs	r0, #0
   dac7e:	4605      	mov	r5, r0
   dac80:	3b30      	subs	r3, #48	; 0x30
   dac82:	f100 0101 	add.w	r1, r0, #1
   dac86:	d026      	beq.n	dacd6 <_strtod_r+0x21e>
   dac88:	440a      	add	r2, r1
   dac8a:	eb05 0c00 	add.w	ip, r5, r0
   dac8e:	4629      	mov	r1, r5
   dac90:	260a      	movs	r6, #10
   dac92:	4561      	cmp	r1, ip
   dac94:	d00e      	beq.n	dacb4 <_strtod_r+0x1fc>
   dac96:	3101      	adds	r1, #1
   dac98:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   dac9c:	f1be 0f08 	cmp.w	lr, #8
   daca0:	dc03      	bgt.n	dacaa <_strtod_r+0x1f2>
   daca2:	9f05      	ldr	r7, [sp, #20]
   daca4:	4377      	muls	r7, r6
   daca6:	9705      	str	r7, [sp, #20]
   daca8:	e7f3      	b.n	dac92 <_strtod_r+0x1da>
   dacaa:	2910      	cmp	r1, #16
   dacac:	bfd8      	it	le
   dacae:	fb06 f808 	mulle.w	r8, r6, r8
   dacb2:	e7ee      	b.n	dac92 <_strtod_r+0x1da>
   dacb4:	4428      	add	r0, r5
   dacb6:	2808      	cmp	r0, #8
   dacb8:	f100 0501 	add.w	r5, r0, #1
   dacbc:	dc05      	bgt.n	dacca <_strtod_r+0x212>
   dacbe:	9805      	ldr	r0, [sp, #20]
   dacc0:	210a      	movs	r1, #10
   dacc2:	fb01 3300 	mla	r3, r1, r0, r3
   dacc6:	9305      	str	r3, [sp, #20]
   dacc8:	e004      	b.n	dacd4 <_strtod_r+0x21c>
   dacca:	2d10      	cmp	r5, #16
   daccc:	bfdc      	itt	le
   dacce:	210a      	movle	r1, #10
   dacd0:	fb01 3808 	mlale	r8, r1, r8, r3
   dacd4:	2100      	movs	r1, #0
   dacd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dacd8:	1c58      	adds	r0, r3, #1
   dacda:	9017      	str	r0, [sp, #92]	; 0x5c
   dacdc:	785b      	ldrb	r3, [r3, #1]
   dacde:	4608      	mov	r0, r1
   dace0:	e002      	b.n	dace8 <_strtod_r+0x230>
   dace2:	9d04      	ldr	r5, [sp, #16]
   dace4:	4638      	mov	r0, r7
   dace6:	463a      	mov	r2, r7
   dace8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   dacec:	2909      	cmp	r1, #9
   dacee:	d9c7      	bls.n	dac80 <_strtod_r+0x1c8>
   dacf0:	2101      	movs	r1, #1
   dacf2:	2b65      	cmp	r3, #101	; 0x65
   dacf4:	d001      	beq.n	dacfa <_strtod_r+0x242>
   dacf6:	2b45      	cmp	r3, #69	; 0x45
   dacf8:	d151      	bne.n	dad9e <_strtod_r+0x2e6>
   dacfa:	b96d      	cbnz	r5, dad18 <_strtod_r+0x260>
   dacfc:	e004      	b.n	dad08 <_strtod_r+0x250>
   dacfe:	2b65      	cmp	r3, #101	; 0x65
   dad00:	f040 84b3 	bne.w	db66a <_strtod_r+0xbb2>
   dad04:	2200      	movs	r2, #0
   dad06:	2101      	movs	r1, #1
   dad08:	b928      	cbnz	r0, dad16 <_strtod_r+0x25e>
   dad0a:	9b06      	ldr	r3, [sp, #24]
   dad0c:	2b00      	cmp	r3, #0
   dad0e:	f000 8095 	beq.w	dae3c <_strtod_r+0x384>
   dad12:	4605      	mov	r5, r0
   dad14:	e000      	b.n	dad18 <_strtod_r+0x260>
   dad16:	2500      	movs	r5, #0
   dad18:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   dad1a:	1c63      	adds	r3, r4, #1
   dad1c:	9317      	str	r3, [sp, #92]	; 0x5c
   dad1e:	7863      	ldrb	r3, [r4, #1]
   dad20:	2b2b      	cmp	r3, #43	; 0x2b
   dad22:	d006      	beq.n	dad32 <_strtod_r+0x27a>
   dad24:	2b2d      	cmp	r3, #45	; 0x2d
   dad26:	d002      	beq.n	dad2e <_strtod_r+0x276>
   dad28:	2600      	movs	r6, #0
   dad2a:	9603      	str	r6, [sp, #12]
   dad2c:	e006      	b.n	dad3c <_strtod_r+0x284>
   dad2e:	2301      	movs	r3, #1
   dad30:	e000      	b.n	dad34 <_strtod_r+0x27c>
   dad32:	2300      	movs	r3, #0
   dad34:	9303      	str	r3, [sp, #12]
   dad36:	1ca3      	adds	r3, r4, #2
   dad38:	9317      	str	r3, [sp, #92]	; 0x5c
   dad3a:	78a3      	ldrb	r3, [r4, #2]
   dad3c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   dad40:	2e09      	cmp	r6, #9
   dad42:	d82b      	bhi.n	dad9c <_strtod_r+0x2e4>
   dad44:	2b30      	cmp	r3, #48	; 0x30
   dad46:	d104      	bne.n	dad52 <_strtod_r+0x29a>
   dad48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dad4a:	1c5e      	adds	r6, r3, #1
   dad4c:	9617      	str	r6, [sp, #92]	; 0x5c
   dad4e:	785b      	ldrb	r3, [r3, #1]
   dad50:	e7f8      	b.n	dad44 <_strtod_r+0x28c>
   dad52:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   dad56:	2e08      	cmp	r6, #8
   dad58:	d821      	bhi.n	dad9e <_strtod_r+0x2e6>
   dad5a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   dad5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dad60:	f04f 0c0a 	mov.w	ip, #10
   dad64:	461f      	mov	r7, r3
   dad66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dad68:	1c5e      	adds	r6, r3, #1
   dad6a:	9617      	str	r6, [sp, #92]	; 0x5c
   dad6c:	785b      	ldrb	r3, [r3, #1]
   dad6e:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   dad72:	f1b9 0f09 	cmp.w	r9, #9
   dad76:	d804      	bhi.n	dad82 <_strtod_r+0x2ca>
   dad78:	fb0c 3e0e 	mla	lr, ip, lr, r3
   dad7c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   dad80:	e7f1      	b.n	dad66 <_strtod_r+0x2ae>
   dad82:	1bf6      	subs	r6, r6, r7
   dad84:	2e08      	cmp	r6, #8
   dad86:	f644 691f 	movw	r9, #19999	; 0x4e1f
   dad8a:	dc02      	bgt.n	dad92 <_strtod_r+0x2da>
   dad8c:	45f1      	cmp	r9, lr
   dad8e:	bfa8      	it	ge
   dad90:	46f1      	movge	r9, lr
   dad92:	9e03      	ldr	r6, [sp, #12]
   dad94:	b12e      	cbz	r6, dada2 <_strtod_r+0x2ea>
   dad96:	f1c9 0900 	rsb	r9, r9, #0
   dad9a:	e002      	b.n	dada2 <_strtod_r+0x2ea>
   dad9c:	9417      	str	r4, [sp, #92]	; 0x5c
   dad9e:	f04f 0900 	mov.w	r9, #0
   dada2:	2d00      	cmp	r5, #0
   dada4:	d153      	bne.n	dae4e <_strtod_r+0x396>
   dada6:	2800      	cmp	r0, #0
   dada8:	f040 8451 	bne.w	db64e <_strtod_r+0xb96>
   dadac:	9a06      	ldr	r2, [sp, #24]
   dadae:	2a00      	cmp	r2, #0
   dadb0:	f040 844d 	bne.w	db64e <_strtod_r+0xb96>
   dadb4:	2900      	cmp	r1, #0
   dadb6:	d141      	bne.n	dae3c <_strtod_r+0x384>
   dadb8:	2b4e      	cmp	r3, #78	; 0x4e
   dadba:	d020      	beq.n	dadfe <_strtod_r+0x346>
   dadbc:	dc02      	bgt.n	dadc4 <_strtod_r+0x30c>
   dadbe:	2b49      	cmp	r3, #73	; 0x49
   dadc0:	d00a      	beq.n	dadd8 <_strtod_r+0x320>
   dadc2:	e03b      	b.n	dae3c <_strtod_r+0x384>
   dadc4:	2b69      	cmp	r3, #105	; 0x69
   dadc6:	d007      	beq.n	dadd8 <_strtod_r+0x320>
   dadc8:	2b6e      	cmp	r3, #110	; 0x6e
   dadca:	d018      	beq.n	dadfe <_strtod_r+0x346>
   dadcc:	e036      	b.n	dae3c <_strtod_r+0x384>
   dadce:	bf00      	nop
   dadd0:	000dd8a8 	.word	0x000dd8a8
   dadd4:	7ff00000 	.word	0x7ff00000
   dadd8:	49a8      	ldr	r1, [pc, #672]	; (db07c <_strtod_r+0x5c4>)
   dadda:	a817      	add	r0, sp, #92	; 0x5c
   daddc:	f001 fa78 	bl	dc2d0 <__match>
   dade0:	b360      	cbz	r0, dae3c <_strtod_r+0x384>
   dade2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dade4:	49a6      	ldr	r1, [pc, #664]	; (db080 <_strtod_r+0x5c8>)
   dade6:	3b01      	subs	r3, #1
   dade8:	a817      	add	r0, sp, #92	; 0x5c
   dadea:	9317      	str	r3, [sp, #92]	; 0x5c
   dadec:	f001 fa70 	bl	dc2d0 <__match>
   dadf0:	b910      	cbnz	r0, dadf8 <_strtod_r+0x340>
   dadf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dadf4:	3301      	adds	r3, #1
   dadf6:	9317      	str	r3, [sp, #92]	; 0x5c
   dadf8:	f8df b2a0 	ldr.w	fp, [pc, #672]	; db09c <_strtod_r+0x5e4>
   dadfc:	e01a      	b.n	dae34 <_strtod_r+0x37c>
   dadfe:	49a1      	ldr	r1, [pc, #644]	; (db084 <_strtod_r+0x5cc>)
   dae00:	a817      	add	r0, sp, #92	; 0x5c
   dae02:	f001 fa65 	bl	dc2d0 <__match>
   dae06:	b1c8      	cbz	r0, dae3c <_strtod_r+0x384>
   dae08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dae0a:	781b      	ldrb	r3, [r3, #0]
   dae0c:	2b28      	cmp	r3, #40	; 0x28
   dae0e:	d10f      	bne.n	dae30 <_strtod_r+0x378>
   dae10:	aa1a      	add	r2, sp, #104	; 0x68
   dae12:	499d      	ldr	r1, [pc, #628]	; (db088 <_strtod_r+0x5d0>)
   dae14:	a817      	add	r0, sp, #92	; 0x5c
   dae16:	f001 fa6e 	bl	dc2f6 <__hexnan>
   dae1a:	2805      	cmp	r0, #5
   dae1c:	d108      	bne.n	dae30 <_strtod_r+0x378>
   dae1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   dae20:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   dae24:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   dae28:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   dae2c:	f000 bc0f 	b.w	db64e <_strtod_r+0xb96>
   dae30:	f8df b26c 	ldr.w	fp, [pc, #620]	; db0a0 <_strtod_r+0x5e8>
   dae34:	f04f 0a00 	mov.w	sl, #0
   dae38:	f000 bc09 	b.w	db64e <_strtod_r+0xb96>
   dae3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   dae3e:	9417      	str	r4, [sp, #92]	; 0x5c
   dae40:	2b00      	cmp	r3, #0
   dae42:	f000 840f 	beq.w	db664 <_strtod_r+0xbac>
   dae46:	2300      	movs	r3, #0
   dae48:	930c      	str	r3, [sp, #48]	; 0x30
   dae4a:	f000 bc02 	b.w	db652 <_strtod_r+0xb9a>
   dae4e:	9b04      	ldr	r3, [sp, #16]
   dae50:	9805      	ldr	r0, [sp, #20]
   dae52:	2b00      	cmp	r3, #0
   dae54:	bf08      	it	eq
   dae56:	462b      	moveq	r3, r5
   dae58:	2d10      	cmp	r5, #16
   dae5a:	462c      	mov	r4, r5
   dae5c:	ebc2 0909 	rsb	r9, r2, r9
   dae60:	bfa8      	it	ge
   dae62:	2410      	movge	r4, #16
   dae64:	9304      	str	r3, [sp, #16]
   dae66:	f7fe f85b 	bl	d8f20 <__aeabi_ui2d>
   dae6a:	2c09      	cmp	r4, #9
   dae6c:	4682      	mov	sl, r0
   dae6e:	468b      	mov	fp, r1
   dae70:	dd13      	ble.n	dae9a <_strtod_r+0x3e2>
   dae72:	4b86      	ldr	r3, [pc, #536]	; (db08c <_strtod_r+0x5d4>)
   dae74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   dae78:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   dae7c:	f7fe f8c6 	bl	d900c <__aeabi_dmul>
   dae80:	4606      	mov	r6, r0
   dae82:	4640      	mov	r0, r8
   dae84:	460f      	mov	r7, r1
   dae86:	f7fe f84b 	bl	d8f20 <__aeabi_ui2d>
   dae8a:	4602      	mov	r2, r0
   dae8c:	460b      	mov	r3, r1
   dae8e:	4630      	mov	r0, r6
   dae90:	4639      	mov	r1, r7
   dae92:	f7fd ff09 	bl	d8ca8 <__adddf3>
   dae96:	4682      	mov	sl, r0
   dae98:	468b      	mov	fp, r1
   dae9a:	2d0f      	cmp	r5, #15
   dae9c:	dc36      	bgt.n	daf0c <_strtod_r+0x454>
   dae9e:	f1b9 0f00 	cmp.w	r9, #0
   daea2:	f000 83d4 	beq.w	db64e <_strtod_r+0xb96>
   daea6:	dd24      	ble.n	daef2 <_strtod_r+0x43a>
   daea8:	f1b9 0f16 	cmp.w	r9, #22
   daeac:	dc07      	bgt.n	daebe <_strtod_r+0x406>
   daeae:	4d77      	ldr	r5, [pc, #476]	; (db08c <_strtod_r+0x5d4>)
   daeb0:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   daeb4:	4652      	mov	r2, sl
   daeb6:	465b      	mov	r3, fp
   daeb8:	e9d9 0100 	ldrd	r0, r1, [r9]
   daebc:	e014      	b.n	daee8 <_strtod_r+0x430>
   daebe:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   daec2:	4599      	cmp	r9, r3
   daec4:	dc22      	bgt.n	daf0c <_strtod_r+0x454>
   daec6:	4c71      	ldr	r4, [pc, #452]	; (db08c <_strtod_r+0x5d4>)
   daec8:	f1c5 050f 	rsb	r5, r5, #15
   daecc:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   daed0:	ebc5 0509 	rsb	r5, r5, r9
   daed4:	4652      	mov	r2, sl
   daed6:	465b      	mov	r3, fp
   daed8:	e9d1 0100 	ldrd	r0, r1, [r1]
   daedc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   daee0:	f7fe f894 	bl	d900c <__aeabi_dmul>
   daee4:	e9d4 2300 	ldrd	r2, r3, [r4]
   daee8:	f7fe f890 	bl	d900c <__aeabi_dmul>
   daeec:	4682      	mov	sl, r0
   daeee:	468b      	mov	fp, r1
   daef0:	e3ad      	b.n	db64e <_strtod_r+0xb96>
   daef2:	f119 0f16 	cmn.w	r9, #22
   daef6:	db09      	blt.n	daf0c <_strtod_r+0x454>
   daef8:	4d64      	ldr	r5, [pc, #400]	; (db08c <_strtod_r+0x5d4>)
   daefa:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   daefe:	e9d9 2300 	ldrd	r2, r3, [r9]
   daf02:	4650      	mov	r0, sl
   daf04:	4659      	mov	r1, fp
   daf06:	f7fe f9ab 	bl	d9260 <__aeabi_ddiv>
   daf0a:	e7ef      	b.n	daeec <_strtod_r+0x434>
   daf0c:	1b2c      	subs	r4, r5, r4
   daf0e:	444c      	add	r4, r9
   daf10:	2c00      	cmp	r4, #0
   daf12:	dd57      	ble.n	dafc4 <_strtod_r+0x50c>
   daf14:	f014 010f 	ands.w	r1, r4, #15
   daf18:	d00a      	beq.n	daf30 <_strtod_r+0x478>
   daf1a:	4b5c      	ldr	r3, [pc, #368]	; (db08c <_strtod_r+0x5d4>)
   daf1c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   daf20:	4652      	mov	r2, sl
   daf22:	465b      	mov	r3, fp
   daf24:	e9d1 0100 	ldrd	r0, r1, [r1]
   daf28:	f7fe f870 	bl	d900c <__aeabi_dmul>
   daf2c:	4682      	mov	sl, r0
   daf2e:	468b      	mov	fp, r1
   daf30:	f034 040f 	bics.w	r4, r4, #15
   daf34:	f000 80b8 	beq.w	db0a8 <_strtod_r+0x5f0>
   daf38:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   daf3c:	dd0b      	ble.n	daf56 <_strtod_r+0x49e>
   daf3e:	2400      	movs	r4, #0
   daf40:	4625      	mov	r5, r4
   daf42:	9405      	str	r4, [sp, #20]
   daf44:	9404      	str	r4, [sp, #16]
   daf46:	9a02      	ldr	r2, [sp, #8]
   daf48:	f8df b150 	ldr.w	fp, [pc, #336]	; db09c <_strtod_r+0x5e4>
   daf4c:	2322      	movs	r3, #34	; 0x22
   daf4e:	6013      	str	r3, [r2, #0]
   daf50:	f04f 0a00 	mov.w	sl, #0
   daf54:	e187      	b.n	db266 <_strtod_r+0x7ae>
   daf56:	4e4e      	ldr	r6, [pc, #312]	; (db090 <_strtod_r+0x5d8>)
   daf58:	2300      	movs	r3, #0
   daf5a:	1124      	asrs	r4, r4, #4
   daf5c:	4650      	mov	r0, sl
   daf5e:	4659      	mov	r1, fp
   daf60:	4698      	mov	r8, r3
   daf62:	4637      	mov	r7, r6
   daf64:	2c01      	cmp	r4, #1
   daf66:	dd0b      	ble.n	daf80 <_strtod_r+0x4c8>
   daf68:	07e2      	lsls	r2, r4, #31
   daf6a:	d504      	bpl.n	daf76 <_strtod_r+0x4be>
   daf6c:	e9d6 2300 	ldrd	r2, r3, [r6]
   daf70:	f7fe f84c 	bl	d900c <__aeabi_dmul>
   daf74:	2301      	movs	r3, #1
   daf76:	f108 0801 	add.w	r8, r8, #1
   daf7a:	1064      	asrs	r4, r4, #1
   daf7c:	3608      	adds	r6, #8
   daf7e:	e7f1      	b.n	daf64 <_strtod_r+0x4ac>
   daf80:	b10b      	cbz	r3, daf86 <_strtod_r+0x4ce>
   daf82:	4682      	mov	sl, r0
   daf84:	468b      	mov	fp, r1
   daf86:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   daf8a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   daf8e:	4652      	mov	r2, sl
   daf90:	465b      	mov	r3, fp
   daf92:	e9d7 0100 	ldrd	r0, r1, [r7]
   daf96:	f7fe f839 	bl	d900c <__aeabi_dmul>
   daf9a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   daf9e:	468b      	mov	fp, r1
   dafa0:	460a      	mov	r2, r1
   dafa2:	0d1b      	lsrs	r3, r3, #20
   dafa4:	493b      	ldr	r1, [pc, #236]	; (db094 <_strtod_r+0x5dc>)
   dafa6:	051b      	lsls	r3, r3, #20
   dafa8:	428b      	cmp	r3, r1
   dafaa:	4682      	mov	sl, r0
   dafac:	d8c7      	bhi.n	daf3e <_strtod_r+0x486>
   dafae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   dafb2:	428b      	cmp	r3, r1
   dafb4:	bf86      	itte	hi
   dafb6:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; db0a4 <_strtod_r+0x5ec>
   dafba:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   dafbe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   dafc2:	e071      	b.n	db0a8 <_strtod_r+0x5f0>
   dafc4:	d070      	beq.n	db0a8 <_strtod_r+0x5f0>
   dafc6:	4264      	negs	r4, r4
   dafc8:	f014 020f 	ands.w	r2, r4, #15
   dafcc:	d00a      	beq.n	dafe4 <_strtod_r+0x52c>
   dafce:	4b2f      	ldr	r3, [pc, #188]	; (db08c <_strtod_r+0x5d4>)
   dafd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   dafd4:	4650      	mov	r0, sl
   dafd6:	4659      	mov	r1, fp
   dafd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dafdc:	f7fe f940 	bl	d9260 <__aeabi_ddiv>
   dafe0:	4682      	mov	sl, r0
   dafe2:	468b      	mov	fp, r1
   dafe4:	1124      	asrs	r4, r4, #4
   dafe6:	d05f      	beq.n	db0a8 <_strtod_r+0x5f0>
   dafe8:	2c1f      	cmp	r4, #31
   dafea:	dd04      	ble.n	daff6 <_strtod_r+0x53e>
   dafec:	2400      	movs	r4, #0
   dafee:	4625      	mov	r5, r4
   daff0:	9405      	str	r4, [sp, #20]
   daff2:	9404      	str	r4, [sp, #16]
   daff4:	e130      	b.n	db258 <_strtod_r+0x7a0>
   daff6:	f014 0f10 	tst.w	r4, #16
   daffa:	bf0c      	ite	eq
   daffc:	2300      	moveq	r3, #0
   daffe:	236a      	movne	r3, #106	; 0x6a
   db000:	4e25      	ldr	r6, [pc, #148]	; (db098 <_strtod_r+0x5e0>)
   db002:	9303      	str	r3, [sp, #12]
   db004:	4650      	mov	r0, sl
   db006:	4659      	mov	r1, fp
   db008:	2300      	movs	r3, #0
   db00a:	2c00      	cmp	r4, #0
   db00c:	dd09      	ble.n	db022 <_strtod_r+0x56a>
   db00e:	07e2      	lsls	r2, r4, #31
   db010:	d504      	bpl.n	db01c <_strtod_r+0x564>
   db012:	e9d6 2300 	ldrd	r2, r3, [r6]
   db016:	f7fd fff9 	bl	d900c <__aeabi_dmul>
   db01a:	2301      	movs	r3, #1
   db01c:	1064      	asrs	r4, r4, #1
   db01e:	3608      	adds	r6, #8
   db020:	e7f3      	b.n	db00a <_strtod_r+0x552>
   db022:	b10b      	cbz	r3, db028 <_strtod_r+0x570>
   db024:	4682      	mov	sl, r0
   db026:	468b      	mov	fp, r1
   db028:	9b03      	ldr	r3, [sp, #12]
   db02a:	b1eb      	cbz	r3, db068 <_strtod_r+0x5b0>
   db02c:	f3cb 530a 	ubfx	r3, fp, #20, #11
   db030:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db034:	2b00      	cmp	r3, #0
   db036:	4659      	mov	r1, fp
   db038:	dd16      	ble.n	db068 <_strtod_r+0x5b0>
   db03a:	2b1f      	cmp	r3, #31
   db03c:	dd0e      	ble.n	db05c <_strtod_r+0x5a4>
   db03e:	2b34      	cmp	r3, #52	; 0x34
   db040:	bfde      	ittt	le
   db042:	3b20      	suble	r3, #32
   db044:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   db048:	fa02 f303 	lslle.w	r3, r2, r3
   db04c:	f04f 0a00 	mov.w	sl, #0
   db050:	bfcc      	ite	gt
   db052:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   db056:	ea03 0b01 	andle.w	fp, r3, r1
   db05a:	e005      	b.n	db068 <_strtod_r+0x5b0>
   db05c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db060:	fa02 f303 	lsl.w	r3, r2, r3
   db064:	ea03 0a0a 	and.w	sl, r3, sl
   db068:	2200      	movs	r2, #0
   db06a:	2300      	movs	r3, #0
   db06c:	4650      	mov	r0, sl
   db06e:	4659      	mov	r1, fp
   db070:	f7fe fa34 	bl	d94dc <__aeabi_dcmpeq>
   db074:	2800      	cmp	r0, #0
   db076:	d1b9      	bne.n	dafec <_strtod_r+0x534>
   db078:	e018      	b.n	db0ac <_strtod_r+0x5f4>
   db07a:	bf00      	nop
   db07c:	000dd8d0 	.word	0x000dd8d0
   db080:	000dd8d3 	.word	0x000dd8d3
   db084:	000dd911 	.word	0x000dd911
   db088:	000dd8bc 	.word	0x000dd8bc
   db08c:	000ddb70 	.word	0x000ddb70
   db090:	000ddc38 	.word	0x000ddc38
   db094:	7ca00000 	.word	0x7ca00000
   db098:	000dd8e0 	.word	0x000dd8e0
   db09c:	7ff00000 	.word	0x7ff00000
   db0a0:	fff80000 	.word	0xfff80000
   db0a4:	7fefffff 	.word	0x7fefffff
   db0a8:	2300      	movs	r3, #0
   db0aa:	9303      	str	r3, [sp, #12]
   db0ac:	9b05      	ldr	r3, [sp, #20]
   db0ae:	9300      	str	r3, [sp, #0]
   db0b0:	9a04      	ldr	r2, [sp, #16]
   db0b2:	9907      	ldr	r1, [sp, #28]
   db0b4:	9802      	ldr	r0, [sp, #8]
   db0b6:	462b      	mov	r3, r5
   db0b8:	f001 fa7f 	bl	dc5ba <__s2b>
   db0bc:	9005      	str	r0, [sp, #20]
   db0be:	2800      	cmp	r0, #0
   db0c0:	f43f af3d 	beq.w	daf3e <_strtod_r+0x486>
   db0c4:	f1b9 0f00 	cmp.w	r9, #0
   db0c8:	f1c9 0300 	rsb	r3, r9, #0
   db0cc:	bfa8      	it	ge
   db0ce:	2300      	movge	r3, #0
   db0d0:	930d      	str	r3, [sp, #52]	; 0x34
   db0d2:	2400      	movs	r4, #0
   db0d4:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   db0d8:	9312      	str	r3, [sp, #72]	; 0x48
   db0da:	4625      	mov	r5, r4
   db0dc:	9b05      	ldr	r3, [sp, #20]
   db0de:	9802      	ldr	r0, [sp, #8]
   db0e0:	6859      	ldr	r1, [r3, #4]
   db0e2:	f001 f9e3 	bl	dc4ac <_Balloc>
   db0e6:	9004      	str	r0, [sp, #16]
   db0e8:	2800      	cmp	r0, #0
   db0ea:	f43f af2c 	beq.w	daf46 <_strtod_r+0x48e>
   db0ee:	9b05      	ldr	r3, [sp, #20]
   db0f0:	691a      	ldr	r2, [r3, #16]
   db0f2:	3202      	adds	r2, #2
   db0f4:	f103 010c 	add.w	r1, r3, #12
   db0f8:	0092      	lsls	r2, r2, #2
   db0fa:	300c      	adds	r0, #12
   db0fc:	f7fe fcc2 	bl	d9a84 <memcpy>
   db100:	aa1a      	add	r2, sp, #104	; 0x68
   db102:	a919      	add	r1, sp, #100	; 0x64
   db104:	ec4b ab10 	vmov	d0, sl, fp
   db108:	9802      	ldr	r0, [sp, #8]
   db10a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   db10e:	f001 fd08 	bl	dcb22 <__d2b>
   db112:	9018      	str	r0, [sp, #96]	; 0x60
   db114:	2800      	cmp	r0, #0
   db116:	f43f af16 	beq.w	daf46 <_strtod_r+0x48e>
   db11a:	2101      	movs	r1, #1
   db11c:	9802      	ldr	r0, [sp, #8]
   db11e:	f001 fad7 	bl	dc6d0 <__i2b>
   db122:	4605      	mov	r5, r0
   db124:	2800      	cmp	r0, #0
   db126:	f43f af0e 	beq.w	daf46 <_strtod_r+0x48e>
   db12a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   db12c:	9903      	ldr	r1, [sp, #12]
   db12e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   db130:	2b00      	cmp	r3, #0
   db132:	bfad      	iteet	ge
   db134:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   db136:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   db138:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   db13c:	eb02 0803 	addge.w	r8, r2, r3
   db140:	bfb8      	it	lt
   db142:	1ad2      	sublt	r2, r2, r3
   db144:	eba3 0301 	sub.w	r3, r3, r1
   db148:	4433      	add	r3, r6
   db14a:	49b5      	ldr	r1, [pc, #724]	; (db420 <_strtod_r+0x968>)
   db14c:	bfa8      	it	ge
   db14e:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   db150:	3b01      	subs	r3, #1
   db152:	428b      	cmp	r3, r1
   db154:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   db158:	f280 808a 	bge.w	db270 <_strtod_r+0x7b8>
   db15c:	1ac9      	subs	r1, r1, r3
   db15e:	291f      	cmp	r1, #31
   db160:	bfc8      	it	gt
   db162:	4fb0      	ldrgt	r7, [pc, #704]	; (db424 <_strtod_r+0x96c>)
   db164:	f04f 0901 	mov.w	r9, #1
   db168:	bfd4      	ite	le
   db16a:	fa09 f301 	lslle.w	r3, r9, r1
   db16e:	1aff      	subgt	r7, r7, r3
   db170:	eba6 0601 	sub.w	r6, r6, r1
   db174:	bfd9      	ittee	le
   db176:	9306      	strle	r3, [sp, #24]
   db178:	2700      	movle	r7, #0
   db17a:	fa09 f707 	lslgt.w	r7, r9, r7
   db17e:	f8cd 9018 	strgt.w	r9, [sp, #24]
   db182:	eb08 0906 	add.w	r9, r8, r6
   db186:	9b03      	ldr	r3, [sp, #12]
   db188:	45c8      	cmp	r8, r9
   db18a:	4416      	add	r6, r2
   db18c:	441e      	add	r6, r3
   db18e:	4643      	mov	r3, r8
   db190:	bfa8      	it	ge
   db192:	464b      	movge	r3, r9
   db194:	42b3      	cmp	r3, r6
   db196:	bfa8      	it	ge
   db198:	4633      	movge	r3, r6
   db19a:	2b00      	cmp	r3, #0
   db19c:	bfc2      	ittt	gt
   db19e:	ebc3 0909 	rsbgt	r9, r3, r9
   db1a2:	1af6      	subgt	r6, r6, r3
   db1a4:	ebc3 0808 	rsbgt	r8, r3, r8
   db1a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   db1aa:	2b00      	cmp	r3, #0
   db1ac:	d164      	bne.n	db278 <_strtod_r+0x7c0>
   db1ae:	f1b9 0f00 	cmp.w	r9, #0
   db1b2:	dc7a      	bgt.n	db2aa <_strtod_r+0x7f2>
   db1b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   db1b6:	2b00      	cmp	r3, #0
   db1b8:	f040 8081 	bne.w	db2be <_strtod_r+0x806>
   db1bc:	2e00      	cmp	r6, #0
   db1be:	f300 8088 	bgt.w	db2d2 <_strtod_r+0x81a>
   db1c2:	f1b8 0f00 	cmp.w	r8, #0
   db1c6:	f300 808e 	bgt.w	db2e6 <_strtod_r+0x82e>
   db1ca:	9a04      	ldr	r2, [sp, #16]
   db1cc:	9918      	ldr	r1, [sp, #96]	; 0x60
   db1ce:	9802      	ldr	r0, [sp, #8]
   db1d0:	f001 fbd3 	bl	dc97a <__mdiff>
   db1d4:	4604      	mov	r4, r0
   db1d6:	2800      	cmp	r0, #0
   db1d8:	f43f aeb5 	beq.w	daf46 <_strtod_r+0x48e>
   db1dc:	68c3      	ldr	r3, [r0, #12]
   db1de:	9307      	str	r3, [sp, #28]
   db1e0:	2300      	movs	r3, #0
   db1e2:	60c3      	str	r3, [r0, #12]
   db1e4:	4629      	mov	r1, r5
   db1e6:	f001 fbac 	bl	dc942 <__mcmp>
   db1ea:	2800      	cmp	r0, #0
   db1ec:	f280 8089 	bge.w	db302 <_strtod_r+0x84a>
   db1f0:	9b07      	ldr	r3, [sp, #28]
   db1f2:	2b00      	cmp	r3, #0
   db1f4:	f040 8204 	bne.w	db600 <_strtod_r+0xb48>
   db1f8:	f1ba 0f00 	cmp.w	sl, #0
   db1fc:	f040 8200 	bne.w	db600 <_strtod_r+0xb48>
   db200:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db204:	2b00      	cmp	r3, #0
   db206:	f040 81fb 	bne.w	db600 <_strtod_r+0xb48>
   db20a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db20e:	0d1b      	lsrs	r3, r3, #20
   db210:	051b      	lsls	r3, r3, #20
   db212:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db216:	f240 81f3 	bls.w	db600 <_strtod_r+0xb48>
   db21a:	6963      	ldr	r3, [r4, #20]
   db21c:	2b00      	cmp	r3, #0
   db21e:	d06c      	beq.n	db2fa <_strtod_r+0x842>
   db220:	4621      	mov	r1, r4
   db222:	2201      	movs	r2, #1
   db224:	9802      	ldr	r0, [sp, #8]
   db226:	f001 fb3b 	bl	dc8a0 <__lshift>
   db22a:	4629      	mov	r1, r5
   db22c:	4604      	mov	r4, r0
   db22e:	f001 fb88 	bl	dc942 <__mcmp>
   db232:	2800      	cmp	r0, #0
   db234:	f340 81e4 	ble.w	db600 <_strtod_r+0xb48>
   db238:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db23c:	9a03      	ldr	r2, [sp, #12]
   db23e:	0d1b      	lsrs	r3, r3, #20
   db240:	051b      	lsls	r3, r3, #20
   db242:	2a00      	cmp	r2, #0
   db244:	f000 808c 	beq.w	db360 <_strtod_r+0x8a8>
   db248:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db24c:	f300 8088 	bgt.w	db360 <_strtod_r+0x8a8>
   db250:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   db254:	f300 81d6 	bgt.w	db604 <_strtod_r+0xb4c>
   db258:	9a02      	ldr	r2, [sp, #8]
   db25a:	2322      	movs	r3, #34	; 0x22
   db25c:	f04f 0a00 	mov.w	sl, #0
   db260:	f04f 0b00 	mov.w	fp, #0
   db264:	6013      	str	r3, [r2, #0]
   db266:	9b05      	ldr	r3, [sp, #20]
   db268:	2b00      	cmp	r3, #0
   db26a:	f040 81dc 	bne.w	db626 <_strtod_r+0xb6e>
   db26e:	e1ee      	b.n	db64e <_strtod_r+0xb96>
   db270:	2301      	movs	r3, #1
   db272:	2700      	movs	r7, #0
   db274:	9306      	str	r3, [sp, #24]
   db276:	e784      	b.n	db182 <_strtod_r+0x6ca>
   db278:	4629      	mov	r1, r5
   db27a:	461a      	mov	r2, r3
   db27c:	9802      	ldr	r0, [sp, #8]
   db27e:	f001 fac1 	bl	dc804 <__pow5mult>
   db282:	4605      	mov	r5, r0
   db284:	2800      	cmp	r0, #0
   db286:	f43f ae5e 	beq.w	daf46 <_strtod_r+0x48e>
   db28a:	4601      	mov	r1, r0
   db28c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   db28e:	9802      	ldr	r0, [sp, #8]
   db290:	f001 fa27 	bl	dc6e2 <__multiply>
   db294:	9007      	str	r0, [sp, #28]
   db296:	2800      	cmp	r0, #0
   db298:	f43f ae55 	beq.w	daf46 <_strtod_r+0x48e>
   db29c:	9918      	ldr	r1, [sp, #96]	; 0x60
   db29e:	9802      	ldr	r0, [sp, #8]
   db2a0:	f001 f939 	bl	dc516 <_Bfree>
   db2a4:	9b07      	ldr	r3, [sp, #28]
   db2a6:	9318      	str	r3, [sp, #96]	; 0x60
   db2a8:	e781      	b.n	db1ae <_strtod_r+0x6f6>
   db2aa:	464a      	mov	r2, r9
   db2ac:	9918      	ldr	r1, [sp, #96]	; 0x60
   db2ae:	9802      	ldr	r0, [sp, #8]
   db2b0:	f001 faf6 	bl	dc8a0 <__lshift>
   db2b4:	9018      	str	r0, [sp, #96]	; 0x60
   db2b6:	2800      	cmp	r0, #0
   db2b8:	f47f af7c 	bne.w	db1b4 <_strtod_r+0x6fc>
   db2bc:	e643      	b.n	daf46 <_strtod_r+0x48e>
   db2be:	9a12      	ldr	r2, [sp, #72]	; 0x48
   db2c0:	9904      	ldr	r1, [sp, #16]
   db2c2:	9802      	ldr	r0, [sp, #8]
   db2c4:	f001 fa9e 	bl	dc804 <__pow5mult>
   db2c8:	9004      	str	r0, [sp, #16]
   db2ca:	2800      	cmp	r0, #0
   db2cc:	f47f af76 	bne.w	db1bc <_strtod_r+0x704>
   db2d0:	e639      	b.n	daf46 <_strtod_r+0x48e>
   db2d2:	4632      	mov	r2, r6
   db2d4:	9904      	ldr	r1, [sp, #16]
   db2d6:	9802      	ldr	r0, [sp, #8]
   db2d8:	f001 fae2 	bl	dc8a0 <__lshift>
   db2dc:	9004      	str	r0, [sp, #16]
   db2de:	2800      	cmp	r0, #0
   db2e0:	f47f af6f 	bne.w	db1c2 <_strtod_r+0x70a>
   db2e4:	e62f      	b.n	daf46 <_strtod_r+0x48e>
   db2e6:	4629      	mov	r1, r5
   db2e8:	4642      	mov	r2, r8
   db2ea:	9802      	ldr	r0, [sp, #8]
   db2ec:	f001 fad8 	bl	dc8a0 <__lshift>
   db2f0:	4605      	mov	r5, r0
   db2f2:	2800      	cmp	r0, #0
   db2f4:	f47f af69 	bne.w	db1ca <_strtod_r+0x712>
   db2f8:	e625      	b.n	daf46 <_strtod_r+0x48e>
   db2fa:	6923      	ldr	r3, [r4, #16]
   db2fc:	2b01      	cmp	r3, #1
   db2fe:	dc8f      	bgt.n	db220 <_strtod_r+0x768>
   db300:	e17e      	b.n	db600 <_strtod_r+0xb48>
   db302:	d161      	bne.n	db3c8 <_strtod_r+0x910>
   db304:	9a07      	ldr	r2, [sp, #28]
   db306:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db30a:	b322      	cbz	r2, db356 <_strtod_r+0x89e>
   db30c:	4946      	ldr	r1, [pc, #280]	; (db428 <_strtod_r+0x970>)
   db30e:	428b      	cmp	r3, r1
   db310:	465a      	mov	r2, fp
   db312:	d12e      	bne.n	db372 <_strtod_r+0x8ba>
   db314:	9b03      	ldr	r3, [sp, #12]
   db316:	4651      	mov	r1, sl
   db318:	b163      	cbz	r3, db334 <_strtod_r+0x87c>
   db31a:	4b44      	ldr	r3, [pc, #272]	; (db42c <_strtod_r+0x974>)
   db31c:	4013      	ands	r3, r2
   db31e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   db322:	d807      	bhi.n	db334 <_strtod_r+0x87c>
   db324:	0d1b      	lsrs	r3, r3, #20
   db326:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db32a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db32e:	fa00 f303 	lsl.w	r3, r0, r3
   db332:	e001      	b.n	db338 <_strtod_r+0x880>
   db334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db338:	428b      	cmp	r3, r1
   db33a:	d11a      	bne.n	db372 <_strtod_r+0x8ba>
   db33c:	493c      	ldr	r1, [pc, #240]	; (db430 <_strtod_r+0x978>)
   db33e:	428a      	cmp	r2, r1
   db340:	d102      	bne.n	db348 <_strtod_r+0x890>
   db342:	3301      	adds	r3, #1
   db344:	f43f adff 	beq.w	daf46 <_strtod_r+0x48e>
   db348:	4b38      	ldr	r3, [pc, #224]	; (db42c <_strtod_r+0x974>)
   db34a:	4013      	ands	r3, r2
   db34c:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   db350:	f04f 0a00 	mov.w	sl, #0
   db354:	e154      	b.n	db600 <_strtod_r+0xb48>
   db356:	b963      	cbnz	r3, db372 <_strtod_r+0x8ba>
   db358:	f1ba 0f00 	cmp.w	sl, #0
   db35c:	d109      	bne.n	db372 <_strtod_r+0x8ba>
   db35e:	e76b      	b.n	db238 <_strtod_r+0x780>
   db360:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   db364:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   db368:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   db36c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db370:	e146      	b.n	db600 <_strtod_r+0xb48>
   db372:	b117      	cbz	r7, db37a <_strtod_r+0x8c2>
   db374:	ea17 0f0b 	tst.w	r7, fp
   db378:	e002      	b.n	db380 <_strtod_r+0x8c8>
   db37a:	9b06      	ldr	r3, [sp, #24]
   db37c:	ea13 0f0a 	tst.w	r3, sl
   db380:	f000 813e 	beq.w	db600 <_strtod_r+0xb48>
   db384:	9b07      	ldr	r3, [sp, #28]
   db386:	9a03      	ldr	r2, [sp, #12]
   db388:	4650      	mov	r0, sl
   db38a:	4659      	mov	r1, fp
   db38c:	b153      	cbz	r3, db3a4 <_strtod_r+0x8ec>
   db38e:	f7ff fb75 	bl	daa7c <sulp>
   db392:	4602      	mov	r2, r0
   db394:	460b      	mov	r3, r1
   db396:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   db39a:	f7fd fc85 	bl	d8ca8 <__adddf3>
   db39e:	4682      	mov	sl, r0
   db3a0:	468b      	mov	fp, r1
   db3a2:	e12d      	b.n	db600 <_strtod_r+0xb48>
   db3a4:	f7ff fb6a 	bl	daa7c <sulp>
   db3a8:	4602      	mov	r2, r0
   db3aa:	460b      	mov	r3, r1
   db3ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   db3b0:	f7fd fc78 	bl	d8ca4 <__aeabi_dsub>
   db3b4:	2200      	movs	r2, #0
   db3b6:	2300      	movs	r3, #0
   db3b8:	4682      	mov	sl, r0
   db3ba:	468b      	mov	fp, r1
   db3bc:	f7fe f88e 	bl	d94dc <__aeabi_dcmpeq>
   db3c0:	2800      	cmp	r0, #0
   db3c2:	f47f af49 	bne.w	db258 <_strtod_r+0x7a0>
   db3c6:	e11b      	b.n	db600 <_strtod_r+0xb48>
   db3c8:	4629      	mov	r1, r5
   db3ca:	4620      	mov	r0, r4
   db3cc:	f001 fbf7 	bl	dcbbe <__ratio>
   db3d0:	ec57 6b10 	vmov	r6, r7, d0
   db3d4:	2200      	movs	r2, #0
   db3d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   db3da:	ee10 0a10 	vmov	r0, s0
   db3de:	4639      	mov	r1, r7
   db3e0:	f7fe f890 	bl	d9504 <__aeabi_dcmple>
   db3e4:	2800      	cmp	r0, #0
   db3e6:	d042      	beq.n	db46e <_strtod_r+0x9b6>
   db3e8:	9b07      	ldr	r3, [sp, #28]
   db3ea:	b123      	cbz	r3, db3f6 <_strtod_r+0x93e>
   db3ec:	f04f 0800 	mov.w	r8, #0
   db3f0:	f8df 9040 	ldr.w	r9, [pc, #64]	; db434 <_strtod_r+0x97c>
   db3f4:	e011      	b.n	db41a <_strtod_r+0x962>
   db3f6:	f1ba 0f00 	cmp.w	sl, #0
   db3fa:	d103      	bne.n	db404 <_strtod_r+0x94c>
   db3fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db400:	b93b      	cbnz	r3, db412 <_strtod_r+0x95a>
   db402:	e01b      	b.n	db43c <_strtod_r+0x984>
   db404:	f1ba 0f01 	cmp.w	sl, #1
   db408:	d103      	bne.n	db412 <_strtod_r+0x95a>
   db40a:	f1bb 0f00 	cmp.w	fp, #0
   db40e:	f43f af23 	beq.w	db258 <_strtod_r+0x7a0>
   db412:	f8df 9024 	ldr.w	r9, [pc, #36]	; db438 <_strtod_r+0x980>
   db416:	f04f 0800 	mov.w	r8, #0
   db41a:	2600      	movs	r6, #0
   db41c:	4f05      	ldr	r7, [pc, #20]	; (db434 <_strtod_r+0x97c>)
   db41e:	e039      	b.n	db494 <_strtod_r+0x9dc>
   db420:	fffffc02 	.word	0xfffffc02
   db424:	fffffbe2 	.word	0xfffffbe2
   db428:	000fffff 	.word	0x000fffff
   db42c:	7ff00000 	.word	0x7ff00000
   db430:	7fefffff 	.word	0x7fefffff
   db434:	3ff00000 	.word	0x3ff00000
   db438:	bff00000 	.word	0xbff00000
   db43c:	2200      	movs	r2, #0
   db43e:	4b98      	ldr	r3, [pc, #608]	; (db6a0 <_strtod_r+0xbe8>)
   db440:	4630      	mov	r0, r6
   db442:	4639      	mov	r1, r7
   db444:	f7fe f854 	bl	d94f0 <__aeabi_dcmplt>
   db448:	b940      	cbnz	r0, db45c <_strtod_r+0x9a4>
   db44a:	4630      	mov	r0, r6
   db44c:	4639      	mov	r1, r7
   db44e:	2200      	movs	r2, #0
   db450:	4b94      	ldr	r3, [pc, #592]	; (db6a4 <_strtod_r+0xbec>)
   db452:	f7fd fddb 	bl	d900c <__aeabi_dmul>
   db456:	4606      	mov	r6, r0
   db458:	460f      	mov	r7, r1
   db45a:	e001      	b.n	db460 <_strtod_r+0x9a8>
   db45c:	4f91      	ldr	r7, [pc, #580]	; (db6a4 <_strtod_r+0xbec>)
   db45e:	2600      	movs	r6, #0
   db460:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   db464:	9614      	str	r6, [sp, #80]	; 0x50
   db466:	9315      	str	r3, [sp, #84]	; 0x54
   db468:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   db46c:	e012      	b.n	db494 <_strtod_r+0x9dc>
   db46e:	4b8d      	ldr	r3, [pc, #564]	; (db6a4 <_strtod_r+0xbec>)
   db470:	4630      	mov	r0, r6
   db472:	4639      	mov	r1, r7
   db474:	2200      	movs	r2, #0
   db476:	f7fd fdc9 	bl	d900c <__aeabi_dmul>
   db47a:	9b07      	ldr	r3, [sp, #28]
   db47c:	4606      	mov	r6, r0
   db47e:	460f      	mov	r7, r1
   db480:	b923      	cbnz	r3, db48c <_strtod_r+0x9d4>
   db482:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db486:	900e      	str	r0, [sp, #56]	; 0x38
   db488:	930f      	str	r3, [sp, #60]	; 0x3c
   db48a:	e001      	b.n	db490 <_strtod_r+0x9d8>
   db48c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   db490:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   db494:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db498:	0d1b      	lsrs	r3, r3, #20
   db49a:	051b      	lsls	r3, r3, #20
   db49c:	9306      	str	r3, [sp, #24]
   db49e:	9a06      	ldr	r2, [sp, #24]
   db4a0:	4b81      	ldr	r3, [pc, #516]	; (db6a8 <_strtod_r+0xbf0>)
   db4a2:	429a      	cmp	r2, r3
   db4a4:	d12b      	bne.n	db4fe <_strtod_r+0xa46>
   db4a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   db4aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   db4ae:	ec4b ab10 	vmov	d0, sl, fp
   db4b2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   db4b6:	f001 fabf 	bl	dca38 <__ulp>
   db4ba:	4640      	mov	r0, r8
   db4bc:	ec53 2b10 	vmov	r2, r3, d0
   db4c0:	4649      	mov	r1, r9
   db4c2:	f7fd fda3 	bl	d900c <__aeabi_dmul>
   db4c6:	4652      	mov	r2, sl
   db4c8:	465b      	mov	r3, fp
   db4ca:	f7fd fbed 	bl	d8ca8 <__adddf3>
   db4ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db4d2:	0d1b      	lsrs	r3, r3, #20
   db4d4:	4a75      	ldr	r2, [pc, #468]	; (db6ac <_strtod_r+0xbf4>)
   db4d6:	051b      	lsls	r3, r3, #20
   db4d8:	4293      	cmp	r3, r2
   db4da:	4682      	mov	sl, r0
   db4dc:	d90c      	bls.n	db4f8 <_strtod_r+0xa40>
   db4de:	4b74      	ldr	r3, [pc, #464]	; (db6b0 <_strtod_r+0xbf8>)
   db4e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   db4e2:	429a      	cmp	r2, r3
   db4e4:	d103      	bne.n	db4ee <_strtod_r+0xa36>
   db4e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db4e8:	3301      	adds	r3, #1
   db4ea:	f43f ad2c 	beq.w	daf46 <_strtod_r+0x48e>
   db4ee:	f8df b1c0 	ldr.w	fp, [pc, #448]	; db6b0 <_strtod_r+0xbf8>
   db4f2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db4f6:	e072      	b.n	db5de <_strtod_r+0xb26>
   db4f8:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   db4fc:	e038      	b.n	db570 <_strtod_r+0xab8>
   db4fe:	9b03      	ldr	r3, [sp, #12]
   db500:	b333      	cbz	r3, db550 <_strtod_r+0xa98>
   db502:	9b06      	ldr	r3, [sp, #24]
   db504:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   db508:	d822      	bhi.n	db550 <_strtod_r+0xa98>
   db50a:	a35d      	add	r3, pc, #372	; (adr r3, db680 <_strtod_r+0xbc8>)
   db50c:	e9d3 2300 	ldrd	r2, r3, [r3]
   db510:	4630      	mov	r0, r6
   db512:	4639      	mov	r1, r7
   db514:	f7fd fff6 	bl	d9504 <__aeabi_dcmple>
   db518:	b1a8      	cbz	r0, db546 <_strtod_r+0xa8e>
   db51a:	4639      	mov	r1, r7
   db51c:	4630      	mov	r0, r6
   db51e:	f7fe f84d 	bl	d95bc <__aeabi_d2uiz>
   db522:	2800      	cmp	r0, #0
   db524:	bf08      	it	eq
   db526:	2001      	moveq	r0, #1
   db528:	f7fd fcfa 	bl	d8f20 <__aeabi_ui2d>
   db52c:	9b07      	ldr	r3, [sp, #28]
   db52e:	4606      	mov	r6, r0
   db530:	460f      	mov	r7, r1
   db532:	b923      	cbnz	r3, db53e <_strtod_r+0xa86>
   db534:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db538:	9010      	str	r0, [sp, #64]	; 0x40
   db53a:	9311      	str	r3, [sp, #68]	; 0x44
   db53c:	e001      	b.n	db542 <_strtod_r+0xa8a>
   db53e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   db542:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   db546:	9a06      	ldr	r2, [sp, #24]
   db548:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   db54c:	ebc2 0903 	rsb	r9, r2, r3
   db550:	ed9d 0b08 	vldr	d0, [sp, #32]
   db554:	f001 fa70 	bl	dca38 <__ulp>
   db558:	4640      	mov	r0, r8
   db55a:	ec53 2b10 	vmov	r2, r3, d0
   db55e:	4649      	mov	r1, r9
   db560:	f7fd fd54 	bl	d900c <__aeabi_dmul>
   db564:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   db568:	f7fd fb9e 	bl	d8ca8 <__adddf3>
   db56c:	4682      	mov	sl, r0
   db56e:	468b      	mov	fp, r1
   db570:	9b03      	ldr	r3, [sp, #12]
   db572:	bba3      	cbnz	r3, db5de <_strtod_r+0xb26>
   db574:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db578:	0d1b      	lsrs	r3, r3, #20
   db57a:	9a06      	ldr	r2, [sp, #24]
   db57c:	051b      	lsls	r3, r3, #20
   db57e:	429a      	cmp	r2, r3
   db580:	46d8      	mov	r8, fp
   db582:	d12c      	bne.n	db5de <_strtod_r+0xb26>
   db584:	4639      	mov	r1, r7
   db586:	4630      	mov	r0, r6
   db588:	f7fd fff0 	bl	d956c <__aeabi_d2iz>
   db58c:	f7fd fcd8 	bl	d8f40 <__aeabi_i2d>
   db590:	460b      	mov	r3, r1
   db592:	4602      	mov	r2, r0
   db594:	4639      	mov	r1, r7
   db596:	4630      	mov	r0, r6
   db598:	f7fd fb84 	bl	d8ca4 <__aeabi_dsub>
   db59c:	9b07      	ldr	r3, [sp, #28]
   db59e:	4606      	mov	r6, r0
   db5a0:	460f      	mov	r7, r1
   db5a2:	b92b      	cbnz	r3, db5b0 <_strtod_r+0xaf8>
   db5a4:	f1ba 0f00 	cmp.w	sl, #0
   db5a8:	d102      	bne.n	db5b0 <_strtod_r+0xaf8>
   db5aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db5ae:	b183      	cbz	r3, db5d2 <_strtod_r+0xb1a>
   db5b0:	a335      	add	r3, pc, #212	; (adr r3, db688 <_strtod_r+0xbd0>)
   db5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   db5b6:	4630      	mov	r0, r6
   db5b8:	4639      	mov	r1, r7
   db5ba:	f7fd ff99 	bl	d94f0 <__aeabi_dcmplt>
   db5be:	2800      	cmp	r0, #0
   db5c0:	d131      	bne.n	db626 <_strtod_r+0xb6e>
   db5c2:	a333      	add	r3, pc, #204	; (adr r3, db690 <_strtod_r+0xbd8>)
   db5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   db5c8:	4630      	mov	r0, r6
   db5ca:	4639      	mov	r1, r7
   db5cc:	f7fd ffae 	bl	d952c <__aeabi_dcmpgt>
   db5d0:	e004      	b.n	db5dc <_strtod_r+0xb24>
   db5d2:	a331      	add	r3, pc, #196	; (adr r3, db698 <_strtod_r+0xbe0>)
   db5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   db5d8:	f7fd ff8a 	bl	d94f0 <__aeabi_dcmplt>
   db5dc:	bb18      	cbnz	r0, db626 <_strtod_r+0xb6e>
   db5de:	9918      	ldr	r1, [sp, #96]	; 0x60
   db5e0:	9802      	ldr	r0, [sp, #8]
   db5e2:	f000 ff98 	bl	dc516 <_Bfree>
   db5e6:	9904      	ldr	r1, [sp, #16]
   db5e8:	9802      	ldr	r0, [sp, #8]
   db5ea:	f000 ff94 	bl	dc516 <_Bfree>
   db5ee:	4629      	mov	r1, r5
   db5f0:	9802      	ldr	r0, [sp, #8]
   db5f2:	f000 ff90 	bl	dc516 <_Bfree>
   db5f6:	4621      	mov	r1, r4
   db5f8:	9802      	ldr	r0, [sp, #8]
   db5fa:	f000 ff8c 	bl	dc516 <_Bfree>
   db5fe:	e56d      	b.n	db0dc <_strtod_r+0x624>
   db600:	9b03      	ldr	r3, [sp, #12]
   db602:	b183      	cbz	r3, db626 <_strtod_r+0xb6e>
   db604:	4b2b      	ldr	r3, [pc, #172]	; (db6b4 <_strtod_r+0xbfc>)
   db606:	930b      	str	r3, [sp, #44]	; 0x2c
   db608:	2300      	movs	r3, #0
   db60a:	930a      	str	r3, [sp, #40]	; 0x28
   db60c:	4650      	mov	r0, sl
   db60e:	4659      	mov	r1, fp
   db610:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   db614:	f7fd fcfa 	bl	d900c <__aeabi_dmul>
   db618:	4682      	mov	sl, r0
   db61a:	468b      	mov	fp, r1
   db61c:	b919      	cbnz	r1, db626 <_strtod_r+0xb6e>
   db61e:	b910      	cbnz	r0, db626 <_strtod_r+0xb6e>
   db620:	9a02      	ldr	r2, [sp, #8]
   db622:	2322      	movs	r3, #34	; 0x22
   db624:	6013      	str	r3, [r2, #0]
   db626:	9918      	ldr	r1, [sp, #96]	; 0x60
   db628:	9802      	ldr	r0, [sp, #8]
   db62a:	f000 ff74 	bl	dc516 <_Bfree>
   db62e:	9904      	ldr	r1, [sp, #16]
   db630:	9802      	ldr	r0, [sp, #8]
   db632:	f000 ff70 	bl	dc516 <_Bfree>
   db636:	4629      	mov	r1, r5
   db638:	9802      	ldr	r0, [sp, #8]
   db63a:	f000 ff6c 	bl	dc516 <_Bfree>
   db63e:	9905      	ldr	r1, [sp, #20]
   db640:	9802      	ldr	r0, [sp, #8]
   db642:	f000 ff68 	bl	dc516 <_Bfree>
   db646:	4621      	mov	r1, r4
   db648:	9802      	ldr	r0, [sp, #8]
   db64a:	f000 ff64 	bl	dc516 <_Bfree>
   db64e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   db650:	b113      	cbz	r3, db658 <_strtod_r+0xba0>
   db652:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   db654:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db656:	6013      	str	r3, [r2, #0]
   db658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   db65a:	b11b      	cbz	r3, db664 <_strtod_r+0xbac>
   db65c:	4652      	mov	r2, sl
   db65e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   db662:	e007      	b.n	db674 <_strtod_r+0xbbc>
   db664:	4652      	mov	r2, sl
   db666:	465b      	mov	r3, fp
   db668:	e004      	b.n	db674 <_strtod_r+0xbbc>
   db66a:	2500      	movs	r5, #0
   db66c:	462a      	mov	r2, r5
   db66e:	2101      	movs	r1, #1
   db670:	f7ff bb41 	b.w	dacf6 <_strtod_r+0x23e>
   db674:	ec43 2b10 	vmov	d0, r2, r3
   db678:	b01d      	add	sp, #116	; 0x74
   db67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db67e:	bf00      	nop
   db680:	ffc00000 	.word	0xffc00000
   db684:	41dfffff 	.word	0x41dfffff
   db688:	94a03595 	.word	0x94a03595
   db68c:	3fdfffff 	.word	0x3fdfffff
   db690:	35afe535 	.word	0x35afe535
   db694:	3fe00000 	.word	0x3fe00000
   db698:	94a03595 	.word	0x94a03595
   db69c:	3fcfffff 	.word	0x3fcfffff
   db6a0:	3ff00000 	.word	0x3ff00000
   db6a4:	3fe00000 	.word	0x3fe00000
   db6a8:	7fe00000 	.word	0x7fe00000
   db6ac:	7c9fffff 	.word	0x7c9fffff
   db6b0:	7fefffff 	.word	0x7fefffff
   db6b4:	39500000 	.word	0x39500000

000db6b8 <strtof>:
   db6b8:	b538      	push	{r3, r4, r5, lr}
   db6ba:	4b0e      	ldr	r3, [pc, #56]	; (db6f4 <strtof+0x3c>)
   db6bc:	460a      	mov	r2, r1
   db6be:	4601      	mov	r1, r0
   db6c0:	6818      	ldr	r0, [r3, #0]
   db6c2:	f7ff f9f9 	bl	daab8 <_strtod_r>
   db6c6:	ec55 4b10 	vmov	r4, r5, d0
   db6ca:	ee10 2a10 	vmov	r2, s0
   db6ce:	462b      	mov	r3, r5
   db6d0:	ee10 0a10 	vmov	r0, s0
   db6d4:	4629      	mov	r1, r5
   db6d6:	f7fd ff33 	bl	d9540 <__aeabi_dcmpun>
   db6da:	b120      	cbz	r0, db6e6 <strtof+0x2e>
   db6dc:	2000      	movs	r0, #0
   db6de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db6e2:	f001 bae1 	b.w	dcca8 <nanf>
   db6e6:	4620      	mov	r0, r4
   db6e8:	4629      	mov	r1, r5
   db6ea:	f7fd ff87 	bl	d95fc <__aeabi_d2f>
   db6ee:	ee00 0a10 	vmov	s0, r0
   db6f2:	bd38      	pop	{r3, r4, r5, pc}
   db6f4:	2003dfdc 	.word	0x2003dfdc

000db6f8 <_strtol_r>:
   db6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db6fc:	4680      	mov	r8, r0
   db6fe:	4840      	ldr	r0, [pc, #256]	; (db800 <_strtol_r+0x108>)
   db700:	f8d0 9000 	ldr.w	r9, [r0]
   db704:	460f      	mov	r7, r1
   db706:	463d      	mov	r5, r7
   db708:	f815 4b01 	ldrb.w	r4, [r5], #1
   db70c:	eb09 0004 	add.w	r0, r9, r4
   db710:	7840      	ldrb	r0, [r0, #1]
   db712:	f000 0008 	and.w	r0, r0, #8
   db716:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   db71a:	b108      	cbz	r0, db720 <_strtol_r+0x28>
   db71c:	462f      	mov	r7, r5
   db71e:	e7f2      	b.n	db706 <_strtol_r+0xe>
   db720:	2c2d      	cmp	r4, #45	; 0x2d
   db722:	d103      	bne.n	db72c <_strtol_r+0x34>
   db724:	1cbd      	adds	r5, r7, #2
   db726:	787c      	ldrb	r4, [r7, #1]
   db728:	2601      	movs	r6, #1
   db72a:	e003      	b.n	db734 <_strtol_r+0x3c>
   db72c:	2c2b      	cmp	r4, #43	; 0x2b
   db72e:	bf04      	itt	eq
   db730:	787c      	ldrbeq	r4, [r7, #1]
   db732:	1cbd      	addeq	r5, r7, #2
   db734:	b113      	cbz	r3, db73c <_strtol_r+0x44>
   db736:	2b10      	cmp	r3, #16
   db738:	d10a      	bne.n	db750 <_strtol_r+0x58>
   db73a:	e05b      	b.n	db7f4 <_strtol_r+0xfc>
   db73c:	2c30      	cmp	r4, #48	; 0x30
   db73e:	d157      	bne.n	db7f0 <_strtol_r+0xf8>
   db740:	7828      	ldrb	r0, [r5, #0]
   db742:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   db746:	2858      	cmp	r0, #88	; 0x58
   db748:	d14d      	bne.n	db7e6 <_strtol_r+0xee>
   db74a:	786c      	ldrb	r4, [r5, #1]
   db74c:	2310      	movs	r3, #16
   db74e:	3502      	adds	r5, #2
   db750:	2e00      	cmp	r6, #0
   db752:	bf14      	ite	ne
   db754:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   db758:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   db75c:	2700      	movs	r7, #0
   db75e:	fbbc faf3 	udiv	sl, ip, r3
   db762:	4638      	mov	r0, r7
   db764:	fb03 cc1a 	mls	ip, r3, sl, ip
   db768:	eb09 0e04 	add.w	lr, r9, r4
   db76c:	f89e e001 	ldrb.w	lr, [lr, #1]
   db770:	f01e 0f04 	tst.w	lr, #4
   db774:	d001      	beq.n	db77a <_strtol_r+0x82>
   db776:	3c30      	subs	r4, #48	; 0x30
   db778:	e00b      	b.n	db792 <_strtol_r+0x9a>
   db77a:	f01e 0e03 	ands.w	lr, lr, #3
   db77e:	d01b      	beq.n	db7b8 <_strtol_r+0xc0>
   db780:	f1be 0f01 	cmp.w	lr, #1
   db784:	bf0c      	ite	eq
   db786:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   db78a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   db78e:	ebce 0404 	rsb	r4, lr, r4
   db792:	42a3      	cmp	r3, r4
   db794:	dd10      	ble.n	db7b8 <_strtol_r+0xc0>
   db796:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   db79a:	d00a      	beq.n	db7b2 <_strtol_r+0xba>
   db79c:	4550      	cmp	r0, sl
   db79e:	d806      	bhi.n	db7ae <_strtol_r+0xb6>
   db7a0:	d101      	bne.n	db7a6 <_strtol_r+0xae>
   db7a2:	4564      	cmp	r4, ip
   db7a4:	dc03      	bgt.n	db7ae <_strtol_r+0xb6>
   db7a6:	fb03 4000 	mla	r0, r3, r0, r4
   db7aa:	2701      	movs	r7, #1
   db7ac:	e001      	b.n	db7b2 <_strtol_r+0xba>
   db7ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   db7b2:	f815 4b01 	ldrb.w	r4, [r5], #1
   db7b6:	e7d7      	b.n	db768 <_strtol_r+0x70>
   db7b8:	1c7b      	adds	r3, r7, #1
   db7ba:	d10c      	bne.n	db7d6 <_strtol_r+0xde>
   db7bc:	2e00      	cmp	r6, #0
   db7be:	f04f 0322 	mov.w	r3, #34	; 0x22
   db7c2:	bf14      	ite	ne
   db7c4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   db7c8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   db7cc:	f8c8 3000 	str.w	r3, [r8]
   db7d0:	b92a      	cbnz	r2, db7de <_strtol_r+0xe6>
   db7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db7d6:	b106      	cbz	r6, db7da <_strtol_r+0xe2>
   db7d8:	4240      	negs	r0, r0
   db7da:	b172      	cbz	r2, db7fa <_strtol_r+0x102>
   db7dc:	b107      	cbz	r7, db7e0 <_strtol_r+0xe8>
   db7de:	1e69      	subs	r1, r5, #1
   db7e0:	6011      	str	r1, [r2, #0]
   db7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db7e6:	2430      	movs	r4, #48	; 0x30
   db7e8:	2b00      	cmp	r3, #0
   db7ea:	d1b1      	bne.n	db750 <_strtol_r+0x58>
   db7ec:	2308      	movs	r3, #8
   db7ee:	e7af      	b.n	db750 <_strtol_r+0x58>
   db7f0:	230a      	movs	r3, #10
   db7f2:	e7ad      	b.n	db750 <_strtol_r+0x58>
   db7f4:	2c30      	cmp	r4, #48	; 0x30
   db7f6:	d0a3      	beq.n	db740 <_strtol_r+0x48>
   db7f8:	e7aa      	b.n	db750 <_strtol_r+0x58>
   db7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db7fe:	bf00      	nop
   db800:	2003df78 	.word	0x2003df78

000db804 <strtol>:
   db804:	4613      	mov	r3, r2
   db806:	460a      	mov	r2, r1
   db808:	4601      	mov	r1, r0
   db80a:	4802      	ldr	r0, [pc, #8]	; (db814 <strtol+0x10>)
   db80c:	6800      	ldr	r0, [r0, #0]
   db80e:	f7ff bf73 	b.w	db6f8 <_strtol_r>
   db812:	bf00      	nop
   db814:	2003dfdc 	.word	0x2003dfdc

000db818 <_strtoul_r>:
   db818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db81c:	4680      	mov	r8, r0
   db81e:	483c      	ldr	r0, [pc, #240]	; (db910 <_strtoul_r+0xf8>)
   db820:	f8d0 9000 	ldr.w	r9, [r0]
   db824:	460e      	mov	r6, r1
   db826:	4635      	mov	r5, r6
   db828:	f815 4b01 	ldrb.w	r4, [r5], #1
   db82c:	eb09 0004 	add.w	r0, r9, r4
   db830:	7840      	ldrb	r0, [r0, #1]
   db832:	f000 0008 	and.w	r0, r0, #8
   db836:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   db83a:	b108      	cbz	r0, db840 <_strtoul_r+0x28>
   db83c:	462e      	mov	r6, r5
   db83e:	e7f2      	b.n	db826 <_strtoul_r+0xe>
   db840:	2c2d      	cmp	r4, #45	; 0x2d
   db842:	d103      	bne.n	db84c <_strtoul_r+0x34>
   db844:	1cb5      	adds	r5, r6, #2
   db846:	7874      	ldrb	r4, [r6, #1]
   db848:	2701      	movs	r7, #1
   db84a:	e003      	b.n	db854 <_strtoul_r+0x3c>
   db84c:	2c2b      	cmp	r4, #43	; 0x2b
   db84e:	bf04      	itt	eq
   db850:	7874      	ldrbeq	r4, [r6, #1]
   db852:	1cb5      	addeq	r5, r6, #2
   db854:	b113      	cbz	r3, db85c <_strtoul_r+0x44>
   db856:	2b10      	cmp	r3, #16
   db858:	d10a      	bne.n	db870 <_strtoul_r+0x58>
   db85a:	e053      	b.n	db904 <_strtoul_r+0xec>
   db85c:	2c30      	cmp	r4, #48	; 0x30
   db85e:	d14f      	bne.n	db900 <_strtoul_r+0xe8>
   db860:	7828      	ldrb	r0, [r5, #0]
   db862:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   db866:	2858      	cmp	r0, #88	; 0x58
   db868:	d145      	bne.n	db8f6 <_strtoul_r+0xde>
   db86a:	786c      	ldrb	r4, [r5, #1]
   db86c:	2310      	movs	r3, #16
   db86e:	3502      	adds	r5, #2
   db870:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   db874:	2600      	movs	r6, #0
   db876:	fbbc fcf3 	udiv	ip, ip, r3
   db87a:	fb03 fa0c 	mul.w	sl, r3, ip
   db87e:	ea6f 0a0a 	mvn.w	sl, sl
   db882:	4630      	mov	r0, r6
   db884:	eb09 0e04 	add.w	lr, r9, r4
   db888:	f89e e001 	ldrb.w	lr, [lr, #1]
   db88c:	f01e 0f04 	tst.w	lr, #4
   db890:	d001      	beq.n	db896 <_strtoul_r+0x7e>
   db892:	3c30      	subs	r4, #48	; 0x30
   db894:	e00b      	b.n	db8ae <_strtoul_r+0x96>
   db896:	f01e 0e03 	ands.w	lr, lr, #3
   db89a:	d01a      	beq.n	db8d2 <_strtoul_r+0xba>
   db89c:	f1be 0f01 	cmp.w	lr, #1
   db8a0:	bf0c      	ite	eq
   db8a2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   db8a6:	f04f 0e57 	movne.w	lr, #87	; 0x57
   db8aa:	ebce 0404 	rsb	r4, lr, r4
   db8ae:	42a3      	cmp	r3, r4
   db8b0:	dd0f      	ble.n	db8d2 <_strtoul_r+0xba>
   db8b2:	2e00      	cmp	r6, #0
   db8b4:	db08      	blt.n	db8c8 <_strtoul_r+0xb0>
   db8b6:	4560      	cmp	r0, ip
   db8b8:	d806      	bhi.n	db8c8 <_strtoul_r+0xb0>
   db8ba:	d101      	bne.n	db8c0 <_strtoul_r+0xa8>
   db8bc:	4554      	cmp	r4, sl
   db8be:	dc03      	bgt.n	db8c8 <_strtoul_r+0xb0>
   db8c0:	fb03 4000 	mla	r0, r3, r0, r4
   db8c4:	2601      	movs	r6, #1
   db8c6:	e001      	b.n	db8cc <_strtoul_r+0xb4>
   db8c8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   db8cc:	f815 4b01 	ldrb.w	r4, [r5], #1
   db8d0:	e7d8      	b.n	db884 <_strtoul_r+0x6c>
   db8d2:	2e00      	cmp	r6, #0
   db8d4:	da07      	bge.n	db8e6 <_strtoul_r+0xce>
   db8d6:	2322      	movs	r3, #34	; 0x22
   db8d8:	f8c8 3000 	str.w	r3, [r8]
   db8dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db8e0:	b92a      	cbnz	r2, db8ee <_strtoul_r+0xd6>
   db8e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db8e6:	b107      	cbz	r7, db8ea <_strtoul_r+0xd2>
   db8e8:	4240      	negs	r0, r0
   db8ea:	b172      	cbz	r2, db90a <_strtoul_r+0xf2>
   db8ec:	b106      	cbz	r6, db8f0 <_strtoul_r+0xd8>
   db8ee:	1e69      	subs	r1, r5, #1
   db8f0:	6011      	str	r1, [r2, #0]
   db8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db8f6:	2430      	movs	r4, #48	; 0x30
   db8f8:	2b00      	cmp	r3, #0
   db8fa:	d1b9      	bne.n	db870 <_strtoul_r+0x58>
   db8fc:	2308      	movs	r3, #8
   db8fe:	e7b7      	b.n	db870 <_strtoul_r+0x58>
   db900:	230a      	movs	r3, #10
   db902:	e7b5      	b.n	db870 <_strtoul_r+0x58>
   db904:	2c30      	cmp	r4, #48	; 0x30
   db906:	d0ab      	beq.n	db860 <_strtoul_r+0x48>
   db908:	e7b2      	b.n	db870 <_strtoul_r+0x58>
   db90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db90e:	bf00      	nop
   db910:	2003df78 	.word	0x2003df78

000db914 <strtoul>:
   db914:	4613      	mov	r3, r2
   db916:	460a      	mov	r2, r1
   db918:	4601      	mov	r1, r0
   db91a:	4802      	ldr	r0, [pc, #8]	; (db924 <strtoul+0x10>)
   db91c:	6800      	ldr	r0, [r0, #0]
   db91e:	f7ff bf7b 	b.w	db818 <_strtoul_r>
   db922:	bf00      	nop
   db924:	2003dfdc 	.word	0x2003dfdc

000db928 <__get_current_time_locale>:
   db928:	4b04      	ldr	r3, [pc, #16]	; (db93c <__get_current_time_locale+0x14>)
   db92a:	4a05      	ldr	r2, [pc, #20]	; (db940 <__get_current_time_locale+0x18>)
   db92c:	6818      	ldr	r0, [r3, #0]
   db92e:	4b05      	ldr	r3, [pc, #20]	; (db944 <__get_current_time_locale+0x1c>)
   db930:	2800      	cmp	r0, #0
   db932:	bf14      	ite	ne
   db934:	4610      	movne	r0, r2
   db936:	4618      	moveq	r0, r3
   db938:	4770      	bx	lr
   db93a:	bf00      	nop
   db93c:	2003e6c8 	.word	0x2003e6c8
   db940:	2003e6cc 	.word	0x2003e6cc
   db944:	000dda38 	.word	0x000dda38

000db948 <__tzcalc_limits>:
   db948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db94c:	4604      	mov	r4, r0
   db94e:	f000 fda5 	bl	dc49c <__gettzinfo>
   db952:	f240 73b1 	movw	r3, #1969	; 0x7b1
   db956:	429c      	cmp	r4, r3
   db958:	f340 8096 	ble.w	dba88 <__tzcalc_limits+0x140>
   db95c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   db960:	18e3      	adds	r3, r4, r3
   db962:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   db966:	109b      	asrs	r3, r3, #2
   db968:	f240 156d 	movw	r5, #365	; 0x16d
   db96c:	fb05 3502 	mla	r5, r5, r2, r3
   db970:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   db974:	f06f 0363 	mvn.w	r3, #99	; 0x63
   db978:	fb92 f3f3 	sdiv	r3, r2, r3
   db97c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   db980:	442b      	add	r3, r5
   db982:	18a5      	adds	r5, r4, r2
   db984:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db988:	fb95 f5f2 	sdiv	r5, r5, r2
   db98c:	441d      	add	r5, r3
   db98e:	2364      	movs	r3, #100	; 0x64
   db990:	fb94 f7f2 	sdiv	r7, r4, r2
   db994:	fb94 f6f3 	sdiv	r6, r4, r3
   db998:	fb02 4717 	mls	r7, r2, r7, r4
   db99c:	fb03 4616 	mls	r6, r3, r6, r4
   db9a0:	f100 0338 	add.w	r3, r0, #56	; 0x38
   db9a4:	fab7 fe87 	clz	lr, r7
   db9a8:	9301      	str	r3, [sp, #4]
   db9aa:	f004 0303 	and.w	r3, r4, #3
   db9ae:	6044      	str	r4, [r0, #4]
   db9b0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   db9b4:	4601      	mov	r1, r0
   db9b6:	9300      	str	r3, [sp, #0]
   db9b8:	f04f 0c07 	mov.w	ip, #7
   db9bc:	7a0b      	ldrb	r3, [r1, #8]
   db9be:	2b4a      	cmp	r3, #74	; 0x4a
   db9c0:	d10e      	bne.n	db9e0 <__tzcalc_limits+0x98>
   db9c2:	694b      	ldr	r3, [r1, #20]
   db9c4:	9a00      	ldr	r2, [sp, #0]
   db9c6:	18ec      	adds	r4, r5, r3
   db9c8:	b902      	cbnz	r2, db9cc <__tzcalc_limits+0x84>
   db9ca:	b906      	cbnz	r6, db9ce <__tzcalc_limits+0x86>
   db9cc:	b927      	cbnz	r7, db9d8 <__tzcalc_limits+0x90>
   db9ce:	2b3b      	cmp	r3, #59	; 0x3b
   db9d0:	bfd4      	ite	le
   db9d2:	2300      	movle	r3, #0
   db9d4:	2301      	movgt	r3, #1
   db9d6:	e000      	b.n	db9da <__tzcalc_limits+0x92>
   db9d8:	2300      	movs	r3, #0
   db9da:	4423      	add	r3, r4
   db9dc:	3b01      	subs	r3, #1
   db9de:	e03f      	b.n	dba60 <__tzcalc_limits+0x118>
   db9e0:	2b44      	cmp	r3, #68	; 0x44
   db9e2:	d102      	bne.n	db9ea <__tzcalc_limits+0xa2>
   db9e4:	694b      	ldr	r3, [r1, #20]
   db9e6:	442b      	add	r3, r5
   db9e8:	e03a      	b.n	dba60 <__tzcalc_limits+0x118>
   db9ea:	9b00      	ldr	r3, [sp, #0]
   db9ec:	b92b      	cbnz	r3, db9fa <__tzcalc_limits+0xb2>
   db9ee:	2e00      	cmp	r6, #0
   db9f0:	bf0c      	ite	eq
   db9f2:	46f0      	moveq	r8, lr
   db9f4:	f04f 0801 	movne.w	r8, #1
   db9f8:	e000      	b.n	db9fc <__tzcalc_limits+0xb4>
   db9fa:	46f0      	mov	r8, lr
   db9fc:	4b24      	ldr	r3, [pc, #144]	; (dba90 <__tzcalc_limits+0x148>)
   db9fe:	68cc      	ldr	r4, [r1, #12]
   dba00:	2230      	movs	r2, #48	; 0x30
   dba02:	fb02 3808 	mla	r8, r2, r8, r3
   dba06:	f1a8 0a04 	sub.w	sl, r8, #4
   dba0a:	46a9      	mov	r9, r5
   dba0c:	2301      	movs	r3, #1
   dba0e:	42a3      	cmp	r3, r4
   dba10:	da04      	bge.n	dba1c <__tzcalc_limits+0xd4>
   dba12:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dba16:	3301      	adds	r3, #1
   dba18:	44d9      	add	r9, fp
   dba1a:	e7f8      	b.n	dba0e <__tzcalc_limits+0xc6>
   dba1c:	f109 0304 	add.w	r3, r9, #4
   dba20:	fb93 fbfc 	sdiv	fp, r3, ip
   dba24:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dba28:	2c01      	cmp	r4, #1
   dba2a:	ebca 0a03 	rsb	sl, sl, r3
   dba2e:	694b      	ldr	r3, [r1, #20]
   dba30:	bfb8      	it	lt
   dba32:	2401      	movlt	r4, #1
   dba34:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dba38:	ebb3 0a0a 	subs.w	sl, r3, sl
   dba3c:	690b      	ldr	r3, [r1, #16]
   dba3e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   dba42:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   dba46:	bf48      	it	mi
   dba48:	f10a 0a07 	addmi.w	sl, sl, #7
   dba4c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dba50:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dba54:	4453      	add	r3, sl
   dba56:	42a3      	cmp	r3, r4
   dba58:	db01      	blt.n	dba5e <__tzcalc_limits+0x116>
   dba5a:	3b07      	subs	r3, #7
   dba5c:	e7fb      	b.n	dba56 <__tzcalc_limits+0x10e>
   dba5e:	444b      	add	r3, r9
   dba60:	698c      	ldr	r4, [r1, #24]
   dba62:	4a0c      	ldr	r2, [pc, #48]	; (dba94 <__tzcalc_limits+0x14c>)
   dba64:	fb02 4303 	mla	r3, r2, r3, r4
   dba68:	6a0c      	ldr	r4, [r1, #32]
   dba6a:	4423      	add	r3, r4
   dba6c:	f841 3f1c 	str.w	r3, [r1, #28]!
   dba70:	9b01      	ldr	r3, [sp, #4]
   dba72:	4299      	cmp	r1, r3
   dba74:	d1a2      	bne.n	db9bc <__tzcalc_limits+0x74>
   dba76:	69c3      	ldr	r3, [r0, #28]
   dba78:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dba7a:	4293      	cmp	r3, r2
   dba7c:	bfac      	ite	ge
   dba7e:	2300      	movge	r3, #0
   dba80:	2301      	movlt	r3, #1
   dba82:	6003      	str	r3, [r0, #0]
   dba84:	2001      	movs	r0, #1
   dba86:	e000      	b.n	dba8a <__tzcalc_limits+0x142>
   dba88:	2000      	movs	r0, #0
   dba8a:	b003      	add	sp, #12
   dba8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dba90:	000dd7ec 	.word	0x000dd7ec
   dba94:	00015180 	.word	0x00015180

000dba98 <__tz_lock>:
   dba98:	4770      	bx	lr

000dba9a <__tz_unlock>:
   dba9a:	4770      	bx	lr

000dba9c <_tzset_unlocked>:
   dba9c:	4b01      	ldr	r3, [pc, #4]	; (dbaa4 <_tzset_unlocked+0x8>)
   dba9e:	6818      	ldr	r0, [r3, #0]
   dbaa0:	f000 b802 	b.w	dbaa8 <_tzset_unlocked_r>
   dbaa4:	2003dfdc 	.word	0x2003dfdc

000dbaa8 <_tzset_unlocked_r>:
   dbaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbaac:	b08d      	sub	sp, #52	; 0x34
   dbaae:	4607      	mov	r7, r0
   dbab0:	f000 fcf4 	bl	dc49c <__gettzinfo>
   dbab4:	49b0      	ldr	r1, [pc, #704]	; (dbd78 <_tzset_unlocked_r+0x2d0>)
   dbab6:	4eb1      	ldr	r6, [pc, #708]	; (dbd7c <_tzset_unlocked_r+0x2d4>)
   dbab8:	4604      	mov	r4, r0
   dbaba:	4638      	mov	r0, r7
   dbabc:	f000 fce6 	bl	dc48c <_getenv_r>
   dbac0:	4605      	mov	r5, r0
   dbac2:	b960      	cbnz	r0, dbade <_tzset_unlocked_r+0x36>
   dbac4:	4bae      	ldr	r3, [pc, #696]	; (dbd80 <_tzset_unlocked_r+0x2d8>)
   dbac6:	4aaf      	ldr	r2, [pc, #700]	; (dbd84 <_tzset_unlocked_r+0x2dc>)
   dbac8:	6018      	str	r0, [r3, #0]
   dbaca:	4baf      	ldr	r3, [pc, #700]	; (dbd88 <_tzset_unlocked_r+0x2e0>)
   dbacc:	6018      	str	r0, [r3, #0]
   dbace:	4baf      	ldr	r3, [pc, #700]	; (dbd8c <_tzset_unlocked_r+0x2e4>)
   dbad0:	6830      	ldr	r0, [r6, #0]
   dbad2:	601a      	str	r2, [r3, #0]
   dbad4:	605a      	str	r2, [r3, #4]
   dbad6:	f7fb f93d 	bl	d6d54 <free>
   dbada:	6035      	str	r5, [r6, #0]
   dbadc:	e148      	b.n	dbd70 <_tzset_unlocked_r+0x2c8>
   dbade:	6831      	ldr	r1, [r6, #0]
   dbae0:	b979      	cbnz	r1, dbb02 <_tzset_unlocked_r+0x5a>
   dbae2:	6830      	ldr	r0, [r6, #0]
   dbae4:	f7fb f936 	bl	d6d54 <free>
   dbae8:	4628      	mov	r0, r5
   dbaea:	f7fe ff97 	bl	daa1c <strlen>
   dbaee:	1c41      	adds	r1, r0, #1
   dbaf0:	4638      	mov	r0, r7
   dbaf2:	f7fb f967 	bl	d6dc4 <_malloc_r>
   dbaf6:	6030      	str	r0, [r6, #0]
   dbaf8:	b148      	cbz	r0, dbb0e <_tzset_unlocked_r+0x66>
   dbafa:	4629      	mov	r1, r5
   dbafc:	f7fe fa56 	bl	d9fac <strcpy>
   dbb00:	e005      	b.n	dbb0e <_tzset_unlocked_r+0x66>
   dbb02:	f7fe fa49 	bl	d9f98 <strcmp>
   dbb06:	2800      	cmp	r0, #0
   dbb08:	f000 8132 	beq.w	dbd70 <_tzset_unlocked_r+0x2c8>
   dbb0c:	e7e9      	b.n	dbae2 <_tzset_unlocked_r+0x3a>
   dbb0e:	782b      	ldrb	r3, [r5, #0]
   dbb10:	4a9f      	ldr	r2, [pc, #636]	; (dbd90 <_tzset_unlocked_r+0x2e8>)
   dbb12:	49a0      	ldr	r1, [pc, #640]	; (dbd94 <_tzset_unlocked_r+0x2ec>)
   dbb14:	2b3a      	cmp	r3, #58	; 0x3a
   dbb16:	bf08      	it	eq
   dbb18:	3501      	addeq	r5, #1
   dbb1a:	ae0a      	add	r6, sp, #40	; 0x28
   dbb1c:	4633      	mov	r3, r6
   dbb1e:	4628      	mov	r0, r5
   dbb20:	f7fb f930 	bl	d6d84 <siscanf>
   dbb24:	2800      	cmp	r0, #0
   dbb26:	f340 8123 	ble.w	dbd70 <_tzset_unlocked_r+0x2c8>
   dbb2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbb2c:	18ef      	adds	r7, r5, r3
   dbb2e:	5ceb      	ldrb	r3, [r5, r3]
   dbb30:	2b2d      	cmp	r3, #45	; 0x2d
   dbb32:	d103      	bne.n	dbb3c <_tzset_unlocked_r+0x94>
   dbb34:	3701      	adds	r7, #1
   dbb36:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   dbb3a:	e003      	b.n	dbb44 <_tzset_unlocked_r+0x9c>
   dbb3c:	2b2b      	cmp	r3, #43	; 0x2b
   dbb3e:	bf08      	it	eq
   dbb40:	3701      	addeq	r7, #1
   dbb42:	2501      	movs	r5, #1
   dbb44:	f10d 0a20 	add.w	sl, sp, #32
   dbb48:	f10d 0b1e 	add.w	fp, sp, #30
   dbb4c:	f04f 0800 	mov.w	r8, #0
   dbb50:	9603      	str	r6, [sp, #12]
   dbb52:	f8cd a008 	str.w	sl, [sp, #8]
   dbb56:	9601      	str	r6, [sp, #4]
   dbb58:	f8cd b000 	str.w	fp, [sp]
   dbb5c:	4633      	mov	r3, r6
   dbb5e:	aa07      	add	r2, sp, #28
   dbb60:	498d      	ldr	r1, [pc, #564]	; (dbd98 <_tzset_unlocked_r+0x2f0>)
   dbb62:	f8ad 801e 	strh.w	r8, [sp, #30]
   dbb66:	4638      	mov	r0, r7
   dbb68:	f8ad 8020 	strh.w	r8, [sp, #32]
   dbb6c:	f7fb f90a 	bl	d6d84 <siscanf>
   dbb70:	4540      	cmp	r0, r8
   dbb72:	f340 80fd 	ble.w	dbd70 <_tzset_unlocked_r+0x2c8>
   dbb76:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dbb7a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dbb7e:	f8df 9224 	ldr.w	r9, [pc, #548]	; dbda4 <_tzset_unlocked_r+0x2fc>
   dbb82:	213c      	movs	r1, #60	; 0x3c
   dbb84:	fb01 3302 	mla	r3, r1, r2, r3
   dbb88:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dbb8c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dbb90:	fb01 3302 	mla	r3, r1, r2, r3
   dbb94:	435d      	muls	r5, r3
   dbb96:	6225      	str	r5, [r4, #32]
   dbb98:	4d7c      	ldr	r5, [pc, #496]	; (dbd8c <_tzset_unlocked_r+0x2e4>)
   dbb9a:	4b7d      	ldr	r3, [pc, #500]	; (dbd90 <_tzset_unlocked_r+0x2e8>)
   dbb9c:	602b      	str	r3, [r5, #0]
   dbb9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbba0:	497c      	ldr	r1, [pc, #496]	; (dbd94 <_tzset_unlocked_r+0x2ec>)
   dbba2:	441f      	add	r7, r3
   dbba4:	464a      	mov	r2, r9
   dbba6:	4633      	mov	r3, r6
   dbba8:	4638      	mov	r0, r7
   dbbaa:	f7fb f8eb 	bl	d6d84 <siscanf>
   dbbae:	4540      	cmp	r0, r8
   dbbb0:	dc08      	bgt.n	dbbc4 <_tzset_unlocked_r+0x11c>
   dbbb2:	682b      	ldr	r3, [r5, #0]
   dbbb4:	606b      	str	r3, [r5, #4]
   dbbb6:	4b72      	ldr	r3, [pc, #456]	; (dbd80 <_tzset_unlocked_r+0x2d8>)
   dbbb8:	6a22      	ldr	r2, [r4, #32]
   dbbba:	601a      	str	r2, [r3, #0]
   dbbbc:	4b72      	ldr	r3, [pc, #456]	; (dbd88 <_tzset_unlocked_r+0x2e0>)
   dbbbe:	f8c3 8000 	str.w	r8, [r3]
   dbbc2:	e0d5      	b.n	dbd70 <_tzset_unlocked_r+0x2c8>
   dbbc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbbc6:	f8c5 9004 	str.w	r9, [r5, #4]
   dbbca:	18fd      	adds	r5, r7, r3
   dbbcc:	5cfb      	ldrb	r3, [r7, r3]
   dbbce:	2b2d      	cmp	r3, #45	; 0x2d
   dbbd0:	d103      	bne.n	dbbda <_tzset_unlocked_r+0x132>
   dbbd2:	3501      	adds	r5, #1
   dbbd4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dbbd8:	e003      	b.n	dbbe2 <_tzset_unlocked_r+0x13a>
   dbbda:	2b2b      	cmp	r3, #43	; 0x2b
   dbbdc:	bf08      	it	eq
   dbbde:	3501      	addeq	r5, #1
   dbbe0:	2701      	movs	r7, #1
   dbbe2:	2300      	movs	r3, #0
   dbbe4:	f8ad 301c 	strh.w	r3, [sp, #28]
   dbbe8:	f8ad 301e 	strh.w	r3, [sp, #30]
   dbbec:	f8ad 3020 	strh.w	r3, [sp, #32]
   dbbf0:	930a      	str	r3, [sp, #40]	; 0x28
   dbbf2:	9603      	str	r6, [sp, #12]
   dbbf4:	f8cd a008 	str.w	sl, [sp, #8]
   dbbf8:	9601      	str	r6, [sp, #4]
   dbbfa:	f8cd b000 	str.w	fp, [sp]
   dbbfe:	4633      	mov	r3, r6
   dbc00:	aa07      	add	r2, sp, #28
   dbc02:	4965      	ldr	r1, [pc, #404]	; (dbd98 <_tzset_unlocked_r+0x2f0>)
   dbc04:	4628      	mov	r0, r5
   dbc06:	f7fb f8bd 	bl	d6d84 <siscanf>
   dbc0a:	2800      	cmp	r0, #0
   dbc0c:	dc04      	bgt.n	dbc18 <_tzset_unlocked_r+0x170>
   dbc0e:	6a23      	ldr	r3, [r4, #32]
   dbc10:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dbc14:	63e3      	str	r3, [r4, #60]	; 0x3c
   dbc16:	e00e      	b.n	dbc36 <_tzset_unlocked_r+0x18e>
   dbc18:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dbc1c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dbc20:	213c      	movs	r1, #60	; 0x3c
   dbc22:	fb01 3302 	mla	r3, r1, r2, r3
   dbc26:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dbc2a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dbc2e:	fb01 3302 	mla	r3, r1, r2, r3
   dbc32:	435f      	muls	r7, r3
   dbc34:	63e7      	str	r7, [r4, #60]	; 0x3c
   dbc36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbc38:	4627      	mov	r7, r4
   dbc3a:	441d      	add	r5, r3
   dbc3c:	f04f 0900 	mov.w	r9, #0
   dbc40:	782b      	ldrb	r3, [r5, #0]
   dbc42:	2b2c      	cmp	r3, #44	; 0x2c
   dbc44:	bf08      	it	eq
   dbc46:	3501      	addeq	r5, #1
   dbc48:	f895 8000 	ldrb.w	r8, [r5]
   dbc4c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dbc50:	d126      	bne.n	dbca0 <_tzset_unlocked_r+0x1f8>
   dbc52:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dbc56:	9302      	str	r3, [sp, #8]
   dbc58:	ab09      	add	r3, sp, #36	; 0x24
   dbc5a:	9300      	str	r3, [sp, #0]
   dbc5c:	9603      	str	r6, [sp, #12]
   dbc5e:	9601      	str	r6, [sp, #4]
   dbc60:	4633      	mov	r3, r6
   dbc62:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dbc66:	494d      	ldr	r1, [pc, #308]	; (dbd9c <_tzset_unlocked_r+0x2f4>)
   dbc68:	4628      	mov	r0, r5
   dbc6a:	f7fb f88b 	bl	d6d84 <siscanf>
   dbc6e:	2803      	cmp	r0, #3
   dbc70:	d17e      	bne.n	dbd70 <_tzset_unlocked_r+0x2c8>
   dbc72:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dbc76:	1e4b      	subs	r3, r1, #1
   dbc78:	2b0b      	cmp	r3, #11
   dbc7a:	d879      	bhi.n	dbd70 <_tzset_unlocked_r+0x2c8>
   dbc7c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dbc80:	1e53      	subs	r3, r2, #1
   dbc82:	2b04      	cmp	r3, #4
   dbc84:	d874      	bhi.n	dbd70 <_tzset_unlocked_r+0x2c8>
   dbc86:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dbc8a:	2b06      	cmp	r3, #6
   dbc8c:	d870      	bhi.n	dbd70 <_tzset_unlocked_r+0x2c8>
   dbc8e:	f887 8008 	strb.w	r8, [r7, #8]
   dbc92:	60f9      	str	r1, [r7, #12]
   dbc94:	613a      	str	r2, [r7, #16]
   dbc96:	617b      	str	r3, [r7, #20]
   dbc98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbc9a:	eb05 0803 	add.w	r8, r5, r3
   dbc9e:	e02a      	b.n	dbcf6 <_tzset_unlocked_r+0x24e>
   dbca0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dbca4:	bf06      	itte	eq
   dbca6:	3501      	addeq	r5, #1
   dbca8:	4643      	moveq	r3, r8
   dbcaa:	2344      	movne	r3, #68	; 0x44
   dbcac:	220a      	movs	r2, #10
   dbcae:	a90b      	add	r1, sp, #44	; 0x2c
   dbcb0:	4628      	mov	r0, r5
   dbcb2:	9305      	str	r3, [sp, #20]
   dbcb4:	f7ff fe2e 	bl	db914 <strtoul>
   dbcb8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dbcbc:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dbcc0:	4545      	cmp	r5, r8
   dbcc2:	9b05      	ldr	r3, [sp, #20]
   dbcc4:	d114      	bne.n	dbcf0 <_tzset_unlocked_r+0x248>
   dbcc6:	234d      	movs	r3, #77	; 0x4d
   dbcc8:	f1b9 0f00 	cmp.w	r9, #0
   dbccc:	d107      	bne.n	dbcde <_tzset_unlocked_r+0x236>
   dbcce:	7223      	strb	r3, [r4, #8]
   dbcd0:	2303      	movs	r3, #3
   dbcd2:	60e3      	str	r3, [r4, #12]
   dbcd4:	2302      	movs	r3, #2
   dbcd6:	6123      	str	r3, [r4, #16]
   dbcd8:	f8c4 9014 	str.w	r9, [r4, #20]
   dbcdc:	e00b      	b.n	dbcf6 <_tzset_unlocked_r+0x24e>
   dbcde:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dbce2:	230b      	movs	r3, #11
   dbce4:	62a3      	str	r3, [r4, #40]	; 0x28
   dbce6:	2301      	movs	r3, #1
   dbce8:	62e3      	str	r3, [r4, #44]	; 0x2c
   dbcea:	2300      	movs	r3, #0
   dbcec:	6323      	str	r3, [r4, #48]	; 0x30
   dbcee:	e002      	b.n	dbcf6 <_tzset_unlocked_r+0x24e>
   dbcf0:	b280      	uxth	r0, r0
   dbcf2:	723b      	strb	r3, [r7, #8]
   dbcf4:	6178      	str	r0, [r7, #20]
   dbcf6:	2302      	movs	r3, #2
   dbcf8:	f8ad 301c 	strh.w	r3, [sp, #28]
   dbcfc:	2300      	movs	r3, #0
   dbcfe:	f8ad 301e 	strh.w	r3, [sp, #30]
   dbd02:	f8ad 3020 	strh.w	r3, [sp, #32]
   dbd06:	930a      	str	r3, [sp, #40]	; 0x28
   dbd08:	f898 3000 	ldrb.w	r3, [r8]
   dbd0c:	2b2f      	cmp	r3, #47	; 0x2f
   dbd0e:	d10b      	bne.n	dbd28 <_tzset_unlocked_r+0x280>
   dbd10:	9603      	str	r6, [sp, #12]
   dbd12:	f8cd a008 	str.w	sl, [sp, #8]
   dbd16:	9601      	str	r6, [sp, #4]
   dbd18:	f8cd b000 	str.w	fp, [sp]
   dbd1c:	4633      	mov	r3, r6
   dbd1e:	aa07      	add	r2, sp, #28
   dbd20:	491f      	ldr	r1, [pc, #124]	; (dbda0 <_tzset_unlocked_r+0x2f8>)
   dbd22:	4640      	mov	r0, r8
   dbd24:	f7fb f82e 	bl	d6d84 <siscanf>
   dbd28:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dbd2c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dbd30:	213c      	movs	r1, #60	; 0x3c
   dbd32:	fb01 3302 	mla	r3, r1, r2, r3
   dbd36:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dbd3a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dbd3e:	fb01 3302 	mla	r3, r1, r2, r3
   dbd42:	61bb      	str	r3, [r7, #24]
   dbd44:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dbd46:	f109 0901 	add.w	r9, r9, #1
   dbd4a:	f1b9 0f02 	cmp.w	r9, #2
   dbd4e:	4445      	add	r5, r8
   dbd50:	f107 071c 	add.w	r7, r7, #28
   dbd54:	f47f af74 	bne.w	dbc40 <_tzset_unlocked_r+0x198>
   dbd58:	6860      	ldr	r0, [r4, #4]
   dbd5a:	f7ff fdf5 	bl	db948 <__tzcalc_limits>
   dbd5e:	4b08      	ldr	r3, [pc, #32]	; (dbd80 <_tzset_unlocked_r+0x2d8>)
   dbd60:	6a22      	ldr	r2, [r4, #32]
   dbd62:	601a      	str	r2, [r3, #0]
   dbd64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dbd66:	1a9b      	subs	r3, r3, r2
   dbd68:	4a07      	ldr	r2, [pc, #28]	; (dbd88 <_tzset_unlocked_r+0x2e0>)
   dbd6a:	bf18      	it	ne
   dbd6c:	2301      	movne	r3, #1
   dbd6e:	6013      	str	r3, [r2, #0]
   dbd70:	b00d      	add	sp, #52	; 0x34
   dbd72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbd76:	bf00      	nop
   dbd78:	000ddb34 	.word	0x000ddb34
   dbd7c:	2003e7e0 	.word	0x2003e7e0
   dbd80:	2003e7e8 	.word	0x2003e7e8
   dbd84:	000ddb37 	.word	0x000ddb37
   dbd88:	2003e7e4 	.word	0x2003e7e4
   dbd8c:	2003e018 	.word	0x2003e018
   dbd90:	2003e7d3 	.word	0x2003e7d3
   dbd94:	000ddb3b 	.word	0x000ddb3b
   dbd98:	000ddb5e 	.word	0x000ddb5e
   dbd9c:	000ddb4a 	.word	0x000ddb4a
   dbda0:	000ddb5d 	.word	0x000ddb5d
   dbda4:	2003e7c8 	.word	0x2003e7c8

000dbda8 <abs>:
   dbda8:	2800      	cmp	r0, #0
   dbdaa:	bfb8      	it	lt
   dbdac:	4240      	neglt	r0, r0
   dbdae:	4770      	bx	lr

000dbdb0 <div>:
   dbdb0:	2900      	cmp	r1, #0
   dbdb2:	b510      	push	{r4, lr}
   dbdb4:	fb91 f4f2 	sdiv	r4, r1, r2
   dbdb8:	fb02 1314 	mls	r3, r2, r4, r1
   dbdbc:	db04      	blt.n	dbdc8 <div+0x18>
   dbdbe:	2b00      	cmp	r3, #0
   dbdc0:	da07      	bge.n	dbdd2 <div+0x22>
   dbdc2:	3401      	adds	r4, #1
   dbdc4:	1a9b      	subs	r3, r3, r2
   dbdc6:	e004      	b.n	dbdd2 <div+0x22>
   dbdc8:	2b00      	cmp	r3, #0
   dbdca:	bfc4      	itt	gt
   dbdcc:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   dbdd0:	189b      	addgt	r3, r3, r2
   dbdd2:	6004      	str	r4, [r0, #0]
   dbdd4:	6043      	str	r3, [r0, #4]
   dbdd6:	bd10      	pop	{r4, pc}

000dbdd8 <rshift>:
   dbdd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   dbdda:	6906      	ldr	r6, [r0, #16]
   dbddc:	114b      	asrs	r3, r1, #5
   dbdde:	42b3      	cmp	r3, r6
   dbde0:	f100 0514 	add.w	r5, r0, #20
   dbde4:	da27      	bge.n	dbe36 <rshift+0x5e>
   dbde6:	f011 011f 	ands.w	r1, r1, #31
   dbdea:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   dbdee:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   dbdf2:	d101      	bne.n	dbdf8 <rshift+0x20>
   dbdf4:	4629      	mov	r1, r5
   dbdf6:	e016      	b.n	dbe26 <rshift+0x4e>
   dbdf8:	1d14      	adds	r4, r2, #4
   dbdfa:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   dbdfe:	f1c1 0e20 	rsb	lr, r1, #32
   dbe02:	40ca      	lsrs	r2, r1
   dbe04:	462b      	mov	r3, r5
   dbe06:	42b4      	cmp	r4, r6
   dbe08:	d209      	bcs.n	dbe1e <rshift+0x46>
   dbe0a:	6827      	ldr	r7, [r4, #0]
   dbe0c:	fa07 f70e 	lsl.w	r7, r7, lr
   dbe10:	433a      	orrs	r2, r7
   dbe12:	f843 2b04 	str.w	r2, [r3], #4
   dbe16:	f854 2b04 	ldr.w	r2, [r4], #4
   dbe1a:	40ca      	lsrs	r2, r1
   dbe1c:	e7f3      	b.n	dbe06 <rshift+0x2e>
   dbe1e:	601a      	str	r2, [r3, #0]
   dbe20:	b152      	cbz	r2, dbe38 <rshift+0x60>
   dbe22:	3304      	adds	r3, #4
   dbe24:	e008      	b.n	dbe38 <rshift+0x60>
   dbe26:	42b2      	cmp	r2, r6
   dbe28:	460b      	mov	r3, r1
   dbe2a:	d205      	bcs.n	dbe38 <rshift+0x60>
   dbe2c:	f852 3b04 	ldr.w	r3, [r2], #4
   dbe30:	f841 3b04 	str.w	r3, [r1], #4
   dbe34:	e7f7      	b.n	dbe26 <rshift+0x4e>
   dbe36:	462b      	mov	r3, r5
   dbe38:	1b5b      	subs	r3, r3, r5
   dbe3a:	109b      	asrs	r3, r3, #2
   dbe3c:	6103      	str	r3, [r0, #16]
   dbe3e:	b903      	cbnz	r3, dbe42 <rshift+0x6a>
   dbe40:	6143      	str	r3, [r0, #20]
   dbe42:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dbe44 <__hexdig_fun>:
   dbe44:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dbe48:	2b09      	cmp	r3, #9
   dbe4a:	d801      	bhi.n	dbe50 <__hexdig_fun+0xc>
   dbe4c:	3820      	subs	r0, #32
   dbe4e:	e00a      	b.n	dbe66 <__hexdig_fun+0x22>
   dbe50:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dbe54:	2b05      	cmp	r3, #5
   dbe56:	d801      	bhi.n	dbe5c <__hexdig_fun+0x18>
   dbe58:	3847      	subs	r0, #71	; 0x47
   dbe5a:	e004      	b.n	dbe66 <__hexdig_fun+0x22>
   dbe5c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dbe60:	2b05      	cmp	r3, #5
   dbe62:	d802      	bhi.n	dbe6a <__hexdig_fun+0x26>
   dbe64:	3827      	subs	r0, #39	; 0x27
   dbe66:	b2c0      	uxtb	r0, r0
   dbe68:	4770      	bx	lr
   dbe6a:	2000      	movs	r0, #0
   dbe6c:	4770      	bx	lr

000dbe6e <__gethex>:
   dbe6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbe72:	b08b      	sub	sp, #44	; 0x2c
   dbe74:	468a      	mov	sl, r1
   dbe76:	4690      	mov	r8, r2
   dbe78:	9306      	str	r3, [sp, #24]
   dbe7a:	9002      	str	r0, [sp, #8]
   dbe7c:	f7fd fdfe 	bl	d9a7c <_localeconv_r>
   dbe80:	6803      	ldr	r3, [r0, #0]
   dbe82:	9303      	str	r3, [sp, #12]
   dbe84:	4618      	mov	r0, r3
   dbe86:	f7fe fdc9 	bl	daa1c <strlen>
   dbe8a:	9b03      	ldr	r3, [sp, #12]
   dbe8c:	9001      	str	r0, [sp, #4]
   dbe8e:	4403      	add	r3, r0
   dbe90:	f04f 0b00 	mov.w	fp, #0
   dbe94:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dbe98:	9307      	str	r3, [sp, #28]
   dbe9a:	f8da 3000 	ldr.w	r3, [sl]
   dbe9e:	3302      	adds	r3, #2
   dbea0:	461f      	mov	r7, r3
   dbea2:	f813 0b01 	ldrb.w	r0, [r3], #1
   dbea6:	2830      	cmp	r0, #48	; 0x30
   dbea8:	d102      	bne.n	dbeb0 <__gethex+0x42>
   dbeaa:	f10b 0b01 	add.w	fp, fp, #1
   dbeae:	e7f7      	b.n	dbea0 <__gethex+0x32>
   dbeb0:	f7ff ffc8 	bl	dbe44 <__hexdig_fun>
   dbeb4:	4604      	mov	r4, r0
   dbeb6:	b9e0      	cbnz	r0, dbef2 <__gethex+0x84>
   dbeb8:	9a01      	ldr	r2, [sp, #4]
   dbeba:	9903      	ldr	r1, [sp, #12]
   dbebc:	4638      	mov	r0, r7
   dbebe:	f7fe fdb5 	bl	daa2c <strncmp>
   dbec2:	2800      	cmp	r0, #0
   dbec4:	d134      	bne.n	dbf30 <__gethex+0xc2>
   dbec6:	9b01      	ldr	r3, [sp, #4]
   dbec8:	5cf8      	ldrb	r0, [r7, r3]
   dbeca:	18fe      	adds	r6, r7, r3
   dbecc:	f7ff ffba 	bl	dbe44 <__hexdig_fun>
   dbed0:	b380      	cbz	r0, dbf34 <__gethex+0xc6>
   dbed2:	4633      	mov	r3, r6
   dbed4:	7818      	ldrb	r0, [r3, #0]
   dbed6:	2830      	cmp	r0, #48	; 0x30
   dbed8:	461f      	mov	r7, r3
   dbeda:	f103 0301 	add.w	r3, r3, #1
   dbede:	d0f9      	beq.n	dbed4 <__gethex+0x66>
   dbee0:	f7ff ffb0 	bl	dbe44 <__hexdig_fun>
   dbee4:	fab0 f580 	clz	r5, r0
   dbee8:	096d      	lsrs	r5, r5, #5
   dbeea:	4634      	mov	r4, r6
   dbeec:	f04f 0b01 	mov.w	fp, #1
   dbef0:	e001      	b.n	dbef6 <__gethex+0x88>
   dbef2:	2500      	movs	r5, #0
   dbef4:	462c      	mov	r4, r5
   dbef6:	463a      	mov	r2, r7
   dbef8:	4616      	mov	r6, r2
   dbefa:	3201      	adds	r2, #1
   dbefc:	7830      	ldrb	r0, [r6, #0]
   dbefe:	f7ff ffa1 	bl	dbe44 <__hexdig_fun>
   dbf02:	2800      	cmp	r0, #0
   dbf04:	d1f8      	bne.n	dbef8 <__gethex+0x8a>
   dbf06:	9a01      	ldr	r2, [sp, #4]
   dbf08:	9903      	ldr	r1, [sp, #12]
   dbf0a:	4630      	mov	r0, r6
   dbf0c:	f7fe fd8e 	bl	daa2c <strncmp>
   dbf10:	b950      	cbnz	r0, dbf28 <__gethex+0xba>
   dbf12:	b954      	cbnz	r4, dbf2a <__gethex+0xbc>
   dbf14:	9b01      	ldr	r3, [sp, #4]
   dbf16:	18f4      	adds	r4, r6, r3
   dbf18:	4622      	mov	r2, r4
   dbf1a:	4616      	mov	r6, r2
   dbf1c:	3201      	adds	r2, #1
   dbf1e:	7830      	ldrb	r0, [r6, #0]
   dbf20:	f7ff ff90 	bl	dbe44 <__hexdig_fun>
   dbf24:	2800      	cmp	r0, #0
   dbf26:	d1f8      	bne.n	dbf1a <__gethex+0xac>
   dbf28:	b134      	cbz	r4, dbf38 <__gethex+0xca>
   dbf2a:	1ba4      	subs	r4, r4, r6
   dbf2c:	00a4      	lsls	r4, r4, #2
   dbf2e:	e003      	b.n	dbf38 <__gethex+0xca>
   dbf30:	463e      	mov	r6, r7
   dbf32:	e000      	b.n	dbf36 <__gethex+0xc8>
   dbf34:	4604      	mov	r4, r0
   dbf36:	2501      	movs	r5, #1
   dbf38:	7833      	ldrb	r3, [r6, #0]
   dbf3a:	2b50      	cmp	r3, #80	; 0x50
   dbf3c:	d001      	beq.n	dbf42 <__gethex+0xd4>
   dbf3e:	2b70      	cmp	r3, #112	; 0x70
   dbf40:	d12a      	bne.n	dbf98 <__gethex+0x12a>
   dbf42:	7873      	ldrb	r3, [r6, #1]
   dbf44:	2b2b      	cmp	r3, #43	; 0x2b
   dbf46:	d008      	beq.n	dbf5a <__gethex+0xec>
   dbf48:	2b2d      	cmp	r3, #45	; 0x2d
   dbf4a:	d003      	beq.n	dbf54 <__gethex+0xe6>
   dbf4c:	1c71      	adds	r1, r6, #1
   dbf4e:	f04f 0900 	mov.w	r9, #0
   dbf52:	e005      	b.n	dbf60 <__gethex+0xf2>
   dbf54:	f04f 0901 	mov.w	r9, #1
   dbf58:	e001      	b.n	dbf5e <__gethex+0xf0>
   dbf5a:	f04f 0900 	mov.w	r9, #0
   dbf5e:	1cb1      	adds	r1, r6, #2
   dbf60:	7808      	ldrb	r0, [r1, #0]
   dbf62:	f7ff ff6f 	bl	dbe44 <__hexdig_fun>
   dbf66:	1e43      	subs	r3, r0, #1
   dbf68:	b2db      	uxtb	r3, r3
   dbf6a:	2b18      	cmp	r3, #24
   dbf6c:	d814      	bhi.n	dbf98 <__gethex+0x12a>
   dbf6e:	f1a0 0210 	sub.w	r2, r0, #16
   dbf72:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dbf76:	f7ff ff65 	bl	dbe44 <__hexdig_fun>
   dbf7a:	1e43      	subs	r3, r0, #1
   dbf7c:	b2db      	uxtb	r3, r3
   dbf7e:	2b18      	cmp	r3, #24
   dbf80:	d804      	bhi.n	dbf8c <__gethex+0x11e>
   dbf82:	230a      	movs	r3, #10
   dbf84:	fb03 0202 	mla	r2, r3, r2, r0
   dbf88:	3a10      	subs	r2, #16
   dbf8a:	e7f2      	b.n	dbf72 <__gethex+0x104>
   dbf8c:	f1b9 0f00 	cmp.w	r9, #0
   dbf90:	d000      	beq.n	dbf94 <__gethex+0x126>
   dbf92:	4252      	negs	r2, r2
   dbf94:	4414      	add	r4, r2
   dbf96:	e000      	b.n	dbf9a <__gethex+0x12c>
   dbf98:	4631      	mov	r1, r6
   dbf9a:	f8ca 1000 	str.w	r1, [sl]
   dbf9e:	b12d      	cbz	r5, dbfac <__gethex+0x13e>
   dbfa0:	f1bb 0f00 	cmp.w	fp, #0
   dbfa4:	bf14      	ite	ne
   dbfa6:	2000      	movne	r0, #0
   dbfa8:	2006      	moveq	r0, #6
   dbfaa:	e17c      	b.n	dc2a6 <__gethex+0x438>
   dbfac:	1bf3      	subs	r3, r6, r7
   dbfae:	3b01      	subs	r3, #1
   dbfb0:	4629      	mov	r1, r5
   dbfb2:	2b07      	cmp	r3, #7
   dbfb4:	dd02      	ble.n	dbfbc <__gethex+0x14e>
   dbfb6:	3101      	adds	r1, #1
   dbfb8:	105b      	asrs	r3, r3, #1
   dbfba:	e7fa      	b.n	dbfb2 <__gethex+0x144>
   dbfbc:	9802      	ldr	r0, [sp, #8]
   dbfbe:	f000 fa75 	bl	dc4ac <_Balloc>
   dbfc2:	9b01      	ldr	r3, [sp, #4]
   dbfc4:	f100 0a14 	add.w	sl, r0, #20
   dbfc8:	f04f 0900 	mov.w	r9, #0
   dbfcc:	f1c3 0301 	rsb	r3, r3, #1
   dbfd0:	4605      	mov	r5, r0
   dbfd2:	f8cd a010 	str.w	sl, [sp, #16]
   dbfd6:	46cb      	mov	fp, r9
   dbfd8:	9308      	str	r3, [sp, #32]
   dbfda:	42b7      	cmp	r7, r6
   dbfdc:	d22f      	bcs.n	dc03e <__gethex+0x1d0>
   dbfde:	1e73      	subs	r3, r6, #1
   dbfe0:	9305      	str	r3, [sp, #20]
   dbfe2:	9a07      	ldr	r2, [sp, #28]
   dbfe4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dbfe8:	4293      	cmp	r3, r2
   dbfea:	d00b      	beq.n	dc004 <__gethex+0x196>
   dbfec:	f1bb 0f20 	cmp.w	fp, #32
   dbff0:	d116      	bne.n	dc020 <__gethex+0x1b2>
   dbff2:	9b04      	ldr	r3, [sp, #16]
   dbff4:	f8c3 9000 	str.w	r9, [r3]
   dbff8:	3304      	adds	r3, #4
   dbffa:	f04f 0900 	mov.w	r9, #0
   dbffe:	9304      	str	r3, [sp, #16]
   dc000:	46cb      	mov	fp, r9
   dc002:	e00d      	b.n	dc020 <__gethex+0x1b2>
   dc004:	9b05      	ldr	r3, [sp, #20]
   dc006:	9a08      	ldr	r2, [sp, #32]
   dc008:	4413      	add	r3, r2
   dc00a:	429f      	cmp	r7, r3
   dc00c:	d8ee      	bhi.n	dbfec <__gethex+0x17e>
   dc00e:	4618      	mov	r0, r3
   dc010:	9a01      	ldr	r2, [sp, #4]
   dc012:	9903      	ldr	r1, [sp, #12]
   dc014:	9309      	str	r3, [sp, #36]	; 0x24
   dc016:	f7fe fd09 	bl	daa2c <strncmp>
   dc01a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc01c:	b168      	cbz	r0, dc03a <__gethex+0x1cc>
   dc01e:	e7e5      	b.n	dbfec <__gethex+0x17e>
   dc020:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dc024:	f7ff ff0e 	bl	dbe44 <__hexdig_fun>
   dc028:	f000 000f 	and.w	r0, r0, #15
   dc02c:	fa00 f00b 	lsl.w	r0, r0, fp
   dc030:	9b05      	ldr	r3, [sp, #20]
   dc032:	ea49 0900 	orr.w	r9, r9, r0
   dc036:	f10b 0b04 	add.w	fp, fp, #4
   dc03a:	461e      	mov	r6, r3
   dc03c:	e7cd      	b.n	dbfda <__gethex+0x16c>
   dc03e:	9804      	ldr	r0, [sp, #16]
   dc040:	f840 9b04 	str.w	r9, [r0], #4
   dc044:	ebca 0000 	rsb	r0, sl, r0
   dc048:	1080      	asrs	r0, r0, #2
   dc04a:	6128      	str	r0, [r5, #16]
   dc04c:	0147      	lsls	r7, r0, #5
   dc04e:	4648      	mov	r0, r9
   dc050:	f000 faf1 	bl	dc636 <__hi0bits>
   dc054:	f8d8 6000 	ldr.w	r6, [r8]
   dc058:	1a38      	subs	r0, r7, r0
   dc05a:	42b0      	cmp	r0, r6
   dc05c:	dd26      	ble.n	dc0ac <__gethex+0x23e>
   dc05e:	1b87      	subs	r7, r0, r6
   dc060:	4639      	mov	r1, r7
   dc062:	4628      	mov	r0, r5
   dc064:	f000 fdef 	bl	dcc46 <__any_on>
   dc068:	b1c8      	cbz	r0, dc09e <__gethex+0x230>
   dc06a:	1e7b      	subs	r3, r7, #1
   dc06c:	1159      	asrs	r1, r3, #5
   dc06e:	f003 021f 	and.w	r2, r3, #31
   dc072:	f04f 0901 	mov.w	r9, #1
   dc076:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   dc07a:	fa09 f202 	lsl.w	r2, r9, r2
   dc07e:	420a      	tst	r2, r1
   dc080:	d00e      	beq.n	dc0a0 <__gethex+0x232>
   dc082:	454b      	cmp	r3, r9
   dc084:	dc02      	bgt.n	dc08c <__gethex+0x21e>
   dc086:	f04f 0902 	mov.w	r9, #2
   dc08a:	e009      	b.n	dc0a0 <__gethex+0x232>
   dc08c:	1eb9      	subs	r1, r7, #2
   dc08e:	4628      	mov	r0, r5
   dc090:	f000 fdd9 	bl	dcc46 <__any_on>
   dc094:	2800      	cmp	r0, #0
   dc096:	d0f6      	beq.n	dc086 <__gethex+0x218>
   dc098:	f04f 0903 	mov.w	r9, #3
   dc09c:	e000      	b.n	dc0a0 <__gethex+0x232>
   dc09e:	4681      	mov	r9, r0
   dc0a0:	4639      	mov	r1, r7
   dc0a2:	4628      	mov	r0, r5
   dc0a4:	f7ff fe98 	bl	dbdd8 <rshift>
   dc0a8:	443c      	add	r4, r7
   dc0aa:	e00c      	b.n	dc0c6 <__gethex+0x258>
   dc0ac:	da09      	bge.n	dc0c2 <__gethex+0x254>
   dc0ae:	1a37      	subs	r7, r6, r0
   dc0b0:	4629      	mov	r1, r5
   dc0b2:	463a      	mov	r2, r7
   dc0b4:	9802      	ldr	r0, [sp, #8]
   dc0b6:	f000 fbf3 	bl	dc8a0 <__lshift>
   dc0ba:	1be4      	subs	r4, r4, r7
   dc0bc:	4605      	mov	r5, r0
   dc0be:	f100 0a14 	add.w	sl, r0, #20
   dc0c2:	f04f 0900 	mov.w	r9, #0
   dc0c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc0ca:	429c      	cmp	r4, r3
   dc0cc:	dd08      	ble.n	dc0e0 <__gethex+0x272>
   dc0ce:	9802      	ldr	r0, [sp, #8]
   dc0d0:	4629      	mov	r1, r5
   dc0d2:	f000 fa20 	bl	dc516 <_Bfree>
   dc0d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc0d8:	2300      	movs	r3, #0
   dc0da:	6013      	str	r3, [r2, #0]
   dc0dc:	20a3      	movs	r0, #163	; 0xa3
   dc0de:	e0e2      	b.n	dc2a6 <__gethex+0x438>
   dc0e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dc0e4:	4284      	cmp	r4, r0
   dc0e6:	da53      	bge.n	dc190 <__gethex+0x322>
   dc0e8:	1b04      	subs	r4, r0, r4
   dc0ea:	42a6      	cmp	r6, r4
   dc0ec:	dc2e      	bgt.n	dc14c <__gethex+0x2de>
   dc0ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc0f2:	2b02      	cmp	r3, #2
   dc0f4:	d01a      	beq.n	dc12c <__gethex+0x2be>
   dc0f6:	2b03      	cmp	r3, #3
   dc0f8:	d01c      	beq.n	dc134 <__gethex+0x2c6>
   dc0fa:	2b01      	cmp	r3, #1
   dc0fc:	d11d      	bne.n	dc13a <__gethex+0x2cc>
   dc0fe:	42a6      	cmp	r6, r4
   dc100:	d11b      	bne.n	dc13a <__gethex+0x2cc>
   dc102:	2e01      	cmp	r6, #1
   dc104:	dc0b      	bgt.n	dc11e <__gethex+0x2b0>
   dc106:	9a06      	ldr	r2, [sp, #24]
   dc108:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dc10c:	6013      	str	r3, [r2, #0]
   dc10e:	2301      	movs	r3, #1
   dc110:	612b      	str	r3, [r5, #16]
   dc112:	f8ca 3000 	str.w	r3, [sl]
   dc116:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc118:	2062      	movs	r0, #98	; 0x62
   dc11a:	601d      	str	r5, [r3, #0]
   dc11c:	e0c3      	b.n	dc2a6 <__gethex+0x438>
   dc11e:	1e71      	subs	r1, r6, #1
   dc120:	4628      	mov	r0, r5
   dc122:	f000 fd90 	bl	dcc46 <__any_on>
   dc126:	2800      	cmp	r0, #0
   dc128:	d1ed      	bne.n	dc106 <__gethex+0x298>
   dc12a:	e006      	b.n	dc13a <__gethex+0x2cc>
   dc12c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc12e:	2b00      	cmp	r3, #0
   dc130:	d0e9      	beq.n	dc106 <__gethex+0x298>
   dc132:	e002      	b.n	dc13a <__gethex+0x2cc>
   dc134:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc136:	2b00      	cmp	r3, #0
   dc138:	d1e5      	bne.n	dc106 <__gethex+0x298>
   dc13a:	9802      	ldr	r0, [sp, #8]
   dc13c:	4629      	mov	r1, r5
   dc13e:	f000 f9ea 	bl	dc516 <_Bfree>
   dc142:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc144:	2300      	movs	r3, #0
   dc146:	6013      	str	r3, [r2, #0]
   dc148:	2050      	movs	r0, #80	; 0x50
   dc14a:	e0ac      	b.n	dc2a6 <__gethex+0x438>
   dc14c:	1e67      	subs	r7, r4, #1
   dc14e:	f1b9 0f00 	cmp.w	r9, #0
   dc152:	d106      	bne.n	dc162 <__gethex+0x2f4>
   dc154:	b13f      	cbz	r7, dc166 <__gethex+0x2f8>
   dc156:	4639      	mov	r1, r7
   dc158:	4628      	mov	r0, r5
   dc15a:	f000 fd74 	bl	dcc46 <__any_on>
   dc15e:	4681      	mov	r9, r0
   dc160:	e001      	b.n	dc166 <__gethex+0x2f8>
   dc162:	f04f 0901 	mov.w	r9, #1
   dc166:	117a      	asrs	r2, r7, #5
   dc168:	2301      	movs	r3, #1
   dc16a:	f007 071f 	and.w	r7, r7, #31
   dc16e:	fa03 f707 	lsl.w	r7, r3, r7
   dc172:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   dc176:	4621      	mov	r1, r4
   dc178:	421f      	tst	r7, r3
   dc17a:	4628      	mov	r0, r5
   dc17c:	bf18      	it	ne
   dc17e:	f049 0902 	orrne.w	r9, r9, #2
   dc182:	1b36      	subs	r6, r6, r4
   dc184:	f7ff fe28 	bl	dbdd8 <rshift>
   dc188:	2702      	movs	r7, #2
   dc18a:	f8d8 4004 	ldr.w	r4, [r8, #4]
   dc18e:	e000      	b.n	dc192 <__gethex+0x324>
   dc190:	2701      	movs	r7, #1
   dc192:	f1b9 0f00 	cmp.w	r9, #0
   dc196:	f000 8081 	beq.w	dc29c <__gethex+0x42e>
   dc19a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc19e:	2b02      	cmp	r3, #2
   dc1a0:	d00e      	beq.n	dc1c0 <__gethex+0x352>
   dc1a2:	2b03      	cmp	r3, #3
   dc1a4:	d010      	beq.n	dc1c8 <__gethex+0x35a>
   dc1a6:	2b01      	cmp	r3, #1
   dc1a8:	d176      	bne.n	dc298 <__gethex+0x42a>
   dc1aa:	f019 0f02 	tst.w	r9, #2
   dc1ae:	d073      	beq.n	dc298 <__gethex+0x42a>
   dc1b0:	f8da 0000 	ldr.w	r0, [sl]
   dc1b4:	ea49 0900 	orr.w	r9, r9, r0
   dc1b8:	f019 0f01 	tst.w	r9, #1
   dc1bc:	d107      	bne.n	dc1ce <__gethex+0x360>
   dc1be:	e06b      	b.n	dc298 <__gethex+0x42a>
   dc1c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc1c2:	f1c3 0301 	rsb	r3, r3, #1
   dc1c6:	9315      	str	r3, [sp, #84]	; 0x54
   dc1c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc1ca:	2b00      	cmp	r3, #0
   dc1cc:	d064      	beq.n	dc298 <__gethex+0x42a>
   dc1ce:	f8d5 a010 	ldr.w	sl, [r5, #16]
   dc1d2:	f105 0314 	add.w	r3, r5, #20
   dc1d6:	ea4f 098a 	mov.w	r9, sl, lsl #2
   dc1da:	eb03 0109 	add.w	r1, r3, r9
   dc1de:	2000      	movs	r0, #0
   dc1e0:	681a      	ldr	r2, [r3, #0]
   dc1e2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dc1e6:	d002      	beq.n	dc1ee <__gethex+0x380>
   dc1e8:	3201      	adds	r2, #1
   dc1ea:	601a      	str	r2, [r3, #0]
   dc1ec:	e020      	b.n	dc230 <__gethex+0x3c2>
   dc1ee:	f843 0b04 	str.w	r0, [r3], #4
   dc1f2:	4299      	cmp	r1, r3
   dc1f4:	d8f4      	bhi.n	dc1e0 <__gethex+0x372>
   dc1f6:	68ab      	ldr	r3, [r5, #8]
   dc1f8:	459a      	cmp	sl, r3
   dc1fa:	db12      	blt.n	dc222 <__gethex+0x3b4>
   dc1fc:	6869      	ldr	r1, [r5, #4]
   dc1fe:	9802      	ldr	r0, [sp, #8]
   dc200:	3101      	adds	r1, #1
   dc202:	f000 f953 	bl	dc4ac <_Balloc>
   dc206:	692a      	ldr	r2, [r5, #16]
   dc208:	3202      	adds	r2, #2
   dc20a:	f105 010c 	add.w	r1, r5, #12
   dc20e:	4683      	mov	fp, r0
   dc210:	0092      	lsls	r2, r2, #2
   dc212:	300c      	adds	r0, #12
   dc214:	f7fd fc36 	bl	d9a84 <memcpy>
   dc218:	4629      	mov	r1, r5
   dc21a:	9802      	ldr	r0, [sp, #8]
   dc21c:	f000 f97b 	bl	dc516 <_Bfree>
   dc220:	465d      	mov	r5, fp
   dc222:	692b      	ldr	r3, [r5, #16]
   dc224:	1c5a      	adds	r2, r3, #1
   dc226:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   dc22a:	612a      	str	r2, [r5, #16]
   dc22c:	2201      	movs	r2, #1
   dc22e:	615a      	str	r2, [r3, #20]
   dc230:	2f02      	cmp	r7, #2
   dc232:	f105 0214 	add.w	r2, r5, #20
   dc236:	d111      	bne.n	dc25c <__gethex+0x3ee>
   dc238:	f8d8 3000 	ldr.w	r3, [r8]
   dc23c:	3b01      	subs	r3, #1
   dc23e:	429e      	cmp	r6, r3
   dc240:	d127      	bne.n	dc292 <__gethex+0x424>
   dc242:	1171      	asrs	r1, r6, #5
   dc244:	2301      	movs	r3, #1
   dc246:	f006 061f 	and.w	r6, r6, #31
   dc24a:	fa03 f606 	lsl.w	r6, r3, r6
   dc24e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   dc252:	421e      	tst	r6, r3
   dc254:	bf0c      	ite	eq
   dc256:	2702      	moveq	r7, #2
   dc258:	2701      	movne	r7, #1
   dc25a:	e01a      	b.n	dc292 <__gethex+0x424>
   dc25c:	692b      	ldr	r3, [r5, #16]
   dc25e:	459a      	cmp	sl, r3
   dc260:	da0a      	bge.n	dc278 <__gethex+0x40a>
   dc262:	2101      	movs	r1, #1
   dc264:	4628      	mov	r0, r5
   dc266:	f7ff fdb7 	bl	dbdd8 <rshift>
   dc26a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc26e:	3401      	adds	r4, #1
   dc270:	429c      	cmp	r4, r3
   dc272:	f73f af2c 	bgt.w	dc0ce <__gethex+0x260>
   dc276:	e00b      	b.n	dc290 <__gethex+0x422>
   dc278:	f016 061f 	ands.w	r6, r6, #31
   dc27c:	d008      	beq.n	dc290 <__gethex+0x422>
   dc27e:	4491      	add	r9, r2
   dc280:	f1c6 0620 	rsb	r6, r6, #32
   dc284:	f859 0c04 	ldr.w	r0, [r9, #-4]
   dc288:	f000 f9d5 	bl	dc636 <__hi0bits>
   dc28c:	42b0      	cmp	r0, r6
   dc28e:	dbe8      	blt.n	dc262 <__gethex+0x3f4>
   dc290:	2701      	movs	r7, #1
   dc292:	f047 0720 	orr.w	r7, r7, #32
   dc296:	e001      	b.n	dc29c <__gethex+0x42e>
   dc298:	f047 0710 	orr.w	r7, r7, #16
   dc29c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc29e:	601d      	str	r5, [r3, #0]
   dc2a0:	9b06      	ldr	r3, [sp, #24]
   dc2a2:	4638      	mov	r0, r7
   dc2a4:	601c      	str	r4, [r3, #0]
   dc2a6:	b00b      	add	sp, #44	; 0x2c
   dc2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dc2ac <L_shift>:
   dc2ac:	f1c2 0208 	rsb	r2, r2, #8
   dc2b0:	0092      	lsls	r2, r2, #2
   dc2b2:	b570      	push	{r4, r5, r6, lr}
   dc2b4:	f1c2 0620 	rsb	r6, r2, #32
   dc2b8:	6843      	ldr	r3, [r0, #4]
   dc2ba:	6805      	ldr	r5, [r0, #0]
   dc2bc:	fa03 f406 	lsl.w	r4, r3, r6
   dc2c0:	432c      	orrs	r4, r5
   dc2c2:	40d3      	lsrs	r3, r2
   dc2c4:	6004      	str	r4, [r0, #0]
   dc2c6:	f840 3f04 	str.w	r3, [r0, #4]!
   dc2ca:	4288      	cmp	r0, r1
   dc2cc:	d3f4      	bcc.n	dc2b8 <L_shift+0xc>
   dc2ce:	bd70      	pop	{r4, r5, r6, pc}

000dc2d0 <__match>:
   dc2d0:	b530      	push	{r4, r5, lr}
   dc2d2:	6803      	ldr	r3, [r0, #0]
   dc2d4:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc2d8:	3301      	adds	r3, #1
   dc2da:	b14c      	cbz	r4, dc2f0 <__match+0x20>
   dc2dc:	781a      	ldrb	r2, [r3, #0]
   dc2de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dc2e2:	2d19      	cmp	r5, #25
   dc2e4:	bf98      	it	ls
   dc2e6:	3220      	addls	r2, #32
   dc2e8:	42a2      	cmp	r2, r4
   dc2ea:	d0f3      	beq.n	dc2d4 <__match+0x4>
   dc2ec:	2000      	movs	r0, #0
   dc2ee:	bd30      	pop	{r4, r5, pc}
   dc2f0:	6003      	str	r3, [r0, #0]
   dc2f2:	2001      	movs	r0, #1
   dc2f4:	bd30      	pop	{r4, r5, pc}

000dc2f6 <__hexnan>:
   dc2f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc2fa:	680b      	ldr	r3, [r1, #0]
   dc2fc:	f8d0 b000 	ldr.w	fp, [r0]
   dc300:	115e      	asrs	r6, r3, #5
   dc302:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dc306:	f013 031f 	ands.w	r3, r3, #31
   dc30a:	b085      	sub	sp, #20
   dc30c:	bf18      	it	ne
   dc30e:	3604      	addne	r6, #4
   dc310:	1f35      	subs	r5, r6, #4
   dc312:	4617      	mov	r7, r2
   dc314:	2200      	movs	r2, #0
   dc316:	4682      	mov	sl, r0
   dc318:	9301      	str	r3, [sp, #4]
   dc31a:	f846 2c04 	str.w	r2, [r6, #-4]
   dc31e:	46a8      	mov	r8, r5
   dc320:	462c      	mov	r4, r5
   dc322:	9200      	str	r2, [sp, #0]
   dc324:	4691      	mov	r9, r2
   dc326:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   dc32a:	2900      	cmp	r1, #0
   dc32c:	d03c      	beq.n	dc3a8 <__hexnan+0xb2>
   dc32e:	4608      	mov	r0, r1
   dc330:	9203      	str	r2, [sp, #12]
   dc332:	9102      	str	r1, [sp, #8]
   dc334:	f7ff fd86 	bl	dbe44 <__hexdig_fun>
   dc338:	9a03      	ldr	r2, [sp, #12]
   dc33a:	bb00      	cbnz	r0, dc37e <__hexnan+0x88>
   dc33c:	9902      	ldr	r1, [sp, #8]
   dc33e:	2920      	cmp	r1, #32
   dc340:	d816      	bhi.n	dc370 <__hexnan+0x7a>
   dc342:	9b00      	ldr	r3, [sp, #0]
   dc344:	4599      	cmp	r9, r3
   dc346:	ddee      	ble.n	dc326 <__hexnan+0x30>
   dc348:	4544      	cmp	r4, r8
   dc34a:	d205      	bcs.n	dc358 <__hexnan+0x62>
   dc34c:	2a07      	cmp	r2, #7
   dc34e:	dc03      	bgt.n	dc358 <__hexnan+0x62>
   dc350:	4641      	mov	r1, r8
   dc352:	4620      	mov	r0, r4
   dc354:	f7ff ffaa 	bl	dc2ac <L_shift>
   dc358:	42bc      	cmp	r4, r7
   dc35a:	d923      	bls.n	dc3a4 <__hexnan+0xae>
   dc35c:	2300      	movs	r3, #0
   dc35e:	f1a4 0804 	sub.w	r8, r4, #4
   dc362:	f844 3c04 	str.w	r3, [r4, #-4]
   dc366:	f8cd 9000 	str.w	r9, [sp]
   dc36a:	4644      	mov	r4, r8
   dc36c:	461a      	mov	r2, r3
   dc36e:	e7da      	b.n	dc326 <__hexnan+0x30>
   dc370:	2929      	cmp	r1, #41	; 0x29
   dc372:	d148      	bne.n	dc406 <__hexnan+0x110>
   dc374:	f10b 0301 	add.w	r3, fp, #1
   dc378:	f8ca 3000 	str.w	r3, [sl]
   dc37c:	e014      	b.n	dc3a8 <__hexnan+0xb2>
   dc37e:	3201      	adds	r2, #1
   dc380:	2a08      	cmp	r2, #8
   dc382:	f109 0901 	add.w	r9, r9, #1
   dc386:	dd06      	ble.n	dc396 <__hexnan+0xa0>
   dc388:	42bc      	cmp	r4, r7
   dc38a:	d9cc      	bls.n	dc326 <__hexnan+0x30>
   dc38c:	2300      	movs	r3, #0
   dc38e:	f844 3c04 	str.w	r3, [r4, #-4]
   dc392:	2201      	movs	r2, #1
   dc394:	3c04      	subs	r4, #4
   dc396:	6821      	ldr	r1, [r4, #0]
   dc398:	f000 000f 	and.w	r0, r0, #15
   dc39c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   dc3a0:	6020      	str	r0, [r4, #0]
   dc3a2:	e7c0      	b.n	dc326 <__hexnan+0x30>
   dc3a4:	2208      	movs	r2, #8
   dc3a6:	e7be      	b.n	dc326 <__hexnan+0x30>
   dc3a8:	f1b9 0f00 	cmp.w	r9, #0
   dc3ac:	d02b      	beq.n	dc406 <__hexnan+0x110>
   dc3ae:	4544      	cmp	r4, r8
   dc3b0:	d205      	bcs.n	dc3be <__hexnan+0xc8>
   dc3b2:	2a07      	cmp	r2, #7
   dc3b4:	dc03      	bgt.n	dc3be <__hexnan+0xc8>
   dc3b6:	4641      	mov	r1, r8
   dc3b8:	4620      	mov	r0, r4
   dc3ba:	f7ff ff77 	bl	dc2ac <L_shift>
   dc3be:	42bc      	cmp	r4, r7
   dc3c0:	d90c      	bls.n	dc3dc <__hexnan+0xe6>
   dc3c2:	463b      	mov	r3, r7
   dc3c4:	f854 2b04 	ldr.w	r2, [r4], #4
   dc3c8:	f843 2b04 	str.w	r2, [r3], #4
   dc3cc:	42a5      	cmp	r5, r4
   dc3ce:	d2f9      	bcs.n	dc3c4 <__hexnan+0xce>
   dc3d0:	2200      	movs	r2, #0
   dc3d2:	f843 2b04 	str.w	r2, [r3], #4
   dc3d6:	429d      	cmp	r5, r3
   dc3d8:	d2fb      	bcs.n	dc3d2 <__hexnan+0xdc>
   dc3da:	e00b      	b.n	dc3f4 <__hexnan+0xfe>
   dc3dc:	9b01      	ldr	r3, [sp, #4]
   dc3de:	b14b      	cbz	r3, dc3f4 <__hexnan+0xfe>
   dc3e0:	f1c3 0220 	rsb	r2, r3, #32
   dc3e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dc3e8:	40d3      	lsrs	r3, r2
   dc3ea:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dc3ee:	4013      	ands	r3, r2
   dc3f0:	f846 3c04 	str.w	r3, [r6, #-4]
   dc3f4:	682b      	ldr	r3, [r5, #0]
   dc3f6:	b943      	cbnz	r3, dc40a <__hexnan+0x114>
   dc3f8:	42bd      	cmp	r5, r7
   dc3fa:	d102      	bne.n	dc402 <__hexnan+0x10c>
   dc3fc:	2301      	movs	r3, #1
   dc3fe:	602b      	str	r3, [r5, #0]
   dc400:	e003      	b.n	dc40a <__hexnan+0x114>
   dc402:	3d04      	subs	r5, #4
   dc404:	e7f6      	b.n	dc3f4 <__hexnan+0xfe>
   dc406:	2004      	movs	r0, #4
   dc408:	e000      	b.n	dc40c <__hexnan+0x116>
   dc40a:	2005      	movs	r0, #5
   dc40c:	b005      	add	sp, #20
   dc40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000dc414 <_findenv_r>:
   dc414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc418:	4607      	mov	r7, r0
   dc41a:	468b      	mov	fp, r1
   dc41c:	4690      	mov	r8, r2
   dc41e:	f000 fc49 	bl	dccb4 <__env_lock>
   dc422:	4b19      	ldr	r3, [pc, #100]	; (dc488 <_findenv_r+0x74>)
   dc424:	681d      	ldr	r5, [r3, #0]
   dc426:	469a      	mov	sl, r3
   dc428:	b13d      	cbz	r5, dc43a <_findenv_r+0x26>
   dc42a:	465c      	mov	r4, fp
   dc42c:	4623      	mov	r3, r4
   dc42e:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc432:	b142      	cbz	r2, dc446 <_findenv_r+0x32>
   dc434:	2a3d      	cmp	r2, #61	; 0x3d
   dc436:	461c      	mov	r4, r3
   dc438:	d1f8      	bne.n	dc42c <_findenv_r+0x18>
   dc43a:	4638      	mov	r0, r7
   dc43c:	f000 fc3b 	bl	dccb6 <__env_unlock>
   dc440:	2000      	movs	r0, #0
   dc442:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc446:	ebcb 0404 	rsb	r4, fp, r4
   dc44a:	46a9      	mov	r9, r5
   dc44c:	f859 0b04 	ldr.w	r0, [r9], #4
   dc450:	2800      	cmp	r0, #0
   dc452:	d0f2      	beq.n	dc43a <_findenv_r+0x26>
   dc454:	4622      	mov	r2, r4
   dc456:	4659      	mov	r1, fp
   dc458:	f7fe fae8 	bl	daa2c <strncmp>
   dc45c:	b988      	cbnz	r0, dc482 <_findenv_r+0x6e>
   dc45e:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dc462:	191e      	adds	r6, r3, r4
   dc464:	5d1b      	ldrb	r3, [r3, r4]
   dc466:	2b3d      	cmp	r3, #61	; 0x3d
   dc468:	d10b      	bne.n	dc482 <_findenv_r+0x6e>
   dc46a:	f8da 3000 	ldr.w	r3, [sl]
   dc46e:	1aed      	subs	r5, r5, r3
   dc470:	10ad      	asrs	r5, r5, #2
   dc472:	4638      	mov	r0, r7
   dc474:	f8c8 5000 	str.w	r5, [r8]
   dc478:	f000 fc1d 	bl	dccb6 <__env_unlock>
   dc47c:	1c70      	adds	r0, r6, #1
   dc47e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc482:	464d      	mov	r5, r9
   dc484:	e7e1      	b.n	dc44a <_findenv_r+0x36>
   dc486:	bf00      	nop
   dc488:	2003e060 	.word	0x2003e060

000dc48c <_getenv_r>:
   dc48c:	b507      	push	{r0, r1, r2, lr}
   dc48e:	aa01      	add	r2, sp, #4
   dc490:	f7ff ffc0 	bl	dc414 <_findenv_r>
   dc494:	b003      	add	sp, #12
   dc496:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dc49c <__gettzinfo>:
   dc49c:	4800      	ldr	r0, [pc, #0]	; (dc4a0 <__gettzinfo+0x4>)
   dc49e:	4770      	bx	lr
   dc4a0:	2003e020 	.word	0x2003e020

000dc4a4 <labs>:
   dc4a4:	2800      	cmp	r0, #0
   dc4a6:	bfb8      	it	lt
   dc4a8:	4240      	neglt	r0, r0
   dc4aa:	4770      	bx	lr

000dc4ac <_Balloc>:
   dc4ac:	b570      	push	{r4, r5, r6, lr}
   dc4ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
   dc4b0:	4604      	mov	r4, r0
   dc4b2:	460e      	mov	r6, r1
   dc4b4:	b93d      	cbnz	r5, dc4c6 <_Balloc+0x1a>
   dc4b6:	2010      	movs	r0, #16
   dc4b8:	f7fa fc44 	bl	d6d44 <malloc>
   dc4bc:	6260      	str	r0, [r4, #36]	; 0x24
   dc4be:	6045      	str	r5, [r0, #4]
   dc4c0:	6085      	str	r5, [r0, #8]
   dc4c2:	6005      	str	r5, [r0, #0]
   dc4c4:	60c5      	str	r5, [r0, #12]
   dc4c6:	6a65      	ldr	r5, [r4, #36]	; 0x24
   dc4c8:	68eb      	ldr	r3, [r5, #12]
   dc4ca:	b143      	cbz	r3, dc4de <_Balloc+0x32>
   dc4cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc4ce:	68db      	ldr	r3, [r3, #12]
   dc4d0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   dc4d4:	b178      	cbz	r0, dc4f6 <_Balloc+0x4a>
   dc4d6:	6802      	ldr	r2, [r0, #0]
   dc4d8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   dc4dc:	e017      	b.n	dc50e <_Balloc+0x62>
   dc4de:	2221      	movs	r2, #33	; 0x21
   dc4e0:	2104      	movs	r1, #4
   dc4e2:	4620      	mov	r0, r4
   dc4e4:	f000 fbd1 	bl	dcc8a <_calloc_r>
   dc4e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc4ea:	60e8      	str	r0, [r5, #12]
   dc4ec:	68db      	ldr	r3, [r3, #12]
   dc4ee:	2b00      	cmp	r3, #0
   dc4f0:	d1ec      	bne.n	dc4cc <_Balloc+0x20>
   dc4f2:	2000      	movs	r0, #0
   dc4f4:	bd70      	pop	{r4, r5, r6, pc}
   dc4f6:	2101      	movs	r1, #1
   dc4f8:	fa01 f506 	lsl.w	r5, r1, r6
   dc4fc:	1d6a      	adds	r2, r5, #5
   dc4fe:	0092      	lsls	r2, r2, #2
   dc500:	4620      	mov	r0, r4
   dc502:	f000 fbc2 	bl	dcc8a <_calloc_r>
   dc506:	2800      	cmp	r0, #0
   dc508:	d0f3      	beq.n	dc4f2 <_Balloc+0x46>
   dc50a:	6046      	str	r6, [r0, #4]
   dc50c:	6085      	str	r5, [r0, #8]
   dc50e:	2300      	movs	r3, #0
   dc510:	6103      	str	r3, [r0, #16]
   dc512:	60c3      	str	r3, [r0, #12]
   dc514:	bd70      	pop	{r4, r5, r6, pc}

000dc516 <_Bfree>:
   dc516:	b570      	push	{r4, r5, r6, lr}
   dc518:	6a44      	ldr	r4, [r0, #36]	; 0x24
   dc51a:	4606      	mov	r6, r0
   dc51c:	460d      	mov	r5, r1
   dc51e:	b93c      	cbnz	r4, dc530 <_Bfree+0x1a>
   dc520:	2010      	movs	r0, #16
   dc522:	f7fa fc0f 	bl	d6d44 <malloc>
   dc526:	6270      	str	r0, [r6, #36]	; 0x24
   dc528:	6044      	str	r4, [r0, #4]
   dc52a:	6084      	str	r4, [r0, #8]
   dc52c:	6004      	str	r4, [r0, #0]
   dc52e:	60c4      	str	r4, [r0, #12]
   dc530:	b13d      	cbz	r5, dc542 <_Bfree+0x2c>
   dc532:	6a73      	ldr	r3, [r6, #36]	; 0x24
   dc534:	686a      	ldr	r2, [r5, #4]
   dc536:	68db      	ldr	r3, [r3, #12]
   dc538:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dc53c:	6029      	str	r1, [r5, #0]
   dc53e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   dc542:	bd70      	pop	{r4, r5, r6, pc}

000dc544 <__multadd>:
   dc544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc548:	690d      	ldr	r5, [r1, #16]
   dc54a:	461f      	mov	r7, r3
   dc54c:	4606      	mov	r6, r0
   dc54e:	460c      	mov	r4, r1
   dc550:	f101 0e14 	add.w	lr, r1, #20
   dc554:	2300      	movs	r3, #0
   dc556:	f8de 0000 	ldr.w	r0, [lr]
   dc55a:	b281      	uxth	r1, r0
   dc55c:	fb02 7101 	mla	r1, r2, r1, r7
   dc560:	0c0f      	lsrs	r7, r1, #16
   dc562:	0c00      	lsrs	r0, r0, #16
   dc564:	fb02 7000 	mla	r0, r2, r0, r7
   dc568:	b289      	uxth	r1, r1
   dc56a:	3301      	adds	r3, #1
   dc56c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   dc570:	429d      	cmp	r5, r3
   dc572:	ea4f 4710 	mov.w	r7, r0, lsr #16
   dc576:	f84e 1b04 	str.w	r1, [lr], #4
   dc57a:	dcec      	bgt.n	dc556 <__multadd+0x12>
   dc57c:	b1d7      	cbz	r7, dc5b4 <__multadd+0x70>
   dc57e:	68a3      	ldr	r3, [r4, #8]
   dc580:	429d      	cmp	r5, r3
   dc582:	db12      	blt.n	dc5aa <__multadd+0x66>
   dc584:	6861      	ldr	r1, [r4, #4]
   dc586:	4630      	mov	r0, r6
   dc588:	3101      	adds	r1, #1
   dc58a:	f7ff ff8f 	bl	dc4ac <_Balloc>
   dc58e:	6922      	ldr	r2, [r4, #16]
   dc590:	3202      	adds	r2, #2
   dc592:	f104 010c 	add.w	r1, r4, #12
   dc596:	4680      	mov	r8, r0
   dc598:	0092      	lsls	r2, r2, #2
   dc59a:	300c      	adds	r0, #12
   dc59c:	f7fd fa72 	bl	d9a84 <memcpy>
   dc5a0:	4621      	mov	r1, r4
   dc5a2:	4630      	mov	r0, r6
   dc5a4:	f7ff ffb7 	bl	dc516 <_Bfree>
   dc5a8:	4644      	mov	r4, r8
   dc5aa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   dc5ae:	3501      	adds	r5, #1
   dc5b0:	615f      	str	r7, [r3, #20]
   dc5b2:	6125      	str	r5, [r4, #16]
   dc5b4:	4620      	mov	r0, r4
   dc5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dc5ba <__s2b>:
   dc5ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc5be:	460c      	mov	r4, r1
   dc5c0:	4615      	mov	r5, r2
   dc5c2:	461f      	mov	r7, r3
   dc5c4:	2209      	movs	r2, #9
   dc5c6:	3308      	adds	r3, #8
   dc5c8:	4606      	mov	r6, r0
   dc5ca:	fb93 f3f2 	sdiv	r3, r3, r2
   dc5ce:	2100      	movs	r1, #0
   dc5d0:	2201      	movs	r2, #1
   dc5d2:	429a      	cmp	r2, r3
   dc5d4:	da02      	bge.n	dc5dc <__s2b+0x22>
   dc5d6:	0052      	lsls	r2, r2, #1
   dc5d8:	3101      	adds	r1, #1
   dc5da:	e7fa      	b.n	dc5d2 <__s2b+0x18>
   dc5dc:	4630      	mov	r0, r6
   dc5de:	f7ff ff65 	bl	dc4ac <_Balloc>
   dc5e2:	9b08      	ldr	r3, [sp, #32]
   dc5e4:	6143      	str	r3, [r0, #20]
   dc5e6:	2d09      	cmp	r5, #9
   dc5e8:	f04f 0301 	mov.w	r3, #1
   dc5ec:	6103      	str	r3, [r0, #16]
   dc5ee:	dd11      	ble.n	dc614 <__s2b+0x5a>
   dc5f0:	f104 0809 	add.w	r8, r4, #9
   dc5f4:	46c1      	mov	r9, r8
   dc5f6:	442c      	add	r4, r5
   dc5f8:	f819 3b01 	ldrb.w	r3, [r9], #1
   dc5fc:	4601      	mov	r1, r0
   dc5fe:	3b30      	subs	r3, #48	; 0x30
   dc600:	220a      	movs	r2, #10
   dc602:	4630      	mov	r0, r6
   dc604:	f7ff ff9e 	bl	dc544 <__multadd>
   dc608:	45a1      	cmp	r9, r4
   dc60a:	d1f5      	bne.n	dc5f8 <__s2b+0x3e>
   dc60c:	eb08 0405 	add.w	r4, r8, r5
   dc610:	3c08      	subs	r4, #8
   dc612:	e001      	b.n	dc618 <__s2b+0x5e>
   dc614:	340a      	adds	r4, #10
   dc616:	2509      	movs	r5, #9
   dc618:	1b2d      	subs	r5, r5, r4
   dc61a:	1963      	adds	r3, r4, r5
   dc61c:	429f      	cmp	r7, r3
   dc61e:	dd08      	ble.n	dc632 <__s2b+0x78>
   dc620:	f814 3b01 	ldrb.w	r3, [r4], #1
   dc624:	4601      	mov	r1, r0
   dc626:	3b30      	subs	r3, #48	; 0x30
   dc628:	220a      	movs	r2, #10
   dc62a:	4630      	mov	r0, r6
   dc62c:	f7ff ff8a 	bl	dc544 <__multadd>
   dc630:	e7f3      	b.n	dc61a <__s2b+0x60>
   dc632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dc636 <__hi0bits>:
   dc636:	0c03      	lsrs	r3, r0, #16
   dc638:	041b      	lsls	r3, r3, #16
   dc63a:	b913      	cbnz	r3, dc642 <__hi0bits+0xc>
   dc63c:	0400      	lsls	r0, r0, #16
   dc63e:	2310      	movs	r3, #16
   dc640:	e000      	b.n	dc644 <__hi0bits+0xe>
   dc642:	2300      	movs	r3, #0
   dc644:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dc648:	bf04      	itt	eq
   dc64a:	0200      	lsleq	r0, r0, #8
   dc64c:	3308      	addeq	r3, #8
   dc64e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dc652:	bf04      	itt	eq
   dc654:	0100      	lsleq	r0, r0, #4
   dc656:	3304      	addeq	r3, #4
   dc658:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dc65c:	bf04      	itt	eq
   dc65e:	0080      	lsleq	r0, r0, #2
   dc660:	3302      	addeq	r3, #2
   dc662:	2800      	cmp	r0, #0
   dc664:	db03      	blt.n	dc66e <__hi0bits+0x38>
   dc666:	0042      	lsls	r2, r0, #1
   dc668:	d503      	bpl.n	dc672 <__hi0bits+0x3c>
   dc66a:	1c58      	adds	r0, r3, #1
   dc66c:	4770      	bx	lr
   dc66e:	4618      	mov	r0, r3
   dc670:	4770      	bx	lr
   dc672:	2020      	movs	r0, #32
   dc674:	4770      	bx	lr

000dc676 <__lo0bits>:
   dc676:	6803      	ldr	r3, [r0, #0]
   dc678:	f013 0207 	ands.w	r2, r3, #7
   dc67c:	d00b      	beq.n	dc696 <__lo0bits+0x20>
   dc67e:	07d9      	lsls	r1, r3, #31
   dc680:	d422      	bmi.n	dc6c8 <__lo0bits+0x52>
   dc682:	079a      	lsls	r2, r3, #30
   dc684:	bf4b      	itete	mi
   dc686:	085b      	lsrmi	r3, r3, #1
   dc688:	089b      	lsrpl	r3, r3, #2
   dc68a:	6003      	strmi	r3, [r0, #0]
   dc68c:	6003      	strpl	r3, [r0, #0]
   dc68e:	bf4c      	ite	mi
   dc690:	2001      	movmi	r0, #1
   dc692:	2002      	movpl	r0, #2
   dc694:	4770      	bx	lr
   dc696:	b299      	uxth	r1, r3
   dc698:	b909      	cbnz	r1, dc69e <__lo0bits+0x28>
   dc69a:	0c1b      	lsrs	r3, r3, #16
   dc69c:	2210      	movs	r2, #16
   dc69e:	f013 0fff 	tst.w	r3, #255	; 0xff
   dc6a2:	bf04      	itt	eq
   dc6a4:	0a1b      	lsreq	r3, r3, #8
   dc6a6:	3208      	addeq	r2, #8
   dc6a8:	0719      	lsls	r1, r3, #28
   dc6aa:	bf04      	itt	eq
   dc6ac:	091b      	lsreq	r3, r3, #4
   dc6ae:	3204      	addeq	r2, #4
   dc6b0:	0799      	lsls	r1, r3, #30
   dc6b2:	bf04      	itt	eq
   dc6b4:	089b      	lsreq	r3, r3, #2
   dc6b6:	3202      	addeq	r2, #2
   dc6b8:	07d9      	lsls	r1, r3, #31
   dc6ba:	d402      	bmi.n	dc6c2 <__lo0bits+0x4c>
   dc6bc:	085b      	lsrs	r3, r3, #1
   dc6be:	d005      	beq.n	dc6cc <__lo0bits+0x56>
   dc6c0:	3201      	adds	r2, #1
   dc6c2:	6003      	str	r3, [r0, #0]
   dc6c4:	4610      	mov	r0, r2
   dc6c6:	4770      	bx	lr
   dc6c8:	2000      	movs	r0, #0
   dc6ca:	4770      	bx	lr
   dc6cc:	2020      	movs	r0, #32
   dc6ce:	4770      	bx	lr

000dc6d0 <__i2b>:
   dc6d0:	b510      	push	{r4, lr}
   dc6d2:	460c      	mov	r4, r1
   dc6d4:	2101      	movs	r1, #1
   dc6d6:	f7ff fee9 	bl	dc4ac <_Balloc>
   dc6da:	2201      	movs	r2, #1
   dc6dc:	6144      	str	r4, [r0, #20]
   dc6de:	6102      	str	r2, [r0, #16]
   dc6e0:	bd10      	pop	{r4, pc}

000dc6e2 <__multiply>:
   dc6e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc6e6:	4614      	mov	r4, r2
   dc6e8:	690a      	ldr	r2, [r1, #16]
   dc6ea:	6923      	ldr	r3, [r4, #16]
   dc6ec:	429a      	cmp	r2, r3
   dc6ee:	bfb8      	it	lt
   dc6f0:	460b      	movlt	r3, r1
   dc6f2:	4688      	mov	r8, r1
   dc6f4:	bfbc      	itt	lt
   dc6f6:	46a0      	movlt	r8, r4
   dc6f8:	461c      	movlt	r4, r3
   dc6fa:	f8d8 7010 	ldr.w	r7, [r8, #16]
   dc6fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dc702:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc706:	f8d8 1004 	ldr.w	r1, [r8, #4]
   dc70a:	eb07 0609 	add.w	r6, r7, r9
   dc70e:	429e      	cmp	r6, r3
   dc710:	bfc8      	it	gt
   dc712:	3101      	addgt	r1, #1
   dc714:	f7ff feca 	bl	dc4ac <_Balloc>
   dc718:	f100 0514 	add.w	r5, r0, #20
   dc71c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   dc720:	462b      	mov	r3, r5
   dc722:	2200      	movs	r2, #0
   dc724:	4563      	cmp	r3, ip
   dc726:	d202      	bcs.n	dc72e <__multiply+0x4c>
   dc728:	f843 2b04 	str.w	r2, [r3], #4
   dc72c:	e7fa      	b.n	dc724 <__multiply+0x42>
   dc72e:	f104 0214 	add.w	r2, r4, #20
   dc732:	f108 0114 	add.w	r1, r8, #20
   dc736:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dc73a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   dc73e:	9300      	str	r3, [sp, #0]
   dc740:	9b00      	ldr	r3, [sp, #0]
   dc742:	9201      	str	r2, [sp, #4]
   dc744:	4293      	cmp	r3, r2
   dc746:	d957      	bls.n	dc7f8 <__multiply+0x116>
   dc748:	f8b2 b000 	ldrh.w	fp, [r2]
   dc74c:	f1bb 0f00 	cmp.w	fp, #0
   dc750:	d023      	beq.n	dc79a <__multiply+0xb8>
   dc752:	4689      	mov	r9, r1
   dc754:	46ae      	mov	lr, r5
   dc756:	f04f 0800 	mov.w	r8, #0
   dc75a:	f859 4b04 	ldr.w	r4, [r9], #4
   dc75e:	f8be a000 	ldrh.w	sl, [lr]
   dc762:	b2a3      	uxth	r3, r4
   dc764:	fb0b a303 	mla	r3, fp, r3, sl
   dc768:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   dc76c:	f8de 4000 	ldr.w	r4, [lr]
   dc770:	4443      	add	r3, r8
   dc772:	ea4f 4814 	mov.w	r8, r4, lsr #16
   dc776:	fb0b 840a 	mla	r4, fp, sl, r8
   dc77a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   dc77e:	46f2      	mov	sl, lr
   dc780:	b29b      	uxth	r3, r3
   dc782:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   dc786:	454f      	cmp	r7, r9
   dc788:	ea4f 4814 	mov.w	r8, r4, lsr #16
   dc78c:	f84a 3b04 	str.w	r3, [sl], #4
   dc790:	d901      	bls.n	dc796 <__multiply+0xb4>
   dc792:	46d6      	mov	lr, sl
   dc794:	e7e1      	b.n	dc75a <__multiply+0x78>
   dc796:	f8ce 8004 	str.w	r8, [lr, #4]
   dc79a:	9b01      	ldr	r3, [sp, #4]
   dc79c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   dc7a0:	3204      	adds	r2, #4
   dc7a2:	f1ba 0f00 	cmp.w	sl, #0
   dc7a6:	d021      	beq.n	dc7ec <__multiply+0x10a>
   dc7a8:	682b      	ldr	r3, [r5, #0]
   dc7aa:	462c      	mov	r4, r5
   dc7ac:	4689      	mov	r9, r1
   dc7ae:	f04f 0800 	mov.w	r8, #0
   dc7b2:	f8b9 e000 	ldrh.w	lr, [r9]
   dc7b6:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   dc7ba:	fb0a be0e 	mla	lr, sl, lr, fp
   dc7be:	44f0      	add	r8, lr
   dc7c0:	46a3      	mov	fp, r4
   dc7c2:	b29b      	uxth	r3, r3
   dc7c4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   dc7c8:	f84b 3b04 	str.w	r3, [fp], #4
   dc7cc:	f859 3b04 	ldr.w	r3, [r9], #4
   dc7d0:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   dc7d4:	0c1b      	lsrs	r3, r3, #16
   dc7d6:	fb0a e303 	mla	r3, sl, r3, lr
   dc7da:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   dc7de:	454f      	cmp	r7, r9
   dc7e0:	ea4f 4813 	mov.w	r8, r3, lsr #16
   dc7e4:	d901      	bls.n	dc7ea <__multiply+0x108>
   dc7e6:	465c      	mov	r4, fp
   dc7e8:	e7e3      	b.n	dc7b2 <__multiply+0xd0>
   dc7ea:	6063      	str	r3, [r4, #4]
   dc7ec:	3504      	adds	r5, #4
   dc7ee:	e7a7      	b.n	dc740 <__multiply+0x5e>
   dc7f0:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   dc7f4:	b913      	cbnz	r3, dc7fc <__multiply+0x11a>
   dc7f6:	3e01      	subs	r6, #1
   dc7f8:	2e00      	cmp	r6, #0
   dc7fa:	dcf9      	bgt.n	dc7f0 <__multiply+0x10e>
   dc7fc:	6106      	str	r6, [r0, #16]
   dc7fe:	b003      	add	sp, #12
   dc800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dc804 <__pow5mult>:
   dc804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc808:	4615      	mov	r5, r2
   dc80a:	f012 0203 	ands.w	r2, r2, #3
   dc80e:	4606      	mov	r6, r0
   dc810:	460f      	mov	r7, r1
   dc812:	d007      	beq.n	dc824 <__pow5mult+0x20>
   dc814:	3a01      	subs	r2, #1
   dc816:	4c21      	ldr	r4, [pc, #132]	; (dc89c <__pow5mult+0x98>)
   dc818:	2300      	movs	r3, #0
   dc81a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dc81e:	f7ff fe91 	bl	dc544 <__multadd>
   dc822:	4607      	mov	r7, r0
   dc824:	10ad      	asrs	r5, r5, #2
   dc826:	d036      	beq.n	dc896 <__pow5mult+0x92>
   dc828:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dc82a:	b93c      	cbnz	r4, dc83c <__pow5mult+0x38>
   dc82c:	2010      	movs	r0, #16
   dc82e:	f7fa fa89 	bl	d6d44 <malloc>
   dc832:	6270      	str	r0, [r6, #36]	; 0x24
   dc834:	6044      	str	r4, [r0, #4]
   dc836:	6084      	str	r4, [r0, #8]
   dc838:	6004      	str	r4, [r0, #0]
   dc83a:	60c4      	str	r4, [r0, #12]
   dc83c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dc840:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dc844:	b94c      	cbnz	r4, dc85a <__pow5mult+0x56>
   dc846:	f240 2171 	movw	r1, #625	; 0x271
   dc84a:	4630      	mov	r0, r6
   dc84c:	f7ff ff40 	bl	dc6d0 <__i2b>
   dc850:	2300      	movs	r3, #0
   dc852:	f8c8 0008 	str.w	r0, [r8, #8]
   dc856:	4604      	mov	r4, r0
   dc858:	6003      	str	r3, [r0, #0]
   dc85a:	f04f 0800 	mov.w	r8, #0
   dc85e:	07eb      	lsls	r3, r5, #31
   dc860:	d50a      	bpl.n	dc878 <__pow5mult+0x74>
   dc862:	4639      	mov	r1, r7
   dc864:	4622      	mov	r2, r4
   dc866:	4630      	mov	r0, r6
   dc868:	f7ff ff3b 	bl	dc6e2 <__multiply>
   dc86c:	4639      	mov	r1, r7
   dc86e:	4681      	mov	r9, r0
   dc870:	4630      	mov	r0, r6
   dc872:	f7ff fe50 	bl	dc516 <_Bfree>
   dc876:	464f      	mov	r7, r9
   dc878:	106d      	asrs	r5, r5, #1
   dc87a:	d00c      	beq.n	dc896 <__pow5mult+0x92>
   dc87c:	6820      	ldr	r0, [r4, #0]
   dc87e:	b108      	cbz	r0, dc884 <__pow5mult+0x80>
   dc880:	4604      	mov	r4, r0
   dc882:	e7ec      	b.n	dc85e <__pow5mult+0x5a>
   dc884:	4622      	mov	r2, r4
   dc886:	4621      	mov	r1, r4
   dc888:	4630      	mov	r0, r6
   dc88a:	f7ff ff2a 	bl	dc6e2 <__multiply>
   dc88e:	6020      	str	r0, [r4, #0]
   dc890:	f8c0 8000 	str.w	r8, [r0]
   dc894:	e7f4      	b.n	dc880 <__pow5mult+0x7c>
   dc896:	4638      	mov	r0, r7
   dc898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc89c:	000ddc60 	.word	0x000ddc60

000dc8a0 <__lshift>:
   dc8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc8a4:	460c      	mov	r4, r1
   dc8a6:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dc8aa:	6926      	ldr	r6, [r4, #16]
   dc8ac:	6849      	ldr	r1, [r1, #4]
   dc8ae:	68a3      	ldr	r3, [r4, #8]
   dc8b0:	4456      	add	r6, sl
   dc8b2:	4607      	mov	r7, r0
   dc8b4:	4691      	mov	r9, r2
   dc8b6:	1c75      	adds	r5, r6, #1
   dc8b8:	42ab      	cmp	r3, r5
   dc8ba:	da02      	bge.n	dc8c2 <__lshift+0x22>
   dc8bc:	3101      	adds	r1, #1
   dc8be:	005b      	lsls	r3, r3, #1
   dc8c0:	e7fa      	b.n	dc8b8 <__lshift+0x18>
   dc8c2:	4638      	mov	r0, r7
   dc8c4:	f7ff fdf2 	bl	dc4ac <_Balloc>
   dc8c8:	2300      	movs	r3, #0
   dc8ca:	4680      	mov	r8, r0
   dc8cc:	f100 0114 	add.w	r1, r0, #20
   dc8d0:	461a      	mov	r2, r3
   dc8d2:	4553      	cmp	r3, sl
   dc8d4:	da03      	bge.n	dc8de <__lshift+0x3e>
   dc8d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   dc8da:	3301      	adds	r3, #1
   dc8dc:	e7f9      	b.n	dc8d2 <__lshift+0x32>
   dc8de:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   dc8e2:	6920      	ldr	r0, [r4, #16]
   dc8e4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   dc8e8:	f019 091f 	ands.w	r9, r9, #31
   dc8ec:	f104 0114 	add.w	r1, r4, #20
   dc8f0:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   dc8f4:	d014      	beq.n	dc920 <__lshift+0x80>
   dc8f6:	f1c9 0c20 	rsb	ip, r9, #32
   dc8fa:	2200      	movs	r2, #0
   dc8fc:	6808      	ldr	r0, [r1, #0]
   dc8fe:	fa00 f009 	lsl.w	r0, r0, r9
   dc902:	4302      	orrs	r2, r0
   dc904:	469a      	mov	sl, r3
   dc906:	f843 2b04 	str.w	r2, [r3], #4
   dc90a:	f851 2b04 	ldr.w	r2, [r1], #4
   dc90e:	458e      	cmp	lr, r1
   dc910:	fa22 f20c 	lsr.w	r2, r2, ip
   dc914:	d8f2      	bhi.n	dc8fc <__lshift+0x5c>
   dc916:	f8ca 2004 	str.w	r2, [sl, #4]
   dc91a:	b142      	cbz	r2, dc92e <__lshift+0x8e>
   dc91c:	1cb5      	adds	r5, r6, #2
   dc91e:	e006      	b.n	dc92e <__lshift+0x8e>
   dc920:	3b04      	subs	r3, #4
   dc922:	f851 2b04 	ldr.w	r2, [r1], #4
   dc926:	f843 2f04 	str.w	r2, [r3, #4]!
   dc92a:	458e      	cmp	lr, r1
   dc92c:	d8f9      	bhi.n	dc922 <__lshift+0x82>
   dc92e:	3d01      	subs	r5, #1
   dc930:	4638      	mov	r0, r7
   dc932:	f8c8 5010 	str.w	r5, [r8, #16]
   dc936:	4621      	mov	r1, r4
   dc938:	f7ff fded 	bl	dc516 <_Bfree>
   dc93c:	4640      	mov	r0, r8
   dc93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000dc942 <__mcmp>:
   dc942:	6903      	ldr	r3, [r0, #16]
   dc944:	690a      	ldr	r2, [r1, #16]
   dc946:	1a9b      	subs	r3, r3, r2
   dc948:	b510      	push	{r4, lr}
   dc94a:	d111      	bne.n	dc970 <__mcmp+0x2e>
   dc94c:	0092      	lsls	r2, r2, #2
   dc94e:	3014      	adds	r0, #20
   dc950:	3114      	adds	r1, #20
   dc952:	1883      	adds	r3, r0, r2
   dc954:	440a      	add	r2, r1
   dc956:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   dc95a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   dc95e:	428c      	cmp	r4, r1
   dc960:	d002      	beq.n	dc968 <__mcmp+0x26>
   dc962:	d307      	bcc.n	dc974 <__mcmp+0x32>
   dc964:	2001      	movs	r0, #1
   dc966:	bd10      	pop	{r4, pc}
   dc968:	4298      	cmp	r0, r3
   dc96a:	d3f4      	bcc.n	dc956 <__mcmp+0x14>
   dc96c:	2000      	movs	r0, #0
   dc96e:	bd10      	pop	{r4, pc}
   dc970:	4618      	mov	r0, r3
   dc972:	bd10      	pop	{r4, pc}
   dc974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dc978:	bd10      	pop	{r4, pc}

000dc97a <__mdiff>:
   dc97a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc97e:	460c      	mov	r4, r1
   dc980:	4607      	mov	r7, r0
   dc982:	4611      	mov	r1, r2
   dc984:	4620      	mov	r0, r4
   dc986:	4615      	mov	r5, r2
   dc988:	f7ff ffdb 	bl	dc942 <__mcmp>
   dc98c:	1e06      	subs	r6, r0, #0
   dc98e:	d108      	bne.n	dc9a2 <__mdiff+0x28>
   dc990:	4631      	mov	r1, r6
   dc992:	4638      	mov	r0, r7
   dc994:	f7ff fd8a 	bl	dc4ac <_Balloc>
   dc998:	2301      	movs	r3, #1
   dc99a:	6103      	str	r3, [r0, #16]
   dc99c:	6146      	str	r6, [r0, #20]
   dc99e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc9a2:	bfbc      	itt	lt
   dc9a4:	4623      	movlt	r3, r4
   dc9a6:	462c      	movlt	r4, r5
   dc9a8:	4638      	mov	r0, r7
   dc9aa:	6861      	ldr	r1, [r4, #4]
   dc9ac:	bfba      	itte	lt
   dc9ae:	461d      	movlt	r5, r3
   dc9b0:	2601      	movlt	r6, #1
   dc9b2:	2600      	movge	r6, #0
   dc9b4:	f7ff fd7a 	bl	dc4ac <_Balloc>
   dc9b8:	692b      	ldr	r3, [r5, #16]
   dc9ba:	60c6      	str	r6, [r0, #12]
   dc9bc:	6926      	ldr	r6, [r4, #16]
   dc9be:	f105 0914 	add.w	r9, r5, #20
   dc9c2:	3414      	adds	r4, #20
   dc9c4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   dc9c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   dc9cc:	f100 0514 	add.w	r5, r0, #20
   dc9d0:	f04f 0c00 	mov.w	ip, #0
   dc9d4:	f854 3b04 	ldr.w	r3, [r4], #4
   dc9d8:	f859 2b04 	ldr.w	r2, [r9], #4
   dc9dc:	fa1c f183 	uxtah	r1, ip, r3
   dc9e0:	fa1f fe82 	uxth.w	lr, r2
   dc9e4:	0c12      	lsrs	r2, r2, #16
   dc9e6:	ebce 0101 	rsb	r1, lr, r1
   dc9ea:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   dc9ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
   dc9f2:	b289      	uxth	r1, r1
   dc9f4:	ea4f 4c23 	mov.w	ip, r3, asr #16
   dc9f8:	45c8      	cmp	r8, r9
   dc9fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   dc9fe:	46a6      	mov	lr, r4
   dca00:	f845 3b04 	str.w	r3, [r5], #4
   dca04:	d8e6      	bhi.n	dc9d4 <__mdiff+0x5a>
   dca06:	45be      	cmp	lr, r7
   dca08:	d20e      	bcs.n	dca28 <__mdiff+0xae>
   dca0a:	f85e 1b04 	ldr.w	r1, [lr], #4
   dca0e:	fa1c f281 	uxtah	r2, ip, r1
   dca12:	1413      	asrs	r3, r2, #16
   dca14:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   dca18:	b292      	uxth	r2, r2
   dca1a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   dca1e:	ea4f 4c23 	mov.w	ip, r3, asr #16
   dca22:	f845 2b04 	str.w	r2, [r5], #4
   dca26:	e7ee      	b.n	dca06 <__mdiff+0x8c>
   dca28:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   dca2c:	b90b      	cbnz	r3, dca32 <__mdiff+0xb8>
   dca2e:	3e01      	subs	r6, #1
   dca30:	e7fa      	b.n	dca28 <__mdiff+0xae>
   dca32:	6106      	str	r6, [r0, #16]
   dca34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dca38 <__ulp>:
   dca38:	4b12      	ldr	r3, [pc, #72]	; (dca84 <__ulp+0x4c>)
   dca3a:	ee10 2a90 	vmov	r2, s1
   dca3e:	401a      	ands	r2, r3
   dca40:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   dca44:	2b00      	cmp	r3, #0
   dca46:	dd02      	ble.n	dca4e <__ulp+0x16>
   dca48:	2000      	movs	r0, #0
   dca4a:	4619      	mov	r1, r3
   dca4c:	e017      	b.n	dca7e <__ulp+0x46>
   dca4e:	425b      	negs	r3, r3
   dca50:	151b      	asrs	r3, r3, #20
   dca52:	2b13      	cmp	r3, #19
   dca54:	f04f 0000 	mov.w	r0, #0
   dca58:	f04f 0100 	mov.w	r1, #0
   dca5c:	dc04      	bgt.n	dca68 <__ulp+0x30>
   dca5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   dca62:	fa42 f103 	asr.w	r1, r2, r3
   dca66:	e00a      	b.n	dca7e <__ulp+0x46>
   dca68:	3b14      	subs	r3, #20
   dca6a:	2b1e      	cmp	r3, #30
   dca6c:	f04f 0201 	mov.w	r2, #1
   dca70:	bfda      	itte	le
   dca72:	f1c3 031f 	rsble	r3, r3, #31
   dca76:	fa02 f303 	lslle.w	r3, r2, r3
   dca7a:	4613      	movgt	r3, r2
   dca7c:	4618      	mov	r0, r3
   dca7e:	ec41 0b10 	vmov	d0, r0, r1
   dca82:	4770      	bx	lr
   dca84:	7ff00000 	.word	0x7ff00000

000dca88 <__b2d>:
   dca88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dca8a:	6905      	ldr	r5, [r0, #16]
   dca8c:	f100 0614 	add.w	r6, r0, #20
   dca90:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   dca94:	1f2f      	subs	r7, r5, #4
   dca96:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dca9a:	4620      	mov	r0, r4
   dca9c:	f7ff fdcb 	bl	dc636 <__hi0bits>
   dcaa0:	f1c0 0320 	rsb	r3, r0, #32
   dcaa4:	280a      	cmp	r0, #10
   dcaa6:	600b      	str	r3, [r1, #0]
   dcaa8:	dc14      	bgt.n	dcad4 <__b2d+0x4c>
   dcaaa:	f1c0 0e0b 	rsb	lr, r0, #11
   dcaae:	fa24 f10e 	lsr.w	r1, r4, lr
   dcab2:	42be      	cmp	r6, r7
   dcab4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   dcab8:	bf34      	ite	cc
   dcaba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dcabe:	2100      	movcs	r1, #0
   dcac0:	3015      	adds	r0, #21
   dcac2:	fa04 f000 	lsl.w	r0, r4, r0
   dcac6:	fa21 f10e 	lsr.w	r1, r1, lr
   dcaca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dcace:	ea40 0201 	orr.w	r2, r0, r1
   dcad2:	e023      	b.n	dcb1c <__b2d+0x94>
   dcad4:	42be      	cmp	r6, r7
   dcad6:	bf3a      	itte	cc
   dcad8:	f1a5 0708 	subcc.w	r7, r5, #8
   dcadc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dcae0:	2100      	movcs	r1, #0
   dcae2:	380b      	subs	r0, #11
   dcae4:	d015      	beq.n	dcb12 <__b2d+0x8a>
   dcae6:	4084      	lsls	r4, r0
   dcae8:	f1c0 0520 	rsb	r5, r0, #32
   dcaec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   dcaf0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   dcaf4:	42b7      	cmp	r7, r6
   dcaf6:	fa21 fe05 	lsr.w	lr, r1, r5
   dcafa:	ea44 030e 	orr.w	r3, r4, lr
   dcafe:	bf8c      	ite	hi
   dcb00:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   dcb04:	2400      	movls	r4, #0
   dcb06:	fa01 f000 	lsl.w	r0, r1, r0
   dcb0a:	40ec      	lsrs	r4, r5
   dcb0c:	ea40 0204 	orr.w	r2, r0, r4
   dcb10:	e004      	b.n	dcb1c <__b2d+0x94>
   dcb12:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   dcb16:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dcb1a:	460a      	mov	r2, r1
   dcb1c:	ec43 2b10 	vmov	d0, r2, r3
   dcb20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dcb22 <__d2b>:
   dcb22:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dcb26:	460e      	mov	r6, r1
   dcb28:	2101      	movs	r1, #1
   dcb2a:	ec59 8b10 	vmov	r8, r9, d0
   dcb2e:	4615      	mov	r5, r2
   dcb30:	f7ff fcbc 	bl	dc4ac <_Balloc>
   dcb34:	f3c9 540a 	ubfx	r4, r9, #20, #11
   dcb38:	4607      	mov	r7, r0
   dcb3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   dcb3e:	b10c      	cbz	r4, dcb44 <__d2b+0x22>
   dcb40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dcb44:	9301      	str	r3, [sp, #4]
   dcb46:	f1b8 0f00 	cmp.w	r8, #0
   dcb4a:	d019      	beq.n	dcb80 <__d2b+0x5e>
   dcb4c:	a802      	add	r0, sp, #8
   dcb4e:	f840 8d08 	str.w	r8, [r0, #-8]!
   dcb52:	f7ff fd90 	bl	dc676 <__lo0bits>
   dcb56:	9b00      	ldr	r3, [sp, #0]
   dcb58:	b148      	cbz	r0, dcb6e <__d2b+0x4c>
   dcb5a:	9a01      	ldr	r2, [sp, #4]
   dcb5c:	f1c0 0120 	rsb	r1, r0, #32
   dcb60:	fa02 f101 	lsl.w	r1, r2, r1
   dcb64:	430b      	orrs	r3, r1
   dcb66:	40c2      	lsrs	r2, r0
   dcb68:	617b      	str	r3, [r7, #20]
   dcb6a:	9201      	str	r2, [sp, #4]
   dcb6c:	e000      	b.n	dcb70 <__d2b+0x4e>
   dcb6e:	617b      	str	r3, [r7, #20]
   dcb70:	9b01      	ldr	r3, [sp, #4]
   dcb72:	61bb      	str	r3, [r7, #24]
   dcb74:	2b00      	cmp	r3, #0
   dcb76:	bf14      	ite	ne
   dcb78:	2102      	movne	r1, #2
   dcb7a:	2101      	moveq	r1, #1
   dcb7c:	6139      	str	r1, [r7, #16]
   dcb7e:	e007      	b.n	dcb90 <__d2b+0x6e>
   dcb80:	a801      	add	r0, sp, #4
   dcb82:	f7ff fd78 	bl	dc676 <__lo0bits>
   dcb86:	9b01      	ldr	r3, [sp, #4]
   dcb88:	617b      	str	r3, [r7, #20]
   dcb8a:	2101      	movs	r1, #1
   dcb8c:	6139      	str	r1, [r7, #16]
   dcb8e:	3020      	adds	r0, #32
   dcb90:	b134      	cbz	r4, dcba0 <__d2b+0x7e>
   dcb92:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   dcb96:	4404      	add	r4, r0
   dcb98:	6034      	str	r4, [r6, #0]
   dcb9a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dcb9e:	e009      	b.n	dcbb4 <__d2b+0x92>
   dcba0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   dcba4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dcba8:	6030      	str	r0, [r6, #0]
   dcbaa:	6918      	ldr	r0, [r3, #16]
   dcbac:	f7ff fd43 	bl	dc636 <__hi0bits>
   dcbb0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   dcbb4:	6028      	str	r0, [r5, #0]
   dcbb6:	4638      	mov	r0, r7
   dcbb8:	b003      	add	sp, #12
   dcbba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dcbbe <__ratio>:
   dcbbe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dcbc2:	4688      	mov	r8, r1
   dcbc4:	4669      	mov	r1, sp
   dcbc6:	4681      	mov	r9, r0
   dcbc8:	f7ff ff5e 	bl	dca88 <__b2d>
   dcbcc:	a901      	add	r1, sp, #4
   dcbce:	4640      	mov	r0, r8
   dcbd0:	ec55 4b10 	vmov	r4, r5, d0
   dcbd4:	f7ff ff58 	bl	dca88 <__b2d>
   dcbd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dcbdc:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dcbe0:	1a9a      	subs	r2, r3, r2
   dcbe2:	e89d 000a 	ldmia.w	sp, {r1, r3}
   dcbe6:	1ac9      	subs	r1, r1, r3
   dcbe8:	ec57 6b10 	vmov	r6, r7, d0
   dcbec:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   dcbf0:	2b00      	cmp	r3, #0
   dcbf2:	bfcc      	ite	gt
   dcbf4:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   dcbf8:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   dcbfc:	4632      	mov	r2, r6
   dcbfe:	463b      	mov	r3, r7
   dcc00:	4620      	mov	r0, r4
   dcc02:	4629      	mov	r1, r5
   dcc04:	f7fc fb2c 	bl	d9260 <__aeabi_ddiv>
   dcc08:	ec41 0b10 	vmov	d0, r0, r1
   dcc0c:	b003      	add	sp, #12
   dcc0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dcc12 <__copybits>:
   dcc12:	3901      	subs	r1, #1
   dcc14:	b510      	push	{r4, lr}
   dcc16:	1149      	asrs	r1, r1, #5
   dcc18:	6914      	ldr	r4, [r2, #16]
   dcc1a:	3101      	adds	r1, #1
   dcc1c:	f102 0314 	add.w	r3, r2, #20
   dcc20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dcc24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dcc28:	42a3      	cmp	r3, r4
   dcc2a:	4602      	mov	r2, r0
   dcc2c:	d204      	bcs.n	dcc38 <__copybits+0x26>
   dcc2e:	f853 2b04 	ldr.w	r2, [r3], #4
   dcc32:	f840 2b04 	str.w	r2, [r0], #4
   dcc36:	e7f7      	b.n	dcc28 <__copybits+0x16>
   dcc38:	2300      	movs	r3, #0
   dcc3a:	428a      	cmp	r2, r1
   dcc3c:	d202      	bcs.n	dcc44 <__copybits+0x32>
   dcc3e:	f842 3b04 	str.w	r3, [r2], #4
   dcc42:	e7fa      	b.n	dcc3a <__copybits+0x28>
   dcc44:	bd10      	pop	{r4, pc}

000dcc46 <__any_on>:
   dcc46:	f100 0214 	add.w	r2, r0, #20
   dcc4a:	6900      	ldr	r0, [r0, #16]
   dcc4c:	114b      	asrs	r3, r1, #5
   dcc4e:	4298      	cmp	r0, r3
   dcc50:	b510      	push	{r4, lr}
   dcc52:	db0c      	blt.n	dcc6e <__any_on+0x28>
   dcc54:	dd0c      	ble.n	dcc70 <__any_on+0x2a>
   dcc56:	f011 011f 	ands.w	r1, r1, #31
   dcc5a:	d009      	beq.n	dcc70 <__any_on+0x2a>
   dcc5c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dcc60:	fa24 f001 	lsr.w	r0, r4, r1
   dcc64:	fa00 f101 	lsl.w	r1, r0, r1
   dcc68:	428c      	cmp	r4, r1
   dcc6a:	d10c      	bne.n	dcc86 <__any_on+0x40>
   dcc6c:	e000      	b.n	dcc70 <__any_on+0x2a>
   dcc6e:	4603      	mov	r3, r0
   dcc70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dcc74:	4293      	cmp	r3, r2
   dcc76:	d904      	bls.n	dcc82 <__any_on+0x3c>
   dcc78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dcc7c:	2900      	cmp	r1, #0
   dcc7e:	d0f9      	beq.n	dcc74 <__any_on+0x2e>
   dcc80:	e001      	b.n	dcc86 <__any_on+0x40>
   dcc82:	2000      	movs	r0, #0
   dcc84:	bd10      	pop	{r4, pc}
   dcc86:	2001      	movs	r0, #1
   dcc88:	bd10      	pop	{r4, pc}

000dcc8a <_calloc_r>:
   dcc8a:	b538      	push	{r3, r4, r5, lr}
   dcc8c:	fb02 f401 	mul.w	r4, r2, r1
   dcc90:	4621      	mov	r1, r4
   dcc92:	f7fa f897 	bl	d6dc4 <_malloc_r>
   dcc96:	4605      	mov	r5, r0
   dcc98:	b118      	cbz	r0, dcca2 <_calloc_r+0x18>
   dcc9a:	4622      	mov	r2, r4
   dcc9c:	2100      	movs	r1, #0
   dcc9e:	f7fc fefc 	bl	d9a9a <memset>
   dcca2:	4628      	mov	r0, r5
   dcca4:	bd38      	pop	{r3, r4, r5, pc}
	...

000dcca8 <nanf>:
   dcca8:	ed9f 0a01 	vldr	s0, [pc, #4]	; dccb0 <nanf+0x8>
   dccac:	4770      	bx	lr
   dccae:	bf00      	nop
   dccb0:	7fc00000 	.word	0x7fc00000

000dccb4 <__env_lock>:
   dccb4:	4770      	bx	lr

000dccb6 <__env_unlock>:
   dccb6:	4770      	bx	lr

000dccb8 <dynalib_user>:
   dccb8:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dccc8:	0000 0000                                   ....

000dcccc <_ZTV8MB85RC64>:
	...
   dccd4:	4175 000d 4189 000d 5c81 000d 5d2b 000d     uA...A...\..+]..
   dcce4:	5da5 000d d0bd 000d d0c5 000d d0ca 000d     .]..............
   dccf4:	d0cf 000d d0d3 000d d0d8 000d d0dd 000d     ................
   dcd04:	d0e1 000d d0ec 000d d0f7 000d               ............

000dcd10 <_ZL17FRAMversionNumber>:
   dcd10:	0002 0000 7325 5320 253a 2e32 6630 2525     ....%s S:%2.0f%%
   dcd20:	202c 3a51 3225 302e 2566 2025 4100 2b54     , Q:%2.0f%% .AT+
   dcd30:	4643 4e55 313d 0d35 000a 227b 6f68 7275     CFUN=15...{"hour
   dcd40:	796c 3a22 6925 202c 6422 6961 796c 3a22     ly":%i, "daily":
   dcd50:	6925 222c 6162 7474 7265 2279 253a 2c69     %i,"battery":%i,
   dcd60:	2220 6574 706d 3a22 6925 202c 7222 7365      "temp":%i, "res
   dcd70:	7465 2273 253a 2c69 2220 6c61 7265 7374     ets":%i, "alerts
   dcd80:	3a22 6925 202c 6d22 7861 696d 226e 253a     ":%i, "maxmin":%
   dcd90:	7d69 5500 6962 6f64 7374 432d 7261 482d     i}.Ubidots-Car-H
   dcda0:	6f6f 006b 6f4e 4420 7461 0061 6255 6469     ook.No Data.Ubid
   dcdb0:	746f 2073 6f48 6b6f 5200 7365 6f70 736e     ots Hook.Respons
   dcdc0:	2065 6552 6563 7669 6465 5500 6b6e 6f6e     e Received.Unkno
   dcdd0:	6e77 7220 7365 6f70 736e 2065 6572 6563     wn response rece
   dcde0:	6976 6465 2520 0069 6f43 6e75 2c74 6820     vied %i.Count, h
   dcdf0:	756f 6c72 3a79 2520 2c69 6420 6961 796c     ourly: %i, daily
   dce00:	203a 6925 4400 6265 756f 636e 6465 4500     : %i.Debounced.E
   dce10:	6576 746e 4c00 616f 6964 676e 5320 7379     vent.Loading Sys
   dce20:	6574 206d 6544 6166 6c75 7374 4800 7261     tem Defaults.Har
   dce30:	2064 6552 6573 2074 6e69 3220 7320 6365     d Reset in 2 sec
   dce40:	6e6f 7364 2500 2e32 6631 7320 6365 5300     onds.%2.1f sec.S
   dce50:	7465 5320 6c6f 7261 5020 776f 7265 6465     et Solar Powered
   dce60:	4d20 646f 0065 0030 6c43 6165 6572 2064      Mode.0.Cleared 
   dce70:	6f53 616c 2072 6f50 6577 6572 2064 6f4d     Solar Powered Mo
   dce80:	6564 5300 7465 5620 7265 6f62 6573 4d20     de.Set Verbose M
   dce90:	646f 0065 6c43 6165 6572 2064 6556 6272     ode.Cleared Verb
   dcea0:	736f 2065 6f4d 6564 2500 2e32 6631 5520     ose Mode.%2.1f U
   dceb0:	4354 5400 6d69 2065 6f7a 656e 6f20 6666     TC.Time zone off
   dcec0:	6573 2074 6925 4f00 6570 206e 6974 656d     set %i.Open time
   dced0:	7320 7465 7420 206f 6925 4300 6f6c 6973      set to %i.Closi
   dcee0:	676e 7420 6d69 2065 6573 2074 6f74 2520     ng time set to %
   dcef0:	0069 6f4c 2077 6f50 6577 0072 6f4e 6d72     i.Low Power.Norm
   dcf00:	6c61 4f20 6570 6172 6974 6e6f 0073 7246     al Operations.Fr
   dcf10:	6d6f 2520 2073 6f74 2520 0073 7453 7461     om %s to %s.Stat
   dcf20:	2065 7254 6e61 6973 6974 6e6f 5200 6e75     e Transition.Run
   dcf30:	696e 676e 4400 6961 796c 4320 656c 6e61     ning.Daily Clean
   dcf40:	7075 7300 6170 6b72 642f 7665 6369 2f65     up.spark/device/
   dcf50:	6573 7373 6f69 2f6e 6e65 0064 7245 6f72     session/end.Erro
   dcf60:	2072 7453 7461 2065 202d 6552 6573 0074     r State - Reset.
   dcf70:	7453 7461 0065 7245 6f72 2072 7453 7461     State.Error Stat
   dcf80:	2065 202d 6f50 6577 2072 7943 6c63 0065     e - Power Cycle.
   dcf90:	7245 6f72 2072 7453 7461 2065 202d 7546     Error State - Fu
   dcfa0:	6c6c 4d20 646f 6d65 5220 7365 7465 4400     ll Modem Reset.D
   dcfb0:	5453 6f20 6666 6573 2074 3225 312e 0066     ST offset %2.1f.
   dcfc0:	6f48 7275 796c 6f43 6e75 0074 6144 6c69     HourlyCount.Dail
   dcfd0:	4379 756f 746e 5300 6769 616e 006c 6552     yCount.Signal.Re
   dcfe0:	6573 4374 756f 746e 5400 6d65 6570 6172     setCount.Tempera
   dcff0:	7574 6572 5200 6c65 6165 6573 7300 6174     ture.Release.sta
   dd000:	6574 664f 6843 0067 6f6c 5077 776f 7265     teOfChg.lowPower
   dd010:	6f4d 6564 4300 6f6c 6573 6954 656d 4100     Mode.CloseTime.A
   dd020:	656c 7472 0073 6954 656d 664f 7366 7465     lerts.TimeOffset
   dd030:	7200 7365 7465 5246 4d41 7200 7365 7465     .resetFRAM.reset
   dd040:	6f43 6e75 7374 4800 7261 5264 7365 7465     Counts.HardReset
   dd050:	5300 6e65 4e64 776f 4c00 776f 6f50 6577     .SendNow.LowPowe
   dd060:	4d72 646f 0065 6f53 616c 2d72 6f4d 6564     rMode.Solar-Mode
   dd070:	5600 7265 6f62 6573 4d2d 646f 0065 6553     .Verbose-Mode.Se
   dd080:	2d74 6954 656d 6f7a 656e 5300 7465 442d     t-Timezone.Set-D
   dd090:	5453 664f 7366 7465 5300 7465 4f2d 6570     STOffset.Set-Ope
   dd0a0:	546e 6d69 0065 6553 2d74 6c43 736f 0065     nTime.Set-Close.
   dd0b0:	6553 2d74 6544 6f62 6e75 6563 5500 6b6e     Set-Debounce.Unk
   dd0c0:	6f6e 6e77 4e00 6e6f 0065 6957 6946 4700     nown.None.WiFi.G
   dd0d0:	4d53 5500 544d 0053 4443 414d 4c00 4554     SM.UMTS.CDMA.LTE
   dd0e0:	4900 4545 3845 3230 3531 0034 544c 5f45     .IEEE802154.LTE_
   dd0f0:	4143 5f54 314d 4c00 4554 435f 5441 4e5f     CAT_M1.LTE_CAT_N
   dd100:	3142 7700 6972 6574 6144 6174 6620 6961     B1.writeData fai
   dd110:	656c 2064 7564 6972 676e 6520 6172 6573     led during erase
   dd120:	6620 6172 416d 6464 3d72 7525 7200 6165      framAddr=%u.rea
   dd130:	2064 6573 2074 6461 7264 7365 2073 6166     d set address fa
   dd140:	6c69 6465 2520 0064 6964 6e64 7427 7220     iled %d.didn't r
   dd150:	6365 6965 6576 6520 6f6e 6775 2068 7962     eceive enough by
   dd160:	6574 2073 6f63 6e75 3d74 7525 7700 6972     tes count=%u.wri
   dd170:	6574 6620 6961 656c 2064 6425 0000 0000     te failed %d....

000dd180 <_ZTV6MB85RC>:
	...
   dd188:	5ba1 000d 5ba3 000d 5c81 000d 5d2b 000d     .[...[...\..+]..
   dd198:	5da5 000d                                   .]..

000dd19c <_ZTV14MCP79410EEPROM>:
	...
   dd1a4:	5e6d 000d 5e8f 000d 5e63 000d 5e67 000d     m^...^..c^..g^..
   dd1b4:	5eab 000d 62dd 000d 66d5 000d               .^...b...f..

000dd1c0 <_ZTV12MCP79410SRAM>:
	...
   dd1c8:	5e6b 000d 5e81 000d 5e5b 000d 5e5f 000d     k^...^..[^.._^..
   dd1d8:	5eab 000d 6315 000d 653f 000d 6579 7261     .^...c..?e..year
   dd1e8:	253d 3230 2078 6f6d 746e 3d68 3025 7832     =%02x month=%02x
   dd1f8:	6420 7961 664f 6f4d 746e 3d68 3025 7832      dayOfMonth=%02x
   dd208:	6420 7961 664f 6557 6b65 253d 3230 2078      dayOfWeek=%02x 
   dd218:	6f68 7275 253d 3230 2078 696d 756e 6574     hour=%02x minute
   dd228:	253d 3230 2078 6573 6f63 646e 253d 3230     =%02x second=%02
   dd238:	2078 6f6d 6564 253d 0064 6564 6976 6563     x mode=%d.device
   dd248:	6552 6461 6620 6961 656c 2064 7473 7461     Read failed stat
   dd258:	253d 0064 6573 2074 6954 656d 6620 6f72     =%d.set Time fro
   dd268:	206d 5452 2043 7325 6400 7665 6369 5765     m RTC %s.deviceW
   dd278:	6972 6574 6620 6961 656c 2064 7473 7461     rite failed stat
   dd288:	253d 0064 6573 2074 5452 2043 7266 6d6f     =%d.set RTC from
   dd298:	6320 6f6c 6475 2520 0073 6c63 756f 2064      cloud %s.cloud 
   dd2a8:	6974 656d 6e20 746f 7620 6c61 6469 6400     time not valid.d
   dd2b8:	7665 6369 5765 6972 6574 4545 5250 4d4f     eviceWriteEEPROM
   dd2c8:	6620 6961 656c 2064 7473 7461 253d 0064      failed stat=%d.
   dd2d8:	7061 2e70 7472 0063                         app.rtc.

000dd2e0 <_ZTV12MCP79410Time>:
	...
   dd2e8:	5e6f 000d 5e73 000d                         o^..s^..

000dd2f0 <_ZTV8MCP79410>:
	...
   dd2f8:	5e71 000d 5e9d 000d                         q^...^..

000dd300 <_ZTVN5spark13CellularClassE>:
	...
   dd308:	6e7f 000d 6e75 000d 6e6b 000d 6e21 000d     .n..un..kn..!n..
   dd318:	6e5f 000d 6e53 000d 6e47 000d 6e3f 000d     _n..Sn..Gn..?n..
   dd328:	6e35 000d 6e2b 000d 7c2d 000d               5n..+n..-|..

000dd334 <_ZTV14CellularSignal>:
	...
   dd33c:	6f2d 000d 6f8d 000d 6f2f 000d 6fd1 000d     -o...o../o...o..
   dd34c:	6f35 000d 6f9d 000d 6f61 000d 705b 000d     5o...o..ao..[p..
   dd35c:	fffc ffff 0000 0000 7085 000d               .........p..

000dd368 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dd370:	708d 000d 7093 000d 70e9 000d 70a1 000d     .p...p...p...p..
   dd380:	708f 000d                                   .p..

000dd384 <_ZTVN5spark13EthernetClassE>:
	...
   dd38c:	76ff 000d 76f5 000d 76eb 000d 76e1 000d     .v...v...v...v..
   dd39c:	76d5 000d 76c9 000d 76bd 000d 76b5 000d     .v...v...v...v..
   dd3ac:	76ab 000d 76a1 000d 7c2d 000d               .v...v..-|..

000dd3b8 <_ZTV7TwoWire>:
	...
   dd3c0:	7801 000d 784b 000d 7823 000d 7803 000d     .x..Kx..#x...x..
   dd3d0:	782b 000d 7833 000d 783b 000d 7843 000d     +x..3x..;x..Cx..

000dd3e0 <_ZTV9IPAddress>:
	...
   dd3e8:	797d 000d 796d 000d 796f 000d 6162 6475     }y..my..oy..baud
   dd3f8:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   dd408:	7974 6570 7000 7261 6d61 6300 646d 6800     type.param.cmd.h
   dd418:	646e 7300 7274 006d 6966 746c 6c00 6c76     nd.strm.filt.lvl
   dd428:	6100 6464 6148 646e 656c 0072 6572 6f6d     .addHandler.remo
   dd438:	6576 6148 646e 656c 0072 6e65 6d75 6148     veHandler.enumHa
   dd448:	646e 656c 7372 4a00 4f53 534e 7274 6165     ndlers.JSONStrea
   dd458:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
   dd468:	3025 3031 2075 5d00 0020 202c 2800 3a29     %010u .] ., .():
   dd478:	0020 5b20 6300 646f 2065 203d 6400 7465      . [.code = .det
   dd488:	6961 736c 3d20 0020 6e6c 6600 006e 6f63     ails = .ln.fn.co
   dd498:	6564 6400 7465 6961 006c 6f6e 656e 7400     de.detail.none.t
   dd4a8:	6172 6563 6900 666e 006f 6177 6e72 6500     race.info.warn.e
   dd4b8:	7272 726f 7000 6e61 6369 6100 6c6c 0000     rror.panic.all..

000dd4c8 <_ZTVN5spark9MeshClassE>:
	...
   dd4d0:	7abf 000d 7ab5 000d 7aab 000d 7aa1 000d     .z...z...z...z..
   dd4e0:	7a95 000d 7a89 000d 7a7d 000d 7a75 000d     .z...z..}z..uz..
   dd4f0:	7a6b 000d 7a61 000d 7c2d 000d               kz..az..-|..

000dd4fc <_ZTVN5spark12NetworkClassE>:
	...
   dd504:	7bc5 000d 7bcf 000d 7bd9 000d 7be3 000d     .{...{...{...{..
   dd514:	7bed 000d 7bf9 000d 7c05 000d 7c11 000d     .{...{...|...|..
   dd524:	7c19 000d 7c23 000d 7c2d 000d               .|..#|..-|..

000dd530 <_ZTV8SPIClass>:
	...
   dd538:	7df5 000d 7df7 000d 2b25 3330 3a64 3025     .}...}..%+03d:%0
   dd548:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   dd558:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000dd568 <_ZTV11USARTSerial>:
	...
   dd570:	84f9 000d 8549 000d 8557 000d 7d0d 000d     ....I...W....}..
   dd580:	850d 000d 852f 000d 851b 000d 8543 000d     ..../.......C...
   dd590:	84fb 000d 84ff 000d                         ........

000dd598 <_ZTV9USBSerial>:
	...
   dd5a0:	8601 000d 8651 000d 865f 000d 7d0d 000d     ....Q..._....}..
   dd5b0:	863d 000d 8603 000d 8619 000d 864b 000d     =...........K...
   dd5c0:	862f 000d 85fd 000d                         /.......

000dd5c8 <day_name.4725>:
   dd5c8:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dd5d8:	6972 6153 4a74                                   riSat

000dd5dd <mon_name.4726>:
   dd5dd:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dd5ed:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dd5fd:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dd60d:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dd61d:	6425 000a                                   %d..

000dd621 <_ctype_>:
   dd621:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dd631:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dd641:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dd651:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dd661:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dd671:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dd681:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dd691:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dd6a1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dd724 <__sf_fake_stdin>:
	...

000dd744 <__sf_fake_stdout>:
	...

000dd764 <__sf_fake_stderr>:
	...
   dd784:	4f50 4953 0058 002e                         POSIX...

000dd78c <_DAYS_BEFORE_MONTH>:
   dd78c:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   dd79c:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   dd7ac:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000dd7bc <DAYS_IN_MONTH>:
   dd7bc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dd7cc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd7dc:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000dd7ec <__month_lengths>:
   dd7ec:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dd7fc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd80c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dd81c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dd82c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd83c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dd84c:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   dd85c:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   dd86c:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   dd87c:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   dd88c:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   dd89c:	302b 6c33 2564 322e 646c 0000               +03ld%.2ld..

000dd8a8 <fpi.5344>:
   dd8a8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dd8b8:	0000 0000                                   ....

000dd8bc <fpinan.5380>:
   dd8bc:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dd8cc:	0000 0000 666e 6900 696e 7974 0000 0000     ....nf.inity....
   dd8dc:	0000 0000                                   ....

000dd8e0 <tinytens>:
   dd8e0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dd8f0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dd900:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
   dd910:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
   dd920:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
   dd930:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
   dd940:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
   dd950:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
   dd960:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
   dd970:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
   dd980:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
   dd990:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
   dd9a0:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
   dd9b0:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
   dd9c0:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
   dd9d0:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
   dd9e0:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
   dd9f0:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
   dda00:	2065 4825 253a 3a4d 5325 2520 0059 4d50     e %H:%M:%S %Y.PM
   dda10:	2500 2061 6225 2520 2065 4825 253a 3a4d     .%a %b %e %H:%M:
   dda20:	5325 2520 205a 5925 2500 3a49 4d25 253a     %S %Z %Y.%I:%M:%
   dda30:	2053 7025 0000 0000                         S %p....

000dda38 <_C_time_locale>:
   dda38:	d910 000d d914 000d d918 000d d91c 000d     ................
   dda48:	d920 000d d924 000d d928 000d d92c 000d      ...$...(...,...
   dda58:	d930 000d d934 000d d938 000d d93c 000d     0...4...8...<...
   dda68:	d940 000d d948 000d d951 000d d957 000d     @...H...Q...W...
   dda78:	d920 000d d95d 000d d962 000d d967 000d      ...]...b...g...
   dda88:	d96e 000d d978 000d d980 000d d989 000d     n...x...........
   dda98:	d992 000d d996 000d d99a 000d d99e 000d     ................
   ddaa8:	d9a2 000d d9a6 000d d9aa 000d d9ae 000d     ................
   ddab8:	d9b5 000d d9bc 000d d9c4 000d d9ce 000d     ................
   ddac8:	d9d7 000d d9de 000d d9e7 000d d9f0 000d     ................
   ddad8:	d9f9 000d d038 000d da0e 000d da11 000d     ....8...........
   ddae8:	d940 000d d948 000d d951 000d d957 000d     @...H...Q...W...
   ddaf8:	d920 000d d95d 000d d962 000d d967 000d      ...]...b...g...
   ddb08:	d96e 000d d978 000d d980 000d d989 000d     n...x...........
   ddb18:	d414 000d da29 000d cd39 000d cd39 000d     ....)...9...9...
   ddb28:	cd39 000d cd39 000d cd39 000d 5a54 4700     9...9...9...TZ.G
   ddb38:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   ddb48:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   ddb58:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   ddb68:	3a6e 6825 2575 006e                         n:%hu%n.

000ddb70 <__mprec_tens>:
   ddb70:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   ddb80:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   ddb90:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   ddba0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   ddbb0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   ddbc0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   ddbd0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   ddbe0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   ddbf0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   ddc00:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   ddc10:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   ddc20:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   ddc30:	9db4 79d9 7843 44ea                         ...yCx.D

000ddc38 <__mprec_bigtens>:
   ddc38:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   ddc48:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   ddc58:	bf3c 7f73 4fdd 7515                         <.s..O.u

000ddc60 <p05.5387>:
   ddc60:	0005 0000 0019 0000 007d 0000               ........}...

000ddc6c <link_const_variable_data_end>:
   ddc6c:	000d5aa1 	.word	0x000d5aa1
   ddc70:	000d5e57 	.word	0x000d5e57
   ddc74:	000d670d 	.word	0x000d670d
   ddc78:	000d6e11 	.word	0x000d6e11
   ddc7c:	000d6efd 	.word	0x000d6efd
   ddc80:	000d7709 	.word	0x000d7709
   ddc84:	000d7a51 	.word	0x000d7a51
   ddc88:	000d7b75 	.word	0x000d7b75
   ddc8c:	000d7cf9 	.word	0x000d7cf9
   ddc90:	000d7dd9 	.word	0x000d7dd9
   ddc94:	000d8105 	.word	0x000d8105
   ddc98:	000d84e5 	.word	0x000d84e5
   ddc9c:	000d89b5 	.word	0x000d89b5
   ddca0:	000d8a0d 	.word	0x000d8a0d
   ddca4:	000d8ad1 	.word	0x000d8ad1
   ddca8:	000d8b55 	.word	0x000d8b55
   ddcac:	000d8bd9 	.word	0x000d8bd9
