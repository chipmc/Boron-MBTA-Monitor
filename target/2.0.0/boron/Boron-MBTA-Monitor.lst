
/Users/chipmc/Documents/Maker/Particle/Projects/Boron-MBTA-Monitor/target/2.0.0/boron/Boron-MBTA-Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007510  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       0000081c  2003f400  000db530  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000011c  2003e110  000dbd4c  0001e110  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005c4  2003e230  2003e230  0002e230  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000dbe68  000dbe68  0002be68  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dbe94  000dbe94  0002be94  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00251605  00000000  00000000  0002be98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0002390e  00000000  00000000  0027d49d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0004028d  00000000  00000000  002a0dab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000039d8  00000000  00000000  002e1038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000b298  00000000  00000000  002e4a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00046ed9  00000000  00000000  002efca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005bd2e  00000000  00000000  00336b81  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001278ba  00000000  00000000  003928af  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a314  00000000  00000000  004ba16c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 fb69 	bl	da708 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 fb8b 	bl	da758 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e110 	.word	0x2003e110
   d404c:	000dbd4c 	.word	0x000dbd4c
   d4050:	2003e22c 	.word	0x2003e22c
   d4054:	2003e230 	.word	0x2003e230
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f005 fd7d 	bl	d9b60 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000db4ec 	.word	0x000db4ec
   d4080:	000db524 	.word	0x000db524

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b978 	b.w	d5378 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 ffd1 	bl	d5030 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f005 bd27 	b.w	d9ae4 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 b8fd 	b.w	d8294 <malloc>

000d409a <_Znaj>:
   d409a:	f004 b8fb 	b.w	d8294 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 b901 	b.w	d82a4 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 ffb8 	bl	d8020 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7cb1 	.word	0x000d7cb1

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z11watchdogISRv>:

}

void watchdogISR()
{
  watchdogFlag = true;
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z11watchdogISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
}
   d40ce:	4770      	bx	lr
   d40d0:	2003e3f4 	.word	0x2003e3f4

000d40d4 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40d4:	b538      	push	{r3, r4, r5, lr}
   d40d6:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40d8:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40da:	b128      	cbz	r0, d40e8 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40dc:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40de:	210c      	movs	r1, #12
   d40e0:	f005 fe49 	bl	d9d76 <_ZdlPvj>
            wakeupSource = next;
   d40e4:	4628      	mov	r0, r5
        while (wakeupSource) {
   d40e6:	e7f8      	b.n	d40da <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d40e8:	4620      	mov	r0, r4
   d40ea:	bd38      	pop	{r3, r4, r5, pc}

000d40ec <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40ec:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40ee:	6803      	ldr	r3, [r0, #0]
   d40f0:	2b2f      	cmp	r3, #47	; 0x2f
{
   d40f2:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40f4:	d904      	bls.n	d4100 <nrf_gpio_pin_port_decode+0x14>
   d40f6:	4a07      	ldr	r2, [pc, #28]	; (d4114 <nrf_gpio_pin_port_decode+0x28>)
   d40f8:	2100      	movs	r1, #0
   d40fa:	200a      	movs	r0, #10
   d40fc:	f003 ff90 	bl	d8020 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4100:	6823      	ldr	r3, [r4, #0]
   d4102:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4104:	bf83      	ittte	hi
   d4106:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d410a:	4803      	ldrhi	r0, [pc, #12]	; (d4118 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d410c:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d410e:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d4112:	bd10      	pop	{r4, pc}
   d4114:	000d7cb1 	.word	0x000d7cb1
   d4118:	50000300 	.word	0x50000300

000d411c <_Z9resetFRAM6String>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
  return !Particle.connected();
}

int resetFRAM(String command)                                     // Will reset the local counts
{
   d411c:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d411e:	4904      	ldr	r1, [pc, #16]	; (d4130 <_Z9resetFRAM6String+0x14>)
   d4120:	f005 f937 	bl	d9392 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4124:	b118      	cbz	r0, d412e <_Z9resetFRAM6String+0x12>
  {
    fram.erase();
   d4126:	4803      	ldr	r0, [pc, #12]	; (d4134 <_Z9resetFRAM6String+0x18>)
   d4128:	f002 faf8 	bl	d671c <_ZN6MB85RC5eraseEv>
    return 1;
   d412c:	2001      	movs	r0, #1
  }
  else return 0;
}
   d412e:	bd08      	pop	{r3, pc}
   d4130:	000da9a4 	.word	0x000da9a4
   d4134:	2003e31c 	.word	0x2003e31c

000d4138 <_Z7sendNow6String>:
  }
  else return 0;
}

int sendNow(String command) // Function to force sending data in current hour
{
   d4138:	b508      	push	{r3, lr}
   d413a:	4904      	ldr	r1, [pc, #16]	; (d414c <_Z7sendNow6String+0x14>)
   d413c:	f005 f929 	bl	d9392 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4140:	b118      	cbz	r0, d414a <_Z7sendNow6String+0x12>
  {
    state = MEASURING_STATE;
   d4142:	4b03      	ldr	r3, [pc, #12]	; (d4150 <_Z7sendNow6String+0x18>)
   d4144:	2203      	movs	r2, #3
   d4146:	701a      	strb	r2, [r3, #0]
    return 1;
   d4148:	2001      	movs	r0, #1
  }
  else return 0;
}
   d414a:	bd08      	pop	{r3, pc}
   d414c:	000da9a4 	.word	0x000da9a4
   d4150:	2003e39c 	.word	0x2003e39c

000d4154 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4154:	b510      	push	{r4, lr}
   d4156:	4b03      	ldr	r3, [pc, #12]	; (d4164 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d4158:	6003      	str	r3, [r0, #0]
   d415a:	4604      	mov	r4, r0
   d415c:	f003 faec 	bl	d7738 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4160:	4620      	mov	r0, r4
   d4162:	bd10      	pop	{r4, pc}
   d4164:	000dad98 	.word	0x000dad98

000d4168 <_ZN17PublishQueueAsyncD0Ev>:
   d4168:	b510      	push	{r4, lr}
   d416a:	4604      	mov	r4, r0
   d416c:	f7ff fff2 	bl	d4154 <_ZN17PublishQueueAsyncD1Ev>
   d4170:	4620      	mov	r0, r4
   d4172:	2138      	movs	r1, #56	; 0x38
   d4174:	f005 fdff 	bl	d9d76 <_ZdlPvj>
   d4178:	4620      	mov	r0, r4
   d417a:	bd10      	pop	{r4, pc}

000d417c <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d417c:	b510      	push	{r4, lr}
   d417e:	4b03      	ldr	r3, [pc, #12]	; (d418c <_ZN8MB85RC64D1Ev+0x10>)
   d4180:	6003      	str	r3, [r0, #0]
   d4182:	4604      	mov	r4, r0
   d4184:	f002 faaa 	bl	d66dc <_ZN6MB85RCD1Ev>
   d4188:	4620      	mov	r0, r4
   d418a:	bd10      	pop	{r4, pc}
   d418c:	000dad7c 	.word	0x000dad7c

000d4190 <_ZN8MB85RC64D0Ev>:
   d4190:	b510      	push	{r4, lr}
   d4192:	4604      	mov	r4, r0
   d4194:	f7ff fff2 	bl	d417c <_ZN8MB85RC64D1Ev>
   d4198:	4620      	mov	r0, r4
   d419a:	2110      	movs	r1, #16
   d419c:	f005 fdeb 	bl	d9d76 <_ZdlPvj>
   d41a0:	4620      	mov	r0, r4
   d41a2:	bd10      	pop	{r4, pc}

000d41a4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41a4:	b510      	push	{r4, lr}
   d41a6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d41a8:	6800      	ldr	r0, [r0, #0]
   d41aa:	b108      	cbz	r0, d41b0 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41ac:	f004 f87a 	bl	d82a4 <free>
class SystemClass {
   d41b0:	4620      	mov	r0, r4
   d41b2:	bd10      	pop	{r4, pc}

000d41b4 <_ZN10CloudClass8syncTimeEv.isra.0>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   d41b4:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41b6:	f003 ffd5 	bl	d8164 <spark_cloud_flag_connected>
        if (!connected()) {
   d41ba:	b120      	cbz	r0, d41c6 <_ZN10CloudClass8syncTimeEv.isra.0+0x12>
    }
   d41bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return spark_sync_time(NULL);
   d41c0:	2000      	movs	r0, #0
   d41c2:	f003 bfef 	b.w	d81a4 <spark_sync_time>
    }
   d41c6:	bd08      	pop	{r3, pc}

000d41c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d41c8:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41ca:	2000      	movs	r0, #0
   d41cc:	f003 fff2 	bl	d81b4 <spark_sync_time_pending>
   d41d0:	b128      	cbz	r0, d41de <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41d2:	f003 ffc7 	bl	d8164 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41d6:	f080 0001 	eor.w	r0, r0, #1
   d41da:	b2c0      	uxtb	r0, r0
    }
   d41dc:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41de:	2001      	movs	r0, #1
   d41e0:	e7fc      	b.n	d41dc <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d41e2:	2300      	movs	r3, #0
   d41e4:	2204      	movs	r2, #4
   d41e6:	f003 bf9d 	b.w	d8124 <spark_variable>

000d41ea <_ZNK13LegacyAdapter13getSatellitesEv.isra.0>:
	}

	/**
	 * @brief Gets the number of satellites found
	 */
	uint8_t getSatellites() const {
   d41ea:	b510      	push	{r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d41ec:	2100      	movs	r1, #0
   d41ee:	4604      	mov	r4, r0
   d41f0:	4608      	mov	r0, r1
   d41f2:	f003 fd05 	bl	d7c00 <os_thread_scheduling>
	/**
	 * @brief Get the number of satellites
	 */
	TinyGPSInteger getSatellites() const {
	    SINGLE_THREADED_BLOCK() {
	    	return satellites;
   d41f6:	f8d4 40a0 	ldr.w	r4, [r4, #160]	; 0xa0
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d41fa:	2100      	movs	r1, #0
   d41fc:	2001      	movs	r0, #1
   d41fe:	f003 fcff 	bl	d7c00 <os_thread_scheduling>
		return (uint8_t) gpsData.getSatellites().value();
	}
   d4202:	b2e0      	uxtb	r0, r4
   d4204:	bd10      	pop	{r4, pc}

000d4206 <_ZNK13LegacyAdapter10readLatDegEv.isra.0>:
	float readLatDeg(void) const {
   d4206:	b530      	push	{r4, r5, lr}
        os_thread_scheduling(false, NULL);
   d4208:	2100      	movs	r1, #0
   d420a:	b08f      	sub	sp, #60	; 0x3c
   d420c:	4604      	mov	r4, r0
   d420e:	4608      	mov	r0, r1
   d4210:	f003 fcf6 	bl	d7c00 <os_thread_scheduling>
	    	return location;
   d4214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4216:	466d      	mov	r5, sp
   d4218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d421a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d421c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d421e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4222:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4226:	e885 0003 	stmia.w	r5, {r0, r1}
        os_thread_scheduling(true, NULL);
   d422a:	2100      	movs	r1, #0
   d422c:	2001      	movs	r0, #1
   d422e:	f003 fce7 	bl	d7c00 <os_thread_scheduling>
		return (float) gpsData.getLocation().lat();
   d4232:	4668      	mov	r0, sp
   d4234:	f001 fe38 	bl	d5ea8 <_ZN15TinyGPSLocation3latEv>
   d4238:	ec51 0b10 	vmov	r0, r1, d0
   d423c:	f006 f992 	bl	da564 <__aeabi_d2f>
	}
   d4240:	ee00 0a10 	vmov	s0, r0
   d4244:	b00f      	add	sp, #60	; 0x3c
   d4246:	bd30      	pop	{r4, r5, pc}

000d4248 <_ZNK13LegacyAdapter10readLonDegEv.isra.0>:
	float readLonDeg(void) const {
   d4248:	b530      	push	{r4, r5, lr}
        os_thread_scheduling(false, NULL);
   d424a:	2100      	movs	r1, #0
   d424c:	b08f      	sub	sp, #60	; 0x3c
   d424e:	4604      	mov	r4, r0
   d4250:	4608      	mov	r0, r1
   d4252:	f003 fcd5 	bl	d7c00 <os_thread_scheduling>
   d4256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4258:	466d      	mov	r5, sp
   d425a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d425c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d425e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4264:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4268:	e885 0003 	stmia.w	r5, {r0, r1}
        os_thread_scheduling(true, NULL);
   d426c:	2100      	movs	r1, #0
   d426e:	2001      	movs	r0, #1
   d4270:	f003 fcc6 	bl	d7c00 <os_thread_scheduling>
		return (float) gpsData.getLocation().lng();
   d4274:	4668      	mov	r0, sp
   d4276:	f001 fe3b 	bl	d5ef0 <_ZN15TinyGPSLocation3lngEv>
   d427a:	ec51 0b10 	vmov	r0, r1, d0
   d427e:	f006 f971 	bl	da564 <__aeabi_d2f>
	}
   d4282:	ee00 0a10 	vmov	s0, r0
   d4286:	b00f      	add	sp, #60	; 0x3c
   d4288:	bd30      	pop	{r4, r5, pc}

000d428a <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d428a:	2000      	movs	r0, #0
   d428c:	f003 bd38 	b.w	d7d00 <hal_timer_millis>

000d4290 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4290:	b40e      	push	{r1, r2, r3}
   d4292:	b510      	push	{r4, lr}
   d4294:	b08d      	sub	sp, #52	; 0x34
   d4296:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4298:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d429a:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d429e:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d42a0:	2300      	movs	r3, #0
   d42a2:	2020      	movs	r0, #32
   d42a4:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d42a8:	e9cd 4200 	strd	r4, r2, [sp]
   d42ac:	201e      	movs	r0, #30
   d42ae:	aa04      	add	r2, sp, #16
   d42b0:	f003 febe 	bl	d8030 <log_message_v>
}
   d42b4:	b00d      	add	sp, #52	; 0x34
   d42b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d42ba:	b003      	add	sp, #12
   d42bc:	4770      	bx	lr
	...

000d42c0 <fastPinGetPinmap>:

/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

inline const Hal_Pin_Info* fastPinGetPinmap() {
   d42c0:	b538      	push	{r3, r4, r5, lr}
    static Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42c2:	4c0a      	ldr	r4, [pc, #40]	; (d42ec <fastPinGetPinmap+0x2c>)
   d42c4:	4d0a      	ldr	r5, [pc, #40]	; (d42f0 <fastPinGetPinmap+0x30>)
   d42c6:	7823      	ldrb	r3, [r4, #0]
   d42c8:	f3bf 8f5b 	dmb	ish
   d42cc:	f013 0f01 	tst.w	r3, #1
   d42d0:	d109      	bne.n	d42e6 <fastPinGetPinmap+0x26>
   d42d2:	4620      	mov	r0, r4
   d42d4:	f7ff fef0 	bl	d40b8 <__cxa_guard_acquire>
   d42d8:	b128      	cbz	r0, d42e6 <fastPinGetPinmap+0x26>
   d42da:	f003 fd29 	bl	d7d30 <HAL_Pin_Map>
   d42de:	6028      	str	r0, [r5, #0]
   d42e0:	4620      	mov	r0, r4
   d42e2:	f7ff feee 	bl	d40c2 <__cxa_guard_release>
    return pinMap;
}
   d42e6:	6828      	ldr	r0, [r5, #0]
   d42e8:	bd38      	pop	{r3, r4, r5, pc}
   d42ea:	bf00      	nop
   d42ec:	2003e234 	.word	0x2003e234
   d42f0:	2003e238 	.word	0x2003e238

000d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42f6:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42f8:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42fc:	f88d 3000 	strb.w	r3, [sp]
   d4300:	f88d 5004 	strb.w	r5, [sp, #4]
   d4304:	68e4      	ldr	r4, [r4, #12]
   d4306:	233c      	movs	r3, #60	; 0x3c
   d4308:	47a0      	blx	r4
	}
   d430a:	b003      	add	sp, #12
   d430c:	bd30      	pop	{r4, r5, pc}
	...

000d4310 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4310:	b510      	push	{r4, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d4312:	780b      	ldrb	r3, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4314:	b092      	sub	sp, #72	; 0x48
   d4316:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d4318:	b97b      	cbnz	r3, d433a <_Z14UbidotsHandlerPKcS0_+0x2a>
    snprintf(responseString, sizeof(responseString),"No Data");
   d431a:	4919      	ldr	r1, [pc, #100]	; (d4380 <_Z14UbidotsHandlerPKcS0_+0x70>)
   d431c:	a802      	add	r0, sp, #8
   d431e:	f006 fa51 	bl	da7c4 <strcpy>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4322:	2300      	movs	r3, #0
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
   d4324:	f88d 3000 	strb.w	r3, [sp]
   d4328:	4b16      	ldr	r3, [pc, #88]	; (d4384 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d432a:	4917      	ldr	r1, [pc, #92]	; (d4388 <_Z14UbidotsHandlerPKcS0_+0x78>)
   d432c:	781b      	ldrb	r3, [r3, #0]
   d432e:	4817      	ldr	r0, [pc, #92]	; (d438c <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4330:	aa02      	add	r2, sp, #8
   d4332:	f7ff ffdf 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4336:	b012      	add	sp, #72	; 0x48
   d4338:	bd10      	pop	{r4, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d433a:	4608      	mov	r0, r1
   d433c:	f006 f9bc 	bl	da6b8 <atoi>
   d4340:	28c8      	cmp	r0, #200	; 0xc8
   d4342:	d10e      	bne.n	d4362 <_Z14UbidotsHandlerPKcS0_+0x52>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4344:	4912      	ldr	r1, [pc, #72]	; (d4390 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4346:	a802      	add	r0, sp, #8
   d4348:	f006 fa3c 	bl	da7c4 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d434c:	f005 fa3d 	bl	d97ca <_ZN9TimeClass3nowEv>
   d4350:	4b10      	ldr	r3, [pc, #64]	; (d4394 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d4352:	61d8      	str	r0, [r3, #28]
    systemStatusWriteNeeded = true;
   d4354:	4b10      	ldr	r3, [pc, #64]	; (d4398 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4356:	2201      	movs	r2, #1
   d4358:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d435a:	4b10      	ldr	r3, [pc, #64]	; (d439c <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d435c:	2200      	movs	r2, #0
   d435e:	701a      	strb	r2, [r3, #0]
   d4360:	e7df      	b.n	d4322 <_Z14UbidotsHandlerPKcS0_+0x12>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4362:	4620      	mov	r0, r4
   d4364:	f006 f9a8 	bl	da6b8 <atoi>
   d4368:	28c9      	cmp	r0, #201	; 0xc9
   d436a:	d0eb      	beq.n	d4344 <_Z14UbidotsHandlerPKcS0_+0x34>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d436c:	4620      	mov	r0, r4
   d436e:	f006 f9a3 	bl	da6b8 <atoi>
   d4372:	4a0b      	ldr	r2, [pc, #44]	; (d43a0 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d4374:	4603      	mov	r3, r0
   d4376:	2140      	movs	r1, #64	; 0x40
   d4378:	a802      	add	r0, sp, #8
   d437a:	f003 ffab 	bl	d82d4 <snprintf>
   d437e:	e7d0      	b.n	d4322 <_Z14UbidotsHandlerPKcS0_+0x12>
   d4380:	000da9e4 	.word	0x000da9e4
   d4384:	2003e28c 	.word	0x2003e28c
   d4388:	000daa1b 	.word	0x000daa1b
   d438c:	2003e340 	.word	0x2003e340
   d4390:	000da9ec 	.word	0x000da9ec
   d4394:	2003e3a0 	.word	0x2003e3a0
   d4398:	2003e3c0 	.word	0x2003e3c0
   d439c:	2003e2fe 	.word	0x2003e2fe
   d43a0:	000da9fe 	.word	0x000da9fe

000d43a4 <_Z12hardResetNow6String>:
{
   d43a4:	b513      	push	{r0, r1, r4, lr}
   d43a6:	490d      	ldr	r1, [pc, #52]	; (d43dc <_Z12hardResetNow6String+0x38>)
   d43a8:	f004 fff3 	bl	d9392 <_ZNK6String6equalsEPKc>
   d43ac:	2400      	movs	r4, #0
  if (command == "1")
   d43ae:	b198      	cbz	r0, d43d8 <_Z12hardResetNow6String+0x34>
    publishQueue.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d43b0:	4b0b      	ldr	r3, [pc, #44]	; (d43e0 <_Z12hardResetNow6String+0x3c>)
   d43b2:	f88d 4000 	strb.w	r4, [sp]
   d43b6:	781b      	ldrb	r3, [r3, #0]
   d43b8:	4a0a      	ldr	r2, [pc, #40]	; (d43e4 <_Z12hardResetNow6String+0x40>)
   d43ba:	490b      	ldr	r1, [pc, #44]	; (d43e8 <_Z12hardResetNow6String+0x44>)
   d43bc:	480b      	ldr	r0, [pc, #44]	; (d43ec <_Z12hardResetNow6String+0x48>)
   d43be:	f7ff ff99 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(2000);
   d43c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d43c6:	f003 ffcd 	bl	d8364 <delay>
    rtc.setAlarm(10);
   d43ca:	4809      	ldr	r0, [pc, #36]	; (d43f0 <_Z12hardResetNow6String+0x4c>)
   d43cc:	4623      	mov	r3, r4
   d43ce:	2201      	movs	r2, #1
   d43d0:	210a      	movs	r1, #10
   d43d2:	f002 feb1 	bl	d7138 <_ZN8MCP794108setAlarmEibi>
   d43d6:	2001      	movs	r0, #1
}
   d43d8:	b002      	add	sp, #8
   d43da:	bd10      	pop	{r4, pc}
   d43dc:	000da9a4 	.word	0x000da9a4
   d43e0:	2003e28c 	.word	0x2003e28c
   d43e4:	000daa28 	.word	0x000daa28
   d43e8:	000dac70 	.word	0x000dac70
   d43ec:	2003e340 	.word	0x2003e340
   d43f0:	2003e37c 	.word	0x2003e37c

000d43f4 <_Z14setverboseMode6String>:
  currentCountsWriteNeeded=true;
  systemStatusWriteNeeded=true;
}

int setverboseMode(String command) // Function to force sending data in current hour
{
   d43f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43f6:	4919      	ldr	r1, [pc, #100]	; (d445c <_Z14setverboseMode6String+0x68>)
   d43f8:	4604      	mov	r4, r0
   d43fa:	f004 ffca 	bl	d9392 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d43fe:	4605      	mov	r5, r0
   d4400:	b1b0      	cbz	r0, d4430 <_Z14setverboseMode6String+0x3c>
  {
    sysStatus.verboseMode = true;
   d4402:	4b17      	ldr	r3, [pc, #92]	; (d4460 <_Z14setverboseMode6String+0x6c>)
   d4404:	2401      	movs	r4, #1
   d4406:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d4408:	4b16      	ldr	r3, [pc, #88]	; (d4464 <_Z14setverboseMode6String+0x70>)
   d440a:	701c      	strb	r4, [r3, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d440c:	f003 feaa 	bl	d8164 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d4410:	b910      	cbnz	r0, d4418 <_Z14setverboseMode6String+0x24>
    return 1;
   d4412:	2001      	movs	r0, #1
    systemStatusWriteNeeded = true;
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE);
    return 1;
  }
  else return 0;
}
   d4414:	b003      	add	sp, #12
   d4416:	bd30      	pop	{r4, r5, pc}
   d4418:	2300      	movs	r3, #0
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d441a:	f88d 3000 	strb.w	r3, [sp]
   d441e:	4b12      	ldr	r3, [pc, #72]	; (d4468 <_Z14setverboseMode6String+0x74>)
   d4420:	4a12      	ldr	r2, [pc, #72]	; (d446c <_Z14setverboseMode6String+0x78>)
   d4422:	781b      	ldrb	r3, [r3, #0]
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d4424:	4912      	ldr	r1, [pc, #72]	; (d4470 <_Z14setverboseMode6String+0x7c>)
   d4426:	4813      	ldr	r0, [pc, #76]	; (d4474 <_Z14setverboseMode6String+0x80>)
   d4428:	f7ff ff64 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d442c:	4620      	mov	r0, r4
   d442e:	e7f1      	b.n	d4414 <_Z14setverboseMode6String+0x20>
   d4430:	4911      	ldr	r1, [pc, #68]	; (d4478 <_Z14setverboseMode6String+0x84>)
   d4432:	4620      	mov	r0, r4
   d4434:	f004 ffad 	bl	d9392 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4438:	2800      	cmp	r0, #0
   d443a:	d0eb      	beq.n	d4414 <_Z14setverboseMode6String+0x20>
    sysStatus.verboseMode = false;
   d443c:	4b08      	ldr	r3, [pc, #32]	; (d4460 <_Z14setverboseMode6String+0x6c>)
   d443e:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d4440:	4b08      	ldr	r3, [pc, #32]	; (d4464 <_Z14setverboseMode6String+0x70>)
   d4442:	2401      	movs	r4, #1
   d4444:	701c      	strb	r4, [r3, #0]
   d4446:	f003 fe8d 	bl	d8164 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d444a:	2800      	cmp	r0, #0
   d444c:	d0e1      	beq.n	d4412 <_Z14setverboseMode6String+0x1e>
   d444e:	4b06      	ldr	r3, [pc, #24]	; (d4468 <_Z14setverboseMode6String+0x74>)
   d4450:	f88d 5000 	strb.w	r5, [sp]
   d4454:	781b      	ldrb	r3, [r3, #0]
   d4456:	4a09      	ldr	r2, [pc, #36]	; (d447c <_Z14setverboseMode6String+0x88>)
   d4458:	e7e4      	b.n	d4424 <_Z14setverboseMode6String+0x30>
   d445a:	bf00      	nop
   d445c:	000da9a4 	.word	0x000da9a4
   d4460:	2003e3a0 	.word	0x2003e3a0
   d4464:	2003e3c0 	.word	0x2003e3c0
   d4468:	2003e28c 	.word	0x2003e28c
   d446c:	000daa40 	.word	0x000daa40
   d4470:	000daa63 	.word	0x000daa63
   d4474:	2003e340 	.word	0x2003e340
   d4478:	000daa51 	.word	0x000daa51
   d447c:	000daa53 	.word	0x000daa53

000d4480 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
   d4480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4484:	b0c8      	sub	sp, #288	; 0x120
   d4486:	4680      	mov	r8, r0
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
   d4488:	f7ff fe94 	bl	d41b4 <_ZN10CloudClass8syncTimeEv.isra.0>
        const system_tick_t start = millis();
   d448c:	f7ff fefd 	bl	d428a <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4490:	f04f 0a00 	mov.w	sl, #0
        const system_tick_t start = millis();
   d4494:	4681      	mov	r9, r0
        while (_while() && !_condition()) {
   d4496:	f247 562f 	movw	r6, #29999	; 0x752f
   d449a:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d449c:	f7ff fef5 	bl	d428a <_ZN11SystemClass6millisEv>
   d44a0:	ebb0 0409 	subs.w	r4, r0, r9
   d44a4:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d44a8:	42af      	cmp	r7, r5
   d44aa:	bf08      	it	eq
   d44ac:	42a6      	cmpeq	r6, r4
   d44ae:	d305      	bcc.n	d44bc <_Z11setTimeZone6String+0x3c>
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d44b0:	f7ff fe8a 	bl	d41c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d44b4:	b910      	cbnz	r0, d44bc <_Z11setTimeZone6String+0x3c>
            spark_process();
   d44b6:	f003 fe45 	bl	d8144 <spark_process>
        while (_while() && !_condition()) {
   d44ba:	e7ef      	b.n	d449c <_Z11setTimeZone6String+0x1c>
   d44bc:	f7ff fe84 	bl	d41c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d44c0:	f8d8 0000 	ldr.w	r0, [r8]
   d44c4:	220a      	movs	r2, #10
   d44c6:	a903      	add	r1, sp, #12
   d44c8:	f006 fa36 	bl	da938 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d44cc:	f100 030c 	add.w	r3, r0, #12
   d44d0:	b2db      	uxtb	r3, r3
   d44d2:	2b18      	cmp	r3, #24
   d44d4:	d848      	bhi.n	d4568 <_Z11setTimeZone6String+0xe8>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d44d6:	b245      	sxtb	r5, r0
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d44d8:	ee07 5a90 	vmov	s15, r5
   d44dc:	4b26      	ldr	r3, [pc, #152]	; (d4578 <_Z11setTimeZone6String+0xf8>)
   d44de:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d44e2:	2401      	movs	r4, #1
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d44e4:	ed83 0a05 	vstr	s0, [r3, #20]
  Time.zone(sysStatus.timezone);
   d44e8:	f005 f806 	bl	d94f8 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d44ec:	4b23      	ldr	r3, [pc, #140]	; (d457c <_Z11setTimeZone6String+0xfc>)
   d44ee:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d44f0:	f005 f9bc 	bl	d986c <_ZN9TimeClass5localEv>
   d44f4:	4606      	mov	r6, r0
   d44f6:	f005 f968 	bl	d97ca <_ZN9TimeClass3nowEv>
   d44fa:	1a30      	subs	r0, r6, r0
   d44fc:	f005 fd96 	bl	da02c <__aeabi_i2d>
   d4500:	a31b      	add	r3, pc, #108	; (adr r3, d4570 <_Z11setTimeZone6String+0xf0>)
   d4502:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4506:	f005 ff25 	bl	da354 <__aeabi_ddiv>
   d450a:	4a1d      	ldr	r2, [pc, #116]	; (d4580 <_Z11setTimeZone6String+0x100>)
   d450c:	e9cd 0100 	strd	r0, r1, [sp]
   d4510:	210a      	movs	r1, #10
   d4512:	481c      	ldr	r0, [pc, #112]	; (d4584 <_Z11setTimeZone6String+0x104>)
   d4514:	f003 fede 	bl	d82d4 <snprintf>
   d4518:	f003 fe24 	bl	d8164 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d451c:	b310      	cbz	r0, d4564 <_Z11setTimeZone6String+0xe4>
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d451e:	462b      	mov	r3, r5
   d4520:	4a19      	ldr	r2, [pc, #100]	; (d4588 <_Z11setTimeZone6String+0x108>)
   d4522:	4d1a      	ldr	r5, [pc, #104]	; (d458c <_Z11setTimeZone6String+0x10c>)
   d4524:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4528:	2600      	movs	r6, #0
   d452a:	a808      	add	r0, sp, #32
   d452c:	f003 fed2 	bl	d82d4 <snprintf>
    publishQueue.publish("Time",data, PRIVATE);
   d4530:	f88d 6000 	strb.w	r6, [sp]
   d4534:	4916      	ldr	r1, [pc, #88]	; (d4590 <_Z11setTimeZone6String+0x110>)
   d4536:	782b      	ldrb	r3, [r5, #0]
   d4538:	4816      	ldr	r0, [pc, #88]	; (d4594 <_Z11setTimeZone6String+0x114>)
   d453a:	aa08      	add	r2, sp, #32
   d453c:	f7ff feda 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d4540:	f005 f943 	bl	d97ca <_ZN9TimeClass3nowEv>
   d4544:	4602      	mov	r2, r0
   d4546:	17c3      	asrs	r3, r0, #31
   d4548:	a804      	add	r0, sp, #16
   d454a:	f005 f83b 	bl	d95c4 <_ZN9TimeClass7timeStrEx>
   d454e:	f88d 6000 	strb.w	r6, [sp]
   d4552:	782b      	ldrb	r3, [r5, #0]
   d4554:	9a04      	ldr	r2, [sp, #16]
   d4556:	490e      	ldr	r1, [pc, #56]	; (d4590 <_Z11setTimeZone6String+0x110>)
   d4558:	480e      	ldr	r0, [pc, #56]	; (d4594 <_Z11setTimeZone6String+0x114>)
   d455a:	f7ff fecb 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d455e:	a804      	add	r0, sp, #16
   d4560:	f004 fe9e 	bl	d92a0 <_ZN6StringD1Ev>
  }

  return 1;
   d4564:	4620      	mov	r0, r4
   d4566:	e000      	b.n	d456a <_Z11setTimeZone6String+0xea>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d4568:	2000      	movs	r0, #0
}
   d456a:	b048      	add	sp, #288	; 0x120
   d456c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4570:	00000000 	.word	0x00000000
   d4574:	40ac2000 	.word	0x40ac2000
   d4578:	2003e3a0 	.word	0x2003e3a0
   d457c:	2003e3c0 	.word	0x2003e3c0
   d4580:	000daa68 	.word	0x000daa68
   d4584:	2003e2f4 	.word	0x2003e2f4
   d4588:	000daa72 	.word	0x000daa72
   d458c:	2003e28c 	.word	0x2003e28c
   d4590:	000daa86 	.word	0x000daa86
   d4594:	2003e340 	.word	0x2003e340

000d4598 <_Z17setSampleInterval6String>:
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
  }
  return 1;
}

int setSampleInterval(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d4598:	b530      	push	{r4, r5, lr}
   d459a:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int8_t tempSampleInterval = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d459c:	220a      	movs	r2, #10
   d459e:	6800      	ldr	r0, [r0, #0]
   d45a0:	a903      	add	r1, sp, #12
   d45a2:	f006 f9c9 	bl	da938 <strtol>
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d45a6:	b2c3      	uxtb	r3, r0
   d45a8:	1e5a      	subs	r2, r3, #1
   d45aa:	2a3b      	cmp	r2, #59	; 0x3b
   d45ac:	d81f      	bhi.n	d45ee <_Z17setSampleInterval6String+0x56>
  sysStatus.sampleIntervalMin = tempSampleInterval;
  systemStatusWriteNeeded = true;
   d45ae:	4a11      	ldr	r2, [pc, #68]	; (d45f4 <_Z17setSampleInterval6String+0x5c>)
  sysStatus.sampleIntervalMin = tempSampleInterval;
   d45b0:	4d11      	ldr	r5, [pc, #68]	; (d45f8 <_Z17setSampleInterval6String+0x60>)
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d45b2:	4812      	ldr	r0, [pc, #72]	; (d45fc <_Z17setSampleInterval6String+0x64>)
  sysStatus.sampleIntervalMin = tempSampleInterval;
   d45b4:	71ab      	strb	r3, [r5, #6]
  systemStatusWriteNeeded = true;
   d45b6:	2401      	movs	r4, #1
   d45b8:	7014      	strb	r4, [r2, #0]
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d45ba:	210c      	movs	r1, #12
   d45bc:	4a10      	ldr	r2, [pc, #64]	; (d4600 <_Z17setSampleInterval6String+0x68>)
   d45be:	f003 fe89 	bl	d82d4 <snprintf>
  snprintf(data, sizeof(data), "Sample Interval is now %i minutes",sysStatus.sampleIntervalMin);
   d45c2:	79ab      	ldrb	r3, [r5, #6]
   d45c4:	4a0f      	ldr	r2, [pc, #60]	; (d4604 <_Z17setSampleInterval6String+0x6c>)
   d45c6:	f44f 7180 	mov.w	r1, #256	; 0x100
   d45ca:	a804      	add	r0, sp, #16
   d45cc:	f003 fe82 	bl	d82d4 <snprintf>
   d45d0:	f003 fdc8 	bl	d8164 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d45d4:	b148      	cbz	r0, d45ea <_Z17setSampleInterval6String+0x52>
   d45d6:	2300      	movs	r3, #0
    publishQueue.publish("Interval", data, PRIVATE);
   d45d8:	f88d 3000 	strb.w	r3, [sp]
   d45dc:	4b0a      	ldr	r3, [pc, #40]	; (d4608 <_Z17setSampleInterval6String+0x70>)
   d45de:	490b      	ldr	r1, [pc, #44]	; (d460c <_Z17setSampleInterval6String+0x74>)
   d45e0:	781b      	ldrb	r3, [r3, #0]
   d45e2:	480b      	ldr	r0, [pc, #44]	; (d4610 <_Z17setSampleInterval6String+0x78>)
   d45e4:	aa04      	add	r2, sp, #16
   d45e6:	f7ff fe85 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  return 1;
   d45ea:	4620      	mov	r0, r4
   d45ec:	e000      	b.n	d45f0 <_Z17setSampleInterval6String+0x58>
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d45ee:	2000      	movs	r0, #0
}
   d45f0:	b045      	add	sp, #276	; 0x114
   d45f2:	bd30      	pop	{r4, r5, pc}
   d45f4:	2003e3c0 	.word	0x2003e3c0
   d45f8:	2003e3a0 	.word	0x2003e3a0
   d45fc:	2003e12d 	.word	0x2003e12d
   d4600:	000daaa2 	.word	0x000daaa2
   d4604:	000daa8b 	.word	0x000daa8b
   d4608:	2003e28c 	.word	0x2003e28c
   d460c:	000dacb5 	.word	0x000dacb5
   d4610:	2003e340 	.word	0x2003e340

000d4614 <_Z9sendEventv>:
void sendEvent() {
   d4614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  snprintf(data, sizeof(data), "{\"cabinT\":%4.2f, \"ventT\":%4.2f, \"outsideT\":%4.2f, \"battery\":%i,  \"key1\":\"%s\", \"resets\":%i, \"alerts\":%i, \"timestamp\":%lu000, \"lat\":%f, \"lng\":%f}",current.tempArray[0], current.tempArray[1], current.tempArray[2],sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount, Time.now(), current.latitude, current.longitude);
   d4618:	4b23      	ldr	r3, [pc, #140]	; (d46a8 <_Z9sendEventv+0x94>)
   d461a:	4c24      	ldr	r4, [pc, #144]	; (d46ac <_Z9sendEventv+0x98>)
   d461c:	689d      	ldr	r5, [r3, #8]
   d461e:	69a2      	ldr	r2, [r4, #24]
   d4620:	691b      	ldr	r3, [r3, #16]
void sendEvent() {
   d4622:	b0d3      	sub	sp, #332	; 0x14c
  snprintf(data, sizeof(data), "{\"cabinT\":%4.2f, \"ventT\":%4.2f, \"outsideT\":%4.2f, \"battery\":%i,  \"key1\":\"%s\", \"resets\":%i, \"alerts\":%i, \"timestamp\":%lu000, \"lat\":%f, \"lng\":%f}",current.tempArray[0], current.tempArray[1], current.tempArray[2],sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount, Time.now(), current.latitude, current.longitude);
   d4624:	e9d4 6700 	ldrd	r6, r7, [r4]
   d4628:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
   d462c:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
   d4630:	9311      	str	r3, [sp, #68]	; 0x44
   d4632:	9210      	str	r2, [sp, #64]	; 0x40
   d4634:	f005 f8c9 	bl	d97ca <_ZN9TimeClass3nowEv>
   d4638:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
   d463c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d463e:	9308      	str	r3, [sp, #32]
   d4640:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d4644:	ed94 7b08 	vldr	d7, [r4, #32]
   d4648:	4b19      	ldr	r3, [pc, #100]	; (d46b0 <_Z9sendEventv+0x9c>)
   d464a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d464c:	900a      	str	r0, [sp, #40]	; 0x28
   d464e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
   d4652:	e9cd 5306 	strd	r5, r3, [sp, #24]
   d4656:	9209      	str	r2, [sp, #36]	; 0x24
   d4658:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d465c:	e9cd 8902 	strd	r8, r9, [sp, #8]
   d4660:	e9cd 6700 	strd	r6, r7, [sp]
   d4664:	4a13      	ldr	r2, [pc, #76]	; (d46b4 <_Z9sendEventv+0xa0>)
   d4666:	f44f 7180 	mov.w	r1, #256	; 0x100
   d466a:	a812      	add	r0, sp, #72	; 0x48
   d466c:	f003 fe32 	bl	d82d4 <snprintf>
  publishQueue.publish("Ubidots-MBTA-Hook-v2-Parse", data, PRIVATE);
   d4670:	2300      	movs	r3, #0
   d4672:	f88d 3000 	strb.w	r3, [sp]
   d4676:	4b10      	ldr	r3, [pc, #64]	; (d46b8 <_Z9sendEventv+0xa4>)
   d4678:	4910      	ldr	r1, [pc, #64]	; (d46bc <_Z9sendEventv+0xa8>)
   d467a:	781b      	ldrb	r3, [r3, #0]
   d467c:	4810      	ldr	r0, [pc, #64]	; (d46c0 <_Z9sendEventv+0xac>)
   d467e:	aa12      	add	r2, sp, #72	; 0x48
   d4680:	f7ff fe38 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                // set the data inflight flag
   d4684:	4b0f      	ldr	r3, [pc, #60]	; (d46c4 <_Z9sendEventv+0xb0>)
   d4686:	2201      	movs	r2, #1
   d4688:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d468a:	f003 fb19 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d468e:	4b0e      	ldr	r3, [pc, #56]	; (d46c8 <_Z9sendEventv+0xb4>)
   d4690:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();
   d4692:	f005 f8ab 	bl	d97ec <_ZN9TimeClass4hourEv>
   d4696:	4b0d      	ldr	r3, [pc, #52]	; (d46cc <_Z9sendEventv+0xb8>)
   d4698:	6018      	str	r0, [r3, #0]
  currentMinutePeriod = Time.minute();
   d469a:	f005 f8b3 	bl	d9804 <_ZN9TimeClass6minuteEv>
   d469e:	4b0c      	ldr	r3, [pc, #48]	; (d46d0 <_Z9sendEventv+0xbc>)
   d46a0:	6018      	str	r0, [r3, #0]
}
   d46a2:	b053      	add	sp, #332	; 0x14c
   d46a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d46a8:	2003e3a0 	.word	0x2003e3a0
   d46ac:	2003e2b8 	.word	0x2003e2b8
   d46b0:	2003e28e 	.word	0x2003e28e
   d46b4:	000daaad 	.word	0x000daaad
   d46b8:	2003e28c 	.word	0x2003e28c
   d46bc:	000dab3d 	.word	0x000dab3d
   d46c0:	2003e340 	.word	0x2003e340
   d46c4:	2003e2fe 	.word	0x2003e2fe
   d46c8:	2003e3f8 	.word	0x2003e3f8
   d46cc:	2003e2ec 	.word	0x2003e2ec
   d46d0:	2003e2f0 	.word	0x2003e2f0
   d46d4:	00000000 	.word	0x00000000

000d46d8 <_Z7getTempPh>:
double getTemp(uint8_t addr[8]) {
   d46d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d46da:	4605      	mov	r5, r0
  int   i = 0;
   d46dc:	2400      	movs	r4, #0
    _temp = ds18b20.getTemperature(addr);
   d46de:	4812      	ldr	r0, [pc, #72]	; (d4728 <_Z7getTempPh+0x50>)
   d46e0:	2200      	movs	r2, #0
   d46e2:	4629      	mov	r1, r5
   d46e4:	f001 fe88 	bl	d63f8 <_ZN7DS18B2014getTemperatureEPhb>
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d46e8:	480f      	ldr	r0, [pc, #60]	; (d4728 <_Z7getTempPh+0x50>)
    _temp = ds18b20.getTemperature(addr);
   d46ea:	ed8d 0a01 	vstr	s0, [sp, #4]
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d46ee:	f001 ff61 	bl	d65b4 <_ZN7DS18B208crcCheckEv>
   d46f2:	ed9d 0a01 	vldr	s0, [sp, #4]
   d46f6:	b928      	cbnz	r0, d4704 <_Z7getTempPh+0x2c>
   d46f8:	3401      	adds	r4, #1
   d46fa:	2c04      	cmp	r4, #4
   d46fc:	d1ef      	bne.n	d46de <_Z7getTempPh+0x6>
  else _temp = NAN;
   d46fe:	ed9f 0b08 	vldr	d0, [pc, #32]	; d4720 <_Z7getTempPh+0x48>
  return _temp;
   d4702:	e00a      	b.n	d471a <_Z7getTempPh+0x42>
  if (i < MAXRETRY) {
   d4704:	2c03      	cmp	r4, #3
   d4706:	d0fa      	beq.n	d46fe <_Z7getTempPh+0x26>
    _temp = ds18b20.convertToFahrenheit(_temp);
   d4708:	4807      	ldr	r0, [pc, #28]	; (d4728 <_Z7getTempPh+0x50>)
   d470a:	f001 ff39 	bl	d6580 <_ZN7DS18B2019convertToFahrenheitEf>
   d470e:	ee10 0a10 	vmov	r0, s0
   d4712:	f005 fc9d 	bl	da050 <__aeabi_f2d>
   d4716:	ec41 0b10 	vmov	d0, r0, r1
}
   d471a:	b003      	add	sp, #12
   d471c:	bd30      	pop	{r4, r5, pc}
   d471e:	bf00      	nop
   d4720:	00000000 	.word	0x00000000
   d4724:	7ff80000 	.word	0x7ff80000
   d4728:	2003e300 	.word	0x2003e300

000d472c <_Z17getSignalStrengthv>:
void getSignalStrength() {
   d472c:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d472e:	4d19      	ldr	r5, [pc, #100]	; (d4794 <_Z17getSignalStrengthv+0x68>)
   d4730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d4732:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4734:	ac04      	add	r4, sp, #16
   d4736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d473a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d473c:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4740:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
   d4744:	4914      	ldr	r1, [pc, #80]	; (d4798 <_Z17getSignalStrengthv+0x6c>)
   d4746:	a80e      	add	r0, sp, #56	; 0x38
   d4748:	f003 fe7a 	bl	d8440 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
   d474c:	a80e      	add	r0, sp, #56	; 0x38
   d474e:	f003 feca 	bl	d84e6 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4752:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
   d4754:	a80e      	add	r0, sp, #56	; 0x38
   d4756:	f003 fecf 	bl	d84f8 <_ZNK14CellularSignal11getStrengthEv>
  float qualityPercentage = sig.getQuality();
   d475a:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d475c:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d4760:	f003 fefa 	bl	d8558 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4764:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d4766:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d476a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d476e:	f005 fc6f 	bl	da050 <__aeabi_f2d>
   d4772:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4776:	4628      	mov	r0, r5
   d4778:	f005 fc6a 	bl	da050 <__aeabi_f2d>
   d477c:	e9cd 0100 	strd	r0, r1, [sp]
   d4780:	4a06      	ldr	r2, [pc, #24]	; (d479c <_Z17getSignalStrengthv+0x70>)
   d4782:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d4786:	4806      	ldr	r0, [pc, #24]	; (d47a0 <_Z17getSignalStrengthv+0x74>)
   d4788:	2140      	movs	r1, #64	; 0x40
   d478a:	f003 fda3 	bl	d82d4 <snprintf>
}
   d478e:	b019      	add	sp, #100	; 0x64
   d4790:	bd30      	pop	{r4, r5, pc}
   d4792:	bf00      	nop
   d4794:	000dadb8 	.word	0x000dadb8
   d4798:	2003e5ec 	.word	0x2003e5ec
   d479c:	000dab58 	.word	0x000dab58
   d47a0:	2003e23c 	.word	0x2003e23c

000d47a4 <_Z11petWatchdogv>:
{
   d47a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d47a6:	f7ff fd8b 	bl	d42c0 <fastPinGetPinmap>
   d47aa:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   d47ae:	015c      	lsls	r4, r3, #5
   d47b0:	f7ff fd86 	bl	d42c0 <fastPinGetPinmap>
   d47b4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
   d47b8:	f003 031f 	and.w	r3, r3, #31
   d47bc:	4323      	orrs	r3, r4
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d47be:	a801      	add	r0, sp, #4
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	f7ff fc93 	bl	d40ec <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d47c6:	9b01      	ldr	r3, [sp, #4]
   d47c8:	2401      	movs	r4, #1
   d47ca:	fa04 f303 	lsl.w	r3, r4, r3
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d47ce:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d47d2:	f7ff fd75 	bl	d42c0 <fastPinGetPinmap>
   d47d6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   d47da:	015d      	lsls	r5, r3, #5
   d47dc:	f7ff fd70 	bl	d42c0 <fastPinGetPinmap>
   d47e0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
   d47e4:	f003 031f 	and.w	r3, r3, #31
   d47e8:	432b      	orrs	r3, r5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d47ea:	a801      	add	r0, sp, #4
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	f7ff fc7d 	bl	d40ec <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d47f2:	9b01      	ldr	r3, [sp, #4]
   d47f4:	409c      	lsls	r4, r3
  watchdogFlag = false;
   d47f6:	4b03      	ldr	r3, [pc, #12]	; (d4804 <_Z11petWatchdogv+0x60>)
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d47f8:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
   d47fc:	2200      	movs	r2, #0
   d47fe:	701a      	strb	r2, [r3, #0]
}
   d4800:	b003      	add	sp, #12
   d4802:	bd30      	pop	{r4, r5, pc}
   d4804:	2003e3f4 	.word	0x2003e3f4

000d4808 <_Z14setPowerConfigv>:
int setPowerConfig() {
   d4808:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d480a:	2420      	movs	r4, #32
   d480c:	b090      	sub	sp, #64	; 0x40
   d480e:	4622      	mov	r2, r4
   d4810:	2100      	movs	r1, #0
   d4812:	4668      	mov	r0, sp
   d4814:	f005 ffa0 	bl	da758 <memset>
   d4818:	4622      	mov	r2, r4
   d481a:	2100      	movs	r1, #0
   d481c:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4820:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   d4824:	f005 ff98 	bl	da758 <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d4828:	2100      	movs	r1, #0
   d482a:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d482e:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d4832:	f003 fc63 	bl	d80fc <system_power_management_set_config>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4836:	f241 0370 	movw	r3, #4208	; 0x1070
   d483a:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d483e:	4b08      	ldr	r3, [pc, #32]	; (d4860 <_Z14setPowerConfigv+0x58>)
   d4840:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4842:	f241 0310 	movw	r3, #4112	; 0x1010
   d4846:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d484a:	9b00      	ldr	r3, [sp, #0]
   d484c:	2100      	movs	r1, #0
   d484e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4852:	4668      	mov	r0, sp
   d4854:	9300      	str	r3, [sp, #0]
   d4856:	f003 fc51 	bl	d80fc <system_power_management_set_config>
}
   d485a:	b010      	add	sp, #64	; 0x40
   d485c:	bd10      	pop	{r4, pc}
   d485e:	bf00      	nop
   d4860:	03840384 	.word	0x03840384

000d4864 <_Z17connectToParticlev>:
bool connectToParticle() {
   d4864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4868:	481d      	ldr	r0, [pc, #116]	; (d48e0 <_Z17connectToParticlev+0x7c>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d486a:	f8df a080 	ldr.w	sl, [pc, #128]	; d48ec <_Z17connectToParticlev+0x88>
   d486e:	6840      	ldr	r0, [r0, #4]
   d4870:	2300      	movs	r3, #0
   d4872:	461a      	mov	r2, r3
   d4874:	4619      	mov	r1, r3
   d4876:	f003 fcdd 	bl	d8234 <network_on>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d487a:	f003 fc6b 	bl	d8154 <spark_cloud_flag_connect>
   d487e:	f44f 7496 	mov.w	r4, #300	; 0x12c
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4882:	f04f 0b00 	mov.w	fp, #0
        while (_while() && !_condition()) {
   d4886:	f240 38e7 	movw	r8, #999	; 0x3e7
   d488a:	f04f 0900 	mov.w	r9, #0
        const system_tick_t start = millis();
   d488e:	f7ff fcfc 	bl	d428a <_ZN11SystemClass6millisEv>
   d4892:	4605      	mov	r5, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4894:	f7ff fcf9 	bl	d428a <_ZN11SystemClass6millisEv>
   d4898:	1b46      	subs	r6, r0, r5
   d489a:	eb61 070b 	sbc.w	r7, r1, fp
        while (_while() && !_condition()) {
   d489e:	45b9      	cmp	r9, r7
   d48a0:	bf08      	it	eq
   d48a2:	45b0      	cmpeq	r8, r6
   d48a4:	d305      	bcc.n	d48b2 <_Z17connectToParticlev+0x4e>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d48a6:	f003 fc5d 	bl	d8164 <spark_cloud_flag_connected>
   d48aa:	b910      	cbnz	r0, d48b2 <_Z17connectToParticlev+0x4e>
            spark_process();
   d48ac:	f003 fc4a 	bl	d8144 <spark_process>
        while (_while() && !_condition()) {
   d48b0:	e7f0      	b.n	d4894 <_Z17connectToParticlev+0x30>
   d48b2:	f003 fc57 	bl	d8164 <spark_cloud_flag_connected>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d48b6:	b120      	cbz	r0, d48c2 <_Z17connectToParticlev+0x5e>
   d48b8:	f003 fc54 	bl	d8164 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d48bc:	b950      	cbnz	r0, d48d4 <_Z17connectToParticlev+0x70>
}
   d48be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return HAL_Timer_Get_Milli_Seconds();
   d48c2:	f003 f9fd 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d48c6:	f8ca 0000 	str.w	r0, [sl]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d48ca:	f003 fc3b 	bl	d8144 <spark_process>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d48ce:	3c01      	subs	r4, #1
   d48d0:	d1dd      	bne.n	d488e <_Z17connectToParticlev+0x2a>
   d48d2:	e7f1      	b.n	d48b8 <_Z17connectToParticlev+0x54>
    sysStatus.connectedStatus = true;
   d48d4:	4a03      	ldr	r2, [pc, #12]	; (d48e4 <_Z17connectToParticlev+0x80>)
   d48d6:	2301      	movs	r3, #1
   d48d8:	70d3      	strb	r3, [r2, #3]
    systemStatusWriteNeeded = true;
   d48da:	4a03      	ldr	r2, [pc, #12]	; (d48e8 <_Z17connectToParticlev+0x84>)
   d48dc:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
   d48de:	e7ee      	b.n	d48be <_Z17connectToParticlev+0x5a>
   d48e0:	2003e5ec 	.word	0x2003e5ec
   d48e4:	2003e3a0 	.word	0x2003e3a0
   d48e8:	2003e3c0 	.word	0x2003e3c0
   d48ec:	2003e7d8 	.word	0x2003e7d8

000d48f0 <_Z12notConnectedv>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
   d48f0:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d48f2:	f003 fc37 	bl	d8164 <spark_cloud_flag_connected>
  return !Particle.connected();
   d48f6:	f080 0001 	eor.w	r0, r0, #1
}
   d48fa:	b2c0      	uxtb	r0, r0
   d48fc:	bd08      	pop	{r3, pc}
	...

000d4900 <_Z22disconnectFromParticlev>:
{
   d4900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4904:	b085      	sub	sp, #20
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d4906:	2600      	movs	r6, #0
  Particle.disconnect();
   d4908:	a801      	add	r0, sp, #4
   d490a:	e9cd 6601 	strd	r6, r6, [sp, #4]
   d490e:	f88d 600c 	strb.w	r6, [sp, #12]
   d4912:	f003 fef2 	bl	d86fa <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
   d4916:	f7ff fcb8 	bl	d428a <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d491a:	46b1      	mov	r9, r6
        const system_tick_t start = millis();
   d491c:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
   d491e:	f643 2697 	movw	r6, #14999	; 0x3a97
   d4922:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4924:	f7ff fcb1 	bl	d428a <_ZN11SystemClass6millisEv>
   d4928:	ebb0 0408 	subs.w	r4, r0, r8
   d492c:	eb61 0509 	sbc.w	r5, r1, r9
        while (_while() && !_condition()) {
   d4930:	42af      	cmp	r7, r5
   d4932:	bf08      	it	eq
   d4934:	42a6      	cmpeq	r6, r4
   d4936:	d305      	bcc.n	d4944 <_Z22disconnectFromParticlev+0x44>
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d4938:	f7ff ffda 	bl	d48f0 <_Z12notConnectedv>
   d493c:	b910      	cbnz	r0, d4944 <_Z22disconnectFromParticlev+0x44>
            spark_process();
   d493e:	f003 fc01 	bl	d8144 <spark_process>
        while (_while() && !_condition()) {
   d4942:	e7ef      	b.n	d4924 <_Z22disconnectFromParticlev+0x24>
   d4944:	f7ff ffd4 	bl	d48f0 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4948:	480a      	ldr	r0, [pc, #40]	; (d4974 <_Z22disconnectFromParticlev+0x74>)
   d494a:	2300      	movs	r3, #0
   d494c:	4619      	mov	r1, r3
   d494e:	461a      	mov	r2, r3
   d4950:	6840      	ldr	r0, [r0, #4]
   d4952:	f003 fc77 	bl	d8244 <network_off>
  sysStatus.connectedStatus = false;
   d4956:	4b08      	ldr	r3, [pc, #32]	; (d4978 <_Z22disconnectFromParticlev+0x78>)
   d4958:	2200      	movs	r2, #0
   d495a:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d495c:	4b07      	ldr	r3, [pc, #28]	; (d497c <_Z22disconnectFromParticlev+0x7c>)
   d495e:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4960:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  systemStatusWriteNeeded = true;
   d4964:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4966:	f003 fcfd 	bl	d8364 <delay>
}
   d496a:	4620      	mov	r0, r4
   d496c:	b005      	add	sp, #20
   d496e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4972:	bf00      	nop
   d4974:	2003e5ec 	.word	0x2003e5ec
   d4978:	2003e3a0 	.word	0x2003e3a0
   d497c:	2003e3c0 	.word	0x2003e3c0

000d4980 <_Z22publishStateTransitionv>:
{
   d4980:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4982:	4d11      	ldr	r5, [pc, #68]	; (d49c8 <_Z22publishStateTransitionv+0x48>)
   d4984:	4c11      	ldr	r4, [pc, #68]	; (d49cc <_Z22publishStateTransitionv+0x4c>)
   d4986:	4912      	ldr	r1, [pc, #72]	; (d49d0 <_Z22publishStateTransitionv+0x50>)
   d4988:	782a      	ldrb	r2, [r5, #0]
   d498a:	7820      	ldrb	r0, [r4, #0]
{
   d498c:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d498e:	230e      	movs	r3, #14
   d4990:	fb03 1202 	mla	r2, r3, r2, r1
   d4994:	9200      	str	r2, [sp, #0]
   d4996:	fb03 1300 	mla	r3, r3, r0, r1
   d499a:	4a0e      	ldr	r2, [pc, #56]	; (d49d4 <_Z22publishStateTransitionv+0x54>)
   d499c:	2128      	movs	r1, #40	; 0x28
   d499e:	a802      	add	r0, sp, #8
   d49a0:	f003 fc98 	bl	d82d4 <snprintf>
  oldState = state;
   d49a4:	782b      	ldrb	r3, [r5, #0]
   d49a6:	7023      	strb	r3, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49a8:	f003 fbdc 	bl	d8164 <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d49ac:	b148      	cbz	r0, d49c2 <_Z22publishStateTransitionv+0x42>
   d49ae:	2300      	movs	r3, #0
   d49b0:	f88d 3000 	strb.w	r3, [sp]
   d49b4:	4b08      	ldr	r3, [pc, #32]	; (d49d8 <_Z22publishStateTransitionv+0x58>)
   d49b6:	4909      	ldr	r1, [pc, #36]	; (d49dc <_Z22publishStateTransitionv+0x5c>)
   d49b8:	781b      	ldrb	r3, [r3, #0]
   d49ba:	4809      	ldr	r0, [pc, #36]	; (d49e0 <_Z22publishStateTransitionv+0x60>)
   d49bc:	aa02      	add	r2, sp, #8
   d49be:	f7ff fc99 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d49c2:	b00d      	add	sp, #52	; 0x34
   d49c4:	bd30      	pop	{r4, r5, pc}
   d49c6:	bf00      	nop
   d49c8:	2003e39c 	.word	0x2003e39c
   d49cc:	2003e33c 	.word	0x2003e33c
   d49d0:	2003e139 	.word	0x2003e139
   d49d4:	000dab71 	.word	0x000dab71
   d49d8:	2003e28c 	.word	0x2003e28c
   d49dc:	000dab7f 	.word	0x000dab7f
   d49e0:	2003e340 	.word	0x2003e340

000d49e4 <_Z12dailyCleanupv>:
void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
   d49e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d49e8:	4b17      	ldr	r3, [pc, #92]	; (d4a48 <_Z12dailyCleanupv+0x64>)
  sysStatus.verboseMode = false;
   d49ea:	4d18      	ldr	r5, [pc, #96]	; (d4a4c <_Z12dailyCleanupv+0x68>)
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d49ec:	4a18      	ldr	r2, [pc, #96]	; (d4a50 <_Z12dailyCleanupv+0x6c>)
   d49ee:	4919      	ldr	r1, [pc, #100]	; (d4a54 <_Z12dailyCleanupv+0x70>)
   d49f0:	4819      	ldr	r0, [pc, #100]	; (d4a58 <_Z12dailyCleanupv+0x74>)
   d49f2:	2400      	movs	r4, #0
   d49f4:	f88d 4000 	strb.w	r4, [sp]
   d49f8:	781b      	ldrb	r3, [r3, #0]
   d49fa:	f7ff fc7b 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d49fe:	712c      	strb	r4, [r5, #4]
  Particle.syncTime();                                                // Set the clock each day
   d4a00:	f7ff fbd8 	bl	d41b4 <_ZN10CloudClass8syncTimeEv.isra.0>
        const system_tick_t start = millis();
   d4a04:	f7ff fc41 	bl	d428a <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   d4a08:	f247 582f 	movw	r8, #29999	; 0x752f
        const system_tick_t start = millis();
   d4a0c:	4682      	mov	sl, r0
        while (_while() && !_condition()) {
   d4a0e:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4a12:	f7ff fc3a 	bl	d428a <_ZN11SystemClass6millisEv>
   d4a16:	ebb0 060a 	subs.w	r6, r0, sl
   d4a1a:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
   d4a1e:	45b9      	cmp	r9, r7
   d4a20:	bf08      	it	eq
   d4a22:	45b0      	cmpeq	r8, r6
   d4a24:	d305      	bcc.n	d4a32 <_Z12dailyCleanupv+0x4e>
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
   d4a26:	f7ff fbcf 	bl	d41c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d4a2a:	b910      	cbnz	r0, d4a32 <_Z12dailyCleanupv+0x4e>
            spark_process();
   d4a2c:	f003 fb8a 	bl	d8144 <spark_process>
        while (_while() && !_condition()) {
   d4a30:	e7ef      	b.n	d4a12 <_Z12dailyCleanupv+0x2e>
   d4a32:	f7ff fbc9 	bl	d41c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  sysStatus.resetCount = 0;
   d4a36:	2300      	movs	r3, #0
   d4a38:	612b      	str	r3, [r5, #16]
  systemStatusWriteNeeded=true;
   d4a3a:	4b08      	ldr	r3, [pc, #32]	; (d4a5c <_Z12dailyCleanupv+0x78>)
   d4a3c:	2201      	movs	r2, #1
   d4a3e:	701a      	strb	r2, [r3, #0]
}
   d4a40:	b002      	add	sp, #8
   d4a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4a46:	bf00      	nop
   d4a48:	2003e28c 	.word	0x2003e28c
   d4a4c:	2003e3a0 	.word	0x2003e3a0
   d4a50:	000dab90 	.word	0x000dab90
   d4a54:	000dab98 	.word	0x000dab98
   d4a58:	2003e340 	.word	0x2003e340
   d4a5c:	2003e3c0 	.word	0x2003e3c0

000d4a60 <_Z8isDSTusav>:

bool isDSTusa() {
   d4a60:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
   d4a62:	f004 fedb 	bl	d981c <_ZN9TimeClass3dayEv>
   d4a66:	4605      	mov	r5, r0
  int month = Time.month();
   d4a68:	f004 feec 	bl	d9844 <_ZN9TimeClass5monthEv>
   d4a6c:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d4a6e:	f004 fee1 	bl	d9834 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d4a72:	1f23      	subs	r3, r4, #4
   d4a74:	2b06      	cmp	r3, #6
   d4a76:	d90e      	bls.n	d4a96 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d4a78:	1ee3      	subs	r3, r4, #3
   d4a7a:	2b08      	cmp	r3, #8
   d4a7c:	d80d      	bhi.n	d4a9a <_Z8isDSTusav+0x3a>
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d4a7e:	3801      	subs	r0, #1
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d4a80:	1a2d      	subs	r5, r5, r0
   d4a82:	d504      	bpl.n	d4a8e <_Z8isDSTusav+0x2e>
   d4a84:	2c0b      	cmp	r4, #11
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d4a86:	bf14      	ite	ne
   d4a88:	2000      	movne	r0, #0
   d4a8a:	2001      	moveq	r0, #1
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d4a8c:	bd38      	pop	{r3, r4, r5, pc}
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d4a8e:	2d07      	cmp	r5, #7
   d4a90:	dd03      	ble.n	d4a9a <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d4a92:	2c03      	cmp	r4, #3
   d4a94:	e7f7      	b.n	d4a86 <_Z8isDSTusav+0x26>
    return true;
   d4a96:	2001      	movs	r0, #1
   d4a98:	e7f8      	b.n	d4a8c <_Z8isDSTusav+0x2c>
    return false;
   d4a9a:	2000      	movs	r0, #0
   d4a9c:	e7f6      	b.n	d4a8c <_Z8isDSTusav+0x2c>
	...

000d4aa0 <_Z12setDSTOffset6String>:
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d4aa0:	b570      	push	{r4, r5, r6, lr}
   d4aa2:	ed2d 8b02 	vpush	{d8}
   d4aa6:	b0c8      	sub	sp, #288	; 0x120
   d4aa8:	4605      	mov	r5, r0
  time_t t = Time.now();
   d4aaa:	f004 fe8e 	bl	d97ca <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4aae:	220a      	movs	r2, #10
  time_t t = Time.now();
   d4ab0:	4604      	mov	r4, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4ab2:	a903      	add	r1, sp, #12
   d4ab4:	6828      	ldr	r0, [r5, #0]
   d4ab6:	f005 ff3f 	bl	da938 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4aba:	b2c3      	uxtb	r3, r0
   d4abc:	2b02      	cmp	r3, #2
   d4abe:	d859      	bhi.n	d4b74 <_Z12setDSTOffset6String+0xd4>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d4ac0:	b243      	sxtb	r3, r0
   d4ac2:	ee08 3a10 	vmov	s16, r3
   d4ac6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d4aca:	eeb0 0a48 	vmov.f32	s0, s16
   d4ace:	f004 fd33 	bl	d9538 <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d4ad2:	4b2d      	ldr	r3, [pc, #180]	; (d4b88 <_Z12setDSTOffset6String+0xe8>)
   d4ad4:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d4ad8:	4b2c      	ldr	r3, [pc, #176]	; (d4b8c <_Z12setDSTOffset6String+0xec>)
   d4ada:	2201      	movs	r2, #1
   d4adc:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d4ade:	ee18 0a10 	vmov	r0, s16
   d4ae2:	f005 fab5 	bl	da050 <__aeabi_f2d>
   d4ae6:	4a2a      	ldr	r2, [pc, #168]	; (d4b90 <_Z12setDSTOffset6String+0xf0>)
   d4ae8:	e9cd 0100 	strd	r0, r1, [sp]
   d4aec:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4af0:	a808      	add	r0, sp, #32
   d4af2:	f003 fbef 	bl	d82d4 <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d4af6:	f004 fe4b 	bl	d9790 <_ZN9TimeClass7isValidEv>
   d4afa:	b128      	cbz	r0, d4b08 <_Z12setDSTOffset6String+0x68>
   d4afc:	f7ff ffb0 	bl	d4a60 <_Z8isDSTusav>
   d4b00:	2800      	cmp	r0, #0
   d4b02:	d034      	beq.n	d4b6e <_Z12setDSTOffset6String+0xce>
   d4b04:	f004 fd36 	bl	d9574 <_ZN9TimeClass8beginDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d4b08:	f004 feb0 	bl	d986c <_ZN9TimeClass5localEv>
   d4b0c:	4605      	mov	r5, r0
   d4b0e:	f004 fe5c 	bl	d97ca <_ZN9TimeClass3nowEv>
   d4b12:	1a28      	subs	r0, r5, r0
   d4b14:	f005 fa8a 	bl	da02c <__aeabi_i2d>
   d4b18:	a319      	add	r3, pc, #100	; (adr r3, d4b80 <_Z12setDSTOffset6String+0xe0>)
   d4b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b1e:	f005 fc19 	bl	da354 <__aeabi_ddiv>
   d4b22:	4a1c      	ldr	r2, [pc, #112]	; (d4b94 <_Z12setDSTOffset6String+0xf4>)
   d4b24:	e9cd 0100 	strd	r0, r1, [sp]
   d4b28:	210a      	movs	r1, #10
   d4b2a:	481b      	ldr	r0, [pc, #108]	; (d4b98 <_Z12setDSTOffset6String+0xf8>)
   d4b2c:	f003 fbd2 	bl	d82d4 <snprintf>
   d4b30:	f003 fb18 	bl	d8164 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4b34:	b1c8      	cbz	r0, d4b6a <_Z12setDSTOffset6String+0xca>
    publishQueue.publish("Time",data, PRIVATE);
   d4b36:	4d19      	ldr	r5, [pc, #100]	; (d4b9c <_Z12setDSTOffset6String+0xfc>)
   d4b38:	4919      	ldr	r1, [pc, #100]	; (d4ba0 <_Z12setDSTOffset6String+0x100>)
   d4b3a:	481a      	ldr	r0, [pc, #104]	; (d4ba4 <_Z12setDSTOffset6String+0x104>)
   d4b3c:	2600      	movs	r6, #0
   d4b3e:	f88d 6000 	strb.w	r6, [sp]
   d4b42:	782b      	ldrb	r3, [r5, #0]
   d4b44:	aa08      	add	r2, sp, #32
   d4b46:	f7ff fbd5 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
   d4b4a:	4622      	mov	r2, r4
   d4b4c:	17e3      	asrs	r3, r4, #31
   d4b4e:	a804      	add	r0, sp, #16
   d4b50:	f004 fd38 	bl	d95c4 <_ZN9TimeClass7timeStrEx>
   d4b54:	f88d 6000 	strb.w	r6, [sp]
   d4b58:	782b      	ldrb	r3, [r5, #0]
   d4b5a:	9a04      	ldr	r2, [sp, #16]
   d4b5c:	4910      	ldr	r1, [pc, #64]	; (d4ba0 <_Z12setDSTOffset6String+0x100>)
   d4b5e:	4811      	ldr	r0, [pc, #68]	; (d4ba4 <_Z12setDSTOffset6String+0x104>)
   d4b60:	f7ff fbc8 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4b64:	a804      	add	r0, sp, #16
   d4b66:	f004 fb9b 	bl	d92a0 <_ZN6StringD1Ev>
  return 1;
   d4b6a:	2001      	movs	r0, #1
   d4b6c:	e003      	b.n	d4b76 <_Z12setDSTOffset6String+0xd6>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d4b6e:	f004 fd0d 	bl	d958c <_ZN9TimeClass6endDSTEv>
   d4b72:	e7c9      	b.n	d4b08 <_Z12setDSTOffset6String+0x68>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4b74:	2000      	movs	r0, #0
}
   d4b76:	b048      	add	sp, #288	; 0x120
   d4b78:	ecbd 8b02 	vpop	{d8}
   d4b7c:	bd70      	pop	{r4, r5, r6, pc}
   d4b7e:	bf00      	nop
   d4b80:	00000000 	.word	0x00000000
   d4b84:	40ac2000 	.word	0x40ac2000
   d4b88:	2003e3a0 	.word	0x2003e3a0
   d4b8c:	2003e3c0 	.word	0x2003e3c0
   d4b90:	000daba6 	.word	0x000daba6
   d4b94:	000daa68 	.word	0x000daa68
   d4b98:	2003e2f4 	.word	0x2003e2f4
   d4b9c:	2003e28c 	.word	0x2003e28c
   d4ba0:	000daa86 	.word	0x000daa86
   d4ba4:	2003e340 	.word	0x2003e340

000d4ba8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4ba8:	b530      	push	{r4, r5, lr}
   d4baa:	b085      	sub	sp, #20
   d4bac:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4bae:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4bb0:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d4bb2:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d4bb4:	f003 fa44 	bl	d8040 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4bb8:	b9b0      	cbnz	r0, d4be8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4bba:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d4bbc:	b10c      	cbz	r4, d4bc2 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d4bbe:	6923      	ldr	r3, [r4, #16]
   d4bc0:	b923      	cbnz	r3, d4bcc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d4bc2:	4a0a      	ldr	r2, [pc, #40]	; (d4bec <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4bc4:	2100      	movs	r1, #0
   d4bc6:	200a      	movs	r0, #10
   d4bc8:	f003 fa2a 	bl	d8020 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4bcc:	2300      	movs	r3, #0
   d4bce:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4bd2:	230c      	movs	r3, #12
   d4bd4:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4bd8:	2304      	movs	r3, #4
   d4bda:	9303      	str	r3, [sp, #12]
   d4bdc:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4bde:	6923      	ldr	r3, [r4, #16]
   d4be0:	aa01      	add	r2, sp, #4
   d4be2:	2101      	movs	r1, #1
   d4be4:	4620      	mov	r0, r4
   d4be6:	4798      	blx	r3
}
   d4be8:	b005      	add	sp, #20
   d4bea:	bd30      	pop	{r4, r5, pc}
   d4bec:	000d7cb1 	.word	0x000d7cb1

000d4bf0 <_ZNK11SystemClass12batteryStateEv.isra.0>:
            return r;
        }
        return val;
    }

    int batteryState() const {
   d4bf0:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4bf2:	2007      	movs	r0, #7
   d4bf4:	a901      	add	r1, sp, #4
   d4bf6:	f7ff ffd7 	bl	d4ba8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d4bfa:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d4bfc:	bfa8      	it	ge
   d4bfe:	9801      	ldrge	r0, [sp, #4]
    }
   d4c00:	b003      	add	sp, #12
   d4c02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4c08 <_Z17getBatteryContextv>:
void getBatteryContext() {
   d4c08:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4c0a:	b089      	sub	sp, #36	; 0x24
   d4c0c:	a901      	add	r1, sp, #4
   d4c0e:	2003      	movs	r0, #3
   d4c10:	f7ff ffca 	bl	d4ba8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4c14:	2800      	cmp	r0, #0
   d4c16:	d139      	bne.n	d4c8c <_Z17getBatteryContextv+0x84>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4c18:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d4c1c:	ee07 3a90 	vmov	s15, r3
   d4c20:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
   d4c24:	4d23      	ldr	r5, [pc, #140]	; (d4cb4 <_Z17getBatteryContextv+0xac>)
  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge
   d4c26:	4e24      	ldr	r6, [pc, #144]	; (d4cb8 <_Z17getBatteryContextv+0xb0>)
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
   d4c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4c2a:	ac01      	add	r4, sp, #4
   d4c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge
   d4c32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
   d4c36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge
   d4c3a:	edc6 7a02 	vstr	s15, [r6, #8]
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4c3e:	f7ff ffd7 	bl	d4bf0 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4c42:	ab08      	add	r3, sp, #32
   d4c44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  if (!alreadyOnBattery && System.batteryState() == 4) {                          // Keep track how long we are on battery power
   d4c48:	4d1c      	ldr	r5, [pc, #112]	; (d4cbc <_Z17getBatteryContextv+0xb4>)
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4c4a:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4c4e:	4a1c      	ldr	r2, [pc, #112]	; (d4cc0 <_Z17getBatteryContextv+0xb8>)
   d4c50:	481c      	ldr	r0, [pc, #112]	; (d4cc4 <_Z17getBatteryContextv+0xbc>)
   d4c52:	2110      	movs	r1, #16
   d4c54:	f003 fb3e 	bl	d82d4 <snprintf>
  if (!alreadyOnBattery && System.batteryState() == 4) {                          // Keep track how long we are on battery power
   d4c58:	782b      	ldrb	r3, [r5, #0]
   d4c5a:	4634      	mov	r4, r6
   d4c5c:	462f      	mov	r7, r5
   d4c5e:	4e1a      	ldr	r6, [pc, #104]	; (d4cc8 <_Z17getBatteryContextv+0xc0>)
   d4c60:	b9bb      	cbnz	r3, d4c92 <_Z17getBatteryContextv+0x8a>
   d4c62:	f7ff ffc5 	bl	d4bf0 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4c66:	2804      	cmp	r0, #4
   d4c68:	d113      	bne.n	d4c92 <_Z17getBatteryContextv+0x8a>
    alreadyOnBattery = true;
   d4c6a:	2301      	movs	r3, #1
   d4c6c:	702b      	strb	r3, [r5, #0]
   d4c6e:	f003 f827 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastTimePowered > 14400000 || sysStatus.stateOfCharge <= 50) {    // If we have been on battery for four hours, or the battery is less than 50%
   d4c72:	6833      	ldr	r3, [r6, #0]
   d4c74:	1ac0      	subs	r0, r0, r3
   d4c76:	4b15      	ldr	r3, [pc, #84]	; (d4ccc <_Z17getBatteryContextv+0xc4>)
   d4c78:	4298      	cmp	r0, r3
   d4c7a:	d819      	bhi.n	d4cb0 <_Z17getBatteryContextv+0xa8>
   d4c7c:	68a3      	ldr	r3, [r4, #8]
    sysStatus.lowBatteryMode = true;
   d4c7e:	2b32      	cmp	r3, #50	; 0x32
   d4c80:	bfcc      	ite	gt
   d4c82:	2300      	movgt	r3, #0
   d4c84:	2301      	movle	r3, #1
   d4c86:	7163      	strb	r3, [r4, #5]
}
   d4c88:	b009      	add	sp, #36	; 0x24
   d4c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -1.0f;
   d4c8c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4c90:	e7c8      	b.n	d4c24 <_Z17getBatteryContextv+0x1c>
  else if (System.batteryState() == 2 || System.batteryState() == 3) {            // If charged or charging
   d4c92:	f7ff ffad 	bl	d4bf0 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4c96:	2802      	cmp	r0, #2
   d4c98:	d105      	bne.n	d4ca6 <_Z17getBatteryContextv+0x9e>
    alreadyOnBattery = false;
   d4c9a:	2300      	movs	r3, #0
   d4c9c:	703b      	strb	r3, [r7, #0]
   d4c9e:	f003 f80f 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
    lastTimePowered = millis();
   d4ca2:	6030      	str	r0, [r6, #0]
   d4ca4:	e7e3      	b.n	d4c6e <_Z17getBatteryContextv+0x66>
  else if (System.batteryState() == 2 || System.batteryState() == 3) {            // If charged or charging
   d4ca6:	f7ff ffa3 	bl	d4bf0 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4caa:	2803      	cmp	r0, #3
   d4cac:	d1df      	bne.n	d4c6e <_Z17getBatteryContextv+0x66>
   d4cae:	e7f4      	b.n	d4c9a <_Z17getBatteryContextv+0x92>
    sysStatus.lowBatteryMode = true;
   d4cb0:	2301      	movs	r3, #1
   d4cb2:	e7e8      	b.n	d4c86 <_Z17getBatteryContextv+0x7e>
   d4cb4:	000dade0 	.word	0x000dade0
   d4cb8:	2003e3a0 	.word	0x2003e3a0
   d4cbc:	2003e28d 	.word	0x2003e28d
   d4cc0:	000dafe8 	.word	0x000dafe8
   d4cc4:	2003e28e 	.word	0x2003e28e
   d4cc8:	2003e338 	.word	0x2003e338
   d4ccc:	00dbba00 	.word	0x00dbba00

000d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4cd0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4cd2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4cd4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4cd6:	b17c      	cbz	r4, d4cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4cd8:	6863      	ldr	r3, [r4, #4]
   d4cda:	3b01      	subs	r3, #1
   d4cdc:	6063      	str	r3, [r4, #4]
   d4cde:	b95b      	cbnz	r3, d4cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4ce0:	6823      	ldr	r3, [r4, #0]
   d4ce2:	4620      	mov	r0, r4
   d4ce4:	689b      	ldr	r3, [r3, #8]
   d4ce6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4ce8:	68a3      	ldr	r3, [r4, #8]
   d4cea:	3b01      	subs	r3, #1
   d4cec:	60a3      	str	r3, [r4, #8]
   d4cee:	b91b      	cbnz	r3, d4cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4cf0:	6823      	ldr	r3, [r4, #0]
   d4cf2:	4620      	mov	r0, r4
   d4cf4:	68db      	ldr	r3, [r3, #12]
   d4cf6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4cf8:	4628      	mov	r0, r5
   d4cfa:	bd38      	pop	{r3, r4, r5, pc}

000d4cfc <_Z11displayInfov>:

void displayInfo()
{
   d4cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d4d00:	4c60      	ldr	r4, [pc, #384]	; (d4e84 <_Z11displayInfov+0x188>)
{
   d4d02:	b0ab      	sub	sp, #172	; 0xac
   d4d04:	f002 ffdc 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d4d08:	6823      	ldr	r3, [r4, #0]
   d4d0a:	1ac0      	subs	r0, r0, r3
   d4d0c:	f241 3387 	movw	r3, #4999	; 0x1387
   d4d10:	4298      	cmp	r0, r3
   d4d12:	f240 80b4 	bls.w	d4e7e <_Z11displayInfov+0x182>
   d4d16:	f002 ffd3 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
		lastSerial = millis();
   d4d1a:	6020      	str	r0, [r4, #0]

		char buf[128];
		if (t.gpsFix()) {
   d4d1c:	4c5a      	ldr	r4, [pc, #360]	; (d4e88 <_Z11displayInfov+0x18c>)
        os_thread_scheduling(false, NULL);
   d4d1e:	2100      	movs	r1, #0
   d4d20:	6865      	ldr	r5, [r4, #4]
   d4d22:	4608      	mov	r0, r1
   d4d24:	f002 ff6c 	bl	d7c00 <os_thread_scheduling>
   d4d28:	f895 8000 	ldrb.w	r8, [r5]
   d4d2c:	6b6e      	ldr	r6, [r5, #52]	; 0x34
        os_thread_scheduling(true, NULL);
   d4d2e:	4d57      	ldr	r5, [pc, #348]	; (d4e8c <_Z11displayInfov+0x190>)
   d4d30:	2100      	movs	r1, #0
   d4d32:	2001      	movs	r0, #1
   d4d34:	f002 ff64 	bl	d7c00 <os_thread_scheduling>
	bool isValid() const    { return valid; }
   d4d38:	4627      	mov	r7, r4
	 * Note: It may take 10 seconds for for this to go to false after losing GPS signal.
	 */
	bool gpsFix(void) const {
		TinyGPSLocation location = gpsData.getLocation();

		return location.isValid() && location.age() < MAX_GPS_AGE_MS;
   d4d3a:	f1b8 0f00 	cmp.w	r8, #0
   d4d3e:	d112      	bne.n	d4d66 <_Z11displayInfov+0x6a>
				unsigned long elapsed = millis() - startFix;
				Log.info("%lu milliseconds to get GPS fix", elapsed);
			}
		}
		else {
			snprintf(buf, sizeof(buf), "no location satellites:%d", t.getSatellites());
   d4d40:	6878      	ldr	r0, [r7, #4]
   d4d42:	f7ff fa52 	bl	d41ea <_ZNK13LegacyAdapter13getSatellitesEv.isra.0>
   d4d46:	4a52      	ldr	r2, [pc, #328]	; (d4e90 <_Z11displayInfov+0x194>)
   d4d48:	4603      	mov	r3, r0
   d4d4a:	2180      	movs	r1, #128	; 0x80
   d4d4c:	a80a      	add	r0, sp, #40	; 0x28
   d4d4e:	f003 fac1 	bl	d82d4 <snprintf>
			if (!gettingFix) {
   d4d52:	782b      	ldrb	r3, [r5, #0]
   d4d54:	2b00      	cmp	r3, #0
   d4d56:	d173      	bne.n	d4e40 <_Z11displayInfov+0x144>
				gettingFix = true;
   d4d58:	2301      	movs	r3, #1
   d4d5a:	702b      	strb	r3, [r5, #0]
   d4d5c:	f002 ffb0 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
				startFix = millis();
   d4d60:	4b4c      	ldr	r3, [pc, #304]	; (d4e94 <_Z11displayInfov+0x198>)
   d4d62:	6018      	str	r0, [r3, #0]
   d4d64:	e06c      	b.n	d4e40 <_Z11displayInfov+0x144>
   d4d66:	f002 ffab 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
   d4d6a:	f242 730f 	movw	r3, #9999	; 0x270f
	uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   d4d6e:	1b80      	subs	r0, r0, r6
   d4d70:	4298      	cmp	r0, r3
   d4d72:	d8e5      	bhi.n	d4d40 <_Z11displayInfov+0x44>
      current.latitude = t.readLatDeg();
   d4d74:	6860      	ldr	r0, [r4, #4]
   d4d76:	4e48      	ldr	r6, [pc, #288]	; (d4e98 <_Z11displayInfov+0x19c>)
   d4d78:	f7ff fa45 	bl	d4206 <_ZNK13LegacyAdapter10readLatDegEv.isra.0>
   d4d7c:	ee10 0a10 	vmov	r0, s0
   d4d80:	f005 f966 	bl	da050 <__aeabi_f2d>
   d4d84:	e9c6 0108 	strd	r0, r1, [r6, #32]
      current.longitude = t.readLonDeg();
   d4d88:	6860      	ldr	r0, [r4, #4]
   d4d8a:	f7ff fa5d 	bl	d4248 <_ZNK13LegacyAdapter10readLonDegEv.isra.0>
   d4d8e:	ee10 0a10 	vmov	r0, s0
   d4d92:	f005 f95d 	bl	da050 <__aeabi_f2d>
   d4d96:	e9c6 010a 	strd	r0, r1, [r6, #40]	; 0x28
			snprintf(buf, sizeof(buf), "location:%f,%f altitude:%f satellites:%d hdop:%l", t.readLatDeg(), t.readLonDeg(), t.getAltitude(), t.getSatellites(), t.getTinyGPSPlus()->getHDOP().value());
   d4d9a:	6860      	ldr	r0, [r4, #4]
   d4d9c:	f7ff fa33 	bl	d4206 <_ZNK13LegacyAdapter10readLatDegEv.isra.0>
   d4da0:	6860      	ldr	r0, [r4, #4]
   d4da2:	ee10 6a10 	vmov	r6, s0
   d4da6:	f7ff fa4f 	bl	d4248 <_ZNK13LegacyAdapter10readLonDegEv.isra.0>
        os_thread_scheduling(false, NULL);
   d4daa:	2100      	movs	r1, #0
   d4dac:	f8d4 8004 	ldr.w	r8, [r4, #4]
   d4db0:	4608      	mov	r0, r1
   d4db2:	ee10 7a10 	vmov	r7, s0
   d4db6:	f002 ff23 	bl	d7c00 <os_thread_scheduling>
        os_thread_scheduling(true, NULL);
   d4dba:	2100      	movs	r1, #0
   d4dbc:	2001      	movs	r0, #1
	    	return altitude;
   d4dbe:	f8d8 9080 	ldr.w	r9, [r8, #128]	; 0x80
   d4dc2:	f002 ff1d 	bl	d7c00 <os_thread_scheduling>
   d4dc6:	6860      	ldr	r0, [r4, #4]
   d4dc8:	f7ff fa0f 	bl	d41ea <_ZNK13LegacyAdapter13getSatellitesEv.isra.0>
   d4dcc:	4680      	mov	r8, r0
   d4dce:	4620      	mov	r0, r4
   d4dd0:	f000 feca 	bl	d5b68 <_ZN12AssetTracker14getTinyGPSPlusEv>
        os_thread_scheduling(false, NULL);
   d4dd4:	2100      	movs	r1, #0
   d4dd6:	4604      	mov	r4, r0
   d4dd8:	4608      	mov	r0, r1
   d4dda:	f002 ff11 	bl	d7c00 <os_thread_scheduling>
     * configuration in the sky. HDOP is a factor in determining the relative accuracy of a horizontal position.
     * The smaller the DOP number, the better the geometry.
	 */
	TinyGPSDecimal getHDOP() const {
	    SINGLE_THREADED_BLOCK() {
	    	return hdop;
   d4dde:	f8d4 40b0 	ldr.w	r4, [r4, #176]	; 0xb0
        os_thread_scheduling(true, NULL);
   d4de2:	2100      	movs	r1, #0
   d4de4:	2001      	movs	r0, #1
   d4de6:	f002 ff0b 	bl	d7c00 <os_thread_scheduling>
	double meters()       { return value() / 100.0; }
   d4dea:	4648      	mov	r0, r9
   d4dec:	e9cd 8406 	strd	r8, r4, [sp, #24]
   d4df0:	f005 f91c 	bl	da02c <__aeabi_i2d>
   d4df4:	4b29      	ldr	r3, [pc, #164]	; (d4e9c <_Z11displayInfov+0x1a0>)
   d4df6:	2200      	movs	r2, #0
   d4df8:	f005 faac 	bl	da354 <__aeabi_ddiv>
		return gpsData.getAltitude().meters();
   d4dfc:	f005 fbb2 	bl	da564 <__aeabi_d2f>
   d4e00:	f005 f926 	bl	da050 <__aeabi_f2d>
   d4e04:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4e08:	4638      	mov	r0, r7
   d4e0a:	f005 f921 	bl	da050 <__aeabi_f2d>
   d4e0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4e12:	4630      	mov	r0, r6
   d4e14:	f005 f91c 	bl	da050 <__aeabi_f2d>
   d4e18:	4a21      	ldr	r2, [pc, #132]	; (d4ea0 <_Z11displayInfov+0x1a4>)
   d4e1a:	e9cd 0100 	strd	r0, r1, [sp]
   d4e1e:	2180      	movs	r1, #128	; 0x80
   d4e20:	a80a      	add	r0, sp, #40	; 0x28
   d4e22:	f003 fa57 	bl	d82d4 <snprintf>
			if (gettingFix) {
   d4e26:	782b      	ldrb	r3, [r5, #0]
   d4e28:	b153      	cbz	r3, d4e40 <_Z11displayInfov+0x144>
				gettingFix = false;
   d4e2a:	2300      	movs	r3, #0
   d4e2c:	702b      	strb	r3, [r5, #0]
   d4e2e:	f002 ff47 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
				unsigned long elapsed = millis() - startFix;
   d4e32:	4b18      	ldr	r3, [pc, #96]	; (d4e94 <_Z11displayInfov+0x198>)
				Log.info("%lu milliseconds to get GPS fix", elapsed);
   d4e34:	491b      	ldr	r1, [pc, #108]	; (d4ea4 <_Z11displayInfov+0x1a8>)
				unsigned long elapsed = millis() - startFix;
   d4e36:	681a      	ldr	r2, [r3, #0]
				Log.info("%lu milliseconds to get GPS fix", elapsed);
   d4e38:	1a82      	subs	r2, r0, r2
   d4e3a:	481b      	ldr	r0, [pc, #108]	; (d4ea8 <_Z11displayInfov+0x1ac>)
   d4e3c:	f7ff fa28 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
			}
		}
		Log.info(buf);
   d4e40:	4819      	ldr	r0, [pc, #100]	; (d4ea8 <_Z11displayInfov+0x1ac>)
   d4e42:	a90a      	add	r1, sp, #40	; 0x28
   d4e44:	f7ff fa24 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
   d4e48:	f003 f98c 	bl	d8164 <spark_cloud_flag_connected>

		if (Particle.connected()) {
   d4e4c:	b1b8      	cbz	r0, d4e7e <_Z11displayInfov+0x182>
			if (millis() - lastPublish >= PUBLISH_PERIOD) {
   d4e4e:	4c17      	ldr	r4, [pc, #92]	; (d4eac <_Z11displayInfov+0x1b0>)
   d4e50:	f002 ff36 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
   d4e54:	6823      	ldr	r3, [r4, #0]
   d4e56:	1ac0      	subs	r0, r0, r3
   d4e58:	4b15      	ldr	r3, [pc, #84]	; (d4eb0 <_Z11displayInfov+0x1b4>)
   d4e5a:	4298      	cmp	r0, r3
   d4e5c:	d90f      	bls.n	d4e7e <_Z11displayInfov+0x182>
   d4e5e:	f002 ff2f 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
   d4e62:	4b14      	ldr	r3, [pc, #80]	; (d4eb4 <_Z11displayInfov+0x1b8>)
				lastPublish = millis();
   d4e64:	6020      	str	r0, [r4, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4e66:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4e68:	f88d 3000 	strb.w	r3, [sp]
   d4e6c:	a808      	add	r0, sp, #32
   d4e6e:	4912      	ldr	r1, [pc, #72]	; (d4eb8 <_Z11displayInfov+0x1bc>)
   d4e70:	233c      	movs	r3, #60	; 0x3c
   d4e72:	aa0a      	add	r2, sp, #40	; 0x28
   d4e74:	f003 fd36 	bl	d88e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4e78:	a809      	add	r0, sp, #36	; 0x24
   d4e7a:	f7ff ff29 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
				Particle.publish("gps", buf, PRIVATE);
			}
		}
	}
}
   d4e7e:	b02b      	add	sp, #172	; 0xac
   d4e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4e84:	2003e334 	.word	0x2003e334
   d4e88:	2003e3c4 	.word	0x2003e3c4
   d4e8c:	2003e32c 	.word	0x2003e32c
   d4e90:	000dabb7 	.word	0x000dabb7
   d4e94:	2003e398 	.word	0x2003e398
   d4e98:	2003e2b8 	.word	0x2003e2b8
   d4e9c:	40590000 	.word	0x40590000
   d4ea0:	000dabd1 	.word	0x000dabd1
   d4ea4:	000dac02 	.word	0x000dac02
   d4ea8:	2003e624 	.word	0x2003e624
   d4eac:	2003e330 	.word	0x2003e330
   d4eb0:	0001d4bf 	.word	0x0001d4bf
   d4eb4:	2003e28c 	.word	0x2003e28c
   d4eb8:	000dac22 	.word	0x000dac22

000d4ebc <_Z16takeMeasurementsv>:
{
   d4ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  displayInfo();
   d4ebe:	f7ff ff1d 	bl	d4cfc <_Z11displayInfov>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4ec2:	4b24      	ldr	r3, [pc, #144]	; (d4f54 <_Z16takeMeasurementsv+0x98>)
   d4ec4:	2200      	movs	r2, #0
   d4ec6:	6858      	ldr	r0, [r3, #4]
   d4ec8:	4611      	mov	r1, r2
   d4eca:	f003 f9ab 	bl	d8224 <network_ready>
  if (Cellular.ready()) getSignalStrength();                        // Test signal strength if the cellular modem is on and ready
   d4ece:	b108      	cbz	r0, d4ed4 <_Z16takeMeasurementsv+0x18>
   d4ed0:	f7ff fc2c 	bl	d472c <_Z17getSignalStrengthv>
   d4ed4:	4d20      	ldr	r5, [pc, #128]	; (d4f58 <_Z16takeMeasurementsv+0x9c>)
    float temp = getTemp(sensorAddresses[i]);
   d4ed6:	4f21      	ldr	r7, [pc, #132]	; (d4f5c <_Z16takeMeasurementsv+0xa0>)
{
   d4ed8:	2400      	movs	r4, #0
   d4eda:	462e      	mov	r6, r5
    float temp = getTemp(sensorAddresses[i]);
   d4edc:	1938      	adds	r0, r7, r4
   d4ede:	f7ff fbfb 	bl	d46d8 <_Z7getTempPh>
   d4ee2:	ec51 0b10 	vmov	r0, r1, d0
   d4ee6:	f005 fb3d 	bl	da564 <__aeabi_d2f>
   d4eea:	ee07 0a90 	vmov	s15, r0
    if (!isnan(temp)) current.tempArray[i] = temp;
   d4eee:	eef4 7a67 	vcmp.f32	s15, s15
   d4ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ef6:	d603      	bvs.n	d4f00 <_Z16takeMeasurementsv+0x44>
   d4ef8:	f005 f8aa 	bl	da050 <__aeabi_f2d>
   d4efc:	e9c5 0100 	strd	r0, r1, [r5]
  for (int i = 0; i < nSENSORS; i++) {
   d4f00:	3408      	adds	r4, #8
   d4f02:	2c18      	cmp	r4, #24
   d4f04:	f105 0508 	add.w	r5, r5, #8
   d4f08:	d1e8      	bne.n	d4edc <_Z16takeMeasurementsv+0x20>
  snprintf(cabinTempStr, sizeof(cabinTempStr),"%4.2f F", current.tempArray[0]);
   d4f0a:	e9d6 2300 	ldrd	r2, r3, [r6]
   d4f0e:	210c      	movs	r1, #12
   d4f10:	e9cd 2300 	strd	r2, r3, [sp]
   d4f14:	4812      	ldr	r0, [pc, #72]	; (d4f60 <_Z16takeMeasurementsv+0xa4>)
   d4f16:	4a13      	ldr	r2, [pc, #76]	; (d4f64 <_Z16takeMeasurementsv+0xa8>)
   d4f18:	f003 f9dc 	bl	d82d4 <snprintf>
  snprintf(ventTempStr, sizeof(ventTempStr),"%4.2f F", current.tempArray[1]);
   d4f1c:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
   d4f20:	210c      	movs	r1, #12
   d4f22:	e9cd 2300 	strd	r2, r3, [sp]
   d4f26:	4810      	ldr	r0, [pc, #64]	; (d4f68 <_Z16takeMeasurementsv+0xac>)
   d4f28:	4a0e      	ldr	r2, [pc, #56]	; (d4f64 <_Z16takeMeasurementsv+0xa8>)
   d4f2a:	f003 f9d3 	bl	d82d4 <snprintf>
  snprintf(outsideTempStr, sizeof(outsideTempStr),"%4.2f F", current.tempArray[2]);
   d4f2e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   d4f32:	210c      	movs	r1, #12
   d4f34:	e9cd 2300 	strd	r2, r3, [sp]
   d4f38:	480c      	ldr	r0, [pc, #48]	; (d4f6c <_Z16takeMeasurementsv+0xb0>)
   d4f3a:	4a0a      	ldr	r2, [pc, #40]	; (d4f64 <_Z16takeMeasurementsv+0xa8>)
   d4f3c:	f003 f9ca 	bl	d82d4 <snprintf>
  getBatteryContext();                                               // What is the battery up to?
   d4f40:	f7ff fe62 	bl	d4c08 <_Z17getBatteryContextv>
  systemStatusWriteNeeded=true;
   d4f44:	4a0a      	ldr	r2, [pc, #40]	; (d4f70 <_Z16takeMeasurementsv+0xb4>)
   d4f46:	2301      	movs	r3, #1
   d4f48:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded=true;
   d4f4a:	4a0a      	ldr	r2, [pc, #40]	; (d4f74 <_Z16takeMeasurementsv+0xb8>)
   d4f4c:	7013      	strb	r3, [r2, #0]
}
   d4f4e:	b003      	add	sp, #12
   d4f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4f52:	bf00      	nop
   d4f54:	2003e5ec 	.word	0x2003e5ec
   d4f58:	2003e2b8 	.word	0x2003e2b8
   d4f5c:	2003f400 	.word	0x2003f400
   d4f60:	2003e110 	.word	0x2003e110
   d4f64:	000dac26 	.word	0x000dac26
   d4f68:	2003e1a9 	.word	0x2003e1a9
   d4f6c:	2003e121 	.word	0x2003e121
   d4f70:	2003e3c0 	.word	0x2003e3c0
   d4f74:	2003e2e8 	.word	0x2003e2e8

000d4f78 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
   d4f78:	b510      	push	{r4, lr}
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d4f7a:	4c26      	ldr	r4, [pc, #152]	; (d5014 <_Z17checkSystemValuesv+0x9c>)
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
   d4f7c:	f7ff ff9e 	bl	d4ebc <_Z16takeMeasurementsv>
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d4f80:	78a3      	ldrb	r3, [r4, #2]
   d4f82:	2b01      	cmp	r3, #1
   d4f84:	bf84      	itt	hi
   d4f86:	2300      	movhi	r3, #0
   d4f88:	70a3      	strbhi	r3, [r4, #2]
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d4f8a:	78e3      	ldrb	r3, [r4, #3]
   d4f8c:	2b01      	cmp	r3, #1
   d4f8e:	d905      	bls.n	d4f9c <_Z17checkSystemValuesv+0x24>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4f90:	f003 f8e8 	bl	d8164 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d4f94:	2800      	cmp	r0, #0
   d4f96:	d03b      	beq.n	d5010 <_Z17checkSystemValuesv+0x98>
   d4f98:	2301      	movs	r3, #1
   d4f9a:	70e3      	strb	r3, [r4, #3]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d4f9c:	7923      	ldrb	r3, [r4, #4]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4f9e:	edd4 7a05 	vldr	s15, [r4, #20]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d4fa2:	2b01      	cmp	r3, #1
   d4fa4:	bf84      	itt	hi
   d4fa6:	2300      	movhi	r3, #0
   d4fa8:	7123      	strbhi	r3, [r4, #4]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d4faa:	68a3      	ldr	r3, [r4, #8]
   d4fac:	2b1d      	cmp	r3, #29
   d4fae:	bfcc      	ite	gt
   d4fb0:	2300      	movgt	r3, #0
   d4fb2:	2301      	movle	r3, #1
   d4fb4:	7163      	strb	r3, [r4, #5]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4fb6:	6923      	ldr	r3, [r4, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4fb8:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4fbc:	2bff      	cmp	r3, #255	; 0xff
   d4fbe:	bf88      	it	hi
   d4fc0:	2300      	movhi	r3, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4fc6:	bf88      	it	hi
   d4fc8:	6123      	strhi	r3, [r4, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4fce:	d406      	bmi.n	d4fde <_Z17checkSystemValuesv+0x66>
   d4fd0:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d4fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4fdc:	dd01      	ble.n	d4fe2 <_Z17checkSystemValuesv+0x6a>
   d4fde:	4b0e      	ldr	r3, [pc, #56]	; (d5018 <_Z17checkSystemValuesv+0xa0>)
   d4fe0:	6163      	str	r3, [r4, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d4fe2:	edd4 7a06 	vldr	s15, [r4, #24]
   d4fe6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4fee:	d406      	bmi.n	d4ffe <_Z17checkSystemValuesv+0x86>
   d4ff0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d4ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ffc:	dd02      	ble.n	d5004 <_Z17checkSystemValuesv+0x8c>
   d4ffe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d5002:	61a3      	str	r3, [r4, #24]
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
   d5004:	230a      	movs	r3, #10
   d5006:	71a3      	strb	r3, [r4, #6]
  systemStatusWriteNeeded = true;
   d5008:	4b04      	ldr	r3, [pc, #16]	; (d501c <_Z17checkSystemValuesv+0xa4>)
   d500a:	2201      	movs	r2, #1
   d500c:	701a      	strb	r2, [r3, #0]
}
   d500e:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d5010:	70e0      	strb	r0, [r4, #3]
   d5012:	e7c3      	b.n	d4f9c <_Z17checkSystemValuesv+0x24>
   d5014:	2003e3a0 	.word	0x2003e3a0
   d5018:	c0a00000 	.word	0xc0a00000
   d501c:	2003e3c0 	.word	0x2003e3c0

000d5020 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>:
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d5020:	b538      	push	{r3, r4, r5, lr}
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5022:	6803      	ldr	r3, [r0, #0]
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d5024:	4614      	mov	r4, r2
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5026:	68dd      	ldr	r5, [r3, #12]
   d5028:	2320      	movs	r3, #32
   d502a:	47a8      	blx	r5
    }
   d502c:	4620      	mov	r0, r4
   d502e:	bd38      	pop	{r3, r4, r5, pc}

000d5030 <loop>:
{
   d5030:	b530      	push	{r4, r5, lr}
  switch(state) {
   d5032:	4c9d      	ldr	r4, [pc, #628]	; (d52a8 <loop+0x278>)
   d5034:	7823      	ldrb	r3, [r4, #0]
   d5036:	3b01      	subs	r3, #1
{
   d5038:	b087      	sub	sp, #28
   d503a:	2b05      	cmp	r3, #5
   d503c:	d833      	bhi.n	d50a6 <loop+0x76>
   d503e:	e8df f013 	tbh	[pc, r3, lsl #1]
   d5042:	00e4      	.short	0x00e4
   d5044:	00970006 	.word	0x00970006
   d5048:	009a004c 	.word	0x009a004c
   d504c:	00be      	.short	0x00be
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d504e:	4d97      	ldr	r5, [pc, #604]	; (d52ac <loop+0x27c>)
   d5050:	792b      	ldrb	r3, [r5, #4]
   d5052:	b12b      	cbz	r3, d5060 <loop+0x30>
   d5054:	4b96      	ldr	r3, [pc, #600]	; (d52b0 <loop+0x280>)
   d5056:	781b      	ldrb	r3, [r3, #0]
   d5058:	2b02      	cmp	r3, #2
   d505a:	d001      	beq.n	d5060 <loop+0x30>
   d505c:	f7ff fc90 	bl	d4980 <_Z22publishStateTransitionv>
    if (watchdogFlag) petWatchdog();                                  // Watchdog flag is raised - time to pet the watchdog
   d5060:	4b94      	ldr	r3, [pc, #592]	; (d52b4 <loop+0x284>)
   d5062:	781b      	ldrb	r3, [r3, #0]
   d5064:	b10b      	cbz	r3, d506a <loop+0x3a>
   d5066:	f7ff fb9d 	bl	d47a4 <_Z11petWatchdogv>
    if (sysStatus.lowBatteryMode) state = SLEEPING_STATE;
   d506a:	796b      	ldrb	r3, [r5, #5]
   d506c:	b10b      	cbz	r3, d5072 <loop+0x42>
   d506e:	2304      	movs	r3, #4
   d5070:	7023      	strb	r3, [r4, #0]
    if ((Time.minute() % sysStatus.sampleIntervalMin == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;   // sub hourly interval
   d5072:	f004 fbc7 	bl	d9804 <_ZN9TimeClass6minuteEv>
   d5076:	79ab      	ldrb	r3, [r5, #6]
   d5078:	fb90 f2f3 	sdiv	r2, r0, r3
   d507c:	fb02 0313 	mls	r3, r2, r3, r0
   d5080:	b943      	cbnz	r3, d5094 <loop+0x64>
   d5082:	f004 fbbf 	bl	d9804 <_ZN9TimeClass6minuteEv>
   d5086:	4b8c      	ldr	r3, [pc, #560]	; (d52b8 <loop+0x288>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	4298      	cmp	r0, r3
   d508c:	d002      	beq.n	d5094 <loop+0x64>
   d508e:	2303      	movs	r3, #3
      state = ERROR_STATE;                                            // Response timed out
   d5090:	7023      	strb	r3, [r4, #0]
   d5092:	e008      	b.n	d50a6 <loop+0x76>
    else if ((Time.minute() == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;           //  on hourly interval
   d5094:	f004 fbb6 	bl	d9804 <_ZN9TimeClass6minuteEv>
   d5098:	b928      	cbnz	r0, d50a6 <loop+0x76>
   d509a:	f004 fbb3 	bl	d9804 <_ZN9TimeClass6minuteEv>
   d509e:	4b86      	ldr	r3, [pc, #536]	; (d52b8 <loop+0x288>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	4298      	cmp	r0, r3
   d50a4:	d1f3      	bne.n	d508e <loop+0x5e>
  if (systemStatusWriteNeeded) {
   d50a6:	4c85      	ldr	r4, [pc, #532]	; (d52bc <loop+0x28c>)
  rtc.loop();                                                         // keeps the clock up to date
   d50a8:	4885      	ldr	r0, [pc, #532]	; (d52c0 <loop+0x290>)
   d50aa:	f001 ff9d 	bl	d6fe8 <_ZN8MCP794104loopEv>
  if (systemStatusWriteNeeded) {
   d50ae:	7823      	ldrb	r3, [r4, #0]
   d50b0:	b133      	cbz	r3, d50c0 <loop+0x90>
    fram.put(FRAM::systemStatusAddr,sysStatus);
   d50b2:	4a7e      	ldr	r2, [pc, #504]	; (d52ac <loop+0x27c>)
   d50b4:	4883      	ldr	r0, [pc, #524]	; (d52c4 <loop+0x294>)
   d50b6:	2101      	movs	r1, #1
   d50b8:	f7ff ffb2 	bl	d5020 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
    systemStatusWriteNeeded = false;
   d50bc:	2300      	movs	r3, #0
   d50be:	7023      	strb	r3, [r4, #0]
  if (currentCountsWriteNeeded) {
   d50c0:	4c81      	ldr	r4, [pc, #516]	; (d52c8 <loop+0x298>)
   d50c2:	7823      	ldrb	r3, [r4, #0]
   d50c4:	b13b      	cbz	r3, d50d6 <loop+0xa6>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d50c6:	2330      	movs	r3, #48	; 0x30
   d50c8:	4a80      	ldr	r2, [pc, #512]	; (d52cc <loop+0x29c>)
   d50ca:	487e      	ldr	r0, [pc, #504]	; (d52c4 <loop+0x294>)
   d50cc:	2150      	movs	r1, #80	; 0x50
   d50ce:	f001 fba8 	bl	d6822 <_ZN6MB85RC9writeDataEjPKhj>
    currentCountsWriteNeeded = false;
   d50d2:	2300      	movs	r3, #0
   d50d4:	7023      	strb	r3, [r4, #0]
}
   d50d6:	b007      	add	sp, #28
   d50d8:	bd30      	pop	{r4, r5, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d50da:	4d74      	ldr	r5, [pc, #464]	; (d52ac <loop+0x27c>)
   d50dc:	792b      	ldrb	r3, [r5, #4]
   d50de:	b12b      	cbz	r3, d50ec <loop+0xbc>
   d50e0:	4b73      	ldr	r3, [pc, #460]	; (d52b0 <loop+0x280>)
   d50e2:	781b      	ldrb	r3, [r3, #0]
   d50e4:	2b04      	cmp	r3, #4
   d50e6:	d001      	beq.n	d50ec <loop+0xbc>
   d50e8:	f7ff fc4a 	bl	d4980 <_Z22publishStateTransitionv>
    getBatteryContext();                                              // Check to make sure we should still be in the low battery state
   d50ec:	f7ff fd8c 	bl	d4c08 <_Z17getBatteryContextv>
    if (!sysStatus.lowBatteryMode) {                                  // If not, we need to exit this state and go back to IDLE_STATE
   d50f0:	796b      	ldrb	r3, [r5, #5]
   d50f2:	b90b      	cbnz	r3, d50f8 <loop+0xc8>
      state = IDLE_STATE;
   d50f4:	2302      	movs	r3, #2
   d50f6:	e7cb      	b.n	d5090 <loop+0x60>
    else if (Time.now() - sysStatus.lastHookResponse > 7200L) {       // Troubleshooting code
   d50f8:	f004 fb67 	bl	d97ca <_ZN9TimeClass3nowEv>
   d50fc:	69eb      	ldr	r3, [r5, #28]
   d50fe:	1ac0      	subs	r0, r0, r3
   d5100:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d5104:	d910      	bls.n	d5128 <loop+0xf8>
      connectToParticle();
   d5106:	f7ff fbad 	bl	d4864 <_Z17connectToParticlev>
   d510a:	4b71      	ldr	r3, [pc, #452]	; (d52d0 <loop+0x2a0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d510c:	4a71      	ldr	r2, [pc, #452]	; (d52d4 <loop+0x2a4>)
   d510e:	781b      	ldrb	r3, [r3, #0]
   d5110:	f88d 3000 	strb.w	r3, [sp]
   d5114:	a802      	add	r0, sp, #8
   d5116:	4970      	ldr	r1, [pc, #448]	; (d52d8 <loop+0x2a8>)
   d5118:	233c      	movs	r3, #60	; 0x3c
   d511a:	f003 fbe3 	bl	d88e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d511e:	a803      	add	r0, sp, #12
   d5120:	f7ff fdd6 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    state = REPORTING_STATE;
   d5124:	2305      	movs	r3, #5
   d5126:	e7b3      	b.n	d5090 <loop+0x60>
    if (Time.minute() > 1 && sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle after the first minute
   d5128:	f004 fb6c 	bl	d9804 <_ZN9TimeClass6minuteEv>
   d512c:	2801      	cmp	r0, #1
   d512e:	dd03      	ble.n	d5138 <loop+0x108>
   d5130:	78eb      	ldrb	r3, [r5, #3]
   d5132:	b10b      	cbz	r3, d5138 <loop+0x108>
   d5134:	f7ff fbe4 	bl	d4900 <_Z22disconnectFromParticlev>
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d5138:	2100      	movs	r1, #0
   d513a:	2007      	movs	r0, #7
   d513c:	f004 fda9 	bl	d9c92 <digitalWrite>
      petWatchdog();
   d5140:	f7ff fb30 	bl	d47a4 <_Z11petWatchdogv>
      int wakeInSeconds = constrain((60 - Time.minute()) * 60, 1, 60 * 60);   // Sleep till the top of the hour
   d5144:	f004 fb5e 	bl	d9804 <_ZN9TimeClass6minuteEv>
   d5148:	213c      	movs	r1, #60	; 0x3c
   d514a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d514e:	4341      	muls	r1, r0
      rtc.setAlarm(wakeInSeconds);                                      // The Real Time Clock will turn the Enable pin back on to wake the device
   d5150:	f5b1 6f61 	cmp.w	r1, #3600	; 0xe10
   d5154:	f04f 0201 	mov.w	r2, #1
   d5158:	bfa8      	it	ge
   d515a:	f44f 6161 	movge.w	r1, #3600	; 0xe10
   d515e:	4291      	cmp	r1, r2
   d5160:	f04f 0300 	mov.w	r3, #0
   d5164:	bfb8      	it	lt
   d5166:	4611      	movlt	r1, r2
   d5168:	4855      	ldr	r0, [pc, #340]	; (d52c0 <loop+0x290>)
   d516a:	f001 ffe5 	bl	d7138 <_ZN8MCP794108setAlarmEibi>
    } break;
   d516e:	e79a      	b.n	d50a6 <loop+0x76>
    takeMeasurements();                                             // Update Temp, Battery and Signal Strength values
   d5170:	f7ff fea4 	bl	d4ebc <_Z16takeMeasurementsv>
   d5174:	e7d6      	b.n	d5124 <loop+0xf4>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5176:	4d4d      	ldr	r5, [pc, #308]	; (d52ac <loop+0x27c>)
   d5178:	792a      	ldrb	r2, [r5, #4]
   d517a:	b12a      	cbz	r2, d5188 <loop+0x158>
   d517c:	4b4c      	ldr	r3, [pc, #304]	; (d52b0 <loop+0x280>)
   d517e:	781b      	ldrb	r3, [r3, #0]
   d5180:	2b05      	cmp	r3, #5
   d5182:	d001      	beq.n	d5188 <loop+0x158>
   d5184:	f7ff fbfc 	bl	d4980 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();              // Only attempt to connect if not already New process to get connected
   d5188:	78eb      	ldrb	r3, [r5, #3]
   d518a:	b90b      	cbnz	r3, d5190 <loop+0x160>
   d518c:	f7ff fb6a 	bl	d4864 <_Z17connectToParticlev>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5190:	f002 ffe8 	bl	d8164 <spark_cloud_flag_connected>
    if (!Particle.connected()) connectToParticle();                   // Just to make sure
   d5194:	b908      	cbnz	r0, d519a <loop+0x16a>
   d5196:	f7ff fb65 	bl	d4864 <_Z17connectToParticlev>
   d519a:	f002 ffe3 	bl	d8164 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d519e:	b140      	cbz	r0, d51b2 <loop+0x182>
      if (Time.hour() == 0) dailyCleanup();                           // Once a day, clean house
   d51a0:	f004 fb24 	bl	d97ec <_ZN9TimeClass4hourEv>
   d51a4:	b908      	cbnz	r0, d51aa <loop+0x17a>
   d51a6:	f7ff fc1d 	bl	d49e4 <_Z12dailyCleanupv>
      sendEvent();                                                    // Send data to Ubidots
   d51aa:	f7ff fa33 	bl	d4614 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d51ae:	2306      	movs	r3, #6
   d51b0:	e76e      	b.n	d5090 <loop+0x60>
   d51b2:	f002 fd85 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d51b6:	4b49      	ldr	r3, [pc, #292]	; (d52dc <loop+0x2ac>)
   d51b8:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;                                            // Response timed out
   d51ba:	2301      	movs	r3, #1
   d51bc:	e768      	b.n	d5090 <loop+0x60>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d51be:	4b3b      	ldr	r3, [pc, #236]	; (d52ac <loop+0x27c>)
   d51c0:	791b      	ldrb	r3, [r3, #4]
   d51c2:	b12b      	cbz	r3, d51d0 <loop+0x1a0>
   d51c4:	4b3a      	ldr	r3, [pc, #232]	; (d52b0 <loop+0x280>)
   d51c6:	781b      	ldrb	r3, [r3, #0]
   d51c8:	2b06      	cmp	r3, #6
   d51ca:	d001      	beq.n	d51d0 <loop+0x1a0>
   d51cc:	f7ff fbd8 	bl	d4980 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received back to IDLE state
   d51d0:	4b43      	ldr	r3, [pc, #268]	; (d52e0 <loop+0x2b0>)
   d51d2:	781b      	ldrb	r3, [r3, #0]
   d51d4:	2b00      	cmp	r3, #0
   d51d6:	d08d      	beq.n	d50f4 <loop+0xc4>
   d51d8:	f002 fd72 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d51dc:	4b41      	ldr	r3, [pc, #260]	; (d52e4 <loop+0x2b4>)
   d51de:	681b      	ldr	r3, [r3, #0]
   d51e0:	1ac0      	subs	r0, r0, r3
   d51e2:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d51e6:	4298      	cmp	r0, r3
   d51e8:	f67f af5d 	bls.w	d50a6 <loop+0x76>
   d51ec:	f002 fd68 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d51f0:	4b3a      	ldr	r3, [pc, #232]	; (d52dc <loop+0x2ac>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d51f2:	4a3d      	ldr	r2, [pc, #244]	; (d52e8 <loop+0x2b8>)
      resetTimeStamp = millis();
   d51f4:	6018      	str	r0, [r3, #0]
        val_(0) {
   d51f6:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d51f8:	f88d 3000 	strb.w	r3, [sp]
   d51fc:	4b34      	ldr	r3, [pc, #208]	; (d52d0 <loop+0x2a0>)
   d51fe:	493b      	ldr	r1, [pc, #236]	; (d52ec <loop+0x2bc>)
   d5200:	781b      	ldrb	r3, [r3, #0]
   d5202:	483b      	ldr	r0, [pc, #236]	; (d52f0 <loop+0x2c0>)
   d5204:	f7ff f876 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5208:	e7d7      	b.n	d51ba <loop+0x18a>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d520a:	4c28      	ldr	r4, [pc, #160]	; (d52ac <loop+0x27c>)
   d520c:	7923      	ldrb	r3, [r4, #4]
   d520e:	b12b      	cbz	r3, d521c <loop+0x1ec>
   d5210:	4b27      	ldr	r3, [pc, #156]	; (d52b0 <loop+0x280>)
   d5212:	781b      	ldrb	r3, [r3, #0]
   d5214:	2b01      	cmp	r3, #1
   d5216:	d001      	beq.n	d521c <loop+0x1ec>
   d5218:	f7ff fbb2 	bl	d4980 <_Z22publishStateTransitionv>
   d521c:	f002 fd50 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d5220:	4b2e      	ldr	r3, [pc, #184]	; (d52dc <loop+0x2ac>)
   d5222:	681b      	ldr	r3, [r3, #0]
   d5224:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d5228:	3330      	adds	r3, #48	; 0x30
   d522a:	4283      	cmp	r3, r0
   d522c:	f4bf af3b 	bcs.w	d50a6 <loop+0x76>
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d5230:	6923      	ldr	r3, [r4, #16]
   d5232:	2b03      	cmp	r3, #3
   d5234:	dc13      	bgt.n	d525e <loop+0x22e>
   d5236:	f002 ff95 	bl	d8164 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d523a:	b148      	cbz	r0, d5250 <loop+0x220>
   d523c:	2300      	movs	r3, #0
   d523e:	f88d 3000 	strb.w	r3, [sp]
   d5242:	4b23      	ldr	r3, [pc, #140]	; (d52d0 <loop+0x2a0>)
   d5244:	4a2b      	ldr	r2, [pc, #172]	; (d52f4 <loop+0x2c4>)
   d5246:	781b      	ldrb	r3, [r3, #0]
   d5248:	4923      	ldr	r1, [pc, #140]	; (d52d8 <loop+0x2a8>)
   d524a:	4829      	ldr	r0, [pc, #164]	; (d52f0 <loop+0x2c0>)
   d524c:	f7ff f852 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d5250:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5254:	f003 f886 	bl	d8364 <delay>
        System.reset();
   d5258:	f004 f8d5 	bl	d9406 <_ZN11SystemClass5resetEv>
   d525c:	e723      	b.n	d50a6 <loop+0x76>
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d525e:	f004 fab4 	bl	d97ca <_ZN9TimeClass3nowEv>
   d5262:	f002 ff7f 	bl	d8164 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);            // Brodcase Reset Action
   d5266:	b148      	cbz	r0, d527c <loop+0x24c>
   d5268:	2300      	movs	r3, #0
   d526a:	f88d 3000 	strb.w	r3, [sp]
   d526e:	4b18      	ldr	r3, [pc, #96]	; (d52d0 <loop+0x2a0>)
   d5270:	4a21      	ldr	r2, [pc, #132]	; (d52f8 <loop+0x2c8>)
   d5272:	781b      	ldrb	r3, [r3, #0]
   d5274:	4918      	ldr	r1, [pc, #96]	; (d52d8 <loop+0x2a8>)
   d5276:	481e      	ldr	r0, [pc, #120]	; (d52f0 <loop+0x2c0>)
   d5278:	f7ff f83c 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d527c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5280:	f003 f870 	bl	d8364 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d5284:	2300      	movs	r3, #0
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d5286:	4a09      	ldr	r2, [pc, #36]	; (d52ac <loop+0x27c>)
   d5288:	480e      	ldr	r0, [pc, #56]	; (d52c4 <loop+0x294>)
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d528a:	6123      	str	r3, [r4, #16]
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d528c:	2101      	movs	r1, #1
   d528e:	f7ff fec7 	bl	d5020 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        hardResetNow("1");
   d5292:	491a      	ldr	r1, [pc, #104]	; (d52fc <loop+0x2cc>)
   d5294:	a802      	add	r0, sp, #8
   d5296:	f004 f84e 	bl	d9336 <_ZN6StringC1EPKc>
   d529a:	a802      	add	r0, sp, #8
   d529c:	f7ff f882 	bl	d43a4 <_Z12hardResetNow6String>
   d52a0:	a802      	add	r0, sp, #8
   d52a2:	f003 fffd 	bl	d92a0 <_ZN6StringD1Ev>
   d52a6:	e6fe      	b.n	d50a6 <loop+0x76>
   d52a8:	2003e39c 	.word	0x2003e39c
   d52ac:	2003e3a0 	.word	0x2003e3a0
   d52b0:	2003e33c 	.word	0x2003e33c
   d52b4:	2003e3f4 	.word	0x2003e3f4
   d52b8:	2003e2f0 	.word	0x2003e2f0
   d52bc:	2003e3c0 	.word	0x2003e3c0
   d52c0:	2003e37c 	.word	0x2003e37c
   d52c4:	2003e31c 	.word	0x2003e31c
   d52c8:	2003e2e8 	.word	0x2003e2e8
   d52cc:	2003e2b8 	.word	0x2003e2b8
   d52d0:	2003e28c 	.word	0x2003e28c
   d52d4:	000dac2e 	.word	0x000dac2e
   d52d8:	000dac43 	.word	0x000dac43
   d52dc:	2003e378 	.word	0x2003e378
   d52e0:	2003e2fe 	.word	0x2003e2fe
   d52e4:	2003e3f8 	.word	0x2003e3f8
   d52e8:	000db3b0 	.word	0x000db3b0
   d52ec:	000dac49 	.word	0x000dac49
   d52f0:	2003e340 	.word	0x2003e340
   d52f4:	000dac62 	.word	0x000dac62
   d52f8:	000dac76 	.word	0x000dac76
   d52fc:	000da9a4 	.word	0x000da9a4

000d5300 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d5300:	b507      	push	{r0, r1, r2, lr}
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
   d5302:	f7ff faaf 	bl	d4864 <_Z17connectToParticlev>
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
   d5306:	f7ff fdd9 	bl	d4ebc <_Z16takeMeasurementsv>
   d530a:	f002 ff2b 	bl	d8164 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d530e:	b148      	cbz	r0, d5324 <_Z18loadSystemDefaultsv+0x24>
   d5310:	2300      	movs	r3, #0
   d5312:	f88d 3000 	strb.w	r3, [sp]
   d5316:	4b10      	ldr	r3, [pc, #64]	; (d5358 <_Z18loadSystemDefaultsv+0x58>)
   d5318:	4a10      	ldr	r2, [pc, #64]	; (d535c <_Z18loadSystemDefaultsv+0x5c>)
   d531a:	781b      	ldrb	r3, [r3, #0]
   d531c:	4910      	ldr	r1, [pc, #64]	; (d5360 <_Z18loadSystemDefaultsv+0x60>)
   d531e:	4811      	ldr	r0, [pc, #68]	; (d5364 <_Z18loadSystemDefaultsv+0x64>)
   d5320:	f7fe ffe8 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.structuresVersion = 1;
   d5324:	4a10      	ldr	r2, [pc, #64]	; (d5368 <_Z18loadSystemDefaultsv+0x68>)
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d5326:	4811      	ldr	r0, [pc, #68]	; (d536c <_Z18loadSystemDefaultsv+0x6c>)
  sysStatus.metricUnits = false;
   d5328:	2300      	movs	r3, #0
   d532a:	7093      	strb	r3, [r2, #2]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d532c:	6893      	ldr	r3, [r2, #8]
   d532e:	2b1d      	cmp	r3, #29
   d5330:	bfcc      	ite	gt
   d5332:	2300      	movgt	r3, #0
   d5334:	2301      	movle	r3, #1
   d5336:	7153      	strb	r3, [r2, #5]
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
   d5338:	230a      	movs	r3, #10
   d533a:	7193      	strb	r3, [r2, #6]
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d533c:	4b0c      	ldr	r3, [pc, #48]	; (d5370 <_Z18loadSystemDefaultsv+0x70>)
   d533e:	6153      	str	r3, [r2, #20]
  sysStatus.structuresVersion = 1;
   d5340:	2101      	movs	r1, #1
  sysStatus.dstOffset = 1;
   d5342:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
  sysStatus.structuresVersion = 1;
   d5346:	7011      	strb	r1, [r2, #0]
  sysStatus.verboseMode = true;
   d5348:	7111      	strb	r1, [r2, #4]
  sysStatus.dstOffset = 1;
   d534a:	6193      	str	r3, [r2, #24]
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d534c:	f7ff fe68 	bl	d5020 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
}
   d5350:	b003      	add	sp, #12
   d5352:	f85d fb04 	ldr.w	pc, [sp], #4
   d5356:	bf00      	nop
   d5358:	2003e28c 	.word	0x2003e28c
   d535c:	000dac90 	.word	0x000dac90
   d5360:	000daa63 	.word	0x000daa63
   d5364:	2003e340 	.word	0x2003e340
   d5368:	2003e3a0 	.word	0x2003e3a0
   d536c:	2003e31c 	.word	0x2003e31c
   d5370:	c0a00000 	.word	0xc0a00000
   d5374:	00000000 	.word	0x00000000

000d5378 <setup>:
{
   d5378:	b570      	push	{r4, r5, r6, lr}
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d537a:	2100      	movs	r1, #0
{
   d537c:	b0a8      	sub	sp, #160	; 0xa0
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d537e:	2008      	movs	r0, #8
   d5380:	f004 fc76 	bl	d9c70 <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d5384:	2100      	movs	r1, #0
   d5386:	2004      	movs	r0, #4
   d5388:	f004 fc72 	bl	d9c70 <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d538c:	2101      	movs	r1, #1
   d538e:	2007      	movs	r0, #7
   d5390:	f004 fc6e 	bl	d9c70 <pinMode>
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d5394:	2101      	movs	r1, #1
   d5396:	2005      	movs	r0, #5
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d5398:	2400      	movs	r4, #0
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d539a:	f004 fc69 	bl	d9c70 <pinMode>
  digitalWrite(blueLED,HIGH);
   d539e:	2101      	movs	r1, #1
   d53a0:	2007      	movs	r0, #7
   d53a2:	f004 fc76 	bl	d9c92 <digitalWrite>
  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
   d53a6:	f7ff f9fd 	bl	d47a4 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d53aa:	49a5      	ldr	r1, [pc, #660]	; (d5640 <setup+0x2c8>)
   d53ac:	9400      	str	r4, [sp, #0]
   d53ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d53b2:	2201      	movs	r2, #1
   d53b4:	2008      	movs	r0, #8
   d53b6:	f003 fcd5 	bl	d8d64 <_Z15attachInterrupttPFvvE13InterruptModeah>
    static String deviceID(void) { return spark_deviceID(); }
   d53ba:	a804      	add	r0, sp, #16
   d53bc:	f002 feda 	bl	d8174 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d53c0:	4623      	mov	r3, r4
   d53c2:	227d      	movs	r2, #125	; 0x7d
   d53c4:	a908      	add	r1, sp, #32
   d53c6:	a804      	add	r0, sp, #16
   d53c8:	f003 fff5 	bl	d93b6 <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d53cc:	4623      	mov	r3, r4
   d53ce:	4622      	mov	r2, r4
   d53d0:	499c      	ldr	r1, [pc, #624]	; (d5644 <setup+0x2cc>)
   d53d2:	4d9d      	ldr	r5, [pc, #628]	; (d5648 <setup+0x2d0>)
   d53d4:	4e9d      	ldr	r6, [pc, #628]	; (d564c <setup+0x2d4>)
   d53d6:	e9cd 4400 	strd	r4, r4, [sp]
   d53da:	a808      	add	r0, sp, #32
   d53dc:	f002 feda 	bl	d8194 <spark_subscribe>
        return _variable(varKey, var, STRING);
   d53e0:	499b      	ldr	r1, [pc, #620]	; (d5650 <setup+0x2d8>)
   d53e2:	489c      	ldr	r0, [pc, #624]	; (d5654 <setup+0x2dc>)
   d53e4:	f7fe fefd 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d53e8:	499b      	ldr	r1, [pc, #620]	; (d5658 <setup+0x2e0>)
   d53ea:	489c      	ldr	r0, [pc, #624]	; (d565c <setup+0x2e4>)
   d53ec:	f7fe fef9 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d53f0:	4623      	mov	r3, r4
   d53f2:	2202      	movs	r2, #2
   d53f4:	499a      	ldr	r1, [pc, #616]	; (d5660 <setup+0x2e8>)
   d53f6:	489b      	ldr	r0, [pc, #620]	; (d5664 <setup+0x2ec>)
   d53f8:	f002 fe94 	bl	d8124 <spark_variable>
        return _variable(varKey, var, STRING);
   d53fc:	499a      	ldr	r1, [pc, #616]	; (d5668 <setup+0x2f0>)
   d53fe:	489b      	ldr	r0, [pc, #620]	; (d566c <setup+0x2f4>)
   d5400:	f7fe feef 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5404:	499a      	ldr	r1, [pc, #616]	; (d5670 <setup+0x2f8>)
   d5406:	489b      	ldr	r0, [pc, #620]	; (d5674 <setup+0x2fc>)
   d5408:	f7fe feeb 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d540c:	499a      	ldr	r1, [pc, #616]	; (d5678 <setup+0x300>)
   d540e:	489b      	ldr	r0, [pc, #620]	; (d567c <setup+0x304>)
   d5410:	f7fe fee7 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5414:	499a      	ldr	r1, [pc, #616]	; (d5680 <setup+0x308>)
   d5416:	489b      	ldr	r0, [pc, #620]	; (d5684 <setup+0x30c>)
   d5418:	f7fe fee3 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d541c:	499a      	ldr	r1, [pc, #616]	; (d5688 <setup+0x310>)
   d541e:	489b      	ldr	r0, [pc, #620]	; (d568c <setup+0x314>)
   d5420:	4623      	mov	r3, r4
   d5422:	2202      	movs	r2, #2
   d5424:	f002 fe7e 	bl	d8124 <spark_variable>
   d5428:	4623      	mov	r3, r4
   d542a:	2202      	movs	r2, #2
   d542c:	4998      	ldr	r1, [pc, #608]	; (d5690 <setup+0x318>)
   d542e:	4899      	ldr	r0, [pc, #612]	; (d5694 <setup+0x31c>)
   d5430:	f002 fe78 	bl	d8124 <spark_variable>
        return _variable(varKey, var, STRING);
   d5434:	4998      	ldr	r1, [pc, #608]	; (d5698 <setup+0x320>)
   d5436:	4899      	ldr	r0, [pc, #612]	; (d569c <setup+0x324>)
   d5438:	f7fe fed3 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d543c:	4998      	ldr	r1, [pc, #608]	; (d56a0 <setup+0x328>)
   d543e:	4899      	ldr	r0, [pc, #612]	; (d56a4 <setup+0x32c>)
   d5440:	f7fe fecf 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d5444:	4a98      	ldr	r2, [pc, #608]	; (d56a8 <setup+0x330>)
   d5446:	4999      	ldr	r1, [pc, #612]	; (d56ac <setup+0x334>)
   d5448:	4899      	ldr	r0, [pc, #612]	; (d56b0 <setup+0x338>)
   d544a:	f003 f945 	bl	d86d8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d544e:	4a99      	ldr	r2, [pc, #612]	; (d56b4 <setup+0x33c>)
   d5450:	4999      	ldr	r1, [pc, #612]	; (d56b8 <setup+0x340>)
   d5452:	4897      	ldr	r0, [pc, #604]	; (d56b0 <setup+0x338>)
   d5454:	f003 f940 	bl	d86d8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5458:	4a98      	ldr	r2, [pc, #608]	; (d56bc <setup+0x344>)
   d545a:	4999      	ldr	r1, [pc, #612]	; (d56c0 <setup+0x348>)
   d545c:	4894      	ldr	r0, [pc, #592]	; (d56b0 <setup+0x338>)
   d545e:	f003 f93b 	bl	d86d8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5462:	4a98      	ldr	r2, [pc, #608]	; (d56c4 <setup+0x34c>)
   d5464:	4998      	ldr	r1, [pc, #608]	; (d56c8 <setup+0x350>)
   d5466:	4892      	ldr	r0, [pc, #584]	; (d56b0 <setup+0x338>)
   d5468:	f003 f936 	bl	d86d8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d546c:	4a97      	ldr	r2, [pc, #604]	; (d56cc <setup+0x354>)
   d546e:	4998      	ldr	r1, [pc, #608]	; (d56d0 <setup+0x358>)
   d5470:	488f      	ldr	r0, [pc, #572]	; (d56b0 <setup+0x338>)
   d5472:	f003 f931 	bl	d86d8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5476:	4a97      	ldr	r2, [pc, #604]	; (d56d4 <setup+0x35c>)
   d5478:	4997      	ldr	r1, [pc, #604]	; (d56d8 <setup+0x360>)
   d547a:	488d      	ldr	r0, [pc, #564]	; (d56b0 <setup+0x338>)
   d547c:	f003 f92c 	bl	d86d8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5480:	4a76      	ldr	r2, [pc, #472]	; (d565c <setup+0x2e4>)
   d5482:	4996      	ldr	r1, [pc, #600]	; (d56dc <setup+0x364>)
   d5484:	488a      	ldr	r0, [pc, #552]	; (d56b0 <setup+0x338>)
   d5486:	f003 f927 	bl	d86d8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  fram.begin();                                                       // Initialize the FRAM module
   d548a:	4895      	ldr	r0, [pc, #596]	; (d56e0 <setup+0x368>)
   d548c:	f001 f93c 	bl	d6708 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5490:	4621      	mov	r1, r4
   d5492:	4893      	ldr	r0, [pc, #588]	; (d56e0 <setup+0x368>)
   d5494:	2301      	movs	r3, #1
   d5496:	f10d 020b 	add.w	r2, sp, #11
   d549a:	f001 f977 	bl	d678c <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d549e:	f89d 100b 	ldrb.w	r1, [sp, #11]
   d54a2:	2901      	cmp	r1, #1
   d54a4:	f000 80b2 	beq.w	d560c <setup+0x294>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d54a8:	488d      	ldr	r0, [pc, #564]	; (d56e0 <setup+0x368>)
   d54aa:	f001 f937 	bl	d671c <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d54ae:	4a8d      	ldr	r2, [pc, #564]	; (d56e4 <setup+0x36c>)
   d54b0:	488b      	ldr	r0, [pc, #556]	; (d56e0 <setup+0x368>)
   d54b2:	2304      	movs	r3, #4
   d54b4:	4621      	mov	r1, r4
   d54b6:	f001 f9b4 	bl	d6822 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d54ba:	2301      	movs	r3, #1
   d54bc:	4888      	ldr	r0, [pc, #544]	; (d56e0 <setup+0x368>)
   d54be:	f10d 020b 	add.w	r2, sp, #11
   d54c2:	4621      	mov	r1, r4
   d54c4:	f001 f962 	bl	d678c <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;        // Device will not work without FRAM
   d54c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d54cc:	2b01      	cmp	r3, #1
   d54ce:	f000 809a 	beq.w	d5606 <setup+0x28e>
   d54d2:	2301      	movs	r3, #1
   d54d4:	7033      	strb	r3, [r6, #0]
  checkSystemValues();                                                // Make sure System values are all in valid range
   d54d6:	f7ff fd4f 	bl	d4f78 <_Z17checkSystemValuesv>
  getBatteryContext();                                                // See if we have enough juice
   d54da:	f7ff fb95 	bl	d4c08 <_Z17getBatteryContextv>
        int reason = RESET_REASON_NONE;
   d54de:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d54e0:	4611      	mov	r1, r2
   d54e2:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d54e4:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d54e6:	f002 fbcb 	bl	d7c80 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d54ea:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d54ec:	2b14      	cmp	r3, #20
   d54ee:	f04f 0200 	mov.w	r2, #0
   d54f2:	f040 8091 	bne.w	d5618 <setup+0x2a0>
    sysStatus.resetCount++;
   d54f6:	692b      	ldr	r3, [r5, #16]
   d54f8:	3301      	adds	r3, #1
   d54fa:	612b      	str	r3, [r5, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d54fc:	4b7a      	ldr	r3, [pc, #488]	; (d56e8 <setup+0x370>)
   d54fe:	2201      	movs	r2, #1
   d5500:	701a      	strb	r2, [r3, #0]
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d5502:	79ab      	ldrb	r3, [r5, #6]
   d5504:	4a79      	ldr	r2, [pc, #484]	; (d56ec <setup+0x374>)
   d5506:	4854      	ldr	r0, [pc, #336]	; (d5658 <setup+0x2e0>)
   d5508:	210c      	movs	r1, #12
   d550a:	f002 fee3 	bl	d82d4 <snprintf>
  rtc.setup();                                                        // Start the real time clock
   d550e:	4878      	ldr	r0, [pc, #480]	; (d56f0 <setup+0x378>)
   d5510:	f001 fc64 	bl	d6ddc <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d5514:	2100      	movs	r1, #0
   d5516:	4876      	ldr	r0, [pc, #472]	; (d56f0 <setup+0x378>)
   d5518:	f001 fdaf 	bl	d707a <_ZN8MCP7941010clearAlarmEi>
  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
   d551c:	ed95 0a06 	vldr	s0, [r5, #24]
   d5520:	f004 f80a 	bl	d9538 <_ZN9TimeClass12setDSTOffsetEf>
  if (!Time.isValid()) Time.setTime(rtc.getRTCTime());
   d5524:	f004 f934 	bl	d9790 <_ZN9TimeClass7isValidEv>
   d5528:	b920      	cbnz	r0, d5534 <setup+0x1bc>
   d552a:	4871      	ldr	r0, [pc, #452]	; (d56f0 <setup+0x378>)
   d552c:	f001 fc43 	bl	d6db6 <_ZNK8MCP7941010getRTCTimeEv>
   d5530:	f004 f834 	bl	d959c <_ZN9TimeClass7setTimeEx>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
   d5534:	f7ff fa94 	bl	d4a60 <_Z8isDSTusav>
   d5538:	2800      	cmp	r0, #0
   d553a:	d077      	beq.n	d562c <setup+0x2b4>
   d553c:	f004 f81a 	bl	d9574 <_ZN9TimeClass8beginDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
   d5540:	ed95 0a05 	vldr	s0, [r5, #20]
   d5544:	f003 ffd8 	bl	d94f8 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d5548:	f004 f990 	bl	d986c <_ZN9TimeClass5localEv>
   d554c:	4604      	mov	r4, r0
   d554e:	f004 f93c 	bl	d97ca <_ZN9TimeClass3nowEv>
   d5552:	1a20      	subs	r0, r4, r0
   d5554:	f004 fd6a 	bl	da02c <__aeabi_i2d>
   d5558:	a337      	add	r3, pc, #220	; (adr r3, d5638 <setup+0x2c0>)
   d555a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d555e:	f004 fef9 	bl	da354 <__aeabi_ddiv>
   d5562:	4a64      	ldr	r2, [pc, #400]	; (d56f4 <setup+0x37c>)
   d5564:	e9cd 0100 	strd	r0, r1, [sp]
   d5568:	210a      	movs	r1, #10
   d556a:	484b      	ldr	r0, [pc, #300]	; (d5698 <setup+0x320>)
   d556c:	f002 feb2 	bl	d82d4 <snprintf>
   d5570:	4a61      	ldr	r2, [pc, #388]	; (d56f8 <setup+0x380>)
   d5572:	485b      	ldr	r0, [pc, #364]	; (d56e0 <setup+0x368>)
   d5574:	2330      	movs	r3, #48	; 0x30
   d5576:	2150      	movs	r1, #80	; 0x50
   d5578:	f001 f908 	bl	d678c <_ZN6MB85RC8readDataEjPhj>
  currentHourlyPeriod = Time.hour();                                   // The local time hourly period for reporting purposes
   d557c:	f004 f936 	bl	d97ec <_ZN9TimeClass4hourEv>
   d5580:	4b5e      	ldr	r3, [pc, #376]	; (d56fc <setup+0x384>)
   d5582:	6018      	str	r0, [r3, #0]
  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d5584:	f7ff f940 	bl	d4808 <_Z14setPowerConfigv>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                  // Make sure the device wakes up and connects
   d5588:	2004      	movs	r0, #4
   d558a:	f004 fb9b 	bl	d9cc4 <digitalRead>
   d558e:	b908      	cbnz	r0, d5594 <setup+0x21c>
   d5590:	f7ff feb6 	bl	d5300 <_Z18loadSystemDefaultsv>
  ds18b20.resetsearch();                 // initialise for sensor search
   d5594:	485a      	ldr	r0, [pc, #360]	; (d5700 <setup+0x388>)
   d5596:	f000 ff2c 	bl	d63f2 <_ZN7DS18B2011resetsearchEv>
    ds18b20.search(sensorAddresses[i]); // and if available store
   d559a:	495a      	ldr	r1, [pc, #360]	; (d5704 <setup+0x38c>)
   d559c:	4858      	ldr	r0, [pc, #352]	; (d5700 <setup+0x388>)
   d559e:	f000 ff0c 	bl	d63ba <_ZN7DS18B206searchEPh>
   d55a2:	4959      	ldr	r1, [pc, #356]	; (d5708 <setup+0x390>)
   d55a4:	4856      	ldr	r0, [pc, #344]	; (d5700 <setup+0x388>)
   d55a6:	f000 ff08 	bl	d63ba <_ZN7DS18B206searchEPh>
   d55aa:	4958      	ldr	r1, [pc, #352]	; (d570c <setup+0x394>)
   d55ac:	4854      	ldr	r0, [pc, #336]	; (d5700 <setup+0x388>)
   d55ae:	f000 ff04 	bl	d63ba <_ZN7DS18B206searchEPh>
  t.withI2C();
   d55b2:	f004 fbb3 	bl	d9d1c <_Z19__fetch_global_Wirev>
   d55b6:	2242      	movs	r2, #66	; 0x42
   d55b8:	4601      	mov	r1, r0
   d55ba:	4855      	ldr	r0, [pc, #340]	; (d5710 <setup+0x398>)
   d55bc:	f000 fa46 	bl	d5a4c <_ZN12AssetTracker7withI2CER7TwoWireh>
	t.startThreadedMode();
   d55c0:	4853      	ldr	r0, [pc, #332]	; (d5710 <setup+0x398>)
   d55c2:	f000 f9fb 	bl	d59bc <_ZN12AssetTracker17startThreadedModeEv>
   d55c6:	f002 fb7b 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
  startFix = millis();
   d55ca:	4b52      	ldr	r3, [pc, #328]	; (d5714 <setup+0x39c>)
   d55cc:	6018      	str	r0, [r3, #0]
  gettingFix = true;
   d55ce:	4b52      	ldr	r3, [pc, #328]	; (d5718 <setup+0x3a0>)
   d55d0:	2201      	movs	r2, #1
   d55d2:	701a      	strb	r2, [r3, #0]
  connectToParticle();
   d55d4:	f7ff f946 	bl	d4864 <_Z17connectToParticlev>
   d55d8:	2300      	movs	r3, #0
  publishQueue.publish("State","Startup Complete",PRIVATE);
   d55da:	f88d 3000 	strb.w	r3, [sp]
   d55de:	4b4f      	ldr	r3, [pc, #316]	; (d571c <setup+0x3a4>)
   d55e0:	4a4f      	ldr	r2, [pc, #316]	; (d5720 <setup+0x3a8>)
   d55e2:	781b      	ldrb	r3, [r3, #0]
   d55e4:	494f      	ldr	r1, [pc, #316]	; (d5724 <setup+0x3ac>)
   d55e6:	4850      	ldr	r0, [pc, #320]	; (d5728 <setup+0x3b0>)
   d55e8:	f7fe fe84 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d55ec:	7833      	ldrb	r3, [r6, #0]
   d55ee:	b90b      	cbnz	r3, d55f4 <setup+0x27c>
   d55f0:	2302      	movs	r3, #2
   d55f2:	7033      	strb	r3, [r6, #0]
  digitalWrite(blueLED,LOW);
   d55f4:	2100      	movs	r1, #0
   d55f6:	2007      	movs	r0, #7
   d55f8:	f004 fb4b 	bl	d9c92 <digitalWrite>
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d55fc:	a804      	add	r0, sp, #16
   d55fe:	f003 fe4f 	bl	d92a0 <_ZN6StringD1Ev>
}
   d5602:	b028      	add	sp, #160	; 0xa0
   d5604:	bd70      	pop	{r4, r5, r6, pc}
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d5606:	f7ff fe7b 	bl	d5300 <_Z18loadSystemDefaultsv>
   d560a:	e764      	b.n	d54d6 <setup+0x15e>
   d560c:	2320      	movs	r3, #32
   d560e:	462a      	mov	r2, r5
   d5610:	4833      	ldr	r0, [pc, #204]	; (d56e0 <setup+0x368>)
   d5612:	f001 f8bb 	bl	d678c <_ZN6MB85RC8readDataEjPhj>
        return t;
   d5616:	e75e      	b.n	d54d6 <setup+0x15e>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5618:	4611      	mov	r1, r2
   d561a:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d561c:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d561e:	f002 fb2f 	bl	d7c80 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5622:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d5624:	2b8c      	cmp	r3, #140	; 0x8c
   d5626:	f47f af6c 	bne.w	d5502 <setup+0x18a>
   d562a:	e764      	b.n	d54f6 <setup+0x17e>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
   d562c:	f003 ffae 	bl	d958c <_ZN9TimeClass6endDSTEv>
   d5630:	e786      	b.n	d5540 <setup+0x1c8>
   d5632:	bf00      	nop
   d5634:	f3af 8000 	nop.w
   d5638:	00000000 	.word	0x00000000
   d563c:	40ac2000 	.word	0x40ac2000
   d5640:	000d40c9 	.word	0x000d40c9
   d5644:	000d4311 	.word	0x000d4311
   d5648:	2003e3a0 	.word	0x2003e3a0
   d564c:	2003e39c 	.word	0x2003e39c
   d5650:	2003e23c 	.word	0x2003e23c
   d5654:	000daca8 	.word	0x000daca8
   d5658:	2003e12d 	.word	0x2003e12d
   d565c:	000dacaf 	.word	0x000dacaf
   d5660:	2003e3b0 	.word	0x2003e3b0
   d5664:	000dacbe 	.word	0x000dacbe
   d5668:	2003e110 	.word	0x2003e110
   d566c:	000dacc9 	.word	0x000dacc9
   d5670:	2003e1a9 	.word	0x2003e1a9
   d5674:	000dacd3 	.word	0x000dacd3
   d5678:	2003e121 	.word	0x2003e121
   d567c:	000dacdc 	.word	0x000dacdc
   d5680:	2003e11c 	.word	0x2003e11c
   d5684:	000dace8 	.word	0x000dace8
   d5688:	2003e3a8 	.word	0x2003e3a8
   d568c:	000dacf0 	.word	0x000dacf0
   d5690:	2003e2d0 	.word	0x2003e2d0
   d5694:	000dacfb 	.word	0x000dacfb
   d5698:	2003e2f4 	.word	0x2003e2f4
   d569c:	000dad02 	.word	0x000dad02
   d56a0:	2003e28e 	.word	0x2003e28e
   d56a4:	000dad0d 	.word	0x000dad0d
   d56a8:	000dad1c 	.word	0x000dad1c
   d56ac:	000d411d 	.word	0x000d411d
   d56b0:	000d86ad 	.word	0x000d86ad
   d56b4:	000dad26 	.word	0x000dad26
   d56b8:	000d43a5 	.word	0x000d43a5
   d56bc:	000dad30 	.word	0x000dad30
   d56c0:	000d4139 	.word	0x000d4139
   d56c4:	000dad38 	.word	0x000dad38
   d56c8:	000d43f5 	.word	0x000d43f5
   d56cc:	000dad45 	.word	0x000dad45
   d56d0:	000d4481 	.word	0x000d4481
   d56d4:	000dad52 	.word	0x000dad52
   d56d8:	000d4aa1 	.word	0x000d4aa1
   d56dc:	000d4599 	.word	0x000d4599
   d56e0:	2003e31c 	.word	0x2003e31c
   d56e4:	000dadfc 	.word	0x000dadfc
   d56e8:	2003e3c0 	.word	0x2003e3c0
   d56ec:	000daaa2 	.word	0x000daaa2
   d56f0:	2003e37c 	.word	0x2003e37c
   d56f4:	000daa68 	.word	0x000daa68
   d56f8:	2003e2b8 	.word	0x2003e2b8
   d56fc:	2003e2ec 	.word	0x2003e2ec
   d5700:	2003e300 	.word	0x2003e300
   d5704:	2003f400 	.word	0x2003f400
   d5708:	2003f408 	.word	0x2003f408
   d570c:	2003f410 	.word	0x2003f410
   d5710:	2003e3c4 	.word	0x2003e3c4
   d5714:	2003e398 	.word	0x2003e398
   d5718:	2003e32c 	.word	0x2003e32c
   d571c:	2003e28c 	.word	0x2003e28c
   d5720:	000dad60 	.word	0x000dad60
   d5724:	000dac43 	.word	0x000dac43
   d5728:	2003e340 	.word	0x2003e340

000d572c <_GLOBAL__sub_I___appProductID>:
}
   d572c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
   d572e:	4b3f      	ldr	r3, [pc, #252]	; (d582c <_GLOBAL__sub_I___appProductID+0x100>)
              error_(SYSTEM_ERROR_NONE) {
   d5730:	4e3f      	ldr	r6, [pc, #252]	; (d5830 <_GLOBAL__sub_I___appProductID+0x104>)
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5732:	4d40      	ldr	r5, [pc, #256]	; (d5834 <_GLOBAL__sub_I___appProductID+0x108>)
   d5734:	2400      	movs	r4, #0
   d5736:	601c      	str	r4, [r3, #0]
   d5738:	4b3f      	ldr	r3, [pc, #252]	; (d5838 <_GLOBAL__sub_I___appProductID+0x10c>)
   d573a:	2701      	movs	r7, #1
   d573c:	701f      	strb	r7, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d573e:	f004 fa41 	bl	d9bc4 <spark_protocol_instance>
   d5742:	4623      	mov	r3, r4
   d5744:	4622      	mov	r2, r4
   d5746:	f642 51df 	movw	r1, #11743	; 0x2ddf
   d574a:	f004 fa43 	bl	d9bd4 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d574e:	f004 fa39 	bl	d9bc4 <spark_protocol_instance>
   d5752:	4622      	mov	r2, r4
   d5754:	4623      	mov	r3, r4
   d5756:	2109      	movs	r1, #9
   d5758:	f004 fa44 	bl	d9be4 <spark_protocol_set_product_firmware_version>
    SleepResult() {}
   d575c:	4b37      	ldr	r3, [pc, #220]	; (d583c <_GLOBAL__sub_I___appProductID+0x110>)
   d575e:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5760:	6034      	str	r4, [r6, #0]
   d5762:	80b4      	strh	r4, [r6, #4]
    SleepResult() {}
   d5764:	71b4      	strb	r4, [r6, #6]
        set_system_mode(mode);
   d5766:	2002      	movs	r0, #2
   d5768:	f002 fc7c 	bl	d8064 <set_system_mode>
   d576c:	462a      	mov	r2, r5
   d576e:	4934      	ldr	r1, [pc, #208]	; (d5840 <_GLOBAL__sub_I___appProductID+0x114>)
   d5770:	4630      	mov	r0, r6
   d5772:	f004 fafb 	bl	d9d6c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5776:	4621      	mov	r1, r4
   d5778:	4638      	mov	r0, r7
   d577a:	f002 fc83 	bl	d8084 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d577e:	4639      	mov	r1, r7
   d5780:	2004      	movs	r0, #4
   d5782:	f002 fa75 	bl	d7c70 <HAL_Feature_Set>
        : config_(config) {
   d5786:	482f      	ldr	r0, [pc, #188]	; (d5844 <_GLOBAL__sub_I___appProductID+0x118>)
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
   d5788:	492f      	ldr	r1, [pc, #188]	; (d5848 <_GLOBAL__sub_I___appProductID+0x11c>)
              valid_(true) {
   d578a:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d578e:	4603      	mov	r3, r0
   d5790:	1d02      	adds	r2, r0, #4
   d5792:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d5796:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d5798:	4b2c      	ldr	r3, [pc, #176]	; (d584c <_GLOBAL__sub_I___appProductID+0x120>)
   d579a:	6043      	str	r3, [r0, #4]
   d579c:	462a      	mov	r2, r5
        config_.wakeup_sources = nullptr;
   d579e:	e9c0 4403 	strd	r4, r4, [r0, #12]
              valid_(true) {
   d57a2:	7507      	strb	r7, [r0, #20]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d57a4:	7204      	strb	r4, [r0, #8]
   d57a6:	f004 fae1 	bl	d9d6c <__aeabi_atexit>
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
   d57aa:	f004 fab7 	bl	d9d1c <_Z19__fetch_global_Wirev>
   d57ae:	4e28      	ldr	r6, [pc, #160]	; (d5850 <_GLOBAL__sub_I___appProductID+0x124>)
   d57b0:	4601      	mov	r1, r0
   d57b2:	4630      	mov	r0, r6
   d57b4:	f001 fa1a 	bl	d6bec <_ZN8MCP79410C1ER7TwoWire>
   d57b8:	462a      	mov	r2, r5
   d57ba:	4926      	ldr	r1, [pc, #152]	; (d5854 <_GLOBAL__sub_I___appProductID+0x128>)
   d57bc:	4630      	mov	r0, r6
   d57be:	f004 fad5 	bl	d9d6c <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d57c2:	f004 faab 	bl	d9d1c <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d57c6:	4e24      	ldr	r6, [pc, #144]	; (d5858 <_GLOBAL__sub_I___appProductID+0x12c>)
   d57c8:	4601      	mov	r1, r0
   d57ca:	4623      	mov	r3, r4
   d57cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d57d0:	4630      	mov	r0, r6
   d57d2:	f000 ff8f 	bl	d66f4 <_ZN6MB85RCC1ER7TwoWireji>
   d57d6:	4b21      	ldr	r3, [pc, #132]	; (d585c <_GLOBAL__sub_I___appProductID+0x130>)
   d57d8:	6033      	str	r3, [r6, #0]
   d57da:	4630      	mov	r0, r6
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d57dc:	4e20      	ldr	r6, [pc, #128]	; (d5860 <_GLOBAL__sub_I___appProductID+0x134>)
   d57de:	4921      	ldr	r1, [pc, #132]	; (d5864 <_GLOBAL__sub_I___appProductID+0x138>)
   d57e0:	462a      	mov	r2, r5
   d57e2:	f004 fac3 	bl	d9d6c <__aeabi_atexit>
   d57e6:	4920      	ldr	r1, [pc, #128]	; (d5868 <_GLOBAL__sub_I___appProductID+0x13c>)
   d57e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d57ec:	4630      	mov	r0, r6
   d57ee:	f002 f8cb 	bl	d7988 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d57f2:	4b1e      	ldr	r3, [pc, #120]	; (d586c <_GLOBAL__sub_I___appProductID+0x140>)
   d57f4:	6033      	str	r3, [r6, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d57f6:	4630      	mov	r0, r6
DS18B20 ds18b20(tempSensors);
   d57f8:	4e1d      	ldr	r6, [pc, #116]	; (d5870 <_GLOBAL__sub_I___appProductID+0x144>)
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d57fa:	491e      	ldr	r1, [pc, #120]	; (d5874 <_GLOBAL__sub_I___appProductID+0x148>)
   d57fc:	462a      	mov	r2, r5
   d57fe:	f004 fab5 	bl	d9d6c <__aeabi_atexit>
DS18B20 ds18b20(tempSensors);
   d5802:	4622      	mov	r2, r4
   d5804:	2110      	movs	r1, #16
AssetTracker t;
   d5806:	4c1c      	ldr	r4, [pc, #112]	; (d5878 <_GLOBAL__sub_I___appProductID+0x14c>)
DS18B20 ds18b20(tempSensors);
   d5808:	4630      	mov	r0, r6
   d580a:	f000 fdbf 	bl	d638c <_ZN7DS18B20C1Etb>
   d580e:	462a      	mov	r2, r5
   d5810:	491a      	ldr	r1, [pc, #104]	; (d587c <_GLOBAL__sub_I___appProductID+0x150>)
   d5812:	4630      	mov	r0, r6
   d5814:	f004 faaa 	bl	d9d6c <__aeabi_atexit>
AssetTracker t;
   d5818:	4620      	mov	r0, r4
   d581a:	f000 f8b1 	bl	d5980 <_ZN12AssetTrackerC1Ev>
   d581e:	462a      	mov	r2, r5
   d5820:	4620      	mov	r0, r4
   d5822:	4917      	ldr	r1, [pc, #92]	; (d5880 <_GLOBAL__sub_I___appProductID+0x154>)
}
   d5824:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
AssetTracker t;
   d5828:	f004 baa0 	b.w	d9d6c <__aeabi_atexit>
   d582c:	2003e288 	.word	0x2003e288
   d5830:	2003e27c 	.word	0x2003e27c
   d5834:	2003e230 	.word	0x2003e230
   d5838:	2003e28c 	.word	0x2003e28c
   d583c:	ffff0000 	.word	0xffff0000
   d5840:	000d41a5 	.word	0x000d41a5
   d5844:	2003e2a0 	.word	0x2003e2a0
   d5848:	000d40d5 	.word	0x000d40d5
   d584c:	00030010 	.word	0x00030010
   d5850:	2003e37c 	.word	0x2003e37c
   d5854:	000d696b 	.word	0x000d696b
   d5858:	2003e31c 	.word	0x2003e31c
   d585c:	000dad7c 	.word	0x000dad7c
   d5860:	2003e340 	.word	0x2003e340
   d5864:	000d417d 	.word	0x000d417d
   d5868:	2003f418 	.word	0x2003f418
   d586c:	000dad98 	.word	0x000dad98
   d5870:	2003e300 	.word	0x2003e300
   d5874:	000d4155 	.word	0x000d4155
   d5878:	2003e3c4 	.word	0x2003e3c4
   d587c:	000d63e1 	.word	0x000d63e1
   d5880:	000d5949 	.word	0x000d5949

000d5884 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d5884:	4770      	bx	lr

000d5886 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d5886:	b510      	push	{r4, lr}
  }
   d5888:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d588a:	4604      	mov	r4, r0
  }
   d588c:	f004 fa73 	bl	d9d76 <_ZdlPvj>
   d5890:	4620      	mov	r0, r4
   d5892:	bd10      	pop	{r4, pc}

000d5894 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d5894:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d5896:	2301      	movs	r3, #1
   d5898:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d589a:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d589c:	4604      	mov	r4, r0
        if (th->func) {
   d589e:	b143      	cbz	r3, d58b2 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d58a0:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d58a2:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d58a4:	2301      	movs	r3, #1
   d58a6:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d58a8:	2000      	movs	r0, #0
    }
   d58aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d58ae:	f002 b9d7 	b.w	d7c60 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d58b2:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d58b4:	2800      	cmp	r0, #0
   d58b6:	d0f5      	beq.n	d58a4 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d58b8:	6883      	ldr	r3, [r0, #8]
   d58ba:	b90b      	cbnz	r3, d58c0 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d58bc:	f004 fa61 	bl	d9d82 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d58c0:	68c3      	ldr	r3, [r0, #12]
   d58c2:	e7ee      	b.n	d58a2 <_ZN6Thread3runEPv+0xe>

000d58c4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d58c4:	b40e      	push	{r1, r2, r3}
   d58c6:	b503      	push	{r0, r1, lr}
   d58c8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d58ca:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d58cc:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d58d0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d58d2:	f003 fbf0 	bl	d90b6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d58d6:	b002      	add	sp, #8
   d58d8:	f85d eb04 	ldr.w	lr, [sp], #4
   d58dc:	b003      	add	sp, #12
   d58de:	4770      	bx	lr

000d58e0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d58e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d58e2:	4604      	mov	r4, r0
   d58e4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d58e6:	7922      	ldrb	r2, [r4, #4]
   d58e8:	68a3      	ldr	r3, [r4, #8]
   d58ea:	b132      	cbz	r2, d58fa <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d58ec:	b9a3      	cbnz	r3, d5918 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d58ee:	490b      	ldr	r1, [pc, #44]	; (d591c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d58f0:	b002      	add	sp, #8
   d58f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d58f6:	f003 bbad 	b.w	d9054 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d58fa:	4a09      	ldr	r2, [pc, #36]	; (d5920 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d58fc:	7b26      	ldrb	r6, [r4, #12]
   d58fe:	4d09      	ldr	r5, [pc, #36]	; (d5924 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d5900:	4909      	ldr	r1, [pc, #36]	; (d5928 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d5902:	7b64      	ldrb	r4, [r4, #13]
   d5904:	2e01      	cmp	r6, #1
   d5906:	bf18      	it	ne
   d5908:	4629      	movne	r1, r5
   d590a:	e9cd 1400 	strd	r1, r4, [sp]
   d590e:	4907      	ldr	r1, [pc, #28]	; (d592c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d5910:	f7ff ffd8 	bl	d58c4 <_ZN5Print6printfEPKcz>
  }
   d5914:	b002      	add	sp, #8
   d5916:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d5918:	4a05      	ldr	r2, [pc, #20]	; (d5930 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d591a:	e7ef      	b.n	d58fc <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d591c:	000dae11 	.word	0x000dae11
   d5920:	000db3b0 	.word	0x000db3b0
   d5924:	000dae0d 	.word	0x000dae0d
   d5928:	000dae09 	.word	0x000dae09
   d592c:	000dae27 	.word	0x000dae27
   d5930:	000dae00 	.word	0x000dae00

000d5934 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d5934:	b510      	push	{r4, lr}
      if (_M_manager)
   d5936:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5938:	4604      	mov	r4, r0
      if (_M_manager)
   d593a:	b113      	cbz	r3, d5942 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d593c:	2203      	movs	r2, #3
   d593e:	4601      	mov	r1, r0
   d5940:	4798      	blx	r3
    }
   d5942:	4620      	mov	r0, r4
   d5944:	bd10      	pop	{r4, pc}
	...

000d5948 <_ZN12AssetTrackerD1Ev>:

AssetTracker::AssetTracker() : LegacyAdapter(gps) {
	instance = this;
}

AssetTracker::~AssetTracker() {
   d5948:	b510      	push	{r4, lr}
   d594a:	4b05      	ldr	r3, [pc, #20]	; (d5960 <_ZN12AssetTrackerD1Ev+0x18>)
   d594c:	4604      	mov	r4, r0
   d594e:	f840 3b20 	str.w	r3, [r0], #32
    class function<_Res(_ArgTypes...)>
   d5952:	f7ff ffef 	bl	d5934 <_ZNSt14_Function_baseD1Ev>
   d5956:	4620      	mov	r0, r4
   d5958:	f000 f9be 	bl	d5cd8 <_ZN13LegacyAdapterD1Ev>

}
   d595c:	4620      	mov	r0, r4
   d595e:	bd10      	pop	{r4, pc}
   d5960:	000daef8 	.word	0x000daef8

000d5964 <_ZN12AssetTrackerD0Ev>:
AssetTracker::~AssetTracker() {
   d5964:	b510      	push	{r4, lr}
   d5966:	4604      	mov	r4, r0
}
   d5968:	f7ff ffee 	bl	d5948 <_ZN12AssetTrackerD1Ev>
   d596c:	4620      	mov	r0, r4
   d596e:	2130      	movs	r1, #48	; 0x30
   d5970:	f004 fa01 	bl	d9d76 <_ZdlPvj>
   d5974:	4620      	mov	r0, r4
   d5976:	bd10      	pop	{r4, pc}

000d5978 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5978:	6803      	ldr	r3, [r0, #0]
   d597a:	b2c9      	uxtb	r1, r1
   d597c:	689b      	ldr	r3, [r3, #8]
   d597e:	4718      	bx	r3

000d5980 <_ZN12AssetTrackerC1Ev>:
AssetTracker::AssetTracker() : LegacyAdapter(gps) {
   d5980:	b538      	push	{r3, r4, r5, lr}
   d5982:	490b      	ldr	r1, [pc, #44]	; (d59b0 <_ZN12AssetTrackerC1Ev+0x30>)
   d5984:	4604      	mov	r4, r0
   d5986:	2500      	movs	r5, #0
   d5988:	f000 f9ae 	bl	d5ce8 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>
   d598c:	4b09      	ldr	r3, [pc, #36]	; (d59b4 <_ZN12AssetTrackerC1Ev+0x34>)
   d598e:	6023      	str	r3, [r4, #0]
   d5990:	7225      	strb	r5, [r4, #8]
   d5992:	f004 f9c3 	bl	d9d1c <_Z19__fetch_global_Wirev>
   d5996:	2342      	movs	r3, #66	; 0x42
   d5998:	7423      	strb	r3, [r4, #16]
   d599a:	60e0      	str	r0, [r4, #12]
   d599c:	f003 ffd2 	bl	d9944 <_Z22__fetch_global_Serial1v>
	instance = this;
   d59a0:	4b05      	ldr	r3, [pc, #20]	; (d59b8 <_ZN12AssetTrackerC1Ev+0x38>)
AssetTracker::AssetTracker() : LegacyAdapter(gps) {
   d59a2:	61e5      	str	r5, [r4, #28]
	instance = this;
   d59a4:	601c      	str	r4, [r3, #0]
AssetTracker::AssetTracker() : LegacyAdapter(gps) {
   d59a6:	e9c4 0505 	strd	r0, r5, [r4, #20]
    _Function_base() : _M_manager(nullptr) { }
   d59aa:	62a5      	str	r5, [r4, #40]	; 0x28
}
   d59ac:	4620      	mov	r0, r4
   d59ae:	bd38      	pop	{r3, r4, r5, pc}
   d59b0:	2003e408 	.word	0x2003e408
   d59b4:	000daef8 	.word	0x000daef8
   d59b8:	2003e5d0 	.word	0x2003e5d0

000d59bc <_ZN12AssetTracker17startThreadedModeEv>:
			}
		}
	}
}

void AssetTracker::startThreadedMode() {
   d59bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (thread == NULL) {
   d59be:	6986      	ldr	r6, [r0, #24]
void AssetTracker::startThreadedMode() {
   d59c0:	4607      	mov	r7, r0
	if (thread == NULL) {
   d59c2:	2e00      	cmp	r6, #0
   d59c4:	d138      	bne.n	d5a38 <_ZN12AssetTracker17startThreadedModeEv+0x7c>
		thread = new Thread("AssetTracker", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d59c6:	2004      	movs	r0, #4
   d59c8:	f7fe fb65 	bl	d4096 <_Znwj>
   d59cc:	4605      	mov	r5, r0
   d59ce:	b390      	cbz	r0, d5a36 <_ZN12AssetTracker17startThreadedModeEv+0x7a>
        : d_(new(std::nothrow) Data)
   d59d0:	491a      	ldr	r1, [pc, #104]	; (d5a3c <_ZN12AssetTracker17startThreadedModeEv+0x80>)
   d59d2:	2014      	movs	r0, #20
   d59d4:	f004 f9d1 	bl	d9d7a <_ZnwjRKSt9nothrow_t>
   d59d8:	b128      	cbz	r0, d59e6 <_ZN12AssetTracker17startThreadedModeEv+0x2a>
            exited(false) {
   d59da:	e9c0 6600 	strd	r6, r6, [r0]
   d59de:	e9c0 6602 	strd	r6, r6, [r0, #8]
   d59e2:	7406      	strb	r6, [r0, #16]
   d59e4:	7446      	strb	r6, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d59e6:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d59e8:	b1a0      	cbz	r0, d5a14 <_ZN12AssetTracker17startThreadedModeEv+0x58>
        d_->func = function;
   d59ea:	4b15      	ldr	r3, [pc, #84]	; (d5a40 <_ZN12AssetTracker17startThreadedModeEv+0x84>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d59ec:	4915      	ldr	r1, [pc, #84]	; (d5a44 <_ZN12AssetTracker17startThreadedModeEv+0x88>)
        d_->func_param = function_param;
   d59ee:	e9c0 3702 	strd	r3, r7, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d59f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d59f6:	e9cd 0300 	strd	r0, r3, [sp]
   d59fa:	2202      	movs	r2, #2
   d59fc:	4b12      	ldr	r3, [pc, #72]	; (d5a48 <_ZN12AssetTracker17startThreadedModeEv+0x8c>)
   d59fe:	3004      	adds	r0, #4
   d5a00:	f002 f8ee 	bl	d7be0 <os_thread_create>
   d5a04:	b930      	cbnz	r0, d5a14 <_ZN12AssetTracker17startThreadedModeEv+0x58>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d5a06:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d5a08:	7c1b      	ldrb	r3, [r3, #16]
   d5a0a:	b9a3      	cbnz	r3, d5a36 <_ZN12AssetTracker17startThreadedModeEv+0x7a>
            HAL_Delay_Milliseconds(1);
   d5a0c:	2001      	movs	r0, #1
   d5a0e:	f002 f947 	bl	d7ca0 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d5a12:	e7f8      	b.n	d5a06 <_ZN12AssetTracker17startThreadedModeEv+0x4a>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a14:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5a16:	2300      	movs	r3, #0
   d5a18:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d5a1a:	b164      	cbz	r4, d5a36 <_ZN12AssetTracker17startThreadedModeEv+0x7a>
	if (__ptr != nullptr)
   d5a1c:	6826      	ldr	r6, [r4, #0]
   d5a1e:	b136      	cbz	r6, d5a2e <_ZN12AssetTracker17startThreadedModeEv+0x72>
    class function<_Res(_ArgTypes...)>
   d5a20:	4630      	mov	r0, r6
   d5a22:	f7ff ff87 	bl	d5934 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d5a26:	2110      	movs	r1, #16
   d5a28:	4630      	mov	r0, r6
   d5a2a:	f004 f9a4 	bl	d9d76 <_ZdlPvj>
   d5a2e:	2114      	movs	r1, #20
   d5a30:	4620      	mov	r0, r4
   d5a32:	f004 f9a0 	bl	d9d76 <_ZdlPvj>
   d5a36:	61bd      	str	r5, [r7, #24]
	}
}
   d5a38:	b003      	add	sp, #12
   d5a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5a3c:	000db390 	.word	0x000db390
   d5a40:	000d5c45 	.word	0x000d5c45
   d5a44:	000dae44 	.word	0x000dae44
   d5a48:	000d5895 	.word	0x000d5895

000d5a4c <_ZN12AssetTracker7withI2CER7TwoWireh>:
	useWire = false;
	serialPort = port;
	return *this;
}

AssetTracker &AssetTracker::withI2C(TwoWire &wire, uint8_t addr) {
   d5a4c:	b510      	push	{r4, lr}
	useWire = true;
   d5a4e:	2301      	movs	r3, #1
   d5a50:	7203      	strb	r3, [r0, #8]
	this->wire = wire;
   d5a52:	68c3      	ldr	r3, [r0, #12]
AssetTracker &AssetTracker::withI2C(TwoWire &wire, uint8_t addr) {
   d5a54:	4604      	mov	r4, r0
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d5a56:	6848      	ldr	r0, [r1, #4]
class Print
   d5a58:	6058      	str	r0, [r3, #4]
   d5a5a:	6888      	ldr	r0, [r1, #8]
   d5a5c:	6098      	str	r0, [r3, #8]
   d5a5e:	68c8      	ldr	r0, [r1, #12]
   d5a60:	60d8      	str	r0, [r3, #12]
class TwoWire : public Stream
   d5a62:	7c08      	ldrb	r0, [r1, #16]
   d5a64:	7418      	strb	r0, [r3, #16]
	this->wireAddr = addr;

	wire.begin();
   d5a66:	4608      	mov	r0, r1
	this->wireAddr = addr;
   d5a68:	7422      	strb	r2, [r4, #16]
	wire.begin();
   d5a6a:	f003 f92d 	bl	d8cc8 <_ZN7TwoWire5beginEv>

	return *this;
}
   d5a6e:	4620      	mov	r0, r4
   d5a70:	bd10      	pop	{r4, pc}
	...

000d5a74 <_ZN12AssetTracker22wireReadBytesAvailableEv>:

uint16_t AssetTracker::wireReadBytesAvailable() {
   d5a74:	b538      	push	{r3, r4, r5, lr}
   d5a76:	4605      	mov	r5, r0
	uint8_t res;

	wire.beginTransmission(wireAddr);
   d5a78:	7c01      	ldrb	r1, [r0, #16]
   d5a7a:	68c0      	ldr	r0, [r0, #12]
   d5a7c:	f003 f953 	bl	d8d26 <_ZN7TwoWire17beginTransmissionEh>
	wire.write(0xfd);
   d5a80:	21fd      	movs	r1, #253	; 0xfd
   d5a82:	68e8      	ldr	r0, [r5, #12]
   d5a84:	f7ff ff78 	bl	d5978 <_ZN7TwoWire5writeEi>
	res = wire.endTransmission(false);
   d5a88:	68e8      	ldr	r0, [r5, #12]
   d5a8a:	2100      	movs	r1, #0
   d5a8c:	f003 f952 	bl	d8d34 <_ZN7TwoWire15endTransmissionEh>
	if (res != 0) {
   d5a90:	b130      	cbz	r0, d5aa0 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x2c>
		Log.info("wireReadBytesAvailable I2C error %u", res);
   d5a92:	490f      	ldr	r1, [pc, #60]	; (d5ad0 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x5c>)
   d5a94:	4602      	mov	r2, r0
   d5a96:	480f      	ldr	r0, [pc, #60]	; (d5ad4 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x60>)
   d5a98:	f7fe fbfa 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
		return 0;
   d5a9c:	2000      	movs	r0, #0

	uint16_t available = wire.read() << 8;
	available |= wire.read();

	return available;
}
   d5a9e:	bd38      	pop	{r3, r4, r5, pc}
	res = wire.requestFrom(wireAddr, (uint8_t) 2, (uint8_t) true);
   d5aa0:	2202      	movs	r2, #2
   d5aa2:	7c29      	ldrb	r1, [r5, #16]
   d5aa4:	68e8      	ldr	r0, [r5, #12]
   d5aa6:	2301      	movs	r3, #1
   d5aa8:	f003 f92b 	bl	d8d02 <_ZN7TwoWire11requestFromEhjh>
	if (res != 2) {
   d5aac:	b2c2      	uxtb	r2, r0
   d5aae:	2a02      	cmp	r2, #2
   d5ab0:	d001      	beq.n	d5ab6 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x42>
		Log.info("wireReadBytesAvailable incorrect count %u", res);
   d5ab2:	4909      	ldr	r1, [pc, #36]	; (d5ad8 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x64>)
   d5ab4:	e7ef      	b.n	d5a96 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x22>
	uint16_t available = wire.read() << 8;
   d5ab6:	68e8      	ldr	r0, [r5, #12]
   d5ab8:	6803      	ldr	r3, [r0, #0]
   d5aba:	695b      	ldr	r3, [r3, #20]
   d5abc:	4798      	blx	r3
   d5abe:	4604      	mov	r4, r0
	available |= wire.read();
   d5ac0:	68e8      	ldr	r0, [r5, #12]
   d5ac2:	6803      	ldr	r3, [r0, #0]
   d5ac4:	695b      	ldr	r3, [r3, #20]
   d5ac6:	4798      	blx	r3
   d5ac8:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d5acc:	b280      	uxth	r0, r0
	return available;
   d5ace:	e7e6      	b.n	d5a9e <_ZN12AssetTracker22wireReadBytesAvailableEv+0x2a>
   d5ad0:	000dae51 	.word	0x000dae51
   d5ad4:	2003e624 	.word	0x2003e624
   d5ad8:	000dae75 	.word	0x000dae75

000d5adc <_ZN12AssetTracker13wireReadBytesEPhj>:

int AssetTracker::wireReadBytes(uint8_t *buf, size_t len) {
   d5adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5ae0:	4606      	mov	r6, r0
   d5ae2:	4688      	mov	r8, r1
	uint8_t res;

	// Log.info("wireReadBytes len=%u", len);

	wire.beginTransmission(wireAddr);
   d5ae4:	7c01      	ldrb	r1, [r0, #16]
   d5ae6:	68c0      	ldr	r0, [r0, #12]
int AssetTracker::wireReadBytes(uint8_t *buf, size_t len) {
   d5ae8:	4615      	mov	r5, r2
	wire.beginTransmission(wireAddr);
   d5aea:	f003 f91c 	bl	d8d26 <_ZN7TwoWire17beginTransmissionEh>
	wire.write(0xff);
   d5aee:	21ff      	movs	r1, #255	; 0xff
   d5af0:	68f0      	ldr	r0, [r6, #12]
   d5af2:	f7ff ff41 	bl	d5978 <_ZN7TwoWire5writeEi>
	res = wire.endTransmission(false);
   d5af6:	68f0      	ldr	r0, [r6, #12]
   d5af8:	2100      	movs	r1, #0
   d5afa:	f003 f91b 	bl	d8d34 <_ZN7TwoWire15endTransmissionEh>
	if (res != 0) {
   d5afe:	4602      	mov	r2, r0
   d5b00:	b138      	cbz	r0, d5b12 <_ZN12AssetTracker13wireReadBytesEPhj+0x36>
		Log.info("wireReadBytes I2C error %u", res);
   d5b02:	4916      	ldr	r1, [pc, #88]	; (d5b5c <_ZN12AssetTracker13wireReadBytesEPhj+0x80>)
		if (reqLen > 32) {
			reqLen = 32;
		}
		res = wire.requestFrom(wireAddr, (uint8_t) reqLen, (uint8_t) ((offset + reqLen) == len));
		if (res != reqLen) {
			Log.info("wireReadBytes incorrect count %u", res);
   d5b04:	4816      	ldr	r0, [pc, #88]	; (d5b60 <_ZN12AssetTracker13wireReadBytesEPhj+0x84>)
   d5b06:	f7fe fbc3 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
			return -1;
   d5b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			buf[offset + ii] = wire.read();
		}
		offset += reqLen;
 	}
	return len;
}
   d5b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t offset = 0;
   d5b12:	4604      	mov	r4, r0
	while(offset < len) {
   d5b14:	42a5      	cmp	r5, r4
   d5b16:	d91f      	bls.n	d5b58 <_ZN12AssetTracker13wireReadBytesEPhj+0x7c>
		size_t reqLen = (len - offset);
   d5b18:	1b2f      	subs	r7, r5, r4
		if (reqLen > 32) {
   d5b1a:	2f20      	cmp	r7, #32
   d5b1c:	bf28      	it	cs
   d5b1e:	2720      	movcs	r7, #32
		res = wire.requestFrom(wireAddr, (uint8_t) reqLen, (uint8_t) ((offset + reqLen) == len));
   d5b20:	eb04 0907 	add.w	r9, r4, r7
   d5b24:	eba5 0209 	sub.w	r2, r5, r9
   d5b28:	4253      	negs	r3, r2
   d5b2a:	4153      	adcs	r3, r2
   d5b2c:	7c31      	ldrb	r1, [r6, #16]
   d5b2e:	68f0      	ldr	r0, [r6, #12]
   d5b30:	463a      	mov	r2, r7
   d5b32:	f003 f8e6 	bl	d8d02 <_ZN7TwoWire11requestFromEhjh>
		if (res != reqLen) {
   d5b36:	b2c2      	uxtb	r2, r0
   d5b38:	4297      	cmp	r7, r2
   d5b3a:	d001      	beq.n	d5b40 <_ZN12AssetTracker13wireReadBytesEPhj+0x64>
			Log.info("wireReadBytes incorrect count %u", res);
   d5b3c:	4909      	ldr	r1, [pc, #36]	; (d5b64 <_ZN12AssetTracker13wireReadBytesEPhj+0x88>)
   d5b3e:	e7e1      	b.n	d5b04 <_ZN12AssetTracker13wireReadBytesEPhj+0x28>
   d5b40:	4444      	add	r4, r8
   d5b42:	4427      	add	r7, r4
			buf[offset + ii] = wire.read();
   d5b44:	68f0      	ldr	r0, [r6, #12]
   d5b46:	6803      	ldr	r3, [r0, #0]
   d5b48:	695b      	ldr	r3, [r3, #20]
   d5b4a:	4798      	blx	r3
   d5b4c:	f804 0b01 	strb.w	r0, [r4], #1
		for(size_t ii = 0; ii < reqLen; ii++) {
   d5b50:	42bc      	cmp	r4, r7
   d5b52:	d1f7      	bne.n	d5b44 <_ZN12AssetTracker13wireReadBytesEPhj+0x68>
		offset += reqLen;
   d5b54:	464c      	mov	r4, r9
   d5b56:	e7dd      	b.n	d5b14 <_ZN12AssetTracker13wireReadBytesEPhj+0x38>
	return len;
   d5b58:	4628      	mov	r0, r5
   d5b5a:	e7d8      	b.n	d5b0e <_ZN12AssetTracker13wireReadBytesEPhj+0x32>
   d5b5c:	000dae9f 	.word	0x000dae9f
   d5b60:	2003e624 	.word	0x2003e624
   d5b64:	000daeba 	.word	0x000daeba

000d5b68 <_ZN12AssetTracker14getTinyGPSPlusEv>:
	return &accel;
}

TinyGPSPlus *AssetTracker::getTinyGPSPlus() {
	return &gps;
}
   d5b68:	4800      	ldr	r0, [pc, #0]	; (d5b6c <_ZN12AssetTracker14getTinyGPSPlusEv+0x4>)
   d5b6a:	4770      	bx	lr
   d5b6c:	2003e408 	.word	0x2003e408

000d5b70 <_ZNKSt8functionIFbcEEclEc>:
    function<_Res(_ArgTypes...)>::
   d5b70:	b507      	push	{r0, r1, r2, lr}
      if (_M_empty())
   d5b72:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5b74:	f88d 1007 	strb.w	r1, [sp, #7]
      if (_M_empty())
   d5b78:	b90a      	cbnz	r2, d5b7e <_ZNKSt8functionIFbcEEclEc+0xe>
	__throw_bad_function_call();
   d5b7a:	f004 f902 	bl	d9d82 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5b7e:	68c3      	ldr	r3, [r0, #12]
   d5b80:	f10d 0107 	add.w	r1, sp, #7
   d5b84:	4798      	blx	r3
    }
   d5b86:	b003      	add	sp, #12
   d5b88:	f85d fb04 	ldr.w	pc, [sp], #4

000d5b8c <_ZN12AssetTracker9updateGPSEv>:
void AssetTracker::updateGPS(void) {
   d5b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!useWire) {
   d5b90:	7a03      	ldrb	r3, [r0, #8]
void AssetTracker::updateGPS(void) {
   d5b92:	b08a      	sub	sp, #40	; 0x28
   d5b94:	4604      	mov	r4, r0
	if (!useWire) {
   d5b96:	b9cb      	cbnz	r3, d5bcc <_ZN12AssetTracker9updateGPSEv+0x40>
			gps.encode(c);
   d5b98:	4e25      	ldr	r6, [pc, #148]	; (d5c30 <_ZN12AssetTracker9updateGPSEv+0xa4>)
				externalDecoder(c);
   d5b9a:	f100 0520 	add.w	r5, r0, #32
		while (serialPort.available() > 0) {
   d5b9e:	6960      	ldr	r0, [r4, #20]
   d5ba0:	6803      	ldr	r3, [r0, #0]
   d5ba2:	691b      	ldr	r3, [r3, #16]
   d5ba4:	4798      	blx	r3
   d5ba6:	2800      	cmp	r0, #0
   d5ba8:	dd1f      	ble.n	d5bea <_ZN12AssetTracker9updateGPSEv+0x5e>
			char c = (char)serialPort.read();
   d5baa:	6960      	ldr	r0, [r4, #20]
   d5bac:	6803      	ldr	r3, [r0, #0]
   d5bae:	695b      	ldr	r3, [r3, #20]
   d5bb0:	4798      	blx	r3
   d5bb2:	b2c1      	uxtb	r1, r0
			gps.encode(c);
   d5bb4:	4630      	mov	r0, r6
   d5bb6:	9101      	str	r1, [sp, #4]
   d5bb8:	f000 fb74 	bl	d62a4 <_ZN11TinyGPSPlus6encodeEc>
			if (externalDecoder) {
   d5bbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5bbe:	9901      	ldr	r1, [sp, #4]
   d5bc0:	2b00      	cmp	r3, #0
   d5bc2:	d0ec      	beq.n	d5b9e <_ZN12AssetTracker9updateGPSEv+0x12>
				externalDecoder(c);
   d5bc4:	4628      	mov	r0, r5
   d5bc6:	f7ff ffd3 	bl	d5b70 <_ZNKSt8functionIFbcEEclEc>
   d5bca:	e7e8      	b.n	d5b9e <_ZN12AssetTracker9updateGPSEv+0x12>
		WITH_LOCK(wire) {
   d5bcc:	f8d0 800c 	ldr.w	r8, [r0, #12]
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5bd0:	4640      	mov	r0, r8
   d5bd2:	f003 f8b3 	bl	d8d3c <_ZN7TwoWire4lockEv>
			uint16_t available = wireReadBytesAvailable();
   d5bd6:	4620      	mov	r0, r4
   d5bd8:	f7ff ff4c 	bl	d5a74 <_ZN12AssetTracker22wireReadBytesAvailableEv>
			if (available > 32) {
   d5bdc:	2820      	cmp	r0, #32
			uint16_t available = wireReadBytesAvailable();
   d5bde:	4605      	mov	r5, r0
			if (available > 32) {
   d5be0:	d806      	bhi.n	d5bf0 <_ZN12AssetTracker9updateGPSEv+0x64>
			if (available > 0) {
   d5be2:	b930      	cbnz	r0, d5bf2 <_ZN12AssetTracker9updateGPSEv+0x66>

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d5be4:	4640      	mov	r0, r8
   d5be6:	f003 f8b2 	bl	d8d4e <_ZN7TwoWire6unlockEv>
}
   d5bea:	b00a      	add	sp, #40	; 0x28
   d5bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				available = 32;
   d5bf0:	2520      	movs	r5, #32
				if (wireReadBytes(buf, available) == available) {
   d5bf2:	462a      	mov	r2, r5
   d5bf4:	a902      	add	r1, sp, #8
   d5bf6:	4620      	mov	r0, r4
   d5bf8:	f7ff ff70 	bl	d5adc <_ZN12AssetTracker13wireReadBytesEPhj>
   d5bfc:	42a8      	cmp	r0, r5
   d5bfe:	d1f1      	bne.n	d5be4 <_ZN12AssetTracker9updateGPSEv+0x58>
						gps.encode(buf[ii]);
   d5c00:	f8df 902c 	ldr.w	r9, [pc, #44]	; d5c30 <_ZN12AssetTracker9updateGPSEv+0xa4>
   d5c04:	ae02      	add	r6, sp, #8
					for(uint16_t ii = 0; ii < available; ii++) {
   d5c06:	2700      	movs	r7, #0
							externalDecoder(buf[ii]);
   d5c08:	f104 0a20 	add.w	sl, r4, #32
						gps.encode(buf[ii]);
   d5c0c:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5c10:	4648      	mov	r0, r9
   d5c12:	f000 fb47 	bl	d62a4 <_ZN11TinyGPSPlus6encodeEc>
						if (externalDecoder) {
   d5c16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5c18:	b123      	cbz	r3, d5c24 <_ZN12AssetTracker9updateGPSEv+0x98>
							externalDecoder(buf[ii]);
   d5c1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   d5c1e:	4650      	mov	r0, sl
   d5c20:	f7ff ffa6 	bl	d5b70 <_ZNKSt8functionIFbcEEclEc>
					for(uint16_t ii = 0; ii < available; ii++) {
   d5c24:	3701      	adds	r7, #1
   d5c26:	b2bf      	uxth	r7, r7
   d5c28:	42bd      	cmp	r5, r7
   d5c2a:	d1ef      	bne.n	d5c0c <_ZN12AssetTracker9updateGPSEv+0x80>
   d5c2c:	e7da      	b.n	d5be4 <_ZN12AssetTracker9updateGPSEv+0x58>
   d5c2e:	bf00      	nop
   d5c30:	2003e408 	.word	0x2003e408

000d5c34 <_ZN12AssetTracker14threadFunctionEv>:
void AssetTracker::threadFunction() {
   d5c34:	b508      	push	{r3, lr}
   d5c36:	4604      	mov	r4, r0
		updateGPS();
   d5c38:	4620      	mov	r0, r4
   d5c3a:	f7ff ffa7 	bl	d5b8c <_ZN12AssetTracker9updateGPSEv>
		os_thread_yield();
   d5c3e:	f001 ffd7 	bl	d7bf0 <os_thread_yield>
	while(true) {
   d5c42:	e7f9      	b.n	d5c38 <_ZN12AssetTracker14threadFunctionEv+0x4>

000d5c44 <_ZN12AssetTracker20threadFunctionStaticEPv>:
void AssetTracker::threadFunctionStatic(void *param) {
   d5c44:	b508      	push	{r3, lr}
	static_cast<AssetTracker *>(param)->threadFunction();
   d5c46:	f7ff fff5 	bl	d5c34 <_ZN12AssetTracker14threadFunctionEv>
	...

000d5c4c <_GLOBAL__sub_I_emptyResponse>:
}
   d5c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}

#ifdef SYSTEM_VERSION_v151RC1
	// In 1.5.0-rc.1, SPI interfaces are handled differently. You can still pass in SPI, SPI1, etc.
	// but the code to handle it varies
	LIS3DHSPI(::particle::SpiProxy<HAL_SPI_INTERFACE1> &spiProxy, int ss = A2, int intPin = -1) : 
		LIS3DH(intPin), spi(spiProxy.instance()), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0){};
   d5c4e:	4c19      	ldr	r4, [pc, #100]	; (d5cb4 <_GLOBAL__sub_I_emptyResponse+0x68>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5c50:	4d19      	ldr	r5, [pc, #100]	; (d5cb8 <_GLOBAL__sub_I_emptyResponse+0x6c>)
   d5c52:	2108      	movs	r1, #8
   d5c54:	4620      	mov	r0, r4
   d5c56:	f000 fd13 	bl	d6680 <_ZN6LIS3DHC1Ei>
   d5c5a:	4b18      	ldr	r3, [pc, #96]	; (d5cbc <_GLOBAL__sub_I_emptyResponse+0x70>)
   d5c5c:	6023      	str	r3, [r4, #0]
   d5c5e:	7829      	ldrb	r1, [r5, #0]
   d5c60:	f3bf 8f5b 	dmb	ish
   d5c64:	f011 0101 	ands.w	r1, r1, #1
   d5c68:	d10b      	bne.n	d5c82 <_GLOBAL__sub_I_emptyResponse+0x36>
   d5c6a:	4628      	mov	r0, r5
   d5c6c:	9101      	str	r1, [sp, #4]
   d5c6e:	f7fe fa23 	bl	d40b8 <__cxa_guard_acquire>
   d5c72:	9901      	ldr	r1, [sp, #4]
   d5c74:	b128      	cbz	r0, d5c82 <_GLOBAL__sub_I_emptyResponse+0x36>
   d5c76:	4812      	ldr	r0, [pc, #72]	; (d5cc0 <_GLOBAL__sub_I_emptyResponse+0x74>)
   d5c78:	f003 fa68 	bl	d914c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5c7c:	4628      	mov	r0, r5
   d5c7e:	f7fe fa20 	bl	d40c2 <__cxa_guard_release>
   d5c82:	4b0f      	ldr	r3, [pc, #60]	; (d5cc0 <_GLOBAL__sub_I_emptyResponse+0x74>)
   d5c84:	60e3      	str	r3, [r4, #12]
   d5c86:	2311      	movs	r3, #17
   d5c88:	6123      	str	r3, [r4, #16]
   d5c8a:	2300      	movs	r3, #0
   d5c8c:	7523      	strb	r3, [r4, #20]
      dataMode_{dataMode}
   d5c8e:	7723      	strb	r3, [r4, #28]
   d5c90:	4a0c      	ldr	r2, [pc, #48]	; (d5cc4 <_GLOBAL__sub_I_emptyResponse+0x78>)
   d5c92:	4b0d      	ldr	r3, [pc, #52]	; (d5cc8 <_GLOBAL__sub_I_emptyResponse+0x7c>)
   d5c94:	61a2      	str	r2, [r4, #24]
   d5c96:	6223      	str	r3, [r4, #32]
static LIS3DHSPI accel(SPI, A2, WKP);
   d5c98:	4a0c      	ldr	r2, [pc, #48]	; (d5ccc <_GLOBAL__sub_I_emptyResponse+0x80>)
   d5c9a:	490d      	ldr	r1, [pc, #52]	; (d5cd0 <_GLOBAL__sub_I_emptyResponse+0x84>)
   d5c9c:	4805      	ldr	r0, [pc, #20]	; (d5cb4 <_GLOBAL__sub_I_emptyResponse+0x68>)
   d5c9e:	2301      	movs	r3, #1
   d5ca0:	84a3      	strh	r3, [r4, #36]	; 0x24
   d5ca2:	f004 f863 	bl	d9d6c <__aeabi_atexit>
static TinyGPSPlus gps;
   d5ca6:	480b      	ldr	r0, [pc, #44]	; (d5cd4 <_GLOBAL__sub_I_emptyResponse+0x88>)
}
   d5ca8:	b003      	add	sp, #12
   d5caa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
static TinyGPSPlus gps;
   d5cae:	f000 b85e 	b.w	d5d6e <_ZN11TinyGPSPlusC1Ev>
   d5cb2:	bf00      	nop
   d5cb4:	2003e5a8 	.word	0x2003e5a8
   d5cb8:	2003e3fc 	.word	0x2003e3fc
   d5cbc:	000daf58 	.word	0x000daf58
   d5cc0:	2003e400 	.word	0x2003e400
   d5cc4:	000daee4 	.word	0x000daee4
   d5cc8:	00989680 	.word	0x00989680
   d5ccc:	2003e230 	.word	0x2003e230
   d5cd0:	000d65c1 	.word	0x000d65c1
   d5cd4:	2003e408 	.word	0x2003e408

000d5cd8 <_ZN13LegacyAdapterD1Ev>:

}

LegacyAdapter::~LegacyAdapter() {

}
   d5cd8:	4770      	bx	lr

000d5cda <_ZN13LegacyAdapterD0Ev>:
LegacyAdapter::~LegacyAdapter() {
   d5cda:	b510      	push	{r4, lr}
}
   d5cdc:	2108      	movs	r1, #8
LegacyAdapter::~LegacyAdapter() {
   d5cde:	4604      	mov	r4, r0
}
   d5ce0:	f004 f849 	bl	d9d76 <_ZdlPvj>
   d5ce4:	4620      	mov	r0, r4
   d5ce6:	bd10      	pop	{r4, pc}

000d5ce8 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>:
LegacyAdapter::LegacyAdapter(TinyGPSPlus &gpsData) : gpsData(gpsData) {
   d5ce8:	4a01      	ldr	r2, [pc, #4]	; (d5cf0 <_ZN13LegacyAdapterC1ER11TinyGPSPlus+0x8>)
   d5cea:	e9c0 2100 	strd	r2, r1, [r0]
}
   d5cee:	4770      	bx	lr
   d5cf0:	000daf08 	.word	0x000daf08

000d5cf4 <_ZN11TinyGPSDataC1Ev>:
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d5cf4:	2200      	movs	r2, #0
	TinyGPSDate() : valid(false), updated(false), date(0), newDate(0), lastCommitTime(0)
   d5cf6:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
	TinyGPSTime() : valid(false), updated(false), time(0), newTime(0), lastCommitTime(0)
   d5cfa:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5cfe:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   d5d02:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d5d06:	8002      	strh	r2, [r0, #0]
	RawDegrees() : deg(0), billionths(0), negative(false)
   d5d08:	8082      	strh	r2, [r0, #4]
   d5d0a:	6082      	str	r2, [r0, #8]
   d5d0c:	7302      	strb	r2, [r0, #12]
   d5d0e:	8202      	strh	r2, [r0, #16]
   d5d10:	6142      	str	r2, [r0, #20]
   d5d12:	7602      	strb	r2, [r0, #24]
   d5d14:	8382      	strh	r2, [r0, #28]
   d5d16:	6202      	str	r2, [r0, #32]
   d5d18:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d5d1c:	8502      	strh	r2, [r0, #40]	; 0x28
   d5d1e:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5d20:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d5d24:	6342      	str	r2, [r0, #52]	; 0x34
	TinyGPSDate() : valid(false), updated(false), date(0), newDate(0), lastCommitTime(0)
   d5d26:	8702      	strh	r2, [r0, #56]	; 0x38
   d5d28:	6442      	str	r2, [r0, #68]	; 0x44
	TinyGPSTime() : valid(false), updated(false), time(0), newTime(0), lastCommitTime(0)
   d5d2a:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   d5d2e:	6542      	str	r2, [r0, #84]	; 0x54
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5d30:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
   d5d34:	6642      	str	r2, [r0, #100]	; 0x64
   d5d36:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
   d5d3a:	6742      	str	r2, [r0, #116]	; 0x74
   d5d3c:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
   d5d40:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   d5d44:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
	TinyGPSInteger() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5d48:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5d4c:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   d5d50:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
   d5d54:	f8a0 2088 	strh.w	r2, [r0, #136]	; 0x88
   d5d58:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	TinyGPSInteger() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5d5c:	f8a0 2098 	strh.w	r2, [r0, #152]	; 0x98
   d5d60:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5d64:	f8a0 20a8 	strh.w	r2, [r0, #168]	; 0xa8
   d5d68:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
class TinyGPSData {
   d5d6c:	4770      	bx	lr

000d5d6e <_ZN11TinyGPSPlusC1Ev>:
	return value * value;
}
#endif
// End

TinyGPSPlus::TinyGPSPlus()
   d5d6e:	b510      	push	{r4, lr}
   d5d70:	4604      	mov	r4, r0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d5d72:	f7ff ffbf 	bl	d5cf4 <_ZN11TinyGPSDataC1Ev>
   d5d76:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d5d7a:	f7ff ffbb 	bl	d5cf4 <_ZN11TinyGPSDataC1Ev>
   d5d7e:	2302      	movs	r3, #2
   d5d80:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
   d5d84:	2300      	movs	r3, #0
   d5d86:	e9c4 3362 	strd	r3, r3, [r4, #392]	; 0x188
   d5d8a:	e9c4 3364 	strd	r3, r3, [r4, #400]	; 0x190
   d5d8e:	e9c4 3366 	strd	r3, r3, [r4, #408]	; 0x198
   d5d92:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
   d5d96:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
   d5d9a:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
{
  term[0] = '\0';
   d5d9e:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
}
   d5da2:	4620      	mov	r0, r4
   d5da4:	bd10      	pop	{r4, pc}

000d5da6 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d5da6:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d5daa:	2b05      	cmp	r3, #5
   d5dac:	d802      	bhi.n	d5db4 <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d5dae:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d5db2:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d5db4:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d5db8:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d5dba:	bf94      	ite	ls
   d5dbc:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d5dc0:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d5dc4:	4770      	bx	lr

000d5dc6 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d5dc6:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d5dc8:	7805      	ldrb	r5, [r0, #0]
{
   d5dca:	4604      	mov	r4, r0
  if (negative) ++term;
   d5dcc:	2d2d      	cmp	r5, #45	; 0x2d
   d5dce:	bf08      	it	eq
   d5dd0:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d5dd2:	4620      	mov	r0, r4
   d5dd4:	f004 fc74 	bl	da6c0 <atol>
   d5dd8:	2364      	movs	r3, #100	; 0x64
   d5dda:	4358      	muls	r0, r3
   d5ddc:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d5dde:	f814 3b01 	ldrb.w	r3, [r4], #1
   d5de2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d5de6:	2909      	cmp	r1, #9
   d5de8:	d9f8      	bls.n	d5ddc <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d5dea:	2b2e      	cmp	r3, #46	; 0x2e
   d5dec:	d10b      	bne.n	d5e06 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d5dee:	7853      	ldrb	r3, [r2, #1]
   d5df0:	3b30      	subs	r3, #48	; 0x30
   d5df2:	2b09      	cmp	r3, #9
   d5df4:	d807      	bhi.n	d5e06 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d5df6:	210a      	movs	r1, #10
   d5df8:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d5dfc:	7893      	ldrb	r3, [r2, #2]
   d5dfe:	3b30      	subs	r3, #48	; 0x30
   d5e00:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d5e02:	bf98      	it	ls
   d5e04:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d5e06:	2d2d      	cmp	r5, #45	; 0x2d
   d5e08:	bf08      	it	eq
   d5e0a:	4240      	negeq	r0, r0
}
   d5e0c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5e10 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d5e10:	b538      	push	{r3, r4, r5, lr}
   d5e12:	460d      	mov	r5, r1
   d5e14:	4604      	mov	r4, r0
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d5e16:	f004 fc53 	bl	da6c0 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d5e1a:	2264      	movs	r2, #100	; 0x64
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d5e1c:	4b13      	ldr	r3, [pc, #76]	; (d5e6c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d5e1e:	fbb0 f1f2 	udiv	r1, r0, r2
   d5e22:	fb02 0011 	mls	r0, r2, r1, r0
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d5e26:	4343      	muls	r3, r0

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d5e28:	8029      	strh	r1, [r5, #0]
   d5e2a:	4620      	mov	r0, r4

  while (isdigit(*term))
   d5e2c:	7802      	ldrb	r2, [r0, #0]
   d5e2e:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   d5e32:	2c09      	cmp	r4, #9
   d5e34:	4601      	mov	r1, r0
   d5e36:	f100 0001 	add.w	r0, r0, #1
   d5e3a:	d9f7      	bls.n	d5e2c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d5e3c:	2a2e      	cmp	r2, #46	; 0x2e
   d5e3e:	d10b      	bne.n	d5e58 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
  uint32_t multiplier = 10000000UL;
   d5e40:	480a      	ldr	r0, [pc, #40]	; (d5e6c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d5e42:	240a      	movs	r4, #10
    while (isdigit(*++term))
   d5e44:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d5e48:	3a30      	subs	r2, #48	; 0x30
   d5e4a:	2a09      	cmp	r2, #9
   d5e4c:	d804      	bhi.n	d5e58 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
      multiplier /= 10;
   d5e4e:	fbb0 f0f4 	udiv	r0, r0, r4
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d5e52:	fb00 3302 	mla	r3, r0, r2, r3
    while (isdigit(*++term))
   d5e56:	e7f5      	b.n	d5e44 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d5e58:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5e5c:	3301      	adds	r3, #1
   d5e5e:	2203      	movs	r2, #3
   d5e60:	fbb3 f3f2 	udiv	r3, r3, r2
   d5e64:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d5e66:	2300      	movs	r3, #0
   d5e68:	722b      	strb	r3, [r5, #8]
}
   d5e6a:	bd38      	pop	{r3, r4, r5, pc}
   d5e6c:	00989680 	.word	0x00989680

000d5e70 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d5e70:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d5e72:	4603      	mov	r3, r0
{
   d5e74:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d5e76:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d5e7a:	6042      	str	r2, [r0, #4]
   d5e7c:	685a      	ldr	r2, [r3, #4]
   d5e7e:	6082      	str	r2, [r0, #8]
   d5e80:	7a1b      	ldrb	r3, [r3, #8]
   d5e82:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d5e84:	4603      	mov	r3, r0
   d5e86:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d5e8a:	6102      	str	r2, [r0, #16]
   d5e8c:	685a      	ldr	r2, [r3, #4]
   d5e8e:	6142      	str	r2, [r0, #20]
   d5e90:	7a1b      	ldrb	r3, [r3, #8]
   d5e92:	7603      	strb	r3, [r0, #24]
   d5e94:	f001 ff14 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5e98:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5e9c:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d5e9e:	8023      	strh	r3, [r4, #0]
}
   d5ea0:	bd10      	pop	{r4, pc}
   d5ea2:	0000      	movs	r0, r0
   d5ea4:	0000      	movs	r0, r0
	...

000d5ea8 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d5ea8:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d5eaa:	2300      	movs	r3, #0
{
   d5eac:	4604      	mov	r4, r0
   updated = false;
   d5eae:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d5eb0:	6880      	ldr	r0, [r0, #8]
   d5eb2:	f004 f8ab 	bl	da00c <__aeabi_ui2d>
   d5eb6:	a30c      	add	r3, pc, #48	; (adr r3, d5ee8 <_ZN15TinyGPSLocation3latEv+0x40>)
   d5eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5ebc:	f004 fa4a 	bl	da354 <__aeabi_ddiv>
   d5ec0:	4606      	mov	r6, r0
   d5ec2:	88a0      	ldrh	r0, [r4, #4]
   d5ec4:	460f      	mov	r7, r1
   d5ec6:	f004 f8b1 	bl	da02c <__aeabi_i2d>
   d5eca:	460b      	mov	r3, r1
   d5ecc:	4602      	mov	r2, r0
   d5ece:	4639      	mov	r1, r7
   d5ed0:	4630      	mov	r0, r6
   d5ed2:	f003 ff5f 	bl	d9d94 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d5ed6:	7b23      	ldrb	r3, [r4, #12]
   d5ed8:	b113      	cbz	r3, d5ee0 <_ZN15TinyGPSLocation3latEv+0x38>
   d5eda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d5ede:	4619      	mov	r1, r3
}
   d5ee0:	ec41 0b10 	vmov	d0, r0, r1
   d5ee4:	bdd0      	pop	{r4, r6, r7, pc}
   d5ee6:	bf00      	nop
   d5ee8:	00000000 	.word	0x00000000
   d5eec:	41cdcd65 	.word	0x41cdcd65

000d5ef0 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d5ef0:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d5ef2:	2300      	movs	r3, #0
{
   d5ef4:	4604      	mov	r4, r0
   updated = false;
   d5ef6:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d5ef8:	6940      	ldr	r0, [r0, #20]
   d5efa:	f004 f887 	bl	da00c <__aeabi_ui2d>
   d5efe:	a30c      	add	r3, pc, #48	; (adr r3, d5f30 <_ZN15TinyGPSLocation3lngEv+0x40>)
   d5f00:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f04:	f004 fa26 	bl	da354 <__aeabi_ddiv>
   d5f08:	4606      	mov	r6, r0
   d5f0a:	8a20      	ldrh	r0, [r4, #16]
   d5f0c:	460f      	mov	r7, r1
   d5f0e:	f004 f88d 	bl	da02c <__aeabi_i2d>
   d5f12:	460b      	mov	r3, r1
   d5f14:	4602      	mov	r2, r0
   d5f16:	4639      	mov	r1, r7
   d5f18:	4630      	mov	r0, r6
   d5f1a:	f003 ff3b 	bl	d9d94 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d5f1e:	7e23      	ldrb	r3, [r4, #24]
   d5f20:	b113      	cbz	r3, d5f28 <_ZN15TinyGPSLocation3lngEv+0x38>
   d5f22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d5f26:	4619      	mov	r1, r3
}
   d5f28:	ec41 0b10 	vmov	d0, r0, r1
   d5f2c:	bdd0      	pop	{r4, r6, r7, pc}
   d5f2e:	bf00      	nop
   d5f30:	00000000 	.word	0x00000000
   d5f34:	41cdcd65 	.word	0x41cdcd65

000d5f38 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d5f38:	b510      	push	{r4, lr}
   date = newDate;
   d5f3a:	6883      	ldr	r3, [r0, #8]
   d5f3c:	6043      	str	r3, [r0, #4]
{
   d5f3e:	4604      	mov	r4, r0
   d5f40:	f001 febe 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5f44:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5f48:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d5f4a:	8023      	strh	r3, [r4, #0]
}
   d5f4c:	bd10      	pop	{r4, pc}

000d5f4e <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit()
{
   d5f4e:	b510      	push	{r4, lr}
   time = newTime;
   d5f50:	6883      	ldr	r3, [r0, #8]
   d5f52:	6043      	str	r3, [r0, #4]
{
   d5f54:	4604      	mov	r4, r0
   d5f56:	f001 feb3 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5f5a:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5f5e:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d5f60:	8023      	strh	r3, [r4, #0]
}
   d5f62:	bd10      	pop	{r4, pc}

000d5f64 <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term)
{
   d5f64:	b510      	push	{r4, lr}
   d5f66:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d5f68:	4608      	mov	r0, r1
   d5f6a:	f7ff ff2c 	bl	d5dc6 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d5f6e:	60a0      	str	r0, [r4, #8]
}
   d5f70:	bd10      	pop	{r4, pc}

000d5f72 <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
   d5f72:	b510      	push	{r4, lr}
   d5f74:	4604      	mov	r4, r0
   newDate = atol(term);
   d5f76:	4608      	mov	r0, r1
   d5f78:	f004 fba2 	bl	da6c0 <atol>
   d5f7c:	60a0      	str	r0, [r4, #8]
}
   d5f7e:	bd10      	pop	{r4, pc}

000d5f80 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d5f80:	b510      	push	{r4, lr}
   val = newval;
   d5f82:	68c3      	ldr	r3, [r0, #12]
   d5f84:	6083      	str	r3, [r0, #8]
{
   d5f86:	4604      	mov	r4, r0
   d5f88:	f001 fe9a 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5f8c:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5f90:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d5f92:	8023      	strh	r3, [r4, #0]
}
   d5f94:	bd10      	pop	{r4, pc}

000d5f96 <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term)
{
   d5f96:	b510      	push	{r4, lr}
   d5f98:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d5f9a:	4608      	mov	r0, r1
   d5f9c:	f7ff ff13 	bl	d5dc6 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d5fa0:	60e0      	str	r0, [r4, #12]
}
   d5fa2:	bd10      	pop	{r4, pc}

000d5fa4 <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
   d5fa4:	b510      	push	{r4, lr}
   val = newval;
   d5fa6:	68c3      	ldr	r3, [r0, #12]
   d5fa8:	6083      	str	r3, [r0, #8]
{
   d5faa:	4604      	mov	r4, r0
   d5fac:	f001 fe88 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5fb0:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5fb4:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d5fb6:	8023      	strh	r3, [r4, #0]
}
   d5fb8:	bd10      	pop	{r4, pc}

000d5fba <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term)
{
   d5fba:	b510      	push	{r4, lr}
   d5fbc:	4604      	mov	r4, r0
   newval = atol(term);
   d5fbe:	4608      	mov	r0, r1
   d5fc0:	f004 fb7e 	bl	da6c0 <atol>
   d5fc4:	60e0      	str	r0, [r4, #12]
}
   d5fc6:	bd10      	pop	{r4, pc}

000d5fc8 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d5fc8:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d5fca:	4601      	mov	r1, r0
{
   d5fcc:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d5fce:	3010      	adds	r0, #16
   d5fd0:	f004 fbf8 	bl	da7c4 <strcpy>
   d5fd4:	f001 fe74 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5fd8:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5fdc:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d5fde:	84a3      	strh	r3, [r4, #36]	; 0x24
}
   d5fe0:	bd10      	pop	{r4, pc}

000d5fe2 <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d5fe2:	2210      	movs	r2, #16
   d5fe4:	f004 bc1b 	b.w	da81e <strncpy>

000d5fe8 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
{
   d5fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isChecksumTerm)
   d5fea:	f890 5171 	ldrb.w	r5, [r0, #369]	; 0x171
{
   d5fee:	4604      	mov	r4, r0
  if (isChecksumTerm)
   d5ff0:	2d00      	cmp	r5, #0
   d5ff2:	f000 8088 	beq.w	d6106 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11e>
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d5ff6:	f890 1172 	ldrb.w	r1, [r0, #370]	; 0x172
   d5ffa:	f7ff fed4 	bl	d5da6 <_ZN11TinyGPSPlus7fromHexEc>
   d5ffe:	f894 1173 	ldrb.w	r1, [r4, #371]	; 0x173
   d6002:	4602      	mov	r2, r0
   d6004:	4620      	mov	r0, r4
   d6006:	f7ff fece 	bl	d5da6 <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d600a:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d600e:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    if (checksum == parity)
   d6012:	b2c0      	uxtb	r0, r0
   d6014:	4283      	cmp	r3, r0
   d6016:	d16e      	bne.n	d60f6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10e>
      passedChecksumCount++;
   d6018:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
   d601c:	3301      	adds	r3, #1
   d601e:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
      if (sentenceHasFix)
   d6022:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d6026:	b123      	cbz	r3, d6032 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x4a>
        ++sentencesWithFixCount;
   d6028:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   d602c:	3301      	adds	r3, #1
   d602e:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
      switch(curSentenceType)
   d6032:	f894 3181 	ldrb.w	r3, [r4, #385]	; 0x181
   d6036:	b3e3      	cbz	r3, d60b2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xca>
   d6038:	2b01      	cmp	r3, #1
   d603a:	d12b      	bne.n	d6094 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xac>
    	tempData.date.commit();
   d603c:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   d6040:	f7ff ff7a 	bl	d5f38 <_ZN11TinyGPSDate6commitEv>
    	tempData.time.commit();
   d6044:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d6048:	f7ff ff81 	bl	d5f4e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d604c:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d6050:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d6054:	b15b      	cbz	r3, d606e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x86>
           tempData.location.commit();
   d6056:	4630      	mov	r0, r6
   d6058:	f7ff ff0a 	bl	d5e70 <_ZN15TinyGPSLocation6commitEv>
           tempData.speed.commit();
   d605c:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d6060:	f7ff ff8e 	bl	d5f80 <_ZN14TinyGPSDecimal6commitEv>
           tempData.course.commit();
   d6064:	f504 7090 	add.w	r0, r4, #288	; 0x120
        tempData.hdop.commit();
   d6068:	f7ff ff8a 	bl	d5f80 <_ZN14TinyGPSDecimal6commitEv>
   d606c:	e005      	b.n	d607a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x92>
	void invalidate() { valid = false; }
   d606e:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	void invalidate() { valid = false; }
   d6072:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
   d6076:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
        os_thread_scheduling(false, NULL);
   d607a:	2100      	movs	r1, #0
   d607c:	4608      	mov	r0, r1
   d607e:	f001 fdbf 	bl	d7c00 <os_thread_scheduling>
        	TinyGPSData::operator=(tempData);
   d6082:	4631      	mov	r1, r6
   d6084:	22b8      	movs	r2, #184	; 0xb8
   d6086:	4620      	mov	r0, r4
   d6088:	f004 fb3e 	bl	da708 <memcpy>
        os_thread_scheduling(true, NULL);
   d608c:	2100      	movs	r1, #0
   d608e:	2001      	movs	r0, #1
   d6090:	f001 fdb6 	bl	d7c00 <os_thread_scheduling>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d6094:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
   d6098:	b39e      	cbz	r6, d6102 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d609a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d609e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d60a0:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d60a2:	f004 fb85 	bl	da7b0 <strcmp>
   d60a6:	bb60      	cbnz	r0, d6102 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
         p->commit();
   d60a8:	4630      	mov	r0, r6
   d60aa:	f7ff ff8d 	bl	d5fc8 <_ZN13TinyGPSCustom6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d60ae:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d60b0:	e7f2      	b.n	d6098 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb0>
        tempData.time.commit();
   d60b2:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d60b6:	f7ff ff4a 	bl	d5f4e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d60ba:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d60be:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d60c2:	b18b      	cbz	r3, d60e8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x100>
          tempData.location.commit();
   d60c4:	4630      	mov	r0, r6
   d60c6:	f7ff fed3 	bl	d5e70 <_ZN15TinyGPSLocation6commitEv>
          tempData.altitude.commit();
   d60ca:	f504 7098 	add.w	r0, r4, #304	; 0x130
   d60ce:	f7ff ff57 	bl	d5f80 <_ZN14TinyGPSDecimal6commitEv>
          tempData.geoidSeparation.commit();
   d60d2:	f504 70a0 	add.w	r0, r4, #320	; 0x140
   d60d6:	f7ff ff53 	bl	d5f80 <_ZN14TinyGPSDecimal6commitEv>
        tempData.satellites.commit();
   d60da:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   d60de:	f7ff ff61 	bl	d5fa4 <_ZN14TinyGPSInteger6commitEv>
        tempData.hdop.commit();
   d60e2:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   d60e6:	e7bf      	b.n	d6068 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x80>
	void invalidate() { valid = false; }
   d60e8:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	void invalidate() { valid = false; }
   d60ec:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
   d60f0:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
   d60f4:	e7f1      	b.n	d60da <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf2>
      ++failedChecksumCount;
   d60f6:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
   d60fa:	3301      	adds	r3, #1
   d60fc:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
    return false;
   d6100:	2500      	movs	r5, #0
}
   d6102:	4628      	mov	r0, r5
   d6104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (curTermNumber == 0)
   d6106:	f890 2182 	ldrb.w	r2, [r0, #386]	; 0x182
   d610a:	bb6a      	cbnz	r2, d6168 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x180>
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, "GNRMC"))
   d610c:	f500 76b9 	add.w	r6, r0, #370	; 0x172
   d6110:	4960      	ldr	r1, [pc, #384]	; (d6294 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>)
   d6112:	4630      	mov	r0, r6
   d6114:	f004 fb4c 	bl	da7b0 <strcmp>
   d6118:	b120      	cbz	r0, d6124 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13c>
   d611a:	495f      	ldr	r1, [pc, #380]	; (d6298 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b0>)
   d611c:	4630      	mov	r0, r6
   d611e:	f004 fb47 	bl	da7b0 <strcmp>
   d6122:	b998      	cbnz	r0, d614c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x164>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d6124:	2301      	movs	r3, #1
      curSentenceType = GPS_SENTENCE_OTHER;
   d6126:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d612a:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
   d612e:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d6132:	f8d4 718c 	ldr.w	r7, [r4, #396]	; 0x18c
   d6136:	2f00      	cmp	r7, #0
   d6138:	d0e3      	beq.n	d6102 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d613a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   d613c:	4631      	mov	r1, r6
   d613e:	f004 fb37 	bl	da7b0 <strcmp>
   d6142:	2800      	cmp	r0, #0
   d6144:	f280 809f 	bge.w	d6286 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x29e>
   d6148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   d614a:	e7f0      	b.n	d612e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x146>
    else if (!strcmp(term, _GPGGAterm) ||!strcmp(term, "GNGGA"))
   d614c:	4953      	ldr	r1, [pc, #332]	; (d629c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b4>)
   d614e:	4630      	mov	r0, r6
   d6150:	f004 fb2e 	bl	da7b0 <strcmp>
   d6154:	b120      	cbz	r0, d6160 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x178>
   d6156:	4952      	ldr	r1, [pc, #328]	; (d62a0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b8>)
   d6158:	4630      	mov	r0, r6
   d615a:	f004 fb29 	bl	da7b0 <strcmp>
   d615e:	b908      	cbnz	r0, d6164 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x17c>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d6160:	2300      	movs	r3, #0
   d6162:	e7e0      	b.n	d6126 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13e>
      curSentenceType = GPS_SENTENCE_OTHER;
   d6164:	2302      	movs	r3, #2
   d6166:	e7de      	b.n	d6126 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13e>
  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d6168:	f890 1181 	ldrb.w	r1, [r0, #385]	; 0x181
   d616c:	2902      	cmp	r1, #2
   d616e:	d024      	beq.n	d61ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   d6170:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   d6174:	b30b      	cbz	r3, d61ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
    switch(COMBINE(curSentenceType, curTermNumber))
   d6176:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d617a:	3a01      	subs	r2, #1
   d617c:	2a28      	cmp	r2, #40	; 0x28
   d617e:	d81c      	bhi.n	d61ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   d6180:	e8df f002 	tbb	[pc, r2]
   d6184:	4a433c15 	.word	0x4a433c15
   d6188:	726b664d 	.word	0x726b664d
   d618c:	1b7c1b77 	.word	0x1b7c1b77
   d6190:	1b1b1b1b 	.word	0x1b1b1b1b
   d6194:	1b1b1b1b 	.word	0x1b1b1b1b
   d6198:	1b1b1b1b 	.word	0x1b1b1b1b
   d619c:	1b1b1b1b 	.word	0x1b1b1b1b
   d61a0:	1b1b1b1b 	.word	0x1b1b1b1b
   d61a4:	433c3515 	.word	0x433c3515
   d61a8:	5b544d4a 	.word	0x5b544d4a
   d61ac:	60          	.byte	0x60
   d61ad:	00          	.byte	0x00
	  tempData.time.setTime(term);
   d61ae:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d61b2:	f500 7080 	add.w	r0, r0, #256	; 0x100
   d61b6:	f7ff fed5 	bl	d5f64 <_ZN11TinyGPSTime7setTimeEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d61ba:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
         p->set(term);
   d61be:	f504 77b9 	add.w	r7, r4, #370	; 0x172
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d61c2:	2e00      	cmp	r6, #0
   d61c4:	d09d      	beq.n	d6102 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d61c6:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d61ca:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d61cc:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d61ce:	f004 faef 	bl	da7b0 <strcmp>
   d61d2:	2800      	cmp	r0, #0
   d61d4:	d195      	bne.n	d6102 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d61d6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d61d8:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d61dc:	429a      	cmp	r2, r3
   d61de:	dc90      	bgt.n	d6102 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
    if (p->termNumber == curTermNumber)
   d61e0:	d103      	bne.n	d61ea <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x202>
         p->set(term);
   d61e2:	4639      	mov	r1, r7
   d61e4:	4630      	mov	r0, r6
   d61e6:	f7ff fefc 	bl	d5fe2 <_ZN13TinyGPSCustom3setEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d61ea:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d61ec:	e7e9      	b.n	d61c2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1da>
      sentenceHasFix = term[0] == 'A';
   d61ee:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d61f2:	4243      	negs	r3, r0
   d61f4:	4143      	adcs	r3, r0
      sentenceHasFix = term[0] > '0';
   d61f6:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
      break;
   d61fa:	e7de      	b.n	d61ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d61fc:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d6200:	f504 70b9 	add.w	r0, r4, #370	; 0x172
   d6204:	f7ff fe04 	bl	d5e10 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
   d6208:	e7d7      	b.n	d61ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
      tempData.location.rawNewLatData.negative = term[0] == 'S';
   d620a:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d620e:	424b      	negs	r3, r1
   d6210:	414b      	adcs	r3, r1
   d6212:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
      break;
   d6216:	e7d0      	b.n	d61ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d6218:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   d621c:	e7f0      	b.n	d6200 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x218>
      tempData.location.rawNewLngData.negative = term[0] == 'W';
   d621e:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d6222:	4253      	negs	r3, r2
   d6224:	4153      	adcs	r3, r2
   d6226:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
      break;
   d622a:	e7c6      	b.n	d61ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
	  tempData.speed.set(term);
   d622c:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6230:	f500 7088 	add.w	r0, r0, #272	; 0x110
	  tempData.geoidSeparation.set(term);
   d6234:	f7ff feaf 	bl	d5f96 <_ZN14TinyGPSDecimal3setEPKc>
      break;
   d6238:	e7bf      	b.n	d61ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
	  tempData.course.set(term);
   d623a:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d623e:	f500 7090 	add.w	r0, r0, #288	; 0x120
   d6242:	e7f7      	b.n	d6234 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
	  tempData.date.setDate(term);
   d6244:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6248:	30f0      	adds	r0, #240	; 0xf0
   d624a:	f7ff fe92 	bl	d5f72 <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d624e:	e7b4      	b.n	d61ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
      sentenceHasFix = term[0] > '0';
   d6250:	2b30      	cmp	r3, #48	; 0x30
   d6252:	bf94      	ite	ls
   d6254:	2300      	movls	r3, #0
   d6256:	2301      	movhi	r3, #1
   d6258:	e7cd      	b.n	d61f6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x20e>
	  tempData.satellites.set(term);
   d625a:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d625e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   d6262:	f7ff feaa 	bl	d5fba <_ZN14TinyGPSInteger3setEPKc>
      break;
   d6266:	e7a8      	b.n	d61ba <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
	  tempData.hdop.set(term);
   d6268:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d626c:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   d6270:	e7e0      	b.n	d6234 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
	  tempData.altitude.set(term);
   d6272:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6276:	f500 7098 	add.w	r0, r0, #304	; 0x130
   d627a:	e7db      	b.n	d6234 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
	  tempData.geoidSeparation.set(term);
   d627c:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6280:	f500 70a0 	add.w	r0, r0, #320	; 0x140
   d6284:	e7d6      	b.n	d6234 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d6286:	f43f af3c 	beq.w	d6102 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
       customCandidates = NULL;
   d628a:	2300      	movs	r3, #0
   d628c:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d6290:	e737      	b.n	d6102 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d6292:	bf00      	nop
   d6294:	000daf10 	.word	0x000daf10
   d6298:	000daf16 	.word	0x000daf16
   d629c:	000daf1c 	.word	0x000daf1c
   d62a0:	000daf22 	.word	0x000daf22

000d62a4 <_ZN11TinyGPSPlus6encodeEc>:
{
   d62a4:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d62a6:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
  switch(c)
   d62aa:	2924      	cmp	r1, #36	; 0x24
  ++encodedCharCount;
   d62ac:	f103 0301 	add.w	r3, r3, #1
{
   d62b0:	4604      	mov	r4, r0
   d62b2:	460d      	mov	r5, r1
  ++encodedCharCount;
   d62b4:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190
  switch(c)
   d62b8:	d03a      	beq.n	d6330 <_ZN11TinyGPSPlus6encodeEc+0x8c>
   d62ba:	f890 3183 	ldrb.w	r3, [r0, #387]	; 0x183
   d62be:	d814      	bhi.n	d62ea <_ZN11TinyGPSPlus6encodeEc+0x46>
   d62c0:	290a      	cmp	r1, #10
   d62c2:	d01c      	beq.n	d62fe <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d62c4:	290d      	cmp	r1, #13
   d62c6:	d01a      	beq.n	d62fe <_ZN11TinyGPSPlus6encodeEc+0x5a>
    if (curTermOffset < sizeof(term) - 1)
   d62c8:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d62ca:	bf9f      	itttt	ls
   d62cc:	1c5a      	addls	r2, r3, #1
   d62ce:	191b      	addls	r3, r3, r4
   d62d0:	f884 2183 	strbls.w	r2, [r4, #387]	; 0x183
   d62d4:	f883 5172 	strbls.w	r5, [r3, #370]	; 0x172
    if (!isChecksumTerm)
   d62d8:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   d62dc:	bb98      	cbnz	r0, d6346 <_ZN11TinyGPSPlus6encodeEc+0xa2>
      parity ^= c;
   d62de:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   d62e2:	404d      	eors	r5, r1
   d62e4:	f884 5170 	strb.w	r5, [r4, #368]	; 0x170
   d62e8:	e021      	b.n	d632e <_ZN11TinyGPSPlus6encodeEc+0x8a>
  switch(c)
   d62ea:	292a      	cmp	r1, #42	; 0x2a
   d62ec:	d007      	beq.n	d62fe <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d62ee:	292c      	cmp	r1, #44	; 0x2c
   d62f0:	d1ea      	bne.n	d62c8 <_ZN11TinyGPSPlus6encodeEc+0x24>
    parity ^= (uint8_t)c;
   d62f2:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   d62f6:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d62fa:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
      if (curTermOffset < sizeof(term))
   d62fe:	2b0e      	cmp	r3, #14
   d6300:	f04f 0000 	mov.w	r0, #0
   d6304:	d805      	bhi.n	d6312 <_ZN11TinyGPSPlus6encodeEc+0x6e>
        term[curTermOffset] = 0;
   d6306:	4423      	add	r3, r4
   d6308:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
        isValidSentence = endOfTermHandler();
   d630c:	4620      	mov	r0, r4
   d630e:	f7ff fe6b 	bl	d5fe8 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      ++curTermNumber;
   d6312:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d6316:	3301      	adds	r3, #1
   d6318:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
      curTermOffset = 0;
   d631c:	2300      	movs	r3, #0
   d631e:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
      isChecksumTerm = c == '*';
   d6322:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d6326:	425d      	negs	r5, r3
   d6328:	415d      	adcs	r5, r3
   d632a:	f884 5171 	strb.w	r5, [r4, #369]	; 0x171
}
   d632e:	bd38      	pop	{r3, r4, r5, pc}
    parity = 0;
   d6330:	2000      	movs	r0, #0
    curSentenceType = GPS_SENTENCE_OTHER;
   d6332:	2302      	movs	r3, #2
    parity = 0;
   d6334:	f8a4 0170 	strh.w	r0, [r4, #368]	; 0x170
    curSentenceType = GPS_SENTENCE_OTHER;
   d6338:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
    curTermNumber = curTermOffset = 0;
   d633c:	f8a4 0182 	strh.w	r0, [r4, #386]	; 0x182
    sentenceHasFix = false;
   d6340:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
    return false;
   d6344:	e7f3      	b.n	d632e <_ZN11TinyGPSPlus6encodeEc+0x8a>
    return false;
   d6346:	2000      	movs	r0, #0
   d6348:	e7f1      	b.n	d632e <_ZN11TinyGPSPlus6encodeEc+0x8a>

000d634a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d634a:	b513      	push	{r0, r1, r4, lr}
   d634c:	460b      	mov	r3, r1
   d634e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6350:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6354:	466c      	mov	r4, sp
   d6356:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d635a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d635e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6362:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6366:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d636a:	b002      	add	sp, #8
   d636c:	bd10      	pop	{r4, pc}
	...

000d6370 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj>:
   d6370:	4b03      	ldr	r3, [pc, #12]	; (d6380 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x10>)
   d6372:	2201      	movs	r2, #1
   d6374:	701a      	strb	r2, [r3, #0]
        name_(name) {
   d6376:	4b03      	ldr	r3, [pc, #12]	; (d6384 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x14>)
   d6378:	4a03      	ldr	r2, [pc, #12]	; (d6388 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x18>)
   d637a:	601a      	str	r2, [r3, #0]
bool AssistNowDownload::alloc(size_t bufferSize) {
	this->bufferSize = bufferSize;
	this->buffer = new uint8_t[bufferSize];

	return (this->buffer != NULL);
}
   d637c:	4770      	bx	lr
   d637e:	bf00      	nop
   d6380:	2003e5d8 	.word	0x2003e5d8
   d6384:	2003e5d4 	.word	0x2003e5d4
   d6388:	000daf28 	.word	0x000daf28

000d638c <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d638c:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
  memset(_data, 0, sizeof(_data));
   d638e:	2300      	movs	r3, #0
   d6390:	6043      	str	r3, [r0, #4]
   d6392:	6083      	str	r3, [r0, #8]
   d6394:	60c3      	str	r3, [r0, #12]
  memset(_addr, 0, sizeof(_addr));
   d6396:	6103      	str	r3, [r0, #16]
   d6398:	6143      	str	r3, [r0, #20]
  _dataCRC    = 0; 
   d639a:	8303      	strh	r3, [r0, #24]
  _readCRC    = 0;
  _singleDrop = singleDrop;
   d639c:	7682      	strb	r2, [r0, #26]
DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d639e:	4604      	mov	r4, r0
  ds          = new OneWire(pin);
   d63a0:	200e      	movs	r0, #14
DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d63a2:	9101      	str	r1, [sp, #4]
  ds          = new OneWire(pin);
   d63a4:	f7fd fe77 	bl	d4096 <_Znwj>
   d63a8:	4605      	mov	r5, r0
   d63aa:	b110      	cbz	r0, d63b2 <_ZN7DS18B20C1Etb+0x26>
   d63ac:	9901      	ldr	r1, [sp, #4]
   d63ae:	f000 ffb3 	bl	d7318 <_ZN7OneWireC1Et>
}
   d63b2:	4620      	mov	r0, r4
  ds          = new OneWire(pin);
   d63b4:	6025      	str	r5, [r4, #0]
}
   d63b6:	b003      	add	sp, #12
   d63b8:	bd30      	pop	{r4, r5, pc}

000d63ba <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d63ba:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
   d63bc:	f100 0510 	add.w	r5, r0, #16
{
   d63c0:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
   d63c2:	6800      	ldr	r0, [r0, #0]
   d63c4:	4629      	mov	r1, r5
   d63c6:	f001 f897 	bl	d74f8 <_ZN7OneWire6searchEPh>
   d63ca:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
   d63cc:	bf1d      	ittte	ne
   d63ce:	682b      	ldrne	r3, [r5, #0]
   d63d0:	6023      	strne	r3, [r4, #0]
   d63d2:	686b      	ldrne	r3, [r5, #4]
  else           memset(addr, 0, 8);
   d63d4:	6023      	streq	r3, [r4, #0]
  boolean isSuccess = ds->search(_addr);
   d63d6:	bf14      	ite	ne
   d63d8:	2001      	movne	r0, #1
   d63da:	2000      	moveq	r0, #0
  else           memset(addr, 0, 8);
   d63dc:	6063      	str	r3, [r4, #4]
  return isSuccess;
}
   d63de:	bd38      	pop	{r3, r4, r5, pc}

000d63e0 <_ZN7DS18B20D1Ev>:

DS18B20::~DS18B20()
   d63e0:	b510      	push	{r4, lr}
   d63e2:	4604      	mov	r4, r0
{
  delete(ds);
   d63e4:	6800      	ldr	r0, [r0, #0]
   d63e6:	b110      	cbz	r0, d63ee <_ZN7DS18B20D1Ev+0xe>
   d63e8:	210e      	movs	r1, #14
   d63ea:	f003 fcc4 	bl	d9d76 <_ZdlPvj>
}
   d63ee:	4620      	mov	r0, r4
   d63f0:	bd10      	pop	{r4, pc}

000d63f2 <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
   d63f2:	6800      	ldr	r0, [r0, #0]
   d63f4:	f001 b878 	b.w	d74e8 <_ZN7OneWire12reset_searchEv>

000d63f8 <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d63f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d63fc:	7e83      	ldrb	r3, [r0, #26]
{
   d63fe:	4604      	mov	r4, r0
   d6400:	460d      	mov	r5, r1
   d6402:	4616      	mov	r6, r2
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d6404:	b92b      	cbnz	r3, d6412 <_ZN7DS18B2014getTemperatureEPhb+0x1a>
   d6406:	780b      	ldrb	r3, [r1, #0]
   d6408:	b91b      	cbnz	r3, d6412 <_ZN7DS18B2014getTemperatureEPhb+0x1a>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d640a:	ed9f 0a57 	vldr	s0, [pc, #348]	; d6568 <_ZN7DS18B2014getTemperatureEPhb+0x170>
      celsius = NAN;
      break;                            
  }
  
  return celsius;
}
   d640e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ds->reset();
   d6412:	6820      	ldr	r0, [r4, #0]
   d6414:	f000 ff8a 	bl	d732c <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d6418:	7ea3      	ldrb	r3, [r4, #26]
   d641a:	2b00      	cmp	r3, #0
   d641c:	d05d      	beq.n	d64da <_ZN7DS18B2014getTemperatureEPhb+0xe2>
   d641e:	2e00      	cmp	r6, #0
   d6420:	d15b      	bne.n	d64da <_ZN7DS18B2014getTemperatureEPhb+0xe2>
    ds->skip();
   d6422:	6820      	ldr	r0, [r4, #0]
   d6424:	f001 f85c 	bl	d74e0 <_ZN7OneWire4skipEv>
  ds->write(0x44);        // start conversion, with parasite power on at the end
   d6428:	2200      	movs	r2, #0
   d642a:	2144      	movs	r1, #68	; 0x44
   d642c:	6820      	ldr	r0, [r4, #0]
   d642e:	f001 f812 	bl	d7456 <_ZN7OneWire5writeEhh>
  delay(750);     // maybe 750ms is enough, maybe not
   d6432:	f240 20ee 	movw	r0, #750	; 0x2ee
   d6436:	f001 ff95 	bl	d8364 <delay>
  ds->reset();
   d643a:	6820      	ldr	r0, [r4, #0]
   d643c:	f000 ff76 	bl	d732c <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d6440:	7ea3      	ldrb	r3, [r4, #26]
   d6442:	2b00      	cmp	r3, #0
   d6444:	d04e      	beq.n	d64e4 <_ZN7DS18B2014getTemperatureEPhb+0xec>
   d6446:	2e00      	cmp	r6, #0
   d6448:	d14c      	bne.n	d64e4 <_ZN7DS18B2014getTemperatureEPhb+0xec>
    ds->skip();
   d644a:	6820      	ldr	r0, [r4, #0]
   d644c:	f001 f848 	bl	d74e0 <_ZN7OneWire4skipEv>
  ds->write(0xBE);         // Read Scratchpad
   d6450:	6820      	ldr	r0, [r4, #0]
   d6452:	2200      	movs	r2, #0
   d6454:	21be      	movs	r1, #190	; 0xbe
   d6456:	f000 fffe 	bl	d7456 <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
   d645a:	782b      	ldrb	r3, [r5, #0]
   d645c:	2b26      	cmp	r3, #38	; 0x26
   d645e:	d104      	bne.n	d646a <_ZN7DS18B2014getTemperatureEPhb+0x72>
    ds->write(0x00,0);     // DS2438 requires a page to read
   d6460:	2200      	movs	r2, #0
   d6462:	6820      	ldr	r0, [r4, #0]
   d6464:	4611      	mov	r1, r2
   d6466:	f000 fff6 	bl	d7456 <_ZN7OneWire5writeEhh>
   d646a:	1d26      	adds	r6, r4, #4
   d646c:	f104 080d 	add.w	r8, r4, #13
   d6470:	4637      	mov	r7, r6
    _data[i] = ds->read();
   d6472:	6820      	ldr	r0, [r4, #0]
   d6474:	f001 f812 	bl	d749c <_ZN7OneWire4readEv>
   d6478:	f806 0b01 	strb.w	r0, [r6], #1
  for (int i = 0; i < 9; i++)
   d647c:	4546      	cmp	r6, r8
   d647e:	d1f8      	bne.n	d6472 <_ZN7DS18B2014getTemperatureEPhb+0x7a>
  _dataCRC = (OneWire::crc8(_data, 8));
   d6480:	2108      	movs	r1, #8
   d6482:	4638      	mov	r0, r7
   d6484:	f001 f8ac 	bl	d75e0 <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
   d6488:	7b23      	ldrb	r3, [r4, #12]
  _dataCRC = (OneWire::crc8(_data, 8));
   d648a:	7620      	strb	r0, [r4, #24]
  if (_dataCRC != _readCRC) return NAN;
   d648c:	4298      	cmp	r0, r3
  _readCRC = (_data[8]);
   d648e:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
   d6490:	d1bb      	bne.n	d640a <_ZN7DS18B2014getTemperatureEPhb+0x12>
  switch(addr[0]) 
   d6492:	782b      	ldrb	r3, [r5, #0]
   d6494:	2b26      	cmp	r3, #38	; 0x26
   d6496:	d047      	beq.n	d6528 <_ZN7DS18B2014getTemperatureEPhb+0x130>
   d6498:	d829      	bhi.n	d64ee <_ZN7DS18B2014getTemperatureEPhb+0xf6>
   d649a:	2b10      	cmp	r3, #16
   d649c:	d029      	beq.n	d64f2 <_ZN7DS18B2014getTemperatureEPhb+0xfa>
   d649e:	2b22      	cmp	r3, #34	; 0x22
   d64a0:	d1b3      	bne.n	d640a <_ZN7DS18B2014getTemperatureEPhb+0x12>
      switch (_data[4] & 0x60)
   d64a2:	7a22      	ldrb	r2, [r4, #8]
   d64a4:	7923      	ldrb	r3, [r4, #4]
   d64a6:	f002 0260 	and.w	r2, r2, #96	; 0x60
   d64aa:	2a20      	cmp	r2, #32
   d64ac:	d036      	beq.n	d651c <_ZN7DS18B2014getTemperatureEPhb+0x124>
   d64ae:	2a40      	cmp	r2, #64	; 0x40
   d64b0:	d037      	beq.n	d6522 <_ZN7DS18B2014getTemperatureEPhb+0x12a>
   d64b2:	b912      	cbnz	r2, d64ba <_ZN7DS18B2014getTemperatureEPhb+0xc2>
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
   d64b4:	f023 0307 	bic.w	r3, r3, #7
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
   d64b8:	7123      	strb	r3, [r4, #4]
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
   d64ba:	7963      	ldrb	r3, [r4, #5]
   d64bc:	7920      	ldrb	r0, [r4, #4]
   d64be:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d64c2:	b200      	sxth	r0, r0
   d64c4:	f003 fdb2 	bl	da02c <__aeabi_i2d>
   d64c8:	4b28      	ldr	r3, [pc, #160]	; (d656c <_ZN7DS18B2014getTemperatureEPhb+0x174>)
   d64ca:	2200      	movs	r2, #0
   d64cc:	f003 fe18 	bl	da100 <__aeabi_dmul>
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
   d64d0:	f004 f848 	bl	da564 <__aeabi_d2f>
   d64d4:	ee00 0a10 	vmov	s0, r0
      break;
   d64d8:	e799      	b.n	d640e <_ZN7DS18B2014getTemperatureEPhb+0x16>
    ds->select(addr);
   d64da:	6820      	ldr	r0, [r4, #0]
   d64dc:	4629      	mov	r1, r5
   d64de:	f000 ffed 	bl	d74bc <_ZN7OneWire6selectEPKh>
   d64e2:	e7a1      	b.n	d6428 <_ZN7DS18B2014getTemperatureEPhb+0x30>
    ds->select(addr);
   d64e4:	6820      	ldr	r0, [r4, #0]
   d64e6:	4629      	mov	r1, r5
   d64e8:	f000 ffe8 	bl	d74bc <_ZN7OneWire6selectEPKh>
   d64ec:	e7b0      	b.n	d6450 <_ZN7DS18B2014getTemperatureEPhb+0x58>
  switch(addr[0]) 
   d64ee:	2b28      	cmp	r3, #40	; 0x28
   d64f0:	e7d6      	b.n	d64a0 <_ZN7DS18B2014getTemperatureEPhb+0xa8>
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d64f2:	7ae3      	ldrb	r3, [r4, #11]
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d64f4:	88a2      	ldrh	r2, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d64f6:	2b10      	cmp	r3, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d64f8:	bf08      	it	eq
   d64fa:	7aa3      	ldrbeq	r3, [r4, #10]
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d64fc:	ea4f 02c2 	mov.w	r2, r2, lsl #3
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d6500:	bf03      	ittte	eq
   d6502:	f1c3 030c 	rsbeq	r3, r3, #12
   d6506:	f022 020f 	biceq.w	r2, r2, #15
   d650a:	189b      	addeq	r3, r3, r2
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d650c:	b213      	sxthne	r3, r2
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d650e:	bf08      	it	eq
   d6510:	b21b      	sxtheq	r3, r3
      celsius = (float)raw / 16.0;
   d6512:	ee00 3a10 	vmov	s0, r3
   d6516:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
      break;
   d651a:	e778      	b.n	d640e <_ZN7DS18B2014getTemperatureEPhb+0x16>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
   d651c:	f023 0303 	bic.w	r3, r3, #3
   d6520:	e7ca      	b.n	d64b8 <_ZN7DS18B2014getTemperatureEPhb+0xc0>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
   d6522:	f023 0301 	bic.w	r3, r3, #1
   d6526:	e7c7      	b.n	d64b8 <_ZN7DS18B2014getTemperatureEPhb+0xc0>
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
   d6528:	79a5      	ldrb	r5, [r4, #6]
   d652a:	4628      	mov	r0, r5
   d652c:	f003 fd7e 	bl	da02c <__aeabi_i2d>
   d6530:	4606      	mov	r6, r0
   d6532:	7960      	ldrb	r0, [r4, #5]
   d6534:	10c0      	asrs	r0, r0, #3
   d6536:	ee07 0a90 	vmov	s15, r0
   d653a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d653e:	460f      	mov	r7, r1
   d6540:	ee17 0a90 	vmov	r0, s15
   d6544:	f003 fd84 	bl	da050 <__aeabi_f2d>
   d6548:	4b09      	ldr	r3, [pc, #36]	; (d6570 <_ZN7DS18B2014getTemperatureEPhb+0x178>)
   d654a:	2200      	movs	r2, #0
   d654c:	f003 fdd8 	bl	da100 <__aeabi_dmul>
   d6550:	062b      	lsls	r3, r5, #24
   d6552:	bf54      	ite	pl
   d6554:	4b07      	ldrpl	r3, [pc, #28]	; (d6574 <_ZN7DS18B2014getTemperatureEPhb+0x17c>)
   d6556:	4b08      	ldrmi	r3, [pc, #32]	; (d6578 <_ZN7DS18B2014getTemperatureEPhb+0x180>)
   d6558:	2200      	movs	r2, #0
   d655a:	f003 fdd1 	bl	da100 <__aeabi_dmul>
   d655e:	4632      	mov	r2, r6
   d6560:	463b      	mov	r3, r7
   d6562:	f003 fc17 	bl	d9d94 <__adddf3>
   d6566:	e7b3      	b.n	d64d0 <_ZN7DS18B2014getTemperatureEPhb+0xd8>
   d6568:	7fc00000 	.word	0x7fc00000
   d656c:	3fb00000 	.word	0x3fb00000
   d6570:	3fa00000 	.word	0x3fa00000
   d6574:	3ff00000 	.word	0x3ff00000
   d6578:	bff00000 	.word	0xbff00000
   d657c:	00000000 	.word	0x00000000

000d6580 <_ZN7DS18B2019convertToFahrenheitEf>:

float DS18B20::convertToFahrenheit(float celsius)
{
   d6580:	b508      	push	{r3, lr}
   d6582:	ee10 0a10 	vmov	r0, s0
  return celsius * 1.8 + 32.0;
   d6586:	f003 fd63 	bl	da050 <__aeabi_f2d>
   d658a:	a308      	add	r3, pc, #32	; (adr r3, d65ac <_ZN7DS18B2019convertToFahrenheitEf+0x2c>)
   d658c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6590:	f003 fdb6 	bl	da100 <__aeabi_dmul>
   d6594:	4b04      	ldr	r3, [pc, #16]	; (d65a8 <_ZN7DS18B2019convertToFahrenheitEf+0x28>)
   d6596:	2200      	movs	r2, #0
   d6598:	f003 fbfc 	bl	d9d94 <__adddf3>
   d659c:	f003 ffe2 	bl	da564 <__aeabi_d2f>
}
   d65a0:	ee00 0a10 	vmov	s0, r0
   d65a4:	bd08      	pop	{r3, pc}
   d65a6:	bf00      	nop
   d65a8:	40400000 	.word	0x40400000
   d65ac:	cccccccd 	.word	0xcccccccd
   d65b0:	3ffccccc 	.word	0x3ffccccc

000d65b4 <_ZN7DS18B208crcCheckEv>:

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
   d65b4:	7e02      	ldrb	r2, [r0, #24]
   d65b6:	7e40      	ldrb	r0, [r0, #25]
}
   d65b8:	1a13      	subs	r3, r2, r0
   d65ba:	4258      	negs	r0, r3
   d65bc:	4158      	adcs	r0, r3
   d65be:	4770      	bx	lr

000d65c0 <_ZN9LIS3DHSPID1Ev>:

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
}
   d65c0:	4770      	bx	lr

000d65c2 <_ZN9LIS3DHSPID0Ev>:
LIS3DHSPI::~LIS3DHSPI() {
   d65c2:	b510      	push	{r4, lr}
}
   d65c4:	2128      	movs	r1, #40	; 0x28
LIS3DHSPI::~LIS3DHSPI() {
   d65c6:	4604      	mov	r4, r0
}
   d65c8:	f003 fbd5 	bl	d9d76 <_ZdlPvj>
   d65cc:	4620      	mov	r0, r4
   d65ce:	bd10      	pop	{r4, pc}

000d65d0 <_ZN9LIS3DHSPI16beginTransactionEv>:

void LIS3DHSPI::spiSetup() {
	// No longer used; SPI transactions are always used now
}

void LIS3DHSPI::beginTransaction() {
   d65d0:	b510      	push	{r4, lr}
   d65d2:	4604      	mov	r4, r0
	spi.beginTransaction(spiSettings);
   d65d4:	f100 0118 	add.w	r1, r0, #24
   d65d8:	68c0      	ldr	r0, [r0, #12]
   d65da:	f002 fded 	bl	d91b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

	digitalWrite(ss, LOW);
   d65de:	8a20      	ldrh	r0, [r4, #16]
   d65e0:	2100      	movs	r1, #0
}
   d65e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(ss, LOW);
   d65e6:	f003 bb54 	b.w	d9c92 <digitalWrite>

000d65ea <_ZN9LIS3DHSPI14endTransactionEv>:

void LIS3DHSPI::endTransaction() {
   d65ea:	b510      	push	{r4, lr}
   d65ec:	4604      	mov	r4, r0
	digitalWrite(ss, HIGH);
   d65ee:	2101      	movs	r1, #1
   d65f0:	8a00      	ldrh	r0, [r0, #16]
   d65f2:	f003 fb4e 	bl	d9c92 <digitalWrite>

	spi.endTransaction();
   d65f6:	68e0      	ldr	r0, [r4, #12]
}
   d65f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi.endTransaction();
   d65fc:	f002 bdc3 	b.w	d9186 <_ZN8SPIClass14endTransactionEv>

000d6600 <_ZN9LIS3DHSPI8readDataEhPhj>:

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d6600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6602:	461e      	mov	r6, r3
	beginTransaction();
   d6604:	6803      	ldr	r3, [r0, #0]
   d6606:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d6608:	460f      	mov	r7, r1
   d660a:	4614      	mov	r4, r2
   d660c:	4605      	mov	r5, r0
	beginTransaction();
   d660e:	4798      	blx	r3

	if (numBytes > 1) {
   d6610:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d6612:	bf88      	it	hi
   d6614:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
   d6618:	68e8      	ldr	r0, [r5, #12]
   d661a:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d661e:	f002 fe39 	bl	d9294 <_ZN8SPIClass8transferEh>

	for(size_t ii = 0; ii < numBytes; ii++) {
   d6622:	4426      	add	r6, r4
   d6624:	42b4      	cmp	r4, r6
   d6626:	d006      	beq.n	d6636 <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
   d6628:	68e8      	ldr	r0, [r5, #12]
   d662a:	2100      	movs	r1, #0
   d662c:	f002 fe32 	bl	d9294 <_ZN8SPIClass8transferEh>
   d6630:	f804 0b01 	strb.w	r0, [r4], #1
	for(size_t ii = 0; ii < numBytes; ii++) {
   d6634:	e7f6      	b.n	d6624 <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
	}

	endTransaction();
   d6636:	682b      	ldr	r3, [r5, #0]
   d6638:	4628      	mov	r0, r5
   d663a:	699b      	ldr	r3, [r3, #24]
   d663c:	4798      	blx	r3

	return true;
}
   d663e:	2001      	movs	r0, #1
   d6640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6642 <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d6642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6644:	461e      	mov	r6, r3
	beginTransaction();
   d6646:	6803      	ldr	r3, [r0, #0]
   d6648:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d664a:	460f      	mov	r7, r1
   d664c:	4614      	mov	r4, r2
   d664e:	4605      	mov	r5, r0
	beginTransaction();
   d6650:	4798      	blx	r3

	if (numBytes > 1) {
   d6652:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d6654:	bf88      	it	hi
   d6656:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
   d665a:	68e8      	ldr	r0, [r5, #12]
   d665c:	4639      	mov	r1, r7
   d665e:	f002 fe19 	bl	d9294 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d6662:	4426      	add	r6, r4
   d6664:	42b4      	cmp	r4, r6
   d6666:	d005      	beq.n	d6674 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
   d6668:	f814 1b01 	ldrb.w	r1, [r4], #1
   d666c:	68e8      	ldr	r0, [r5, #12]
   d666e:	f002 fe11 	bl	d9294 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d6672:	e7f7      	b.n	d6664 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
	}

	endTransaction();
   d6674:	682b      	ldr	r3, [r5, #0]
   d6676:	4628      	mov	r0, r5
   d6678:	699b      	ldr	r3, [r3, #24]
   d667a:	4798      	blx	r3

	return true;
}
   d667c:	2001      	movs	r0, #1
   d667e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6680 <_ZN6LIS3DHC1Ei>:
LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   d6680:	4a02      	ldr	r2, [pc, #8]	; (d668c <_ZN6LIS3DHC1Ei+0xc>)
   d6682:	e9c0 2100 	strd	r2, r1, [r0]
   d6686:	2200      	movs	r2, #0
   d6688:	7202      	strb	r2, [r0, #8]
}
   d668a:	4770      	bx	lr
   d668c:	000daf3c 	.word	0x000daf3c

000d6690 <_ZN6LIS3DH13readRegister8Eh>:
uint8_t LIS3DH::readRegister8(uint8_t addr) {
   d6690:	b513      	push	{r0, r1, r4, lr}
	readData(addr, resp, sizeof(resp));
   d6692:	6803      	ldr	r3, [r0, #0]
   d6694:	aa01      	add	r2, sp, #4
   d6696:	68dc      	ldr	r4, [r3, #12]
   d6698:	2301      	movs	r3, #1
   d669a:	47a0      	blx	r4
}
   d669c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d66a0:	b002      	add	sp, #8
   d66a2:	bd10      	pop	{r4, pc}

000d66a4 <_ZN6LIS3DH9hasDeviceEv>:
bool LIS3DH::hasDevice() {
   d66a4:	b538      	push	{r3, r4, r5, lr}
   d66a6:	4605      	mov	r5, r0
   d66a8:	240a      	movs	r4, #10
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   d66aa:	210f      	movs	r1, #15
   d66ac:	4628      	mov	r0, r5
   d66ae:	f7ff ffef 	bl	d6690 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   d66b2:	2833      	cmp	r0, #51	; 0x33
			found = true;
   d66b4:	f04f 0001 	mov.w	r0, #1
		if (whoami == WHO_AM_I) {
   d66b8:	d004      	beq.n	d66c4 <_ZN6LIS3DH9hasDeviceEv+0x20>
		delay(1);
   d66ba:	f001 fe53 	bl	d8364 <delay>
	for(int tries = 0; tries < 10; tries++) {
   d66be:	3c01      	subs	r4, #1
   d66c0:	d1f3      	bne.n	d66aa <_ZN6LIS3DH9hasDeviceEv+0x6>
	bool found = false;
   d66c2:	4620      	mov	r0, r4
}
   d66c4:	bd38      	pop	{r3, r4, r5, pc}

000d66c6 <_ZN9LIS3DHSPI9hasDeviceEv>:
bool LIS3DHSPI::hasDevice() {
   d66c6:	b510      	push	{r4, lr}
   d66c8:	4604      	mov	r4, r0
	spi.begin(ss);
   d66ca:	8a01      	ldrh	r1, [r0, #16]
   d66cc:	68c0      	ldr	r0, [r0, #12]
   d66ce:	f002 fd47 	bl	d9160 <_ZN8SPIClass5beginEt>
	return LIS3DH::hasDevice();
   d66d2:	4620      	mov	r0, r4
}
   d66d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LIS3DH::hasDevice();
   d66d8:	f7ff bfe4 	b.w	d66a4 <_ZN6LIS3DH9hasDeviceEv>

000d66dc <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d66dc:	4770      	bx	lr

000d66de <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d66de:	b510      	push	{r4, lr}
}
   d66e0:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d66e2:	4604      	mov	r4, r0
}
   d66e4:	f003 fb47 	bl	d9d76 <_ZdlPvj>
   d66e8:	4620      	mov	r0, r4
   d66ea:	bd10      	pop	{r4, pc}

000d66ec <_ZN7TwoWire5writeEj>:
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d66ec:	6803      	ldr	r3, [r0, #0]
   d66ee:	b2c9      	uxtb	r1, r1
   d66f0:	689b      	ldr	r3, [r3, #8]
   d66f2:	4718      	bx	r3

000d66f4 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d66f4:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d66f6:	4d03      	ldr	r5, [pc, #12]	; (d6704 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d66f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d66fc:	e9c0 5100 	strd	r5, r1, [r0]
}
   d6700:	bd30      	pop	{r4, r5, pc}
   d6702:	bf00      	nop
   d6704:	000dafa8 	.word	0x000dafa8

000d6708 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d6708:	6840      	ldr	r0, [r0, #4]
   d670a:	f002 badd 	b.w	d8cc8 <_ZN7TwoWire5beginEv>

000d670e <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      ~lock_guard()
   d670e:	b510      	push	{r4, lr}
   d6710:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d6712:	6800      	ldr	r0, [r0, #0]
   d6714:	f002 fb1b 	bl	d8d4e <_ZN7TwoWire6unlockEv>
   d6718:	4620      	mov	r0, r4
   d671a:	bd10      	pop	{r4, pc}

000d671c <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d671c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6720:	b08a      	sub	sp, #40	; 0x28
   d6722:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d6724:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6726:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6728:	f002 fb08 	bl	d8d3c <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d672c:	221e      	movs	r2, #30
   d672e:	2100      	movs	r1, #0
   d6730:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d6732:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d6734:	f004 f810 	bl	da758 <memset>
		size_t framAddr = 0;
   d6738:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d673a:	b1ef      	cbz	r7, d6778 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d673c:	6823      	ldr	r3, [r4, #0]
   d673e:	2f1e      	cmp	r7, #30
   d6740:	46b8      	mov	r8, r7
   d6742:	bf28      	it	cs
   d6744:	f04f 081e 	movcs.w	r8, #30
   d6748:	68dd      	ldr	r5, [r3, #12]
   d674a:	aa02      	add	r2, sp, #8
   d674c:	4643      	mov	r3, r8
   d674e:	4631      	mov	r1, r6
   d6750:	4620      	mov	r0, r4
   d6752:	47a8      	blx	r5
			if (!result) {
   d6754:	4605      	mov	r5, r0
   d6756:	b958      	cbnz	r0, d6770 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d6758:	480a      	ldr	r0, [pc, #40]	; (d6784 <_ZN6MB85RC5eraseEv+0x68>)
   d675a:	490b      	ldr	r1, [pc, #44]	; (d6788 <_ZN6MB85RC5eraseEv+0x6c>)
   d675c:	4632      	mov	r2, r6
   d675e:	f7fd fd97 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d6762:	a801      	add	r0, sp, #4
   d6764:	f7ff ffd3 	bl	d670e <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d6768:	4628      	mov	r0, r5
   d676a:	b00a      	add	sp, #40	; 0x28
   d676c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d6770:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d6774:	4446      	add	r6, r8
		while(totalLen > 0) {
   d6776:	e7e0      	b.n	d673a <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d6778:	a801      	add	r0, sp, #4
   d677a:	f7ff ffc8 	bl	d670e <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d677e:	2501      	movs	r5, #1
   d6780:	e7f2      	b.n	d6768 <_ZN6MB85RC5eraseEv+0x4c>
   d6782:	bf00      	nop
   d6784:	2003e624 	.word	0x2003e624
   d6788:	000daf74 	.word	0x000daf74

000d678c <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d678c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6790:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d6792:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6794:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d6796:	460d      	mov	r5, r1
   d6798:	4616      	mov	r6, r2
   d679a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d679c:	f002 face 	bl	d8d3c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d67a0:	b1a7      	cbz	r7, d67cc <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d67a2:	68e1      	ldr	r1, [r4, #12]
   d67a4:	6860      	ldr	r0, [r4, #4]
   d67a6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d67aa:	f002 fac0 	bl	d8d2e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d67ae:	0a29      	lsrs	r1, r5, #8
   d67b0:	6860      	ldr	r0, [r4, #4]
   d67b2:	f7ff ff9b 	bl	d66ec <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d67b6:	4629      	mov	r1, r5
   d67b8:	6860      	ldr	r0, [r4, #4]
   d67ba:	f7ff ff97 	bl	d66ec <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d67be:	6860      	ldr	r0, [r4, #4]
   d67c0:	2100      	movs	r1, #0
   d67c2:	f002 fab7 	bl	d8d34 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d67c6:	b148      	cbz	r0, d67dc <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d67c8:	2400      	movs	r4, #0
   d67ca:	e000      	b.n	d67ce <_ZN6MB85RC8readDataEjPhj+0x42>
   d67cc:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d67ce:	a801      	add	r0, sp, #4
   d67d0:	f7ff ff9d 	bl	d670e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d67d4:	4620      	mov	r0, r4
   d67d6:	b003      	add	sp, #12
   d67d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d67dc:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d67de:	7b21      	ldrb	r1, [r4, #12]
   d67e0:	6860      	ldr	r0, [r4, #4]
   d67e2:	46b8      	mov	r8, r7
   d67e4:	bf28      	it	cs
   d67e6:	f04f 0820 	movcs.w	r8, #32
   d67ea:	2301      	movs	r3, #1
   d67ec:	4642      	mov	r2, r8
   d67ee:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d67f2:	f002 fa86 	bl	d8d02 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d67f6:	f003 fa91 	bl	d9d1c <_Z19__fetch_global_Wirev>
   d67fa:	6803      	ldr	r3, [r0, #0]
   d67fc:	691b      	ldr	r3, [r3, #16]
   d67fe:	4798      	blx	r3
   d6800:	4540      	cmp	r0, r8
   d6802:	dbe1      	blt.n	d67c8 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d6804:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d6808:	f003 fa88 	bl	d9d1c <_Z19__fetch_global_Wirev>
   d680c:	6803      	ldr	r3, [r0, #0]
   d680e:	695b      	ldr	r3, [r3, #20]
   d6810:	4798      	blx	r3
   d6812:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d6816:	454e      	cmp	r6, r9
   d6818:	d1f6      	bne.n	d6808 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d681a:	4445      	add	r5, r8
   d681c:	eba7 0708 	sub.w	r7, r7, r8
   d6820:	e7be      	b.n	d67a0 <_ZN6MB85RC8readDataEjPhj+0x14>

000d6822 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d6822:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6826:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d6828:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d682a:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d682c:	460e      	mov	r6, r1
   d682e:	4690      	mov	r8, r2
   d6830:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d6832:	f002 fa83 	bl	d8d3c <_ZN7TwoWire4lockEv>
   d6836:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d683a:	f1b9 0f00 	cmp.w	r9, #0
   d683e:	d02a      	beq.n	d6896 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d6840:	b34d      	cbz	r5, d6896 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d6842:	68e1      	ldr	r1, [r4, #12]
   d6844:	6860      	ldr	r0, [r4, #4]
   d6846:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d684a:	f002 fa70 	bl	d8d2e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d684e:	0a31      	lsrs	r1, r6, #8
   d6850:	6860      	ldr	r0, [r4, #4]
   d6852:	f7ff ff4b 	bl	d66ec <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d6856:	6860      	ldr	r0, [r4, #4]
   d6858:	4631      	mov	r1, r6
   d685a:	f7ff ff47 	bl	d66ec <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d685e:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d6862:	4647      	mov	r7, r8
   d6864:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d6868:	6860      	ldr	r0, [r4, #4]
   d686a:	f817 1b01 	ldrb.w	r1, [r7], #1
   d686e:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d6870:	3d01      	subs	r5, #1
				wire.write(*data);
   d6872:	689b      	ldr	r3, [r3, #8]
   d6874:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6876:	4555      	cmp	r5, sl
   d6878:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d687c:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d687e:	d001      	beq.n	d6884 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d6880:	2d00      	cmp	r5, #0
   d6882:	d1f1      	bne.n	d6868 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d6884:	6860      	ldr	r0, [r4, #4]
   d6886:	2101      	movs	r1, #1
   d6888:	f002 fa54 	bl	d8d34 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d688c:	2800      	cmp	r0, #0
   d688e:	d0d7      	beq.n	d6840 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d6890:	f04f 0900 	mov.w	r9, #0
   d6894:	e7d1      	b.n	d683a <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d6896:	a801      	add	r0, sp, #4
   d6898:	f7ff ff39 	bl	d670e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d689c:	4648      	mov	r0, r9
   d689e:	b003      	add	sp, #12
   d68a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d68a4 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d68a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d68a8:	b08b      	sub	sp, #44	; 0x2c
   d68aa:	460e      	mov	r6, r1
   d68ac:	4615      	mov	r5, r2
   d68ae:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d68b0:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d68b2:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d68b4:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d68b6:	f002 fa41 	bl	d8d3c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d68ba:	42ae      	cmp	r6, r5
   d68bc:	d229      	bcs.n	d6912 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d68be:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d68c0:	4425      	add	r5, r4
			while(numBytes > 0) {
   d68c2:	b18c      	cbz	r4, d68e8 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d68c4:	2c1e      	cmp	r4, #30
   d68c6:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d68c8:	f8d8 3000 	ldr.w	r3, [r8]
   d68cc:	bf28      	it	cs
   d68ce:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d68d0:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d68d2:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d68d6:	aa02      	add	r2, sp, #8
   d68d8:	463b      	mov	r3, r7
   d68da:	4631      	mov	r1, r6
   d68dc:	4640      	mov	r0, r8
				framAddrTo -= count;
   d68de:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d68e0:	47c8      	blx	r9
				if (!result) {
   d68e2:	b948      	cbnz	r0, d68f8 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d68e4:	2400      	movs	r4, #0
   d68e6:	e000      	b.n	d68ea <_ZN6MB85RC8moveDataEjjj+0x46>
   d68e8:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d68ea:	a801      	add	r0, sp, #4
   d68ec:	f7ff ff0f 	bl	d670e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d68f0:	4620      	mov	r0, r4
   d68f2:	b00b      	add	sp, #44	; 0x2c
   d68f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d68f8:	f8d8 3000 	ldr.w	r3, [r8]
   d68fc:	aa02      	add	r2, sp, #8
   d68fe:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d6902:	4629      	mov	r1, r5
   d6904:	463b      	mov	r3, r7
   d6906:	4640      	mov	r0, r8
   d6908:	47c8      	blx	r9
				if (!result) {
   d690a:	2800      	cmp	r0, #0
   d690c:	d0ea      	beq.n	d68e4 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d690e:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d6910:	e7d7      	b.n	d68c2 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d6912:	d9e9      	bls.n	d68e8 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d6914:	2c00      	cmp	r4, #0
   d6916:	d0e7      	beq.n	d68e8 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d6918:	f8d8 3000 	ldr.w	r3, [r8]
   d691c:	2c1e      	cmp	r4, #30
   d691e:	4627      	mov	r7, r4
   d6920:	bf28      	it	cs
   d6922:	271e      	movcs	r7, #30
   d6924:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d6928:	aa02      	add	r2, sp, #8
   d692a:	463b      	mov	r3, r7
   d692c:	4631      	mov	r1, r6
   d692e:	4640      	mov	r0, r8
   d6930:	47c8      	blx	r9
				if (!result) {
   d6932:	2800      	cmp	r0, #0
   d6934:	d0d6      	beq.n	d68e4 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d6936:	f8d8 3000 	ldr.w	r3, [r8]
   d693a:	aa02      	add	r2, sp, #8
   d693c:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d6940:	4629      	mov	r1, r5
   d6942:	463b      	mov	r3, r7
   d6944:	4640      	mov	r0, r8
   d6946:	47c8      	blx	r9
				if (!result) {
   d6948:	2800      	cmp	r0, #0
   d694a:	d0cb      	beq.n	d68e4 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d694c:	443e      	add	r6, r7
				framAddrTo += count;
   d694e:	443d      	add	r5, r7
				numBytes -= count;
   d6950:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d6952:	e7df      	b.n	d6914 <_ZN6MB85RC8moveDataEjjj+0x70>

000d6954 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d6954:	2040      	movs	r0, #64	; 0x40
   d6956:	4770      	bx	lr

000d6958 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d6958:	2000      	movs	r0, #0
   d695a:	4770      	bx	lr

000d695c <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d695c:	2080      	movs	r0, #128	; 0x80
   d695e:	4770      	bx	lr

000d6960 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d6960:	20ff      	movs	r0, #255	; 0xff
   d6962:	4770      	bx	lr

000d6964 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d6964:	4770      	bx	lr

000d6966 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d6966:	4770      	bx	lr

000d6968 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d6968:	4770      	bx	lr

000d696a <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d696a:	4770      	bx	lr

000d696c <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d696c:	b510      	push	{r4, lr}
}
   d696e:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d6970:	4604      	mov	r4, r0
}
   d6972:	f003 fa00 	bl	d9d76 <_ZdlPvj>
   d6976:	4620      	mov	r0, r4
   d6978:	bd10      	pop	{r4, pc}

000d697a <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d697a:	b510      	push	{r4, lr}
}
   d697c:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d697e:	4604      	mov	r4, r0
}
   d6980:	f003 f9f9 	bl	d9d76 <_ZdlPvj>
   d6984:	4620      	mov	r0, r4
   d6986:	bd10      	pop	{r4, pc}

000d6988 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d6988:	b510      	push	{r4, lr}
}
   d698a:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d698c:	4604      	mov	r4, r0
}
   d698e:	f003 f9f2 	bl	d9d76 <_ZdlPvj>
   d6992:	4620      	mov	r0, r4
   d6994:	bd10      	pop	{r4, pc}

000d6996 <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d6996:	b510      	push	{r4, lr}
}
   d6998:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d699a:	4604      	mov	r4, r0
}
   d699c:	f003 f9eb 	bl	d9d76 <_ZdlPvj>
   d69a0:	4620      	mov	r0, r4
   d69a2:	bd10      	pop	{r4, pc}

000d69a4 <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d69a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d69a8:	6803      	ldr	r3, [r0, #0]
   d69aa:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d69ac:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d69ae:	4798      	blx	r3
   d69b0:	2210      	movs	r2, #16
   d69b2:	4601      	mov	r1, r0
   d69b4:	4668      	mov	r0, sp
   d69b6:	f003 fecf 	bl	da758 <memset>
	size_t len = length();
   d69ba:	6823      	ldr	r3, [r4, #0]
   d69bc:	4620      	mov	r0, r4
   d69be:	689b      	ldr	r3, [r3, #8]
   d69c0:	4798      	blx	r3
	size_t offset = 0;
   d69c2:	2500      	movs	r5, #0
	size_t len = length();
   d69c4:	4607      	mov	r7, r0
	bool bResult = false;
   d69c6:	4628      	mov	r0, r5
	while(offset < len) {
   d69c8:	42bd      	cmp	r5, r7
   d69ca:	d20e      	bcs.n	d69ea <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d69cc:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d69ce:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d69d0:	2e10      	cmp	r6, #16
   d69d2:	bf28      	it	cs
   d69d4:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d69d6:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d69da:	466a      	mov	r2, sp
   d69dc:	4633      	mov	r3, r6
   d69de:	4629      	mov	r1, r5
   d69e0:	4620      	mov	r0, r4
   d69e2:	47c0      	blx	r8
		if (!bResult) {
   d69e4:	b108      	cbz	r0, d69ea <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d69e6:	4435      	add	r5, r6
	while(offset < len) {
   d69e8:	e7ee      	b.n	d69c8 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d69ea:	b004      	add	sp, #16
   d69ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d69f0 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d69f0:	f44f 7380 	mov.w	r3, #256	; 0x100
   d69f4:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d69f6:	f240 1301 	movw	r3, #257	; 0x101
   d69fa:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d69fc:	2300      	movs	r3, #0
   d69fe:	8203      	strh	r3, [r0, #16]
}
   d6a00:	4770      	bx	lr
	...

000d6a04 <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d6a04:	b508      	push	{r3, lr}
   d6a06:	4b06      	ldr	r3, [pc, #24]	; (d6a20 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d6a08:	6003      	str	r3, [r0, #0]
   d6a0a:	4b06      	ldr	r3, [pc, #24]	; (d6a24 <_ZN12MCP79410TimeC1Ev+0x20>)
   d6a0c:	6043      	str	r3, [r0, #4]
   d6a0e:	f240 7304 	movw	r3, #1796	; 0x704
   d6a12:	8103      	strh	r3, [r0, #8]
   d6a14:	2300      	movs	r3, #0
   d6a16:	7443      	strb	r3, [r0, #17]
	clear();
   d6a18:	f7ff ffea 	bl	d69f0 <_ZN12MCP79410Time5clearEv>
}
   d6a1c:	bd08      	pop	{r3, pc}
   d6a1e:	bf00      	nop
   d6a20:	000db088 	.word	0x000db088
   d6a24:	03020100 	.word	0x03020100

000d6a28 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d6a28:	0903      	lsrs	r3, r0, #4
}
   d6a2a:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d6a2c:	f000 000f 	and.w	r0, r0, #15
}
   d6a30:	fb02 0003 	mla	r0, r2, r3, r0
   d6a34:	4770      	bx	lr

000d6a36 <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d6a36:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d6a38:	7a80      	ldrb	r0, [r0, #10]
   d6a3a:	f7ff fff5 	bl	d6a28 <_ZN12MCP79410Time8bcdToIntEh>
}
   d6a3e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d6a42:	bd08      	pop	{r3, pc}

000d6a44 <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d6a44:	7ac0      	ldrb	r0, [r0, #11]
   d6a46:	f000 001f 	and.w	r0, r0, #31
   d6a4a:	f7ff bfed 	b.w	d6a28 <_ZN12MCP79410Time8bcdToIntEh>

000d6a4e <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d6a4e:	7b00      	ldrb	r0, [r0, #12]
   d6a50:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d6a54:	f7ff bfe8 	b.w	d6a28 <_ZN12MCP79410Time8bcdToIntEh>

000d6a58 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d6a58:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d6a5a:	7b81      	ldrb	r1, [r0, #14]
   d6a5c:	064a      	lsls	r2, r1, #25
   d6a5e:	d50d      	bpl.n	d6a7c <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d6a60:	f001 001f 	and.w	r0, r1, #31
   d6a64:	f7ff ffe0 	bl	d6a28 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d6a68:	068b      	lsls	r3, r1, #26
   d6a6a:	d503      	bpl.n	d6a74 <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d6a6c:	280c      	cmp	r0, #12
   d6a6e:	d000      	beq.n	d6a72 <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d6a70:	300c      	adds	r0, #12
}
   d6a72:	bd08      	pop	{r3, pc}
				return 0;
   d6a74:	280c      	cmp	r0, #12
   d6a76:	bf08      	it	eq
   d6a78:	2000      	moveq	r0, #0
   d6a7a:	e7fa      	b.n	d6a72 <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d6a7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d6a80:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d6a84:	f7ff bfd0 	b.w	d6a28 <_ZN12MCP79410Time8bcdToIntEh>

000d6a88 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d6a88:	7bc0      	ldrb	r0, [r0, #15]
   d6a8a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d6a8e:	f7ff bfcb 	b.w	d6a28 <_ZN12MCP79410Time8bcdToIntEh>

000d6a92 <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d6a92:	7c00      	ldrb	r0, [r0, #16]
   d6a94:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d6a98:	f7ff bfc6 	b.w	d6a28 <_ZN12MCP79410Time8bcdToIntEh>

000d6a9c <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d6a9c:	b510      	push	{r4, lr}
   d6a9e:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d6aa0:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d6aa2:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d6aa4:	2100      	movs	r1, #0
   d6aa6:	a801      	add	r0, sp, #4
   d6aa8:	f003 fe56 	bl	da758 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d6aac:	4620      	mov	r0, r4
   d6aae:	f7ff ffc2 	bl	d6a36 <_ZNK12MCP79410Time7getYearEv>
   d6ab2:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d6ab6:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d6ab8:	4620      	mov	r0, r4
   d6aba:	f7ff ffc3 	bl	d6a44 <_ZNK12MCP79410Time8getMonthEv>
   d6abe:	3801      	subs	r0, #1
   d6ac0:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d6ac2:	4620      	mov	r0, r4
   d6ac4:	f7ff ffc3 	bl	d6a4e <_ZNK12MCP79410Time13getDayOfMonthEv>
   d6ac8:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d6aca:	4620      	mov	r0, r4
   d6acc:	f7ff ffc4 	bl	d6a58 <_ZNK12MCP79410Time7getHourEv>
   d6ad0:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d6ad2:	4620      	mov	r0, r4
   d6ad4:	f7ff ffd8 	bl	d6a88 <_ZNK12MCP79410Time9getMinuteEv>
   d6ad8:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d6ada:	4620      	mov	r0, r4
   d6adc:	f7ff ffd9 	bl	d6a92 <_ZNK12MCP79410Time9getSecondEv>
   d6ae0:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d6ae2:	a801      	add	r0, sp, #4
   d6ae4:	f001 fc36 	bl	d8354 <mktime>
}
   d6ae8:	b00a      	add	sp, #40	; 0x28
   d6aea:	bd10      	pop	{r4, pc}

000d6aec <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d6aec:	210a      	movs	r1, #10
   d6aee:	fb90 f2f1 	sdiv	r2, r0, r1
   d6af2:	fb92 f3f1 	sdiv	r3, r2, r1
   d6af6:	fb01 2313 	mls	r3, r1, r3, r2
   d6afa:	011b      	lsls	r3, r3, #4
   d6afc:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d6afe:	fb01 0012 	mls	r0, r1, r2, r0
   d6b02:	4318      	orrs	r0, r3
}
   d6b04:	b2c0      	uxtb	r0, r0
   d6b06:	4770      	bx	lr

000d6b08 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d6b08:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d6b0a:	b510      	push	{r4, lr}
   d6b0c:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d6b0e:	fb91 f0f3 	sdiv	r0, r1, r3
   d6b12:	fb00 1013 	mls	r0, r0, r3, r1
   d6b16:	f7ff ffe9 	bl	d6aec <_ZN12MCP79410Time8intToBcdEi>
   d6b1a:	72a0      	strb	r0, [r4, #10]
}
   d6b1c:	bd10      	pop	{r4, pc}

000d6b1e <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d6b1e:	b510      	push	{r4, lr}
   d6b20:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d6b22:	4608      	mov	r0, r1
   d6b24:	f7ff ffe2 	bl	d6aec <_ZN12MCP79410Time8intToBcdEi>
   d6b28:	72e0      	strb	r0, [r4, #11]
}
   d6b2a:	bd10      	pop	{r4, pc}

000d6b2c <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d6b2c:	b510      	push	{r4, lr}
   d6b2e:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d6b30:	4608      	mov	r0, r1
   d6b32:	f7ff ffdb 	bl	d6aec <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d6b36:	7b23      	ldrb	r3, [r4, #12]
   d6b38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d6b3c:	4318      	orrs	r0, r3
   d6b3e:	7320      	strb	r0, [r4, #12]
}
   d6b40:	bd10      	pop	{r4, pc}

000d6b42 <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d6b42:	b510      	push	{r4, lr}
   d6b44:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d6b46:	1c48      	adds	r0, r1, #1
   d6b48:	f7ff ffd0 	bl	d6aec <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d6b4c:	7b63      	ldrb	r3, [r4, #13]
   d6b4e:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d6b52:	4318      	orrs	r0, r3
   d6b54:	7360      	strb	r0, [r4, #13]
}
   d6b56:	bd10      	pop	{r4, pc}

000d6b58 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d6b58:	b510      	push	{r4, lr}
   d6b5a:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d6b5c:	4608      	mov	r0, r1
   d6b5e:	f7ff ffc5 	bl	d6aec <_ZN12MCP79410Time8intToBcdEi>
   d6b62:	73a0      	strb	r0, [r4, #14]
}
   d6b64:	bd10      	pop	{r4, pc}

000d6b66 <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d6b66:	b510      	push	{r4, lr}
   d6b68:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d6b6a:	4608      	mov	r0, r1
   d6b6c:	f7ff ffbe 	bl	d6aec <_ZN12MCP79410Time8intToBcdEi>
   d6b70:	73e0      	strb	r0, [r4, #15]
}
   d6b72:	bd10      	pop	{r4, pc}

000d6b74 <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d6b74:	b510      	push	{r4, lr}
   d6b76:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d6b78:	4608      	mov	r0, r1
   d6b7a:	f7ff ffb7 	bl	d6aec <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d6b7e:	7c23      	ldrb	r3, [r4, #16]
   d6b80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d6b84:	4318      	orrs	r0, r3
   d6b86:	7420      	strb	r0, [r4, #16]
}
   d6b88:	bd10      	pop	{r4, pc}

000d6b8a <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d6b8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6b8c:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d6b8e:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d6b90:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d6b94:	f003 fda6 	bl	da6e4 <gmtime>
   d6b98:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d6b9a:	6941      	ldr	r1, [r0, #20]
   d6b9c:	4620      	mov	r0, r4
   d6b9e:	f7ff ffb3 	bl	d6b08 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d6ba2:	6929      	ldr	r1, [r5, #16]
   d6ba4:	4620      	mov	r0, r4
   d6ba6:	3101      	adds	r1, #1
   d6ba8:	f7ff ffb9 	bl	d6b1e <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d6bac:	68e9      	ldr	r1, [r5, #12]
   d6bae:	4620      	mov	r0, r4
   d6bb0:	f7ff ffbc 	bl	d6b2c <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d6bb4:	69a9      	ldr	r1, [r5, #24]
   d6bb6:	4620      	mov	r0, r4
   d6bb8:	f7ff ffc3 	bl	d6b42 <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d6bbc:	68a9      	ldr	r1, [r5, #8]
   d6bbe:	4620      	mov	r0, r4
   d6bc0:	f7ff ffca 	bl	d6b58 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d6bc4:	6869      	ldr	r1, [r5, #4]
   d6bc6:	4620      	mov	r0, r4
   d6bc8:	f7ff ffcd 	bl	d6b66 <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d6bcc:	6829      	ldr	r1, [r5, #0]
   d6bce:	293b      	cmp	r1, #59	; 0x3b
   d6bd0:	bfa8      	it	ge
   d6bd2:	213b      	movge	r1, #59	; 0x3b
   d6bd4:	4620      	mov	r0, r4
   d6bd6:	f7ff ffcd 	bl	d6b74 <_ZN12MCP79410Time9setSecondEi>
}
   d6bda:	b003      	add	sp, #12
   d6bdc:	bd30      	pop	{r4, r5, pc}

000d6bde <_ZN12MCP79410Time12setAlarmTimeEx>:
void MCP79410Time::setAlarmTime(time_t unixTime) {
   d6bde:	b510      	push	{r4, lr}
   d6be0:	4604      	mov	r4, r0
	fromUnixTime(unixTime);
   d6be2:	f7ff ffd2 	bl	d6b8a <_ZN12MCP79410Time12fromUnixTimeEx>
	alarmMode = ALARM_MONTH_DAY_DOW_HMS;
   d6be6:	7a63      	ldrb	r3, [r4, #9]
   d6be8:	7463      	strb	r3, [r4, #17]
}
   d6bea:	bd10      	pop	{r4, pc}

000d6bec <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d6bec:	4a05      	ldr	r2, [pc, #20]	; (d6c04 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d6bee:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d6bf0:	e9c0 2100 	strd	r2, r1, [r0]
   d6bf4:	4a04      	ldr	r2, [pc, #16]	; (d6c08 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d6bf6:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6bf8:	4a04      	ldr	r2, [pc, #16]	; (d6c0c <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d6bfa:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6bfc:	4a04      	ldr	r2, [pc, #16]	; (d6c10 <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d6bfe:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6c00:	6142      	str	r2, [r0, #20]
}
   d6c02:	4770      	bx	lr
   d6c04:	000db0bc 	.word	0x000db0bc
   d6c08:	03010000 	.word	0x03010000
   d6c0c:	000db064 	.word	0x000db064
   d6c10:	000db098 	.word	0x000db098

000d6c14 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d6c14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6c18:	4604      	mov	r4, r0
   d6c1a:	460f      	mov	r7, r1
   d6c1c:	4690      	mov	r8, r2
   d6c1e:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6c20:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d6c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6c24:	429e      	cmp	r6, r3
   d6c26:	d231      	bcs.n	d6c8c <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d6c28:	6860      	ldr	r0, [r4, #4]
   d6c2a:	4639      	mov	r1, r7
   d6c2c:	f002 f87b 	bl	d8d26 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6c30:	eb08 0106 	add.w	r1, r8, r6
   d6c34:	6860      	ldr	r0, [r4, #4]
   d6c36:	f7ff fd59 	bl	d66ec <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d6c3a:	6860      	ldr	r0, [r4, #4]
   d6c3c:	2100      	movs	r1, #0
   d6c3e:	f002 f879 	bl	d8d34 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d6c42:	4605      	mov	r5, r0
   d6c44:	b9d0      	cbnz	r0, d6c7c <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d6c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d6c48:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d6c4a:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d6c4c:	2a20      	cmp	r2, #32
   d6c4e:	f04f 0301 	mov.w	r3, #1
   d6c52:	bf28      	it	cs
   d6c54:	2220      	movcs	r2, #32
   d6c56:	4639      	mov	r1, r7
   d6c58:	f002 f853 	bl	d8d02 <_ZN7TwoWire11requestFromEhjh>
   d6c5c:	eb09 0b06 	add.w	fp, r9, r6
   d6c60:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d6c62:	eb00 0a0b 	add.w	sl, r0, fp
   d6c66:	45d3      	cmp	fp, sl
   d6c68:	d006      	beq.n	d6c78 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d6c6a:	6860      	ldr	r0, [r4, #4]
   d6c6c:	6803      	ldr	r3, [r0, #0]
   d6c6e:	695b      	ldr	r3, [r3, #20]
   d6c70:	4798      	blx	r3
   d6c72:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d6c76:	e7f6      	b.n	d6c66 <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d6c78:	442e      	add	r6, r5
	while(offset < bufLen) {
   d6c7a:	e7d2      	b.n	d6c22 <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d6c7c:	4602      	mov	r2, r0
   d6c7e:	4904      	ldr	r1, [pc, #16]	; (d6c90 <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d6c80:	4804      	ldr	r0, [pc, #16]	; (d6c94 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d6c82:	f7fd fb05 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d6c86:	4628      	mov	r0, r5
   d6c88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6c8c:	2500      	movs	r5, #0
	return stat;
   d6c8e:	e7fa      	b.n	d6c86 <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d6c90:	000dafbc 	.word	0x000dafbc
   d6c94:	2003e5dc 	.word	0x2003e5dc

000d6c98 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6c98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6c9c:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6ca0:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6ca2:	6803      	ldr	r3, [r0, #0]
   d6ca4:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6ca6:	4605      	mov	r5, r0
   d6ca8:	460c      	mov	r4, r1
   d6caa:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6cac:	4798      	blx	r3
   d6cae:	4580      	cmp	r8, r0
   d6cb0:	d80d      	bhi.n	d6cce <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6cb2:	3420      	adds	r4, #32
   d6cb4:	6868      	ldr	r0, [r5, #4]
   d6cb6:	9600      	str	r6, [sp, #0]
   d6cb8:	463b      	mov	r3, r7
   d6cba:	b2e2      	uxtb	r2, r4
   d6cbc:	216f      	movs	r1, #111	; 0x6f
   d6cbe:	f7ff ffa9 	bl	d6c14 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d6cc2:	fab0 f080 	clz	r0, r0
   d6cc6:	0940      	lsrs	r0, r0, #5
}
   d6cc8:	b002      	add	sp, #8
   d6cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6cce:	2000      	movs	r0, #0
   d6cd0:	e7fa      	b.n	d6cc8 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d6cd2 <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6cd2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6cd6:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6cda:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6cdc:	6803      	ldr	r3, [r0, #0]
   d6cde:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6ce0:	4604      	mov	r4, r0
   d6ce2:	460d      	mov	r5, r1
   d6ce4:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6ce6:	4798      	blx	r3
   d6ce8:	4580      	cmp	r8, r0
   d6cea:	d80c      	bhi.n	d6d06 <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d6cec:	6860      	ldr	r0, [r4, #4]
   d6cee:	9600      	str	r6, [sp, #0]
   d6cf0:	463b      	mov	r3, r7
   d6cf2:	b2ea      	uxtb	r2, r5
   d6cf4:	2157      	movs	r1, #87	; 0x57
   d6cf6:	f7ff ff8d 	bl	d6c14 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d6cfa:	fab0 f080 	clz	r0, r0
   d6cfe:	0940      	lsrs	r0, r0, #5
}
   d6d00:	b002      	add	sp, #8
   d6d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6d06:	2000      	movs	r0, #0
   d6d08:	e7fa      	b.n	d6d00 <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d6d0a <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6d0a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d6d0c:	1e1e      	subs	r6, r3, #0
   d6d0e:	bf0c      	ite	eq
   d6d10:	2307      	moveq	r3, #7
   d6d12:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6d14:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6d16:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6d18:	ab02      	add	r3, sp, #8
   d6d1a:	460a      	mov	r2, r1
   d6d1c:	216f      	movs	r1, #111	; 0x6f
   d6d1e:	f7ff ff79 	bl	d6c14 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d6d22:	4605      	mov	r5, r0
   d6d24:	b9a8      	cbnz	r0, d6d52 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d6d26:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6d2a:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d6d2c:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d6d30:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d6d32:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d6d36:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d6d38:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6d3c:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d6d3e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d6d42:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d6d44:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6d48:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d6d4a:	b92e      	cbnz	r6, d6d58 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d6d4c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d6d50:	72a3      	strb	r3, [r4, #10]
}
   d6d52:	4628      	mov	r0, r5
   d6d54:	b004      	add	sp, #16
   d6d56:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d6d58:	f002 fd7c 	bl	d9854 <_ZN9TimeClass4yearEv>
   d6d5c:	f7ff fec6 	bl	d6aec <_ZN12MCP79410Time8intToBcdEi>
   d6d60:	72a0      	strb	r0, [r4, #10]
	return stat;
   d6d62:	e7f6      	b.n	d6d52 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d6d64 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d6d66:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6d68:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d6d6a:	9300      	str	r3, [sp, #0]
   d6d6c:	216f      	movs	r1, #111	; 0x6f
   d6d6e:	ab03      	add	r3, sp, #12
   d6d70:	f7ff ff50 	bl	d6c14 <_ZNK8MCP7941010deviceReadEhhPhj>
   d6d74:	b920      	cbnz	r0, d6d80 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d6d76:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d6d7a:	b005      	add	sp, #20
   d6d7c:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d6d80:	2000      	movs	r0, #0
   d6d82:	e7fa      	b.n	d6d7a <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d6d84 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d6d84:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d6d86:	2103      	movs	r1, #3
   d6d88:	f7ff ffec 	bl	d6d64 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d6d8c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d6d90:	bd08      	pop	{r3, pc}

000d6d92 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d6d92:	b538      	push	{r3, r4, r5, lr}
   d6d94:	2300      	movs	r3, #0
   d6d96:	460c      	mov	r4, r1
   d6d98:	460a      	mov	r2, r1
   d6d9a:	4619      	mov	r1, r3
   d6d9c:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d6d9e:	f7ff ffb4 	bl	d6d0a <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d6da2:	b930      	cbnz	r0, d6db2 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6da4:	7aa3      	ldrb	r3, [r4, #10]
   d6da6:	b123      	cbz	r3, d6db2 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d6da8:	4628      	mov	r0, r5
}
   d6daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6dae:	f7ff bfe9 	b.w	d6d84 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d6db2:	2000      	movs	r0, #0
   d6db4:	bd38      	pop	{r3, r4, r5, pc}

000d6db6 <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d6db6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6db8:	4602      	mov	r2, r0
	MCP79410Time time;
   d6dba:	a801      	add	r0, sp, #4
   d6dbc:	f7ff fe22 	bl	d6a04 <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d6dc0:	a901      	add	r1, sp, #4
   d6dc2:	4610      	mov	r0, r2
   d6dc4:	f7ff ffe5 	bl	d6d92 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d6dc8:	b128      	cbz	r0, d6dd6 <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d6dca:	a801      	add	r0, sp, #4
   d6dcc:	f7ff fe66 	bl	d6a9c <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d6dd0:	b007      	add	sp, #28
   d6dd2:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d6dd6:	2000      	movs	r0, #0
   d6dd8:	4601      	mov	r1, r0
MCP79410Time::~MCP79410Time() {
   d6dda:	e7f9      	b.n	d6dd0 <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d6ddc <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d6ddc:	b5d0      	push	{r4, r6, r7, lr}
   d6dde:	4604      	mov	r4, r0
   d6de0:	b086      	sub	sp, #24
	wire.begin();
   d6de2:	6840      	ldr	r0, [r0, #4]
   d6de4:	f001 ff70 	bl	d8cc8 <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d6de8:	f002 fcd2 	bl	d9790 <_ZN9TimeClass7isValidEv>
   d6dec:	b9e8      	cbnz	r0, d6e2a <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d6dee:	7ae3      	ldrb	r3, [r4, #11]
   d6df0:	079b      	lsls	r3, r3, #30
   d6df2:	d51a      	bpl.n	d6e2a <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d6df4:	4620      	mov	r0, r4
   d6df6:	f7ff ffde 	bl	d6db6 <_ZNK8MCP7941010getRTCTimeEv>
   d6dfa:	4606      	mov	r6, r0
   d6dfc:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d6dfe:	ea56 0307 	orrs.w	r3, r6, r7
   d6e02:	d012      	beq.n	d6e2a <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d6e04:	f002 fbca 	bl	d959c <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d6e08:	4b0a      	ldr	r3, [pc, #40]	; (d6e34 <_ZN8MCP794105setupEv+0x58>)
   d6e0a:	490b      	ldr	r1, [pc, #44]	; (d6e38 <_ZN8MCP794105setupEv+0x5c>)
   d6e0c:	681b      	ldr	r3, [r3, #0]
   d6e0e:	9300      	str	r3, [sp, #0]
   d6e10:	4632      	mov	r2, r6
   d6e12:	463b      	mov	r3, r7
   d6e14:	a802      	add	r0, sp, #8
   d6e16:	f002 fc79 	bl	d970c <_ZN9TimeClass6formatExPKc>
   d6e1a:	4808      	ldr	r0, [pc, #32]	; (d6e3c <_ZN8MCP794105setupEv+0x60>)
   d6e1c:	9a02      	ldr	r2, [sp, #8]
   d6e1e:	4908      	ldr	r1, [pc, #32]	; (d6e40 <_ZN8MCP794105setupEv+0x64>)
   d6e20:	f7fd fa36 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
   d6e24:	a802      	add	r0, sp, #8
   d6e26:	f002 fa3b 	bl	d92a0 <_ZN6StringD1Ev>
	setupDone = true;
   d6e2a:	2301      	movs	r3, #1
   d6e2c:	7223      	strb	r3, [r4, #8]
}
   d6e2e:	b006      	add	sp, #24
   d6e30:	bdd0      	pop	{r4, r6, r7, pc}
   d6e32:	bf00      	nop
   d6e34:	2003e1b8 	.word	0x2003e1b8
   d6e38:	2003e650 	.word	0x2003e650
   d6e3c:	2003e5dc 	.word	0x2003e5dc
   d6e40:	000dafd6 	.word	0x000dafd6

000d6e44 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6e44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6e48:	4606      	mov	r6, r0
   d6e4a:	4688      	mov	r8, r1
   d6e4c:	4691      	mov	r9, r2
   d6e4e:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6e50:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d6e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6e54:	429d      	cmp	r5, r3
   d6e56:	d229      	bcs.n	d6eac <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d6e58:	6870      	ldr	r0, [r6, #4]
   d6e5a:	4641      	mov	r1, r8
   d6e5c:	f001 ff63 	bl	d8d26 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6e60:	6870      	ldr	r0, [r6, #4]
   d6e62:	eb09 0105 	add.w	r1, r9, r5
   d6e66:	f7ff fc41 	bl	d66ec <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d6e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6e6c:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d6e6e:	2f1f      	cmp	r7, #31
   d6e70:	bf28      	it	cs
   d6e72:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d6e74:	eb0a 0405 	add.w	r4, sl, r5
   d6e78:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d6e7c:	6870      	ldr	r0, [r6, #4]
   d6e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6e82:	6802      	ldr	r2, [r0, #0]
   d6e84:	6892      	ldr	r2, [r2, #8]
   d6e86:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d6e88:	45a3      	cmp	fp, r4
   d6e8a:	d1f7      	bne.n	d6e7c <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d6e8c:	6870      	ldr	r0, [r6, #4]
   d6e8e:	2101      	movs	r1, #1
   d6e90:	f001 ff50 	bl	d8d34 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d6e94:	4604      	mov	r4, r0
   d6e96:	b138      	cbz	r0, d6ea8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d6e98:	4602      	mov	r2, r0
   d6e9a:	4905      	ldr	r1, [pc, #20]	; (d6eb0 <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d6e9c:	4805      	ldr	r0, [pc, #20]	; (d6eb4 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d6e9e:	f7fd f9f7 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d6ea2:	4620      	mov	r0, r4
   d6ea4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d6ea8:	443d      	add	r5, r7
	while(offset < bufLen) {
   d6eaa:	e7d2      	b.n	d6e52 <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d6eac:	2400      	movs	r4, #0
	return stat;
   d6eae:	e7f8      	b.n	d6ea2 <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d6eb0:	000dafeb 	.word	0x000dafeb
   d6eb4:	2003e5dc 	.word	0x2003e5dc

000d6eb8 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6eb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6ebc:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6ec0:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6ec2:	6803      	ldr	r3, [r0, #0]
   d6ec4:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6ec6:	4605      	mov	r5, r0
   d6ec8:	460c      	mov	r4, r1
   d6eca:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6ecc:	4798      	blx	r3
   d6ece:	4580      	cmp	r8, r0
   d6ed0:	d80d      	bhi.n	d6eee <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6ed2:	3420      	adds	r4, #32
   d6ed4:	6868      	ldr	r0, [r5, #4]
   d6ed6:	9600      	str	r6, [sp, #0]
   d6ed8:	463b      	mov	r3, r7
   d6eda:	b2e2      	uxtb	r2, r4
   d6edc:	216f      	movs	r1, #111	; 0x6f
   d6ede:	f7ff ffb1 	bl	d6e44 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d6ee2:	fab0 f080 	clz	r0, r0
   d6ee6:	0940      	lsrs	r0, r0, #5
}
   d6ee8:	b002      	add	sp, #8
   d6eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6eee:	2000      	movs	r0, #0
   d6ef0:	e7fa      	b.n	d6ee8 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d6ef2 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d6ef2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d6ef4:	7c13      	ldrb	r3, [r2, #16]
   d6ef6:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d6efa:	7bd3      	ldrb	r3, [r2, #15]
   d6efc:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d6f00:	7b93      	ldrb	r3, [r2, #14]
   d6f02:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d6f06:	7b53      	ldrb	r3, [r2, #13]
   d6f08:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d6f0c:	7b13      	ldrb	r3, [r2, #12]
   d6f0e:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d6f12:	7ad3      	ldrb	r3, [r2, #11]
   d6f14:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d6f18:	7a93      	ldrb	r3, [r2, #10]
   d6f1a:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d6f1e:	2307      	movs	r3, #7
   d6f20:	9300      	str	r3, [sp, #0]
   d6f22:	460a      	mov	r2, r1
   d6f24:	ab02      	add	r3, sp, #8
   d6f26:	216f      	movs	r1, #111	; 0x6f
   d6f28:	f7ff ff8c 	bl	d6e44 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d6f2c:	b005      	add	sp, #20
   d6f2e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6f32 <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d6f32:	b510      	push	{r4, lr}
   d6f34:	b088      	sub	sp, #32
   d6f36:	4604      	mov	r4, r0
	MCP79410Time time;
   d6f38:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d6f3a:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d6f3c:	f7ff fd62 	bl	d6a04 <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d6f40:	9b01      	ldr	r3, [sp, #4]
   d6f42:	a803      	add	r0, sp, #12
   d6f44:	f7ff fe21 	bl	d6b8a <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6f48:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d6f4c:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6f4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d6f52:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d6f56:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d6f5a:	b16a      	cbz	r2, d6f78 <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d6f5c:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d6f60:	aa03      	add	r2, sp, #12
   d6f62:	2100      	movs	r1, #0
   d6f64:	4620      	mov	r0, r4
   d6f66:	f88d 3019 	strb.w	r3, [sp, #25]
   d6f6a:	f7ff ffc2 	bl	d6ef2 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d6f6e:	fab0 f080 	clz	r0, r0
   d6f72:	0940      	lsrs	r0, r0, #5
   d6f74:	b008      	add	sp, #32
   d6f76:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d6f78:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d6f7c:	e7f0      	b.n	d6f60 <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d6f80 <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d6f80:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6f82:	b087      	sub	sp, #28
   d6f84:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d6f86:	f002 fc03 	bl	d9790 <_ZN9TimeClass7isValidEv>
   d6f8a:	4604      	mov	r4, r0
   d6f8c:	b1e8      	cbz	r0, d6fca <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d6f8e:	f002 fc1c 	bl	d97ca <_ZN9TimeClass3nowEv>
   d6f92:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d6f94:	4602      	mov	r2, r0
		time_t now = Time.now();
   d6f96:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d6f98:	463b      	mov	r3, r7
   d6f9a:	4628      	mov	r0, r5
   d6f9c:	f7ff ffc9 	bl	d6f32 <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d6fa0:	4b0c      	ldr	r3, [pc, #48]	; (d6fd4 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d6fa2:	490d      	ldr	r1, [pc, #52]	; (d6fd8 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6fa4:	681b      	ldr	r3, [r3, #0]
   d6fa6:	9300      	str	r3, [sp, #0]
   d6fa8:	4632      	mov	r2, r6
   d6faa:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d6fac:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d6fae:	a802      	add	r0, sp, #8
   d6fb0:	f002 fbac 	bl	d970c <_ZN9TimeClass6formatExPKc>
   d6fb4:	4809      	ldr	r0, [pc, #36]	; (d6fdc <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d6fb6:	9a02      	ldr	r2, [sp, #8]
   d6fb8:	4909      	ldr	r1, [pc, #36]	; (d6fe0 <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d6fba:	f7fd f969 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
   d6fbe:	a802      	add	r0, sp, #8
   d6fc0:	f002 f96e 	bl	d92a0 <_ZN6StringD1Ev>
}
   d6fc4:	4620      	mov	r0, r4
   d6fc6:	b007      	add	sp, #28
   d6fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d6fca:	4906      	ldr	r1, [pc, #24]	; (d6fe4 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d6fcc:	4803      	ldr	r0, [pc, #12]	; (d6fdc <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d6fce:	f7fd f95f 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
   d6fd2:	e7f7      	b.n	d6fc4 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d6fd4:	2003e1b8 	.word	0x2003e1b8
   d6fd8:	2003e650 	.word	0x2003e650
   d6fdc:	2003e5dc 	.word	0x2003e5dc
   d6fe0:	000db006 	.word	0x000db006
   d6fe4:	000db01c 	.word	0x000db01c

000d6fe8 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d6fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d6fea:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d6fec:	4604      	mov	r4, r0
	if (!timeSet) {
   d6fee:	b99d      	cbnz	r5, d7018 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d6ff0:	f002 fbce 	bl	d9790 <_ZN9TimeClass7isValidEv>
   d6ff4:	b180      	cbz	r0, d7018 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d6ff6:	2200      	movs	r2, #0
   d6ff8:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d6ffa:	4669      	mov	r1, sp
   d6ffc:	4628      	mov	r0, r5
        tm = 0;
   d6ffe:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d7002:	f001 f8df 	bl	d81c4 <spark_sync_time_last>
			if (lastSync != 0) {
   d7006:	b138      	cbz	r0, d7018 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d7008:	7ae3      	ldrb	r3, [r4, #11]
   d700a:	07db      	lsls	r3, r3, #31
   d700c:	d502      	bpl.n	d7014 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d700e:	4620      	mov	r0, r4
   d7010:	f7ff ffb6 	bl	d6f80 <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d7014:	2301      	movs	r3, #1
   d7016:	7263      	strb	r3, [r4, #9]
}
   d7018:	b003      	add	sp, #12
   d701a:	bd30      	pop	{r4, r5, pc}

000d701c <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d701c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d701e:	2301      	movs	r3, #1
	buf[0] = value;
   d7020:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d7024:	9300      	str	r3, [sp, #0]
   d7026:	460a      	mov	r2, r1
   d7028:	ab03      	add	r3, sp, #12
   d702a:	216f      	movs	r1, #111	; 0x6f
   d702c:	f7ff ff0a 	bl	d6e44 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d7030:	b005      	add	sp, #20
   d7032:	f85d fb04 	ldr.w	pc, [sp], #4

000d7036 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d7036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7038:	4604      	mov	r4, r0
   d703a:	460d      	mov	r5, r1
   d703c:	4617      	mov	r7, r2
   d703e:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d7040:	f7ff fe90 	bl	d6d64 <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d7044:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d7048:	4332      	orrs	r2, r6
   d704a:	4629      	mov	r1, r5
   d704c:	4620      	mov	r0, r4
}
   d704e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d7052:	f7ff bfe3 	b.w	d701c <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d7056 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>:
	if (set) {
   d7056:	b11b      	cbz	r3, d7060 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0xa>
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d7058:	4613      	mov	r3, r2
   d705a:	22ff      	movs	r2, #255	; 0xff
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d705c:	f7ff bfeb 	b.w	d7036 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
   d7060:	43d2      	mvns	r2, r2
   d7062:	b2d2      	uxtb	r2, r2
   d7064:	e7fa      	b.n	d705c <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0x6>

000d7066 <_ZN8MCP7941014clearInterruptEi>:
	 *
	 * @param offset 0 to get the base, or a constant like MCP79410::REG_ALARM_WKDAY_OFFSET (3).
	 *
	 * @return Returns either MCP79410::REG_ALARM0 or MCP79410::REG_ALARM1 plus the given offset
	 */
	uint8_t getAlarmRegister(int alarmNum, int offset = 0) { return ((alarmNum == 0) ? REG_ALARM0 : REG_ALARM1) + offset; };
   d7066:	2900      	cmp	r1, #0
   d7068:	f04f 0300 	mov.w	r3, #0
   d706c:	f04f 02f7 	mov.w	r2, #247	; 0xf7
   d7070:	bf14      	ite	ne
   d7072:	2114      	movne	r1, #20
   d7074:	210d      	moveq	r1, #13
   d7076:	f7ff bfde 	b.w	d7036 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>

000d707a <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d707a:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d707c:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d707e:	d80c      	bhi.n	d709a <_ZN8MCP7941010clearAlarmEi+0x20>
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d7080:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d7082:	f04f 0300 	mov.w	r3, #0
   d7086:	bf14      	ite	ne
   d7088:	22df      	movne	r2, #223	; 0xdf
   d708a:	22ef      	moveq	r2, #239	; 0xef
   d708c:	2107      	movs	r1, #7
   d708e:	f7ff ffd2 	bl	d7036 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d7092:	fab0 f080 	clz	r0, r0
   d7096:	0940      	lsrs	r0, r0, #5
}
   d7098:	bd08      	pop	{r3, pc}
		return false;
   d709a:	2000      	movs	r0, #0
   d709c:	e7fc      	b.n	d7098 <_ZN8MCP7941010clearAlarmEi+0x1e>

000d709e <_ZN8MCP794108setAlarmERK12MCP79410Timebi>:
bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d709e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d70a0:	2b01      	cmp	r3, #1
bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d70a2:	b085      	sub	sp, #20
   d70a4:	4606      	mov	r6, r0
   d70a6:	460c      	mov	r4, r1
   d70a8:	4617      	mov	r7, r2
   d70aa:	461d      	mov	r5, r3
	if (alarmNum < 0 || alarmNum > 1) {
   d70ac:	d902      	bls.n	d70b4 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x16>
		return false;
   d70ae:	2000      	movs	r0, #0
}
   d70b0:	b005      	add	sp, #20
   d70b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (getOscillatorRunning()) {
   d70b4:	f7ff fe66 	bl	d6d84 <_ZNK8MCP7941020getOscillatorRunningEv>
   d70b8:	2800      	cmp	r0, #0
   d70ba:	d0f8      	beq.n	d70ae <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x10>
		clearInterrupt(alarmNum);
   d70bc:	4629      	mov	r1, r5
   d70be:	4630      	mov	r0, r6
   d70c0:	f7ff ffd1 	bl	d7066 <_ZN8MCP7941014clearInterruptEi>
		buf[0] = time.rawSecond;
   d70c4:	7c23      	ldrb	r3, [r4, #16]
		buf[4] = time.rawDayOfMonth;
   d70c6:	7b22      	ldrb	r2, [r4, #12]
		buf[0] = time.rawSecond;
   d70c8:	f88d 3008 	strb.w	r3, [sp, #8]
		buf[1] = time.rawMinute;
   d70cc:	7be3      	ldrb	r3, [r4, #15]
   d70ce:	f88d 3009 	strb.w	r3, [sp, #9]
		buf[4] = time.rawDayOfMonth;
   d70d2:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[2] = time.rawHour;
   d70d6:	7ba3      	ldrb	r3, [r4, #14]
		buf[5] = time.rawMonth;
   d70d8:	7ae2      	ldrb	r2, [r4, #11]
		buf[2] = time.rawHour;
   d70da:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[5] = time.rawMonth;
   d70de:	f88d 200d 	strb.w	r2, [sp, #13]
		buf[3] = time.rawDayOfWeek;
   d70e2:	7b63      	ldrb	r3, [r4, #13]
		if (polarity) {
   d70e4:	b32f      	cbz	r7, d7132 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x94>
			buf[3] |= REG_ALARM_WKDAY_ALMPOL;
   d70e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		buf[3] |= (time.alarmMode & 0x7) << 4;
   d70ea:	7c62      	ldrb	r2, [r4, #17]
   d70ec:	0112      	lsls	r2, r2, #4
   d70ee:	f002 0270 	and.w	r2, r2, #112	; 0x70
   d70f2:	431a      	orrs	r2, r3
	uint8_t getAlarmRegister(int alarmNum, int offset = 0) { return ((alarmNum == 0) ? REG_ALARM0 : REG_ALARM1) + offset; };
   d70f4:	2d00      	cmp	r5, #0
		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
   d70f6:	f04f 0306 	mov.w	r3, #6
		buf[3] |= (time.alarmMode & 0x7) << 4;
   d70fa:	f88d 200b 	strb.w	r2, [sp, #11]
		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
   d70fe:	9300      	str	r3, [sp, #0]
   d7100:	bf08      	it	eq
   d7102:	220a      	moveq	r2, #10
   d7104:	ab02      	add	r3, sp, #8
   d7106:	bf18      	it	ne
   d7108:	2211      	movne	r2, #17
   d710a:	216f      	movs	r1, #111	; 0x6f
   d710c:	4630      	mov	r0, r6
   d710e:	f7ff fe99 	bl	d6e44 <_ZN8MCP7941011deviceWriteEhhPKhj>
		if (stat == 0) {
   d7112:	4604      	mov	r4, r0
   d7114:	b948      	cbnz	r0, d712a <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x8c>
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d7116:	2d00      	cmp	r5, #0
			deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), true);
   d7118:	f04f 0301 	mov.w	r3, #1
   d711c:	bf0c      	ite	eq
   d711e:	2210      	moveq	r2, #16
   d7120:	2220      	movne	r2, #32
   d7122:	2107      	movs	r1, #7
   d7124:	4630      	mov	r0, r6
   d7126:	f7ff ff96 	bl	d7056 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>
		return (stat == 0);
   d712a:	fab4 f084 	clz	r0, r4
   d712e:	0940      	lsrs	r0, r0, #5
   d7130:	e7be      	b.n	d70b0 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x12>
			buf[3] &= ~REG_ALARM_WKDAY_ALMPOL;
   d7132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d7136:	e7d8      	b.n	d70ea <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x4c>

000d7138 <_ZN8MCP794108setAlarmEibi>:
bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d7138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d713c:	2b01      	cmp	r3, #1
bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d713e:	b087      	sub	sp, #28
   d7140:	4607      	mov	r7, r0
   d7142:	4689      	mov	r9, r1
   d7144:	4690      	mov	r8, r2
   d7146:	461e      	mov	r6, r3
	if (alarmNum < 0 || alarmNum > 1) {
   d7148:	d903      	bls.n	d7152 <_ZN8MCP794108setAlarmEibi+0x1a>
		return false;
   d714a:	2000      	movs	r0, #0
}
   d714c:	b007      	add	sp, #28
   d714e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	time_t unixTime = getRTCTime();
   d7152:	f7ff fe30 	bl	d6db6 <_ZNK8MCP7941010getRTCTimeEv>
   d7156:	4604      	mov	r4, r0
   d7158:	460d      	mov	r5, r1
	if (unixTime != 0) {
   d715a:	ea54 0305 	orrs.w	r3, r4, r5
   d715e:	d0f4      	beq.n	d714a <_ZN8MCP794108setAlarmEibi+0x12>
		unixTime += secondsFromNow;
   d7160:	eb10 0409 	adds.w	r4, r0, r9
   d7164:	eb41 75e9 	adc.w	r5, r1, r9, asr #31
		MCP79410Time time;
   d7168:	a801      	add	r0, sp, #4
   d716a:	f7ff fc4b 	bl	d6a04 <_ZN12MCP79410TimeC1Ev>
		time.setAlarmTime(unixTime);
   d716e:	4622      	mov	r2, r4
   d7170:	462b      	mov	r3, r5
   d7172:	a801      	add	r0, sp, #4
   d7174:	f7ff fd33 	bl	d6bde <_ZN12MCP79410Time12setAlarmTimeEx>
		return setAlarm(time, polarity, alarmNum);
   d7178:	4633      	mov	r3, r6
   d717a:	4642      	mov	r2, r8
   d717c:	a901      	add	r1, sp, #4
   d717e:	4638      	mov	r0, r7
   d7180:	f7ff ff8d 	bl	d709e <_ZN8MCP794108setAlarmERK12MCP79410Timebi>
MCP79410Time::~MCP79410Time() {
   d7184:	e7e2      	b.n	d714c <_ZN8MCP794108setAlarmEibi+0x14>

000d7186 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d7186:	b538      	push	{r3, r4, r5, lr}
   d7188:	4604      	mov	r4, r0
   d718a:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d718c:	6860      	ldr	r0, [r4, #4]
   d718e:	2157      	movs	r1, #87	; 0x57
   d7190:	f001 fdc9 	bl	d8d26 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d7194:	6860      	ldr	r0, [r4, #4]
   d7196:	2101      	movs	r1, #1
   d7198:	f001 fdcc 	bl	d8d34 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d719c:	b108      	cbz	r0, d71a2 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d719e:	3d01      	subs	r5, #1
   d71a0:	d1f4      	bne.n	d718c <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d71a2:	bd38      	pop	{r3, r4, r5, pc}

000d71a4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d71a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d71a8:	4604      	mov	r4, r0
   d71aa:	460f      	mov	r7, r1
   d71ac:	4616      	mov	r6, r2
   d71ae:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d71b2:	45b0      	cmp	r8, r6
   d71b4:	d020      	beq.n	d71f8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d71b6:	6860      	ldr	r0, [r4, #4]
   d71b8:	2157      	movs	r1, #87	; 0x57
   d71ba:	f001 fdb4 	bl	d8d26 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d71be:	4639      	mov	r1, r7
   d71c0:	6860      	ldr	r0, [r4, #4]
   d71c2:	f7ff fa93 	bl	d66ec <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d71c6:	6860      	ldr	r0, [r4, #4]
   d71c8:	f816 1b01 	ldrb.w	r1, [r6], #1
   d71cc:	6803      	ldr	r3, [r0, #0]
   d71ce:	689b      	ldr	r3, [r3, #8]
   d71d0:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d71d2:	6860      	ldr	r0, [r4, #4]
   d71d4:	2101      	movs	r1, #1
   d71d6:	f001 fdad 	bl	d8d34 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d71da:	3701      	adds	r7, #1
   d71dc:	4605      	mov	r5, r0
   d71de:	b138      	cbz	r0, d71f0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d71e0:	4602      	mov	r2, r0
   d71e2:	4906      	ldr	r1, [pc, #24]	; (d71fc <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d71e4:	4806      	ldr	r0, [pc, #24]	; (d7200 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d71e6:	f7fd f853 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
}
   d71ea:	4628      	mov	r0, r5
   d71ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d71f0:	4620      	mov	r0, r4
   d71f2:	f7ff ffc8 	bl	d7186 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d71f6:	e7dc      	b.n	d71b2 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d71f8:	2500      	movs	r5, #0
	return stat;
   d71fa:	e7f6      	b.n	d71ea <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d71fc:	000db031 	.word	0x000db031
   d7200:	2003e5dc 	.word	0x2003e5dc

000d7204 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d7206:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7208:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d720a:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d720c:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d720e:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7210:	4604      	mov	r4, r0
   d7212:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d7214:	4798      	blx	r3
   d7216:	4287      	cmp	r7, r0
   d7218:	d80a      	bhi.n	d7230 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d721a:	9a01      	ldr	r2, [sp, #4]
   d721c:	6860      	ldr	r0, [r4, #4]
   d721e:	4633      	mov	r3, r6
   d7220:	b2e9      	uxtb	r1, r5
   d7222:	f7ff ffbf 	bl	d71a4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d7226:	fab0 f080 	clz	r0, r0
   d722a:	0940      	lsrs	r0, r0, #5
}
   d722c:	b003      	add	sp, #12
   d722e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d7230:	2000      	movs	r0, #0
   d7232:	e7fb      	b.n	d722c <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d7234 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
   d7234:	4b01      	ldr	r3, [pc, #4]	; (d723c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d7236:	4a02      	ldr	r2, [pc, #8]	; (d7240 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d7238:	601a      	str	r2, [r3, #0]
}
   d723a:	4770      	bx	lr
   d723c:	2003e5dc 	.word	0x2003e5dc
   d7240:	000db052 	.word	0x000db052

000d7244 <nrf_gpio_pin_port_decode>:
{
   d7244:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d7246:	6803      	ldr	r3, [r0, #0]
   d7248:	2b2f      	cmp	r3, #47	; 0x2f
{
   d724a:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d724c:	d904      	bls.n	d7258 <nrf_gpio_pin_port_decode+0x14>
   d724e:	4a07      	ldr	r2, [pc, #28]	; (d726c <nrf_gpio_pin_port_decode+0x28>)
   d7250:	2100      	movs	r1, #0
   d7252:	200a      	movs	r0, #10
   d7254:	f000 fee4 	bl	d8020 <panic_>
    if (*p_pin < P0_PIN_NUM)
   d7258:	6823      	ldr	r3, [r4, #0]
   d725a:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d725c:	bf83      	ittte	hi
   d725e:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d7262:	4803      	ldrhi	r0, [pc, #12]	; (d7270 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d7264:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d7266:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
}
   d726a:	bd10      	pop	{r4, pc}
   d726c:	000d7cb1 	.word	0x000d7cb1
   d7270:	50000300 	.word	0x50000300

000d7274 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d7274:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7276:	4604      	mov	r4, r0
   d7278:	f7fd f822 	bl	d42c0 <fastPinGetPinmap>
   d727c:	0124      	lsls	r4, r4, #4
   d727e:	5d03      	ldrb	r3, [r0, r4]
   d7280:	015d      	lsls	r5, r3, #5
   d7282:	f7fd f81d 	bl	d42c0 <fastPinGetPinmap>
   d7286:	4420      	add	r0, r4
   d7288:	7843      	ldrb	r3, [r0, #1]
   d728a:	f003 031f 	and.w	r3, r3, #31
   d728e:	432b      	orrs	r3, r5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d7290:	a801      	add	r0, sp, #4
   d7292:	9301      	str	r3, [sp, #4]
   d7294:	f7ff ffd6 	bl	d7244 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d7298:	9a01      	ldr	r2, [sp, #4]
   d729a:	2301      	movs	r3, #1
   d729c:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   d729e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
      pinResetFast(_pin);
    }
   d72a2:	b003      	add	sp, #12
   d72a4:	bd30      	pop	{r4, r5, pc}

000d72a6 <_ZN7OneWire20digitalWriteFastHighEv.isra.0>:

    inline void digitalWriteFastHigh() {
   d72a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d72a8:	4604      	mov	r4, r0
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d72aa:	f7fd f809 	bl	d42c0 <fastPinGetPinmap>
   d72ae:	0124      	lsls	r4, r4, #4
   d72b0:	5d03      	ldrb	r3, [r0, r4]
   d72b2:	015d      	lsls	r5, r3, #5
   d72b4:	f7fd f804 	bl	d42c0 <fastPinGetPinmap>
   d72b8:	4420      	add	r0, r4
   d72ba:	7843      	ldrb	r3, [r0, #1]
   d72bc:	f003 031f 	and.w	r3, r3, #31
   d72c0:	432b      	orrs	r3, r5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d72c2:	a801      	add	r0, sp, #4
   d72c4:	9301      	str	r3, [sp, #4]
   d72c6:	f7ff ffbd 	bl	d7244 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d72ca:	9a01      	ldr	r2, [sp, #4]
   d72cc:	2301      	movs	r3, #1
   d72ce:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d72d0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
      pinSetFast(_pin);
    }
   d72d4:	b003      	add	sp, #12
   d72d6:	bd30      	pop	{r4, r5, pc}

000d72d8 <_ZN7OneWire15digitalReadFastEv.isra.0>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d72d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d72da:	4605      	mov	r5, r0
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d72dc:	f7fc fff0 	bl	d42c0 <fastPinGetPinmap>
   d72e0:	012d      	lsls	r5, r5, #4
   d72e2:	5d44      	ldrb	r4, [r0, r5]
   d72e4:	f7fc ffec 	bl	d42c0 <fastPinGetPinmap>
   d72e8:	4428      	add	r0, r5
   d72ea:	0166      	lsls	r6, r4, #5
   d72ec:	7844      	ldrb	r4, [r0, #1]
   d72ee:	f004 041f 	and.w	r4, r4, #31
   d72f2:	4334      	orrs	r4, r6
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d72f4:	a801      	add	r0, sp, #4
   d72f6:	9401      	str	r4, [sp, #4]
   d72f8:	f7ff ffa4 	bl	d7244 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   d72fc:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
    return nrf_gpio_pin_read(nrf_pin);
   d7300:	9401      	str	r4, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d7302:	a801      	add	r0, sp, #4
   d7304:	f7ff ff9e 	bl	d7244 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d7308:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d730a:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d730e:	40d8      	lsrs	r0, r3
      return pinReadFast(_pin);
    }
   d7310:	f000 0001 	and.w	r0, r0, #1
   d7314:	b002      	add	sp, #8
   d7316:	bd70      	pop	{r4, r5, r6, pc}

000d7318 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d7318:	b538      	push	{r3, r4, r5, lr}
   d731a:	4604      	mov	r4, r0
   d731c:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d731e:	4628      	mov	r0, r5
   d7320:	2100      	movs	r1, #0
   d7322:	f002 fca5 	bl	d9c70 <pinMode>
    _pin = pin;
   d7326:	8025      	strh	r5, [r4, #0]
}
   d7328:	4620      	mov	r0, r4
   d732a:	bd38      	pop	{r3, r4, r5, pc}

000d732c <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d732c:	b570      	push	{r4, r5, r6, lr}
   d732e:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d7330:	f001 fd42 	bl	d8db8 <_Z12noInterruptsv>
      HAL_Pin_Mode(_pin, INPUT);
   d7334:	8828      	ldrh	r0, [r5, #0]
   d7336:	2100      	movs	r1, #0
   d7338:	f000 fd02 	bl	d7d40 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d733c:	f001 fd3e 	bl	d8dbc <_Z10interruptsv>
   d7340:	247d      	movs	r4, #125	; 0x7d
    // wait until the wire is high... just in case
    do
    {
        if (--retries == 0)
   d7342:	3c01      	subs	r4, #1
   d7344:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d7348:	d02d      	beq.n	d73a6 <_ZN7OneWire5resetEv+0x7a>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d734a:	2002      	movs	r0, #2
   d734c:	f000 fcb0 	bl	d7cb0 <HAL_Delay_Microseconds>
            return 0;

        delayMicroseconds(2);
    } while (!digitalReadFast());
   d7350:	8828      	ldrh	r0, [r5, #0]
   d7352:	f7ff ffc1 	bl	d72d8 <_ZN7OneWire15digitalReadFastEv.isra.0>
   d7356:	2800      	cmp	r0, #0
   d7358:	d0f3      	beq.n	d7342 <_ZN7OneWire5resetEv+0x16>

    noInterrupts();
   d735a:	f001 fd2d 	bl	d8db8 <_Z12noInterruptsv>

    digitalWriteFastLow();
   d735e:	8828      	ldrh	r0, [r5, #0]
   d7360:	f7ff ff88 	bl	d7274 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
      HAL_Pin_Mode(_pin, OUTPUT);
   d7364:	2101      	movs	r1, #1
   d7366:	8828      	ldrh	r0, [r5, #0]
   d7368:	f000 fcea 	bl	d7d40 <HAL_Pin_Mode>
    pinModeFastOutput(); // drive output low

    interrupts();
   d736c:	f001 fd26 	bl	d8dbc <_Z10interruptsv>
   d7370:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d7374:	f000 fc9c 	bl	d7cb0 <HAL_Delay_Microseconds>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d7378:	f000 fcaa 	bl	d7cd0 <HAL_disable_irq>
      HAL_Pin_Mode(_pin, INPUT);
   d737c:	2100      	movs	r1, #0
   d737e:	4606      	mov	r6, r0
   d7380:	8828      	ldrh	r0, [r5, #0]
   d7382:	f000 fcdd 	bl	d7d40 <HAL_Pin_Mode>
   d7386:	2046      	movs	r0, #70	; 0x46
   d7388:	f000 fc92 	bl	d7cb0 <HAL_Delay_Microseconds>
    {
        pinModeFastInput(); // allow it to float

        delayMicroseconds(70);

        r = !digitalReadFast();
   d738c:	8828      	ldrh	r0, [r5, #0]
   d738e:	f7ff ffa3 	bl	d72d8 <_ZN7OneWire15digitalReadFastEv.isra.0>
   d7392:	fab0 f480 	clz	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d7396:	4630      	mov	r0, r6
   d7398:	f000 fca2 	bl	d7ce0 <HAL_enable_irq>
   d739c:	f44f 70cd 	mov.w	r0, #410	; 0x19a
   d73a0:	0964      	lsrs	r4, r4, #5
   d73a2:	f000 fc85 	bl	d7cb0 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(410);

    return r;
}
   d73a6:	4620      	mov	r0, r4
   d73a8:	bd70      	pop	{r4, r5, r6, pc}

000d73aa <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d73aa:	b570      	push	{r4, r5, r6, lr}
    if (v & 1)
   d73ac:	f011 0501 	ands.w	r5, r1, #1
{
   d73b0:	4604      	mov	r4, r0
    if (v & 1)
   d73b2:	d018      	beq.n	d73e6 <_ZN7OneWire9write_bitEh+0x3c>
		prev = HAL_disable_irq();
   d73b4:	f000 fc8c 	bl	d7cd0 <HAL_disable_irq>
   d73b8:	4605      	mov	r5, r0
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
   d73ba:	8820      	ldrh	r0, [r4, #0]
   d73bc:	f7ff ff5a 	bl	d7274 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
      HAL_Pin_Mode(_pin, OUTPUT);
   d73c0:	2101      	movs	r1, #1
   d73c2:	8820      	ldrh	r0, [r4, #0]
   d73c4:	f000 fcbc 	bl	d7d40 <HAL_Pin_Mode>
   d73c8:	2001      	movs	r0, #1
   d73ca:	f000 fc71 	bl	d7cb0 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d73ce:	8820      	ldrh	r0, [r4, #0]
   d73d0:	2100      	movs	r1, #0
   d73d2:	f000 fcb5 	bl	d7d40 <HAL_Pin_Mode>
		HAL_enable_irq(prev);
   d73d6:	4628      	mov	r0, r5
   d73d8:	f000 fc82 	bl	d7ce0 <HAL_enable_irq>
   d73dc:	203b      	movs	r0, #59	; 0x3b

            pinModeFastInput(); // float high
        }
        delayMicroseconds(5);
    }
}
   d73de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d73e2:	f000 bc65 	b.w	d7cb0 <HAL_Delay_Microseconds>
		prev = HAL_disable_irq();
   d73e6:	f000 fc73 	bl	d7cd0 <HAL_disable_irq>
   d73ea:	4606      	mov	r6, r0
            digitalWriteFastLow();
   d73ec:	8820      	ldrh	r0, [r4, #0]
   d73ee:	f7ff ff41 	bl	d7274 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
      HAL_Pin_Mode(_pin, OUTPUT);
   d73f2:	2101      	movs	r1, #1
   d73f4:	8820      	ldrh	r0, [r4, #0]
   d73f6:	f000 fca3 	bl	d7d40 <HAL_Pin_Mode>
   d73fa:	2041      	movs	r0, #65	; 0x41
   d73fc:	f000 fc58 	bl	d7cb0 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d7400:	8820      	ldrh	r0, [r4, #0]
   d7402:	4629      	mov	r1, r5
   d7404:	f000 fc9c 	bl	d7d40 <HAL_Pin_Mode>
		HAL_enable_irq(prev);
   d7408:	4630      	mov	r0, r6
   d740a:	f000 fc69 	bl	d7ce0 <HAL_enable_irq>
   d740e:	2005      	movs	r0, #5
   d7410:	e7e5      	b.n	d73de <_ZN7OneWire9write_bitEh+0x34>

000d7412 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d7412:	b538      	push	{r3, r4, r5, lr}
   d7414:	4604      	mov	r4, r0
		prev = HAL_disable_irq();
   d7416:	f000 fc5b 	bl	d7cd0 <HAL_disable_irq>
   d741a:	4605      	mov	r5, r0
    uint8_t r;

    ATOMIC_BLOCK()
    {
        digitalWriteFastLow();
   d741c:	8820      	ldrh	r0, [r4, #0]
   d741e:	f7ff ff29 	bl	d7274 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
      HAL_Pin_Mode(_pin, OUTPUT);
   d7422:	8820      	ldrh	r0, [r4, #0]
   d7424:	2101      	movs	r1, #1
   d7426:	f000 fc8b 	bl	d7d40 <HAL_Pin_Mode>
   d742a:	2001      	movs	r0, #1
   d742c:	f000 fc40 	bl	d7cb0 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d7430:	2100      	movs	r1, #0
   d7432:	8820      	ldrh	r0, [r4, #0]
   d7434:	f000 fc84 	bl	d7d40 <HAL_Pin_Mode>
   d7438:	200d      	movs	r0, #13
   d743a:	f000 fc39 	bl	d7cb0 <HAL_Delay_Microseconds>

        pinModeFastInput(); // let pin float, pull up will raise

        delayMicroseconds(13);

        r = digitalReadFast();
   d743e:	8820      	ldrh	r0, [r4, #0]
   d7440:	f7ff ff4a 	bl	d72d8 <_ZN7OneWire15digitalReadFastEv.isra.0>
   d7444:	4604      	mov	r4, r0
		HAL_enable_irq(prev);
   d7446:	4628      	mov	r0, r5
   d7448:	f000 fc4a 	bl	d7ce0 <HAL_enable_irq>
   d744c:	202e      	movs	r0, #46	; 0x2e
   d744e:	f000 fc2f 	bl	d7cb0 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(46);

    return r;
}
   d7452:	4620      	mov	r0, r4
   d7454:	bd38      	pop	{r3, r4, r5, pc}

000d7456 <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
   d7456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d745a:	4604      	mov	r4, r0
   d745c:	4688      	mov	r8, r1
   d745e:	4616      	mov	r6, r2
   d7460:	2708      	movs	r7, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d7462:	2501      	movs	r5, #1
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
   d7464:	ea18 0f05 	tst.w	r8, r5
   d7468:	bf14      	ite	ne
   d746a:	2101      	movne	r1, #1
   d746c:	2100      	moveq	r1, #0
   d746e:	4620      	mov	r0, r4
   d7470:	f7ff ff9b 	bl	d73aa <_ZN7OneWire9write_bitEh>
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d7474:	006d      	lsls	r5, r5, #1
   d7476:	3f01      	subs	r7, #1
   d7478:	b2ed      	uxtb	r5, r5
   d747a:	d1f3      	bne.n	d7464 <_ZN7OneWire5writeEhh+0xe>
    }

    if (power)
   d747c:	b166      	cbz	r6, d7498 <_ZN7OneWire5writeEhh+0x42>
    {
        noInterrupts();
   d747e:	f001 fc9b 	bl	d8db8 <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d7482:	8820      	ldrh	r0, [r4, #0]
   d7484:	f7ff ff0f 	bl	d72a6 <_ZN7OneWire20digitalWriteFastHighEv.isra.0>
      HAL_Pin_Mode(_pin, OUTPUT);
   d7488:	8820      	ldrh	r0, [r4, #0]
   d748a:	2101      	movs	r1, #1
   d748c:	f000 fc58 	bl	d7d40 <HAL_Pin_Mode>
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
    }
}
   d7490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        interrupts();
   d7494:	f001 bc92 	b.w	d8dbc <_Z10interruptsv>
}
   d7498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d749c <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
   d749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d749e:	4607      	mov	r7, r0
   d74a0:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d74a2:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d74a4:	2401      	movs	r4, #1
    {
        if (OneWire::read_bit())
   d74a6:	4638      	mov	r0, r7
   d74a8:	f7ff ffb3 	bl	d7412 <_ZN7OneWire8read_bitEv>
   d74ac:	b100      	cbz	r0, d74b0 <_ZN7OneWire4readEv+0x14>
            r |= bitMask;
   d74ae:	4325      	orrs	r5, r4
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d74b0:	0064      	lsls	r4, r4, #1
   d74b2:	3e01      	subs	r6, #1
   d74b4:	b2e4      	uxtb	r4, r4
   d74b6:	d1f6      	bne.n	d74a6 <_ZN7OneWire4readEv+0xa>
    }

    return r;
}
   d74b8:	4628      	mov	r0, r5
   d74ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d74bc <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d74bc:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55); // Choose ROM
   d74be:	2200      	movs	r2, #0
{
   d74c0:	460c      	mov	r4, r1
    write(0x55); // Choose ROM
   d74c2:	2155      	movs	r1, #85	; 0x55
{
   d74c4:	4606      	mov	r6, r0
    write(0x55); // Choose ROM
   d74c6:	f7ff ffc6 	bl	d7456 <_ZN7OneWire5writeEhh>

    for (i = 0; i < 8; i++)
   d74ca:	1e65      	subs	r5, r4, #1
   d74cc:	3407      	adds	r4, #7
        write(rom[i]);
   d74ce:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d74d2:	2200      	movs	r2, #0
   d74d4:	4630      	mov	r0, r6
   d74d6:	f7ff ffbe 	bl	d7456 <_ZN7OneWire5writeEhh>
    for (i = 0; i < 8; i++)
   d74da:	42a5      	cmp	r5, r4
   d74dc:	d1f7      	bne.n	d74ce <_ZN7OneWire6selectEPKh+0x12>
}
   d74de:	bd70      	pop	{r4, r5, r6, pc}

000d74e0 <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC); // Skip ROM
   d74e0:	2200      	movs	r2, #0
   d74e2:	21cc      	movs	r1, #204	; 0xcc
   d74e4:	f7ff bfb7 	b.w	d7456 <_ZN7OneWire5writeEhh>

000d74e8 <_ZN7OneWire12reset_searchEv>:
    LastDeviceFlag = FALSE;
    LastFamilyDiscrepancy = 0;

    for (int i = 7;; i--)
    {
        ROM_NO[i] = 0;
   d74e8:	2300      	movs	r3, #0
   d74ea:	8043      	strh	r3, [r0, #2]
   d74ec:	8083      	strh	r3, [r0, #4]
   d74ee:	80c3      	strh	r3, [r0, #6]
   d74f0:	8103      	strh	r3, [r0, #8]
    LastDiscrepancy = 0;
   d74f2:	8143      	strh	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d74f4:	7303      	strb	r3, [r0, #12]
        if (i == 0)
            break;
    }
}
   d74f6:	4770      	bx	lr

000d74f8 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d74f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d74fc:	f890 900c 	ldrb.w	r9, [r0, #12]
{
   d7500:	4604      	mov	r4, r0
   d7502:	4688      	mov	r8, r1
    if (!LastDeviceFlag)
   d7504:	f1b9 0f00 	cmp.w	r9, #0
   d7508:	d00d      	beq.n	d7526 <_ZN7OneWire6searchEPh+0x2e>
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
    {
        LastDiscrepancy = 0;
   d750a:	2000      	movs	r0, #0
   d750c:	8160      	strh	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d750e:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
   d7510:	1ca3      	adds	r3, r4, #2
   d7512:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d7516:	340a      	adds	r4, #10
        newAddr[i] = ROM_NO[i];
   d7518:	f813 2b01 	ldrb.w	r2, [r3], #1
   d751c:	f808 2f01 	strb.w	r2, [r8, #1]!
    for (int i = 0; i < 8; i++)
   d7520:	42a3      	cmp	r3, r4
   d7522:	d1f9      	bne.n	d7518 <_ZN7OneWire6searchEPh+0x20>
   d7524:	e004      	b.n	d7530 <_ZN7OneWire6searchEPh+0x38>
        if (!reset())
   d7526:	f7ff ff01 	bl	d732c <_ZN7OneWire5resetEv>
   d752a:	b918      	cbnz	r0, d7534 <_ZN7OneWire6searchEPh+0x3c>
            LastDiscrepancy = 0;
   d752c:	8160      	strh	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d752e:	7320      	strb	r0, [r4, #12]

    return search_result;
}
   d7530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        write(0xF0);
   d7534:	464a      	mov	r2, r9
   d7536:	21f0      	movs	r1, #240	; 0xf0
   d7538:	4620      	mov	r0, r4
   d753a:	f7ff ff8c 	bl	d7456 <_ZN7OneWire5writeEhh>
    rom_byte_mask = 1;
   d753e:	2601      	movs	r6, #1
    rom_byte_number = 0;
   d7540:	46ca      	mov	sl, r9
    id_bit_number = 1;
   d7542:	4635      	mov	r5, r6
            id_bit = read_bit();
   d7544:	4620      	mov	r0, r4
   d7546:	f7ff ff64 	bl	d7412 <_ZN7OneWire8read_bitEv>
   d754a:	4607      	mov	r7, r0
            cmp_id_bit = read_bit();
   d754c:	4620      	mov	r0, r4
   d754e:	f7ff ff60 	bl	d7412 <_ZN7OneWire8read_bitEv>
            if ((id_bit == 1) && (cmp_id_bit == 1))
   d7552:	2f01      	cmp	r7, #1
   d7554:	d10f      	bne.n	d7576 <_ZN7OneWire6searchEPh+0x7e>
   d7556:	2801      	cmp	r0, #1
   d7558:	d127      	bne.n	d75aa <_ZN7OneWire6searchEPh+0xb2>
        if (!(id_bit_number < 65))
   d755a:	2d40      	cmp	r5, #64	; 0x40
   d755c:	d9d5      	bls.n	d750a <_ZN7OneWire6searchEPh+0x12>
            LastDiscrepancy = last_zero;
   d755e:	f884 900a 	strb.w	r9, [r4, #10]
            if (LastDiscrepancy == 0)
   d7562:	f1b9 0f00 	cmp.w	r9, #0
   d7566:	d101      	bne.n	d756c <_ZN7OneWire6searchEPh+0x74>
                LastDeviceFlag = TRUE;
   d7568:	2301      	movs	r3, #1
   d756a:	7323      	strb	r3, [r4, #12]
    if (!search_result || !ROM_NO[0])
   d756c:	78a3      	ldrb	r3, [r4, #2]
   d756e:	2b00      	cmp	r3, #0
   d7570:	d0cb      	beq.n	d750a <_ZN7OneWire6searchEPh+0x12>
            search_result = TRUE;
   d7572:	2001      	movs	r0, #1
   d7574:	e7cc      	b.n	d7510 <_ZN7OneWire6searchEPh+0x18>
                if (id_bit != cmp_id_bit)
   d7576:	4287      	cmp	r7, r0
   d7578:	eb04 030a 	add.w	r3, r4, sl
   d757c:	d10c      	bne.n	d7598 <_ZN7OneWire6searchEPh+0xa0>
                    if (id_bit_number < LastDiscrepancy)
   d757e:	7aa2      	ldrb	r2, [r4, #10]
   d7580:	42aa      	cmp	r2, r5
   d7582:	d90e      	bls.n	d75a2 <_ZN7OneWire6searchEPh+0xaa>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d7584:	789a      	ldrb	r2, [r3, #2]
   d7586:	4216      	tst	r6, r2
   d7588:	bf14      	ite	ne
   d758a:	2701      	movne	r7, #1
   d758c:	2700      	moveq	r7, #0
                    if (search_direction == 0)
   d758e:	b967      	cbnz	r7, d75aa <_ZN7OneWire6searchEPh+0xb2>
                        if (last_zero < 9)
   d7590:	2d08      	cmp	r5, #8
   d7592:	d800      	bhi.n	d7596 <_ZN7OneWire6searchEPh+0x9e>
                            LastFamilyDiscrepancy = last_zero;
   d7594:	72e5      	strb	r5, [r4, #11]
                if (search_direction == 1)
   d7596:	46a9      	mov	r9, r5
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d7598:	789a      	ldrb	r2, [r3, #2]
   d759a:	ea22 0206 	bic.w	r2, r2, r6
   d759e:	709a      	strb	r2, [r3, #2]
   d75a0:	e009      	b.n	d75b6 <_ZN7OneWire6searchEPh+0xbe>
                        search_direction = (id_bit_number == LastDiscrepancy);
   d75a2:	bf0c      	ite	eq
   d75a4:	2701      	moveq	r7, #1
   d75a6:	2700      	movne	r7, #0
   d75a8:	e7f1      	b.n	d758e <_ZN7OneWire6searchEPh+0x96>
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
   d75aa:	eb04 020a 	add.w	r2, r4, sl
   d75ae:	2701      	movs	r7, #1
   d75b0:	7893      	ldrb	r3, [r2, #2]
   d75b2:	4333      	orrs	r3, r6
   d75b4:	7093      	strb	r3, [r2, #2]
                write_bit(search_direction);
   d75b6:	4639      	mov	r1, r7
   d75b8:	4620      	mov	r0, r4
                rom_byte_mask <<= 1;
   d75ba:	0076      	lsls	r6, r6, #1
                write_bit(search_direction);
   d75bc:	f7ff fef5 	bl	d73aa <_ZN7OneWire9write_bitEh>
                if (rom_byte_mask == 0)
   d75c0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                    rom_byte_number++;
   d75c4:	bf04      	itt	eq
   d75c6:	f10a 0a01 	addeq.w	sl, sl, #1
   d75ca:	fa5f fa8a 	uxtbeq.w	sl, sl
                id_bit_number++;
   d75ce:	f105 0501 	add.w	r5, r5, #1
                    rom_byte_mask = 1;
   d75d2:	bf08      	it	eq
   d75d4:	2601      	moveq	r6, #1
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d75d6:	f1ba 0f07 	cmp.w	sl, #7
                id_bit_number++;
   d75da:	b2ed      	uxtb	r5, r5
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d75dc:	d9b2      	bls.n	d7544 <_ZN7OneWire6searchEPh+0x4c>
   d75de:	e7bc      	b.n	d755a <_ZN7OneWire6searchEPh+0x62>

000d75e0 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8(uint8_t *addr, uint8_t len)
{
   d75e0:	b530      	push	{r4, r5, lr}
   d75e2:	4602      	mov	r2, r0
    uint8_t crc = 0;
   d75e4:	4401      	add	r1, r0
   d75e6:	2000      	movs	r0, #0

    while (len--)
   d75e8:	428a      	cmp	r2, r1
   d75ea:	d013      	beq.n	d7614 <_ZN7OneWire4crc8EPhh+0x34>
    {
        uint8_t inbyte = *addr++;
   d75ec:	f812 5b01 	ldrb.w	r5, [r2], #1
   d75f0:	2408      	movs	r4, #8
        for (uint8_t i = 8; i; i--)
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d75f2:	ea80 0305 	eor.w	r3, r0, r5
            crc >>= 1;
            if (mix)
   d75f6:	f013 0f01 	tst.w	r3, #1
   d75fa:	ea4f 0050 	mov.w	r0, r0, lsr #1
                crc ^= 0x8C;
   d75fe:	bf1c      	itt	ne
   d7600:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d7604:	b2d8      	uxtbne	r0, r3
            inbyte >>= 1;
   d7606:	1e63      	subs	r3, r4, #1
        for (uint8_t i = 8; i; i--)
   d7608:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
            inbyte >>= 1;
   d760c:	ea4f 0555 	mov.w	r5, r5, lsr #1
        for (uint8_t i = 8; i; i--)
   d7610:	d1ef      	bne.n	d75f2 <_ZN7OneWire4crc8EPhh+0x12>
   d7612:	e7e9      	b.n	d75e8 <_ZN7OneWire4crc8EPhh+0x8>
        }
    }

    return crc;
}
   d7614:	bd30      	pop	{r4, r5, pc}

000d7616 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d7616:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d7618:	4603      	mov	r3, r0
	switch (__op)
   d761a:	d102      	bne.n	d7622 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d761c:	6001      	str	r1, [r0, #0]
      }
   d761e:	2000      	movs	r0, #0
   d7620:	4770      	bx	lr
	  switch (__op)
   d7622:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7624:	bf04      	itt	eq
   d7626:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d762a:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d762e:	e7f6      	b.n	d761e <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d7630 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7630:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d7632:	6842      	ldr	r2, [r0, #4]
   d7634:	4603      	mov	r3, r0
   d7636:	1054      	asrs	r4, r2, #1
   d7638:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d763c:	07d2      	lsls	r2, r2, #31
   d763e:	bf48      	it	mi
   d7640:	590a      	ldrmi	r2, [r1, r4]
   d7642:	681b      	ldr	r3, [r3, #0]
      }
   d7644:	f85d 4b04 	ldr.w	r4, [sp], #4
   d7648:	bf48      	it	mi
   d764a:	58d3      	ldrmi	r3, [r2, r3]
   d764c:	4718      	bx	r3
	...

000d7650 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d7650:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d7652:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d7654:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d7658:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d765a:	3008      	adds	r0, #8
   d765c:	f000 fad8 	bl	d7c10 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d7660:	2004      	movs	r0, #4
   d7662:	f7fc fd18 	bl	d4096 <_Znwj>
   d7666:	4605      	mov	r5, r0
   d7668:	b398      	cbz	r0, d76d2 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d766a:	491b      	ldr	r1, [pc, #108]	; (d76d8 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d766c:	2014      	movs	r0, #20
   d766e:	f002 fb84 	bl	d9d7a <_ZnwjRKSt9nothrow_t>
   d7672:	b130      	cbz	r0, d7682 <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7674:	2300      	movs	r3, #0
            exited(false) {
   d7676:	e9c0 3300 	strd	r3, r3, [r0]
   d767a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d767e:	7403      	strb	r3, [r0, #16]
   d7680:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d7682:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d7684:	b1a0      	cbz	r0, d76b0 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d7686:	4b15      	ldr	r3, [pc, #84]	; (d76dc <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7688:	4915      	ldr	r1, [pc, #84]	; (d76e0 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d768a:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d768e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d7692:	e9cd 0300 	strd	r0, r3, [sp]
   d7696:	2202      	movs	r2, #2
   d7698:	4b12      	ldr	r3, [pc, #72]	; (d76e4 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d769a:	3004      	adds	r0, #4
   d769c:	f000 faa0 	bl	d7be0 <os_thread_create>
   d76a0:	b930      	cbnz	r0, d76b0 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d76a2:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d76a4:	7c1b      	ldrb	r3, [r3, #16]
   d76a6:	b9a3      	cbnz	r3, d76d2 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d76a8:	2001      	movs	r0, #1
   d76aa:	f000 faf9 	bl	d7ca0 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d76ae:	e7f8      	b.n	d76a2 <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d76b0:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d76b2:	2300      	movs	r3, #0
   d76b4:	602b      	str	r3, [r5, #0]
	if (__p != pointer())
   d76b6:	b164      	cbz	r4, d76d2 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d76b8:	6827      	ldr	r7, [r4, #0]
   d76ba:	b137      	cbz	r7, d76ca <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d76bc:	4638      	mov	r0, r7
   d76be:	f7fe f939 	bl	d5934 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d76c2:	2110      	movs	r1, #16
   d76c4:	4638      	mov	r0, r7
   d76c6:	f002 fb56 	bl	d9d76 <_ZdlPvj>
   d76ca:	2114      	movs	r1, #20
   d76cc:	4620      	mov	r0, r4
   d76ce:	f002 fb52 	bl	d9d76 <_ZdlPvj>
   d76d2:	6075      	str	r5, [r6, #4]
}
   d76d4:	b003      	add	sp, #12
   d76d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d76d8:	000db390 	.word	0x000db390
   d76dc:	000d78ef 	.word	0x000d78ef
   d76e0:	000db0c4 	.word	0x000db0c4
   d76e4:	000d5895 	.word	0x000d5895

000d76e8 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d76e8:	f247 5130 	movw	r1, #30000	; 0x7530
   d76ec:	4a08      	ldr	r2, [pc, #32]	; (d7710 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d76ee:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d76f0:	4908      	ldr	r1, [pc, #32]	; (d7714 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d76f2:	6002      	str	r2, [r0, #0]
   d76f4:	2200      	movs	r2, #0
   d76f6:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d76fa:	4907      	ldr	r1, [pc, #28]	; (d7718 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d76fc:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d76fe:	4907      	ldr	r1, [pc, #28]	; (d771c <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d7700:	6042      	str	r2, [r0, #4]
   d7702:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d7706:	6181      	str	r1, [r0, #24]
   d7708:	8502      	strh	r2, [r0, #40]	; 0x28
   d770a:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d770e:	4770      	bx	lr
   d7710:	000db188 	.word	0x000db188
   d7714:	000d7a59 	.word	0x000d7a59
   d7718:	000d7631 	.word	0x000d7631
   d771c:	000d7617 	.word	0x000d7617

000d7720 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d7720:	b510      	push	{r4, lr}
   d7722:	4b04      	ldr	r3, [pc, #16]	; (d7734 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d7724:	4604      	mov	r4, r0
   d7726:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d772a:	f7fe f903 	bl	d5934 <_ZNSt14_Function_baseD1Ev>
}
   d772e:	4620      	mov	r0, r4
   d7730:	bd10      	pop	{r4, pc}
   d7732:	bf00      	nop
   d7734:	000db188 	.word	0x000db188

000d7738 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7738:	b510      	push	{r4, lr}
   d773a:	4b03      	ldr	r3, [pc, #12]	; (d7748 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d773c:	6003      	str	r3, [r0, #0]
   d773e:	4604      	mov	r4, r0
   d7740:	f7ff ffee 	bl	d7720 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d7744:	4620      	mov	r0, r4
   d7746:	bd10      	pop	{r4, pc}
   d7748:	000db1b0 	.word	0x000db1b0

000d774c <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d774c:	b510      	push	{r4, lr}
   d774e:	4604      	mov	r4, r0
}
   d7750:	f7ff fff2 	bl	d7738 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d7754:	4620      	mov	r0, r4
   d7756:	2138      	movs	r1, #56	; 0x38
   d7758:	f002 fb0d 	bl	d9d76 <_ZdlPvj>
   d775c:	4620      	mov	r0, r4
   d775e:	bd10      	pop	{r4, pc}

000d7760 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d7760:	6880      	ldr	r0, [r0, #8]
   d7762:	f000 ba5d 	b.w	d7c20 <os_mutex_lock>

000d7766 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d7766:	6880      	ldr	r0, [r0, #8]
   d7768:	f000 ba62 	b.w	d7c30 <os_mutex_unlock>

000d776c <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d776c:	b510      	push	{r4, lr}
   d776e:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d7770:	6800      	ldr	r0, [r0, #0]
   d7772:	f7ff fff8 	bl	d7766 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d7776:	4620      	mov	r0, r4
   d7778:	bd10      	pop	{r4, pc}

000d777a <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d777a:	b513      	push	{r0, r1, r4, lr}
   d777c:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d777e:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7780:	f7ff ffee 	bl	d7760 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7784:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d7786:	88dc      	ldrh	r4, [r3, #6]
   d7788:	b2a4      	uxth	r4, r4
   d778a:	b10c      	cbz	r4, d7790 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d778c:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d7790:	a801      	add	r0, sp, #4
   d7792:	f7ff ffeb 	bl	d776c <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d7796:	4620      	mov	r0, r4
   d7798:	b002      	add	sp, #8
   d779a:	bd10      	pop	{r4, pc}

000d779c <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d779c:	b513      	push	{r0, r1, r4, lr}
   d779e:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d77a0:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d77a2:	f7ff ffdd 	bl	d7760 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d77a6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d77aa:	b943      	cbnz	r3, d77be <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d77ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d77ae:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d77b0:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d77b2:	a801      	add	r0, sp, #4
   d77b4:	f7ff ffda 	bl	d776c <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d77b8:	4620      	mov	r0, r4
   d77ba:	b002      	add	sp, #8
   d77bc:	bd10      	pop	{r4, pc}
	bool result = false;
   d77be:	2400      	movs	r4, #0
   d77c0:	e7f7      	b.n	d77b2 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d77c2 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d77c2:	b513      	push	{r0, r1, r4, lr}
   d77c4:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d77c6:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d77c8:	f7ff ffca 	bl	d7760 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d77cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d77ce:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d77d0:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d77d2:	f7ff ffcb 	bl	d776c <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d77d6:	4620      	mov	r0, r4
   d77d8:	b002      	add	sp, #8
   d77da:	bd10      	pop	{r4, pc}

000d77dc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d77dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d77e0:	4699      	mov	r9, r3
   d77e2:	b086      	sub	sp, #24
	if (!haveSetup) {
   d77e4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d77e8:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d77ec:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d77f0:	4604      	mov	r4, r0
   d77f2:	460f      	mov	r7, r1
   d77f4:	4616      	mov	r6, r2
	if (!haveSetup) {
   d77f6:	b913      	cbnz	r3, d77fe <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d77f8:	6803      	ldr	r3, [r0, #0]
   d77fa:	689b      	ldr	r3, [r3, #8]
   d77fc:	4798      	blx	r3
		data = "";
   d77fe:	4b31      	ldr	r3, [pc, #196]	; (d78c4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7800:	4638      	mov	r0, r7
		data = "";
   d7802:	2e00      	cmp	r6, #0
   d7804:	bf08      	it	eq
   d7806:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7808:	f003 f801 	bl	da80e <strlen>
   d780c:	4605      	mov	r5, r0
   d780e:	4630      	mov	r0, r6
   d7810:	f002 fffd 	bl	da80e <strlen>
   d7814:	4428      	add	r0, r5
   d7816:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d781a:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d781c:	bf1c      	itt	ne
   d781e:	f025 0503 	bicne.w	r5, r5, #3
   d7822:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d7824:	4633      	mov	r3, r6
   d7826:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d782a:	e9cd 9a00 	strd	r9, sl, [sp]
   d782e:	4926      	ldr	r1, [pc, #152]	; (d78c8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d7830:	4826      	ldr	r0, [pc, #152]	; (d78cc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d7832:	463a      	mov	r2, r7
   d7834:	f7fc fd2c 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d7838:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d783a:	3b08      	subs	r3, #8
   d783c:	42ab      	cmp	r3, r5
   d783e:	d212      	bcs.n	d7866 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d7840:	2400      	movs	r4, #0
}
   d7842:	4620      	mov	r0, r4
   d7844:	b006      	add	sp, #24
   d7846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d784a:	88cb      	ldrh	r3, [r1, #6]
   d784c:	2b01      	cmp	r3, #1
   d784e:	d036      	beq.n	d78be <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d7850:	a805      	add	r0, sp, #20
   d7852:	f7ff ff8b 	bl	d776c <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d7856:	6823      	ldr	r3, [r4, #0]
   d7858:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d785c:	699b      	ldr	r3, [r3, #24]
   d785e:	4620      	mov	r0, r4
   d7860:	4798      	blx	r3
   d7862:	2800      	cmp	r0, #0
   d7864:	d0ec      	beq.n	d7840 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d7866:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7868:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d786a:	f7ff ff79 	bl	d7760 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d786e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d7870:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d7872:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7874:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d7876:	1ad2      	subs	r2, r2, r3
   d7878:	42aa      	cmp	r2, r5
   d787a:	d3e6      	bcc.n	d784a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d787c:	ea48 080a 	orr.w	r8, r8, sl
   d7880:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d7884:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d7888:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d788a:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d788e:	4639      	mov	r1, r7
   d7890:	4640      	mov	r0, r8
   d7892:	f002 ff97 	bl	da7c4 <strcpy>
				cp += strlen(cp) + 1;
   d7896:	4640      	mov	r0, r8
   d7898:	f002 ffb9 	bl	da80e <strlen>
   d789c:	3001      	adds	r0, #1
				strcpy(cp, data);
   d789e:	4631      	mov	r1, r6
   d78a0:	4440      	add	r0, r8
   d78a2:	f002 ff8f 	bl	da7c4 <strcpy>
				nextFree += size;
   d78a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d78a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d78aa:	441d      	add	r5, r3
   d78ac:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d78ae:	88d3      	ldrh	r3, [r2, #6]
   d78b0:	3301      	adds	r3, #1
   d78b2:	80d3      	strh	r3, [r2, #6]
				return true;
   d78b4:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d78b6:	a805      	add	r0, sp, #20
   d78b8:	f7ff ff58 	bl	d776c <_ZN11StMutexLockD1Ev>
   d78bc:	e7c1      	b.n	d7842 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d78be:	2400      	movs	r4, #0
   d78c0:	e7f9      	b.n	d78b6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d78c2:	bf00      	nop
   d78c4:	000db3b0 	.word	0x000db3b0
   d78c8:	000db0d6 	.word	0x000db0d6
   d78cc:	2003e5e0 	.word	0x2003e5e0

000d78d0 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d78d0:	b508      	push	{r3, lr}
   d78d2:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d78d4:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d78d8:	69a3      	ldr	r3, [r4, #24]
   d78da:	b90b      	cbnz	r3, d78e0 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d78dc:	f002 fa51 	bl	d9d82 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d78e0:	69e3      	ldr	r3, [r4, #28]
   d78e2:	4621      	mov	r1, r4
   d78e4:	4628      	mov	r0, r5
   d78e6:	4798      	blx	r3
		os_thread_yield();
   d78e8:	f000 f982 	bl	d7bf0 <os_thread_yield>
	while(true) {
   d78ec:	e7f4      	b.n	d78d8 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d78ee <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d78ee:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d78f0:	f7ff ffee 	bl	d78d0 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d78f4 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d78f4:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d78f6:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d78fa:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d78fc:	4628      	mov	r0, r5
   d78fe:	f002 ff86 	bl	da80e <strlen>
   d7902:	3001      	adds	r0, #1
   d7904:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7906:	4628      	mov	r0, r5
   d7908:	f002 ff81 	bl	da80e <strlen>
	size_t offset = start - retainedBuffer;
   d790c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d790e:	3001      	adds	r0, #1
   d7910:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d7912:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d7914:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d7918:	bf1c      	itt	ne
   d791a:	f1c3 0304 	rsbne	r3, r3, #4
   d791e:	18c0      	addne	r0, r0, r3
}
   d7920:	bd68      	pop	{r3, r5, r6, pc}

000d7922 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d7922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7924:	4604      	mov	r4, r0
   d7926:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7928:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d792a:	f7ff ff19 	bl	d7760 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d792e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7930:	88fb      	ldrh	r3, [r7, #6]
   d7932:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d7936:	b1e6      	cbz	r6, d7972 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d7938:	2b01      	cmp	r3, #1
   d793a:	d922      	bls.n	d7982 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d793c:	4629      	mov	r1, r5
   d793e:	4620      	mov	r0, r4
   d7940:	f7ff ffd8 	bl	d78f4 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d7944:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d7946:	4629      	mov	r1, r5
   d7948:	4620      	mov	r0, r4
   d794a:	f7ff ffd3 	bl	d78f4 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d794e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d7950:	443a      	add	r2, r7
	if (after > 0) {
   d7952:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d7954:	4601      	mov	r1, r0
	size_t len = next - start;
   d7956:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d795a:	d002      	beq.n	d7962 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d795c:	4628      	mov	r0, r5
   d795e:	f002 fee1 	bl	da724 <memmove>
	nextFree -= len;
   d7962:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d7964:	1b9b      	subs	r3, r3, r6
   d7966:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d7968:	88fb      	ldrh	r3, [r7, #6]
   d796a:	3b01      	subs	r3, #1
   d796c:	80fb      	strh	r3, [r7, #6]
	return true;
   d796e:	2601      	movs	r6, #1
   d7970:	e001      	b.n	d7976 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d7972:	2b00      	cmp	r3, #0
   d7974:	d1e7      	bne.n	d7946 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d7976:	a801      	add	r0, sp, #4
   d7978:	f7ff fef8 	bl	d776c <_ZN11StMutexLockD1Ev>
}
   d797c:	4630      	mov	r0, r6
   d797e:	b003      	add	sp, #12
   d7980:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d7982:	2600      	movs	r6, #0
   d7984:	e7f7      	b.n	d7976 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d7988 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d7988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d798c:	460d      	mov	r5, r1
   d798e:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7990:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d7992:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7994:	f7ff fea8 	bl	d76e8 <_ZN21PublishQueueAsyncBaseC1Ev>
   d7998:	4b15      	ldr	r3, [pc, #84]	; (d79f0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d799a:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d799e:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d79a0:	4b14      	ldr	r3, [pc, #80]	; (d79f4 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d79a2:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d79a4:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d79a6:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d79a8:	4698      	mov	r8, r3
   d79aa:	d117      	bne.n	d79dc <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d79ac:	88ab      	ldrh	r3, [r5, #4]
   d79ae:	b29b      	uxth	r3, r3
   d79b0:	42b3      	cmp	r3, r6
   d79b2:	d113      	bne.n	d79dc <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d79b4:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d79b8:	6367      	str	r7, [r4, #52]	; 0x34
   d79ba:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d79be:	88eb      	ldrh	r3, [r5, #6]
   d79c0:	fa1f f289 	uxth.w	r2, r9
   d79c4:	b29b      	uxth	r3, r3
   d79c6:	429a      	cmp	r2, r3
   d79c8:	d20e      	bcs.n	d79e8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d79ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d79cc:	4620      	mov	r0, r4
   d79ce:	f7ff ff91 	bl	d78f4 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d79d2:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d79d4:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d79d6:	f109 0901 	add.w	r9, r9, #1
   d79da:	d9f0      	bls.n	d79be <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d79dc:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d79de:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d79e2:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d79e4:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d79e6:	80eb      	strh	r3, [r5, #6]
}
   d79e8:	4620      	mov	r0, r4
   d79ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d79ee:	bf00      	nop
   d79f0:	000db1b0 	.word	0x000db1b0
   d79f4:	d19cab61 	.word	0xd19cab61

000d79f8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d79f8:	b510      	push	{r4, lr}
   d79fa:	e9d1 2300 	ldrd	r2, r3, [r1]
   d79fe:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d7a00:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d7a02:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d7a04:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d7a06:	b90a      	cbnz	r2, d7a0c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d7a08:	07d9      	lsls	r1, r3, #31
   d7a0a:	d505      	bpl.n	d7a18 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7a0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d7a10:	4b0f      	ldr	r3, [pc, #60]	; (d7a50 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d7a12:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d7a14:	4b0f      	ldr	r3, [pc, #60]	; (d7a54 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d7a16:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7a18:	ab02      	add	r3, sp, #8
   d7a1a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7a1e:	466a      	mov	r2, sp
   d7a20:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7a24:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7a28:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7a2c:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7a30:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a32:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7a36:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a38:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7a3a:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7a3c:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d7a3e:	4618      	mov	r0, r3
   d7a40:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a42:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7a44:	9105      	str	r1, [sp, #20]
   d7a46:	f7fd ff75 	bl	d5934 <_ZNSt14_Function_baseD1Ev>
	}
   d7a4a:	4620      	mov	r0, r4
   d7a4c:	b006      	add	sp, #24
   d7a4e:	bd10      	pop	{r4, pc}
   d7a50:	000d7631 	.word	0x000d7631
   d7a54:	000d7617 	.word	0x000d7617

000d7a58 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d7a58:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7a5a:	4b05      	ldr	r3, [pc, #20]	; (d7a70 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d7a5c:	9300      	str	r3, [sp, #0]
   d7a5e:	4669      	mov	r1, sp
   d7a60:	2300      	movs	r3, #0
   d7a62:	3010      	adds	r0, #16
   d7a64:	9301      	str	r3, [sp, #4]
   d7a66:	f7ff ffc7 	bl	d79f8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7a6a:	b003      	add	sp, #12
   d7a6c:	f85d fb04 	ldr.w	pc, [sp], #4
   d7a70:	000d7aa1 	.word	0x000d7aa1

000d7a74 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d7a74:	b513      	push	{r0, r1, r4, lr}
   d7a76:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7a78:	f000 f922 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d7a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7a7e:	1ac0      	subs	r0, r0, r3
   d7a80:	68e3      	ldr	r3, [r4, #12]
   d7a82:	4298      	cmp	r0, r3
   d7a84:	d308      	bcc.n	d7a98 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7a86:	4b05      	ldr	r3, [pc, #20]	; (d7a9c <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d7a88:	9300      	str	r3, [sp, #0]
   d7a8a:	4669      	mov	r1, sp
   d7a8c:	2300      	movs	r3, #0
   d7a8e:	f104 0010 	add.w	r0, r4, #16
   d7a92:	9301      	str	r3, [sp, #4]
   d7a94:	f7ff ffb0 	bl	d79f8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7a98:	b002      	add	sp, #8
   d7a9a:	bd10      	pop	{r4, pc}
   d7a9c:	000d7aa1 	.word	0x000d7aa1

000d7aa0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d7aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7aa4:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d7aa8:	b086      	sub	sp, #24
   d7aaa:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7aac:	2b00      	cmp	r3, #0
   d7aae:	d164      	bne.n	d7b7a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7ab0:	f000 fb58 	bl	d8164 <spark_cloud_flag_connected>
   d7ab4:	2800      	cmp	r0, #0
   d7ab6:	d060      	beq.n	d7b7a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d7ab8:	f000 f902 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
   d7abc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7abe:	1ac0      	subs	r0, r0, r3
   d7ac0:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d7ac4:	4298      	cmp	r0, r3
   d7ac6:	d958      	bls.n	d7b7a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d7ac8:	6823      	ldr	r3, [r4, #0]
   d7aca:	4620      	mov	r0, r4
   d7acc:	695b      	ldr	r3, [r3, #20]
   d7ace:	4798      	blx	r3
		if (data) {
   d7ad0:	4605      	mov	r5, r0
   d7ad2:	2800      	cmp	r0, #0
   d7ad4:	d051      	beq.n	d7b7a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d7ad6:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d7ada:	2301      	movs	r3, #1
   d7adc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d7ae0:	4638      	mov	r0, r7
   d7ae2:	f002 fe94 	bl	da80e <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d7ae6:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7aea:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d7aee:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7af0:	682b      	ldr	r3, [r5, #0]
   d7af2:	492b      	ldr	r1, [pc, #172]	; (d7ba0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d7af4:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d7af6:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7af8:	4633      	mov	r3, r6
   d7afa:	482a      	ldr	r0, [pc, #168]	; (d7ba4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7afc:	463a      	mov	r2, r7
   d7afe:	f7fc fbc7 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d7b02:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d7b04:	f88d 8000 	strb.w	r8, [sp]
   d7b08:	4632      	mov	r2, r6
   d7b0a:	4639      	mov	r1, r7
   d7b0c:	a802      	add	r0, sp, #8
   d7b0e:	f000 fee9 	bl	d88e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d7b12:	9d02      	ldr	r5, [sp, #8]
   d7b14:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d7b16:	b91b      	cbnz	r3, d7b20 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d7b18:	2001      	movs	r0, #1
   d7b1a:	f000 fc23 	bl	d8364 <delay>
			while(!request.isDone()) {
   d7b1e:	e7f8      	b.n	d7b12 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7b20:	2000      	movs	r0, #0
   d7b22:	f000 fab7 	bl	d8094 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7b26:	b120      	cbz	r0, d7b32 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d7b28:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d7b2a:	b913      	cbnz	r3, d7b32 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d7b2c:	f000 fb0a 	bl	d8144 <spark_process>
    }
   d7b30:	e7fa      	b.n	d7b28 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d7b32:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d7b34:	2b01      	cmp	r3, #1
   d7b36:	d123      	bne.n	d7b80 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d7b38:	491b      	ldr	r1, [pc, #108]	; (d7ba8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d7b3a:	481a      	ldr	r0, [pc, #104]	; (d7ba4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7b3c:	f7fc fba8 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d7b40:	6823      	ldr	r3, [r4, #0]
   d7b42:	2100      	movs	r1, #0
   d7b44:	699b      	ldr	r3, [r3, #24]
   d7b46:	4620      	mov	r0, r4
   d7b48:	4798      	blx	r3
			isSending = false;
   d7b4a:	2300      	movs	r3, #0
   d7b4c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d7b50:	f000 f8b6 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d7b54:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d7b56:	9c03      	ldr	r4, [sp, #12]
   d7b58:	b17c      	cbz	r4, d7b7a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d7b5a:	6863      	ldr	r3, [r4, #4]
   d7b5c:	3b01      	subs	r3, #1
   d7b5e:	6063      	str	r3, [r4, #4]
   d7b60:	b95b      	cbnz	r3, d7b7a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d7b62:	6823      	ldr	r3, [r4, #0]
   d7b64:	4620      	mov	r0, r4
   d7b66:	689b      	ldr	r3, [r3, #8]
   d7b68:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7b6a:	68a3      	ldr	r3, [r4, #8]
   d7b6c:	3b01      	subs	r3, #1
   d7b6e:	60a3      	str	r3, [r4, #8]
   d7b70:	b91b      	cbnz	r3, d7b7a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d7b72:	6823      	ldr	r3, [r4, #0]
   d7b74:	4620      	mov	r0, r4
   d7b76:	68db      	ldr	r3, [r3, #12]
   d7b78:	4798      	blx	r3
}
   d7b7a:	b006      	add	sp, #24
   d7b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d7b80:	68e2      	ldr	r2, [r4, #12]
   d7b82:	490a      	ldr	r1, [pc, #40]	; (d7bac <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d7b84:	4807      	ldr	r0, [pc, #28]	; (d7ba4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7b86:	f7fc fb83 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d7b8a:	4b09      	ldr	r3, [pc, #36]	; (d7bb0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d7b8c:	9304      	str	r3, [sp, #16]
   d7b8e:	a904      	add	r1, sp, #16
   d7b90:	2300      	movs	r3, #0
   d7b92:	f104 0010 	add.w	r0, r4, #16
   d7b96:	9305      	str	r3, [sp, #20]
   d7b98:	f7ff ff2e 	bl	d79f8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d7b9c:	e7d5      	b.n	d7b4a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d7b9e:	bf00      	nop
   d7ba0:	000db117 	.word	0x000db117
   d7ba4:	2003e5e0 	.word	0x2003e5e0
   d7ba8:	000db138 	.word	0x000db138
   d7bac:	000db14f 	.word	0x000db14f
   d7bb0:	000d7a75 	.word	0x000d7a75

000d7bb4 <_GLOBAL__sub_I_pubqLogger>:
   d7bb4:	4b01      	ldr	r3, [pc, #4]	; (d7bbc <_GLOBAL__sub_I_pubqLogger+0x8>)
   d7bb6:	4a02      	ldr	r2, [pc, #8]	; (d7bc0 <_GLOBAL__sub_I_pubqLogger+0xc>)
   d7bb8:	601a      	str	r2, [r3, #0]
}
   d7bba:	4770      	bx	lr
   d7bbc:	2003e5e0 	.word	0x2003e5e0
   d7bc0:	000db176 	.word	0x000db176

000d7bc4 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
   d7bc4:	4b01      	ldr	r3, [pc, #4]	; (d7bcc <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0x8>)
   d7bc6:	2201      	movs	r2, #1
   d7bc8:	701a      	strb	r2, [r3, #0]
	if (numAdded == 0) {
		requestBuf[0] = 0;
	}

	return requestBuf;
}
   d7bca:	4770      	bx	lr
   d7bcc:	2003e5e4 	.word	0x2003e5e4

000d7bd0 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7bd0:	b508      	push	{r3, lr}
   d7bd2:	4b02      	ldr	r3, [pc, #8]	; (d7bdc <cellular_signal+0xc>)
   d7bd4:	681b      	ldr	r3, [r3, #0]
   d7bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7bd8:	9301      	str	r3, [sp, #4]
   d7bda:	bd08      	pop	{r3, pc}
   d7bdc:	00030274 	.word	0x00030274

000d7be0 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d7be0:	b508      	push	{r3, lr}
   d7be2:	4b02      	ldr	r3, [pc, #8]	; (d7bec <os_thread_create+0xc>)
   d7be4:	681b      	ldr	r3, [r3, #0]
   d7be6:	685b      	ldr	r3, [r3, #4]
   d7be8:	9301      	str	r3, [sp, #4]
   d7bea:	bd08      	pop	{r3, pc}
   d7bec:	00030248 	.word	0x00030248

000d7bf0 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7bf0:	b508      	push	{r3, lr}
   d7bf2:	4b02      	ldr	r3, [pc, #8]	; (d7bfc <os_thread_yield+0xc>)
   d7bf4:	681b      	ldr	r3, [r3, #0]
   d7bf6:	68db      	ldr	r3, [r3, #12]
   d7bf8:	9301      	str	r3, [sp, #4]
   d7bfa:	bd08      	pop	{r3, pc}
   d7bfc:	00030248 	.word	0x00030248

000d7c00 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7c00:	b508      	push	{r3, lr}
   d7c02:	4b02      	ldr	r3, [pc, #8]	; (d7c0c <os_thread_scheduling+0xc>)
   d7c04:	681b      	ldr	r3, [r3, #0]
   d7c06:	69db      	ldr	r3, [r3, #28]
   d7c08:	9301      	str	r3, [sp, #4]
   d7c0a:	bd08      	pop	{r3, pc}
   d7c0c:	00030248 	.word	0x00030248

000d7c10 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7c10:	b508      	push	{r3, lr}
   d7c12:	4b02      	ldr	r3, [pc, #8]	; (d7c1c <os_mutex_create+0xc>)
   d7c14:	681b      	ldr	r3, [r3, #0]
   d7c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7c18:	9301      	str	r3, [sp, #4]
   d7c1a:	bd08      	pop	{r3, pc}
   d7c1c:	00030248 	.word	0x00030248

000d7c20 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d7c20:	b508      	push	{r3, lr}
   d7c22:	4b02      	ldr	r3, [pc, #8]	; (d7c2c <os_mutex_lock+0xc>)
   d7c24:	681b      	ldr	r3, [r3, #0]
   d7c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7c28:	9301      	str	r3, [sp, #4]
   d7c2a:	bd08      	pop	{r3, pc}
   d7c2c:	00030248 	.word	0x00030248

000d7c30 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d7c30:	b508      	push	{r3, lr}
   d7c32:	4b02      	ldr	r3, [pc, #8]	; (d7c3c <os_mutex_unlock+0xc>)
   d7c34:	681b      	ldr	r3, [r3, #0]
   d7c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7c38:	9301      	str	r3, [sp, #4]
   d7c3a:	bd08      	pop	{r3, pc}
   d7c3c:	00030248 	.word	0x00030248

000d7c40 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7c40:	b508      	push	{r3, lr}
   d7c42:	4b02      	ldr	r3, [pc, #8]	; (d7c4c <os_mutex_recursive_create+0xc>)
   d7c44:	681b      	ldr	r3, [r3, #0]
   d7c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7c48:	9301      	str	r3, [sp, #4]
   d7c4a:	bd08      	pop	{r3, pc}
   d7c4c:	00030248 	.word	0x00030248

000d7c50 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7c50:	b508      	push	{r3, lr}
   d7c52:	4b02      	ldr	r3, [pc, #8]	; (d7c5c <os_mutex_recursive_destroy+0xc>)
   d7c54:	681b      	ldr	r3, [r3, #0]
   d7c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7c58:	9301      	str	r3, [sp, #4]
   d7c5a:	bd08      	pop	{r3, pc}
   d7c5c:	00030248 	.word	0x00030248

000d7c60 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d7c60:	b508      	push	{r3, lr}
   d7c62:	4b02      	ldr	r3, [pc, #8]	; (d7c6c <os_thread_exit+0xc>)
   d7c64:	681b      	ldr	r3, [r3, #0]
   d7c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7c68:	9301      	str	r3, [sp, #4]
   d7c6a:	bd08      	pop	{r3, pc}
   d7c6c:	00030248 	.word	0x00030248

000d7c70 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d7c70:	b508      	push	{r3, lr}
   d7c72:	4b02      	ldr	r3, [pc, #8]	; (d7c7c <HAL_Feature_Set+0xc>)
   d7c74:	681b      	ldr	r3, [r3, #0]
   d7c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7c78:	9301      	str	r3, [sp, #4]
   d7c7a:	bd08      	pop	{r3, pc}
   d7c7c:	00030234 	.word	0x00030234

000d7c80 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d7c80:	b508      	push	{r3, lr}
   d7c82:	4b02      	ldr	r3, [pc, #8]	; (d7c8c <HAL_Core_Get_Last_Reset_Info+0xc>)
   d7c84:	681b      	ldr	r3, [r3, #0]
   d7c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7c88:	9301      	str	r3, [sp, #4]
   d7c8a:	bd08      	pop	{r3, pc}
   d7c8c:	00030234 	.word	0x00030234

000d7c90 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7c90:	b508      	push	{r3, lr}
   d7c92:	4b02      	ldr	r3, [pc, #8]	; (d7c9c <HAL_RNG_GetRandomNumber+0xc>)
   d7c94:	681b      	ldr	r3, [r3, #0]
   d7c96:	685b      	ldr	r3, [r3, #4]
   d7c98:	9301      	str	r3, [sp, #4]
   d7c9a:	bd08      	pop	{r3, pc}
   d7c9c:	00030218 	.word	0x00030218

000d7ca0 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d7ca0:	b508      	push	{r3, lr}
   d7ca2:	4b02      	ldr	r3, [pc, #8]	; (d7cac <HAL_Delay_Milliseconds+0xc>)
   d7ca4:	681b      	ldr	r3, [r3, #0]
   d7ca6:	689b      	ldr	r3, [r3, #8]
   d7ca8:	9301      	str	r3, [sp, #4]
   d7caa:	bd08      	pop	{r3, pc}
   d7cac:	00030218 	.word	0x00030218

000d7cb0 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7cb0:	b508      	push	{r3, lr}
   d7cb2:	4b02      	ldr	r3, [pc, #8]	; (d7cbc <HAL_Delay_Microseconds+0xc>)
   d7cb4:	681b      	ldr	r3, [r3, #0]
   d7cb6:	68db      	ldr	r3, [r3, #12]
   d7cb8:	9301      	str	r3, [sp, #4]
   d7cba:	bd08      	pop	{r3, pc}
   d7cbc:	00030218 	.word	0x00030218

000d7cc0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7cc0:	b508      	push	{r3, lr}
   d7cc2:	4b02      	ldr	r3, [pc, #8]	; (d7ccc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7cc4:	681b      	ldr	r3, [r3, #0]
   d7cc6:	695b      	ldr	r3, [r3, #20]
   d7cc8:	9301      	str	r3, [sp, #4]
   d7cca:	bd08      	pop	{r3, pc}
   d7ccc:	00030218 	.word	0x00030218

000d7cd0 <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
   d7cd0:	b508      	push	{r3, lr}
   d7cd2:	4b02      	ldr	r3, [pc, #8]	; (d7cdc <HAL_disable_irq+0xc>)
   d7cd4:	681b      	ldr	r3, [r3, #0]
   d7cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7cd8:	9301      	str	r3, [sp, #4]
   d7cda:	bd08      	pop	{r3, pc}
   d7cdc:	00030218 	.word	0x00030218

000d7ce0 <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
   d7ce0:	b508      	push	{r3, lr}
   d7ce2:	4b02      	ldr	r3, [pc, #8]	; (d7cec <HAL_enable_irq+0xc>)
   d7ce4:	681b      	ldr	r3, [r3, #0]
   d7ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7ce8:	9301      	str	r3, [sp, #4]
   d7cea:	bd08      	pop	{r3, pc}
   d7cec:	00030218 	.word	0x00030218

000d7cf0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7cf0:	b508      	push	{r3, lr}
   d7cf2:	4b02      	ldr	r3, [pc, #8]	; (d7cfc <hal_rtc_time_is_valid+0xc>)
   d7cf4:	681b      	ldr	r3, [r3, #0]
   d7cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7cf8:	9301      	str	r3, [sp, #4]
   d7cfa:	bd08      	pop	{r3, pc}
   d7cfc:	00030218 	.word	0x00030218

000d7d00 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d7d00:	b508      	push	{r3, lr}
   d7d02:	4b02      	ldr	r3, [pc, #8]	; (d7d0c <hal_timer_millis+0xc>)
   d7d04:	681b      	ldr	r3, [r3, #0]
   d7d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7d08:	9301      	str	r3, [sp, #4]
   d7d0a:	bd08      	pop	{r3, pc}
   d7d0c:	00030218 	.word	0x00030218

000d7d10 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7d10:	b508      	push	{r3, lr}
   d7d12:	4b02      	ldr	r3, [pc, #8]	; (d7d1c <hal_rtc_get_time+0xc>)
   d7d14:	681b      	ldr	r3, [r3, #0]
   d7d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7d18:	9301      	str	r3, [sp, #4]
   d7d1a:	bd08      	pop	{r3, pc}
   d7d1c:	00030218 	.word	0x00030218

000d7d20 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d7d20:	b508      	push	{r3, lr}
   d7d22:	4b02      	ldr	r3, [pc, #8]	; (d7d2c <hal_rtc_set_time+0xc>)
   d7d24:	681b      	ldr	r3, [r3, #0]
   d7d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d7d28:	9301      	str	r3, [sp, #4]
   d7d2a:	bd08      	pop	{r3, pc}
   d7d2c:	00030218 	.word	0x00030218

000d7d30 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d7d30:	b508      	push	{r3, lr}
   d7d32:	4b02      	ldr	r3, [pc, #8]	; (d7d3c <HAL_Pin_Map+0xc>)
   d7d34:	681b      	ldr	r3, [r3, #0]
   d7d36:	681b      	ldr	r3, [r3, #0]
   d7d38:	9301      	str	r3, [sp, #4]
   d7d3a:	bd08      	pop	{r3, pc}
   d7d3c:	0003022c 	.word	0x0003022c

000d7d40 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7d40:	b508      	push	{r3, lr}
   d7d42:	4b02      	ldr	r3, [pc, #8]	; (d7d4c <HAL_Pin_Mode+0xc>)
   d7d44:	681b      	ldr	r3, [r3, #0]
   d7d46:	689b      	ldr	r3, [r3, #8]
   d7d48:	9301      	str	r3, [sp, #4]
   d7d4a:	bd08      	pop	{r3, pc}
   d7d4c:	0003022c 	.word	0x0003022c

000d7d50 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7d50:	b508      	push	{r3, lr}
   d7d52:	4b02      	ldr	r3, [pc, #8]	; (d7d5c <HAL_Get_Pin_Mode+0xc>)
   d7d54:	681b      	ldr	r3, [r3, #0]
   d7d56:	68db      	ldr	r3, [r3, #12]
   d7d58:	9301      	str	r3, [sp, #4]
   d7d5a:	bd08      	pop	{r3, pc}
   d7d5c:	0003022c 	.word	0x0003022c

000d7d60 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7d60:	b508      	push	{r3, lr}
   d7d62:	4b02      	ldr	r3, [pc, #8]	; (d7d6c <HAL_GPIO_Write+0xc>)
   d7d64:	681b      	ldr	r3, [r3, #0]
   d7d66:	691b      	ldr	r3, [r3, #16]
   d7d68:	9301      	str	r3, [sp, #4]
   d7d6a:	bd08      	pop	{r3, pc}
   d7d6c:	0003022c 	.word	0x0003022c

000d7d70 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7d70:	b508      	push	{r3, lr}
   d7d72:	4b02      	ldr	r3, [pc, #8]	; (d7d7c <HAL_GPIO_Read+0xc>)
   d7d74:	681b      	ldr	r3, [r3, #0]
   d7d76:	695b      	ldr	r3, [r3, #20]
   d7d78:	9301      	str	r3, [sp, #4]
   d7d7a:	bd08      	pop	{r3, pc}
   d7d7c:	0003022c 	.word	0x0003022c

000d7d80 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7d80:	b508      	push	{r3, lr}
   d7d82:	4b02      	ldr	r3, [pc, #8]	; (d7d8c <HAL_Interrupts_Attach+0xc>)
   d7d84:	681b      	ldr	r3, [r3, #0]
   d7d86:	699b      	ldr	r3, [r3, #24]
   d7d88:	9301      	str	r3, [sp, #4]
   d7d8a:	bd08      	pop	{r3, pc}
   d7d8c:	0003022c 	.word	0x0003022c

000d7d90 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7d90:	b508      	push	{r3, lr}
   d7d92:	4b02      	ldr	r3, [pc, #8]	; (d7d9c <HAL_Interrupts_Detach+0xc>)
   d7d94:	681b      	ldr	r3, [r3, #0]
   d7d96:	69db      	ldr	r3, [r3, #28]
   d7d98:	9301      	str	r3, [sp, #4]
   d7d9a:	bd08      	pop	{r3, pc}
   d7d9c:	0003022c 	.word	0x0003022c

000d7da0 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d7da0:	b508      	push	{r3, lr}
   d7da2:	4b02      	ldr	r3, [pc, #8]	; (d7dac <HAL_Interrupts_Enable_All+0xc>)
   d7da4:	681b      	ldr	r3, [r3, #0]
   d7da6:	6a1b      	ldr	r3, [r3, #32]
   d7da8:	9301      	str	r3, [sp, #4]
   d7daa:	bd08      	pop	{r3, pc}
   d7dac:	0003022c 	.word	0x0003022c

000d7db0 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d7db0:	b508      	push	{r3, lr}
   d7db2:	4b02      	ldr	r3, [pc, #8]	; (d7dbc <HAL_Interrupts_Disable_All+0xc>)
   d7db4:	681b      	ldr	r3, [r3, #0]
   d7db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7db8:	9301      	str	r3, [sp, #4]
   d7dba:	bd08      	pop	{r3, pc}
   d7dbc:	0003022c 	.word	0x0003022c

000d7dc0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7dc0:	b508      	push	{r3, lr}
   d7dc2:	4b02      	ldr	r3, [pc, #8]	; (d7dcc <hal_i2c_begin+0xc>)
   d7dc4:	681b      	ldr	r3, [r3, #0]
   d7dc6:	68db      	ldr	r3, [r3, #12]
   d7dc8:	9301      	str	r3, [sp, #4]
   d7dca:	bd08      	pop	{r3, pc}
   d7dcc:	00030228 	.word	0x00030228

000d7dd0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7dd0:	b508      	push	{r3, lr}
   d7dd2:	4b02      	ldr	r3, [pc, #8]	; (d7ddc <hal_i2c_begin_transmission+0xc>)
   d7dd4:	681b      	ldr	r3, [r3, #0]
   d7dd6:	699b      	ldr	r3, [r3, #24]
   d7dd8:	9301      	str	r3, [sp, #4]
   d7dda:	bd08      	pop	{r3, pc}
   d7ddc:	00030228 	.word	0x00030228

000d7de0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7de0:	b508      	push	{r3, lr}
   d7de2:	4b02      	ldr	r3, [pc, #8]	; (d7dec <hal_i2c_end_transmission+0xc>)
   d7de4:	681b      	ldr	r3, [r3, #0]
   d7de6:	69db      	ldr	r3, [r3, #28]
   d7de8:	9301      	str	r3, [sp, #4]
   d7dea:	bd08      	pop	{r3, pc}
   d7dec:	00030228 	.word	0x00030228

000d7df0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7df0:	b508      	push	{r3, lr}
   d7df2:	4b02      	ldr	r3, [pc, #8]	; (d7dfc <hal_i2c_write+0xc>)
   d7df4:	681b      	ldr	r3, [r3, #0]
   d7df6:	6a1b      	ldr	r3, [r3, #32]
   d7df8:	9301      	str	r3, [sp, #4]
   d7dfa:	bd08      	pop	{r3, pc}
   d7dfc:	00030228 	.word	0x00030228

000d7e00 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7e00:	b508      	push	{r3, lr}
   d7e02:	4b02      	ldr	r3, [pc, #8]	; (d7e0c <hal_i2c_available+0xc>)
   d7e04:	681b      	ldr	r3, [r3, #0]
   d7e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7e08:	9301      	str	r3, [sp, #4]
   d7e0a:	bd08      	pop	{r3, pc}
   d7e0c:	00030228 	.word	0x00030228

000d7e10 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7e10:	b508      	push	{r3, lr}
   d7e12:	4b02      	ldr	r3, [pc, #8]	; (d7e1c <hal_i2c_read+0xc>)
   d7e14:	681b      	ldr	r3, [r3, #0]
   d7e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7e18:	9301      	str	r3, [sp, #4]
   d7e1a:	bd08      	pop	{r3, pc}
   d7e1c:	00030228 	.word	0x00030228

000d7e20 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7e20:	b508      	push	{r3, lr}
   d7e22:	4b02      	ldr	r3, [pc, #8]	; (d7e2c <hal_i2c_peek+0xc>)
   d7e24:	681b      	ldr	r3, [r3, #0]
   d7e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7e28:	9301      	str	r3, [sp, #4]
   d7e2a:	bd08      	pop	{r3, pc}
   d7e2c:	00030228 	.word	0x00030228

000d7e30 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7e30:	b508      	push	{r3, lr}
   d7e32:	4b02      	ldr	r3, [pc, #8]	; (d7e3c <hal_i2c_flush+0xc>)
   d7e34:	681b      	ldr	r3, [r3, #0]
   d7e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7e38:	9301      	str	r3, [sp, #4]
   d7e3a:	bd08      	pop	{r3, pc}
   d7e3c:	00030228 	.word	0x00030228

000d7e40 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7e40:	b508      	push	{r3, lr}
   d7e42:	4b02      	ldr	r3, [pc, #8]	; (d7e4c <hal_i2c_is_enabled+0xc>)
   d7e44:	681b      	ldr	r3, [r3, #0]
   d7e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7e48:	9301      	str	r3, [sp, #4]
   d7e4a:	bd08      	pop	{r3, pc}
   d7e4c:	00030228 	.word	0x00030228

000d7e50 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7e50:	b508      	push	{r3, lr}
   d7e52:	4b02      	ldr	r3, [pc, #8]	; (d7e5c <hal_i2c_init+0xc>)
   d7e54:	681b      	ldr	r3, [r3, #0]
   d7e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7e58:	9301      	str	r3, [sp, #4]
   d7e5a:	bd08      	pop	{r3, pc}
   d7e5c:	00030228 	.word	0x00030228

000d7e60 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d7e60:	b508      	push	{r3, lr}
   d7e62:	4b02      	ldr	r3, [pc, #8]	; (d7e6c <hal_i2c_lock+0xc>)
   d7e64:	681b      	ldr	r3, [r3, #0]
   d7e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7e68:	9301      	str	r3, [sp, #4]
   d7e6a:	bd08      	pop	{r3, pc}
   d7e6c:	00030228 	.word	0x00030228

000d7e70 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d7e70:	b508      	push	{r3, lr}
   d7e72:	4b02      	ldr	r3, [pc, #8]	; (d7e7c <hal_i2c_unlock+0xc>)
   d7e74:	681b      	ldr	r3, [r3, #0]
   d7e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7e78:	9301      	str	r3, [sp, #4]
   d7e7a:	bd08      	pop	{r3, pc}
   d7e7c:	00030228 	.word	0x00030228

000d7e80 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d7e80:	b508      	push	{r3, lr}
   d7e82:	4b02      	ldr	r3, [pc, #8]	; (d7e8c <hal_i2c_request_ex+0xc>)
   d7e84:	681b      	ldr	r3, [r3, #0]
   d7e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7e88:	9301      	str	r3, [sp, #4]
   d7e8a:	bd08      	pop	{r3, pc}
   d7e8c:	00030228 	.word	0x00030228

000d7e90 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7e90:	b508      	push	{r3, lr}
   d7e92:	4b02      	ldr	r3, [pc, #8]	; (d7e9c <inet_inet_ntop+0xc>)
   d7e94:	681b      	ldr	r3, [r3, #0]
   d7e96:	695b      	ldr	r3, [r3, #20]
   d7e98:	9301      	str	r3, [sp, #4]
   d7e9a:	bd08      	pop	{r3, pc}
   d7e9c:	00030264 	.word	0x00030264

000d7ea0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7ea0:	b508      	push	{r3, lr}
   d7ea2:	4b02      	ldr	r3, [pc, #8]	; (d7eac <netdb_freeaddrinfo+0xc>)
   d7ea4:	681b      	ldr	r3, [r3, #0]
   d7ea6:	689b      	ldr	r3, [r3, #8]
   d7ea8:	9301      	str	r3, [sp, #4]
   d7eaa:	bd08      	pop	{r3, pc}
   d7eac:	00030268 	.word	0x00030268

000d7eb0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7eb0:	b508      	push	{r3, lr}
   d7eb2:	4b02      	ldr	r3, [pc, #8]	; (d7ebc <netdb_getaddrinfo+0xc>)
   d7eb4:	681b      	ldr	r3, [r3, #0]
   d7eb6:	68db      	ldr	r3, [r3, #12]
   d7eb8:	9301      	str	r3, [sp, #4]
   d7eba:	bd08      	pop	{r3, pc}
   d7ebc:	00030268 	.word	0x00030268

000d7ec0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d7ec0:	b508      	push	{r3, lr}
   d7ec2:	4b02      	ldr	r3, [pc, #8]	; (d7ecc <hal_spi_begin+0xc>)
   d7ec4:	681b      	ldr	r3, [r3, #0]
   d7ec6:	681b      	ldr	r3, [r3, #0]
   d7ec8:	9301      	str	r3, [sp, #4]
   d7eca:	bd08      	pop	{r3, pc}
   d7ecc:	00030230 	.word	0x00030230

000d7ed0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d7ed0:	b508      	push	{r3, lr}
   d7ed2:	4b02      	ldr	r3, [pc, #8]	; (d7edc <hal_spi_transfer+0xc>)
   d7ed4:	681b      	ldr	r3, [r3, #0]
   d7ed6:	695b      	ldr	r3, [r3, #20]
   d7ed8:	9301      	str	r3, [sp, #4]
   d7eda:	bd08      	pop	{r3, pc}
   d7edc:	00030230 	.word	0x00030230

000d7ee0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7ee0:	b508      	push	{r3, lr}
   d7ee2:	4b02      	ldr	r3, [pc, #8]	; (d7eec <hal_spi_init+0xc>)
   d7ee4:	681b      	ldr	r3, [r3, #0]
   d7ee6:	69db      	ldr	r3, [r3, #28]
   d7ee8:	9301      	str	r3, [sp, #4]
   d7eea:	bd08      	pop	{r3, pc}
   d7eec:	00030230 	.word	0x00030230

000d7ef0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7ef0:	b508      	push	{r3, lr}
   d7ef2:	4b02      	ldr	r3, [pc, #8]	; (d7efc <hal_spi_is_enabled+0xc>)
   d7ef4:	681b      	ldr	r3, [r3, #0]
   d7ef6:	6a1b      	ldr	r3, [r3, #32]
   d7ef8:	9301      	str	r3, [sp, #4]
   d7efa:	bd08      	pop	{r3, pc}
   d7efc:	00030230 	.word	0x00030230

000d7f00 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d7f00:	b508      	push	{r3, lr}
   d7f02:	4b02      	ldr	r3, [pc, #8]	; (d7f0c <hal_spi_info+0xc>)
   d7f04:	681b      	ldr	r3, [r3, #0]
   d7f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7f08:	9301      	str	r3, [sp, #4]
   d7f0a:	bd08      	pop	{r3, pc}
   d7f0c:	00030230 	.word	0x00030230

000d7f10 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d7f10:	b508      	push	{r3, lr}
   d7f12:	4b02      	ldr	r3, [pc, #8]	; (d7f1c <hal_spi_set_settings+0xc>)
   d7f14:	681b      	ldr	r3, [r3, #0]
   d7f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7f18:	9301      	str	r3, [sp, #4]
   d7f1a:	bd08      	pop	{r3, pc}
   d7f1c:	00030230 	.word	0x00030230

000d7f20 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d7f20:	b508      	push	{r3, lr}
   d7f22:	4b02      	ldr	r3, [pc, #8]	; (d7f2c <hal_spi_acquire+0xc>)
   d7f24:	681b      	ldr	r3, [r3, #0]
   d7f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7f28:	9301      	str	r3, [sp, #4]
   d7f2a:	bd08      	pop	{r3, pc}
   d7f2c:	00030230 	.word	0x00030230

000d7f30 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d7f30:	b508      	push	{r3, lr}
   d7f32:	4b02      	ldr	r3, [pc, #8]	; (d7f3c <hal_spi_release+0xc>)
   d7f34:	681b      	ldr	r3, [r3, #0]
   d7f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7f38:	9301      	str	r3, [sp, #4]
   d7f3a:	bd08      	pop	{r3, pc}
   d7f3c:	00030230 	.word	0x00030230

000d7f40 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7f40:	b508      	push	{r3, lr}
   d7f42:	4b02      	ldr	r3, [pc, #8]	; (d7f4c <hal_usart_init+0xc>)
   d7f44:	681b      	ldr	r3, [r3, #0]
   d7f46:	681b      	ldr	r3, [r3, #0]
   d7f48:	9301      	str	r3, [sp, #4]
   d7f4a:	bd08      	pop	{r3, pc}
   d7f4c:	0003023c 	.word	0x0003023c

000d7f50 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7f50:	b508      	push	{r3, lr}
   d7f52:	4b02      	ldr	r3, [pc, #8]	; (d7f5c <hal_usart_write+0xc>)
   d7f54:	681b      	ldr	r3, [r3, #0]
   d7f56:	68db      	ldr	r3, [r3, #12]
   d7f58:	9301      	str	r3, [sp, #4]
   d7f5a:	bd08      	pop	{r3, pc}
   d7f5c:	0003023c 	.word	0x0003023c

000d7f60 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7f60:	b508      	push	{r3, lr}
   d7f62:	4b02      	ldr	r3, [pc, #8]	; (d7f6c <hal_usart_available+0xc>)
   d7f64:	681b      	ldr	r3, [r3, #0]
   d7f66:	691b      	ldr	r3, [r3, #16]
   d7f68:	9301      	str	r3, [sp, #4]
   d7f6a:	bd08      	pop	{r3, pc}
   d7f6c:	0003023c 	.word	0x0003023c

000d7f70 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7f70:	b508      	push	{r3, lr}
   d7f72:	4b02      	ldr	r3, [pc, #8]	; (d7f7c <hal_usart_read+0xc>)
   d7f74:	681b      	ldr	r3, [r3, #0]
   d7f76:	695b      	ldr	r3, [r3, #20]
   d7f78:	9301      	str	r3, [sp, #4]
   d7f7a:	bd08      	pop	{r3, pc}
   d7f7c:	0003023c 	.word	0x0003023c

000d7f80 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7f80:	b508      	push	{r3, lr}
   d7f82:	4b02      	ldr	r3, [pc, #8]	; (d7f8c <hal_usart_peek+0xc>)
   d7f84:	681b      	ldr	r3, [r3, #0]
   d7f86:	699b      	ldr	r3, [r3, #24]
   d7f88:	9301      	str	r3, [sp, #4]
   d7f8a:	bd08      	pop	{r3, pc}
   d7f8c:	0003023c 	.word	0x0003023c

000d7f90 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7f90:	b508      	push	{r3, lr}
   d7f92:	4b02      	ldr	r3, [pc, #8]	; (d7f9c <hal_usart_flush+0xc>)
   d7f94:	681b      	ldr	r3, [r3, #0]
   d7f96:	69db      	ldr	r3, [r3, #28]
   d7f98:	9301      	str	r3, [sp, #4]
   d7f9a:	bd08      	pop	{r3, pc}
   d7f9c:	0003023c 	.word	0x0003023c

000d7fa0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7fa0:	b508      	push	{r3, lr}
   d7fa2:	4b02      	ldr	r3, [pc, #8]	; (d7fac <hal_usart_is_enabled+0xc>)
   d7fa4:	681b      	ldr	r3, [r3, #0]
   d7fa6:	6a1b      	ldr	r3, [r3, #32]
   d7fa8:	9301      	str	r3, [sp, #4]
   d7faa:	bd08      	pop	{r3, pc}
   d7fac:	0003023c 	.word	0x0003023c

000d7fb0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d7fb0:	b508      	push	{r3, lr}
   d7fb2:	4b02      	ldr	r3, [pc, #8]	; (d7fbc <hal_usart_available_data_for_write+0xc>)
   d7fb4:	681b      	ldr	r3, [r3, #0]
   d7fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7fb8:	9301      	str	r3, [sp, #4]
   d7fba:	bd08      	pop	{r3, pc}
   d7fbc:	0003023c 	.word	0x0003023c

000d7fc0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7fc0:	b508      	push	{r3, lr}
   d7fc2:	4b02      	ldr	r3, [pc, #8]	; (d7fcc <HAL_USB_USART_Init+0xc>)
   d7fc4:	681b      	ldr	r3, [r3, #0]
   d7fc6:	681b      	ldr	r3, [r3, #0]
   d7fc8:	9301      	str	r3, [sp, #4]
   d7fca:	bd08      	pop	{r3, pc}
   d7fcc:	0003024c 	.word	0x0003024c

000d7fd0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7fd0:	b508      	push	{r3, lr}
   d7fd2:	4b02      	ldr	r3, [pc, #8]	; (d7fdc <HAL_USB_USART_Available_Data+0xc>)
   d7fd4:	681b      	ldr	r3, [r3, #0]
   d7fd6:	691b      	ldr	r3, [r3, #16]
   d7fd8:	9301      	str	r3, [sp, #4]
   d7fda:	bd08      	pop	{r3, pc}
   d7fdc:	0003024c 	.word	0x0003024c

000d7fe0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7fe0:	b508      	push	{r3, lr}
   d7fe2:	4b02      	ldr	r3, [pc, #8]	; (d7fec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7fe4:	681b      	ldr	r3, [r3, #0]
   d7fe6:	695b      	ldr	r3, [r3, #20]
   d7fe8:	9301      	str	r3, [sp, #4]
   d7fea:	bd08      	pop	{r3, pc}
   d7fec:	0003024c 	.word	0x0003024c

000d7ff0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7ff0:	b508      	push	{r3, lr}
   d7ff2:	4b02      	ldr	r3, [pc, #8]	; (d7ffc <HAL_USB_USART_Receive_Data+0xc>)
   d7ff4:	681b      	ldr	r3, [r3, #0]
   d7ff6:	699b      	ldr	r3, [r3, #24]
   d7ff8:	9301      	str	r3, [sp, #4]
   d7ffa:	bd08      	pop	{r3, pc}
   d7ffc:	0003024c 	.word	0x0003024c

000d8000 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8000:	b508      	push	{r3, lr}
   d8002:	4b02      	ldr	r3, [pc, #8]	; (d800c <HAL_USB_USART_Send_Data+0xc>)
   d8004:	681b      	ldr	r3, [r3, #0]
   d8006:	69db      	ldr	r3, [r3, #28]
   d8008:	9301      	str	r3, [sp, #4]
   d800a:	bd08      	pop	{r3, pc}
   d800c:	0003024c 	.word	0x0003024c

000d8010 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8010:	b508      	push	{r3, lr}
   d8012:	4b02      	ldr	r3, [pc, #8]	; (d801c <HAL_USB_USART_Flush_Data+0xc>)
   d8014:	681b      	ldr	r3, [r3, #0]
   d8016:	6a1b      	ldr	r3, [r3, #32]
   d8018:	9301      	str	r3, [sp, #4]
   d801a:	bd08      	pop	{r3, pc}
   d801c:	0003024c 	.word	0x0003024c

000d8020 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d8020:	b508      	push	{r3, lr}
   d8022:	4b02      	ldr	r3, [pc, #8]	; (d802c <panic_+0xc>)
   d8024:	681b      	ldr	r3, [r3, #0]
   d8026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8028:	9301      	str	r3, [sp, #4]
   d802a:	bd08      	pop	{r3, pc}
   d802c:	00030260 	.word	0x00030260

000d8030 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d8030:	b508      	push	{r3, lr}
   d8032:	4b02      	ldr	r3, [pc, #8]	; (d803c <log_message_v+0xc>)
   d8034:	681b      	ldr	r3, [r3, #0]
   d8036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8038:	9301      	str	r3, [sp, #4]
   d803a:	bd08      	pop	{r3, pc}
   d803c:	00030260 	.word	0x00030260

000d8040 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d8040:	b508      	push	{r3, lr}
   d8042:	4b03      	ldr	r3, [pc, #12]	; (d8050 <diag_get_source+0x10>)
   d8044:	681b      	ldr	r3, [r3, #0]
   d8046:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d804a:	9301      	str	r3, [sp, #4]
   d804c:	bd08      	pop	{r3, pc}
   d804e:	0000      	.short	0x0000
   d8050:	00030260 	.word	0x00030260

000d8054 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8054:	b508      	push	{r3, lr}
   d8056:	4b02      	ldr	r3, [pc, #8]	; (d8060 <system_mode+0xc>)
   d8058:	681b      	ldr	r3, [r3, #0]
   d805a:	681b      	ldr	r3, [r3, #0]
   d805c:	9301      	str	r3, [sp, #4]
   d805e:	bd08      	pop	{r3, pc}
   d8060:	00030220 	.word	0x00030220

000d8064 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8064:	b508      	push	{r3, lr}
   d8066:	4b02      	ldr	r3, [pc, #8]	; (d8070 <set_system_mode+0xc>)
   d8068:	681b      	ldr	r3, [r3, #0]
   d806a:	685b      	ldr	r3, [r3, #4]
   d806c:	9301      	str	r3, [sp, #4]
   d806e:	bd08      	pop	{r3, pc}
   d8070:	00030220 	.word	0x00030220

000d8074 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8074:	b508      	push	{r3, lr}
   d8076:	4b02      	ldr	r3, [pc, #8]	; (d8080 <system_delay_ms+0xc>)
   d8078:	681b      	ldr	r3, [r3, #0]
   d807a:	695b      	ldr	r3, [r3, #20]
   d807c:	9301      	str	r3, [sp, #4]
   d807e:	bd08      	pop	{r3, pc}
   d8080:	00030220 	.word	0x00030220

000d8084 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d8084:	b508      	push	{r3, lr}
   d8086:	4b02      	ldr	r3, [pc, #8]	; (d8090 <system_thread_set_state+0xc>)
   d8088:	681b      	ldr	r3, [r3, #0]
   d808a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d808c:	9301      	str	r3, [sp, #4]
   d808e:	bd08      	pop	{r3, pc}
   d8090:	00030220 	.word	0x00030220

000d8094 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d8094:	b508      	push	{r3, lr}
   d8096:	4b02      	ldr	r3, [pc, #8]	; (d80a0 <application_thread_current+0xc>)
   d8098:	681b      	ldr	r3, [r3, #0]
   d809a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d809c:	9301      	str	r3, [sp, #4]
   d809e:	bd08      	pop	{r3, pc}
   d80a0:	00030220 	.word	0x00030220

000d80a4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d80a4:	b508      	push	{r3, lr}
   d80a6:	4b02      	ldr	r3, [pc, #8]	; (d80b0 <application_thread_invoke+0xc>)
   d80a8:	681b      	ldr	r3, [r3, #0]
   d80aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d80ac:	9301      	str	r3, [sp, #4]
   d80ae:	bd08      	pop	{r3, pc}
   d80b0:	00030220 	.word	0x00030220

000d80b4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d80b4:	b508      	push	{r3, lr}
   d80b6:	4b02      	ldr	r3, [pc, #8]	; (d80c0 <system_thread_get_state+0xc>)
   d80b8:	681b      	ldr	r3, [r3, #0]
   d80ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d80bc:	9301      	str	r3, [sp, #4]
   d80be:	bd08      	pop	{r3, pc}
   d80c0:	00030220 	.word	0x00030220

000d80c4 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d80c4:	b508      	push	{r3, lr}
   d80c6:	4b02      	ldr	r3, [pc, #8]	; (d80d0 <system_notify_time_changed+0xc>)
   d80c8:	681b      	ldr	r3, [r3, #0]
   d80ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d80cc:	9301      	str	r3, [sp, #4]
   d80ce:	bd08      	pop	{r3, pc}
   d80d0:	00030220 	.word	0x00030220

000d80d4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d80d4:	b508      	push	{r3, lr}
   d80d6:	4b03      	ldr	r3, [pc, #12]	; (d80e4 <system_ctrl_set_app_request_handler+0x10>)
   d80d8:	681b      	ldr	r3, [r3, #0]
   d80da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d80de:	9301      	str	r3, [sp, #4]
   d80e0:	bd08      	pop	{r3, pc}
   d80e2:	0000      	.short	0x0000
   d80e4:	00030220 	.word	0x00030220

000d80e8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d80e8:	b508      	push	{r3, lr}
   d80ea:	4b03      	ldr	r3, [pc, #12]	; (d80f8 <system_ctrl_set_result+0x10>)
   d80ec:	681b      	ldr	r3, [r3, #0]
   d80ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d80f2:	9301      	str	r3, [sp, #4]
   d80f4:	bd08      	pop	{r3, pc}
   d80f6:	0000      	.short	0x0000
   d80f8:	00030220 	.word	0x00030220

000d80fc <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d80fc:	b508      	push	{r3, lr}
   d80fe:	4b03      	ldr	r3, [pc, #12]	; (d810c <system_power_management_set_config+0x10>)
   d8100:	681b      	ldr	r3, [r3, #0]
   d8102:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d8106:	9301      	str	r3, [sp, #4]
   d8108:	bd08      	pop	{r3, pc}
   d810a:	0000      	.short	0x0000
   d810c:	00030220 	.word	0x00030220

000d8110 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d8110:	b508      	push	{r3, lr}
   d8112:	4b03      	ldr	r3, [pc, #12]	; (d8120 <system_reset+0x10>)
   d8114:	681b      	ldr	r3, [r3, #0]
   d8116:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d811a:	9301      	str	r3, [sp, #4]
   d811c:	bd08      	pop	{r3, pc}
   d811e:	0000      	.short	0x0000
   d8120:	00030220 	.word	0x00030220

000d8124 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d8124:	b508      	push	{r3, lr}
   d8126:	4b02      	ldr	r3, [pc, #8]	; (d8130 <spark_variable+0xc>)
   d8128:	681b      	ldr	r3, [r3, #0]
   d812a:	681b      	ldr	r3, [r3, #0]
   d812c:	9301      	str	r3, [sp, #4]
   d812e:	bd08      	pop	{r3, pc}
   d8130:	00030244 	.word	0x00030244

000d8134 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d8134:	b508      	push	{r3, lr}
   d8136:	4b02      	ldr	r3, [pc, #8]	; (d8140 <spark_function+0xc>)
   d8138:	681b      	ldr	r3, [r3, #0]
   d813a:	685b      	ldr	r3, [r3, #4]
   d813c:	9301      	str	r3, [sp, #4]
   d813e:	bd08      	pop	{r3, pc}
   d8140:	00030244 	.word	0x00030244

000d8144 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d8144:	b508      	push	{r3, lr}
   d8146:	4b02      	ldr	r3, [pc, #8]	; (d8150 <spark_process+0xc>)
   d8148:	681b      	ldr	r3, [r3, #0]
   d814a:	689b      	ldr	r3, [r3, #8]
   d814c:	9301      	str	r3, [sp, #4]
   d814e:	bd08      	pop	{r3, pc}
   d8150:	00030244 	.word	0x00030244

000d8154 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d8154:	b508      	push	{r3, lr}
   d8156:	4b02      	ldr	r3, [pc, #8]	; (d8160 <spark_cloud_flag_connect+0xc>)
   d8158:	681b      	ldr	r3, [r3, #0]
   d815a:	68db      	ldr	r3, [r3, #12]
   d815c:	9301      	str	r3, [sp, #4]
   d815e:	bd08      	pop	{r3, pc}
   d8160:	00030244 	.word	0x00030244

000d8164 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d8164:	b508      	push	{r3, lr}
   d8166:	4b02      	ldr	r3, [pc, #8]	; (d8170 <spark_cloud_flag_connected+0xc>)
   d8168:	681b      	ldr	r3, [r3, #0]
   d816a:	695b      	ldr	r3, [r3, #20]
   d816c:	9301      	str	r3, [sp, #4]
   d816e:	bd08      	pop	{r3, pc}
   d8170:	00030244 	.word	0x00030244

000d8174 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d8174:	b508      	push	{r3, lr}
   d8176:	4b02      	ldr	r3, [pc, #8]	; (d8180 <spark_deviceID+0xc>)
   d8178:	681b      	ldr	r3, [r3, #0]
   d817a:	69db      	ldr	r3, [r3, #28]
   d817c:	9301      	str	r3, [sp, #4]
   d817e:	bd08      	pop	{r3, pc}
   d8180:	00030244 	.word	0x00030244

000d8184 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d8184:	b508      	push	{r3, lr}
   d8186:	4b02      	ldr	r3, [pc, #8]	; (d8190 <spark_send_event+0xc>)
   d8188:	681b      	ldr	r3, [r3, #0]
   d818a:	6a1b      	ldr	r3, [r3, #32]
   d818c:	9301      	str	r3, [sp, #4]
   d818e:	bd08      	pop	{r3, pc}
   d8190:	00030244 	.word	0x00030244

000d8194 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d8194:	b508      	push	{r3, lr}
   d8196:	4b02      	ldr	r3, [pc, #8]	; (d81a0 <spark_subscribe+0xc>)
   d8198:	681b      	ldr	r3, [r3, #0]
   d819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d819c:	9301      	str	r3, [sp, #4]
   d819e:	bd08      	pop	{r3, pc}
   d81a0:	00030244 	.word	0x00030244

000d81a4 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d81a4:	b508      	push	{r3, lr}
   d81a6:	4b02      	ldr	r3, [pc, #8]	; (d81b0 <spark_sync_time+0xc>)
   d81a8:	681b      	ldr	r3, [r3, #0]
   d81aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d81ac:	9301      	str	r3, [sp, #4]
   d81ae:	bd08      	pop	{r3, pc}
   d81b0:	00030244 	.word	0x00030244

000d81b4 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d81b4:	b508      	push	{r3, lr}
   d81b6:	4b02      	ldr	r3, [pc, #8]	; (d81c0 <spark_sync_time_pending+0xc>)
   d81b8:	681b      	ldr	r3, [r3, #0]
   d81ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d81bc:	9301      	str	r3, [sp, #4]
   d81be:	bd08      	pop	{r3, pc}
   d81c0:	00030244 	.word	0x00030244

000d81c4 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d81c4:	b508      	push	{r3, lr}
   d81c6:	4b02      	ldr	r3, [pc, #8]	; (d81d0 <spark_sync_time_last+0xc>)
   d81c8:	681b      	ldr	r3, [r3, #0]
   d81ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d81cc:	9301      	str	r3, [sp, #4]
   d81ce:	bd08      	pop	{r3, pc}
   d81d0:	00030244 	.word	0x00030244

000d81d4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d81d4:	b508      	push	{r3, lr}
   d81d6:	4b02      	ldr	r3, [pc, #8]	; (d81e0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d81d8:	681b      	ldr	r3, [r3, #0]
   d81da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d81dc:	9301      	str	r3, [sp, #4]
   d81de:	bd08      	pop	{r3, pc}
   d81e0:	00030244 	.word	0x00030244

000d81e4 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d81e4:	b508      	push	{r3, lr}
   d81e6:	4b02      	ldr	r3, [pc, #8]	; (d81f0 <spark_cloud_disconnect+0xc>)
   d81e8:	681b      	ldr	r3, [r3, #0]
   d81ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d81ec:	9301      	str	r3, [sp, #4]
   d81ee:	bd08      	pop	{r3, pc}
   d81f0:	00030244 	.word	0x00030244

000d81f4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d81f4:	b508      	push	{r3, lr}
   d81f6:	4b02      	ldr	r3, [pc, #8]	; (d8200 <network_connect+0xc>)
   d81f8:	681b      	ldr	r3, [r3, #0]
   d81fa:	685b      	ldr	r3, [r3, #4]
   d81fc:	9301      	str	r3, [sp, #4]
   d81fe:	bd08      	pop	{r3, pc}
   d8200:	00030240 	.word	0x00030240

000d8204 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d8204:	b508      	push	{r3, lr}
   d8206:	4b02      	ldr	r3, [pc, #8]	; (d8210 <network_connecting+0xc>)
   d8208:	681b      	ldr	r3, [r3, #0]
   d820a:	689b      	ldr	r3, [r3, #8]
   d820c:	9301      	str	r3, [sp, #4]
   d820e:	bd08      	pop	{r3, pc}
   d8210:	00030240 	.word	0x00030240

000d8214 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8214:	b508      	push	{r3, lr}
   d8216:	4b02      	ldr	r3, [pc, #8]	; (d8220 <network_disconnect+0xc>)
   d8218:	681b      	ldr	r3, [r3, #0]
   d821a:	68db      	ldr	r3, [r3, #12]
   d821c:	9301      	str	r3, [sp, #4]
   d821e:	bd08      	pop	{r3, pc}
   d8220:	00030240 	.word	0x00030240

000d8224 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8224:	b508      	push	{r3, lr}
   d8226:	4b02      	ldr	r3, [pc, #8]	; (d8230 <network_ready+0xc>)
   d8228:	681b      	ldr	r3, [r3, #0]
   d822a:	691b      	ldr	r3, [r3, #16]
   d822c:	9301      	str	r3, [sp, #4]
   d822e:	bd08      	pop	{r3, pc}
   d8230:	00030240 	.word	0x00030240

000d8234 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8234:	b508      	push	{r3, lr}
   d8236:	4b02      	ldr	r3, [pc, #8]	; (d8240 <network_on+0xc>)
   d8238:	681b      	ldr	r3, [r3, #0]
   d823a:	695b      	ldr	r3, [r3, #20]
   d823c:	9301      	str	r3, [sp, #4]
   d823e:	bd08      	pop	{r3, pc}
   d8240:	00030240 	.word	0x00030240

000d8244 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8244:	b508      	push	{r3, lr}
   d8246:	4b02      	ldr	r3, [pc, #8]	; (d8250 <network_off+0xc>)
   d8248:	681b      	ldr	r3, [r3, #0]
   d824a:	699b      	ldr	r3, [r3, #24]
   d824c:	9301      	str	r3, [sp, #4]
   d824e:	bd08      	pop	{r3, pc}
   d8250:	00030240 	.word	0x00030240

000d8254 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8254:	b508      	push	{r3, lr}
   d8256:	4b02      	ldr	r3, [pc, #8]	; (d8260 <network_listen+0xc>)
   d8258:	681b      	ldr	r3, [r3, #0]
   d825a:	69db      	ldr	r3, [r3, #28]
   d825c:	9301      	str	r3, [sp, #4]
   d825e:	bd08      	pop	{r3, pc}
   d8260:	00030240 	.word	0x00030240

000d8264 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8264:	b508      	push	{r3, lr}
   d8266:	4b02      	ldr	r3, [pc, #8]	; (d8270 <network_listening+0xc>)
   d8268:	681b      	ldr	r3, [r3, #0]
   d826a:	6a1b      	ldr	r3, [r3, #32]
   d826c:	9301      	str	r3, [sp, #4]
   d826e:	bd08      	pop	{r3, pc}
   d8270:	00030240 	.word	0x00030240

000d8274 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d8274:	b508      	push	{r3, lr}
   d8276:	4b02      	ldr	r3, [pc, #8]	; (d8280 <network_set_listen_timeout+0xc>)
   d8278:	681b      	ldr	r3, [r3, #0]
   d827a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d827c:	9301      	str	r3, [sp, #4]
   d827e:	bd08      	pop	{r3, pc}
   d8280:	00030240 	.word	0x00030240

000d8284 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d8284:	b508      	push	{r3, lr}
   d8286:	4b02      	ldr	r3, [pc, #8]	; (d8290 <network_get_listen_timeout+0xc>)
   d8288:	681b      	ldr	r3, [r3, #0]
   d828a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d828c:	9301      	str	r3, [sp, #4]
   d828e:	bd08      	pop	{r3, pc}
   d8290:	00030240 	.word	0x00030240

000d8294 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d8294:	b508      	push	{r3, lr}
   d8296:	4b02      	ldr	r3, [pc, #8]	; (d82a0 <malloc+0xc>)
   d8298:	681b      	ldr	r3, [r3, #0]
   d829a:	681b      	ldr	r3, [r3, #0]
   d829c:	9301      	str	r3, [sp, #4]
   d829e:	bd08      	pop	{r3, pc}
   d82a0:	0003021c 	.word	0x0003021c

000d82a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d82a4:	b508      	push	{r3, lr}
   d82a6:	4b02      	ldr	r3, [pc, #8]	; (d82b0 <free+0xc>)
   d82a8:	681b      	ldr	r3, [r3, #0]
   d82aa:	685b      	ldr	r3, [r3, #4]
   d82ac:	9301      	str	r3, [sp, #4]
   d82ae:	bd08      	pop	{r3, pc}
   d82b0:	0003021c 	.word	0x0003021c

000d82b4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d82b4:	b508      	push	{r3, lr}
   d82b6:	4b02      	ldr	r3, [pc, #8]	; (d82c0 <realloc+0xc>)
   d82b8:	681b      	ldr	r3, [r3, #0]
   d82ba:	689b      	ldr	r3, [r3, #8]
   d82bc:	9301      	str	r3, [sp, #4]
   d82be:	bd08      	pop	{r3, pc}
   d82c0:	0003021c 	.word	0x0003021c

000d82c4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d82c4:	b508      	push	{r3, lr}
   d82c6:	4b02      	ldr	r3, [pc, #8]	; (d82d0 <siprintf+0xc>)
   d82c8:	681b      	ldr	r3, [r3, #0]
   d82ca:	691b      	ldr	r3, [r3, #16]
   d82cc:	9301      	str	r3, [sp, #4]
   d82ce:	bd08      	pop	{r3, pc}
   d82d0:	0003021c 	.word	0x0003021c

000d82d4 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d82d4:	b508      	push	{r3, lr}
   d82d6:	4b02      	ldr	r3, [pc, #8]	; (d82e0 <snprintf+0xc>)
   d82d8:	681b      	ldr	r3, [r3, #0]
   d82da:	69db      	ldr	r3, [r3, #28]
   d82dc:	9301      	str	r3, [sp, #4]
   d82de:	bd08      	pop	{r3, pc}
   d82e0:	0003021c 	.word	0x0003021c

000d82e4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d82e4:	b508      	push	{r3, lr}
   d82e6:	4b02      	ldr	r3, [pc, #8]	; (d82f0 <vsnprintf+0xc>)
   d82e8:	681b      	ldr	r3, [r3, #0]
   d82ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d82ec:	9301      	str	r3, [sp, #4]
   d82ee:	bd08      	pop	{r3, pc}
   d82f0:	0003021c 	.word	0x0003021c

000d82f4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d82f4:	b508      	push	{r3, lr}
   d82f6:	4b02      	ldr	r3, [pc, #8]	; (d8300 <abort+0xc>)
   d82f8:	681b      	ldr	r3, [r3, #0]
   d82fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d82fc:	9301      	str	r3, [sp, #4]
   d82fe:	bd08      	pop	{r3, pc}
   d8300:	0003021c 	.word	0x0003021c

000d8304 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d8304:	b508      	push	{r3, lr}
   d8306:	4b02      	ldr	r3, [pc, #8]	; (d8310 <_malloc_r+0xc>)
   d8308:	681b      	ldr	r3, [r3, #0]
   d830a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d830c:	9301      	str	r3, [sp, #4]
   d830e:	bd08      	pop	{r3, pc}
   d8310:	0003021c 	.word	0x0003021c

000d8314 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d8314:	b508      	push	{r3, lr}
   d8316:	4b02      	ldr	r3, [pc, #8]	; (d8320 <newlib_impure_ptr_callback+0xc>)
   d8318:	681b      	ldr	r3, [r3, #0]
   d831a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d831c:	9301      	str	r3, [sp, #4]
   d831e:	bd08      	pop	{r3, pc}
   d8320:	0003021c 	.word	0x0003021c

000d8324 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d8324:	b508      	push	{r3, lr}
   d8326:	4b02      	ldr	r3, [pc, #8]	; (d8330 <strftime+0xc>)
   d8328:	681b      	ldr	r3, [r3, #0]
   d832a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d832c:	9301      	str	r3, [sp, #4]
   d832e:	bd08      	pop	{r3, pc}
   d8330:	0003021c 	.word	0x0003021c

000d8334 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8334:	b508      	push	{r3, lr}
   d8336:	4b02      	ldr	r3, [pc, #8]	; (d8340 <localtime_r+0xc>)
   d8338:	681b      	ldr	r3, [r3, #0]
   d833a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d833c:	9301      	str	r3, [sp, #4]
   d833e:	bd08      	pop	{r3, pc}
   d8340:	0003021c 	.word	0x0003021c

000d8344 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8344:	b508      	push	{r3, lr}
   d8346:	4b02      	ldr	r3, [pc, #8]	; (d8350 <gmtime_r+0xc>)
   d8348:	681b      	ldr	r3, [r3, #0]
   d834a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d834c:	9301      	str	r3, [sp, #4]
   d834e:	bd08      	pop	{r3, pc}
   d8350:	0003021c 	.word	0x0003021c

000d8354 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d8354:	b508      	push	{r3, lr}
   d8356:	4b02      	ldr	r3, [pc, #8]	; (d8360 <mktime+0xc>)
   d8358:	681b      	ldr	r3, [r3, #0]
   d835a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d835c:	9301      	str	r3, [sp, #4]
   d835e:	bd08      	pop	{r3, pc}
   d8360:	0003021c 	.word	0x0003021c

000d8364 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8364:	2100      	movs	r1, #0
   d8366:	f7ff be85 	b.w	d8074 <system_delay_ms>

000d836a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d836a:	b510      	push	{r4, lr}
      if (_M_empty())
   d836c:	6883      	ldr	r3, [r0, #8]
   d836e:	4604      	mov	r4, r0
   d8370:	b90b      	cbnz	r3, d8376 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d8372:	f001 fd06 	bl	d9d82 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8376:	68c3      	ldr	r3, [r0, #12]
   d8378:	4798      	blx	r3
      if (_M_manager)
   d837a:	68a3      	ldr	r3, [r4, #8]
   d837c:	b11b      	cbz	r3, d8386 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d837e:	2203      	movs	r2, #3
   d8380:	4621      	mov	r1, r4
   d8382:	4620      	mov	r0, r4
   d8384:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d8386:	4620      	mov	r0, r4
   d8388:	2110      	movs	r1, #16
}
   d838a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d838e:	f001 bcf2 	b.w	d9d76 <_ZdlPvj>

000d8392 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d8392:	b510      	push	{r4, lr}
   d8394:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8396:	6800      	ldr	r0, [r0, #0]
   d8398:	b108      	cbz	r0, d839e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d839a:	f7ff fc59 	bl	d7c50 <os_mutex_recursive_destroy>
    }
   d839e:	4620      	mov	r0, r4
   d83a0:	bd10      	pop	{r4, pc}

000d83a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d83a2:	680b      	ldr	r3, [r1, #0]
   d83a4:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d83a6:	b113      	cbz	r3, d83ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d83a8:	685a      	ldr	r2, [r3, #4]
   d83aa:	3201      	adds	r2, #1
   d83ac:	605a      	str	r2, [r3, #4]
      }
   d83ae:	4770      	bx	lr

000d83b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d83b0:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d83b2:	4c06      	ldr	r4, [pc, #24]	; (d83cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d83b4:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d83b6:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d83b8:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d83ba:	f7ff fc41 	bl	d7c40 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d83be:	4620      	mov	r0, r4
   d83c0:	4a03      	ldr	r2, [pc, #12]	; (d83d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d83c2:	4904      	ldr	r1, [pc, #16]	; (d83d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d83c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d83c8:	f001 bcd0 	b.w	d9d6c <__aeabi_atexit>
   d83cc:	2003e5e8 	.word	0x2003e5e8
   d83d0:	2003e230 	.word	0x2003e230
   d83d4:	000d8393 	.word	0x000d8393

000d83d8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d83d8:	2200      	movs	r2, #0
   d83da:	6840      	ldr	r0, [r0, #4]
   d83dc:	4611      	mov	r1, r2
   d83de:	f7ff bf21 	b.w	d8224 <network_ready>

000d83e2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d83e2:	2200      	movs	r2, #0
   d83e4:	6840      	ldr	r0, [r0, #4]
   d83e6:	4611      	mov	r1, r2
   d83e8:	f7ff bf3c 	b.w	d8264 <network_listening>

000d83ec <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d83ec:	2200      	movs	r2, #0
   d83ee:	6840      	ldr	r0, [r0, #4]
   d83f0:	4611      	mov	r1, r2
   d83f2:	f7ff bf47 	b.w	d8284 <network_get_listen_timeout>

000d83f6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d83f6:	6840      	ldr	r0, [r0, #4]
   d83f8:	2200      	movs	r2, #0
   d83fa:	f7ff bf3b 	b.w	d8274 <network_set_listen_timeout>

000d83fe <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d83fe:	6840      	ldr	r0, [r0, #4]
   d8400:	2200      	movs	r2, #0
   d8402:	f081 0101 	eor.w	r1, r1, #1
   d8406:	f7ff bf25 	b.w	d8254 <network_listen>

000d840a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d840a:	2300      	movs	r3, #0
   d840c:	6840      	ldr	r0, [r0, #4]
   d840e:	461a      	mov	r2, r3
   d8410:	4619      	mov	r1, r3
   d8412:	f7ff bf17 	b.w	d8244 <network_off>

000d8416 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8416:	2300      	movs	r3, #0
   d8418:	6840      	ldr	r0, [r0, #4]
   d841a:	461a      	mov	r2, r3
   d841c:	4619      	mov	r1, r3
   d841e:	f7ff bf09 	b.w	d8234 <network_on>

000d8422 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8422:	2200      	movs	r2, #0
   d8424:	6840      	ldr	r0, [r0, #4]
   d8426:	4611      	mov	r1, r2
   d8428:	f7ff beec 	b.w	d8204 <network_connecting>

000d842c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d842c:	6840      	ldr	r0, [r0, #4]
   d842e:	2200      	movs	r2, #0
   d8430:	2102      	movs	r1, #2
   d8432:	f7ff beef 	b.w	d8214 <network_disconnect>

000d8436 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8436:	2300      	movs	r3, #0
   d8438:	6840      	ldr	r0, [r0, #4]
   d843a:	461a      	mov	r2, r3
   d843c:	f7ff beda 	b.w	d81f4 <network_connect>

000d8440 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d8440:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d8442:	4b1b      	ldr	r3, [pc, #108]	; (d84b0 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d8444:	6003      	str	r3, [r0, #0]
   d8446:	2500      	movs	r5, #0
   d8448:	460f      	mov	r7, r1
   d844a:	3328      	adds	r3, #40	; 0x28
   d844c:	2618      	movs	r6, #24
   d844e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d8452:	b089      	sub	sp, #36	; 0x24
   d8454:	6043      	str	r3, [r0, #4]
   d8456:	4632      	mov	r2, r6
   d8458:	4629      	mov	r1, r5
   d845a:	4604      	mov	r4, r0
   d845c:	3010      	adds	r0, #16
   d845e:	f002 f97b 	bl	da758 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d8462:	6878      	ldr	r0, [r7, #4]
   d8464:	462a      	mov	r2, r5
   d8466:	4629      	mov	r1, r5
   d8468:	f7ff fedc 	bl	d8224 <network_ready>
   d846c:	b918      	cbnz	r0, d8476 <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d846e:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d8470:	4620      	mov	r0, r4
   d8472:	b009      	add	sp, #36	; 0x24
   d8474:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d8476:	4629      	mov	r1, r5
   d8478:	4632      	mov	r2, r6
   d847a:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d847c:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d8480:	f002 f96a 	bl	da758 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d8484:	a902      	add	r1, sp, #8
   d8486:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d8488:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d848c:	f7ff fba0 	bl	d7bd0 <cellular_signal>
   d8490:	b110      	cbz	r0, d8498 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d8492:	2301      	movs	r3, #1
   d8494:	60a3      	str	r3, [r4, #8]
            return sig;
   d8496:	e7eb      	b.n	d8470 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d8498:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d849a:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d849c:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d849e:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d84a0:	b90b      	cbnz	r3, d84a6 <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d84a2:	2302      	movs	r3, #2
   d84a4:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d84a6:	a902      	add	r1, sp, #8
   d84a8:	4620      	mov	r0, r4
   d84aa:	f000 f8ae 	bl	d860a <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d84ae:	e7df      	b.n	d8470 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d84b0:	000db20c 	.word	0x000db20c

000d84b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d84b4:	4b08      	ldr	r3, [pc, #32]	; (d84d8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d84b6:	b510      	push	{r4, lr}
   d84b8:	2428      	movs	r4, #40	; 0x28
   d84ba:	4622      	mov	r2, r4
   d84bc:	4618      	mov	r0, r3
   d84be:	2100      	movs	r1, #0
   d84c0:	f002 f94a 	bl	da758 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d84c4:	4b05      	ldr	r3, [pc, #20]	; (d84dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d84c6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d84c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d84cc:	6042      	str	r2, [r0, #4]
   d84ce:	2204      	movs	r2, #4
   d84d0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d84d2:	4a03      	ldr	r2, [pc, #12]	; (d84e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d84d4:	601a      	str	r2, [r3, #0]
   d84d6:	bd10      	pop	{r4, pc}
   d84d8:	2003e5f4 	.word	0x2003e5f4
   d84dc:	2003e5ec 	.word	0x2003e5ec
   d84e0:	000db1d8 	.word	0x000db1d8

000d84e4 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d84e4:	4770      	bx	lr

000d84e6 <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d84e6:	7d00      	ldrb	r0, [r0, #20]
   d84e8:	4770      	bx	lr

000d84ea <_ZN14CellularSignalD0Ev>:
   d84ea:	b510      	push	{r4, lr}
   d84ec:	2128      	movs	r1, #40	; 0x28
   d84ee:	4604      	mov	r4, r0
   d84f0:	f001 fc41 	bl	d9d76 <_ZdlPvj>
   d84f4:	4620      	mov	r0, r4
   d84f6:	bd10      	pop	{r4, pc}

000d84f8 <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d84f8:	7d03      	ldrb	r3, [r0, #20]
   d84fa:	b17b      	cbz	r3, d851c <_ZNK14CellularSignal11getStrengthEv+0x24>
   d84fc:	69c3      	ldr	r3, [r0, #28]
   d84fe:	2b00      	cmp	r3, #0
   d8500:	db0c      	blt.n	d851c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d8502:	ee07 3a90 	vmov	s15, r3
   d8506:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8524 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d850a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d850e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8512:	eddf 7a05 	vldr	s15, [pc, #20]	; d8528 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d8516:	ee20 0a27 	vmul.f32	s0, s0, s15
   d851a:	4770      	bx	lr
    }

    return -1.0f;
   d851c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8520:	4770      	bx	lr
   d8522:	bf00      	nop
   d8524:	477fff00 	.word	0x477fff00
   d8528:	42c80000 	.word	0x42c80000

000d852c <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d852c:	7d03      	ldrb	r3, [r0, #20]
   d852e:	b163      	cbz	r3, d854a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d8530:	6983      	ldr	r3, [r0, #24]
   d8532:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8536:	d008      	beq.n	d854a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d8538:	ee07 3a90 	vmov	s15, r3
   d853c:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8550 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d8540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8544:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8548:	4770      	bx	lr
    }

    return 0.0f;
   d854a:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8554 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d854e:	4770      	bx	lr
   d8550:	42c80000 	.word	0x42c80000
   d8554:	00000000 	.word	0x00000000

000d8558 <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d8558:	7d03      	ldrb	r3, [r0, #20]
   d855a:	b17b      	cbz	r3, d857c <_ZNK14CellularSignal10getQualityEv+0x24>
   d855c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d855e:	2b00      	cmp	r3, #0
   d8560:	db0c      	blt.n	d857c <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d8562:	ee07 3a90 	vmov	s15, r3
   d8566:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8584 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d856a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d856e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8572:	eddf 7a05 	vldr	s15, [pc, #20]	; d8588 <_ZNK14CellularSignal10getQualityEv+0x30>
   d8576:	ee20 0a27 	vmul.f32	s0, s0, s15
   d857a:	4770      	bx	lr
    }

    return -1.0f;
   d857c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8580:	4770      	bx	lr
   d8582:	bf00      	nop
   d8584:	477fff00 	.word	0x477fff00
   d8588:	42c80000 	.word	0x42c80000

000d858c <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d858c:	7d03      	ldrb	r3, [r0, #20]
   d858e:	b163      	cbz	r3, d85aa <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d8590:	6a03      	ldr	r3, [r0, #32]
   d8592:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8596:	d008      	beq.n	d85aa <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d8598:	ee07 3a90 	vmov	s15, r3
   d859c:	ed9f 7a04 	vldr	s14, [pc, #16]	; d85b0 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d85a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d85a4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d85a8:	4770      	bx	lr
    }

    return 0.0f;
   d85aa:	ed9f 0a02 	vldr	s0, [pc, #8]	; d85b4 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d85ae:	4770      	bx	lr
   d85b0:	42c80000 	.word	0x42c80000
   d85b4:	00000000 	.word	0x00000000

000d85b8 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d85b8:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d85ba:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d85bc:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d85be:	da0a      	bge.n	d85d6 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d85c0:	212d      	movs	r1, #45	; 0x2d
   d85c2:	f000 fd4b 	bl	d905c <_ZN5Print5printEc>
            val = -n;
   d85c6:	4261      	negs	r1, r4
            t = print('-');
   d85c8:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d85ca:	220a      	movs	r2, #10
   d85cc:	4630      	mov	r0, r6
   d85ce:	f000 fd54 	bl	d907a <_ZN5Print11printNumberEmh>
    }
}
   d85d2:	4428      	add	r0, r5
   d85d4:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d85d6:	4621      	mov	r1, r4
        size_t t = 0;
   d85d8:	2500      	movs	r5, #0
   d85da:	e7f6      	b.n	d85ca <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d85dc <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
   d85dc:	b570      	push	{r4, r5, r6, lr}
   d85de:	460c      	mov	r4, r1
   d85e0:	4605      	mov	r5, r0
   d85e2:	6881      	ldr	r1, [r0, #8]
   d85e4:	4620      	mov	r0, r4
   d85e6:	f7ff ffe7 	bl	d85b8 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d85ea:	212c      	movs	r1, #44	; 0x2c
   d85ec:	4606      	mov	r6, r0
   d85ee:	4620      	mov	r0, r4
   d85f0:	f000 fd34 	bl	d905c <_ZN5Print5printEc>
   d85f4:	68e9      	ldr	r1, [r5, #12]
   d85f6:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d85f8:	4620      	mov	r0, r4
   d85fa:	f7ff ffdd 	bl	d85b8 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
   d85fe:	4430      	add	r0, r6
   d8600:	bd70      	pop	{r4, r5, r6, pc}

000d8602 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d8602:	f1a0 0004 	sub.w	r0, r0, #4
   d8606:	f7ff bfe9 	b.w	d85dc <_ZNK14CellularSignal7printToER5Print>

000d860a <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d860a:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d860c:	460d      	mov	r5, r1
   d860e:	f100 0410 	add.w	r4, r0, #16
   d8612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8616:	e895 0003 	ldmia.w	r5, {r0, r1}
   d861a:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d861e:	2001      	movs	r0, #1
   d8620:	bd30      	pop	{r4, r5, pc}

000d8622 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8622:	4770      	bx	lr

000d8624 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d8624:	2000      	movs	r0, #0
   d8626:	4770      	bx	lr

000d8628 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8628:	b510      	push	{r4, lr}
   d862a:	2110      	movs	r1, #16
   d862c:	4604      	mov	r4, r0
   d862e:	f001 fba2 	bl	d9d76 <_ZdlPvj>
   d8632:	4620      	mov	r0, r4
   d8634:	bd10      	pop	{r4, pc}

000d8636 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d8636:	b508      	push	{r3, lr}
      { delete this; }
   d8638:	f7ff fff6 	bl	d8628 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d863c:	bd08      	pop	{r3, pc}

000d863e <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d863e:	b530      	push	{r4, r5, lr}
        type_(type) {
   d8640:	2200      	movs	r2, #0
   d8642:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d8646:	6002      	str	r2, [r0, #0]
   d8648:	8084      	strh	r4, [r0, #4]
   d864a:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d864c:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d864e:	680c      	ldr	r4, [r1, #0]
   d8650:	8085      	strh	r5, [r0, #4]
   d8652:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8654:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d8656:	bd30      	pop	{r4, r5, pc}

000d8658 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8658:	b510      	push	{r4, lr}
   d865a:	4604      	mov	r4, r0
    free((void*)msg_);
   d865c:	6800      	ldr	r0, [r0, #0]
   d865e:	f7ff fe21 	bl	d82a4 <free>
}
   d8662:	4620      	mov	r0, r4
   d8664:	bd10      	pop	{r4, pc}

000d8666 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8666:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8668:	68c4      	ldr	r4, [r0, #12]
   d866a:	b1f4      	cbz	r4, d86aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d866c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d866e:	2b02      	cmp	r3, #2
   d8670:	d103      	bne.n	d867a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d8672:	f104 000c 	add.w	r0, r4, #12
   d8676:	f7ff ffef 	bl	d8658 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d867a:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d867c:	b135      	cbz	r5, d868c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d867e:	4628      	mov	r0, r5
   d8680:	f7fd f958 	bl	d5934 <_ZNSt14_Function_baseD1Ev>
   d8684:	2110      	movs	r1, #16
   d8686:	4628      	mov	r0, r5
   d8688:	f001 fb75 	bl	d9d76 <_ZdlPvj>
   d868c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d868e:	b135      	cbz	r5, d869e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8690:	4628      	mov	r0, r5
   d8692:	f7fd f94f 	bl	d5934 <_ZNSt14_Function_baseD1Ev>
   d8696:	2110      	movs	r1, #16
   d8698:	4628      	mov	r0, r5
   d869a:	f001 fb6c 	bl	d9d76 <_ZdlPvj>
   d869e:	4620      	mov	r0, r4
   d86a0:	2114      	movs	r1, #20
   d86a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d86a6:	f001 bb66 	b.w	d9d76 <_ZdlPvj>
   d86aa:	bd38      	pop	{r3, r4, r5, pc}

000d86ac <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d86ac:	b510      	push	{r4, lr}
   d86ae:	b088      	sub	sp, #32
   d86b0:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d86b2:	4668      	mov	r0, sp
   d86b4:	f000 fe3f 	bl	d9336 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d86b8:	4669      	mov	r1, sp
   d86ba:	a804      	add	r0, sp, #16
   d86bc:	f000 fe5e 	bl	d937c <_ZN6StringC1ERKS_>
   d86c0:	a804      	add	r0, sp, #16
   d86c2:	47a0      	blx	r4
   d86c4:	4604      	mov	r4, r0
   d86c6:	a804      	add	r0, sp, #16
   d86c8:	f000 fdea 	bl	d92a0 <_ZN6StringD1Ev>
    String p(param);
   d86cc:	4668      	mov	r0, sp
   d86ce:	f000 fde7 	bl	d92a0 <_ZN6StringD1Ev>
}
   d86d2:	4620      	mov	r0, r4
   d86d4:	b008      	add	sp, #32
   d86d6:	bd10      	pop	{r4, pc}

000d86d8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d86d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d86da:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d86dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d86e0:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d86e2:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d86e4:	461a      	mov	r2, r3
   d86e6:	4669      	mov	r1, sp
   d86e8:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d86ea:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d86ee:	f8ad 4000 	strh.w	r4, [sp]
   d86f2:	f7ff fd1f 	bl	d8134 <spark_function>
}
   d86f6:	b004      	add	sp, #16
   d86f8:	bd10      	pop	{r4, pc}

000d86fa <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d86fa:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d86fc:	2308      	movs	r3, #8
   d86fe:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d8702:	6803      	ldr	r3, [r0, #0]
   d8704:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d8708:	7a03      	ldrb	r3, [r0, #8]
   d870a:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d870e:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d8710:	6843      	ldr	r3, [r0, #4]
   d8712:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d8714:	4668      	mov	r0, sp
   d8716:	f7ff fd65 	bl	d81e4 <spark_cloud_disconnect>
}
   d871a:	b003      	add	sp, #12
   d871c:	f85d fb04 	ldr.w	pc, [sp], #4

000d8720 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8720:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8722:	460e      	mov	r6, r1
   d8724:	4604      	mov	r4, r0
   d8726:	f856 3b04 	ldr.w	r3, [r6], #4
   d872a:	9300      	str	r3, [sp, #0]
   d872c:	460d      	mov	r5, r1
   d872e:	a801      	add	r0, sp, #4
   d8730:	4631      	mov	r1, r6
   d8732:	f7ff fe36 	bl	d83a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8736:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8738:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d873a:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d873c:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d873e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8740:	2300      	movs	r3, #0
   d8742:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8744:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d8746:	f7fc fac3 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d874a:	4630      	mov	r0, r6
   d874c:	f7fc fac0 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8750:	4628      	mov	r0, r5
   d8752:	2108      	movs	r1, #8
   d8754:	f001 fb0f 	bl	d9d76 <_ZdlPvj>
        return p;
    }
   d8758:	4620      	mov	r0, r4
   d875a:	b002      	add	sp, #8
   d875c:	bd70      	pop	{r4, r5, r6, pc}

000d875e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d875e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8760:	b510      	push	{r4, lr}
      if (_M_empty())
   d8762:	b90a      	cbnz	r2, d8768 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d8764:	f001 fb0d 	bl	d9d82 <_ZSt25__throw_bad_function_callv>
    }
   d8768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d876c:	68c3      	ldr	r3, [r0, #12]
   d876e:	4718      	bx	r3

000d8770 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8770:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8772:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d8774:	f100 0110 	add.w	r1, r0, #16
   d8778:	f7ff fff1 	bl	d875e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d877c:	bd08      	pop	{r3, pc}

000d877e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d877e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8780:	b510      	push	{r4, lr}
      if (_M_empty())
   d8782:	b90a      	cbnz	r2, d8788 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d8784:	f001 fafd 	bl	d9d82 <_ZSt25__throw_bad_function_callv>
    }
   d8788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d878c:	68c3      	ldr	r3, [r0, #12]
   d878e:	4718      	bx	r3

000d8790 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8790:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8792:	6800      	ldr	r0, [r0, #0]
   d8794:	f100 0110 	add.w	r1, r0, #16
   d8798:	f7ff fff1 	bl	d877e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d879c:	bd08      	pop	{r3, pc}
	...

000d87a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d87a0:	b538      	push	{r3, r4, r5, lr}
   d87a2:	2300      	movs	r3, #0
   d87a4:	4604      	mov	r4, r0
   d87a6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d87a8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d87aa:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d87ac:	f7fb fc73 	bl	d4096 <_Znwj>
   d87b0:	b128      	cbz	r0, d87be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d87b2:	2301      	movs	r3, #1
   d87b4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d87b8:	4b02      	ldr	r3, [pc, #8]	; (d87c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d87ba:	6003      	str	r3, [r0, #0]
   d87bc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d87be:	6020      	str	r0, [r4, #0]
	}
   d87c0:	4620      	mov	r0, r4
   d87c2:	bd38      	pop	{r3, r4, r5, pc}
   d87c4:	000db240 	.word	0x000db240

000d87c8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d87c8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d87ca:	2300      	movs	r3, #0
   d87cc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d87ce:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d87d0:	4604      	mov	r4, r0
   d87d2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d87d4:	b12b      	cbz	r3, d87e2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d87d6:	2202      	movs	r2, #2
   d87d8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d87da:	68eb      	ldr	r3, [r5, #12]
   d87dc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d87de:	68ab      	ldr	r3, [r5, #8]
   d87e0:	60a3      	str	r3, [r4, #8]
    }
   d87e2:	4620      	mov	r0, r4
   d87e4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d87e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d87e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d87ea:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d87ec:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d87ee:	4668      	mov	r0, sp
   d87f0:	f7ff ff25 	bl	d863e <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d87f4:	f04f 0302 	mov.w	r3, #2
   d87f8:	e8d4 2f4f 	ldrexb	r2, [r4]
   d87fc:	2a00      	cmp	r2, #0
   d87fe:	d103      	bne.n	d8808 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d8800:	e8c4 3f41 	strexb	r1, r3, [r4]
   d8804:	2900      	cmp	r1, #0
   d8806:	d1f7      	bne.n	d87f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d8808:	d125      	bne.n	d8856 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d880a:	f104 050c 	add.w	r5, r4, #12
   d880e:	4669      	mov	r1, sp
   d8810:	4628      	mov	r0, r5
   d8812:	f7ff ff14 	bl	d863e <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d8816:	f3bf 8f5b 	dmb	ish
   d881a:	2301      	movs	r3, #1
   d881c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d881e:	2000      	movs	r0, #0
   d8820:	f104 0308 	add.w	r3, r4, #8
   d8824:	f3bf 8f5b 	dmb	ish
   d8828:	e853 6f00 	ldrex	r6, [r3]
   d882c:	e843 0200 	strex	r2, r0, [r3]
   d8830:	2a00      	cmp	r2, #0
   d8832:	d1f9      	bne.n	d8828 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d8834:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8838:	b16e      	cbz	r6, d8856 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d883a:	f7ff fc2b 	bl	d8094 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d883e:	b178      	cbz	r0, d8860 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8840:	4629      	mov	r1, r5
   d8842:	4630      	mov	r0, r6
   d8844:	f7ff ff8b 	bl	d875e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d8848:	4630      	mov	r0, r6
   d884a:	f7fd f873 	bl	d5934 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d884e:	2110      	movs	r1, #16
   d8850:	4630      	mov	r0, r6
   d8852:	f001 fa90 	bl	d9d76 <_ZdlPvj>
        p_->setError(std::move(error));
   d8856:	4668      	mov	r0, sp
   d8858:	f7ff fefe 	bl	d8658 <_ZN8particle5ErrorD1Ev>
    }
   d885c:	b009      	add	sp, #36	; 0x24
   d885e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8860:	4631      	mov	r1, r6
   d8862:	a802      	add	r0, sp, #8
   d8864:	f7ff ffb0 	bl	d87c8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8868:	68e0      	ldr	r0, [r4, #12]
   d886a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d886e:	b108      	cbz	r0, d8874 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d8870:	f001 ffb0 	bl	da7d4 <strdup>
        type_(type) {
   d8874:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8876:	2010      	movs	r0, #16
   d8878:	f8ad 501c 	strh.w	r5, [sp, #28]
   d887c:	f7fb fc0b 	bl	d4096 <_Znwj>
   d8880:	4605      	mov	r5, r0
   d8882:	b1e8      	cbz	r0, d88c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d8884:	2700      	movs	r7, #0
   d8886:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8888:	2018      	movs	r0, #24
   d888a:	f7fb fc04 	bl	d4096 <_Znwj>
   d888e:	4604      	mov	r4, r0
   d8890:	b188      	cbz	r0, d88b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d8892:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d8894:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8896:	a802      	add	r0, sp, #8
   d8898:	f7fd fd57 	bl	d634a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d889c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d889e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d88a0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d88a2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d88a4:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d88a6:	a906      	add	r1, sp, #24
   d88a8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d88aa:	60e3      	str	r3, [r4, #12]
   d88ac:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d88b0:	9205      	str	r2, [sp, #20]
   d88b2:	f7ff fec4 	bl	d863e <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d88b6:	4b08      	ldr	r3, [pc, #32]	; (d88d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d88b8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d88ba:	4b08      	ldr	r3, [pc, #32]	; (d88dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d88bc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d88be:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d88c0:	a806      	add	r0, sp, #24
   d88c2:	f7ff fec9 	bl	d8658 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d88c6:	a802      	add	r0, sp, #8
   d88c8:	f7fd f834 	bl	d5934 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d88cc:	2200      	movs	r2, #0
   d88ce:	4629      	mov	r1, r5
   d88d0:	4803      	ldr	r0, [pc, #12]	; (d88e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d88d2:	f7ff fbe7 	bl	d80a4 <application_thread_invoke>
   d88d6:	e7b7      	b.n	d8848 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d88d8:	000d8771 	.word	0x000d8771
   d88dc:	000d8a09 	.word	0x000d8a09
   d88e0:	000d836b 	.word	0x000d836b

000d88e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d88e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d88e8:	b08a      	sub	sp, #40	; 0x28
   d88ea:	4605      	mov	r5, r0
   d88ec:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d88f0:	460c      	mov	r4, r1
   d88f2:	4617      	mov	r7, r2
   d88f4:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d88f6:	f7ff fc35 	bl	d8164 <spark_cloud_flag_connected>
   d88fa:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d88fc:	4682      	mov	sl, r0
   d88fe:	bb38      	cbnz	r0, d8950 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8900:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8904:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8906:	a905      	add	r1, sp, #20
   d8908:	4630      	mov	r0, r6
   d890a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d890e:	f7ff fe96 	bl	d863e <_ZN8particle5ErrorC1EOS0_>
   d8912:	2014      	movs	r0, #20
   d8914:	f7fb fbbf 	bl	d4096 <_Znwj>
   d8918:	4604      	mov	r4, r0
   d891a:	b148      	cbz	r0, d8930 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d891c:	2302      	movs	r3, #2
   d891e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8920:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8922:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8926:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8928:	4631      	mov	r1, r6
   d892a:	300c      	adds	r0, #12
   d892c:	f7ff fe87 	bl	d863e <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8930:	4628      	mov	r0, r5
	: __shared_count(__p)
   d8932:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8934:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8938:	f7ff ff32 	bl	d87a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d893c:	4630      	mov	r0, r6
   d893e:	f7ff fe8b 	bl	d8658 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d8942:	a805      	add	r0, sp, #20
   d8944:	f7ff fe88 	bl	d8658 <_ZN8particle5ErrorD1Ev>
}
   d8948:	4628      	mov	r0, r5
   d894a:	b00a      	add	sp, #40	; 0x28
   d894c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8950:	230c      	movs	r3, #12
   d8952:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8956:	2014      	movs	r0, #20
   d8958:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d895c:	9307      	str	r3, [sp, #28]
   d895e:	f7fb fb9a 	bl	d4096 <_Znwj>
   d8962:	4601      	mov	r1, r0
   d8964:	b128      	cbz	r0, d8972 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8966:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d896a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d896e:	f880 a001 	strb.w	sl, [r0, #1]
   d8972:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8974:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d8976:	f7ff ff13 	bl	d87a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d897a:	4b22      	ldr	r3, [pc, #136]	; (d8a04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d897c:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d897e:	2008      	movs	r0, #8
   d8980:	f7fb fb89 	bl	d4096 <_Znwj>
   d8984:	4682      	mov	sl, r0
   d8986:	b128      	cbz	r0, d8994 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8988:	9b03      	ldr	r3, [sp, #12]
   d898a:	f840 3b04 	str.w	r3, [r0], #4
   d898e:	a904      	add	r1, sp, #16
   d8990:	f7ff fd07 	bl	d83a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8994:	9600      	str	r6, [sp, #0]
   d8996:	fa5f f389 	uxtb.w	r3, r9
   d899a:	4642      	mov	r2, r8
   d899c:	4639      	mov	r1, r7
   d899e:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d89a0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d89a4:	f7ff fbee 	bl	d8184 <spark_send_event>
   d89a8:	b9b8      	cbnz	r0, d89da <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d89aa:	9b03      	ldr	r3, [sp, #12]
   d89ac:	785b      	ldrb	r3, [r3, #1]
   d89ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d89b2:	b993      	cbnz	r3, d89da <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d89b4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d89b8:	a905      	add	r1, sp, #20
   d89ba:	a803      	add	r0, sp, #12
   d89bc:	9205      	str	r2, [sp, #20]
   d89be:	f8ad 3018 	strh.w	r3, [sp, #24]
   d89c2:	f7ff ff11 	bl	d87e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d89c6:	a805      	add	r0, sp, #20
   d89c8:	f7ff fe46 	bl	d8658 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d89cc:	a805      	add	r0, sp, #20
   d89ce:	9909      	ldr	r1, [sp, #36]	; 0x24
   d89d0:	f7ff fea6 	bl	d8720 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d89d4:	a806      	add	r0, sp, #24
   d89d6:	f7fc f97b 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d89da:	9b03      	ldr	r3, [sp, #12]
   d89dc:	9305      	str	r3, [sp, #20]
   d89de:	a904      	add	r1, sp, #16
   d89e0:	a806      	add	r0, sp, #24
   d89e2:	f7ff fcde 	bl	d83a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d89e6:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d89e8:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d89ea:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d89ec:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d89ee:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d89f0:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d89f2:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d89f4:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d89f6:	f7fc f96b 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d89fa:	a804      	add	r0, sp, #16
   d89fc:	f7fc f968 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8a00:	e7a2      	b.n	d8948 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8a02:	bf00      	nop
   d8a04:	000d8acd 	.word	0x000d8acd

000d8a08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8a08:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8a0c:	4605      	mov	r5, r0
	  switch (__op)
   d8a0e:	d007      	beq.n	d8a20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8a10:	2a03      	cmp	r2, #3
   d8a12:	d018      	beq.n	d8a46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8a14:	2a01      	cmp	r2, #1
   d8a16:	d101      	bne.n	d8a1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8a18:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8a1a:	6003      	str	r3, [r0, #0]
	}
   d8a1c:	2000      	movs	r0, #0
   d8a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8a20:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8a22:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8a24:	f7fb fb37 	bl	d4096 <_Znwj>
   d8a28:	4604      	mov	r4, r0
   d8a2a:	b150      	cbz	r0, d8a42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8a2c:	4631      	mov	r1, r6
   d8a2e:	f7ff fecb 	bl	d87c8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8a32:	6930      	ldr	r0, [r6, #16]
   d8a34:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8a38:	b108      	cbz	r0, d8a3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8a3a:	f001 fecb 	bl	da7d4 <strdup>
        type_(type) {
   d8a3e:	6120      	str	r0, [r4, #16]
   d8a40:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d8a42:	602c      	str	r4, [r5, #0]
	}
   d8a44:	e7ea      	b.n	d8a1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8a46:	6804      	ldr	r4, [r0, #0]
   d8a48:	2c00      	cmp	r4, #0
   d8a4a:	d0e7      	beq.n	d8a1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8a4c:	f104 0010 	add.w	r0, r4, #16
   d8a50:	f7ff fe02 	bl	d8658 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8a54:	4620      	mov	r0, r4
   d8a56:	f7fc ff6d 	bl	d5934 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8a5a:	2118      	movs	r1, #24
   d8a5c:	4620      	mov	r0, r4
   d8a5e:	f001 f98a 	bl	d9d76 <_ZdlPvj>
   d8a62:	e7db      	b.n	d8a1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d8a64 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d8a64:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8a66:	2300      	movs	r3, #0
   d8a68:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8a6a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8a6c:	4604      	mov	r4, r0
   d8a6e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8a70:	b12b      	cbz	r3, d8a7e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8a72:	2202      	movs	r2, #2
   d8a74:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8a76:	68eb      	ldr	r3, [r5, #12]
   d8a78:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8a7a:	68ab      	ldr	r3, [r5, #8]
   d8a7c:	60a3      	str	r3, [r4, #8]
    }
   d8a7e:	4620      	mov	r0, r4
   d8a80:	bd38      	pop	{r3, r4, r5, pc}

000d8a82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d8a82:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8a84:	b570      	push	{r4, r5, r6, lr}
   d8a86:	4604      	mov	r4, r0
	  switch (__op)
   d8a88:	d007      	beq.n	d8a9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d8a8a:	2a03      	cmp	r2, #3
   d8a8c:	d012      	beq.n	d8ab4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d8a8e:	2a01      	cmp	r2, #1
   d8a90:	d101      	bne.n	d8a96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8a92:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8a94:	6003      	str	r3, [r0, #0]
	}
   d8a96:	2000      	movs	r0, #0
   d8a98:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8a9a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8a9c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8a9e:	f7fb fafa 	bl	d4096 <_Znwj>
   d8aa2:	4605      	mov	r5, r0
   d8aa4:	b120      	cbz	r0, d8ab0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8aa6:	4631      	mov	r1, r6
   d8aa8:	f7ff ffdc 	bl	d8a64 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8aac:	7c33      	ldrb	r3, [r6, #16]
   d8aae:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8ab0:	6025      	str	r5, [r4, #0]
	}
   d8ab2:	e7f0      	b.n	d8a96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8ab4:	6804      	ldr	r4, [r0, #0]
   d8ab6:	2c00      	cmp	r4, #0
   d8ab8:	d0ed      	beq.n	d8a96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8aba:	4620      	mov	r0, r4
   d8abc:	f7fc ff3a 	bl	d5934 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8ac0:	2114      	movs	r1, #20
   d8ac2:	4620      	mov	r0, r4
   d8ac4:	f001 f957 	bl	d9d76 <_ZdlPvj>
   d8ac8:	e7e5      	b.n	d8a96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8acc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8acc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8ace:	b089      	sub	sp, #36	; 0x24
   d8ad0:	4604      	mov	r4, r0
   d8ad2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8ad4:	a801      	add	r0, sp, #4
   d8ad6:	4611      	mov	r1, r2
   d8ad8:	f7ff fe22 	bl	d8720 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8adc:	b1a4      	cbz	r4, d8b08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8ade:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8ae0:	b11d      	cbz	r5, d8aea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d8ae2:	4628      	mov	r0, r5
   d8ae4:	f001 fe76 	bl	da7d4 <strdup>
   d8ae8:	4605      	mov	r5, r0
   d8aea:	a801      	add	r0, sp, #4
   d8aec:	a903      	add	r1, sp, #12
        type_(type) {
   d8aee:	9503      	str	r5, [sp, #12]
   d8af0:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8af4:	f7ff fe78 	bl	d87e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8af8:	a803      	add	r0, sp, #12
   d8afa:	f7ff fdad 	bl	d8658 <_ZN8particle5ErrorD1Ev>
   d8afe:	a802      	add	r0, sp, #8
   d8b00:	f7fc f8e6 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8b04:	b009      	add	sp, #36	; 0x24
   d8b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8b08:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8b0a:	2301      	movs	r3, #1
   d8b0c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8b10:	2a00      	cmp	r2, #0
   d8b12:	d103      	bne.n	d8b1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8b14:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8b18:	2900      	cmp	r1, #0
   d8b1a:	d1f7      	bne.n	d8b0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8b1c:	d1ef      	bne.n	d8afe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d8b1e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8b20:	f3bf 8f5b 	dmb	ish
   d8b24:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8b26:	1d2b      	adds	r3, r5, #4
   d8b28:	f3bf 8f5b 	dmb	ish
   d8b2c:	e853 6f00 	ldrex	r6, [r3]
   d8b30:	e843 4200 	strex	r2, r4, [r3]
   d8b34:	2a00      	cmp	r2, #0
   d8b36:	d1f9      	bne.n	d8b2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8b38:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8b3c:	2e00      	cmp	r6, #0
   d8b3e:	d0de      	beq.n	d8afe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d8b40:	4620      	mov	r0, r4
   d8b42:	f7ff faa7 	bl	d8094 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8b46:	4607      	mov	r7, r0
   d8b48:	b160      	cbz	r0, d8b64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8b4a:	f105 010c 	add.w	r1, r5, #12
   d8b4e:	4630      	mov	r0, r6
   d8b50:	f7ff fe15 	bl	d877e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d8b54:	4630      	mov	r0, r6
   d8b56:	f7fc feed 	bl	d5934 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8b5a:	2110      	movs	r1, #16
   d8b5c:	4630      	mov	r0, r6
   d8b5e:	f001 f90a 	bl	d9d76 <_ZdlPvj>
   d8b62:	e7cc      	b.n	d8afe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8b64:	4631      	mov	r1, r6
   d8b66:	a803      	add	r0, sp, #12
   d8b68:	f7ff ff7c 	bl	d8a64 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8b6c:	7b2b      	ldrb	r3, [r5, #12]
   d8b6e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8b72:	2010      	movs	r0, #16
   d8b74:	f7fb fa8f 	bl	d4096 <_Znwj>
   d8b78:	4605      	mov	r5, r0
   d8b7a:	b1d0      	cbz	r0, d8bb2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d8b7c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8b7e:	2014      	movs	r0, #20
   d8b80:	f7fb fa89 	bl	d4096 <_Znwj>
   d8b84:	4604      	mov	r4, r0
   d8b86:	b178      	cbz	r0, d8ba8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d8b88:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8b8a:	4601      	mov	r1, r0
   d8b8c:	a803      	add	r0, sp, #12
   d8b8e:	f7fd fbdc 	bl	d634a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8b92:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8b94:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b96:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8b98:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d8b9a:	9205      	str	r2, [sp, #20]
   d8b9c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b9e:	60e3      	str	r3, [r4, #12]
   d8ba0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d8ba4:	9206      	str	r2, [sp, #24]
   d8ba6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8ba8:	4b06      	ldr	r3, [pc, #24]	; (d8bc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d8baa:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8bac:	4b06      	ldr	r3, [pc, #24]	; (d8bc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8bae:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8bb0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d8bb2:	a803      	add	r0, sp, #12
   d8bb4:	f7fc febe 	bl	d5934 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8bb8:	2200      	movs	r2, #0
   d8bba:	4629      	mov	r1, r5
   d8bbc:	4803      	ldr	r0, [pc, #12]	; (d8bcc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d8bbe:	f7ff fa71 	bl	d80a4 <application_thread_invoke>
   d8bc2:	e7c7      	b.n	d8b54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d8bc4:	000d8791 	.word	0x000d8791
   d8bc8:	000d8a83 	.word	0x000d8a83
   d8bcc:	000d836b 	.word	0x000d836b

000d8bd0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8bd0:	2200      	movs	r2, #0
   d8bd2:	6840      	ldr	r0, [r0, #4]
   d8bd4:	4611      	mov	r1, r2
   d8bd6:	f7ff bb45 	b.w	d8264 <network_listening>

000d8bda <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8bda:	2200      	movs	r2, #0
   d8bdc:	6840      	ldr	r0, [r0, #4]
   d8bde:	4611      	mov	r1, r2
   d8be0:	f7ff bb50 	b.w	d8284 <network_get_listen_timeout>

000d8be4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8be4:	6840      	ldr	r0, [r0, #4]
   d8be6:	2200      	movs	r2, #0
   d8be8:	f7ff bb44 	b.w	d8274 <network_set_listen_timeout>

000d8bec <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8bec:	6840      	ldr	r0, [r0, #4]
   d8bee:	2200      	movs	r2, #0
   d8bf0:	f081 0101 	eor.w	r1, r1, #1
   d8bf4:	f7ff bb2e 	b.w	d8254 <network_listen>

000d8bf8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8bf8:	2300      	movs	r3, #0
   d8bfa:	6840      	ldr	r0, [r0, #4]
   d8bfc:	461a      	mov	r2, r3
   d8bfe:	4619      	mov	r1, r3
   d8c00:	f7ff bb20 	b.w	d8244 <network_off>

000d8c04 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8c04:	2300      	movs	r3, #0
   d8c06:	6840      	ldr	r0, [r0, #4]
   d8c08:	461a      	mov	r2, r3
   d8c0a:	4619      	mov	r1, r3
   d8c0c:	f7ff bb12 	b.w	d8234 <network_on>

000d8c10 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8c10:	2200      	movs	r2, #0
   d8c12:	6840      	ldr	r0, [r0, #4]
   d8c14:	4611      	mov	r1, r2
   d8c16:	f7ff bb05 	b.w	d8224 <network_ready>

000d8c1a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8c1a:	2200      	movs	r2, #0
   d8c1c:	6840      	ldr	r0, [r0, #4]
   d8c1e:	4611      	mov	r1, r2
   d8c20:	f7ff baf0 	b.w	d8204 <network_connecting>

000d8c24 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8c24:	6840      	ldr	r0, [r0, #4]
   d8c26:	2200      	movs	r2, #0
   d8c28:	2102      	movs	r1, #2
   d8c2a:	f7ff baf3 	b.w	d8214 <network_disconnect>

000d8c2e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8c2e:	2300      	movs	r3, #0
   d8c30:	6840      	ldr	r0, [r0, #4]
   d8c32:	461a      	mov	r2, r3
   d8c34:	f7ff bade 	b.w	d81f4 <network_connect>

000d8c38 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8c38:	4b02      	ldr	r3, [pc, #8]	; (d8c44 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8c3a:	2203      	movs	r2, #3
   d8c3c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8c3e:	4a02      	ldr	r2, [pc, #8]	; (d8c48 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8c40:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d8c42:	4770      	bx	lr
   d8c44:	2003e61c 	.word	0x2003e61c
   d8c48:	000db25c 	.word	0x000db25c

000d8c4c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8c4c:	4770      	bx	lr

000d8c4e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8c50:	4606      	mov	r6, r0
   d8c52:	4615      	mov	r5, r2
   d8c54:	460c      	mov	r4, r1
   d8c56:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8c58:	42bc      	cmp	r4, r7
   d8c5a:	d006      	beq.n	d8c6a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8c5c:	6833      	ldr	r3, [r6, #0]
   d8c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8c62:	689b      	ldr	r3, [r3, #8]
   d8c64:	4630      	mov	r0, r6
   d8c66:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d8c68:	e7f6      	b.n	d8c58 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d8c6a:	4628      	mov	r0, r5
   d8c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8c6e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d8c6e:	7c00      	ldrb	r0, [r0, #16]
   d8c70:	2200      	movs	r2, #0
   d8c72:	f7ff b8bd 	b.w	d7df0 <hal_i2c_write>

000d8c76 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d8c76:	7c00      	ldrb	r0, [r0, #16]
   d8c78:	2100      	movs	r1, #0
   d8c7a:	f7ff b8c1 	b.w	d7e00 <hal_i2c_available>

000d8c7e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d8c7e:	7c00      	ldrb	r0, [r0, #16]
   d8c80:	2100      	movs	r1, #0
   d8c82:	f7ff b8c5 	b.w	d7e10 <hal_i2c_read>

000d8c86 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d8c86:	7c00      	ldrb	r0, [r0, #16]
   d8c88:	2100      	movs	r1, #0
   d8c8a:	f7ff b8c9 	b.w	d7e20 <hal_i2c_peek>

000d8c8e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d8c8e:	7c00      	ldrb	r0, [r0, #16]
   d8c90:	2100      	movs	r1, #0
   d8c92:	f7ff b8cd 	b.w	d7e30 <hal_i2c_flush>

000d8c96 <_ZN7TwoWireD0Ev>:
   d8c96:	b510      	push	{r4, lr}
   d8c98:	2114      	movs	r1, #20
   d8c9a:	4604      	mov	r4, r0
   d8c9c:	f001 f86b 	bl	d9d76 <_ZdlPvj>
   d8ca0:	4620      	mov	r0, r4
   d8ca2:	bd10      	pop	{r4, pc}

000d8ca4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8ca4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8caa:	4604      	mov	r4, r0
   d8cac:	4608      	mov	r0, r1
   d8cae:	2100      	movs	r1, #0
   d8cb0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8cb4:	4b03      	ldr	r3, [pc, #12]	; (d8cc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d8cb6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8cb8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d8cba:	4611      	mov	r1, r2
   d8cbc:	f7ff f8c8 	bl	d7e50 <hal_i2c_init>
}
   d8cc0:	4620      	mov	r0, r4
   d8cc2:	bd10      	pop	{r4, pc}
   d8cc4:	000db290 	.word	0x000db290

000d8cc8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8cc8:	2300      	movs	r3, #0
   d8cca:	7c00      	ldrb	r0, [r0, #16]
   d8ccc:	461a      	mov	r2, r3
   d8cce:	4619      	mov	r1, r3
   d8cd0:	f7ff b876 	b.w	d7dc0 <hal_i2c_begin>

000d8cd4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8cd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8cd6:	2200      	movs	r2, #0
   d8cd8:	2314      	movs	r3, #20
   d8cda:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d8cde:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d8ce2:	780b      	ldrb	r3, [r1, #0]
   d8ce4:	f88d 3008 	strb.w	r3, [sp, #8]
   d8ce8:	684b      	ldr	r3, [r1, #4]
   d8cea:	9303      	str	r3, [sp, #12]
   d8cec:	68cb      	ldr	r3, [r1, #12]
   d8cee:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d8cf0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8cf2:	7a0b      	ldrb	r3, [r1, #8]
   d8cf4:	9305      	str	r3, [sp, #20]
   d8cf6:	a901      	add	r1, sp, #4
   d8cf8:	f7ff f8c2 	bl	d7e80 <hal_i2c_request_ex>
}
   d8cfc:	b007      	add	sp, #28
   d8cfe:	f85d fb04 	ldr.w	pc, [sp], #4

000d8d02 <_ZN7TwoWire11requestFromEhjh>:
{
   d8d02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8d04:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8d06:	f88d 1000 	strb.w	r1, [sp]
   d8d0a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8d0e:	9103      	str	r1, [sp, #12]
   d8d10:	bf18      	it	ne
   d8d12:	2301      	movne	r3, #1
   d8d14:	4669      	mov	r1, sp
    size_ = size;
   d8d16:	9201      	str	r2, [sp, #4]
   d8d18:	f88d 3008 	strb.w	r3, [sp, #8]
   d8d1c:	f7ff ffda 	bl	d8cd4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8d20:	b005      	add	sp, #20
   d8d22:	f85d fb04 	ldr.w	pc, [sp], #4

000d8d26 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d8d26:	7c00      	ldrb	r0, [r0, #16]
   d8d28:	2200      	movs	r2, #0
   d8d2a:	f7ff b851 	b.w	d7dd0 <hal_i2c_begin_transmission>

000d8d2e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d8d2e:	b2c9      	uxtb	r1, r1
   d8d30:	f7ff bff9 	b.w	d8d26 <_ZN7TwoWire17beginTransmissionEh>

000d8d34 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d8d34:	7c00      	ldrb	r0, [r0, #16]
   d8d36:	2200      	movs	r2, #0
   d8d38:	f7ff b852 	b.w	d7de0 <hal_i2c_end_transmission>

000d8d3c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d8d3c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d8d3e:	2100      	movs	r1, #0
   d8d40:	7c00      	ldrb	r0, [r0, #16]
   d8d42:	f7ff f88d 	bl	d7e60 <hal_i2c_lock>
}
   d8d46:	fab0 f080 	clz	r0, r0
   d8d4a:	0940      	lsrs	r0, r0, #5
   d8d4c:	bd08      	pop	{r3, pc}

000d8d4e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d8d4e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d8d50:	2100      	movs	r1, #0
   d8d52:	7c00      	ldrb	r0, [r0, #16]
   d8d54:	f7ff f88c 	bl	d7e70 <hal_i2c_unlock>
}
   d8d58:	fab0 f080 	clz	r0, r0
   d8d5c:	0940      	lsrs	r0, r0, #5
   d8d5e:	bd08      	pop	{r3, pc}

000d8d60 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d8d60:	4700      	bx	r0
	...

000d8d64 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8d64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8d68:	2400      	movs	r4, #0
{
   d8d6a:	461d      	mov	r5, r3
   d8d6c:	460f      	mov	r7, r1
   d8d6e:	4690      	mov	r8, r2
   d8d70:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d8d72:	f7ff f80d 	bl	d7d90 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d8d76:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8d78:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d8d7c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8d80:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d8d84:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d8d88:	bfa2      	ittt	ge
   d8d8a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8d8e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d8d92:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8d94:	4907      	ldr	r1, [pc, #28]	; (d8db4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d8d96:	9400      	str	r4, [sp, #0]
   d8d98:	4643      	mov	r3, r8
   d8d9a:	463a      	mov	r2, r7
   d8d9c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8d9e:	bfa8      	it	ge
   d8da0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8da4:	f7fe ffec 	bl	d7d80 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8da8:	fab0 f080 	clz	r0, r0
   d8dac:	0940      	lsrs	r0, r0, #5
   d8dae:	b004      	add	sp, #16
   d8db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8db4:	000d8d61 	.word	0x000d8d61

000d8db8 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d8db8:	f7fe bffa 	b.w	d7db0 <HAL_Interrupts_Disable_All>

000d8dbc <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d8dbc:	f7fe bff0 	b.w	d7da0 <HAL_Interrupts_Enable_All>

000d8dc0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8dc0:	4770      	bx	lr

000d8dc2 <_ZN9IPAddressD0Ev>:
   d8dc2:	b510      	push	{r4, lr}
   d8dc4:	2118      	movs	r1, #24
   d8dc6:	4604      	mov	r4, r0
   d8dc8:	f000 ffd5 	bl	d9d76 <_ZdlPvj>
   d8dcc:	4620      	mov	r0, r4
   d8dce:	bd10      	pop	{r4, pc}

000d8dd0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8dd2:	7d03      	ldrb	r3, [r0, #20]
   d8dd4:	2b06      	cmp	r3, #6
{
   d8dd6:	b08d      	sub	sp, #52	; 0x34
   d8dd8:	460e      	mov	r6, r1
   d8dda:	f100 0704 	add.w	r7, r0, #4
   d8dde:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d8de2:	d012      	beq.n	d8e0a <_ZNK9IPAddress7printToER5Print+0x3a>
   d8de4:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d8de8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8dec:	220a      	movs	r2, #10
   d8dee:	4630      	mov	r0, r6
   d8df0:	f000 f943 	bl	d907a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8df4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8df6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d8df8:	d019      	beq.n	d8e2e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d8dfa:	2c00      	cmp	r4, #0
   d8dfc:	d0f4      	beq.n	d8de8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d8dfe:	212e      	movs	r1, #46	; 0x2e
   d8e00:	4630      	mov	r0, r6
   d8e02:	f000 f92b 	bl	d905c <_ZN5Print5printEc>
   d8e06:	4404      	add	r4, r0
   d8e08:	e7ee      	b.n	d8de8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8e0a:	232f      	movs	r3, #47	; 0x2f
   d8e0c:	466a      	mov	r2, sp
   d8e0e:	4639      	mov	r1, r7
   d8e10:	200a      	movs	r0, #10
		buf[0] = 0;
   d8e12:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8e16:	f7ff f83b 	bl	d7e90 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d8e1a:	4668      	mov	r0, sp
   d8e1c:	f001 fcf7 	bl	da80e <strlen>
   d8e20:	6833      	ldr	r3, [r6, #0]
   d8e22:	4602      	mov	r2, r0
   d8e24:	68db      	ldr	r3, [r3, #12]
   d8e26:	4669      	mov	r1, sp
   d8e28:	4630      	mov	r0, r6
   d8e2a:	4798      	blx	r3
   d8e2c:	4604      	mov	r4, r0
    }
    return n;
}
   d8e2e:	4620      	mov	r0, r4
   d8e30:	b00d      	add	sp, #52	; 0x34
   d8e32:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8e34 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d8e34:	b510      	push	{r4, lr}
   d8e36:	4b05      	ldr	r3, [pc, #20]	; (d8e4c <_ZN9IPAddressC1Ev+0x18>)
   d8e38:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8e3a:	2211      	movs	r2, #17
   d8e3c:	f840 3b04 	str.w	r3, [r0], #4
   d8e40:	2100      	movs	r1, #0
   d8e42:	f001 fc89 	bl	da758 <memset>
}
   d8e46:	4620      	mov	r0, r4
   d8e48:	bd10      	pop	{r4, pc}
   d8e4a:	bf00      	nop
   d8e4c:	000db2b8 	.word	0x000db2b8

000d8e50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d8e50:	4603      	mov	r3, r0
   d8e52:	4a07      	ldr	r2, [pc, #28]	; (d8e70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8e54:	b510      	push	{r4, lr}
   d8e56:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d8e5a:	f101 0210 	add.w	r2, r1, #16
   d8e5e:	f851 4b04 	ldr.w	r4, [r1], #4
   d8e62:	f843 4b04 	str.w	r4, [r3], #4
   d8e66:	4291      	cmp	r1, r2
   d8e68:	d1f9      	bne.n	d8e5e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8e6a:	780a      	ldrb	r2, [r1, #0]
   d8e6c:	701a      	strb	r2, [r3, #0]
}
   d8e6e:	bd10      	pop	{r4, pc}
   d8e70:	000db2b8 	.word	0x000db2b8

000d8e74 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d8e74:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8e76:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8e7a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8e7e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8e82:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d8e86:	2304      	movs	r3, #4
   d8e88:	6041      	str	r1, [r0, #4]
   d8e8a:	7503      	strb	r3, [r0, #20]
}
   d8e8c:	bd10      	pop	{r4, pc}

000d8e8e <_ZN9IPAddressaSEPKh>:
{
   d8e8e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8e90:	78cb      	ldrb	r3, [r1, #3]
   d8e92:	9300      	str	r3, [sp, #0]
   d8e94:	788b      	ldrb	r3, [r1, #2]
   d8e96:	784a      	ldrb	r2, [r1, #1]
   d8e98:	7809      	ldrb	r1, [r1, #0]
   d8e9a:	f7ff ffeb 	bl	d8e74 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8e9e:	b002      	add	sp, #8
   d8ea0:	bd10      	pop	{r4, pc}
	...

000d8ea4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8ea4:	4b01      	ldr	r3, [pc, #4]	; (d8eac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8ea6:	4a02      	ldr	r2, [pc, #8]	; (d8eb0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8ea8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d8eaa:	4770      	bx	lr
   d8eac:	2003e624 	.word	0x2003e624
   d8eb0:	000db2c4 	.word	0x000db2c4

000d8eb4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8eb4:	2300      	movs	r3, #0
   d8eb6:	6840      	ldr	r0, [r0, #4]
   d8eb8:	461a      	mov	r2, r3
   d8eba:	f7ff b99b 	b.w	d81f4 <network_connect>

000d8ebe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8ebe:	6840      	ldr	r0, [r0, #4]
   d8ec0:	2200      	movs	r2, #0
   d8ec2:	2102      	movs	r1, #2
   d8ec4:	f7ff b9a6 	b.w	d8214 <network_disconnect>

000d8ec8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8ec8:	2200      	movs	r2, #0
   d8eca:	6840      	ldr	r0, [r0, #4]
   d8ecc:	4611      	mov	r1, r2
   d8ece:	f7ff b999 	b.w	d8204 <network_connecting>

000d8ed2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8ed2:	2200      	movs	r2, #0
   d8ed4:	6840      	ldr	r0, [r0, #4]
   d8ed6:	4611      	mov	r1, r2
   d8ed8:	f7ff b9a4 	b.w	d8224 <network_ready>

000d8edc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8edc:	2300      	movs	r3, #0
   d8ede:	6840      	ldr	r0, [r0, #4]
   d8ee0:	461a      	mov	r2, r3
   d8ee2:	4619      	mov	r1, r3
   d8ee4:	f7ff b9a6 	b.w	d8234 <network_on>

000d8ee8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8ee8:	2300      	movs	r3, #0
   d8eea:	6840      	ldr	r0, [r0, #4]
   d8eec:	461a      	mov	r2, r3
   d8eee:	4619      	mov	r1, r3
   d8ef0:	f7ff b9a8 	b.w	d8244 <network_off>

000d8ef4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8ef4:	6840      	ldr	r0, [r0, #4]
   d8ef6:	2200      	movs	r2, #0
   d8ef8:	f081 0101 	eor.w	r1, r1, #1
   d8efc:	f7ff b9aa 	b.w	d8254 <network_listen>

000d8f00 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8f00:	6840      	ldr	r0, [r0, #4]
   d8f02:	2200      	movs	r2, #0
   d8f04:	f7ff b9b6 	b.w	d8274 <network_set_listen_timeout>

000d8f08 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8f08:	2200      	movs	r2, #0
   d8f0a:	6840      	ldr	r0, [r0, #4]
   d8f0c:	4611      	mov	r1, r2
   d8f0e:	f7ff b9b9 	b.w	d8284 <network_get_listen_timeout>

000d8f12 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8f12:	2200      	movs	r2, #0
   d8f14:	6840      	ldr	r0, [r0, #4]
   d8f16:	4611      	mov	r1, r2
   d8f18:	f7ff b9a4 	b.w	d8264 <network_listening>

000d8f1c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8f20:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d8f22:	b095      	sub	sp, #84	; 0x54
   d8f24:	4616      	mov	r6, r2
   d8f26:	460d      	mov	r5, r1
   d8f28:	4607      	mov	r7, r0
    IPAddress addr;
   d8f2a:	f7ff ff83 	bl	d8e34 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d8f2e:	4621      	mov	r1, r4
   d8f30:	2218      	movs	r2, #24
   d8f32:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d8f34:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8f36:	f001 fc0f 	bl	da758 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8f3a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d8f3c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8f40:	4621      	mov	r1, r4
   d8f42:	466b      	mov	r3, sp
   d8f44:	aa0c      	add	r2, sp, #48	; 0x30
   d8f46:	4630      	mov	r0, r6
   d8f48:	f7fe ffb2 	bl	d7eb0 <netdb_getaddrinfo>
    if (!r) {
   d8f4c:	4604      	mov	r4, r0
   d8f4e:	2800      	cmp	r0, #0
   d8f50:	d146      	bne.n	d8fe0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8f52:	4602      	mov	r2, r0
   d8f54:	2101      	movs	r1, #1
   d8f56:	6868      	ldr	r0, [r5, #4]
   d8f58:	f7ff f964 	bl	d8224 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8f5c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8f5e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8f60:	4622      	mov	r2, r4
   d8f62:	6868      	ldr	r0, [r5, #4]
   d8f64:	f7ff f95e 	bl	d8224 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8f68:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8f6a:	4681      	mov	r9, r0
        bool ok = false;
   d8f6c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8f6e:	2e00      	cmp	r6, #0
   d8f70:	d036      	beq.n	d8fe0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d8f72:	2900      	cmp	r1, #0
   d8f74:	d134      	bne.n	d8fe0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8f76:	6873      	ldr	r3, [r6, #4]
   d8f78:	2b02      	cmp	r3, #2
   d8f7a:	d003      	beq.n	d8f84 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d8f7c:	2b0a      	cmp	r3, #10
   d8f7e:	d00b      	beq.n	d8f98 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8f80:	69f6      	ldr	r6, [r6, #28]
   d8f82:	e7f4      	b.n	d8f6e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8f84:	f1b8 0f00 	cmp.w	r8, #0
   d8f88:	d004      	beq.n	d8f94 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8f8a:	6971      	ldr	r1, [r6, #20]
   d8f8c:	4638      	mov	r0, r7
   d8f8e:	3104      	adds	r1, #4
   d8f90:	f7ff ff7d 	bl	d8e8e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d8f94:	4641      	mov	r1, r8
   d8f96:	e7f3      	b.n	d8f80 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8f98:	f1b9 0f00 	cmp.w	r9, #0
   d8f9c:	d101      	bne.n	d8fa2 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d8f9e:	4649      	mov	r1, r9
   d8fa0:	e7ee      	b.n	d8f80 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8fa2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8fa4:	2210      	movs	r2, #16
   d8fa6:	a801      	add	r0, sp, #4
   d8fa8:	f001 fbd6 	bl	da758 <memset>
                    a.v = 6;
   d8fac:	2306      	movs	r3, #6
   d8fae:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8fb2:	ad01      	add	r5, sp, #4
   d8fb4:	f104 0308 	add.w	r3, r4, #8
   d8fb8:	3418      	adds	r4, #24
   d8fba:	6818      	ldr	r0, [r3, #0]
   d8fbc:	6859      	ldr	r1, [r3, #4]
   d8fbe:	462a      	mov	r2, r5
   d8fc0:	c203      	stmia	r2!, {r0, r1}
   d8fc2:	3308      	adds	r3, #8
   d8fc4:	42a3      	cmp	r3, r4
   d8fc6:	4615      	mov	r5, r2
   d8fc8:	d1f7      	bne.n	d8fba <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d8fca:	a901      	add	r1, sp, #4
   d8fcc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d8fce:	ad07      	add	r5, sp, #28
   d8fd0:	f7ff ff3e 	bl	d8e50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8fd6:	1d3c      	adds	r4, r7, #4
   d8fd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8fda:	682b      	ldr	r3, [r5, #0]
   d8fdc:	7023      	strb	r3, [r4, #0]
   d8fde:	e7de      	b.n	d8f9e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8fe0:	9800      	ldr	r0, [sp, #0]
   d8fe2:	f7fe ff5d 	bl	d7ea0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8fe6:	4638      	mov	r0, r7
   d8fe8:	b015      	add	sp, #84	; 0x54
   d8fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d8ff0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8ff0:	4b02      	ldr	r3, [pc, #8]	; (d8ffc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8ff2:	4a03      	ldr	r2, [pc, #12]	; (d9000 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8ff4:	601a      	str	r2, [r3, #0]
   d8ff6:	2200      	movs	r2, #0
   d8ff8:	605a      	str	r2, [r3, #4]

} // spark
   d8ffa:	4770      	bx	lr
   d8ffc:	2003e628 	.word	0x2003e628
   d9000:	000db2d0 	.word	0x000db2d0

000d9004 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d9004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9006:	4606      	mov	r6, r0
   d9008:	460d      	mov	r5, r1
  size_t n = 0;
   d900a:	188f      	adds	r7, r1, r2
   d900c:	2400      	movs	r4, #0
  while (size--) {
   d900e:	42bd      	cmp	r5, r7
   d9010:	d00c      	beq.n	d902c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d9012:	6833      	ldr	r3, [r6, #0]
   d9014:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9018:	689b      	ldr	r3, [r3, #8]
   d901a:	4630      	mov	r0, r6
   d901c:	4798      	blx	r3
     if (chunk>=0)
   d901e:	1e03      	subs	r3, r0, #0
   d9020:	db01      	blt.n	d9026 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d9022:	441c      	add	r4, r3
  while (size--) {
   d9024:	e7f3      	b.n	d900e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d9026:	2c00      	cmp	r4, #0
   d9028:	bf08      	it	eq
   d902a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d902c:	4620      	mov	r0, r4
   d902e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9030 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d9030:	b513      	push	{r0, r1, r4, lr}
   d9032:	4604      	mov	r4, r0
    }
   d9034:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d9036:	b159      	cbz	r1, d9050 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d9038:	9101      	str	r1, [sp, #4]
   d903a:	f001 fbe8 	bl	da80e <strlen>
   d903e:	6823      	ldr	r3, [r4, #0]
   d9040:	9901      	ldr	r1, [sp, #4]
   d9042:	68db      	ldr	r3, [r3, #12]
   d9044:	4602      	mov	r2, r0
   d9046:	4620      	mov	r0, r4
    }
   d9048:	b002      	add	sp, #8
   d904a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d904e:	4718      	bx	r3
    }
   d9050:	b002      	add	sp, #8
   d9052:	bd10      	pop	{r4, pc}

000d9054 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d9054:	b508      	push	{r3, lr}
  return write(str);
   d9056:	f7ff ffeb 	bl	d9030 <_ZN5Print5writeEPKc>
}
   d905a:	bd08      	pop	{r3, pc}

000d905c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d905c:	6803      	ldr	r3, [r0, #0]
   d905e:	689b      	ldr	r3, [r3, #8]
   d9060:	4718      	bx	r3

000d9062 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d9062:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d9064:	210d      	movs	r1, #13
{
   d9066:	4605      	mov	r5, r0
  size_t n = print('\r');
   d9068:	f7ff fff8 	bl	d905c <_ZN5Print5printEc>
  n += print('\n');
   d906c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d906e:	4604      	mov	r4, r0
  n += print('\n');
   d9070:	4628      	mov	r0, r5
   d9072:	f7ff fff3 	bl	d905c <_ZN5Print5printEc>
  return n;
}
   d9076:	4420      	add	r0, r4
   d9078:	bd38      	pop	{r3, r4, r5, pc}

000d907a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d907a:	b530      	push	{r4, r5, lr}
   d907c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d907e:	2300      	movs	r3, #0
   d9080:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d9084:	2a01      	cmp	r2, #1
   d9086:	bf98      	it	ls
   d9088:	220a      	movls	r2, #10
   d908a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d908c:	460d      	mov	r5, r1
   d908e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d9092:	fb01 5312 	mls	r3, r1, r2, r5
   d9096:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d909a:	2b09      	cmp	r3, #9
   d909c:	bf94      	ite	ls
   d909e:	3330      	addls	r3, #48	; 0x30
   d90a0:	3337      	addhi	r3, #55	; 0x37
   d90a2:	b2db      	uxtb	r3, r3
  } while(n);
   d90a4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d90a6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d90aa:	d9ef      	bls.n	d908c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d90ac:	4621      	mov	r1, r4
   d90ae:	f7ff ffbf 	bl	d9030 <_ZN5Print5writeEPKc>
}
   d90b2:	b00b      	add	sp, #44	; 0x2c
   d90b4:	bd30      	pop	{r4, r5, pc}

000d90b6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d90b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d90ba:	b086      	sub	sp, #24
   d90bc:	af00      	add	r7, sp, #0
   d90be:	4605      	mov	r5, r0
   d90c0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d90c2:	1d38      	adds	r0, r7, #4
   d90c4:	2114      	movs	r1, #20
{
   d90c6:	4614      	mov	r4, r2
    va_copy(args2, args);
   d90c8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d90ca:	f7ff f90b 	bl	d82e4 <vsnprintf>

    if (n<bufsize)
   d90ce:	2813      	cmp	r0, #19
   d90d0:	d80e      	bhi.n	d90f0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d90d2:	1d39      	adds	r1, r7, #4
   d90d4:	4628      	mov	r0, r5
   d90d6:	f7ff ffab 	bl	d9030 <_ZN5Print5writeEPKc>
   d90da:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d90dc:	b11e      	cbz	r6, d90e6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d90de:	4628      	mov	r0, r5
   d90e0:	f7ff ffbf 	bl	d9062 <_ZN5Print7printlnEv>
   d90e4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d90e6:	4620      	mov	r0, r4
   d90e8:	3718      	adds	r7, #24
   d90ea:	46bd      	mov	sp, r7
   d90ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d90f0:	f100 0308 	add.w	r3, r0, #8
   d90f4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d90f8:	46e8      	mov	r8, sp
        char bigger[n+1];
   d90fa:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d90fe:	4622      	mov	r2, r4
   d9100:	1c41      	adds	r1, r0, #1
   d9102:	683b      	ldr	r3, [r7, #0]
   d9104:	4668      	mov	r0, sp
   d9106:	f7ff f8ed 	bl	d82e4 <vsnprintf>
  return write(str);
   d910a:	4669      	mov	r1, sp
   d910c:	4628      	mov	r0, r5
   d910e:	f7ff ff8f 	bl	d9030 <_ZN5Print5writeEPKc>
   d9112:	4604      	mov	r4, r0
   d9114:	46c5      	mov	sp, r8
   d9116:	e7e1      	b.n	d90dc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d9118 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d9118:	b510      	push	{r4, lr}
   d911a:	4604      	mov	r4, r0
   d911c:	f7fc fc0a 	bl	d5934 <_ZNSt14_Function_baseD1Ev>
   d9120:	4620      	mov	r0, r4
   d9122:	bd10      	pop	{r4, pc}

000d9124 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d9124:	4803      	ldr	r0, [pc, #12]	; (d9134 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d9126:	4a04      	ldr	r2, [pc, #16]	; (d9138 <_GLOBAL__sub_I_RGB+0x14>)
   d9128:	4904      	ldr	r1, [pc, #16]	; (d913c <_GLOBAL__sub_I_RGB+0x18>)
   d912a:	2300      	movs	r3, #0
   d912c:	6083      	str	r3, [r0, #8]
   d912e:	f000 be1d 	b.w	d9d6c <__aeabi_atexit>
   d9132:	bf00      	nop
   d9134:	2003e630 	.word	0x2003e630
   d9138:	2003e230 	.word	0x2003e230
   d913c:	000d9119 	.word	0x000d9119

000d9140 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d9140:	2100      	movs	r1, #0
   d9142:	f7fe beed 	b.w	d7f20 <hal_spi_acquire>

000d9146 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d9146:	2100      	movs	r1, #0
   d9148:	f7fe bef2 	b.w	d7f30 <hal_spi_release>

000d914c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d914c:	b510      	push	{r4, lr}
   d914e:	4604      	mov	r4, r0
   d9150:	4608      	mov	r0, r1
{
    _spi = spi;
   d9152:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d9154:	f7fe fec4 	bl	d7ee0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9158:	2300      	movs	r3, #0
   d915a:	6063      	str	r3, [r4, #4]
}
   d915c:	4620      	mov	r0, r4
   d915e:	bd10      	pop	{r4, pc}

000d9160 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   d9160:	b513      	push	{r0, r1, r4, lr}
   d9162:	4604      	mov	r4, r0
    if (!lock())
   d9164:	7800      	ldrb	r0, [r0, #0]
{
   d9166:	9101      	str	r1, [sp, #4]
    if (!lock())
   d9168:	f7ff ffea 	bl	d9140 <_ZN8SPIClass4lockEv.isra.0>
   d916c:	9901      	ldr	r1, [sp, #4]
   d916e:	b940      	cbnz	r0, d9182 <_ZN8SPIClass5beginEt+0x22>
    {
        hal_spi_begin(_spi, ss_pin);
   d9170:	7820      	ldrb	r0, [r4, #0]
   d9172:	f7fe fea5 	bl	d7ec0 <hal_spi_begin>
        unlock();
   d9176:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9178:	b002      	add	sp, #8
   d917a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d917e:	f7ff bfe2 	b.w	d9146 <_ZN8SPIClass6unlockEv.isra.0>
}
   d9182:	b002      	add	sp, #8
   d9184:	bd10      	pop	{r4, pc}

000d9186 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d9186:	7800      	ldrb	r0, [r0, #0]
   d9188:	f7ff bfdd 	b.w	d9146 <_ZN8SPIClass6unlockEv.isra.0>

000d918c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d918c:	0840      	lsrs	r0, r0, #1
{
   d918e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d9190:	6018      	str	r0, [r3, #0]
   d9192:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d9194:	6818      	ldr	r0, [r3, #0]
   d9196:	4288      	cmp	r0, r1
   d9198:	b2e5      	uxtb	r5, r4
   d919a:	d906      	bls.n	d91aa <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d919c:	3401      	adds	r4, #1
   d919e:	2c08      	cmp	r4, #8
   d91a0:	d002      	beq.n	d91a8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d91a2:	0840      	lsrs	r0, r0, #1
   d91a4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d91a6:	e7f5      	b.n	d9194 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d91a8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d91aa:	4b02      	ldr	r3, [pc, #8]	; (d91b4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d91ac:	5d5b      	ldrb	r3, [r3, r5]
   d91ae:	7013      	strb	r3, [r2, #0]
}
   d91b0:	bd30      	pop	{r4, r5, pc}
   d91b2:	bf00      	nop
   d91b4:	000db2fc 	.word	0x000db2fc

000d91b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d91b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d91bc:	4606      	mov	r6, r0
   d91be:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d91c0:	7800      	ldrb	r0, [r0, #0]
{
   d91c2:	460d      	mov	r5, r1
    CHECK(lock());
   d91c4:	f7ff ffbc 	bl	d9140 <_ZN8SPIClass4lockEv.isra.0>
   d91c8:	2800      	cmp	r0, #0
   d91ca:	db1b      	blt.n	d9204 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d91cc:	7834      	ldrb	r4, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d91ce:	2214      	movs	r2, #20
   d91d0:	2100      	movs	r1, #0
   d91d2:	a809      	add	r0, sp, #36	; 0x24
   d91d4:	f001 fac0 	bl	da758 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d91d8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d91da:	2200      	movs	r2, #0
   d91dc:	a909      	add	r1, sp, #36	; 0x24
   d91de:	4620      	mov	r0, r4
    info->version = HAL_SPI_INFO_VERSION_1;
   d91e0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d91e4:	f7fe fe8c 	bl	d7f00 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d91e8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d91ec:	b113      	cbz	r3, d91f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d91ee:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   d91f2:	b154      	cbz	r4, d920a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d91f4:	2700      	movs	r7, #0
   d91f6:	46b9      	mov	r9, r7
   d91f8:	46b8      	mov	r8, r7
   d91fa:	2401      	movs	r4, #1
    if (default_ && other.default_)
   d91fc:	792b      	ldrb	r3, [r5, #4]
   d91fe:	b15c      	cbz	r4, d9218 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d9200:	b1c3      	cbz	r3, d9234 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d9202:	2000      	movs	r0, #0
}
   d9204:	b00f      	add	sp, #60	; 0x3c
   d9206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d920a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d920e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d9212:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d9216:	e7f1      	b.n	d91fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d9218:	2b00      	cmp	r3, #0
   d921a:	d135      	bne.n	d9288 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d921c:	68ab      	ldr	r3, [r5, #8]
   d921e:	4543      	cmp	r3, r8
   d9220:	d108      	bne.n	d9234 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d9222:	f88d 9020 	strb.w	r9, [sp, #32]
   d9226:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d922a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d922e:	89ab      	ldrh	r3, [r5, #12]
   d9230:	429a      	cmp	r2, r3
   d9232:	d0e6      	beq.n	d9202 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d9234:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d9236:	68a9      	ldr	r1, [r5, #8]
            uint8_t divisor = 0;
   d9238:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d923c:	980a      	ldr	r0, [sp, #40]	; 0x28
   d923e:	ab04      	add	r3, sp, #16
   d9240:	f10d 020f 	add.w	r2, sp, #15
   d9244:	f7ff ffa2 	bl	d918c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d9248:	7929      	ldrb	r1, [r5, #4]
   d924a:	b984      	cbnz	r4, d926e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d924c:	b989      	cbnz	r1, d9272 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d924e:	68ab      	ldr	r3, [r5, #8]
   d9250:	4543      	cmp	r3, r8
   d9252:	d30e      	bcc.n	d9272 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d9254:	f88d 9020 	strb.w	r9, [sp, #32]
   d9258:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d925c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9260:	89ab      	ldrh	r3, [r5, #12]
   d9262:	429a      	cmp	r2, r3
   d9264:	d105      	bne.n	d9272 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d9266:	9b04      	ldr	r3, [sp, #16]
   d9268:	4543      	cmp	r3, r8
   d926a:	d102      	bne.n	d9272 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d926c:	e7c9      	b.n	d9202 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d926e:	2900      	cmp	r1, #0
   d9270:	d1f9      	bne.n	d9266 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d9272:	2300      	movs	r3, #0
   d9274:	9301      	str	r3, [sp, #4]
   d9276:	7b6b      	ldrb	r3, [r5, #13]
   d9278:	9300      	str	r3, [sp, #0]
   d927a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d927e:	7b2b      	ldrb	r3, [r5, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d9280:	7830      	ldrb	r0, [r6, #0]
   d9282:	f7fe fe45 	bl	d7f10 <hal_spi_set_settings>
   d9286:	e7bc      	b.n	d9202 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d9288:	e9cd 4400 	strd	r4, r4, [sp]
   d928c:	4623      	mov	r3, r4
   d928e:	4622      	mov	r2, r4
   d9290:	2101      	movs	r1, #1
   d9292:	e7f5      	b.n	d9280 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d9294 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d9294:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d9296:	7800      	ldrb	r0, [r0, #0]
   d9298:	f7fe fe1a 	bl	d7ed0 <hal_spi_transfer>
}
   d929c:	b2c0      	uxtb	r0, r0
   d929e:	bd08      	pop	{r3, pc}

000d92a0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d92a0:	b510      	push	{r4, lr}
   d92a2:	4604      	mov	r4, r0
{
	free(buffer);
   d92a4:	6800      	ldr	r0, [r0, #0]
   d92a6:	f7fe fffd 	bl	d82a4 <free>
}
   d92aa:	4620      	mov	r0, r4
   d92ac:	bd10      	pop	{r4, pc}

000d92ae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d92ae:	b510      	push	{r4, lr}
   d92b0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d92b2:	6800      	ldr	r0, [r0, #0]
   d92b4:	b108      	cbz	r0, d92ba <_ZN6String10invalidateEv+0xc>
   d92b6:	f7fe fff5 	bl	d82a4 <free>
	buffer = NULL;
   d92ba:	2300      	movs	r3, #0
	capacity = len = 0;
   d92bc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d92c0:	6023      	str	r3, [r4, #0]
}
   d92c2:	bd10      	pop	{r4, pc}

000d92c4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d92c4:	b538      	push	{r3, r4, r5, lr}
   d92c6:	4604      	mov	r4, r0
   d92c8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d92ca:	6800      	ldr	r0, [r0, #0]
   d92cc:	3101      	adds	r1, #1
   d92ce:	f7fe fff1 	bl	d82b4 <realloc>
	if (newbuffer) {
   d92d2:	b110      	cbz	r0, d92da <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d92d4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d92d8:	2001      	movs	r0, #1
	}
	return 0;
}
   d92da:	bd38      	pop	{r3, r4, r5, pc}

000d92dc <_ZN6String7reserveEj>:
{
   d92dc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d92de:	6803      	ldr	r3, [r0, #0]
{
   d92e0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d92e2:	b123      	cbz	r3, d92ee <_ZN6String7reserveEj+0x12>
   d92e4:	6843      	ldr	r3, [r0, #4]
   d92e6:	428b      	cmp	r3, r1
   d92e8:	d301      	bcc.n	d92ee <_ZN6String7reserveEj+0x12>
   d92ea:	2001      	movs	r0, #1
}
   d92ec:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d92ee:	4620      	mov	r0, r4
   d92f0:	f7ff ffe8 	bl	d92c4 <_ZN6String12changeBufferEj>
   d92f4:	2800      	cmp	r0, #0
   d92f6:	d0f9      	beq.n	d92ec <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d92f8:	68a3      	ldr	r3, [r4, #8]
   d92fa:	2b00      	cmp	r3, #0
   d92fc:	d1f5      	bne.n	d92ea <_ZN6String7reserveEj+0xe>
   d92fe:	6822      	ldr	r2, [r4, #0]
   d9300:	7013      	strb	r3, [r2, #0]
   d9302:	e7f2      	b.n	d92ea <_ZN6String7reserveEj+0xe>

000d9304 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9304:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9306:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d9308:	4611      	mov	r1, r2
   d930a:	9201      	str	r2, [sp, #4]
{
   d930c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d930e:	f7ff ffe5 	bl	d92dc <_ZN6String7reserveEj>
   d9312:	9a01      	ldr	r2, [sp, #4]
   d9314:	b928      	cbnz	r0, d9322 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d9316:	4620      	mov	r0, r4
   d9318:	f7ff ffc9 	bl	d92ae <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d931c:	4620      	mov	r0, r4
   d931e:	b003      	add	sp, #12
   d9320:	bd30      	pop	{r4, r5, pc}
	len = length;
   d9322:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d9324:	4629      	mov	r1, r5
   d9326:	6820      	ldr	r0, [r4, #0]
   d9328:	f001 f9ee 	bl	da708 <memcpy>
	buffer[len] = 0;
   d932c:	6822      	ldr	r2, [r4, #0]
   d932e:	68a3      	ldr	r3, [r4, #8]
   d9330:	2100      	movs	r1, #0
   d9332:	54d1      	strb	r1, [r2, r3]
	return *this;
   d9334:	e7f2      	b.n	d931c <_ZN6String4copyEPKcj+0x18>

000d9336 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d9336:	2300      	movs	r3, #0
String::String(const char *cstr)
   d9338:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d933a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d933e:	4604      	mov	r4, r0
	len = 0;
   d9340:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9342:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d9344:	b141      	cbz	r1, d9358 <_ZN6StringC1EPKc+0x22>
   d9346:	4608      	mov	r0, r1
   d9348:	9101      	str	r1, [sp, #4]
   d934a:	f001 fa60 	bl	da80e <strlen>
   d934e:	9901      	ldr	r1, [sp, #4]
   d9350:	4602      	mov	r2, r0
   d9352:	4620      	mov	r0, r4
   d9354:	f7ff ffd6 	bl	d9304 <_ZN6String4copyEPKcj>
}
   d9358:	4620      	mov	r0, r4
   d935a:	b002      	add	sp, #8
   d935c:	bd10      	pop	{r4, pc}

000d935e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d935e:	4288      	cmp	r0, r1
{
   d9360:	b510      	push	{r4, lr}
   d9362:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9364:	d005      	beq.n	d9372 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9366:	680b      	ldr	r3, [r1, #0]
   d9368:	b12b      	cbz	r3, d9376 <_ZN6StringaSERKS_+0x18>
   d936a:	688a      	ldr	r2, [r1, #8]
   d936c:	4619      	mov	r1, r3
   d936e:	f7ff ffc9 	bl	d9304 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9372:	4620      	mov	r0, r4
   d9374:	bd10      	pop	{r4, pc}
	else invalidate();
   d9376:	f7ff ff9a 	bl	d92ae <_ZN6String10invalidateEv>
   d937a:	e7fa      	b.n	d9372 <_ZN6StringaSERKS_+0x14>

000d937c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d937c:	b510      	push	{r4, lr}
	buffer = NULL;
   d937e:	2300      	movs	r3, #0
String::String(const String &value)
   d9380:	4604      	mov	r4, r0
	capacity = 0;
   d9382:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d9386:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9388:	7303      	strb	r3, [r0, #12]
	*this = value;
   d938a:	f7ff ffe8 	bl	d935e <_ZN6StringaSERKS_>
}
   d938e:	4620      	mov	r0, r4
   d9390:	bd10      	pop	{r4, pc}

000d9392 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d9392:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9394:	6882      	ldr	r2, [r0, #8]
   d9396:	b93a      	cbnz	r2, d93a8 <_ZNK6String6equalsEPKc+0x16>
   d9398:	b121      	cbz	r1, d93a4 <_ZNK6String6equalsEPKc+0x12>
   d939a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d939c:	fab0 f080 	clz	r0, r0
   d93a0:	0940      	lsrs	r0, r0, #5
   d93a2:	e000      	b.n	d93a6 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d93a4:	2001      	movs	r0, #1
}
   d93a6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d93a8:	6800      	ldr	r0, [r0, #0]
   d93aa:	b909      	cbnz	r1, d93b0 <_ZNK6String6equalsEPKc+0x1e>
   d93ac:	7800      	ldrb	r0, [r0, #0]
   d93ae:	e7f5      	b.n	d939c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d93b0:	f001 f9fe 	bl	da7b0 <strcmp>
   d93b4:	e7f2      	b.n	d939c <_ZNK6String6equalsEPKc+0xa>

000d93b6 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d93b6:	b558      	push	{r3, r4, r6, lr}
   d93b8:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d93ba:	b12a      	cbz	r2, d93c8 <_ZNK6String8getBytesEPhjj+0x12>
   d93bc:	b121      	cbz	r1, d93c8 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d93be:	6884      	ldr	r4, [r0, #8]
   d93c0:	429c      	cmp	r4, r3
   d93c2:	d802      	bhi.n	d93ca <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d93c4:	2300      	movs	r3, #0
   d93c6:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d93c8:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d93ca:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d93cc:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d93ce:	6801      	ldr	r1, [r0, #0]
   d93d0:	4294      	cmp	r4, r2
   d93d2:	bf28      	it	cs
   d93d4:	4614      	movcs	r4, r2
   d93d6:	4419      	add	r1, r3
   d93d8:	4622      	mov	r2, r4
   d93da:	4630      	mov	r0, r6
   d93dc:	f001 fa1f 	bl	da81e <strncpy>
	buf[n] = 0;
   d93e0:	2300      	movs	r3, #0
   d93e2:	5533      	strb	r3, [r6, r4]
   d93e4:	e7f0      	b.n	d93c8 <_ZNK6String8getBytesEPhjj+0x12>

000d93e6 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d93e6:	b507      	push	{r0, r1, r2, lr}
   d93e8:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d93ea:	2100      	movs	r1, #0
{
   d93ec:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d93ee:	9100      	str	r1, [sp, #0]
   d93f0:	2001      	movs	r0, #1
   d93f2:	218c      	movs	r1, #140	; 0x8c
   d93f4:	f7fe fe8c 	bl	d8110 <system_reset>
}
   d93f8:	b003      	add	sp, #12
   d93fa:	f85d fb04 	ldr.w	pc, [sp], #4

000d93fe <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d93fe:	4601      	mov	r1, r0
    reset(0, flags);
   d9400:	2000      	movs	r0, #0
   d9402:	f7ff bff0 	b.w	d93e6 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d9406 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d9406:	2000      	movs	r0, #0
   d9408:	f7ff bff9 	b.w	d93fe <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000d940c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d940c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d940e:	4b09      	ldr	r3, [pc, #36]	; (d9434 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9410:	4c09      	ldr	r4, [pc, #36]	; (d9438 <_GLOBAL__sub_I_System+0x2c>)
   d9412:	2202      	movs	r2, #2
   d9414:	2000      	movs	r0, #0
   d9416:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d9418:	4b08      	ldr	r3, [pc, #32]	; (d943c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d941a:	6020      	str	r0, [r4, #0]
   d941c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d941e:	71a0      	strb	r0, [r4, #6]
   d9420:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9422:	f7fe fe1f 	bl	d8064 <set_system_mode>
SystemClass System;
   d9426:	4620      	mov	r0, r4
   d9428:	4a05      	ldr	r2, [pc, #20]	; (d9440 <_GLOBAL__sub_I_System+0x34>)
   d942a:	4906      	ldr	r1, [pc, #24]	; (d9444 <_GLOBAL__sub_I_System+0x38>)
   d942c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d9430:	f000 bc9c 	b.w	d9d6c <__aeabi_atexit>
   d9434:	2003e64c 	.word	0x2003e64c
   d9438:	2003e640 	.word	0x2003e640
   d943c:	ffff0000 	.word	0xffff0000
   d9440:	2003e230 	.word	0x2003e230
   d9444:	000d41a5 	.word	0x000d41a5

000d9448 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d944c:	4a15      	ldr	r2, [pc, #84]	; (d94a4 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d944e:	f8df 8060 	ldr.w	r8, [pc, #96]	; d94b0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d9452:	e9d2 3200 	ldrd	r3, r2, [r2]
   d9456:	18c0      	adds	r0, r0, r3
   d9458:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d945c:	4a12      	ldr	r2, [pc, #72]	; (d94a8 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d945e:	e9d2 3200 	ldrd	r3, r2, [r2]
   d9462:	18c6      	adds	r6, r0, r3
   d9464:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d9468:	e9d8 2300 	ldrd	r2, r3, [r8]
   d946c:	42bb      	cmp	r3, r7
   d946e:	bf08      	it	eq
   d9470:	42b2      	cmpeq	r2, r6
{
   d9472:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d9474:	d013      	beq.n	d949e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d9476:	a903      	add	r1, sp, #12
   d9478:	4668      	mov	r0, sp
   d947a:	e9cd 6700 	strd	r6, r7, [sp]
   d947e:	f7fe ff59 	bl	d8334 <localtime_r>
	calendar_time.tm_year += 1900;
   d9482:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9484:	4d09      	ldr	r5, [pc, #36]	; (d94ac <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d9486:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d948a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d948c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d948e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d9492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d9496:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d949a:	6823      	ldr	r3, [r4, #0]
   d949c:	602b      	str	r3, [r5, #0]
    }
}
   d949e:	b00c      	add	sp, #48	; 0x30
   d94a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d94a4:	2003e688 	.word	0x2003e688
   d94a8:	2003e680 	.word	0x2003e680
   d94ac:	2003e658 	.word	0x2003e658
   d94b0:	2003e690 	.word	0x2003e690

000d94b4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d94b4:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d94b6:	2000      	movs	r0, #0
   d94b8:	f7fe fe7c 	bl	d81b4 <spark_sync_time_pending>
   d94bc:	b128      	cbz	r0, d94ca <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d94be:	f7fe fe51 	bl	d8164 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d94c2:	f080 0001 	eor.w	r0, r0, #1
   d94c6:	b2c0      	uxtb	r0, r0
    }
   d94c8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d94ca:	2001      	movs	r0, #1
   d94cc:	e7fc      	b.n	d94c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d94d0 <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   d94d0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d94d2:	f7ff ffb9 	bl	d9448 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   d94d6:	4b02      	ldr	r3, [pc, #8]	; (d94e0 <_ZN9TimeClass7weekdayEx+0x10>)
   d94d8:	6998      	ldr	r0, [r3, #24]
}
   d94da:	3001      	adds	r0, #1
   d94dc:	bd08      	pop	{r3, pc}
   d94de:	bf00      	nop
   d94e0:	2003e658 	.word	0x2003e658

000d94e4 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d94e4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d94e6:	f7ff ffaf 	bl	d9448 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d94ea:	4b02      	ldr	r3, [pc, #8]	; (d94f4 <_ZN9TimeClass5monthEx+0x10>)
   d94ec:	6918      	ldr	r0, [r3, #16]
}
   d94ee:	3001      	adds	r0, #1
   d94f0:	bd08      	pop	{r3, pc}
   d94f2:	bf00      	nop
   d94f4:	2003e658 	.word	0x2003e658

000d94f8 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d94f8:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d94fc:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d9504:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d9506:	d411      	bmi.n	d952c <_ZN9TimeClass4zoneEf+0x34>
   d9508:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d950c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9514:	dc0a      	bgt.n	d952c <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d9516:	eddf 7a06 	vldr	s15, [pc, #24]	; d9530 <_ZN9TimeClass4zoneEf+0x38>
   d951a:	ee60 7a27 	vmul.f32	s15, s0, s15
   d951e:	ee17 0a90 	vmov	r0, s15
   d9522:	f001 f86f 	bl	da604 <__aeabi_f2lz>
   d9526:	4b03      	ldr	r3, [pc, #12]	; (d9534 <_ZN9TimeClass4zoneEf+0x3c>)
   d9528:	e9c3 0100 	strd	r0, r1, [r3]
}
   d952c:	bd08      	pop	{r3, pc}
   d952e:	bf00      	nop
   d9530:	45610000 	.word	0x45610000
   d9534:	2003e688 	.word	0x2003e688

000d9538 <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   d9538:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d953c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d9540:	b508      	push	{r3, lr}
    if (offset < 0 || offset > 2)
   d9542:	d411      	bmi.n	d9568 <_ZN9TimeClass12setDSTOffsetEf+0x30>
   d9544:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d9548:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d954c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9550:	dc0a      	bgt.n	d9568 <_ZN9TimeClass12setDSTOffsetEf+0x30>
    {
        return;
    }
    dst_cache = offset * 3600;
   d9552:	eddf 7a06 	vldr	s15, [pc, #24]	; d956c <_ZN9TimeClass12setDSTOffsetEf+0x34>
   d9556:	ee60 7a27 	vmul.f32	s15, s0, s15
   d955a:	ee17 0a90 	vmov	r0, s15
   d955e:	f001 f851 	bl	da604 <__aeabi_f2lz>
   d9562:	4b03      	ldr	r3, [pc, #12]	; (d9570 <_ZN9TimeClass12setDSTOffsetEf+0x38>)
   d9564:	e9c3 0100 	strd	r0, r1, [r3]
}
   d9568:	bd08      	pop	{r3, pc}
   d956a:	bf00      	nop
   d956c:	45610000 	.word	0x45610000
   d9570:	2003e1c0 	.word	0x2003e1c0

000d9574 <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   d9574:	4b03      	ldr	r3, [pc, #12]	; (d9584 <_ZN9TimeClass8beginDSTEv+0x10>)
   d9576:	e9d3 0100 	ldrd	r0, r1, [r3]
   d957a:	4b03      	ldr	r3, [pc, #12]	; (d9588 <_ZN9TimeClass8beginDSTEv+0x14>)
   d957c:	e9c3 0100 	strd	r0, r1, [r3]
}
   d9580:	4770      	bx	lr
   d9582:	bf00      	nop
   d9584:	2003e1c0 	.word	0x2003e1c0
   d9588:	2003e680 	.word	0x2003e680

000d958c <_ZN9TimeClass6endDSTEv>:

void TimeClass::endDST()
{
    dst_current_cache = 0;
   d958c:	4b02      	ldr	r3, [pc, #8]	; (d9598 <_ZN9TimeClass6endDSTEv+0xc>)
   d958e:	2000      	movs	r0, #0
   d9590:	2100      	movs	r1, #0
   d9592:	e9c3 0100 	strd	r0, r1, [r3]
}
   d9596:	4770      	bx	lr
   d9598:	2003e680 	.word	0x2003e680

000d959c <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d959c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d959e:	4602      	mov	r2, r0
   d95a0:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d95a2:	4668      	mov	r0, sp
    struct timeval tv = {
   d95a4:	2100      	movs	r1, #0
    };
   d95a6:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d95aa:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d95ae:	f7fe fbb7 	bl	d7d20 <hal_rtc_set_time>
   d95b2:	4602      	mov	r2, r0
   d95b4:	b910      	cbnz	r0, d95bc <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d95b6:	4601      	mov	r1, r0
   d95b8:	f7fe fd84 	bl	d80c4 <system_notify_time_changed>
    }
}
   d95bc:	b005      	add	sp, #20
   d95be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d95c4 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d95c4:	b530      	push	{r4, r5, lr}
   d95c6:	4604      	mov	r4, r0
    t += time_zone_cache;
   d95c8:	4818      	ldr	r0, [pc, #96]	; (d962c <_ZN9TimeClass7timeStrEx+0x68>)
   d95ca:	e9d0 1000 	ldrd	r1, r0, [r0]
   d95ce:	1852      	adds	r2, r2, r1
   d95d0:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d95d4:	4816      	ldr	r0, [pc, #88]	; (d9630 <_ZN9TimeClass7timeStrEx+0x6c>)
   d95d6:	e9d0 1000 	ldrd	r1, r0, [r0]
   d95da:	1852      	adds	r2, r2, r1
{
   d95dc:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d95de:	eb40 0303 	adc.w	r3, r0, r3
   d95e2:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d95e6:	2224      	movs	r2, #36	; 0x24
   d95e8:	eb0d 0002 	add.w	r0, sp, r2
   d95ec:	2100      	movs	r1, #0
   d95ee:	f001 f8b3 	bl	da758 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d95f2:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d95f4:	a909      	add	r1, sp, #36	; 0x24
   d95f6:	4668      	mov	r0, sp
   d95f8:	f7fe fe9c 	bl	d8334 <localtime_r>
    char ascstr[26] = {};
   d95fc:	2216      	movs	r2, #22
   d95fe:	4629      	mov	r1, r5
   d9600:	a803      	add	r0, sp, #12
   d9602:	9502      	str	r5, [sp, #8]
   d9604:	f001 f8a8 	bl	da758 <memset>
    asctime_r(&calendar_time, ascstr);
   d9608:	a902      	add	r1, sp, #8
   d960a:	a809      	add	r0, sp, #36	; 0x24
   d960c:	f001 f82e 	bl	da66c <asctime_r>
    int len = strlen(ascstr);
   d9610:	a802      	add	r0, sp, #8
   d9612:	f001 f8fc 	bl	da80e <strlen>
    ascstr[len-1] = 0; // remove final newline
   d9616:	ab12      	add	r3, sp, #72	; 0x48
   d9618:	4418      	add	r0, r3
    return String(ascstr);
   d961a:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d961c:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d9620:	4620      	mov	r0, r4
   d9622:	f7ff fe88 	bl	d9336 <_ZN6StringC1EPKc>
}
   d9626:	4620      	mov	r0, r4
   d9628:	b013      	add	sp, #76	; 0x4c
   d962a:	bd30      	pop	{r4, r5, pc}
   d962c:	2003e688 	.word	0x2003e688
   d9630:	2003e680 	.word	0x2003e680

000d9634 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9638:	b0a5      	sub	sp, #148	; 0x94
   d963a:	4607      	mov	r7, r0
   d963c:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d963e:	a814      	add	r0, sp, #80	; 0x50
{
   d9640:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9642:	223f      	movs	r2, #63	; 0x3f
{
   d9644:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9646:	f001 f8ea 	bl	da81e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d964a:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d964c:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d964e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9652:	f001 f8dc 	bl	da80e <strlen>
   d9656:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d9658:	bb5d      	cbnz	r5, d96b2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d965a:	492a      	ldr	r1, [pc, #168]	; (d9704 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d965c:	a803      	add	r0, sp, #12
   d965e:	f001 f8b1 	bl	da7c4 <strcpy>
   d9662:	ae14      	add	r6, sp, #80	; 0x50
{
   d9664:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d9666:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d966a:	45ab      	cmp	fp, r5
   d966c:	d936      	bls.n	d96dc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d966e:	46b1      	mov	r9, r6
   d9670:	f105 0a01 	add.w	sl, r5, #1
   d9674:	f819 3b01 	ldrb.w	r3, [r9], #1
   d9678:	2b25      	cmp	r3, #37	; 0x25
   d967a:	d117      	bne.n	d96ac <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d967c:	7873      	ldrb	r3, [r6, #1]
   d967e:	2b7a      	cmp	r3, #122	; 0x7a
   d9680:	d114      	bne.n	d96ac <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d9682:	a803      	add	r0, sp, #12
   d9684:	f001 f8c3 	bl	da80e <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d9688:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d968a:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d968c:	1828      	adds	r0, r5, r0
   d968e:	4418      	add	r0, r3
   d9690:	ebab 0205 	sub.w	r2, fp, r5
   d9694:	1cb1      	adds	r1, r6, #2
   d9696:	f001 f837 	bl	da708 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d969a:	4622      	mov	r2, r4
   d969c:	a903      	add	r1, sp, #12
   d969e:	4630      	mov	r0, r6
   d96a0:	f001 f832 	bl	da708 <memcpy>
            len = strlen(format_str);
   d96a4:	a814      	add	r0, sp, #80	; 0x50
   d96a6:	f001 f8b2 	bl	da80e <strlen>
   d96aa:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d96ac:	464e      	mov	r6, r9
   d96ae:	4655      	mov	r5, sl
   d96b0:	e7d9      	b.n	d9666 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d96b2:	213c      	movs	r1, #60	; 0x3c
   d96b4:	fb95 f3f1 	sdiv	r3, r5, r1
   d96b8:	2b00      	cmp	r3, #0
   d96ba:	bfb8      	it	lt
   d96bc:	425b      	neglt	r3, r3
   d96be:	fbb3 f2f1 	udiv	r2, r3, r1
   d96c2:	fb01 3312 	mls	r3, r1, r2, r3
   d96c6:	9300      	str	r3, [sp, #0]
   d96c8:	4a0f      	ldr	r2, [pc, #60]	; (d9708 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d96ca:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d96ce:	2110      	movs	r1, #16
   d96d0:	a803      	add	r0, sp, #12
   d96d2:	fb95 f3f3 	sdiv	r3, r5, r3
   d96d6:	f7fe fdfd 	bl	d82d4 <snprintf>
   d96da:	e7c2      	b.n	d9662 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d96dc:	2100      	movs	r1, #0
   d96de:	222e      	movs	r2, #46	; 0x2e
   d96e0:	a808      	add	r0, sp, #32
   d96e2:	9107      	str	r1, [sp, #28]
   d96e4:	f001 f838 	bl	da758 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d96e8:	4643      	mov	r3, r8
   d96ea:	aa14      	add	r2, sp, #80	; 0x50
   d96ec:	2132      	movs	r1, #50	; 0x32
   d96ee:	a807      	add	r0, sp, #28
   d96f0:	f7fe fe18 	bl	d8324 <strftime>
    return String(buf);
   d96f4:	a907      	add	r1, sp, #28
   d96f6:	4638      	mov	r0, r7
   d96f8:	f7ff fe1d 	bl	d9336 <_ZN6StringC1EPKc>
}
   d96fc:	4638      	mov	r0, r7
   d96fe:	b025      	add	sp, #148	; 0x94
   d9700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9704:	000db304 	.word	0x000db304
   d9708:	000db306 	.word	0x000db306

000d970c <_ZN9TimeClass6formatExPKc>:
{
   d970c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d970e:	b08d      	sub	sp, #52	; 0x34
   d9710:	e9cd 2300 	strd	r2, r3, [sp]
   d9714:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d9716:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d9718:	b915      	cbnz	r5, d9720 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d971a:	4b19      	ldr	r3, [pc, #100]	; (d9780 <_ZN9TimeClass6formatExPKc+0x74>)
   d971c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d971e:	b12d      	cbz	r5, d972c <_ZN9TimeClass6formatExPKc+0x20>
   d9720:	4b18      	ldr	r3, [pc, #96]	; (d9784 <_ZN9TimeClass6formatExPKc+0x78>)
   d9722:	4628      	mov	r0, r5
   d9724:	6819      	ldr	r1, [r3, #0]
   d9726:	f001 f843 	bl	da7b0 <strcmp>
   d972a:	b938      	cbnz	r0, d973c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d972c:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9730:	4620      	mov	r0, r4
   d9732:	f7ff ff47 	bl	d95c4 <_ZN9TimeClass7timeStrEx>
}
   d9736:	4620      	mov	r0, r4
   d9738:	b00d      	add	sp, #52	; 0x34
   d973a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d973c:	4e12      	ldr	r6, [pc, #72]	; (d9788 <_ZN9TimeClass6formatExPKc+0x7c>)
   d973e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d9740:	4f12      	ldr	r7, [pc, #72]	; (d978c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d9742:	e9d6 3200 	ldrd	r3, r2, [r6]
   d9746:	185b      	adds	r3, r3, r1
   d9748:	9901      	ldr	r1, [sp, #4]
   d974a:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d974e:	e9d7 0100 	ldrd	r0, r1, [r7]
   d9752:	181b      	adds	r3, r3, r0
   d9754:	eb41 0202 	adc.w	r2, r1, r2
   d9758:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d975c:	2100      	movs	r1, #0
   d975e:	2224      	movs	r2, #36	; 0x24
   d9760:	a803      	add	r0, sp, #12
   d9762:	f000 fff9 	bl	da758 <memset>
    localtime_r(&t, &calendar_time);
   d9766:	a903      	add	r1, sp, #12
   d9768:	4668      	mov	r0, sp
   d976a:	f7fe fde3 	bl	d8334 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d976e:	6832      	ldr	r2, [r6, #0]
   d9770:	683b      	ldr	r3, [r7, #0]
   d9772:	a903      	add	r1, sp, #12
   d9774:	4413      	add	r3, r2
   d9776:	4620      	mov	r0, r4
   d9778:	462a      	mov	r2, r5
   d977a:	f7ff ff5b 	bl	d9634 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d977e:	e7da      	b.n	d9736 <_ZN9TimeClass6formatExPKc+0x2a>
   d9780:	2003e654 	.word	0x2003e654
   d9784:	2003e1b8 	.word	0x2003e1b8
   d9788:	2003e688 	.word	0x2003e688
   d978c:	2003e680 	.word	0x2003e680

000d9790 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d9790:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d9792:	2000      	movs	r0, #0
   d9794:	f7fe faac 	bl	d7cf0 <hal_rtc_time_is_valid>
    if (rtcstate)
   d9798:	4604      	mov	r4, r0
   d979a:	b9a0      	cbnz	r0, d97c6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d979c:	f7fe fc5a 	bl	d8054 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d97a0:	2801      	cmp	r0, #1
   d97a2:	d110      	bne.n	d97c6 <_ZN9TimeClass7isValidEv+0x36>
   d97a4:	4620      	mov	r0, r4
   d97a6:	f7fe fc85 	bl	d80b4 <system_thread_get_state>
   d97aa:	b960      	cbnz	r0, d97c6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d97ac:	f7ff fe82 	bl	d94b4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d97b0:	b910      	cbnz	r0, d97b8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d97b2:	f7fe fcc7 	bl	d8144 <spark_process>
        while (_while() && !_condition()) {
   d97b6:	e7f9      	b.n	d97ac <_ZN9TimeClass7isValidEv+0x1c>
   d97b8:	f7ff fe7c 	bl	d94b4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d97bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d97c0:	2000      	movs	r0, #0
   d97c2:	f7fe ba95 	b.w	d7cf0 <hal_rtc_time_is_valid>
}
   d97c6:	4620      	mov	r0, r4
   d97c8:	bd10      	pop	{r4, pc}

000d97ca <_ZN9TimeClass3nowEv>:
{
   d97ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d97cc:	f7ff ffe0 	bl	d9790 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d97d0:	2210      	movs	r2, #16
   d97d2:	2100      	movs	r1, #0
   d97d4:	4668      	mov	r0, sp
   d97d6:	f000 ffbf 	bl	da758 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d97da:	2100      	movs	r1, #0
   d97dc:	4668      	mov	r0, sp
   d97de:	f7fe fa97 	bl	d7d10 <hal_rtc_get_time>
}
   d97e2:	9800      	ldr	r0, [sp, #0]
   d97e4:	b005      	add	sp, #20
   d97e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d97ec <_ZN9TimeClass4hourEv>:
{
   d97ec:	b508      	push	{r3, lr}
	return hour(now());
   d97ee:	f7ff ffec 	bl	d97ca <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d97f2:	17c1      	asrs	r1, r0, #31
   d97f4:	f7ff fe28 	bl	d9448 <_ZL22Refresh_UnixTime_Cachex>
}
   d97f8:	4b01      	ldr	r3, [pc, #4]	; (d9800 <_ZN9TimeClass4hourEv+0x14>)
   d97fa:	6898      	ldr	r0, [r3, #8]
   d97fc:	bd08      	pop	{r3, pc}
   d97fe:	bf00      	nop
   d9800:	2003e658 	.word	0x2003e658

000d9804 <_ZN9TimeClass6minuteEv>:
{
   d9804:	b508      	push	{r3, lr}
	return minute(now());
   d9806:	f7ff ffe0 	bl	d97ca <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d980a:	17c1      	asrs	r1, r0, #31
   d980c:	f7ff fe1c 	bl	d9448 <_ZL22Refresh_UnixTime_Cachex>
}
   d9810:	4b01      	ldr	r3, [pc, #4]	; (d9818 <_ZN9TimeClass6minuteEv+0x14>)
   d9812:	6858      	ldr	r0, [r3, #4]
   d9814:	bd08      	pop	{r3, pc}
   d9816:	bf00      	nop
   d9818:	2003e658 	.word	0x2003e658

000d981c <_ZN9TimeClass3dayEv>:
{
   d981c:	b508      	push	{r3, lr}
	return day(now());
   d981e:	f7ff ffd4 	bl	d97ca <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9822:	17c1      	asrs	r1, r0, #31
   d9824:	f7ff fe10 	bl	d9448 <_ZL22Refresh_UnixTime_Cachex>
}
   d9828:	4b01      	ldr	r3, [pc, #4]	; (d9830 <_ZN9TimeClass3dayEv+0x14>)
   d982a:	68d8      	ldr	r0, [r3, #12]
   d982c:	bd08      	pop	{r3, pc}
   d982e:	bf00      	nop
   d9830:	2003e658 	.word	0x2003e658

000d9834 <_ZN9TimeClass7weekdayEv>:
{
   d9834:	b508      	push	{r3, lr}
	return weekday(now());
   d9836:	f7ff ffc8 	bl	d97ca <_ZN9TimeClass3nowEv>
}
   d983a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
   d983e:	17c1      	asrs	r1, r0, #31
   d9840:	f7ff be46 	b.w	d94d0 <_ZN9TimeClass7weekdayEx>

000d9844 <_ZN9TimeClass5monthEv>:
{
   d9844:	b508      	push	{r3, lr}
	return month(now());
   d9846:	f7ff ffc0 	bl	d97ca <_ZN9TimeClass3nowEv>
}
   d984a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   d984e:	17c1      	asrs	r1, r0, #31
   d9850:	f7ff be48 	b.w	d94e4 <_ZN9TimeClass5monthEx>

000d9854 <_ZN9TimeClass4yearEv>:
{
   d9854:	b508      	push	{r3, lr}
	return year(now());
   d9856:	f7ff ffb8 	bl	d97ca <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d985a:	17c1      	asrs	r1, r0, #31
   d985c:	f7ff fdf4 	bl	d9448 <_ZL22Refresh_UnixTime_Cachex>
}
   d9860:	4b01      	ldr	r3, [pc, #4]	; (d9868 <_ZN9TimeClass4yearEv+0x14>)
   d9862:	6958      	ldr	r0, [r3, #20]
   d9864:	bd08      	pop	{r3, pc}
   d9866:	bf00      	nop
   d9868:	2003e658 	.word	0x2003e658

000d986c <_ZN9TimeClass5localEv>:
{
   d986c:	b508      	push	{r3, lr}
	return now() + time_zone_cache + dst_current_cache;
   d986e:	f7ff ffac 	bl	d97ca <_ZN9TimeClass3nowEv>
   d9872:	4b03      	ldr	r3, [pc, #12]	; (d9880 <_ZN9TimeClass5localEv+0x14>)
   d9874:	4a03      	ldr	r2, [pc, #12]	; (d9884 <_ZN9TimeClass5localEv+0x18>)
   d9876:	681b      	ldr	r3, [r3, #0]
   d9878:	6812      	ldr	r2, [r2, #0]
   d987a:	4413      	add	r3, r2
}
   d987c:	4418      	add	r0, r3
   d987e:	bd08      	pop	{r3, pc}
   d9880:	2003e688 	.word	0x2003e688
   d9884:	2003e680 	.word	0x2003e680

000d9888 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9888:	4b02      	ldr	r3, [pc, #8]	; (d9894 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d988a:	681a      	ldr	r2, [r3, #0]
   d988c:	4b02      	ldr	r3, [pc, #8]	; (d9898 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d988e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d9890:	4770      	bx	lr
   d9892:	bf00      	nop
   d9894:	2003e1b8 	.word	0x2003e1b8
   d9898:	2003e654 	.word	0x2003e654

000d989c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d989c:	4770      	bx	lr

000d989e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d989e:	7441      	strb	r1, [r0, #17]
}
   d98a0:	4770      	bx	lr

000d98a2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d98a2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d98a4:	7c00      	ldrb	r0, [r0, #16]
   d98a6:	f7fe fb83 	bl	d7fb0 <hal_usart_available_data_for_write>
}
   d98aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d98ae:	bd08      	pop	{r3, pc}

000d98b0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d98b0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d98b2:	7c00      	ldrb	r0, [r0, #16]
   d98b4:	f7fe fb54 	bl	d7f60 <hal_usart_available>
}
   d98b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d98bc:	bd08      	pop	{r3, pc}

000d98be <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d98be:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d98c0:	7c00      	ldrb	r0, [r0, #16]
   d98c2:	f7fe fb5d 	bl	d7f80 <hal_usart_peek>
}
   d98c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d98ca:	bd08      	pop	{r3, pc}

000d98cc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d98cc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d98ce:	7c00      	ldrb	r0, [r0, #16]
   d98d0:	f7fe fb4e 	bl	d7f70 <hal_usart_read>
}
   d98d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d98d8:	bd08      	pop	{r3, pc}

000d98da <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d98da:	7c00      	ldrb	r0, [r0, #16]
   d98dc:	f7fe bb58 	b.w	d7f90 <hal_usart_flush>

000d98e0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d98e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d98e2:	7c45      	ldrb	r5, [r0, #17]
{
   d98e4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d98e6:	b12d      	cbz	r5, d98f4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d98e8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d98ea:	b003      	add	sp, #12
   d98ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d98f0:	f7fe bb2e 	b.w	d7f50 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d98f4:	7c00      	ldrb	r0, [r0, #16]
   d98f6:	9101      	str	r1, [sp, #4]
   d98f8:	f7fe fb5a 	bl	d7fb0 <hal_usart_available_data_for_write>
   d98fc:	2800      	cmp	r0, #0
   d98fe:	9901      	ldr	r1, [sp, #4]
   d9900:	dcf2      	bgt.n	d98e8 <_ZN11USARTSerial5writeEh+0x8>
}
   d9902:	4628      	mov	r0, r5
   d9904:	b003      	add	sp, #12
   d9906:	bd30      	pop	{r4, r5, pc}

000d9908 <_ZN11USARTSerialD0Ev>:
   d9908:	b510      	push	{r4, lr}
   d990a:	2114      	movs	r1, #20
   d990c:	4604      	mov	r4, r0
   d990e:	f000 fa32 	bl	d9d76 <_ZdlPvj>
   d9912:	4620      	mov	r0, r4
   d9914:	bd10      	pop	{r4, pc}
	...

000d9918 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d9918:	b510      	push	{r4, lr}
   d991a:	f04f 0c00 	mov.w	ip, #0
   d991e:	4604      	mov	r4, r0
   d9920:	4608      	mov	r0, r1
   d9922:	4611      	mov	r1, r2
   d9924:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9928:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d992c:	4a04      	ldr	r2, [pc, #16]	; (d9940 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d992e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d9930:	2201      	movs	r2, #1
  _serial = serial;
   d9932:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9934:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d9936:	461a      	mov	r2, r3
   d9938:	f7fe fb02 	bl	d7f40 <hal_usart_init>
}
   d993c:	4620      	mov	r0, r4
   d993e:	bd10      	pop	{r4, pc}
   d9940:	000db338 	.word	0x000db338

000d9944 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d9944:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9946:	4c0e      	ldr	r4, [pc, #56]	; (d9980 <_Z22__fetch_global_Serial1v+0x3c>)
   d9948:	7821      	ldrb	r1, [r4, #0]
   d994a:	f3bf 8f5b 	dmb	ish
   d994e:	f011 0101 	ands.w	r1, r1, #1
   d9952:	d112      	bne.n	d997a <_Z22__fetch_global_Serial1v+0x36>
   d9954:	4620      	mov	r0, r4
   d9956:	9101      	str	r1, [sp, #4]
   d9958:	f7fa fbae 	bl	d40b8 <__cxa_guard_acquire>
   d995c:	9901      	ldr	r1, [sp, #4]
   d995e:	b160      	cbz	r0, d997a <_Z22__fetch_global_Serial1v+0x36>
   d9960:	4a08      	ldr	r2, [pc, #32]	; (d9984 <_Z22__fetch_global_Serial1v+0x40>)
   d9962:	4b09      	ldr	r3, [pc, #36]	; (d9988 <_Z22__fetch_global_Serial1v+0x44>)
   d9964:	4809      	ldr	r0, [pc, #36]	; (d998c <_Z22__fetch_global_Serial1v+0x48>)
   d9966:	f7ff ffd7 	bl	d9918 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d996a:	4620      	mov	r0, r4
   d996c:	f7fa fba9 	bl	d40c2 <__cxa_guard_release>
   d9970:	4a07      	ldr	r2, [pc, #28]	; (d9990 <_Z22__fetch_global_Serial1v+0x4c>)
   d9972:	4908      	ldr	r1, [pc, #32]	; (d9994 <_Z22__fetch_global_Serial1v+0x50>)
   d9974:	4805      	ldr	r0, [pc, #20]	; (d998c <_Z22__fetch_global_Serial1v+0x48>)
   d9976:	f000 f9f9 	bl	d9d6c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d997a:	4804      	ldr	r0, [pc, #16]	; (d998c <_Z22__fetch_global_Serial1v+0x48>)
   d997c:	b002      	add	sp, #8
   d997e:	bd10      	pop	{r4, pc}
   d9980:	2003e698 	.word	0x2003e698
   d9984:	2003e69c 	.word	0x2003e69c
   d9988:	2003e720 	.word	0x2003e720
   d998c:	2003e7a4 	.word	0x2003e7a4
   d9990:	2003e230 	.word	0x2003e230
   d9994:	000d989d 	.word	0x000d989d

000d9998 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9998:	7441      	strb	r1, [r0, #17]
}
   d999a:	4770      	bx	lr

000d999c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d999c:	4770      	bx	lr

000d999e <_ZN9USBSerial4readEv>:
{
   d999e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d99a0:	2100      	movs	r1, #0
   d99a2:	7c00      	ldrb	r0, [r0, #16]
   d99a4:	f7fe fb24 	bl	d7ff0 <HAL_USB_USART_Receive_Data>
}
   d99a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d99ac:	bd08      	pop	{r3, pc}

000d99ae <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d99ae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d99b0:	2101      	movs	r1, #1
   d99b2:	7c00      	ldrb	r0, [r0, #16]
   d99b4:	f7fe fb1c 	bl	d7ff0 <HAL_USB_USART_Receive_Data>
}
   d99b8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d99bc:	bd08      	pop	{r3, pc}

000d99be <_ZN9USBSerial17availableForWriteEv>:
{
   d99be:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d99c0:	7c00      	ldrb	r0, [r0, #16]
   d99c2:	f7fe fb0d 	bl	d7fe0 <HAL_USB_USART_Available_Data_For_Write>
}
   d99c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d99ca:	bd08      	pop	{r3, pc}

000d99cc <_ZN9USBSerial9availableEv>:
{
   d99cc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d99ce:	7c00      	ldrb	r0, [r0, #16]
   d99d0:	f7fe fafe 	bl	d7fd0 <HAL_USB_USART_Available_Data>
}
   d99d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d99d8:	bd08      	pop	{r3, pc}

000d99da <_ZN9USBSerial5writeEh>:
{
   d99da:	b513      	push	{r0, r1, r4, lr}
   d99dc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d99de:	7c00      	ldrb	r0, [r0, #16]
{
   d99e0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d99e2:	f7fe fafd 	bl	d7fe0 <HAL_USB_USART_Available_Data_For_Write>
   d99e6:	2800      	cmp	r0, #0
   d99e8:	9901      	ldr	r1, [sp, #4]
   d99ea:	dc01      	bgt.n	d99f0 <_ZN9USBSerial5writeEh+0x16>
   d99ec:	7c60      	ldrb	r0, [r4, #17]
   d99ee:	b120      	cbz	r0, d99fa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d99f0:	7c20      	ldrb	r0, [r4, #16]
   d99f2:	f7fe fb05 	bl	d8000 <HAL_USB_USART_Send_Data>
   d99f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d99fa:	b002      	add	sp, #8
   d99fc:	bd10      	pop	{r4, pc}

000d99fe <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d99fe:	7c00      	ldrb	r0, [r0, #16]
   d9a00:	f7fe bb06 	b.w	d8010 <HAL_USB_USART_Flush_Data>

000d9a04 <_ZN9USBSerialD0Ev>:
   d9a04:	b510      	push	{r4, lr}
   d9a06:	2114      	movs	r1, #20
   d9a08:	4604      	mov	r4, r0
   d9a0a:	f000 f9b4 	bl	d9d76 <_ZdlPvj>
   d9a0e:	4620      	mov	r0, r4
   d9a10:	bd10      	pop	{r4, pc}
	...

000d9a14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9a14:	b510      	push	{r4, lr}
   d9a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9a1a:	4604      	mov	r4, r0
   d9a1c:	4608      	mov	r0, r1
   d9a1e:	2100      	movs	r1, #0
   d9a20:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9a24:	4b04      	ldr	r3, [pc, #16]	; (d9a38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9a26:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d9a28:	2301      	movs	r3, #1
  _serial = serial;
   d9a2a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9a2c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d9a2e:	4611      	mov	r1, r2
   d9a30:	f7fe fac6 	bl	d7fc0 <HAL_USB_USART_Init>
}
   d9a34:	4620      	mov	r0, r4
   d9a36:	bd10      	pop	{r4, pc}
   d9a38:	000db368 	.word	0x000db368

000d9a3c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9a3c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9a3e:	2214      	movs	r2, #20
{
   d9a40:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9a42:	2100      	movs	r1, #0
   d9a44:	f000 fe88 	bl	da758 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d9a48:	4620      	mov	r0, r4
   d9a4a:	bd10      	pop	{r4, pc}

000d9a4c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d9a4c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9a4e:	4c10      	ldr	r4, [pc, #64]	; (d9a90 <_Z16_fetch_usbserialv+0x44>)
{
   d9a50:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9a52:	a803      	add	r0, sp, #12
   d9a54:	f7ff fff2 	bl	d9a3c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9a58:	7821      	ldrb	r1, [r4, #0]
   d9a5a:	f3bf 8f5b 	dmb	ish
   d9a5e:	f011 0101 	ands.w	r1, r1, #1
   d9a62:	d111      	bne.n	d9a88 <_Z16_fetch_usbserialv+0x3c>
   d9a64:	4620      	mov	r0, r4
   d9a66:	9101      	str	r1, [sp, #4]
   d9a68:	f7fa fb26 	bl	d40b8 <__cxa_guard_acquire>
   d9a6c:	9901      	ldr	r1, [sp, #4]
   d9a6e:	b158      	cbz	r0, d9a88 <_Z16_fetch_usbserialv+0x3c>
   d9a70:	aa03      	add	r2, sp, #12
   d9a72:	4808      	ldr	r0, [pc, #32]	; (d9a94 <_Z16_fetch_usbserialv+0x48>)
   d9a74:	f7ff ffce 	bl	d9a14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9a78:	4620      	mov	r0, r4
   d9a7a:	f7fa fb22 	bl	d40c2 <__cxa_guard_release>
   d9a7e:	4a06      	ldr	r2, [pc, #24]	; (d9a98 <_Z16_fetch_usbserialv+0x4c>)
   d9a80:	4906      	ldr	r1, [pc, #24]	; (d9a9c <_Z16_fetch_usbserialv+0x50>)
   d9a82:	4804      	ldr	r0, [pc, #16]	; (d9a94 <_Z16_fetch_usbserialv+0x48>)
   d9a84:	f000 f972 	bl	d9d6c <__aeabi_atexit>
	return _usbserial;
}
   d9a88:	4802      	ldr	r0, [pc, #8]	; (d9a94 <_Z16_fetch_usbserialv+0x48>)
   d9a8a:	b008      	add	sp, #32
   d9a8c:	bd10      	pop	{r4, pc}
   d9a8e:	bf00      	nop
   d9a90:	2003e7b8 	.word	0x2003e7b8
   d9a94:	2003e7bc 	.word	0x2003e7bc
   d9a98:	2003e230 	.word	0x2003e230
   d9a9c:	000d999d 	.word	0x000d999d

000d9aa0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d9aa0:	4b01      	ldr	r3, [pc, #4]	; (d9aa8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d9aa2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d9aa4:	4770      	bx	lr
   d9aa6:	bf00      	nop
   d9aa8:	2003e1c8 	.word	0x2003e1c8

000d9aac <serialEventRun>:
{
   d9aac:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d9aae:	4b0b      	ldr	r3, [pc, #44]	; (d9adc <serialEventRun+0x30>)
   d9ab0:	b143      	cbz	r3, d9ac4 <serialEventRun+0x18>
   d9ab2:	f7ff ffcb 	bl	d9a4c <_Z16_fetch_usbserialv>
   d9ab6:	6803      	ldr	r3, [r0, #0]
   d9ab8:	691b      	ldr	r3, [r3, #16]
   d9aba:	4798      	blx	r3
   d9abc:	2800      	cmp	r0, #0
   d9abe:	dd01      	ble.n	d9ac4 <serialEventRun+0x18>
        serialEvent();
   d9ac0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d9ac4:	4b06      	ldr	r3, [pc, #24]	; (d9ae0 <serialEventRun+0x34>)
   d9ac6:	b143      	cbz	r3, d9ada <serialEventRun+0x2e>
   d9ac8:	f7ff ff3c 	bl	d9944 <_Z22__fetch_global_Serial1v>
   d9acc:	6803      	ldr	r3, [r0, #0]
   d9ace:	691b      	ldr	r3, [r3, #16]
   d9ad0:	4798      	blx	r3
   d9ad2:	2800      	cmp	r0, #0
   d9ad4:	dd01      	ble.n	d9ada <serialEventRun+0x2e>
        serialEvent1();
   d9ad6:	f3af 8000 	nop.w
}
   d9ada:	bd08      	pop	{r3, pc}
	...

000d9ae4 <_post_loop>:
{
   d9ae4:	b508      	push	{r3, lr}
	serialEventRun();
   d9ae6:	f7ff ffe1 	bl	d9aac <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d9aea:	f7fe f8e9 	bl	d7cc0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9aee:	4b01      	ldr	r3, [pc, #4]	; (d9af4 <_post_loop+0x10>)
   d9af0:	6018      	str	r0, [r3, #0]
}
   d9af2:	bd08      	pop	{r3, pc}
   d9af4:	2003e7d8 	.word	0x2003e7d8

000d9af8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9af8:	4802      	ldr	r0, [pc, #8]	; (d9b04 <_Z33system_initialize_user_backup_ramv+0xc>)
   d9afa:	4a03      	ldr	r2, [pc, #12]	; (d9b08 <_Z33system_initialize_user_backup_ramv+0x10>)
   d9afc:	4903      	ldr	r1, [pc, #12]	; (d9b0c <_Z33system_initialize_user_backup_ramv+0x14>)
   d9afe:	1a12      	subs	r2, r2, r0
   d9b00:	f000 be02 	b.w	da708 <memcpy>
   d9b04:	2003f400 	.word	0x2003f400
   d9b08:	2003fc1c 	.word	0x2003fc1c
   d9b0c:	000db530 	.word	0x000db530

000d9b10 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9b10:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9b12:	2300      	movs	r3, #0
   d9b14:	9300      	str	r3, [sp, #0]
   d9b16:	461a      	mov	r2, r3
   d9b18:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9b1c:	f7fe fae4 	bl	d80e8 <system_ctrl_set_result>
}
   d9b20:	b003      	add	sp, #12
   d9b22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9b28 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d9b28:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d9b2a:	8843      	ldrh	r3, [r0, #2]
   d9b2c:	2b0a      	cmp	r3, #10
   d9b2e:	d008      	beq.n	d9b42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9b30:	2b50      	cmp	r3, #80	; 0x50
   d9b32:	d10b      	bne.n	d9b4c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d9b34:	4b09      	ldr	r3, [pc, #36]	; (d9b5c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d9b36:	681b      	ldr	r3, [r3, #0]
   d9b38:	b14b      	cbz	r3, d9b4e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d9b3a:	b003      	add	sp, #12
   d9b3c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d9b40:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d9b42:	f7ff ffe5 	bl	d9b10 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d9b46:	b003      	add	sp, #12
   d9b48:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9b4c:	2300      	movs	r3, #0
   d9b4e:	9300      	str	r3, [sp, #0]
   d9b50:	461a      	mov	r2, r3
   d9b52:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9b56:	f7fe fac7 	bl	d80e8 <system_ctrl_set_result>
}
   d9b5a:	e7f4      	b.n	d9b46 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d9b5c:	2003e7d4 	.word	0x2003e7d4

000d9b60 <module_user_init_hook>:
{
   d9b60:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9b62:	4c12      	ldr	r4, [pc, #72]	; (d9bac <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d9b64:	4812      	ldr	r0, [pc, #72]	; (d9bb0 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9b66:	4d13      	ldr	r5, [pc, #76]	; (d9bb4 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d9b68:	2100      	movs	r1, #0
   d9b6a:	f7fe fbd3 	bl	d8314 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9b6e:	6823      	ldr	r3, [r4, #0]
   d9b70:	42ab      	cmp	r3, r5
   d9b72:	4b11      	ldr	r3, [pc, #68]	; (d9bb8 <module_user_init_hook+0x58>)
   d9b74:	bf0c      	ite	eq
   d9b76:	2201      	moveq	r2, #1
   d9b78:	2200      	movne	r2, #0
   d9b7a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d9b7c:	d002      	beq.n	d9b84 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d9b7e:	f7ff ffbb 	bl	d9af8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d9b82:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9b84:	f7fe f884 	bl	d7c90 <HAL_RNG_GetRandomNumber>
   d9b88:	4604      	mov	r4, r0
    srand(seed);
   d9b8a:	f000 fded 	bl	da768 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9b8e:	4b0b      	ldr	r3, [pc, #44]	; (d9bbc <module_user_init_hook+0x5c>)
   d9b90:	b113      	cbz	r3, d9b98 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d9b92:	4620      	mov	r0, r4
   d9b94:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9b98:	2100      	movs	r1, #0
   d9b9a:	4808      	ldr	r0, [pc, #32]	; (d9bbc <module_user_init_hook+0x5c>)
   d9b9c:	f7fe fb1a 	bl	d81d4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d9ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9ba4:	4806      	ldr	r0, [pc, #24]	; (d9bc0 <module_user_init_hook+0x60>)
   d9ba6:	2100      	movs	r1, #0
   d9ba8:	f7fe ba94 	b.w	d80d4 <system_ctrl_set_app_request_handler>
   d9bac:	2003fc18 	.word	0x2003fc18
   d9bb0:	000d9aa1 	.word	0x000d9aa1
   d9bb4:	9a271c1e 	.word	0x9a271c1e
   d9bb8:	2003e7d0 	.word	0x2003e7d0
   d9bbc:	00000000 	.word	0x00000000
   d9bc0:	000d9b29 	.word	0x000d9b29

000d9bc4 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d9bc4:	b508      	push	{r3, lr}
   d9bc6:	4b02      	ldr	r3, [pc, #8]	; (d9bd0 <spark_protocol_instance+0xc>)
   d9bc8:	681b      	ldr	r3, [r3, #0]
   d9bca:	681b      	ldr	r3, [r3, #0]
   d9bcc:	9301      	str	r3, [sp, #4]
   d9bce:	bd08      	pop	{r3, pc}
   d9bd0:	0003025c 	.word	0x0003025c

000d9bd4 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d9bd4:	b508      	push	{r3, lr}
   d9bd6:	4b02      	ldr	r3, [pc, #8]	; (d9be0 <spark_protocol_set_product_id+0xc>)
   d9bd8:	681b      	ldr	r3, [r3, #0]
   d9bda:	685b      	ldr	r3, [r3, #4]
   d9bdc:	9301      	str	r3, [sp, #4]
   d9bde:	bd08      	pop	{r3, pc}
   d9be0:	0003025c 	.word	0x0003025c

000d9be4 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d9be4:	b508      	push	{r3, lr}
   d9be6:	4b02      	ldr	r3, [pc, #8]	; (d9bf0 <spark_protocol_set_product_firmware_version+0xc>)
   d9be8:	681b      	ldr	r3, [r3, #0]
   d9bea:	689b      	ldr	r3, [r3, #8]
   d9bec:	9301      	str	r3, [sp, #4]
   d9bee:	bd08      	pop	{r3, pc}
   d9bf0:	0003025c 	.word	0x0003025c

000d9bf4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d9bf4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d9bf6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d9bf8:	d902      	bls.n	d9c00 <pinAvailable+0xc>
    return false;
   d9bfa:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d9bfc:	b002      	add	sp, #8
   d9bfe:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d9c00:	f1a0 030b 	sub.w	r3, r0, #11
   d9c04:	2b02      	cmp	r3, #2
   d9c06:	d81a      	bhi.n	d9c3e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9c08:	4c17      	ldr	r4, [pc, #92]	; (d9c68 <pinAvailable+0x74>)
   d9c0a:	7821      	ldrb	r1, [r4, #0]
   d9c0c:	f3bf 8f5b 	dmb	ish
   d9c10:	f011 0101 	ands.w	r1, r1, #1
   d9c14:	d10b      	bne.n	d9c2e <pinAvailable+0x3a>
   d9c16:	4620      	mov	r0, r4
   d9c18:	9101      	str	r1, [sp, #4]
   d9c1a:	f7fa fa4d 	bl	d40b8 <__cxa_guard_acquire>
   d9c1e:	9901      	ldr	r1, [sp, #4]
   d9c20:	b128      	cbz	r0, d9c2e <pinAvailable+0x3a>
   d9c22:	4812      	ldr	r0, [pc, #72]	; (d9c6c <pinAvailable+0x78>)
   d9c24:	f7ff fa92 	bl	d914c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d9c28:	4620      	mov	r0, r4
   d9c2a:	f7fa fa4a 	bl	d40c2 <__cxa_guard_release>
   d9c2e:	4b0f      	ldr	r3, [pc, #60]	; (d9c6c <pinAvailable+0x78>)
   d9c30:	7818      	ldrb	r0, [r3, #0]
   d9c32:	f7fe f95d 	bl	d7ef0 <hal_spi_is_enabled>
   d9c36:	2800      	cmp	r0, #0
   d9c38:	d1df      	bne.n	d9bfa <pinAvailable+0x6>
  return true; // 'pin' is available
   d9c3a:	2001      	movs	r0, #1
   d9c3c:	e7de      	b.n	d9bfc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d9c3e:	2801      	cmp	r0, #1
   d9c40:	d809      	bhi.n	d9c56 <pinAvailable+0x62>
   d9c42:	f000 f86b 	bl	d9d1c <_Z19__fetch_global_Wirev>
   d9c46:	2100      	movs	r1, #0
   d9c48:	7c00      	ldrb	r0, [r0, #16]
   d9c4a:	f7fe f8f9 	bl	d7e40 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d9c4e:	f080 0001 	eor.w	r0, r0, #1
   d9c52:	b2c0      	uxtb	r0, r0
   d9c54:	e7d2      	b.n	d9bfc <pinAvailable+0x8>
   d9c56:	3809      	subs	r0, #9
   d9c58:	2801      	cmp	r0, #1
   d9c5a:	d8ee      	bhi.n	d9c3a <pinAvailable+0x46>
   d9c5c:	f7ff fe72 	bl	d9944 <_Z22__fetch_global_Serial1v>
   d9c60:	7c00      	ldrb	r0, [r0, #16]
   d9c62:	f7fe f99d 	bl	d7fa0 <hal_usart_is_enabled>
   d9c66:	e7f2      	b.n	d9c4e <pinAvailable+0x5a>
   d9c68:	2003e3fc 	.word	0x2003e3fc
   d9c6c:	2003e400 	.word	0x2003e400

000d9c70 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9c70:	2823      	cmp	r0, #35	; 0x23
{
   d9c72:	b538      	push	{r3, r4, r5, lr}
   d9c74:	4604      	mov	r4, r0
   d9c76:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9c78:	d80a      	bhi.n	d9c90 <pinMode+0x20>
   d9c7a:	29ff      	cmp	r1, #255	; 0xff
   d9c7c:	d008      	beq.n	d9c90 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d9c7e:	f7ff ffb9 	bl	d9bf4 <pinAvailable>
   d9c82:	b128      	cbz	r0, d9c90 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d9c84:	4629      	mov	r1, r5
   d9c86:	4620      	mov	r0, r4
}
   d9c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d9c8c:	f7fe b858 	b.w	d7d40 <HAL_Pin_Mode>
}
   d9c90:	bd38      	pop	{r3, r4, r5, pc}

000d9c92 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d9c92:	b538      	push	{r3, r4, r5, lr}
   d9c94:	4604      	mov	r4, r0
   d9c96:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9c98:	f7fe f85a 	bl	d7d50 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9c9c:	28ff      	cmp	r0, #255	; 0xff
   d9c9e:	d010      	beq.n	d9cc2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d9ca0:	2806      	cmp	r0, #6
   d9ca2:	d804      	bhi.n	d9cae <digitalWrite+0x1c>
   d9ca4:	234d      	movs	r3, #77	; 0x4d
   d9ca6:	fa23 f000 	lsr.w	r0, r3, r0
   d9caa:	07c3      	lsls	r3, r0, #31
   d9cac:	d409      	bmi.n	d9cc2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9cae:	4620      	mov	r0, r4
   d9cb0:	f7ff ffa0 	bl	d9bf4 <pinAvailable>
   d9cb4:	b128      	cbz	r0, d9cc2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9cb6:	4629      	mov	r1, r5
   d9cb8:	4620      	mov	r0, r4
}
   d9cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d9cbe:	f7fe b84f 	b.w	d7d60 <HAL_GPIO_Write>
}
   d9cc2:	bd38      	pop	{r3, r4, r5, pc}

000d9cc4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d9cc4:	b510      	push	{r4, lr}
   d9cc6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9cc8:	f7fe f842 	bl	d7d50 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d9ccc:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d9cce:	b2db      	uxtb	r3, r3
   d9cd0:	2b01      	cmp	r3, #1
   d9cd2:	d908      	bls.n	d9ce6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d9cd4:	4620      	mov	r0, r4
   d9cd6:	f7ff ff8d 	bl	d9bf4 <pinAvailable>
   d9cda:	b120      	cbz	r0, d9ce6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9cdc:	4620      	mov	r0, r4
}
   d9cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d9ce2:	f7fe b845 	b.w	d7d70 <HAL_GPIO_Read>
}
   d9ce6:	2000      	movs	r0, #0
   d9ce8:	bd10      	pop	{r4, pc}
	...

000d9cec <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d9cec:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d9cee:	2300      	movs	r3, #0
   d9cf0:	2520      	movs	r5, #32
   d9cf2:	8043      	strh	r3, [r0, #2]
   d9cf4:	2314      	movs	r3, #20
{
   d9cf6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d9cf8:	8003      	strh	r3, [r0, #0]
   d9cfa:	6085      	str	r5, [r0, #8]
   d9cfc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9cfe:	4906      	ldr	r1, [pc, #24]	; (d9d18 <_Z17acquireWireBufferv+0x2c>)
   d9d00:	4628      	mov	r0, r5
   d9d02:	f000 f83c 	bl	d9d7e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9d06:	4904      	ldr	r1, [pc, #16]	; (d9d18 <_Z17acquireWireBufferv+0x2c>)
	};
   d9d08:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9d0a:	4628      	mov	r0, r5
   d9d0c:	f000 f837 	bl	d9d7e <_ZnajRKSt9nothrow_t>
	};
   d9d10:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d9d12:	4620      	mov	r0, r4
   d9d14:	bd38      	pop	{r3, r4, r5, pc}
   d9d16:	bf00      	nop
   d9d18:	000db390 	.word	0x000db390

000d9d1c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9d1c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9d1e:	4d0f      	ldr	r5, [pc, #60]	; (d9d5c <_Z19__fetch_global_Wirev+0x40>)
   d9d20:	7829      	ldrb	r1, [r5, #0]
   d9d22:	f3bf 8f5b 	dmb	ish
   d9d26:	f011 0401 	ands.w	r4, r1, #1
{
   d9d2a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9d2c:	d113      	bne.n	d9d56 <_Z19__fetch_global_Wirev+0x3a>
   d9d2e:	4628      	mov	r0, r5
   d9d30:	f7fa f9c2 	bl	d40b8 <__cxa_guard_acquire>
   d9d34:	b178      	cbz	r0, d9d56 <_Z19__fetch_global_Wirev+0x3a>
   d9d36:	a801      	add	r0, sp, #4
   d9d38:	f7ff ffd8 	bl	d9cec <_Z17acquireWireBufferv>
   d9d3c:	aa01      	add	r2, sp, #4
   d9d3e:	4621      	mov	r1, r4
   d9d40:	4807      	ldr	r0, [pc, #28]	; (d9d60 <_Z19__fetch_global_Wirev+0x44>)
   d9d42:	f7fe ffaf 	bl	d8ca4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d9d46:	4628      	mov	r0, r5
   d9d48:	f7fa f9bb 	bl	d40c2 <__cxa_guard_release>
   d9d4c:	4a05      	ldr	r2, [pc, #20]	; (d9d64 <_Z19__fetch_global_Wirev+0x48>)
   d9d4e:	4906      	ldr	r1, [pc, #24]	; (d9d68 <_Z19__fetch_global_Wirev+0x4c>)
   d9d50:	4803      	ldr	r0, [pc, #12]	; (d9d60 <_Z19__fetch_global_Wirev+0x44>)
   d9d52:	f000 f80b 	bl	d9d6c <__aeabi_atexit>
	return wire;
}
   d9d56:	4802      	ldr	r0, [pc, #8]	; (d9d60 <_Z19__fetch_global_Wirev+0x44>)
   d9d58:	b007      	add	sp, #28
   d9d5a:	bd30      	pop	{r4, r5, pc}
   d9d5c:	2003e7dc 	.word	0x2003e7dc
   d9d60:	2003e7e0 	.word	0x2003e7e0
   d9d64:	2003e230 	.word	0x2003e230
   d9d68:	000d8c4d 	.word	0x000d8c4d

000d9d6c <__aeabi_atexit>:
   d9d6c:	460b      	mov	r3, r1
   d9d6e:	4601      	mov	r1, r0
   d9d70:	4618      	mov	r0, r3
   d9d72:	f000 bca9 	b.w	da6c8 <__cxa_atexit>

000d9d76 <_ZdlPvj>:
   d9d76:	f7fa b992 	b.w	d409e <_ZdlPv>

000d9d7a <_ZnwjRKSt9nothrow_t>:
   d9d7a:	f7fa b98c 	b.w	d4096 <_Znwj>

000d9d7e <_ZnajRKSt9nothrow_t>:
   d9d7e:	f7fa b98c 	b.w	d409a <_Znaj>

000d9d82 <_ZSt25__throw_bad_function_callv>:
   d9d82:	b508      	push	{r3, lr}
   d9d84:	f7fe fab6 	bl	d82f4 <abort>

000d9d88 <__aeabi_drsub>:
   d9d88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9d8c:	e002      	b.n	d9d94 <__adddf3>
   d9d8e:	bf00      	nop

000d9d90 <__aeabi_dsub>:
   d9d90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9d94 <__adddf3>:
   d9d94:	b530      	push	{r4, r5, lr}
   d9d96:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9d9a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9d9e:	ea94 0f05 	teq	r4, r5
   d9da2:	bf08      	it	eq
   d9da4:	ea90 0f02 	teqeq	r0, r2
   d9da8:	bf1f      	itttt	ne
   d9daa:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9dae:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9db2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9db6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9dba:	f000 80e2 	beq.w	d9f82 <__adddf3+0x1ee>
   d9dbe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9dc2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d9dc6:	bfb8      	it	lt
   d9dc8:	426d      	neglt	r5, r5
   d9dca:	dd0c      	ble.n	d9de6 <__adddf3+0x52>
   d9dcc:	442c      	add	r4, r5
   d9dce:	ea80 0202 	eor.w	r2, r0, r2
   d9dd2:	ea81 0303 	eor.w	r3, r1, r3
   d9dd6:	ea82 0000 	eor.w	r0, r2, r0
   d9dda:	ea83 0101 	eor.w	r1, r3, r1
   d9dde:	ea80 0202 	eor.w	r2, r0, r2
   d9de2:	ea81 0303 	eor.w	r3, r1, r3
   d9de6:	2d36      	cmp	r5, #54	; 0x36
   d9de8:	bf88      	it	hi
   d9dea:	bd30      	pophi	{r4, r5, pc}
   d9dec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9df0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9df4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9df8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9dfc:	d002      	beq.n	d9e04 <__adddf3+0x70>
   d9dfe:	4240      	negs	r0, r0
   d9e00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9e04:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9e08:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9e0c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9e10:	d002      	beq.n	d9e18 <__adddf3+0x84>
   d9e12:	4252      	negs	r2, r2
   d9e14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9e18:	ea94 0f05 	teq	r4, r5
   d9e1c:	f000 80a7 	beq.w	d9f6e <__adddf3+0x1da>
   d9e20:	f1a4 0401 	sub.w	r4, r4, #1
   d9e24:	f1d5 0e20 	rsbs	lr, r5, #32
   d9e28:	db0d      	blt.n	d9e46 <__adddf3+0xb2>
   d9e2a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9e2e:	fa22 f205 	lsr.w	r2, r2, r5
   d9e32:	1880      	adds	r0, r0, r2
   d9e34:	f141 0100 	adc.w	r1, r1, #0
   d9e38:	fa03 f20e 	lsl.w	r2, r3, lr
   d9e3c:	1880      	adds	r0, r0, r2
   d9e3e:	fa43 f305 	asr.w	r3, r3, r5
   d9e42:	4159      	adcs	r1, r3
   d9e44:	e00e      	b.n	d9e64 <__adddf3+0xd0>
   d9e46:	f1a5 0520 	sub.w	r5, r5, #32
   d9e4a:	f10e 0e20 	add.w	lr, lr, #32
   d9e4e:	2a01      	cmp	r2, #1
   d9e50:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9e54:	bf28      	it	cs
   d9e56:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9e5a:	fa43 f305 	asr.w	r3, r3, r5
   d9e5e:	18c0      	adds	r0, r0, r3
   d9e60:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9e64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9e68:	d507      	bpl.n	d9e7a <__adddf3+0xe6>
   d9e6a:	f04f 0e00 	mov.w	lr, #0
   d9e6e:	f1dc 0c00 	rsbs	ip, ip, #0
   d9e72:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9e76:	eb6e 0101 	sbc.w	r1, lr, r1
   d9e7a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9e7e:	d31b      	bcc.n	d9eb8 <__adddf3+0x124>
   d9e80:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9e84:	d30c      	bcc.n	d9ea0 <__adddf3+0x10c>
   d9e86:	0849      	lsrs	r1, r1, #1
   d9e88:	ea5f 0030 	movs.w	r0, r0, rrx
   d9e8c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9e90:	f104 0401 	add.w	r4, r4, #1
   d9e94:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9e98:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9e9c:	f080 809a 	bcs.w	d9fd4 <__adddf3+0x240>
   d9ea0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9ea4:	bf08      	it	eq
   d9ea6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9eaa:	f150 0000 	adcs.w	r0, r0, #0
   d9eae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9eb2:	ea41 0105 	orr.w	r1, r1, r5
   d9eb6:	bd30      	pop	{r4, r5, pc}
   d9eb8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9ebc:	4140      	adcs	r0, r0
   d9ebe:	eb41 0101 	adc.w	r1, r1, r1
   d9ec2:	3c01      	subs	r4, #1
   d9ec4:	bf28      	it	cs
   d9ec6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d9eca:	d2e9      	bcs.n	d9ea0 <__adddf3+0x10c>
   d9ecc:	f091 0f00 	teq	r1, #0
   d9ed0:	bf04      	itt	eq
   d9ed2:	4601      	moveq	r1, r0
   d9ed4:	2000      	moveq	r0, #0
   d9ed6:	fab1 f381 	clz	r3, r1
   d9eda:	bf08      	it	eq
   d9edc:	3320      	addeq	r3, #32
   d9ede:	f1a3 030b 	sub.w	r3, r3, #11
   d9ee2:	f1b3 0220 	subs.w	r2, r3, #32
   d9ee6:	da0c      	bge.n	d9f02 <__adddf3+0x16e>
   d9ee8:	320c      	adds	r2, #12
   d9eea:	dd08      	ble.n	d9efe <__adddf3+0x16a>
   d9eec:	f102 0c14 	add.w	ip, r2, #20
   d9ef0:	f1c2 020c 	rsb	r2, r2, #12
   d9ef4:	fa01 f00c 	lsl.w	r0, r1, ip
   d9ef8:	fa21 f102 	lsr.w	r1, r1, r2
   d9efc:	e00c      	b.n	d9f18 <__adddf3+0x184>
   d9efe:	f102 0214 	add.w	r2, r2, #20
   d9f02:	bfd8      	it	le
   d9f04:	f1c2 0c20 	rsble	ip, r2, #32
   d9f08:	fa01 f102 	lsl.w	r1, r1, r2
   d9f0c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9f10:	bfdc      	itt	le
   d9f12:	ea41 010c 	orrle.w	r1, r1, ip
   d9f16:	4090      	lslle	r0, r2
   d9f18:	1ae4      	subs	r4, r4, r3
   d9f1a:	bfa2      	ittt	ge
   d9f1c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9f20:	4329      	orrge	r1, r5
   d9f22:	bd30      	popge	{r4, r5, pc}
   d9f24:	ea6f 0404 	mvn.w	r4, r4
   d9f28:	3c1f      	subs	r4, #31
   d9f2a:	da1c      	bge.n	d9f66 <__adddf3+0x1d2>
   d9f2c:	340c      	adds	r4, #12
   d9f2e:	dc0e      	bgt.n	d9f4e <__adddf3+0x1ba>
   d9f30:	f104 0414 	add.w	r4, r4, #20
   d9f34:	f1c4 0220 	rsb	r2, r4, #32
   d9f38:	fa20 f004 	lsr.w	r0, r0, r4
   d9f3c:	fa01 f302 	lsl.w	r3, r1, r2
   d9f40:	ea40 0003 	orr.w	r0, r0, r3
   d9f44:	fa21 f304 	lsr.w	r3, r1, r4
   d9f48:	ea45 0103 	orr.w	r1, r5, r3
   d9f4c:	bd30      	pop	{r4, r5, pc}
   d9f4e:	f1c4 040c 	rsb	r4, r4, #12
   d9f52:	f1c4 0220 	rsb	r2, r4, #32
   d9f56:	fa20 f002 	lsr.w	r0, r0, r2
   d9f5a:	fa01 f304 	lsl.w	r3, r1, r4
   d9f5e:	ea40 0003 	orr.w	r0, r0, r3
   d9f62:	4629      	mov	r1, r5
   d9f64:	bd30      	pop	{r4, r5, pc}
   d9f66:	fa21 f004 	lsr.w	r0, r1, r4
   d9f6a:	4629      	mov	r1, r5
   d9f6c:	bd30      	pop	{r4, r5, pc}
   d9f6e:	f094 0f00 	teq	r4, #0
   d9f72:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9f76:	bf06      	itte	eq
   d9f78:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9f7c:	3401      	addeq	r4, #1
   d9f7e:	3d01      	subne	r5, #1
   d9f80:	e74e      	b.n	d9e20 <__adddf3+0x8c>
   d9f82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9f86:	bf18      	it	ne
   d9f88:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9f8c:	d029      	beq.n	d9fe2 <__adddf3+0x24e>
   d9f8e:	ea94 0f05 	teq	r4, r5
   d9f92:	bf08      	it	eq
   d9f94:	ea90 0f02 	teqeq	r0, r2
   d9f98:	d005      	beq.n	d9fa6 <__adddf3+0x212>
   d9f9a:	ea54 0c00 	orrs.w	ip, r4, r0
   d9f9e:	bf04      	itt	eq
   d9fa0:	4619      	moveq	r1, r3
   d9fa2:	4610      	moveq	r0, r2
   d9fa4:	bd30      	pop	{r4, r5, pc}
   d9fa6:	ea91 0f03 	teq	r1, r3
   d9faa:	bf1e      	ittt	ne
   d9fac:	2100      	movne	r1, #0
   d9fae:	2000      	movne	r0, #0
   d9fb0:	bd30      	popne	{r4, r5, pc}
   d9fb2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9fb6:	d105      	bne.n	d9fc4 <__adddf3+0x230>
   d9fb8:	0040      	lsls	r0, r0, #1
   d9fba:	4149      	adcs	r1, r1
   d9fbc:	bf28      	it	cs
   d9fbe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9fc2:	bd30      	pop	{r4, r5, pc}
   d9fc4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9fc8:	bf3c      	itt	cc
   d9fca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9fce:	bd30      	popcc	{r4, r5, pc}
   d9fd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9fd4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9fd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9fdc:	f04f 0000 	mov.w	r0, #0
   d9fe0:	bd30      	pop	{r4, r5, pc}
   d9fe2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9fe6:	bf1a      	itte	ne
   d9fe8:	4619      	movne	r1, r3
   d9fea:	4610      	movne	r0, r2
   d9fec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9ff0:	bf1c      	itt	ne
   d9ff2:	460b      	movne	r3, r1
   d9ff4:	4602      	movne	r2, r0
   d9ff6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9ffa:	bf06      	itte	eq
   d9ffc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da000:	ea91 0f03 	teqeq	r1, r3
   da004:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da008:	bd30      	pop	{r4, r5, pc}
   da00a:	bf00      	nop

000da00c <__aeabi_ui2d>:
   da00c:	f090 0f00 	teq	r0, #0
   da010:	bf04      	itt	eq
   da012:	2100      	moveq	r1, #0
   da014:	4770      	bxeq	lr
   da016:	b530      	push	{r4, r5, lr}
   da018:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da01c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da020:	f04f 0500 	mov.w	r5, #0
   da024:	f04f 0100 	mov.w	r1, #0
   da028:	e750      	b.n	d9ecc <__adddf3+0x138>
   da02a:	bf00      	nop

000da02c <__aeabi_i2d>:
   da02c:	f090 0f00 	teq	r0, #0
   da030:	bf04      	itt	eq
   da032:	2100      	moveq	r1, #0
   da034:	4770      	bxeq	lr
   da036:	b530      	push	{r4, r5, lr}
   da038:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da03c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da040:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da044:	bf48      	it	mi
   da046:	4240      	negmi	r0, r0
   da048:	f04f 0100 	mov.w	r1, #0
   da04c:	e73e      	b.n	d9ecc <__adddf3+0x138>
   da04e:	bf00      	nop

000da050 <__aeabi_f2d>:
   da050:	0042      	lsls	r2, r0, #1
   da052:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da056:	ea4f 0131 	mov.w	r1, r1, rrx
   da05a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da05e:	bf1f      	itttt	ne
   da060:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da064:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da068:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da06c:	4770      	bxne	lr
   da06e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   da072:	bf08      	it	eq
   da074:	4770      	bxeq	lr
   da076:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   da07a:	bf04      	itt	eq
   da07c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   da080:	4770      	bxeq	lr
   da082:	b530      	push	{r4, r5, lr}
   da084:	f44f 7460 	mov.w	r4, #896	; 0x380
   da088:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da08c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da090:	e71c      	b.n	d9ecc <__adddf3+0x138>
   da092:	bf00      	nop

000da094 <__aeabi_ul2d>:
   da094:	ea50 0201 	orrs.w	r2, r0, r1
   da098:	bf08      	it	eq
   da09a:	4770      	bxeq	lr
   da09c:	b530      	push	{r4, r5, lr}
   da09e:	f04f 0500 	mov.w	r5, #0
   da0a2:	e00a      	b.n	da0ba <__aeabi_l2d+0x16>

000da0a4 <__aeabi_l2d>:
   da0a4:	ea50 0201 	orrs.w	r2, r0, r1
   da0a8:	bf08      	it	eq
   da0aa:	4770      	bxeq	lr
   da0ac:	b530      	push	{r4, r5, lr}
   da0ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da0b2:	d502      	bpl.n	da0ba <__aeabi_l2d+0x16>
   da0b4:	4240      	negs	r0, r0
   da0b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da0ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da0be:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da0c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da0c6:	f43f aed8 	beq.w	d9e7a <__adddf3+0xe6>
   da0ca:	f04f 0203 	mov.w	r2, #3
   da0ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da0d2:	bf18      	it	ne
   da0d4:	3203      	addne	r2, #3
   da0d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da0da:	bf18      	it	ne
   da0dc:	3203      	addne	r2, #3
   da0de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   da0e2:	f1c2 0320 	rsb	r3, r2, #32
   da0e6:	fa00 fc03 	lsl.w	ip, r0, r3
   da0ea:	fa20 f002 	lsr.w	r0, r0, r2
   da0ee:	fa01 fe03 	lsl.w	lr, r1, r3
   da0f2:	ea40 000e 	orr.w	r0, r0, lr
   da0f6:	fa21 f102 	lsr.w	r1, r1, r2
   da0fa:	4414      	add	r4, r2
   da0fc:	e6bd      	b.n	d9e7a <__adddf3+0xe6>
   da0fe:	bf00      	nop

000da100 <__aeabi_dmul>:
   da100:	b570      	push	{r4, r5, r6, lr}
   da102:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da106:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da10a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da10e:	bf1d      	ittte	ne
   da110:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da114:	ea94 0f0c 	teqne	r4, ip
   da118:	ea95 0f0c 	teqne	r5, ip
   da11c:	f000 f8de 	bleq	da2dc <__aeabi_dmul+0x1dc>
   da120:	442c      	add	r4, r5
   da122:	ea81 0603 	eor.w	r6, r1, r3
   da126:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   da12a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   da12e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   da132:	bf18      	it	ne
   da134:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   da138:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da13c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da140:	d038      	beq.n	da1b4 <__aeabi_dmul+0xb4>
   da142:	fba0 ce02 	umull	ip, lr, r0, r2
   da146:	f04f 0500 	mov.w	r5, #0
   da14a:	fbe1 e502 	umlal	lr, r5, r1, r2
   da14e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   da152:	fbe0 e503 	umlal	lr, r5, r0, r3
   da156:	f04f 0600 	mov.w	r6, #0
   da15a:	fbe1 5603 	umlal	r5, r6, r1, r3
   da15e:	f09c 0f00 	teq	ip, #0
   da162:	bf18      	it	ne
   da164:	f04e 0e01 	orrne.w	lr, lr, #1
   da168:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da16c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da170:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da174:	d204      	bcs.n	da180 <__aeabi_dmul+0x80>
   da176:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da17a:	416d      	adcs	r5, r5
   da17c:	eb46 0606 	adc.w	r6, r6, r6
   da180:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da184:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da188:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da18c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da190:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da194:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da198:	bf88      	it	hi
   da19a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da19e:	d81e      	bhi.n	da1de <__aeabi_dmul+0xde>
   da1a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da1a4:	bf08      	it	eq
   da1a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da1aa:	f150 0000 	adcs.w	r0, r0, #0
   da1ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da1b2:	bd70      	pop	{r4, r5, r6, pc}
   da1b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da1b8:	ea46 0101 	orr.w	r1, r6, r1
   da1bc:	ea40 0002 	orr.w	r0, r0, r2
   da1c0:	ea81 0103 	eor.w	r1, r1, r3
   da1c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da1c8:	bfc2      	ittt	gt
   da1ca:	ebd4 050c 	rsbsgt	r5, r4, ip
   da1ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da1d2:	bd70      	popgt	{r4, r5, r6, pc}
   da1d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da1d8:	f04f 0e00 	mov.w	lr, #0
   da1dc:	3c01      	subs	r4, #1
   da1de:	f300 80ab 	bgt.w	da338 <__aeabi_dmul+0x238>
   da1e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da1e6:	bfde      	ittt	le
   da1e8:	2000      	movle	r0, #0
   da1ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da1ee:	bd70      	pople	{r4, r5, r6, pc}
   da1f0:	f1c4 0400 	rsb	r4, r4, #0
   da1f4:	3c20      	subs	r4, #32
   da1f6:	da35      	bge.n	da264 <__aeabi_dmul+0x164>
   da1f8:	340c      	adds	r4, #12
   da1fa:	dc1b      	bgt.n	da234 <__aeabi_dmul+0x134>
   da1fc:	f104 0414 	add.w	r4, r4, #20
   da200:	f1c4 0520 	rsb	r5, r4, #32
   da204:	fa00 f305 	lsl.w	r3, r0, r5
   da208:	fa20 f004 	lsr.w	r0, r0, r4
   da20c:	fa01 f205 	lsl.w	r2, r1, r5
   da210:	ea40 0002 	orr.w	r0, r0, r2
   da214:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da218:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da21c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da220:	fa21 f604 	lsr.w	r6, r1, r4
   da224:	eb42 0106 	adc.w	r1, r2, r6
   da228:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da22c:	bf08      	it	eq
   da22e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da232:	bd70      	pop	{r4, r5, r6, pc}
   da234:	f1c4 040c 	rsb	r4, r4, #12
   da238:	f1c4 0520 	rsb	r5, r4, #32
   da23c:	fa00 f304 	lsl.w	r3, r0, r4
   da240:	fa20 f005 	lsr.w	r0, r0, r5
   da244:	fa01 f204 	lsl.w	r2, r1, r4
   da248:	ea40 0002 	orr.w	r0, r0, r2
   da24c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da250:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da254:	f141 0100 	adc.w	r1, r1, #0
   da258:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da25c:	bf08      	it	eq
   da25e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da262:	bd70      	pop	{r4, r5, r6, pc}
   da264:	f1c4 0520 	rsb	r5, r4, #32
   da268:	fa00 f205 	lsl.w	r2, r0, r5
   da26c:	ea4e 0e02 	orr.w	lr, lr, r2
   da270:	fa20 f304 	lsr.w	r3, r0, r4
   da274:	fa01 f205 	lsl.w	r2, r1, r5
   da278:	ea43 0302 	orr.w	r3, r3, r2
   da27c:	fa21 f004 	lsr.w	r0, r1, r4
   da280:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da284:	fa21 f204 	lsr.w	r2, r1, r4
   da288:	ea20 0002 	bic.w	r0, r0, r2
   da28c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   da290:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da294:	bf08      	it	eq
   da296:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da29a:	bd70      	pop	{r4, r5, r6, pc}
   da29c:	f094 0f00 	teq	r4, #0
   da2a0:	d10f      	bne.n	da2c2 <__aeabi_dmul+0x1c2>
   da2a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   da2a6:	0040      	lsls	r0, r0, #1
   da2a8:	eb41 0101 	adc.w	r1, r1, r1
   da2ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da2b0:	bf08      	it	eq
   da2b2:	3c01      	subeq	r4, #1
   da2b4:	d0f7      	beq.n	da2a6 <__aeabi_dmul+0x1a6>
   da2b6:	ea41 0106 	orr.w	r1, r1, r6
   da2ba:	f095 0f00 	teq	r5, #0
   da2be:	bf18      	it	ne
   da2c0:	4770      	bxne	lr
   da2c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   da2c6:	0052      	lsls	r2, r2, #1
   da2c8:	eb43 0303 	adc.w	r3, r3, r3
   da2cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   da2d0:	bf08      	it	eq
   da2d2:	3d01      	subeq	r5, #1
   da2d4:	d0f7      	beq.n	da2c6 <__aeabi_dmul+0x1c6>
   da2d6:	ea43 0306 	orr.w	r3, r3, r6
   da2da:	4770      	bx	lr
   da2dc:	ea94 0f0c 	teq	r4, ip
   da2e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da2e4:	bf18      	it	ne
   da2e6:	ea95 0f0c 	teqne	r5, ip
   da2ea:	d00c      	beq.n	da306 <__aeabi_dmul+0x206>
   da2ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da2f0:	bf18      	it	ne
   da2f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da2f6:	d1d1      	bne.n	da29c <__aeabi_dmul+0x19c>
   da2f8:	ea81 0103 	eor.w	r1, r1, r3
   da2fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da300:	f04f 0000 	mov.w	r0, #0
   da304:	bd70      	pop	{r4, r5, r6, pc}
   da306:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da30a:	bf06      	itte	eq
   da30c:	4610      	moveq	r0, r2
   da30e:	4619      	moveq	r1, r3
   da310:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da314:	d019      	beq.n	da34a <__aeabi_dmul+0x24a>
   da316:	ea94 0f0c 	teq	r4, ip
   da31a:	d102      	bne.n	da322 <__aeabi_dmul+0x222>
   da31c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   da320:	d113      	bne.n	da34a <__aeabi_dmul+0x24a>
   da322:	ea95 0f0c 	teq	r5, ip
   da326:	d105      	bne.n	da334 <__aeabi_dmul+0x234>
   da328:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   da32c:	bf1c      	itt	ne
   da32e:	4610      	movne	r0, r2
   da330:	4619      	movne	r1, r3
   da332:	d10a      	bne.n	da34a <__aeabi_dmul+0x24a>
   da334:	ea81 0103 	eor.w	r1, r1, r3
   da338:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da33c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da344:	f04f 0000 	mov.w	r0, #0
   da348:	bd70      	pop	{r4, r5, r6, pc}
   da34a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da34e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   da352:	bd70      	pop	{r4, r5, r6, pc}

000da354 <__aeabi_ddiv>:
   da354:	b570      	push	{r4, r5, r6, lr}
   da356:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da35a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da35e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da362:	bf1d      	ittte	ne
   da364:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da368:	ea94 0f0c 	teqne	r4, ip
   da36c:	ea95 0f0c 	teqne	r5, ip
   da370:	f000 f8a7 	bleq	da4c2 <__aeabi_ddiv+0x16e>
   da374:	eba4 0405 	sub.w	r4, r4, r5
   da378:	ea81 0e03 	eor.w	lr, r1, r3
   da37c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da380:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da384:	f000 8088 	beq.w	da498 <__aeabi_ddiv+0x144>
   da388:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da38c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   da390:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   da394:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   da398:	ea4f 2202 	mov.w	r2, r2, lsl #8
   da39c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   da3a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   da3a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   da3a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   da3ac:	429d      	cmp	r5, r3
   da3ae:	bf08      	it	eq
   da3b0:	4296      	cmpeq	r6, r2
   da3b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   da3b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   da3ba:	d202      	bcs.n	da3c2 <__aeabi_ddiv+0x6e>
   da3bc:	085b      	lsrs	r3, r3, #1
   da3be:	ea4f 0232 	mov.w	r2, r2, rrx
   da3c2:	1ab6      	subs	r6, r6, r2
   da3c4:	eb65 0503 	sbc.w	r5, r5, r3
   da3c8:	085b      	lsrs	r3, r3, #1
   da3ca:	ea4f 0232 	mov.w	r2, r2, rrx
   da3ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   da3d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   da3d6:	ebb6 0e02 	subs.w	lr, r6, r2
   da3da:	eb75 0e03 	sbcs.w	lr, r5, r3
   da3de:	bf22      	ittt	cs
   da3e0:	1ab6      	subcs	r6, r6, r2
   da3e2:	4675      	movcs	r5, lr
   da3e4:	ea40 000c 	orrcs.w	r0, r0, ip
   da3e8:	085b      	lsrs	r3, r3, #1
   da3ea:	ea4f 0232 	mov.w	r2, r2, rrx
   da3ee:	ebb6 0e02 	subs.w	lr, r6, r2
   da3f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   da3f6:	bf22      	ittt	cs
   da3f8:	1ab6      	subcs	r6, r6, r2
   da3fa:	4675      	movcs	r5, lr
   da3fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   da400:	085b      	lsrs	r3, r3, #1
   da402:	ea4f 0232 	mov.w	r2, r2, rrx
   da406:	ebb6 0e02 	subs.w	lr, r6, r2
   da40a:	eb75 0e03 	sbcs.w	lr, r5, r3
   da40e:	bf22      	ittt	cs
   da410:	1ab6      	subcs	r6, r6, r2
   da412:	4675      	movcs	r5, lr
   da414:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   da418:	085b      	lsrs	r3, r3, #1
   da41a:	ea4f 0232 	mov.w	r2, r2, rrx
   da41e:	ebb6 0e02 	subs.w	lr, r6, r2
   da422:	eb75 0e03 	sbcs.w	lr, r5, r3
   da426:	bf22      	ittt	cs
   da428:	1ab6      	subcs	r6, r6, r2
   da42a:	4675      	movcs	r5, lr
   da42c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   da430:	ea55 0e06 	orrs.w	lr, r5, r6
   da434:	d018      	beq.n	da468 <__aeabi_ddiv+0x114>
   da436:	ea4f 1505 	mov.w	r5, r5, lsl #4
   da43a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   da43e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   da442:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   da446:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   da44a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   da44e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   da452:	d1c0      	bne.n	da3d6 <__aeabi_ddiv+0x82>
   da454:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da458:	d10b      	bne.n	da472 <__aeabi_ddiv+0x11e>
   da45a:	ea41 0100 	orr.w	r1, r1, r0
   da45e:	f04f 0000 	mov.w	r0, #0
   da462:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   da466:	e7b6      	b.n	da3d6 <__aeabi_ddiv+0x82>
   da468:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da46c:	bf04      	itt	eq
   da46e:	4301      	orreq	r1, r0
   da470:	2000      	moveq	r0, #0
   da472:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da476:	bf88      	it	hi
   da478:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da47c:	f63f aeaf 	bhi.w	da1de <__aeabi_dmul+0xde>
   da480:	ebb5 0c03 	subs.w	ip, r5, r3
   da484:	bf04      	itt	eq
   da486:	ebb6 0c02 	subseq.w	ip, r6, r2
   da48a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da48e:	f150 0000 	adcs.w	r0, r0, #0
   da492:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da496:	bd70      	pop	{r4, r5, r6, pc}
   da498:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   da49c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   da4a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   da4a4:	bfc2      	ittt	gt
   da4a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   da4aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da4ae:	bd70      	popgt	{r4, r5, r6, pc}
   da4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da4b4:	f04f 0e00 	mov.w	lr, #0
   da4b8:	3c01      	subs	r4, #1
   da4ba:	e690      	b.n	da1de <__aeabi_dmul+0xde>
   da4bc:	ea45 0e06 	orr.w	lr, r5, r6
   da4c0:	e68d      	b.n	da1de <__aeabi_dmul+0xde>
   da4c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da4c6:	ea94 0f0c 	teq	r4, ip
   da4ca:	bf08      	it	eq
   da4cc:	ea95 0f0c 	teqeq	r5, ip
   da4d0:	f43f af3b 	beq.w	da34a <__aeabi_dmul+0x24a>
   da4d4:	ea94 0f0c 	teq	r4, ip
   da4d8:	d10a      	bne.n	da4f0 <__aeabi_ddiv+0x19c>
   da4da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da4de:	f47f af34 	bne.w	da34a <__aeabi_dmul+0x24a>
   da4e2:	ea95 0f0c 	teq	r5, ip
   da4e6:	f47f af25 	bne.w	da334 <__aeabi_dmul+0x234>
   da4ea:	4610      	mov	r0, r2
   da4ec:	4619      	mov	r1, r3
   da4ee:	e72c      	b.n	da34a <__aeabi_dmul+0x24a>
   da4f0:	ea95 0f0c 	teq	r5, ip
   da4f4:	d106      	bne.n	da504 <__aeabi_ddiv+0x1b0>
   da4f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da4fa:	f43f aefd 	beq.w	da2f8 <__aeabi_dmul+0x1f8>
   da4fe:	4610      	mov	r0, r2
   da500:	4619      	mov	r1, r3
   da502:	e722      	b.n	da34a <__aeabi_dmul+0x24a>
   da504:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da508:	bf18      	it	ne
   da50a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da50e:	f47f aec5 	bne.w	da29c <__aeabi_dmul+0x19c>
   da512:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   da516:	f47f af0d 	bne.w	da334 <__aeabi_dmul+0x234>
   da51a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   da51e:	f47f aeeb 	bne.w	da2f8 <__aeabi_dmul+0x1f8>
   da522:	e712      	b.n	da34a <__aeabi_dmul+0x24a>

000da524 <__aeabi_d2uiz>:
   da524:	004a      	lsls	r2, r1, #1
   da526:	d211      	bcs.n	da54c <__aeabi_d2uiz+0x28>
   da528:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da52c:	d211      	bcs.n	da552 <__aeabi_d2uiz+0x2e>
   da52e:	d50d      	bpl.n	da54c <__aeabi_d2uiz+0x28>
   da530:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da534:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da538:	d40e      	bmi.n	da558 <__aeabi_d2uiz+0x34>
   da53a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da53e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da542:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da546:	fa23 f002 	lsr.w	r0, r3, r2
   da54a:	4770      	bx	lr
   da54c:	f04f 0000 	mov.w	r0, #0
   da550:	4770      	bx	lr
   da552:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da556:	d102      	bne.n	da55e <__aeabi_d2uiz+0x3a>
   da558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da55c:	4770      	bx	lr
   da55e:	f04f 0000 	mov.w	r0, #0
   da562:	4770      	bx	lr

000da564 <__aeabi_d2f>:
   da564:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da568:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   da56c:	bf24      	itt	cs
   da56e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   da572:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   da576:	d90d      	bls.n	da594 <__aeabi_d2f+0x30>
   da578:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   da57c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   da580:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   da584:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   da588:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   da58c:	bf08      	it	eq
   da58e:	f020 0001 	biceq.w	r0, r0, #1
   da592:	4770      	bx	lr
   da594:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   da598:	d121      	bne.n	da5de <__aeabi_d2f+0x7a>
   da59a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   da59e:	bfbc      	itt	lt
   da5a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   da5a4:	4770      	bxlt	lr
   da5a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da5aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   da5ae:	f1c2 0218 	rsb	r2, r2, #24
   da5b2:	f1c2 0c20 	rsb	ip, r2, #32
   da5b6:	fa10 f30c 	lsls.w	r3, r0, ip
   da5ba:	fa20 f002 	lsr.w	r0, r0, r2
   da5be:	bf18      	it	ne
   da5c0:	f040 0001 	orrne.w	r0, r0, #1
   da5c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da5c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   da5cc:	fa03 fc0c 	lsl.w	ip, r3, ip
   da5d0:	ea40 000c 	orr.w	r0, r0, ip
   da5d4:	fa23 f302 	lsr.w	r3, r3, r2
   da5d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   da5dc:	e7cc      	b.n	da578 <__aeabi_d2f+0x14>
   da5de:	ea7f 5362 	mvns.w	r3, r2, asr #21
   da5e2:	d107      	bne.n	da5f4 <__aeabi_d2f+0x90>
   da5e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   da5e8:	bf1e      	ittt	ne
   da5ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   da5ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   da5f2:	4770      	bxne	lr
   da5f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   da5f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   da5fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da600:	4770      	bx	lr
   da602:	bf00      	nop

000da604 <__aeabi_f2lz>:
   da604:	ee07 0a90 	vmov	s15, r0
   da608:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   da60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da610:	d401      	bmi.n	da616 <__aeabi_f2lz+0x12>
   da612:	f000 b80b 	b.w	da62c <__aeabi_f2ulz>
   da616:	eef1 7a67 	vneg.f32	s15, s15
   da61a:	b508      	push	{r3, lr}
   da61c:	ee17 0a90 	vmov	r0, s15
   da620:	f000 f804 	bl	da62c <__aeabi_f2ulz>
   da624:	4240      	negs	r0, r0
   da626:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da62a:	bd08      	pop	{r3, pc}

000da62c <__aeabi_f2ulz>:
   da62c:	b5d0      	push	{r4, r6, r7, lr}
   da62e:	f7ff fd0f 	bl	da050 <__aeabi_f2d>
   da632:	4b0c      	ldr	r3, [pc, #48]	; (da664 <__aeabi_f2ulz+0x38>)
   da634:	2200      	movs	r2, #0
   da636:	4606      	mov	r6, r0
   da638:	460f      	mov	r7, r1
   da63a:	f7ff fd61 	bl	da100 <__aeabi_dmul>
   da63e:	f7ff ff71 	bl	da524 <__aeabi_d2uiz>
   da642:	4604      	mov	r4, r0
   da644:	f7ff fce2 	bl	da00c <__aeabi_ui2d>
   da648:	4b07      	ldr	r3, [pc, #28]	; (da668 <__aeabi_f2ulz+0x3c>)
   da64a:	2200      	movs	r2, #0
   da64c:	f7ff fd58 	bl	da100 <__aeabi_dmul>
   da650:	4602      	mov	r2, r0
   da652:	460b      	mov	r3, r1
   da654:	4630      	mov	r0, r6
   da656:	4639      	mov	r1, r7
   da658:	f7ff fb9a 	bl	d9d90 <__aeabi_dsub>
   da65c:	f7ff ff62 	bl	da524 <__aeabi_d2uiz>
   da660:	4621      	mov	r1, r4
   da662:	bdd0      	pop	{r4, r6, r7, pc}
   da664:	3df00000 	.word	0x3df00000
   da668:	41f00000 	.word	0x41f00000

000da66c <asctime_r>:
   da66c:	b510      	push	{r4, lr}
   da66e:	460c      	mov	r4, r1
   da670:	6941      	ldr	r1, [r0, #20]
   da672:	6903      	ldr	r3, [r0, #16]
   da674:	6982      	ldr	r2, [r0, #24]
   da676:	b086      	sub	sp, #24
   da678:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   da67c:	9104      	str	r1, [sp, #16]
   da67e:	6801      	ldr	r1, [r0, #0]
   da680:	9103      	str	r1, [sp, #12]
   da682:	6841      	ldr	r1, [r0, #4]
   da684:	9102      	str	r1, [sp, #8]
   da686:	6881      	ldr	r1, [r0, #8]
   da688:	9101      	str	r1, [sp, #4]
   da68a:	68c1      	ldr	r1, [r0, #12]
   da68c:	9100      	str	r1, [sp, #0]
   da68e:	4907      	ldr	r1, [pc, #28]	; (da6ac <asctime_r+0x40>)
   da690:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   da694:	440b      	add	r3, r1
   da696:	4906      	ldr	r1, [pc, #24]	; (da6b0 <asctime_r+0x44>)
   da698:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   da69c:	440a      	add	r2, r1
   da69e:	4620      	mov	r0, r4
   da6a0:	4904      	ldr	r1, [pc, #16]	; (da6b4 <asctime_r+0x48>)
   da6a2:	f7fd fe0f 	bl	d82c4 <siprintf>
   da6a6:	4620      	mov	r0, r4
   da6a8:	b006      	add	sp, #24
   da6aa:	bd10      	pop	{r4, pc}
   da6ac:	000db3c6 	.word	0x000db3c6
   da6b0:	000db3b1 	.word	0x000db3b1
   da6b4:	000db391 	.word	0x000db391

000da6b8 <atoi>:
   da6b8:	220a      	movs	r2, #10
   da6ba:	2100      	movs	r1, #0
   da6bc:	f000 b93c 	b.w	da938 <strtol>

000da6c0 <atol>:
   da6c0:	220a      	movs	r2, #10
   da6c2:	2100      	movs	r1, #0
   da6c4:	f000 b938 	b.w	da938 <strtol>

000da6c8 <__cxa_atexit>:
   da6c8:	b510      	push	{r4, lr}
   da6ca:	4c05      	ldr	r4, [pc, #20]	; (da6e0 <__cxa_atexit+0x18>)
   da6cc:	4613      	mov	r3, r2
   da6ce:	b12c      	cbz	r4, da6dc <__cxa_atexit+0x14>
   da6d0:	460a      	mov	r2, r1
   da6d2:	4601      	mov	r1, r0
   da6d4:	2002      	movs	r0, #2
   da6d6:	f3af 8000 	nop.w
   da6da:	bd10      	pop	{r4, pc}
   da6dc:	4620      	mov	r0, r4
   da6de:	e7fc      	b.n	da6da <__cxa_atexit+0x12>
   da6e0:	00000000 	.word	0x00000000

000da6e4 <gmtime>:
   da6e4:	b538      	push	{r3, r4, r5, lr}
   da6e6:	4b07      	ldr	r3, [pc, #28]	; (da704 <gmtime+0x20>)
   da6e8:	681d      	ldr	r5, [r3, #0]
   da6ea:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   da6ec:	4604      	mov	r4, r0
   da6ee:	b91b      	cbnz	r3, da6f8 <gmtime+0x14>
   da6f0:	2024      	movs	r0, #36	; 0x24
   da6f2:	f7fd fdcf 	bl	d8294 <malloc>
   da6f6:	63e8      	str	r0, [r5, #60]	; 0x3c
   da6f8:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   da6fa:	4620      	mov	r0, r4
   da6fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da700:	f7fd be20 	b.w	d8344 <gmtime_r>
   da704:	2003e1c8 	.word	0x2003e1c8

000da708 <memcpy>:
   da708:	440a      	add	r2, r1
   da70a:	4291      	cmp	r1, r2
   da70c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   da710:	d100      	bne.n	da714 <memcpy+0xc>
   da712:	4770      	bx	lr
   da714:	b510      	push	{r4, lr}
   da716:	f811 4b01 	ldrb.w	r4, [r1], #1
   da71a:	f803 4f01 	strb.w	r4, [r3, #1]!
   da71e:	4291      	cmp	r1, r2
   da720:	d1f9      	bne.n	da716 <memcpy+0xe>
   da722:	bd10      	pop	{r4, pc}

000da724 <memmove>:
   da724:	4288      	cmp	r0, r1
   da726:	b510      	push	{r4, lr}
   da728:	eb01 0402 	add.w	r4, r1, r2
   da72c:	d902      	bls.n	da734 <memmove+0x10>
   da72e:	4284      	cmp	r4, r0
   da730:	4623      	mov	r3, r4
   da732:	d807      	bhi.n	da744 <memmove+0x20>
   da734:	1e43      	subs	r3, r0, #1
   da736:	42a1      	cmp	r1, r4
   da738:	d008      	beq.n	da74c <memmove+0x28>
   da73a:	f811 2b01 	ldrb.w	r2, [r1], #1
   da73e:	f803 2f01 	strb.w	r2, [r3, #1]!
   da742:	e7f8      	b.n	da736 <memmove+0x12>
   da744:	4402      	add	r2, r0
   da746:	4601      	mov	r1, r0
   da748:	428a      	cmp	r2, r1
   da74a:	d100      	bne.n	da74e <memmove+0x2a>
   da74c:	bd10      	pop	{r4, pc}
   da74e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   da752:	f802 4d01 	strb.w	r4, [r2, #-1]!
   da756:	e7f7      	b.n	da748 <memmove+0x24>

000da758 <memset>:
   da758:	4402      	add	r2, r0
   da75a:	4603      	mov	r3, r0
   da75c:	4293      	cmp	r3, r2
   da75e:	d100      	bne.n	da762 <memset+0xa>
   da760:	4770      	bx	lr
   da762:	f803 1b01 	strb.w	r1, [r3], #1
   da766:	e7f9      	b.n	da75c <memset+0x4>

000da768 <srand>:
   da768:	b538      	push	{r3, r4, r5, lr}
   da76a:	4b0d      	ldr	r3, [pc, #52]	; (da7a0 <srand+0x38>)
   da76c:	681d      	ldr	r5, [r3, #0]
   da76e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da770:	4604      	mov	r4, r0
   da772:	b97b      	cbnz	r3, da794 <srand+0x2c>
   da774:	2018      	movs	r0, #24
   da776:	f7fd fd8d 	bl	d8294 <malloc>
   da77a:	4a0a      	ldr	r2, [pc, #40]	; (da7a4 <srand+0x3c>)
   da77c:	4b0a      	ldr	r3, [pc, #40]	; (da7a8 <srand+0x40>)
   da77e:	63a8      	str	r0, [r5, #56]	; 0x38
   da780:	e9c0 2300 	strd	r2, r3, [r0]
   da784:	4b09      	ldr	r3, [pc, #36]	; (da7ac <srand+0x44>)
   da786:	6083      	str	r3, [r0, #8]
   da788:	230b      	movs	r3, #11
   da78a:	8183      	strh	r3, [r0, #12]
   da78c:	2201      	movs	r2, #1
   da78e:	2300      	movs	r3, #0
   da790:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da794:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da796:	2200      	movs	r2, #0
   da798:	611c      	str	r4, [r3, #16]
   da79a:	615a      	str	r2, [r3, #20]
   da79c:	bd38      	pop	{r3, r4, r5, pc}
   da79e:	bf00      	nop
   da7a0:	2003e1c8 	.word	0x2003e1c8
   da7a4:	abcd330e 	.word	0xabcd330e
   da7a8:	e66d1234 	.word	0xe66d1234
   da7ac:	0005deec 	.word	0x0005deec

000da7b0 <strcmp>:
   da7b0:	f810 2b01 	ldrb.w	r2, [r0], #1
   da7b4:	f811 3b01 	ldrb.w	r3, [r1], #1
   da7b8:	2a01      	cmp	r2, #1
   da7ba:	bf28      	it	cs
   da7bc:	429a      	cmpcs	r2, r3
   da7be:	d0f7      	beq.n	da7b0 <strcmp>
   da7c0:	1ad0      	subs	r0, r2, r3
   da7c2:	4770      	bx	lr

000da7c4 <strcpy>:
   da7c4:	4603      	mov	r3, r0
   da7c6:	f811 2b01 	ldrb.w	r2, [r1], #1
   da7ca:	f803 2b01 	strb.w	r2, [r3], #1
   da7ce:	2a00      	cmp	r2, #0
   da7d0:	d1f9      	bne.n	da7c6 <strcpy+0x2>
   da7d2:	4770      	bx	lr

000da7d4 <strdup>:
   da7d4:	4b02      	ldr	r3, [pc, #8]	; (da7e0 <strdup+0xc>)
   da7d6:	4601      	mov	r1, r0
   da7d8:	6818      	ldr	r0, [r3, #0]
   da7da:	f000 b803 	b.w	da7e4 <_strdup_r>
   da7de:	bf00      	nop
   da7e0:	2003e1c8 	.word	0x2003e1c8

000da7e4 <_strdup_r>:
   da7e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da7e6:	4604      	mov	r4, r0
   da7e8:	4608      	mov	r0, r1
   da7ea:	460d      	mov	r5, r1
   da7ec:	f000 f80f 	bl	da80e <strlen>
   da7f0:	1c42      	adds	r2, r0, #1
   da7f2:	4611      	mov	r1, r2
   da7f4:	4620      	mov	r0, r4
   da7f6:	9201      	str	r2, [sp, #4]
   da7f8:	f7fd fd84 	bl	d8304 <_malloc_r>
   da7fc:	4604      	mov	r4, r0
   da7fe:	b118      	cbz	r0, da808 <_strdup_r+0x24>
   da800:	9a01      	ldr	r2, [sp, #4]
   da802:	4629      	mov	r1, r5
   da804:	f7ff ff80 	bl	da708 <memcpy>
   da808:	4620      	mov	r0, r4
   da80a:	b003      	add	sp, #12
   da80c:	bd30      	pop	{r4, r5, pc}

000da80e <strlen>:
   da80e:	4603      	mov	r3, r0
   da810:	f813 2b01 	ldrb.w	r2, [r3], #1
   da814:	2a00      	cmp	r2, #0
   da816:	d1fb      	bne.n	da810 <strlen+0x2>
   da818:	1a18      	subs	r0, r3, r0
   da81a:	3801      	subs	r0, #1
   da81c:	4770      	bx	lr

000da81e <strncpy>:
   da81e:	b510      	push	{r4, lr}
   da820:	3901      	subs	r1, #1
   da822:	4603      	mov	r3, r0
   da824:	b132      	cbz	r2, da834 <strncpy+0x16>
   da826:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   da82a:	f803 4b01 	strb.w	r4, [r3], #1
   da82e:	3a01      	subs	r2, #1
   da830:	2c00      	cmp	r4, #0
   da832:	d1f7      	bne.n	da824 <strncpy+0x6>
   da834:	441a      	add	r2, r3
   da836:	2100      	movs	r1, #0
   da838:	4293      	cmp	r3, r2
   da83a:	d100      	bne.n	da83e <strncpy+0x20>
   da83c:	bd10      	pop	{r4, pc}
   da83e:	f803 1b01 	strb.w	r1, [r3], #1
   da842:	e7f9      	b.n	da838 <strncpy+0x1a>

000da844 <_strtol_l.isra.0>:
   da844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da848:	4e3a      	ldr	r6, [pc, #232]	; (da934 <_strtol_l.isra.0+0xf0>)
   da84a:	4686      	mov	lr, r0
   da84c:	468c      	mov	ip, r1
   da84e:	4660      	mov	r0, ip
   da850:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da854:	5da5      	ldrb	r5, [r4, r6]
   da856:	f015 0508 	ands.w	r5, r5, #8
   da85a:	d1f8      	bne.n	da84e <_strtol_l.isra.0+0xa>
   da85c:	2c2d      	cmp	r4, #45	; 0x2d
   da85e:	d133      	bne.n	da8c8 <_strtol_l.isra.0+0x84>
   da860:	f89c 4000 	ldrb.w	r4, [ip]
   da864:	f04f 0801 	mov.w	r8, #1
   da868:	f100 0c02 	add.w	ip, r0, #2
   da86c:	2b00      	cmp	r3, #0
   da86e:	d05c      	beq.n	da92a <_strtol_l.isra.0+0xe6>
   da870:	2b10      	cmp	r3, #16
   da872:	d10c      	bne.n	da88e <_strtol_l.isra.0+0x4a>
   da874:	2c30      	cmp	r4, #48	; 0x30
   da876:	d10a      	bne.n	da88e <_strtol_l.isra.0+0x4a>
   da878:	f89c 0000 	ldrb.w	r0, [ip]
   da87c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da880:	2858      	cmp	r0, #88	; 0x58
   da882:	d14d      	bne.n	da920 <_strtol_l.isra.0+0xdc>
   da884:	f89c 4001 	ldrb.w	r4, [ip, #1]
   da888:	2310      	movs	r3, #16
   da88a:	f10c 0c02 	add.w	ip, ip, #2
   da88e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   da892:	3f01      	subs	r7, #1
   da894:	2600      	movs	r6, #0
   da896:	fbb7 f9f3 	udiv	r9, r7, r3
   da89a:	4630      	mov	r0, r6
   da89c:	fb03 7a19 	mls	sl, r3, r9, r7
   da8a0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   da8a4:	2d09      	cmp	r5, #9
   da8a6:	d818      	bhi.n	da8da <_strtol_l.isra.0+0x96>
   da8a8:	462c      	mov	r4, r5
   da8aa:	42a3      	cmp	r3, r4
   da8ac:	dd24      	ble.n	da8f8 <_strtol_l.isra.0+0xb4>
   da8ae:	1c75      	adds	r5, r6, #1
   da8b0:	d007      	beq.n	da8c2 <_strtol_l.isra.0+0x7e>
   da8b2:	4581      	cmp	r9, r0
   da8b4:	d31d      	bcc.n	da8f2 <_strtol_l.isra.0+0xae>
   da8b6:	d101      	bne.n	da8bc <_strtol_l.isra.0+0x78>
   da8b8:	45a2      	cmp	sl, r4
   da8ba:	db1a      	blt.n	da8f2 <_strtol_l.isra.0+0xae>
   da8bc:	fb00 4003 	mla	r0, r0, r3, r4
   da8c0:	2601      	movs	r6, #1
   da8c2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da8c6:	e7eb      	b.n	da8a0 <_strtol_l.isra.0+0x5c>
   da8c8:	2c2b      	cmp	r4, #43	; 0x2b
   da8ca:	bf08      	it	eq
   da8cc:	f89c 4000 	ldrbeq.w	r4, [ip]
   da8d0:	46a8      	mov	r8, r5
   da8d2:	bf08      	it	eq
   da8d4:	f100 0c02 	addeq.w	ip, r0, #2
   da8d8:	e7c8      	b.n	da86c <_strtol_l.isra.0+0x28>
   da8da:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   da8de:	2d19      	cmp	r5, #25
   da8e0:	d801      	bhi.n	da8e6 <_strtol_l.isra.0+0xa2>
   da8e2:	3c37      	subs	r4, #55	; 0x37
   da8e4:	e7e1      	b.n	da8aa <_strtol_l.isra.0+0x66>
   da8e6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   da8ea:	2d19      	cmp	r5, #25
   da8ec:	d804      	bhi.n	da8f8 <_strtol_l.isra.0+0xb4>
   da8ee:	3c57      	subs	r4, #87	; 0x57
   da8f0:	e7db      	b.n	da8aa <_strtol_l.isra.0+0x66>
   da8f2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   da8f6:	e7e4      	b.n	da8c2 <_strtol_l.isra.0+0x7e>
   da8f8:	1c73      	adds	r3, r6, #1
   da8fa:	d106      	bne.n	da90a <_strtol_l.isra.0+0xc6>
   da8fc:	2322      	movs	r3, #34	; 0x22
   da8fe:	f8ce 3000 	str.w	r3, [lr]
   da902:	4638      	mov	r0, r7
   da904:	b942      	cbnz	r2, da918 <_strtol_l.isra.0+0xd4>
   da906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da90a:	f1b8 0f00 	cmp.w	r8, #0
   da90e:	d000      	beq.n	da912 <_strtol_l.isra.0+0xce>
   da910:	4240      	negs	r0, r0
   da912:	2a00      	cmp	r2, #0
   da914:	d0f7      	beq.n	da906 <_strtol_l.isra.0+0xc2>
   da916:	b10e      	cbz	r6, da91c <_strtol_l.isra.0+0xd8>
   da918:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   da91c:	6011      	str	r1, [r2, #0]
   da91e:	e7f2      	b.n	da906 <_strtol_l.isra.0+0xc2>
   da920:	2430      	movs	r4, #48	; 0x30
   da922:	2b00      	cmp	r3, #0
   da924:	d1b3      	bne.n	da88e <_strtol_l.isra.0+0x4a>
   da926:	2308      	movs	r3, #8
   da928:	e7b1      	b.n	da88e <_strtol_l.isra.0+0x4a>
   da92a:	2c30      	cmp	r4, #48	; 0x30
   da92c:	d0a4      	beq.n	da878 <_strtol_l.isra.0+0x34>
   da92e:	230a      	movs	r3, #10
   da930:	e7ad      	b.n	da88e <_strtol_l.isra.0+0x4a>
   da932:	bf00      	nop
   da934:	000db3eb 	.word	0x000db3eb

000da938 <strtol>:
   da938:	4613      	mov	r3, r2
   da93a:	460a      	mov	r2, r1
   da93c:	4601      	mov	r1, r0
   da93e:	4802      	ldr	r0, [pc, #8]	; (da948 <strtol+0x10>)
   da940:	6800      	ldr	r0, [r0, #0]
   da942:	f7ff bf7f 	b.w	da844 <_strtol_l.isra.0>
   da946:	bf00      	nop
   da948:	2003e1c8 	.word	0x2003e1c8

000da94c <dynalib_user>:
   da94c:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   da95c:	00000000 6e6b6e55 006e776f 656e6f4e     ....Unknown.None
   da96c:	46695700 53470069 4d55004d 43005354     .WiFi.GSM.UMTS.C
   da97c:	00414d44 0045544c 45454549 31323038     DMA.LTE.IEEE8021
   da98c:	4c003435 435f4554 4d5f5441 544c0031     54.LTE_CAT_M1.LT
   da99c:	41435f45 424e5f54 6f4e0031 68432074     E_CAT_NB1.Not Ch
   da9ac:	69677261 4f00676e 6556206e 6c636968     arging.On Vehicl
   da9bc:	77502065 664f0072 65562066 6c636968     e Pwr.Off Vehicl
   da9cc:	77502065 61460072 00746c75 6f636944     e Pwr.Fault.Dico
   da9dc:	63656e6e 00646574 44206f4e 00617461     nnected.No Data.
   da9ec:	70736552 65736e6f 63655220 65766965     Response Receive
   da9fc:	6e550064 776f6e6b 6572206e 6e6f7073     d.Unknown respon
   daa0c:	72206573 76656365 20646569 55006925     se recevied %i.U
   daa1c:	6f646962 48207374 006b6f6f 64726148     bidots Hook.Hard
   daa2c:	73655220 69207465 2032206e 6f636573      Reset in 2 seco
   daa3c:	0073646e 20746553 62726556 2065736f     nds.Set Verbose 
   daa4c:	65646f4d 43003000 7261656c 56206465     Mode.0.Cleared V
   daa5c:	6f627265 4d206573 0065646f 312e3225     erbose Mode.%2.1
   daa6c:	54552066 69540043 7a20656d 20656e6f     f UTC.Time zone 
   daa7c:	7366666f 25207465 69540069 5300656d     offset %i.Time.S
   daa8c:	6c706d61 6e492065 76726574 69206c61     ample Interval i
   daa9c:	6f6e2073 69252077 6e696d20 73657475     s now %i minutes
   daaac:	63227b00 6e696261 253a2254 66322e34     .{"cabinT":%4.2f
   daabc:	7622202c 54746e65 34253a22 2c66322e     , "ventT":%4.2f,
   daacc:	756f2220 64697374 3a225465 322e3425      "outsideT":%4.2
   daadc:	22202c66 74746162 22797265 2c69253a     f, "battery":%i,
   daaec:	6b222020 22317965 7325223a 22202c22       "key1":"%s", "
   daafc:	65736572 3a227374 202c6925 656c6122     resets":%i, "ale
   dab0c:	22737472 2c69253a 69742220 7473656d     rts":%i, "timest
   dab1c:	22706d61 756c253a 2c303030 616c2220     amp":%lu000, "la
   dab2c:	253a2274 22202c66 22676e6c 7d66253a     t":%f, "lng":%f}
   dab3c:	69625500 73746f64 54424d2d 6f482d41     .Ubidots-MBTA-Ho
   dab4c:	762d6b6f 61502d32 00657372 53207325     ok-v2-Parse.%s S
   dab5c:	2e32253a 25256630 3a51202c 302e3225     :%2.0f%%, Q:%2.0
   dab6c:	20252566 6f724600 7325206d 206f7420     f%% .From %s to 
   dab7c:	53007325 65746174 61725420 7469736e     %s.State Transit
   dab8c:	006e6f69 6e6e7552 00676e69 6c696144     ion.Running.Dail
   dab9c:	6c432079 756e6165 53440070 666f2054     y Cleanup.DST of
   dabac:	74657366 2e322520 6e006631 6f6c206f     fset %2.1f.no lo
   dabbc:	69746163 73206e6f 6c657461 6574696c     cation satellite
   dabcc:	64253a73 636f6c00 6f697461 66253a6e     s:%d.location:%f
   dabdc:	2066252c 69746c61 65647574 2066253a     ,%f altitude:%f 
   dabec:	65746173 74696c6c 253a7365 64682064     satellites:%d hd
   dabfc:	253a706f 6c25006c 696d2075 73696c6c     op:%l.%lu millis
   dac0c:	6e6f6365 74207364 6567206f 50472074     econds to get GP
   dac1c:	69662053 70670078 34250073 2066322e     S fix.gps.%4.2f 
   dac2c:	74530046 206b6375 73206e69 7065656c     F.Stuck in sleep
   dac3c:	61747320 53006574 65746174 61707300      state.State.spa
   dac4c:	642f6b72 63697665 65732f65 6f697373     rk/device/sessio
   dac5c:	6e652f6e 72450064 20726f72 74617453     n/end.Error Stat
   dac6c:	202d2065 65736552 72450074 20726f72     e - Reset.Error 
   dac7c:	74617453 202d2065 65776f50 79432072     State - Power Cy
   dac8c:	00656c63 64616f4c 20676e69 74737953     cle.Loading Syst
   dac9c:	44206d65 75616665 0073746c 6e676953     em Defaults.Sign
   dacac:	53006c61 6c706d61 746e4965 61767265     al.SampleInterva
   dacbc:	6552006c 43746573 746e756f 62614300     l.ResetCount.Cab
   daccc:	65546e69 5600706d 54746e65 00706d65     inTemp.VentTemp.
   dacdc:	7374754f 54656469 00706d65 656c6552     OutsideTemp.Rele
   dacec:	00657361 74617473 43664f65 41006768     ase.stateOfChg.A
   dacfc:	7472656c 69540073 664f656d 74657366     lerts.TimeOffset
   dad0c:	74614200 79726574 746e6f43 00747865     .BatteryContext.
   dad1c:	65736572 41524674 6148004d 65526472     resetFRAM.HardRe
   dad2c:	00746573 646e6553 00776f4e 62726556     set.SendNow.Verb
   dad3c:	2d65736f 65646f4d 74655300 6d69542d     ose-Mode.Set-Tim
   dad4c:	6e6f7a65 65530065 53442d74 66664f54     ezone.Set-DSTOff
   dad5c:	00746573 72617453 20707574 706d6f43     set.Startup Comp
   dad6c:	6574656c 00000000                       lete....

000dad74 <_ZTV8MB85RC64>:
	...
   dad7c:	000d417d 000d4191 000d678d 000d6823     }A...A...g..#h..
   dad8c:	000d68a5                                .h..

000dad90 <_ZTV17PublishQueueAsync>:
	...
   dad98:	000d4155 000d4169 000d7651 000d77dd     UA..iA..Qv...w..
   dada8:	000d779d 000d777b 000d7923 000d77c3     .w..{w..#y...w..
   dadb8:	000da960 000da968 000da96d 000da972     `...h...m...r...
   dadc8:	000da976 000da97b 000da980 000da984     v...{...........
   dadd8:	000da98f 000da99a 000da960 000da9a6     ........`.......
   dade8:	000da9aa 000da9b3 000da9c2 000da9d2     ................
   dadf8:	000da9d8                                ....

000dadfc <_ZL17FRAMversionNumber>:
   dadfc:	00000001 61666564 20746c75 42534d00     ....default .MSB
   dae0c:	42534c00 50533c00 74655349 676e6974     .LSB.<SPISetting
   dae1c:	65642073 6c756166 3c003e74 53495053     s default>.<SPIS
   dae2c:	69747465 2073676e 75257325 20732520     ettings %s%u %s 
   dae3c:	45444f4d 003e7525 65737341 61725474     MODE%u>.AssetTra
   dae4c:	72656b63 72697700 61655265 74794264     cker.wireReadByt
   dae5c:	76417365 616c6961 20656c62 20433249     esAvailable I2C 
   dae6c:	6f727265 75252072 72697700 61655265     error %u.wireRea
   dae7c:	74794264 76417365 616c6961 20656c62     dBytesAvailable 
   dae8c:	6f636e69 63657272 6f632074 20746e75     incorrect count 
   dae9c:	77007525 52657269 42646165 73657479     %u.wireReadBytes
   daeac:	43324920 72726520 2520726f 69770075      I2C error %u.wi
   daebc:	65526572 79426461 20736574 6f636e69     reReadBytes inco
   daecc:	63657272 6f632074 20746e75 00007525     rrect count %u..

000daedc <_ZTVN8particle11SPISettingsE>:
	...
   daee4:	000d58e1 000d5885 000d5887              .X...X...X..

000daef0 <_ZTV12AssetTracker>:
	...
   daef8:	000d5949 000d5965                       IY..eY..

000daf00 <_ZTV13LegacyAdapter>:
	...
   daf08:	000d5cd9 000d5cdb 4d525047 4e470043     .\...\..GPRMC.GN
   daf18:	00434d52 47475047 4e470041 00414747     RMC.GPGGA.GNGGA.
   daf28:	2e707061 6f6c6275 00000078              app.ublox...

000daf34 <_ZTV6LIS3DH>:
	...
   daf44:	000d66a5 000d40a5 000d40a5              .f...@...@..

000daf50 <_ZTV9LIS3DHSPI>:
	...
   daf58:	000d65c1 000d65c3 000d66c7 000d6601     .e...e...f...f..
   daf68:	000d6643 000d65d1 000d65eb 74697277     Cf...e...e..writ
   daf78:	74614465 61662061 64656c69 72756420     eData failed dur
   daf88:	20676e69 73617265 72662065 64416d61     ing erase framAd
   daf98:	253d7264 00000075                       dr=%u...

000dafa0 <_ZTV6MB85RC>:
	...
   dafa8:	000d66dd 000d66df 000d678d 000d6823     .f...f...g..#h..
   dafb8:	000d68a5 69766564 65526563 66206461     .h..deviceRead f
   dafc8:	656c6961 74732064 253d7461 65730064     ailed stat=%d.se
   dafd8:	69542074 6620656d 206d6f72 20435452     t Time from RTC 
   dafe8:	64007325 63697665 69725765 66206574     %s.deviceWrite f
   daff8:	656c6961 74732064 253d7461 65730064     ailed stat=%d.se
   db008:	54522074 72662043 63206d6f 64756f6c     t RTC from cloud
   db018:	00732520 756f6c63 69742064 6e20656d      %s.cloud time n
   db028:	7620746f 64696c61 76656400 57656369     ot valid.deviceW
   db038:	65746972 52504545 66204d4f 656c6961     riteEEPROM faile
   db048:	74732064 253d7461 70610064 74722e70     d stat=%d.app.rt
   db058:	00000063                                c...

000db05c <_ZTV12MCP79410SRAM>:
	...
   db064:	000d6965 000d697b 000d6955 000d6959     ei..{i..Ui..Yi..
   db074:	000d69a5 000d6c99 000d6eb9              .i...l...n..

000db080 <_ZTV12MCP79410Time>:
	...
   db088:	000d6969 000d696d                       ii..mi..

000db090 <_ZTV14MCP79410EEPROM>:
	...
   db098:	000d6967 000d6989 000d695d 000d6961     gi...i..]i..ai..
   db0a8:	000d69a5 000d6cd3 000d7205              .i...l...r..

000db0b4 <_ZTV8MCP79410>:
	...
   db0bc:	000d696b 000d6997 6c627550 51687369     ki...i..PublishQ
   db0cc:	65756575 6e797341 75710063 69657565     ueueAsync.queuei
   db0dc:	6520676e 746e6576 656d614e 2073253d     ng eventName=%s 
   db0ec:	61746164 2073253d 3d6c7474 66206425     data=%s ttl=%d f
   db0fc:	7367616c 64253d31 616c6620 3d327367     lags1=%d flags2=
   db10c:	73206425 3d657a69 70006425 696c6275     %d size=%d.publi
   db11c:	6e696873 73252067 20732520 3d6c7474     shing %s %s ttl=
   db12c:	66206425 7367616c 0078253d 6c627570     %d flags=%x.publ
   db13c:	65687369 75732064 73656363 6c756673     ished successful
   db14c:	7000796c 696c6275 64656873 69616620     ly.published fai
   db15c:	2c64656c 6c697720 6572206c 20797274     led, will retry 
   db16c:	25206e69 6d20756c 70610073 75702e70     in %lu ms.app.pu
   db17c:	00007162                                bq..

000db180 <_ZTV21PublishQueueAsyncBase>:
	...
   db190:	000d7651 000d40a5 000d40a5 000d40a5     Qv...@...@...@..
   db1a0:	000d40a5 000d40a5                       .@...@..

000db1a8 <_ZTV25PublishQueueAsyncRetained>:
	...
   db1b0:	000d7739 000d774d 000d7651 000d77dd     9w..Mw..Qv...w..
   db1c0:	000d779d 000d777b 000d7923 000d77c3     .w..{w..#y...w..

000db1d0 <_ZTVN5spark13CellularClassE>:
	...
   db1d8:	000d8437 000d842d 000d8423 000d83d9     7...-...#.......
   db1e8:	000d8417 000d840b 000d83ff 000d83f7     ................
   db1f8:	000d83ed 000d83e3 000d8f1d              ............

000db204 <_ZTV14CellularSignal>:
	...
   db20c:	000d84e5 000d84eb 000d84e7 000d84f9     ................
   db21c:	000d852d 000d8559 000d858d 000d85dd     -...Y...........
   db22c:	fffffffc 00000000 000d8603              ............

000db238 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   db240:	000d8623 000d8629 000d8667 000d8637     #...)...g...7...
   db250:	000d8625                                %...

000db254 <_ZTVN5spark13EthernetClassE>:
	...
   db25c:	000d8c2f 000d8c25 000d8c1b 000d8c11     /...%...........
   db26c:	000d8c05 000d8bf9 000d8bed 000d8be5     ................
   db27c:	000d8bdb 000d8bd1 000d8f1d              ............

000db288 <_ZTV7TwoWire>:
	...
   db290:	000d8c4d 000d8c97 000d8c6f 000d8c4f     M.......o...O...
   db2a0:	000d8c77 000d8c7f 000d8c87 000d8c8f     w...............

000db2b0 <_ZTV9IPAddress>:
	...
   db2b8:	000d8dd1 000d8dc1 000d8dc3 00707061     ............app.

000db2c8 <_ZTVN5spark12NetworkClassE>:
	...
   db2d0:	000d8eb5 000d8ebf 000d8ec9 000d8ed3     ................
   db2e0:	000d8edd 000d8ee9 000d8ef5 000d8f01     ................
   db2f0:	000d8f09 000d8f13 000d8f1d              ............

000db2fc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   db2fc:	18100800 38302820 2b25005a 3a643330     .... (08Z.%+03d:
   db30c:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
   db31c:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
   db32c:	00000000                                ....

000db330 <_ZTV11USARTSerial>:
	...
   db338:	000d989d 000d9909 000d98e1 000d9005     ................
   db348:	000d98b1 000d98cd 000d98bf 000d98db     ................
   db358:	000d989f 000d98a3                       ........

000db360 <_ZTV9USBSerial>:
	...
   db368:	000d999d 000d9a05 000d99db 000d9005     ................
   db378:	000d99cd 000d999f 000d99af 000d99ff     ................
   db388:	000d99bf 000d9999                       ........

000db390 <_ZSt7nothrow>:
   db390:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   db3a0:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000db3b1 <day_name.6145>:
   db3b1:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   db3c1:	61536972                                 riSat

000db3c6 <mon_name.6146>:
   db3c6:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   db3d6:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   db3e6:	63654476                                vDec

000db3ea <_ctype_>:
   db3ea:	20202000 20202020 28282020 20282828     .         ((((( 
   db3fa:	20202020 20202020 20202020 20202020                     
   db40a:	10108820 10101010 10101010 10101010      ...............
   db41a:	04040410 04040404 10040404 10101010     ................
   db42a:	41411010 41414141 01010101 01010101     ..AAAAAA........
   db43a:	01010101 01010101 01010101 10101010     ................
   db44a:	42421010 42424242 02020202 02020202     ..BBBBBB........
   db45a:	02020202 02020202 02020202 10101010     ................
   db46a:	00000020 00000000 00000000 00000000      ...............
	...

000db4eb <link_const_variable_data_end>:
	...

000db4ec <link_constructors_location>:
   db4ec:	000d572d 	.word	0x000d572d
   db4f0:	000d5c4d 	.word	0x000d5c4d
   db4f4:	000d6371 	.word	0x000d6371
   db4f8:	000d7235 	.word	0x000d7235
   db4fc:	000d7bb5 	.word	0x000d7bb5
   db500:	000d7bc5 	.word	0x000d7bc5
   db504:	000d83b1 	.word	0x000d83b1
   db508:	000d84b5 	.word	0x000d84b5
   db50c:	000d8c39 	.word	0x000d8c39
   db510:	000d8ea5 	.word	0x000d8ea5
   db514:	000d8ff1 	.word	0x000d8ff1
   db518:	000d9125 	.word	0x000d9125
   db51c:	000d940d 	.word	0x000d940d
   db520:	000d9889 	.word	0x000d9889

000db524 <link_constructors_end>:
	...
