
/Users/chipmc/Documents/Maker/Particle/Projects/Boron-Connected-Counter/target/1.3.1/boron/Boron-Connected-Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008520  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000208  2003f400  000dc540  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000168  2003e02c  000dc748  0001e02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000065c  2003e194  2003e194  0002e194  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000dc8b0  000dc8b0  0002c8b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dc8d8  000dc8d8  0002c8d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0014e03c  00000000  00000000  0002c8dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001986e  00000000  00000000  0017a918  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00026069  00000000  00000000  00194186  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003060  00000000  00000000  001ba1ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005890  00000000  00000000  001bd24f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00041089  00000000  00000000  001c2adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003fdfa  00000000  00000000  00203b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00110319  00000000  00000000  00243962  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000f404  00000000  00000000  00353c7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fa25 	bl	d9480 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fa45 	bl	d94cc <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e02c 	.word	0x2003e02c
   d404c:	000dc748 	.word	0x000dc748
   d4050:	2003e194 	.word	0x2003e194
   d4054:	2003e194 	.word	0x2003e194
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f004 f97f 	bl	d8360 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000dc53c 	.word	0x000dc53c
   d4084:	000dc4e4 	.word	0x000dc4e4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 bbfe 	b.w	d5888 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f001 f9bd 	bl	d540c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f004 b931 	b.w	d82fc <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 bbe9 	b.w	d6870 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 bbef 	b.w	d6880 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 bbed 	b.w	d6880 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40b6:	6803      	ldr	r3, [r0, #0]
   d40b8:	b2c9      	uxtb	r1, r1
   d40ba:	689b      	ldr	r3, [r3, #8]
   d40bc:	4718      	bx	r3

000d40be <_ZN17Adafruit_FRAM_I2CC1Ev>:
    Constructor
*/
/**************************************************************************/
Adafruit_FRAM_I2C::Adafruit_FRAM_I2C(void)
{
  _framInitialised = false;
   d40be:	2200      	movs	r2, #0
   d40c0:	7042      	strb	r2, [r0, #1]
}
   d40c2:	4770      	bx	lr

000d40c4 <_ZN17Adafruit_FRAM_I2C5beginEh>:
    Initializes I2C and configures the chip (call this function before
    doing anything else)
*/
/**************************************************************************/
boolean Adafruit_FRAM_I2C::begin(uint8_t addr)
{
   d40c4:	b510      	push	{r4, lr}
  i2c_addr = addr;
   d40c6:	7001      	strb	r1, [r0, #0]
    Initializes I2C and configures the chip (call this function before
    doing anything else)
*/
/**************************************************************************/
boolean Adafruit_FRAM_I2C::begin(uint8_t addr)
{
   d40c8:	4604      	mov	r4, r0
  i2c_addr = addr;
  Wire.begin();
   d40ca:	f004 f9db 	bl	d8484 <_Z19__fetch_global_Wirev>
   d40ce:	f003 f933 	bl	d7338 <_ZN7TwoWire5beginEv>
    //Serial.println(prodID, HEX);
    return false;
  }
  */
  /* Everything seems to be properly initialised and connected */
  _framInitialised = true;
   d40d2:	2001      	movs	r0, #1
   d40d4:	7060      	strb	r0, [r4, #1]

  return true;
}
   d40d6:	bd10      	pop	{r4, pc}

000d40d8 <_ZN17Adafruit_FRAM_I2C6write8Eth>:
    @params[in] i2cAddr
                The 8-bit value to write at framAddr
*/
/**************************************************************************/
void Adafruit_FRAM_I2C::write8 (uint16_t framAddr, uint8_t value)
{
   d40d8:	b570      	push	{r4, r5, r6, lr}
   d40da:	4606      	mov	r6, r0
   d40dc:	4615      	mov	r5, r2
   d40de:	460c      	mov	r4, r1
  Wire.beginTransmission(i2c_addr);
   d40e0:	f004 f9d0 	bl	d8484 <_Z19__fetch_global_Wirev>
   d40e4:	7831      	ldrb	r1, [r6, #0]
   d40e6:	f003 f93e 	bl	d7366 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
   d40ea:	f004 f9cb 	bl	d8484 <_Z19__fetch_global_Wirev>
   d40ee:	0a21      	lsrs	r1, r4, #8
   d40f0:	f7ff ffe1 	bl	d40b6 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
   d40f4:	f004 f9c6 	bl	d8484 <_Z19__fetch_global_Wirev>
   d40f8:	b2e1      	uxtb	r1, r4
   d40fa:	f7ff ffdc 	bl	d40b6 <_ZN7TwoWire5writeEi>
  Wire.write(value);
   d40fe:	f004 f9c1 	bl	d8484 <_Z19__fetch_global_Wirev>
   d4102:	6803      	ldr	r3, [r0, #0]
   d4104:	4629      	mov	r1, r5
   d4106:	689b      	ldr	r3, [r3, #8]
   d4108:	4798      	blx	r3
  Wire.endTransmission();
   d410a:	f004 f9bb 	bl	d8484 <_Z19__fetch_global_Wirev>
}
   d410e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
  Wire.beginTransmission(i2c_addr);
  Wire.write(framAddr >> 8);
  Wire.write(framAddr & 0xFF);
  Wire.write(value);
  Wire.endTransmission();
   d4112:	f003 b933 	b.w	d737c <_ZN7TwoWire15endTransmissionEv>

000d4116 <_ZN17Adafruit_FRAM_I2C5read8Et>:

    @returns    The 8-bit value retrieved at framAddr
*/
/**************************************************************************/
uint8_t Adafruit_FRAM_I2C::read8 (uint16_t framAddr)
{
   d4116:	b538      	push	{r3, r4, r5, lr}
   d4118:	4604      	mov	r4, r0
   d411a:	460d      	mov	r5, r1
  Wire.beginTransmission(i2c_addr);
   d411c:	f004 f9b2 	bl	d8484 <_Z19__fetch_global_Wirev>
   d4120:	7821      	ldrb	r1, [r4, #0]
   d4122:	f003 f920 	bl	d7366 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
   d4126:	f004 f9ad 	bl	d8484 <_Z19__fetch_global_Wirev>
   d412a:	0a29      	lsrs	r1, r5, #8
   d412c:	f7ff ffc3 	bl	d40b6 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
   d4130:	f004 f9a8 	bl	d8484 <_Z19__fetch_global_Wirev>
   d4134:	b2e9      	uxtb	r1, r5
   d4136:	f7ff ffbe 	bl	d40b6 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d413a:	f004 f9a3 	bl	d8484 <_Z19__fetch_global_Wirev>
   d413e:	f003 f91d 	bl	d737c <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(i2c_addr, (uint8_t)1);
   d4142:	f004 f99f 	bl	d8484 <_Z19__fetch_global_Wirev>
   d4146:	2201      	movs	r2, #1
   d4148:	7821      	ldrb	r1, [r4, #0]
   d414a:	f003 f904 	bl	d7356 <_ZN7TwoWire11requestFromEhh>

  return Wire.read();
   d414e:	f004 f999 	bl	d8484 <_Z19__fetch_global_Wirev>
   d4152:	6803      	ldr	r3, [r0, #0]
   d4154:	695b      	ldr	r3, [r3, #20]
   d4156:	4798      	blx	r3
}
   d4158:	b2c0      	uxtb	r0, r0
   d415a:	bd38      	pop	{r3, r4, r5, pc}

000d415c <_GLOBAL__sub_I__ZN17Adafruit_FRAM_I2CC2Ev>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d415c:	f002 b922 	b.w	d63a4 <HAL_Pin_Map>

000d4160 <_Z9sensorISRv>:
}

// Here are the various hardware and timer interrupt service routines
void sensorISR()
{
  sensorDetect = true;                              // sets the sensor flag for the main loop
   d4160:	4b01      	ldr	r3, [pc, #4]	; (d4168 <_Z9sensorISRv+0x8>)
   d4162:	2201      	movs	r2, #1
   d4164:	701a      	strb	r2, [r3, #0]
   d4166:	4770      	bx	lr
   d4168:	2003e19c 	.word	0x2003e19c

000d416c <_Z11watchdogISRv>:
}

void watchdogISR()
{
  watchdogFlag = true;
   d416c:	4b01      	ldr	r3, [pc, #4]	; (d4174 <_Z11watchdogISRv+0x8>)
   d416e:	2201      	movs	r2, #1
   d4170:	701a      	strb	r2, [r3, #0]
   d4172:	4770      	bx	lr
   d4174:	2003e1f2 	.word	0x2003e1f2

000d4178 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4178:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d417a:	6803      	ldr	r3, [r0, #0]
   d417c:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d417e:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4180:	d904      	bls.n	d418c <nrf_gpio_pin_port_decode+0x14>
   d4182:	4a07      	ldr	r2, [pc, #28]	; (d41a0 <nrf_gpio_pin_port_decode+0x28>)
   d4184:	2100      	movs	r1, #0
   d4186:	200a      	movs	r0, #10
   d4188:	f002 fa54 	bl	d6634 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d418c:	6823      	ldr	r3, [r4, #0]
   d418e:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4190:	bf83      	ittte	hi
   d4192:	f003 031f 	andhi.w	r3, r3, #31
   d4196:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d4198:	4802      	ldrhi	r0, [pc, #8]	; (d41a4 <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d419a:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d419e:	bd10      	pop	{r4, pc}
   d41a0:	000d6355 	.word	0x000d6355
   d41a4:	50000300 	.word	0x50000300

000d41a8 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d41a8:	b507      	push	{r0, r1, r2, lr}
   d41aa:	ab02      	add	r3, sp, #8
   d41ac:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d41b0:	4618      	mov	r0, r3
   d41b2:	f7ff ffe1 	bl	d4178 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d41b6:	9a01      	ldr	r2, [sp, #4]
   d41b8:	2301      	movs	r3, #1
   d41ba:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d41bc:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}
   d41c0:	b003      	add	sp, #12
   d41c2:	f85d fb04 	ldr.w	pc, [sp], #4

000d41c6 <nrf_gpio_pin_clear>:


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
   d41c6:	b507      	push	{r0, r1, r2, lr}
   d41c8:	ab02      	add	r3, sp, #8
   d41ca:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d41ce:	4618      	mov	r0, r3
   d41d0:	f7ff ffd2 	bl	d4178 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d41d4:	9a01      	ldr	r2, [sp, #4]
   d41d6:	2301      	movs	r3, #1
   d41d8:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d41da:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
}
   d41de:	b003      	add	sp, #12
   d41e0:	f85d fb04 	ldr.w	pc, [sp], #4

000d41e4 <_Z7sendNow6String>:
  }
  return 1;                                                           // Returns 1 to let the user know if was reset
}

int sendNow(String command) // Function to force sending data in current hour
{
   d41e4:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d41e6:	4904      	ldr	r1, [pc, #16]	; (d41f8 <_Z7sendNow6String+0x14>)
   d41e8:	f003 fdf9 	bl	d7dde <_ZNK6String6equalsEPKc>
  if (command == "1")
   d41ec:	b118      	cbz	r0, d41f6 <_Z7sendNow6String+0x12>
  {
    state = REPORTING_STATE;
   d41ee:	4b03      	ldr	r3, [pc, #12]	; (d41fc <_Z7sendNow6String+0x18>)
   d41f0:	2205      	movs	r2, #5
   d41f2:	701a      	strb	r2, [r3, #0]
    return 1;
   d41f4:	2001      	movs	r0, #1
  }
  else return 0;
}
   d41f6:	bd08      	pop	{r3, pc}
   d41f8:	000dbd82 	.word	0x000dbd82
   d41fc:	2003e1c9 	.word	0x2003e1c9

000d4200 <_ZN10CloudClass12syncTimeDoneEv.isra.38>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d4200:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d4202:	2000      	movs	r0, #0
   d4204:	f002 fad4 	bl	d67b0 <spark_sync_time_pending>
   d4208:	b128      	cbz	r0, d4216 <_ZN10CloudClass12syncTimeDoneEv.isra.38+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d420a:	f002 faa9 	bl	d6760 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d420e:	f080 0001 	eor.w	r0, r0, #1
   d4212:	b2c0      	uxtb	r0, r0
   d4214:	bd08      	pop	{r3, pc}
   d4216:	2001      	movs	r0, #1
    }
   d4218:	bd08      	pop	{r3, pc}

000d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d421a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d421c:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4220:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4222:	f88d 3000 	strb.w	r3, [sp]
   d4226:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4228:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d422a:	f002 fe15 	bl	d6e58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d422e:	4628      	mov	r0, r5
   d4230:	b003      	add	sp, #12
   d4232:	bd30      	pop	{r4, r5, pc}

000d4234 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4234:	2300      	movs	r3, #0
   d4236:	461a      	mov	r2, r3
   d4238:	4619      	mov	r1, r3
   d423a:	6840      	ldr	r0, [r0, #4]
   d423c:	f002 baf0 	b.w	d6820 <network_off>

000d4240 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4240:	2000      	movs	r0, #0
   d4242:	f002 b8a7 	b.w	d6394 <hal_timer_millis>
	...

000d4248 <_Z9FRAMread8j>:

// Begin section
uint8_t FRAMread8(unsigned int address)  // Read 8 bits from FRAM
{
    uint8_t result;
    result = fram.read8(address);
   d4248:	b281      	uxth	r1, r0
   d424a:	4801      	ldr	r0, [pc, #4]	; (d4250 <_Z9FRAMread8j+0x8>)
   d424c:	f7ff bf63 	b.w	d4116 <_ZN17Adafruit_FRAM_I2C5read8Et>
   d4250:	2003e1a4 	.word	0x2003e1a4

000d4254 <_Z10FRAMwrite8jh>:
    return result;
}

void FRAMwrite8(unsigned int address, uint8_t value)    // Write 8 bits to FRAM
{
    fram.write8(address,value);
   d4254:	460a      	mov	r2, r1
   d4256:	b281      	uxth	r1, r0
   d4258:	4801      	ldr	r0, [pc, #4]	; (d4260 <_Z10FRAMwrite8jh+0xc>)
   d425a:	f7ff bf3d 	b.w	d40d8 <_ZN17Adafruit_FRAM_I2C6write8Eth>
   d425e:	bf00      	nop
   d4260:	2003e1a4 	.word	0x2003e1a4

000d4264 <_Z10FRAMread16j>:
}

int FRAMread16(unsigned int address)
{
   d4264:	b570      	push	{r4, r5, r6, lr}
    long two;
    long one;
    //Read the 2 bytes from  memory.
    two = fram.read8(address);
   d4266:	4d07      	ldr	r5, [pc, #28]	; (d4284 <_Z10FRAMread16j+0x20>)
   d4268:	b284      	uxth	r4, r0
   d426a:	4621      	mov	r1, r4
   d426c:	4628      	mov	r0, r5
   d426e:	f7ff ff52 	bl	d4116 <_ZN17Adafruit_FRAM_I2C5read8Et>
    one = fram.read8(address + 1);
   d4272:	1c61      	adds	r1, r4, #1
int FRAMread16(unsigned int address)
{
    long two;
    long one;
    //Read the 2 bytes from  memory.
    two = fram.read8(address);
   d4274:	4606      	mov	r6, r0
    one = fram.read8(address + 1);
   d4276:	b289      	uxth	r1, r1
   d4278:	4628      	mov	r0, r5
   d427a:	f7ff ff4c 	bl	d4116 <_ZN17Adafruit_FRAM_I2C5read8Et>
    //Return the recomposed long by using bitshift.
    return ((two << 0) & 0xFF) + ((one << 8) & 0xFFFF);
}
   d427e:	eb06 2000 	add.w	r0, r6, r0, lsl #8
   d4282:	bd70      	pop	{r4, r5, r6, pc}
   d4284:	2003e1a4 	.word	0x2003e1a4

000d4288 <_Z11FRAMwrite16ji>:

void FRAMwrite16(unsigned int address, int value)   // Write 16 bits to FRAM
{
   d4288:	b570      	push	{r4, r5, r6, lr}
    //Decomposition from a long to 2 bytes by using bitshift.
    //One = Most significant -> Four = Least significant byte
    uint8_t two = (value & 0xFF);
    uint8_t one = ((value >> 8) & 0xFF);
    //Write the 2 bytes into the eeprom memory.
    fram.write8(address, two);
   d428a:	4d08      	ldr	r5, [pc, #32]	; (d42ac <_Z11FRAMwrite16ji+0x24>)
   d428c:	b284      	uxth	r4, r0
    //Return the recomposed long by using bitshift.
    return ((two << 0) & 0xFF) + ((one << 8) & 0xFFFF);
}

void FRAMwrite16(unsigned int address, int value)   // Write 16 bits to FRAM
{
   d428e:	460e      	mov	r6, r1
    //Decomposition from a long to 2 bytes by using bitshift.
    //One = Most significant -> Four = Least significant byte
    uint8_t two = (value & 0xFF);
    uint8_t one = ((value >> 8) & 0xFF);
    //Write the 2 bytes into the eeprom memory.
    fram.write8(address, two);
   d4290:	b2ca      	uxtb	r2, r1
   d4292:	4628      	mov	r0, r5
   d4294:	4621      	mov	r1, r4
   d4296:	f7ff ff1f 	bl	d40d8 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 1, one);
   d429a:	1c61      	adds	r1, r4, #1
   d429c:	f3c6 2207 	ubfx	r2, r6, #8, #8
   d42a0:	4628      	mov	r0, r5
   d42a2:	b289      	uxth	r1, r1
}
   d42a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    //One = Most significant -> Four = Least significant byte
    uint8_t two = (value & 0xFF);
    uint8_t one = ((value >> 8) & 0xFF);
    //Write the 2 bytes into the eeprom memory.
    fram.write8(address, two);
    fram.write8(address + 1, one);
   d42a8:	f7ff bf16 	b.w	d40d8 <_ZN17Adafruit_FRAM_I2C6write8Eth>
   d42ac:	2003e1a4 	.word	0x2003e1a4

000d42b0 <_Z11resetCounts6String>:
  }
  else return 0;
}

int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
   d42b0:	b508      	push	{r3, lr}
   d42b2:	4911      	ldr	r1, [pc, #68]	; (d42f8 <_Z11resetCounts6String+0x48>)
   d42b4:	f003 fd93 	bl	d7dde <_ZNK6String6equalsEPKc>
  if (command == "1")
   d42b8:	b1e8      	cbz	r0, d42f6 <_Z11resetCounts6String+0x46>
  {
    FRAMwrite16(FRAM::currentDailyCountAddr, 0);                      // Reset Daily Count in memory
   d42ba:	2100      	movs	r1, #0
   d42bc:	200c      	movs	r0, #12
   d42be:	f7ff ffe3 	bl	d4288 <_Z11FRAMwrite16ji>
    FRAMwrite16(FRAM::currentHourlyCountAddr, 0);                     // Reset Hourly Count in memory
   d42c2:	2100      	movs	r1, #0
   d42c4:	2008      	movs	r0, #8
   d42c6:	f7ff ffdf 	bl	d4288 <_Z11FRAMwrite16ji>
    FRAMwrite8(FRAM::resetCountAddr,0);                               // If so, store incremented number - watchdog must have done This
   d42ca:	2100      	movs	r1, #0
   d42cc:	2003      	movs	r0, #3
   d42ce:	f7ff ffc1 	bl	d4254 <_Z10FRAMwrite8jh>
    FRAMwrite8(FRAM::alertsCountAddr,0);
   d42d2:	2012      	movs	r0, #18
   d42d4:	2100      	movs	r1, #0
   d42d6:	f7ff ffbd 	bl	d4254 <_Z10FRAMwrite8jh>
    alerts = 0;
   d42da:	4a08      	ldr	r2, [pc, #32]	; (d42fc <_Z11resetCounts6String+0x4c>)
   d42dc:	2300      	movs	r3, #0
   d42de:	6013      	str	r3, [r2, #0]
    resetCount = 0;
   d42e0:	4a07      	ldr	r2, [pc, #28]	; (d4300 <_Z11resetCounts6String+0x50>)
   d42e2:	6013      	str	r3, [r2, #0]
    hourlyPersonCount = 0;                                            // Reset count variables
   d42e4:	4a07      	ldr	r2, [pc, #28]	; (d4304 <_Z11resetCounts6String+0x54>)
   d42e6:	6013      	str	r3, [r2, #0]
    dailyPersonCount = 0;
   d42e8:	4a07      	ldr	r2, [pc, #28]	; (d4308 <_Z11resetCounts6String+0x58>)
   d42ea:	6013      	str	r3, [r2, #0]
    hourlyPersonCountSent = 0;                                        // In the off-chance there is data in flight
   d42ec:	4a07      	ldr	r2, [pc, #28]	; (d430c <_Z11resetCounts6String+0x5c>)
   d42ee:	6013      	str	r3, [r2, #0]
    dataInFlight = false;
   d42f0:	4a07      	ldr	r2, [pc, #28]	; (d4310 <_Z11resetCounts6String+0x60>)
   d42f2:	2001      	movs	r0, #1
   d42f4:	7013      	strb	r3, [r2, #0]
    return 1;
  }
  else return 0;
}
   d42f6:	bd08      	pop	{r3, pc}
   d42f8:	000dbd82 	.word	0x000dbd82
   d42fc:	2003e1d4 	.word	0x2003e1d4
   d4300:	2003e1dc 	.word	0x2003e1dc
   d4304:	2003e1d0 	.word	0x2003e1d0
   d4308:	2003e198 	.word	0x2003e198
   d430c:	2003e1c4 	.word	0x2003e1c4
   d4310:	2003e264 	.word	0x2003e264

000d4314 <_Z10FRAMread32m>:
}

unsigned long FRAMread32(unsigned long address)
{
   d4314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    long four;
    long three;
    long two;
    long one;
    //Read the 4 bytes from memory.
    four = fram.read8(address);
   d4318:	4e0f      	ldr	r6, [pc, #60]	; (d4358 <_Z10FRAMread32m+0x44>)
   d431a:	b284      	uxth	r4, r0
   d431c:	4621      	mov	r1, r4
   d431e:	4630      	mov	r0, r6
   d4320:	f7ff fef9 	bl	d4116 <_ZN17Adafruit_FRAM_I2C5read8Et>
    three = fram.read8(address + 1);
   d4324:	1c61      	adds	r1, r4, #1
    long four;
    long three;
    long two;
    long one;
    //Read the 4 bytes from memory.
    four = fram.read8(address);
   d4326:	4605      	mov	r5, r0
    three = fram.read8(address + 1);
   d4328:	b289      	uxth	r1, r1
   d432a:	4630      	mov	r0, r6
   d432c:	f7ff fef3 	bl	d4116 <_ZN17Adafruit_FRAM_I2C5read8Et>
    two = fram.read8(address + 2);
   d4330:	1ca1      	adds	r1, r4, #2
    long three;
    long two;
    long one;
    //Read the 4 bytes from memory.
    four = fram.read8(address);
    three = fram.read8(address + 1);
   d4332:	4680      	mov	r8, r0
    two = fram.read8(address + 2);
   d4334:	b289      	uxth	r1, r1
   d4336:	4630      	mov	r0, r6
   d4338:	f7ff feed 	bl	d4116 <_ZN17Adafruit_FRAM_I2C5read8Et>
    one = fram.read8(address + 3);
   d433c:	1ce1      	adds	r1, r4, #3
    long two;
    long one;
    //Read the 4 bytes from memory.
    four = fram.read8(address);
    three = fram.read8(address + 1);
    two = fram.read8(address + 2);
   d433e:	4607      	mov	r7, r0
    one = fram.read8(address + 3);
   d4340:	b289      	uxth	r1, r1
   d4342:	4630      	mov	r0, r6
   d4344:	f7ff fee7 	bl	d4116 <_ZN17Adafruit_FRAM_I2C5read8Et>
    //Return the recomposed long by using bitshift.
    return ((four << 0) & 0xFF) + ((three << 8) & 0xFFFF) + ((two << 16) & 0xFFFFFF) + ((one << 24) & 0xFFFFFFFF);
   d4348:	eb05 2508 	add.w	r5, r5, r8, lsl #8
   d434c:	eb05 4507 	add.w	r5, r5, r7, lsl #16
}
   d4350:	eb05 6000 	add.w	r0, r5, r0, lsl #24
   d4354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4358:	2003e1a4 	.word	0x2003e1a4

000d435c <_Z11FRAMwrite32im>:

void FRAMwrite32(int address, unsigned long value)  // Write 32 bits to FRAM
{
   d435c:	b570      	push	{r4, r5, r6, lr}
    uint8_t four = (value & 0xFF);
    uint8_t three = ((value >> 8) & 0xFF);
    uint8_t two = ((value >> 16) & 0xFF);
    uint8_t one = ((value >> 24) & 0xFF);
    //Write the 4 bytes into the eeprom memory.
    fram.write8(address, four);
   d435e:	4d0f      	ldr	r5, [pc, #60]	; (d439c <_Z11FRAMwrite32im+0x40>)
   d4360:	b284      	uxth	r4, r0
    //Return the recomposed long by using bitshift.
    return ((four << 0) & 0xFF) + ((three << 8) & 0xFFFF) + ((two << 16) & 0xFFFFFF) + ((one << 24) & 0xFFFFFFFF);
}

void FRAMwrite32(int address, unsigned long value)  // Write 32 bits to FRAM
{
   d4362:	460e      	mov	r6, r1
    uint8_t four = (value & 0xFF);
    uint8_t three = ((value >> 8) & 0xFF);
    uint8_t two = ((value >> 16) & 0xFF);
    uint8_t one = ((value >> 24) & 0xFF);
    //Write the 4 bytes into the eeprom memory.
    fram.write8(address, four);
   d4364:	b2ca      	uxtb	r2, r1
   d4366:	4628      	mov	r0, r5
   d4368:	4621      	mov	r1, r4
   d436a:	f7ff feb5 	bl	d40d8 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 1, three);
   d436e:	1c61      	adds	r1, r4, #1
   d4370:	f3c6 2207 	ubfx	r2, r6, #8, #8
   d4374:	4628      	mov	r0, r5
   d4376:	b289      	uxth	r1, r1
   d4378:	f7ff feae 	bl	d40d8 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 2, two);
   d437c:	1ca1      	adds	r1, r4, #2
   d437e:	f3c6 4207 	ubfx	r2, r6, #16, #8
   d4382:	4628      	mov	r0, r5
   d4384:	b289      	uxth	r1, r1
   d4386:	f7ff fea7 	bl	d40d8 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 3, one);
   d438a:	1ce1      	adds	r1, r4, #3
   d438c:	0e32      	lsrs	r2, r6, #24
   d438e:	4628      	mov	r0, r5
   d4390:	b289      	uxth	r1, r1
}
   d4392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    uint8_t one = ((value >> 24) & 0xFF);
    //Write the 4 bytes into the eeprom memory.
    fram.write8(address, four);
    fram.write8(address + 1, three);
    fram.write8(address + 2, two);
    fram.write8(address + 3, one);
   d4396:	f7ff be9f 	b.w	d40d8 <_ZN17Adafruit_FRAM_I2C6write8Eth>
   d439a:	bf00      	nop
   d439c:	2003e1a4 	.word	0x2003e1a4

000d43a0 <_Z17getSignalStrengthv>:
  stateOfCharge = int(batteryMonitor.getSoC());                       // Percentage of full charge
}


void getSignalStrength()
{
   d43a0:	b530      	push	{r4, r5, lr}
  const char* radioTech[9] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","CAT M1"};
   d43a2:	4d18      	ldr	r5, [pc, #96]	; (d4404 <_Z17getSignalStrengthv+0x64>)
   d43a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  stateOfCharge = int(batteryMonitor.getSoC());                       // Percentage of full charge
}


void getSignalStrength()
{
   d43a6:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[9] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","CAT M1"};
   d43a8:	ac05      	add	r4, sp, #20
   d43aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d43ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d43ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d43b0:	682b      	ldr	r3, [r5, #0]
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d43b2:	4915      	ldr	r1, [pc, #84]	; (d4408 <_Z17getSignalStrengthv+0x68>)
}


void getSignalStrength()
{
  const char* radioTech[9] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","CAT M1"};
   d43b4:	6023      	str	r3, [r4, #0]
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d43b6:	a80e      	add	r0, sp, #56	; 0x38
   d43b8:	f002 faee 	bl	d6998 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d43bc:	a80e      	add	r0, sp, #56	; 0x38
   d43be:	f002 fb3e 	bl	d6a3e <_ZNK14CellularSignal19getAccessTechnologyEv>
   d43c2:	4604      	mov	r4, r0

  //Particle.publish("rat",String(rat),PRIVATE);

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d43c4:	a80e      	add	r0, sp, #56	; 0x38
   d43c6:	f002 fba3 	bl	d6b10 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d43ca:	a80e      	add	r0, sp, #56	; 0x38
  auto rat = sig.getAccessTechnology();

  //Particle.publish("rat",String(rat),PRIVATE);

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d43cc:	ee10 5a10 	vmov	r5, s0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d43d0:	f002 fb84 	bl	d6adc <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d43d4:	ab18      	add	r3, sp, #96	; 0x60
   d43d6:	ee10 0a10 	vmov	r0, s0
   d43da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d43de:	f004 fb69 	bl	d8ab4 <__aeabi_f2d>
   d43e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d43e6:	4628      	mov	r0, r5
   d43e8:	f004 fb64 	bl	d8ab4 <__aeabi_f2d>
   d43ec:	e9cd 0100 	strd	r0, r1, [sp]
   d43f0:	4a06      	ldr	r2, [pc, #24]	; (d440c <_Z17getSignalStrengthv+0x6c>)
   d43f2:	f854 3c4c 	ldr.w	r3, [r4, #-76]
   d43f6:	4806      	ldr	r0, [pc, #24]	; (d4410 <_Z17getSignalStrengthv+0x70>)
   d43f8:	2140      	movs	r1, #64	; 0x40
   d43fa:	f002 fa61 	bl	d68c0 <snprintf>
}
   d43fe:	b019      	add	sp, #100	; 0x64
   d4400:	bd30      	pop	{r4, r5, pc}
   d4402:	bf00      	nop
   d4404:	000db90c 	.word	0x000db90c
   d4408:	2003e2a4 	.word	0x2003e2a4
   d440c:	000db936 	.word	0x000db936
   d4410:	2003e214 	.word	0x2003e214
   d4414:	00000000 	.word	0x00000000

000d4418 <_Z14getTemperaturev>:

int getTemperature()
{
   d4418:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
   d441a:	200f      	movs	r0, #15
   d441c:	f004 f81b 	bl	d8456 <analogRead>
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
   d4420:	f004 fb36 	bl	d8a90 <__aeabi_i2d>
   d4424:	a31d      	add	r3, pc, #116	; (adr r3, d449c <_Z14getTemperaturev+0x84>)
   d4426:	e9d3 2300 	ldrd	r2, r3, [r3]
   d442a:	f004 fb97 	bl	d8b5c <__aeabi_dmul>
   d442e:	f004 fe8d 	bl	d914c <__aeabi_d2f>
  voltage /= 4096.0;                                                  // Electron is different than the Arduino where there are only 1024 steps
  int temperatureC = int(((voltage - 0.5) * 100));                    //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  temperatureF = int((temperatureC * 9.0 / 5.0) + 32.0);              // now convert to Fahrenheit
   d4432:	eddf 7a13 	vldr	s15, [pc, #76]	; d4480 <_Z14getTemperaturev+0x68>
   d4436:	ee07 0a10 	vmov	s14, r0
   d443a:	ee67 7a27 	vmul.f32	s15, s14, s15
   d443e:	ee17 0a90 	vmov	r0, s15
   d4442:	f004 fb37 	bl	d8ab4 <__aeabi_f2d>
   d4446:	2200      	movs	r2, #0
   d4448:	4b0e      	ldr	r3, [pc, #56]	; (d4484 <_Z14getTemperaturev+0x6c>)
   d444a:	f004 f9d3 	bl	d87f4 <__aeabi_dsub>
   d444e:	2200      	movs	r2, #0
   d4450:	4b0d      	ldr	r3, [pc, #52]	; (d4488 <_Z14getTemperaturev+0x70>)
   d4452:	f004 fb83 	bl	d8b5c <__aeabi_dmul>
   d4456:	f004 fe31 	bl	d90bc <__aeabi_d2iz>
   d445a:	f004 fb19 	bl	d8a90 <__aeabi_i2d>
   d445e:	2200      	movs	r2, #0
   d4460:	4b0a      	ldr	r3, [pc, #40]	; (d448c <_Z14getTemperaturev+0x74>)
   d4462:	f004 fb7b 	bl	d8b5c <__aeabi_dmul>
   d4466:	2200      	movs	r2, #0
   d4468:	4b09      	ldr	r3, [pc, #36]	; (d4490 <_Z14getTemperaturev+0x78>)
   d446a:	f004 fca1 	bl	d8db0 <__aeabi_ddiv>
   d446e:	2200      	movs	r2, #0
   d4470:	4b08      	ldr	r3, [pc, #32]	; (d4494 <_Z14getTemperaturev+0x7c>)
   d4472:	f004 f9c1 	bl	d87f8 <__adddf3>
   d4476:	f004 fe21 	bl	d90bc <__aeabi_d2iz>
   d447a:	4b07      	ldr	r3, [pc, #28]	; (d4498 <_Z14getTemperaturev+0x80>)
   d447c:	6018      	str	r0, [r3, #0]
  return temperatureF;
}
   d447e:	bd08      	pop	{r3, pc}
   d4480:	39800000 	.word	0x39800000
   d4484:	3fe00000 	.word	0x3fe00000
   d4488:	40590000 	.word	0x40590000
   d448c:	40220000 	.word	0x40220000
   d4490:	40140000 	.word	0x40140000
   d4494:	40400000 	.word	0x40400000
   d4498:	2003e1ec 	.word	0x2003e1ec
   d449c:	66666666 	.word	0x66666666
   d44a0:	400a6666 	.word	0x400a6666

000d44a4 <_Z16takeMeasurementsv>:
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
}

// These are the functions that are part of the takeMeasurements call
void takeMeasurements()
{
   d44a4:	b508      	push	{r3, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d44a6:	4b0a      	ldr	r3, [pc, #40]	; (d44d0 <_Z16takeMeasurementsv+0x2c>)
   d44a8:	2200      	movs	r2, #0
   d44aa:	4611      	mov	r1, r2
   d44ac:	6858      	ldr	r0, [r3, #4]
   d44ae:	f002 f9a7 	bl	d6800 <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d44b2:	b108      	cbz	r0, d44b8 <_Z16takeMeasurementsv+0x14>
   d44b4:	f7ff ff74 	bl	d43a0 <_Z17getSignalStrengthv>
  getTemperature();                                                   // Get Temperature at startup as well
   d44b8:	f7ff ffae 	bl	d4418 <_Z14getTemperaturev>
  stateOfCharge = int(batteryMonitor.getSoC());                       // Percentage of full charge
   d44bc:	4805      	ldr	r0, [pc, #20]	; (d44d4 <_Z16takeMeasurementsv+0x30>)
   d44be:	f002 fed7 	bl	d7270 <_ZN9FuelGauge6getSoCEv>
   d44c2:	4b05      	ldr	r3, [pc, #20]	; (d44d8 <_Z16takeMeasurementsv+0x34>)
   d44c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d44c8:	ed83 0a00 	vstr	s0, [r3]
   d44cc:	bd08      	pop	{r3, pc}
   d44ce:	bf00      	nop
   d44d0:	2003e2a4 	.word	0x2003e2a4
   d44d4:	2003e1b4 	.word	0x2003e1b4
   d44d8:	2003e1d8 	.word	0x2003e1d8

000d44dc <_Z11petWatchdogv>:
{
  watchdogFlag = true;
}

void petWatchdog()
{
   d44dc:	b510      	push	{r4, lr}

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d44de:	4c0d      	ldr	r4, [pc, #52]	; (d4514 <_Z11petWatchdogv+0x38>)
   d44e0:	6823      	ldr	r3, [r4, #0]
    nrf_gpio_pin_set(nrf_pin);
   d44e2:	f893 0100 	ldrb.w	r0, [r3, #256]	; 0x100
   d44e6:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
   d44ea:	f003 031f 	and.w	r3, r3, #31
   d44ee:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d44f2:	f7ff fe59 	bl	d41a8 <nrf_gpio_pin_set>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d44f6:	6823      	ldr	r3, [r4, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d44f8:	f893 0100 	ldrb.w	r0, [r3, #256]	; 0x100
   d44fc:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
   d4500:	f003 031f 	and.w	r3, r3, #31
   d4504:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4508:	f7ff fe5d 	bl	d41c6 <nrf_gpio_pin_clear>
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
  digitalWriteFast(donePin, LOW);
  watchdogFlag = false;
   d450c:	4b02      	ldr	r3, [pc, #8]	; (d4518 <_Z11petWatchdogv+0x3c>)
   d450e:	2200      	movs	r2, #0
   d4510:	701a      	strb	r2, [r3, #0]
   d4512:	bd10      	pop	{r4, pc}
   d4514:	2003e204 	.word	0x2003e204
   d4518:	2003e1f2 	.word	0x2003e1f2

000d451c <_Z9PMICresetv>:
}

// Power Management function
void PMICreset() {
   d451c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  power.begin();                                                      // Settings for Solar powered power management
   d451e:	481d      	ldr	r0, [pc, #116]	; (d4594 <_Z9PMICresetv+0x78>)
   d4520:	f003 f958 	bl	d77d4 <_ZN4PMIC5beginEv>
  power.disableWatchdog();
   d4524:	481b      	ldr	r0, [pc, #108]	; (d4594 <_Z9PMICresetv+0x78>)
   d4526:	f003 fb09 	bl	d7b3c <_ZN4PMIC15disableWatchdogEv>
  if (solarPowerMode) {
   d452a:	4b1b      	ldr	r3, [pc, #108]	; (d4598 <_Z9PMICresetv+0x7c>)
   d452c:	781c      	ldrb	r4, [r3, #0]
   d452e:	b1ac      	cbz	r4, d455c <_Z9PMICresetv+0x40>
    power.setInputVoltageLimit(4840);                                 // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
   d4530:	f241 21e8 	movw	r1, #4840	; 0x12e8
   d4534:	4817      	ldr	r0, [pc, #92]	; (d4594 <_Z9PMICresetv+0x78>)
   d4536:	f003 f9d6 	bl	d78e6 <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(900);                                  // default is 900mA
   d453a:	f44f 7161 	mov.w	r1, #900	; 0x384
   d453e:	4815      	ldr	r0, [pc, #84]	; (d4594 <_Z9PMICresetv+0x78>)
   d4540:	f003 fa5b 	bl	d79fa <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,0,1,0,0,0);                              // default is 512mA matches my 3W panel
   d4544:	2200      	movs	r2, #0
   d4546:	4611      	mov	r1, r2
   d4548:	9202      	str	r2, [sp, #8]
   d454a:	9201      	str	r2, [sp, #4]
   d454c:	9200      	str	r2, [sp, #0]
   d454e:	2301      	movs	r3, #1
   d4550:	4810      	ldr	r0, [pc, #64]	; (d4594 <_Z9PMICresetv+0x78>)
   d4552:	f003 fa9a 	bl	d7a8a <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4208);                                     // Allows us to charge cloe to 100% - battery can't go over 45 celcius
   d4556:	f241 0170 	movw	r1, #4208	; 0x1070
   d455a:	e014      	b.n	d4586 <_Z9PMICresetv+0x6a>
  }
  else  {
    power.setInputVoltageLimit(4208);                                 // This is the default value for the Electron
   d455c:	f241 0170 	movw	r1, #4208	; 0x1070
   d4560:	480c      	ldr	r0, [pc, #48]	; (d4594 <_Z9PMICresetv+0x78>)
   d4562:	f003 f9c0 	bl	d78e6 <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(1500);                                 // default is 900mA this let's me charge faster
   d4566:	f240 51dc 	movw	r1, #1500	; 0x5dc
   d456a:	480a      	ldr	r0, [pc, #40]	; (d4594 <_Z9PMICresetv+0x78>)
   d456c:	f003 fa45 	bl	d79fa <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,1,1,0,0,0);                              // default is 2048mA (011000) = 512mA+1024mA+512mA)
   d4570:	2301      	movs	r3, #1
   d4572:	4621      	mov	r1, r4
   d4574:	9402      	str	r4, [sp, #8]
   d4576:	9401      	str	r4, [sp, #4]
   d4578:	9400      	str	r4, [sp, #0]
   d457a:	461a      	mov	r2, r3
   d457c:	4805      	ldr	r0, [pc, #20]	; (d4594 <_Z9PMICresetv+0x78>)
   d457e:	f003 fa84 	bl	d7a8a <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4112);                                     // default is 4.112V termination voltage
   d4582:	f241 0110 	movw	r1, #4112	; 0x1010
   d4586:	4803      	ldr	r0, [pc, #12]	; (d4594 <_Z9PMICresetv+0x78>)
  }
}
   d4588:	b004      	add	sp, #16
   d458a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
  else  {
    power.setInputVoltageLimit(4208);                                 // This is the default value for the Electron
    power.setInputCurrentLimit(1500);                                 // default is 900mA this let's me charge faster
    power.setChargeCurrent(0,1,1,0,0,0);                              // default is 2048mA (011000) = 512mA+1024mA+512mA)
    power.setChargeVoltage(4112);                                     // default is 4.112V termination voltage
   d458e:	f003 baaf 	b.w	d7af0 <_ZN4PMIC16setChargeVoltageEt>
   d4592:	bf00      	nop
   d4594:	2003e1ca 	.word	0x2003e1ca
   d4598:	2003e1cc 	.word	0x2003e1cc

000d459c <_Z12notConnectedv>:
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d459c:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d459e:	f002 f8df 	bl	d6760 <spark_cloud_flag_connected>
    return !Particle.connected();
   d45a2:	f080 0001 	eor.w	r0, r0, #1
}
   d45a6:	b2c0      	uxtb	r0, r0
   d45a8:	bd08      	pop	{r3, pc}
	...

000d45ac <_Z22disconnectFromParticlev>:
    return 0;                                                    // Failed to connect
  }
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
   d45ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d45ae:	f002 f8cf 	bl	d6750 <spark_cloud_flag_disconnect>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d45b2:	f7ff fe45 	bl	d4240 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d45b6:	2500      	movs	r5, #0
   d45b8:	4604      	mov	r4, r0
   d45ba:	f643 2697 	movw	r6, #14999	; 0x3a97
   d45be:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d45c0:	f7ff fe3e 	bl	d4240 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d45c4:	1b00      	subs	r0, r0, r4
   d45c6:	eb61 0105 	sbc.w	r1, r1, r5
   d45ca:	428f      	cmp	r7, r1
   d45cc:	bf08      	it	eq
   d45ce:	4286      	cmpeq	r6, r0
   d45d0:	d305      	bcc.n	d45de <_Z22disconnectFromParticlev+0x32>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d45d2:	f7ff ffe3 	bl	d459c <_Z12notConnectedv>
   d45d6:	b910      	cbnz	r0, d45de <_Z22disconnectFromParticlev+0x32>
            spark_process();
   d45d8:	f002 f8aa 	bl	d6730 <spark_process>
   d45dc:	e7f0      	b.n	d45c0 <_Z22disconnectFromParticlev+0x14>
   d45de:	f7ff ffdd 	bl	d459c <_Z12notConnectedv>
  Cellular.off();
   d45e2:	4804      	ldr	r0, [pc, #16]	; (d45f4 <_Z22disconnectFromParticlev+0x48>)
   d45e4:	f7ff fe26 	bl	d4234 <_ZN5spark13CellularClass3offEv>
  delay(2000);                                                    // Bummer but only should happen once an hour
   d45e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d45ec:	f002 f980 	bl	d68f0 <delay>
  return true;
}
   d45f0:	2001      	movs	r0, #1
   d45f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d45f4:	2003e2a4 	.word	0x2003e2a4

000d45f8 <_Z15resetEverythingv>:
    return 1;
  }
  else return 0;
}

void resetEverything() {                                            // The device is waking up in a new day or is a new install
   d45f8:	b508      	push	{r3, lr}
  FRAMwrite16(FRAM::currentDailyCountAddr, 0);                      // Reset the counts in FRAM as well
   d45fa:	2100      	movs	r1, #0
   d45fc:	200c      	movs	r0, #12
   d45fe:	f7ff fe43 	bl	d4288 <_Z11FRAMwrite16ji>
  FRAMwrite16(FRAM::currentHourlyCountAddr, 0);
   d4602:	2100      	movs	r1, #0
   d4604:	2008      	movs	r0, #8
   d4606:	f7ff fe3f 	bl	d4288 <_Z11FRAMwrite16ji>
  FRAMwrite32(FRAM::currentCountsTimeAddr,Time.now());              // Set the time context to the new day
   d460a:	f003 fd24 	bl	d8056 <_ZN9TimeClass3nowEv>
   d460e:	4601      	mov	r1, r0
   d4610:	200e      	movs	r0, #14
   d4612:	f7ff fea3 	bl	d435c <_Z11FRAMwrite32im>
  FRAMwrite8(FRAM::resetCountAddr,0);
   d4616:	2100      	movs	r1, #0
   d4618:	2003      	movs	r0, #3
   d461a:	f7ff fe1b 	bl	d4254 <_Z10FRAMwrite8jh>
  FRAMwrite8(FRAM::alertsCountAddr,0);
   d461e:	2100      	movs	r1, #0
   d4620:	2012      	movs	r0, #18
   d4622:	f7ff fe17 	bl	d4254 <_Z10FRAMwrite8jh>
  FRAMwrite8(FRAM::alertsCountAddr,0);
   d4626:	2100      	movs	r1, #0
   d4628:	2012      	movs	r0, #18
   d462a:	f7ff fe13 	bl	d4254 <_Z10FRAMwrite8jh>
  hourlyPersonCount = dailyPersonCount = resetCount = alerts = 0;   // Reset everything for the day
   d462e:	4a05      	ldr	r2, [pc, #20]	; (d4644 <_Z15resetEverythingv+0x4c>)
   d4630:	2300      	movs	r3, #0
   d4632:	6013      	str	r3, [r2, #0]
   d4634:	4a04      	ldr	r2, [pc, #16]	; (d4648 <_Z15resetEverythingv+0x50>)
   d4636:	6013      	str	r3, [r2, #0]
   d4638:	4a04      	ldr	r2, [pc, #16]	; (d464c <_Z15resetEverythingv+0x54>)
   d463a:	6013      	str	r3, [r2, #0]
   d463c:	4a04      	ldr	r2, [pc, #16]	; (d4650 <_Z15resetEverythingv+0x58>)
   d463e:	6013      	str	r3, [r2, #0]
   d4640:	bd08      	pop	{r3, pc}
   d4642:	bf00      	nop
   d4644:	2003e1d4 	.word	0x2003e1d4
   d4648:	2003e1dc 	.word	0x2003e1dc
   d464c:	2003e198 	.word	0x2003e198
   d4650:	2003e1d0 	.word	0x2003e1d0

000d4654 <_Z20meterParticlePublishv>:
  if (Particle.connected()) Particle.publish("MaxMin",data,PRIVATE);
  return 1;
}

bool meterParticlePublish(void)
{
   d4654:	b510      	push	{r4, lr}
  static unsigned long lastPublish=0;                                   // Initialize and store value here
  if(millis() - lastPublish >= 1000) {                                  // Particle rate limits at 1 publish per second
   d4656:	4c07      	ldr	r4, [pc, #28]	; (d4674 <_Z20meterParticlePublishv+0x20>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4658:	f001 fe84 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
   d465c:	6823      	ldr	r3, [r4, #0]
   d465e:	1ac0      	subs	r0, r0, r3
   d4660:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4664:	d304      	bcc.n	d4670 <_Z20meterParticlePublishv+0x1c>
   d4666:	f001 fe7d 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d466a:	6020      	str	r0, [r4, #0]
   d466c:	2001      	movs	r0, #1
   d466e:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
   d4670:	2000      	movs	r0, #0
}
   d4672:	bd10      	pop	{r4, pc}
   d4674:	2003e254 	.word	0x2003e254

000d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d4678:	b508      	push	{r3, lr}
}

void dailyCleanup() {                                                 // Function to clean house at the end of the day
  controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);        // Load the control Register

  waitUntil(meterParticlePublish);
   d467a:	f7ff ffeb 	bl	d4654 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d467e:	b118      	cbz	r0, d4688 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d4680:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4684:	f7ff bfe6 	b.w	d4654 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d4688:	f002 f852 	bl	d6730 <spark_process>
   d468c:	e7f5      	b.n	d467a <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69+0x2>
	...

000d4690 <_Z14fullModemResetv>:
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
  }
  Serial.println(stateTransitionString);
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d4690:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4692:	f002 f85d 	bl	d6750 <spark_cloud_flag_disconnect>
   d4696:	f001 fe65 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d469a:	f643 2597 	movw	r5, #14999	; 0x3a97
   d469e:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d46a0:	f002 f85e 	bl	d6760 <spark_cloud_flag_connected>
   d46a4:	b140      	cbz	r0, d46b8 <_Z14fullModemResetv+0x28>
   d46a6:	f001 fe5d 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
   d46aa:	1b00      	subs	r0, r0, r4
   d46ac:	42a8      	cmp	r0, r5
   d46ae:	d803      	bhi.n	d46b8 <_Z14fullModemResetv+0x28>
		delay(100);
   d46b0:	2064      	movs	r0, #100	; 0x64
   d46b2:	f002 f91d 	bl	d68f0 <delay>
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d46b6:	e7f3      	b.n	d46a0 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d46b8:	2100      	movs	r1, #0
   d46ba:	4b09      	ldr	r3, [pc, #36]	; (d46e0 <_Z14fullModemResetv+0x50>)
   d46bc:	f247 5230 	movw	r2, #30000	; 0x7530
   d46c0:	4608      	mov	r0, r1
   d46c2:	f001 fdf7 	bl	d62b4 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=15\r\n");
	delay(1000);
   d46c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d46ca:	f002 f911 	bl	d68f0 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d46ce:	4b05      	ldr	r3, [pc, #20]	; (d46e4 <_Z14fullModemResetv+0x54>)
   d46d0:	220a      	movs	r2, #10
   d46d2:	681b      	ldr	r3, [r3, #0]
   d46d4:	2101      	movs	r1, #1
   d46d6:	4668      	mov	r0, sp
   d46d8:	f003 fbb4 	bl	d7e44 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d46dc:	b003      	add	sp, #12
   d46de:	bd30      	pop	{r4, r5, pc}
   d46e0:	000db94f 	.word	0x000db94f
   d46e4:	2003e1f8 	.word	0x2003e1f8

000d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d46e8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d46ea:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d46ec:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d46ee:	b17c      	cbz	r4, d4710 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d46f0:	6863      	ldr	r3, [r4, #4]
   d46f2:	3b01      	subs	r3, #1
   d46f4:	6063      	str	r3, [r4, #4]
   d46f6:	b95b      	cbnz	r3, d4710 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d46f8:	6823      	ldr	r3, [r4, #0]
   d46fa:	4620      	mov	r0, r4
   d46fc:	689b      	ldr	r3, [r3, #8]
   d46fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4700:	68a3      	ldr	r3, [r4, #8]
   d4702:	3b01      	subs	r3, #1
   d4704:	60a3      	str	r3, [r4, #8]
   d4706:	b91b      	cbnz	r3, d4710 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4708:	6823      	ldr	r3, [r4, #0]
   d470a:	4620      	mov	r0, r4
   d470c:	68db      	ldr	r3, [r3, #12]
   d470e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4710:	4628      	mov	r0, r5
   d4712:	bd38      	pop	{r3, r4, r5, pc}

000d4714 <_Z9ResetFRAMv>:
}


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
   d4714:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(FRAM::controlRegisterAddr);
   d4716:	2007      	movs	r0, #7
   d4718:	f7ff fd96 	bl	d4248 <_Z9FRAMread8j>
   d471c:	4606      	mov	r6, r0
   d471e:	f002 f81f 	bl	d6760 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("FRAM","Resetting in progress", PRIVATE);
   d4722:	b160      	cbz	r0, d473e <_Z9ResetFRAMv+0x2a>
   d4724:	4b36      	ldr	r3, [pc, #216]	; (d4800 <_Z9ResetFRAMv+0xec>)
   d4726:	4937      	ldr	r1, [pc, #220]	; (d4804 <_Z9ResetFRAMv+0xf0>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4728:	781b      	ldrb	r3, [r3, #0]
   d472a:	2200      	movs	r2, #0
   d472c:	f88d 2000 	strb.w	r2, [sp]
   d4730:	a802      	add	r0, sp, #8
   d4732:	4a35      	ldr	r2, [pc, #212]	; (d4808 <_Z9ResetFRAMv+0xf4>)
   d4734:	f7ff fd71 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4738:	a803      	add	r0, sp, #12
   d473a:	f7ff ffd5 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d473e:	4d30      	ldr	r5, [pc, #192]	; (d4800 <_Z9ResetFRAMv+0xec>)
    fram.write8(address + 3, one);
}


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
   d4740:	2408      	movs	r4, #8
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(FRAM::controlRegisterAddr);
    if (Particle.connected()) Particle.publish("FRAM","Resetting in progress", PRIVATE);
    for (unsigned long i=8; i < 32768; i++) {  // Start at 4 to not overwrite debounce and sensitivity
        FRAMwrite8(i,0x0);
   d4742:	2100      	movs	r1, #0
   d4744:	4620      	mov	r0, r4
   d4746:	f7ff fd85 	bl	d4254 <_Z10FRAMwrite8jh>
        if (i==8192) if (Particle.connected()) Particle.publish("Event", "Fram Reset 1/4 done", PRIVATE);
   d474a:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
   d474e:	d109      	bne.n	d4764 <_Z9ResetFRAMv+0x50>
   d4750:	f002 f806 	bl	d6760 <spark_cloud_flag_connected>
   d4754:	2800      	cmp	r0, #0
   d4756:	d038      	beq.n	d47ca <_Z9ResetFRAMv+0xb6>
   d4758:	2200      	movs	r2, #0
   d475a:	f88d 2000 	strb.w	r2, [sp]
   d475e:	782b      	ldrb	r3, [r5, #0]
   d4760:	4a2a      	ldr	r2, [pc, #168]	; (d480c <_Z9ResetFRAMv+0xf8>)
   d4762:	e02b      	b.n	d47bc <_Z9ResetFRAMv+0xa8>
        if (i==16384) if (Particle.connected()) Particle.publish("Event", "Fram Reset 1/2 done", PRIVATE);
   d4764:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
   d4768:	d108      	bne.n	d477c <_Z9ResetFRAMv+0x68>
   d476a:	f001 fff9 	bl	d6760 <spark_cloud_flag_connected>
   d476e:	b360      	cbz	r0, d47ca <_Z9ResetFRAMv+0xb6>
   d4770:	2200      	movs	r2, #0
   d4772:	f88d 2000 	strb.w	r2, [sp]
   d4776:	782b      	ldrb	r3, [r5, #0]
   d4778:	4a25      	ldr	r2, [pc, #148]	; (d4810 <_Z9ResetFRAMv+0xfc>)
   d477a:	e00a      	b.n	d4792 <_Z9ResetFRAMv+0x7e>
        if (i==(24576)) if (Particle.connected()) Particle.publish("Event", "Fram Reset 3/4 done", PRIVATE);
   d477c:	f5b4 4fc0 	cmp.w	r4, #24576	; 0x6000
   d4780:	d110      	bne.n	d47a4 <_Z9ResetFRAMv+0x90>
   d4782:	f001 ffed 	bl	d6760 <spark_cloud_flag_connected>
   d4786:	b300      	cbz	r0, d47ca <_Z9ResetFRAMv+0xb6>
   d4788:	2200      	movs	r2, #0
   d478a:	f88d 2000 	strb.w	r2, [sp]
   d478e:	782b      	ldrb	r3, [r5, #0]
   d4790:	4a20      	ldr	r2, [pc, #128]	; (d4814 <_Z9ResetFRAMv+0x100>)
   d4792:	4921      	ldr	r1, [pc, #132]	; (d4818 <_Z9ResetFRAMv+0x104>)
   d4794:	a802      	add	r0, sp, #8
   d4796:	f7ff fd40 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d479a:	a803      	add	r0, sp, #12
   d479c:	f7ff ffa4 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(FRAM::controlRegisterAddr);
    if (Particle.connected()) Particle.publish("FRAM","Resetting in progress", PRIVATE);
    for (unsigned long i=8; i < 32768; i++) {  // Start at 4 to not overwrite debounce and sensitivity
   d47a0:	3401      	adds	r4, #1
   d47a2:	e7ce      	b.n	d4742 <_Z9ResetFRAMv+0x2e>
        FRAMwrite8(i,0x0);
        if (i==8192) if (Particle.connected()) Particle.publish("Event", "Fram Reset 1/4 done", PRIVATE);
        if (i==16384) if (Particle.connected()) Particle.publish("Event", "Fram Reset 1/2 done", PRIVATE);
        if (i==(24576)) if (Particle.connected()) Particle.publish("Event", "Fram Reset 3/4 done", PRIVATE);
        if (i==32767) if (Particle.connected()) Particle.publish("Event", "Fram Reset done", PRIVATE);
   d47a4:	f647 73ff 	movw	r3, #32767	; 0x7fff
   d47a8:	429c      	cmp	r4, r3
   d47aa:	d10e      	bne.n	d47ca <_Z9ResetFRAMv+0xb6>
   d47ac:	f001 ffd8 	bl	d6760 <spark_cloud_flag_connected>
   d47b0:	b178      	cbz	r0, d47d2 <_Z9ResetFRAMv+0xbe>
   d47b2:	2200      	movs	r2, #0
   d47b4:	f88d 2000 	strb.w	r2, [sp]
   d47b8:	782b      	ldrb	r3, [r5, #0]
   d47ba:	4a18      	ldr	r2, [pc, #96]	; (d481c <_Z9ResetFRAMv+0x108>)
   d47bc:	4916      	ldr	r1, [pc, #88]	; (d4818 <_Z9ResetFRAMv+0x104>)
   d47be:	a802      	add	r0, sp, #8
   d47c0:	f7ff fd2b 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d47c4:	a803      	add	r0, sp, #12
   d47c6:	f7ff ff8f 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(FRAM::controlRegisterAddr);
    if (Particle.connected()) Particle.publish("FRAM","Resetting in progress", PRIVATE);
    for (unsigned long i=8; i < 32768; i++) {  // Start at 4 to not overwrite debounce and sensitivity
   d47ca:	3401      	adds	r4, #1
   d47cc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   d47d0:	d1b7      	bne.n	d4742 <_Z9ResetFRAMv+0x2e>
        if (i==8192) if (Particle.connected()) Particle.publish("Event", "Fram Reset 1/4 done", PRIVATE);
        if (i==16384) if (Particle.connected()) Particle.publish("Event", "Fram Reset 1/2 done", PRIVATE);
        if (i==(24576)) if (Particle.connected()) Particle.publish("Event", "Fram Reset 3/4 done", PRIVATE);
        if (i==32767) if (Particle.connected()) Particle.publish("Event", "Fram Reset done", PRIVATE);
    }
    FRAMwrite8(FRAM::controlRegisterAddr,tempControlReg);   // Preserce the control register values
   d47d2:	4631      	mov	r1, r6
   d47d4:	2007      	movs	r0, #7
   d47d6:	f7ff fd3d 	bl	d4254 <_Z10FRAMwrite8jh>
    FRAMwrite8(FRAM::versionAddr,versionNumber);  // Reset version to match #define value for sketch
   d47da:	2109      	movs	r1, #9
   d47dc:	2000      	movs	r0, #0
   d47de:	f7ff fd39 	bl	d4254 <_Z10FRAMwrite8jh>
    FRAMwrite8(FRAM::openTimeAddr,0);                               // These set the defaults if the FRAM is erased
   d47e2:	2100      	movs	r1, #0
   d47e4:	2005      	movs	r0, #5
   d47e6:	f7ff fd35 	bl	d4254 <_Z10FRAMwrite8jh>
    FRAMwrite8(FRAM::closeTimeAddr,23);                             // This will ensure the device does not sleep
   d47ea:	2117      	movs	r1, #23
   d47ec:	2006      	movs	r0, #6
   d47ee:	f7ff fd31 	bl	d4254 <_Z10FRAMwrite8jh>
    FRAMwrite8(FRAM::debounceAddr,10);                               // Sets a default debounce of 1 Sec
   d47f2:	210a      	movs	r1, #10
   d47f4:	2002      	movs	r0, #2
   d47f6:	f7ff fd2d 	bl	d4254 <_Z10FRAMwrite8jh>

}
   d47fa:	b004      	add	sp, #16
   d47fc:	bd70      	pop	{r4, r5, r6, pc}
   d47fe:	bf00      	nop
   d4800:	2003e1ad 	.word	0x2003e1ad
   d4804:	000dbcb5 	.word	0x000dbcb5
   d4808:	000db95c 	.word	0x000db95c
   d480c:	000db972 	.word	0x000db972
   d4810:	000db98c 	.word	0x000db98c
   d4814:	000db9a0 	.word	0x000db9a0
   d4818:	000db986 	.word	0x000db986
   d481c:	000db9b4 	.word	0x000db9b4

000d4820 <_Z9resetFRAM6String>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
    return !Particle.connected();
}

int resetFRAM(String command)                                         // Will reset the local counts
{
   d4820:	b508      	push	{r3, lr}
   d4822:	4904      	ldr	r1, [pc, #16]	; (d4834 <_Z9resetFRAM6String+0x14>)
   d4824:	f003 fadb 	bl	d7dde <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4828:	b110      	cbz	r0, d4830 <_Z9resetFRAM6String+0x10>
  {
    ResetFRAM();
   d482a:	f7ff ff73 	bl	d4714 <_Z9ResetFRAMv>
    return 1;
   d482e:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4830:	bd08      	pop	{r3, pc}
   d4832:	bf00      	nop
   d4834:	000dbd82 	.word	0x000dbd82

000d4838 <_Z11recordCountv>:
  connectionEvents.loop();
  batteryCheck.loop();
}

void recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the Arduino
{
   d4838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d483c:	4d7e      	ldr	r5, [pc, #504]	; (d4a38 <_Z11recordCountv+0x200>)
  static int currentMinuteCount = 0;                                  // What is the count for the current minute
  static byte currentMinutePeriod;                                    // Current minute

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (millis() - currentEvent >= debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
   d483e:	4c7f      	ldr	r4, [pc, #508]	; (d4a3c <_Z11recordCountv+0x204>)
   d4840:	682b      	ldr	r3, [r5, #0]
   d4842:	4f7f      	ldr	r7, [pc, #508]	; (d4a40 <_Z11recordCountv+0x208>)
    nrf_gpio_pin_set(nrf_pin);
   d4844:	f893 0070 	ldrb.w	r0, [r3, #112]	; 0x70
   d4848:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   d484c:	f003 031f 	and.w	r3, r3, #31
   d4850:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
  connectionEvents.loop();
  batteryCheck.loop();
}

void recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the Arduino
{
   d4854:	b0c5      	sub	sp, #276	; 0x114
   d4856:	f7ff fca7 	bl	d41a8 <nrf_gpio_pin_set>
   d485a:	f001 fd83 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
  static int currentMinuteCount = 0;                                  // What is the count for the current minute
  static byte currentMinutePeriod;                                    // Current minute

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (millis() - currentEvent >= debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
   d485e:	6823      	ldr	r3, [r4, #0]
   d4860:	1ac0      	subs	r0, r0, r3
   d4862:	4b78      	ldr	r3, [pc, #480]	; (d4a44 <_Z11recordCountv+0x20c>)
   d4864:	881a      	ldrh	r2, [r3, #0]
   d4866:	4290      	cmp	r0, r2
   d4868:	4698      	mov	r8, r3
   d486a:	d245      	bcs.n	d48f8 <_Z11recordCountv+0xc0>
   d486c:	783e      	ldrb	r6, [r7, #0]
   d486e:	2e00      	cmp	r6, #0
   d4870:	d142      	bne.n	d48f8 <_Z11recordCountv+0xc0>
      snprintf(data, sizeof(data), "Count, hourly: %i, daily: %i",hourlyPersonCount,dailyPersonCount);
      waitUntil(meterParticlePublish);
      Particle.publish("Count",data, PRIVATE);                                   // Helpful for monitoring and calibration
    }
  }
  else if(verboseMode && Particle.connected()) {
   d4872:	4b75      	ldr	r3, [pc, #468]	; (d4a48 <_Z11recordCountv+0x210>)
   d4874:	781b      	ldrb	r3, [r3, #0]
   d4876:	b123      	cbz	r3, d4882 <_Z11recordCountv+0x4a>
   d4878:	f001 ff72 	bl	d6760 <spark_cloud_flag_connected>
   d487c:	2800      	cmp	r0, #0
   d487e:	f040 80cc 	bne.w	d4a1a <_Z11recordCountv+0x1e2>
    waitUntil(meterParticlePublish);
    Particle.publish("Event","Debounced", PRIVATE);
  }

  if (!digitalRead(userSwitch)) {                     // A low value means someone is pushing this button - will trigger a send to Ubidots and take out of low power mode
   d4882:	2004      	movs	r0, #4
   d4884:	f003 fdd4 	bl	d8430 <digitalRead>
   d4888:	4604      	mov	r4, r0
   d488a:	bb20      	cbnz	r0, d48d6 <_Z11recordCountv+0x9e>
    connectToParticle();                              // Get connected to Particle
   d488c:	f000 f908 	bl	d4aa0 <_Z17connectToParticlev>
    waitUntil(meterParticlePublish);
   d4890:	f7ff fef2 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d4894:	f001 ff64 	bl	d6760 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Normal Operations", PRIVATE);
   d4898:	b158      	cbz	r0, d48b2 <_Z11recordCountv+0x7a>
   d489a:	4b6c      	ldr	r3, [pc, #432]	; (d4a4c <_Z11recordCountv+0x214>)
   d489c:	4a6c      	ldr	r2, [pc, #432]	; (d4a50 <_Z11recordCountv+0x218>)
   d489e:	781b      	ldrb	r3, [r3, #0]
   d48a0:	496c      	ldr	r1, [pc, #432]	; (d4a54 <_Z11recordCountv+0x21c>)
   d48a2:	f88d 4000 	strb.w	r4, [sp]
   d48a6:	a804      	add	r0, sp, #16
   d48a8:	f7ff fcb7 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d48ac:	a805      	add	r0, sp, #20
   d48ae:	f7ff ff1b 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);      // Load the control register
   d48b2:	2007      	movs	r0, #7
   d48b4:	f7ff fcc8 	bl	d4248 <_Z9FRAMread8j>
    controlRegisterValue = (0b1111110 & controlRegisterValue);        // Will set the lowPowerMode bit to zero
    controlRegisterValue = (0b00010000 | controlRegisterValue);       // Turn on the connectionMode
   d48b8:	4b67      	ldr	r3, [pc, #412]	; (d4a58 <_Z11recordCountv+0x220>)
   d48ba:	f000 007e 	and.w	r0, r0, #126	; 0x7e
   d48be:	f040 0110 	orr.w	r1, r0, #16
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);
   d48c2:	2007      	movs	r0, #7
    connectToParticle();                              // Get connected to Particle
    waitUntil(meterParticlePublish);
    if (Particle.connected()) Particle.publish("Mode","Normal Operations", PRIVATE);
    controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);      // Load the control register
    controlRegisterValue = (0b1111110 & controlRegisterValue);        // Will set the lowPowerMode bit to zero
    controlRegisterValue = (0b00010000 | controlRegisterValue);       // Turn on the connectionMode
   d48c4:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);
   d48c6:	f7ff fcc5 	bl	d4254 <_Z10FRAMwrite8jh>
    lowPowerMode = false;
   d48ca:	4b64      	ldr	r3, [pc, #400]	; (d4a5c <_Z11recordCountv+0x224>)
   d48cc:	2200      	movs	r2, #0
   d48ce:	701a      	strb	r2, [r3, #0]
    connectionMode = true;
   d48d0:	4b63      	ldr	r3, [pc, #396]	; (d4a60 <_Z11recordCountv+0x228>)
   d48d2:	2201      	movs	r2, #1
   d48d4:	701a      	strb	r2, [r3, #0]
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d48d6:	682b      	ldr	r3, [r5, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d48d8:	f893 0070 	ldrb.w	r0, [r3, #112]	; 0x70
   d48dc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   d48e0:	f003 031f 	and.w	r3, r3, #31
   d48e4:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d48e8:	f7ff fc6d 	bl	d41c6 <nrf_gpio_pin_clear>
  }

  pinResetFast(blueLED);
  sensorDetect = false;                                               // Reset the flag
   d48ec:	4b5d      	ldr	r3, [pc, #372]	; (d4a64 <_Z11recordCountv+0x22c>)
   d48ee:	2200      	movs	r2, #0
   d48f0:	701a      	strb	r2, [r3, #0]
}
   d48f2:	b045      	add	sp, #276	; 0x114
   d48f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d48f8:	f001 fd34 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d48fc:	4e5a      	ldr	r6, [pc, #360]	; (d4a68 <_Z11recordCountv+0x230>)
  static byte currentMinutePeriod;                                    // Current minute

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (millis() - currentEvent >= debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
    currentEvent = millis();
   d48fe:	6020      	str	r0, [r4, #0]
    awokeFromNap = false;                                             // Reset the awoke flag
   d4900:	2300      	movs	r3, #0
   d4902:	703b      	strb	r3, [r7, #0]
   d4904:	f001 fd2e 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
    while(millis()-currentEvent < debounce) {                         // Keep us tied up here until the debounce time is up
   d4908:	6823      	ldr	r3, [r4, #0]
   d490a:	1ac0      	subs	r0, r0, r3
   d490c:	f8b8 3000 	ldrh.w	r3, [r8]
   d4910:	4298      	cmp	r0, r3
   d4912:	d208      	bcs.n	d4926 <_Z11recordCountv+0xee>
      delay(10);
   d4914:	200a      	movs	r0, #10
   d4916:	f001 ffeb 	bl	d68f0 <delay>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d491a:	f001 fd23 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d491e:	6030      	str	r0, [r6, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4920:	f001 ff06 	bl	d6730 <spark_process>
   d4924:	e7ee      	b.n	d4904 <_Z11recordCountv+0xcc>
      Particle.process();                                             // Just in case debouce gets set to some big number
    }

    // Diagnostic code
    if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
   d4926:	4e51      	ldr	r6, [pc, #324]	; (d4a6c <_Z11recordCountv+0x234>)
   d4928:	7834      	ldrb	r4, [r6, #0]
   d492a:	f003 fba5 	bl	d8078 <_ZN9TimeClass6minuteEv>
   d492e:	4284      	cmp	r4, r0
   d4930:	4c4f      	ldr	r4, [pc, #316]	; (d4a70 <_Z11recordCountv+0x238>)
   d4932:	d004      	beq.n	d493e <_Z11recordCountv+0x106>
      currentMinutePeriod = Time.minute();                            // Reset period
   d4934:	f003 fba0 	bl	d8078 <_ZN9TimeClass6minuteEv>
      currentMinuteCount = 1;                                         // Reset for the new minute
   d4938:	2301      	movs	r3, #1
      Particle.process();                                             // Just in case debouce gets set to some big number
    }

    // Diagnostic code
    if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
      currentMinutePeriod = Time.minute();                            // Reset period
   d493a:	7030      	strb	r0, [r6, #0]
   d493c:	e001      	b.n	d4942 <_Z11recordCountv+0x10a>
      currentMinuteCount = 1;                                         // Reset for the new minute
    }
    else currentMinuteCount++;
   d493e:	6823      	ldr	r3, [r4, #0]
   d4940:	3301      	adds	r3, #1

    if (currentMinuteCount >= maxMin) maxMin = currentMinuteCount;    // Save only if it is the new maxMin
   d4942:	4a4c      	ldr	r2, [pc, #304]	; (d4a74 <_Z11recordCountv+0x23c>)
    // Diagnostic code
    if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
      currentMinutePeriod = Time.minute();                            // Reset period
      currentMinuteCount = 1;                                         // Reset for the new minute
    }
    else currentMinuteCount++;
   d4944:	6023      	str	r3, [r4, #0]

    if (currentMinuteCount >= maxMin) maxMin = currentMinuteCount;    // Save only if it is the new maxMin
   d4946:	6823      	ldr	r3, [r4, #0]
   d4948:	6811      	ldr	r1, [r2, #0]
   d494a:	4e4b      	ldr	r6, [pc, #300]	; (d4a78 <_Z11recordCountv+0x240>)
   d494c:	4f4b      	ldr	r7, [pc, #300]	; (d4a7c <_Z11recordCountv+0x244>)
   d494e:	f8df 80f8 	ldr.w	r8, [pc, #248]	; d4a48 <_Z11recordCountv+0x210>
   d4952:	428b      	cmp	r3, r1
   d4954:	bfa8      	it	ge
   d4956:	6013      	strge	r3, [r2, #0]
    // End diagnostic code

    // Fix for multiple counts
    if (currentMinuteCount >= maxMinLimit) {
   d4958:	4a49      	ldr	r2, [pc, #292]	; (d4a80 <_Z11recordCountv+0x248>)
   d495a:	6812      	ldr	r2, [r2, #0]
   d495c:	4293      	cmp	r3, r2
   d495e:	db18      	blt.n	d4992 <_Z11recordCountv+0x15a>
      hourlyPersonCount -= currentMinuteCount;
   d4960:	6832      	ldr	r2, [r6, #0]
   d4962:	1ad2      	subs	r2, r2, r3
   d4964:	6032      	str	r2, [r6, #0]
      dailyPersonCount -= currentMinuteCount;
   d4966:	683a      	ldr	r2, [r7, #0]
   d4968:	1ad3      	subs	r3, r2, r3
   d496a:	603b      	str	r3, [r7, #0]
      currentMinuteCount = 0;
      if (verboseMode && Particle.connected()) {
   d496c:	f898 3000 	ldrb.w	r3, [r8]

    // Fix for multiple counts
    if (currentMinuteCount >= maxMinLimit) {
      hourlyPersonCount -= currentMinuteCount;
      dailyPersonCount -= currentMinuteCount;
      currentMinuteCount = 0;
   d4970:	f04f 0900 	mov.w	r9, #0
   d4974:	f8c4 9000 	str.w	r9, [r4]
      if (verboseMode && Particle.connected()) {
   d4978:	b11b      	cbz	r3, d4982 <_Z11recordCountv+0x14a>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d497a:	f001 fef1 	bl	d6760 <spark_cloud_flag_connected>
   d497e:	2800      	cmp	r0, #0
   d4980:	d13c      	bne.n	d49fc <_Z11recordCountv+0x1c4>
        waitUntil(meterParticlePublish);
        Particle.publish("Alert", "Exceeded Maxmin limit", PRIVATE);
      }
      alerts++;
   d4982:	4b40      	ldr	r3, [pc, #256]	; (d4a84 <_Z11recordCountv+0x24c>)
   d4984:	6819      	ldr	r1, [r3, #0]
   d4986:	3101      	adds	r1, #1
   d4988:	6019      	str	r1, [r3, #0]
      FRAMwrite8(FRAM::alertsCountAddr,alerts);                        // Save counts in case of reset
   d498a:	2012      	movs	r0, #18
   d498c:	b2c9      	uxtb	r1, r1
   d498e:	f7ff fc61 	bl	d4254 <_Z10FRAMwrite8jh>
    }

    hourlyPersonCount++;                                                // Increment the PersonCount
   d4992:	6831      	ldr	r1, [r6, #0]
    FRAMwrite16(FRAM::currentHourlyCountAddr, hourlyPersonCount);       // Load Hourly Count to memory
   d4994:	2008      	movs	r0, #8
      }
      alerts++;
      FRAMwrite8(FRAM::alertsCountAddr,alerts);                        // Save counts in case of reset
    }

    hourlyPersonCount++;                                                // Increment the PersonCount
   d4996:	3101      	adds	r1, #1
   d4998:	6031      	str	r1, [r6, #0]
    FRAMwrite16(FRAM::currentHourlyCountAddr, hourlyPersonCount);       // Load Hourly Count to memory
   d499a:	f7ff fc75 	bl	d4288 <_Z11FRAMwrite16ji>
    dailyPersonCount++;                                                 // Increment the PersonCount
   d499e:	6839      	ldr	r1, [r7, #0]
    FRAMwrite16(FRAM::currentDailyCountAddr, dailyPersonCount);         // Load Daily Count to memory
   d49a0:	200c      	movs	r0, #12
      FRAMwrite8(FRAM::alertsCountAddr,alerts);                        // Save counts in case of reset
    }

    hourlyPersonCount++;                                                // Increment the PersonCount
    FRAMwrite16(FRAM::currentHourlyCountAddr, hourlyPersonCount);       // Load Hourly Count to memory
    dailyPersonCount++;                                                 // Increment the PersonCount
   d49a2:	3101      	adds	r1, #1
   d49a4:	6039      	str	r1, [r7, #0]
    FRAMwrite16(FRAM::currentDailyCountAddr, dailyPersonCount);         // Load Daily Count to memory
   d49a6:	f7ff fc6f 	bl	d4288 <_Z11FRAMwrite16ji>
    FRAMwrite32(FRAM::currentCountsTimeAddr, Time.now());              // Write to FRAM - this is so we know when the last counts were saved
   d49aa:	f003 fb54 	bl	d8056 <_ZN9TimeClass3nowEv>
   d49ae:	4601      	mov	r1, r0
   d49b0:	200e      	movs	r0, #14
   d49b2:	f7ff fcd3 	bl	d435c <_Z11FRAMwrite32im>
    if (verboseMode && Particle.connected()) {
   d49b6:	f898 3000 	ldrb.w	r3, [r8]
   d49ba:	2b00      	cmp	r3, #0
   d49bc:	f43f af61 	beq.w	d4882 <_Z11recordCountv+0x4a>
   d49c0:	f001 fece 	bl	d6760 <spark_cloud_flag_connected>
   d49c4:	2800      	cmp	r0, #0
   d49c6:	f43f af5c 	beq.w	d4882 <_Z11recordCountv+0x4a>
      char data[256];                                                    // Store the date in this character array - not global
      snprintf(data, sizeof(data), "Count, hourly: %i, daily: %i",hourlyPersonCount,dailyPersonCount);
   d49ca:	4b2c      	ldr	r3, [pc, #176]	; (d4a7c <_Z11recordCountv+0x244>)
   d49cc:	4a2e      	ldr	r2, [pc, #184]	; (d4a88 <_Z11recordCountv+0x250>)
   d49ce:	681b      	ldr	r3, [r3, #0]
   d49d0:	9300      	str	r3, [sp, #0]
   d49d2:	4b29      	ldr	r3, [pc, #164]	; (d4a78 <_Z11recordCountv+0x240>)
   d49d4:	f44f 7180 	mov.w	r1, #256	; 0x100
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	a804      	add	r0, sp, #16
   d49dc:	f001 ff70 	bl	d68c0 <snprintf>
      waitUntil(meterParticlePublish);
   d49e0:	f7ff fe4a 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d49e4:	4b19      	ldr	r3, [pc, #100]	; (d4a4c <_Z11recordCountv+0x214>)
      Particle.publish("Count",data, PRIVATE);                                   // Helpful for monitoring and calibration
   d49e6:	4929      	ldr	r1, [pc, #164]	; (d4a8c <_Z11recordCountv+0x254>)
   d49e8:	781b      	ldrb	r3, [r3, #0]
   d49ea:	2200      	movs	r2, #0
   d49ec:	f88d 2000 	strb.w	r2, [sp]
   d49f0:	a802      	add	r0, sp, #8
   d49f2:	aa04      	add	r2, sp, #16
   d49f4:	f7ff fc11 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d49f8:	a803      	add	r0, sp, #12
   d49fa:	e01a      	b.n	d4a32 <_Z11recordCountv+0x1fa>
    if (currentMinuteCount >= maxMinLimit) {
      hourlyPersonCount -= currentMinuteCount;
      dailyPersonCount -= currentMinuteCount;
      currentMinuteCount = 0;
      if (verboseMode && Particle.connected()) {
        waitUntil(meterParticlePublish);
   d49fc:	f7ff fe3c 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d4a00:	4b12      	ldr	r3, [pc, #72]	; (d4a4c <_Z11recordCountv+0x214>)
        Particle.publish("Alert", "Exceeded Maxmin limit", PRIVATE);
   d4a02:	4a23      	ldr	r2, [pc, #140]	; (d4a90 <_Z11recordCountv+0x258>)
   d4a04:	781b      	ldrb	r3, [r3, #0]
   d4a06:	4923      	ldr	r1, [pc, #140]	; (d4a94 <_Z11recordCountv+0x25c>)
   d4a08:	f88d 9000 	strb.w	r9, [sp]
   d4a0c:	a804      	add	r0, sp, #16
   d4a0e:	f7ff fc04 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d4a12:	a805      	add	r0, sp, #20
   d4a14:	f7ff fe68 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a18:	e7b3      	b.n	d4982 <_Z11recordCountv+0x14a>
      waitUntil(meterParticlePublish);
      Particle.publish("Count",data, PRIVATE);                                   // Helpful for monitoring and calibration
    }
  }
  else if(verboseMode && Particle.connected()) {
    waitUntil(meterParticlePublish);
   d4a1a:	f7ff fe2d 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d4a1e:	4b0b      	ldr	r3, [pc, #44]	; (d4a4c <_Z11recordCountv+0x214>)
    Particle.publish("Event","Debounced", PRIVATE);
   d4a20:	4a1d      	ldr	r2, [pc, #116]	; (d4a98 <_Z11recordCountv+0x260>)
   d4a22:	781b      	ldrb	r3, [r3, #0]
   d4a24:	491d      	ldr	r1, [pc, #116]	; (d4a9c <_Z11recordCountv+0x264>)
   d4a26:	f88d 6000 	strb.w	r6, [sp]
   d4a2a:	a804      	add	r0, sp, #16
   d4a2c:	f7ff fbf5 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d4a30:	a805      	add	r0, sp, #20
   d4a32:	f7ff fe59 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a36:	e724      	b.n	d4882 <_Z11recordCountv+0x4a>
   d4a38:	2003e204 	.word	0x2003e204
   d4a3c:	2003e1b0 	.word	0x2003e1b0
   d4a40:	2003e1c8 	.word	0x2003e1c8
   d4a44:	2003e20e 	.word	0x2003e20e
   d4a48:	2003e20c 	.word	0x2003e20c
   d4a4c:	2003e1ad 	.word	0x2003e1ad
   d4a50:	000db9c4 	.word	0x000db9c4
   d4a54:	000dbb01 	.word	0x000dbb01
   d4a58:	2003e1f1 	.word	0x2003e1f1
   d4a5c:	2003e202 	.word	0x2003e202
   d4a60:	2003e265 	.word	0x2003e265
   d4a64:	2003e19c 	.word	0x2003e19c
   d4a68:	2003e6d4 	.word	0x2003e6d4
   d4a6c:	2003e1ac 	.word	0x2003e1ac
   d4a70:	2003e1c0 	.word	0x2003e1c0
   d4a74:	2003e260 	.word	0x2003e260
   d4a78:	2003e1d0 	.word	0x2003e1d0
   d4a7c:	2003e198 	.word	0x2003e198
   d4a80:	2003e1a8 	.word	0x2003e1a8
   d4a84:	2003e1d4 	.word	0x2003e1d4
   d4a88:	000db9f2 	.word	0x000db9f2
   d4a8c:	000dbc61 	.word	0x000dbc61
   d4a90:	000db9d6 	.word	0x000db9d6
   d4a94:	000db9ec 	.word	0x000db9ec
   d4a98:	000dba0f 	.word	0x000dba0f
   d4a9c:	000db986 	.word	0x000db986

000d4aa0 <_Z17connectToParticlev>:

 // These are the particle functions that allow you to configure and run the device
 // They are intended to allow for customization and control during installations
 // and to allow for management.

bool connectToParticle() {
   d4aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4aa4:	4823      	ldr	r0, [pc, #140]	; (d4b34 <_Z17connectToParticlev+0x94>)
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
   d4aa6:	4d24      	ldr	r5, [pc, #144]	; (d4b38 <_Z17connectToParticlev+0x98>)
   d4aa8:	6840      	ldr	r0, [r0, #4]
   d4aaa:	2300      	movs	r3, #0
   d4aac:	461a      	mov	r2, r3
   d4aae:	4619      	mov	r1, r3
   d4ab0:	f001 feae 	bl	d6810 <network_on>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4ab4:	f001 fe44 	bl	d6740 <spark_cloud_flag_connect>
   d4ab8:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4abc:	f240 36e7 	movw	r6, #999	; 0x3e7
   d4ac0:	2700      	movs	r7, #0
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4ac2:	f7ff fbbd 	bl	d4240 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4ac6:	f04f 0900 	mov.w	r9, #0
   d4aca:	4680      	mov	r8, r0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4acc:	f7ff fbb8 	bl	d4240 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4ad0:	ebb0 0008 	subs.w	r0, r0, r8
   d4ad4:	eb61 0109 	sbc.w	r1, r1, r9
   d4ad8:	428f      	cmp	r7, r1
   d4ada:	bf08      	it	eq
   d4adc:	4286      	cmpeq	r6, r0
   d4ade:	d305      	bcc.n	d4aec <_Z17connectToParticlev+0x4c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4ae0:	f001 fe3e 	bl	d6760 <spark_cloud_flag_connected>
   d4ae4:	b910      	cbnz	r0, d4aec <_Z17connectToParticlev+0x4c>
            spark_process();
   d4ae6:	f001 fe23 	bl	d6730 <spark_process>
   d4aea:	e7ef      	b.n	d4acc <_Z17connectToParticlev+0x2c>
   d4aec:	f001 fe38 	bl	d6760 <spark_cloud_flag_connected>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4af0:	b178      	cbz	r0, d4b12 <_Z17connectToParticlev+0x72>
   d4af2:	f001 fe35 	bl	d6760 <spark_cloud_flag_connected>
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
    Particle.process();
  }
  if (Particle.connected()) {
   d4af6:	4604      	mov	r4, r0
   d4af8:	b1c0      	cbz	r0, d4b2c <_Z17connectToParticlev+0x8c>
    controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);      // Get the control register (general approach)
   d4afa:	2007      	movs	r0, #7
   d4afc:	f7ff fba4 	bl	d4248 <_Z9FRAMread8j>
    controlRegisterValue = (0b00010000 | controlRegisterValue);       // Turn on connected mode 1 = connected and 0 = disconnected
   d4b00:	4b0e      	ldr	r3, [pc, #56]	; (d4b3c <_Z17connectToParticlev+0x9c>)
   d4b02:	f040 0010 	orr.w	r0, r0, #16
   d4b06:	b2c1      	uxtb	r1, r0
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);       // Write to the control register
   d4b08:	2007      	movs	r0, #7
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
    Particle.process();
  }
  if (Particle.connected()) {
    controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);      // Get the control register (general approach)
    controlRegisterValue = (0b00010000 | controlRegisterValue);       // Turn on connected mode 1 = connected and 0 = disconnected
   d4b0a:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);       // Write to the control register
   d4b0c:	f7ff fba2 	bl	d4254 <_Z10FRAMwrite8jh>
   d4b10:	e00c      	b.n	d4b2c <_Z17connectToParticlev+0x8c>
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
   d4b12:	782b      	ldrb	r3, [r5, #0]
   d4b14:	b10b      	cbz	r3, d4b1a <_Z17connectToParticlev+0x7a>
   d4b16:	f7ff fe8f 	bl	d4838 <_Z11recordCountv>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4b1a:	f001 fc23 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4b1e:	4b08      	ldr	r3, [pc, #32]	; (d4b40 <_Z17connectToParticlev+0xa0>)
   d4b20:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4b22:	f001 fe05 	bl	d6730 <spark_process>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4b26:	3c01      	subs	r4, #1
   d4b28:	d0e3      	beq.n	d4af2 <_Z17connectToParticlev+0x52>
   d4b2a:	e7ca      	b.n	d4ac2 <_Z17connectToParticlev+0x22>
    return 1;                               // Were able to connect successfully
  }
  else {
    return 0;                                                    // Failed to connect
  }
}
   d4b2c:	4620      	mov	r0, r4
   d4b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4b32:	bf00      	nop
   d4b34:	2003e2a4 	.word	0x2003e2a4
   d4b38:	2003e19c 	.word	0x2003e19c
   d4b3c:	2003e1f1 	.word	0x2003e1f1
   d4b40:	2003e6d4 	.word	0x2003e6d4

000d4b44 <_Z9sendEventv>:
  sensorDetect = false;                                               // Reset the flag
}


void sendEvent()
{
   d4b44:	b510      	push	{r4, lr}
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i, \"temp\":%i, \"resets\":%i, \"alerts\":%i, \"maxmin\":%i}",hourlyPersonCount, dailyPersonCount, stateOfCharge, temperatureF, resetCount, alerts, maxMin);
   d4b46:	4b20      	ldr	r3, [pc, #128]	; (d4bc8 <_Z9sendEventv+0x84>)
   d4b48:	4c20      	ldr	r4, [pc, #128]	; (d4bcc <_Z9sendEventv+0x88>)
   d4b4a:	681b      	ldr	r3, [r3, #0]
   d4b4c:	4a20      	ldr	r2, [pc, #128]	; (d4bd0 <_Z9sendEventv+0x8c>)
  sensorDetect = false;                                               // Reset the flag
}


void sendEvent()
{
   d4b4e:	b0c8      	sub	sp, #288	; 0x120
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i, \"temp\":%i, \"resets\":%i, \"alerts\":%i, \"maxmin\":%i}",hourlyPersonCount, dailyPersonCount, stateOfCharge, temperatureF, resetCount, alerts, maxMin);
   d4b50:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4b54:	9305      	str	r3, [sp, #20]
   d4b56:	4b1f      	ldr	r3, [pc, #124]	; (d4bd4 <_Z9sendEventv+0x90>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	9304      	str	r3, [sp, #16]
   d4b5c:	4b1e      	ldr	r3, [pc, #120]	; (d4bd8 <_Z9sendEventv+0x94>)
   d4b5e:	681b      	ldr	r3, [r3, #0]
   d4b60:	9303      	str	r3, [sp, #12]
   d4b62:	4b1e      	ldr	r3, [pc, #120]	; (d4bdc <_Z9sendEventv+0x98>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	9302      	str	r3, [sp, #8]
   d4b68:	4b1d      	ldr	r3, [pc, #116]	; (d4be0 <_Z9sendEventv+0x9c>)
   d4b6a:	681b      	ldr	r3, [r3, #0]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	4b1d      	ldr	r3, [pc, #116]	; (d4be4 <_Z9sendEventv+0xa0>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	9300      	str	r3, [sp, #0]
   d4b74:	a808      	add	r0, sp, #32
   d4b76:	6823      	ldr	r3, [r4, #0]
   d4b78:	f001 fea2 	bl	d68c0 <snprintf>
   d4b7c:	4b1a      	ldr	r3, [pc, #104]	; (d4be8 <_Z9sendEventv+0xa4>)
  Particle.publish("Ubidots-Car-Hook", data, PRIVATE);
   d4b7e:	491b      	ldr	r1, [pc, #108]	; (d4bec <_Z9sendEventv+0xa8>)
   d4b80:	781b      	ldrb	r3, [r3, #0]
   d4b82:	2200      	movs	r2, #0
   d4b84:	f88d 2000 	strb.w	r2, [sp]
   d4b88:	a806      	add	r0, sp, #24
   d4b8a:	aa08      	add	r2, sp, #32
   d4b8c:	f7ff fb45 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d4b90:	a807      	add	r0, sp, #28
   d4b92:	f7ff fda9 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b96:	f001 fbe5 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4b9a:	4b15      	ldr	r3, [pc, #84]	; (d4bf0 <_Z9sendEventv+0xac>)
   d4b9c:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();                                  // Change the time period
   d4b9e:	f003 fa61 	bl	d8064 <_ZN9TimeClass4hourEv>
   d4ba2:	b2c0      	uxtb	r0, r0
  if(currentHourlyPeriod == 23) hourlyPersonCount++;                  // Ensures we don't have a zero here at midnigtt
   d4ba4:	2817      	cmp	r0, #23
   d4ba6:	bf08      	it	eq
   d4ba8:	6822      	ldreq	r2, [r4, #0]
{
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i, \"temp\":%i, \"resets\":%i, \"alerts\":%i, \"maxmin\":%i}",hourlyPersonCount, dailyPersonCount, stateOfCharge, temperatureF, resetCount, alerts, maxMin);
  Particle.publish("Ubidots-Car-Hook", data, PRIVATE);
  webhookTimeStamp = millis();
  currentHourlyPeriod = Time.hour();                                  // Change the time period
   d4baa:	4b12      	ldr	r3, [pc, #72]	; (d4bf4 <_Z9sendEventv+0xb0>)
  if(currentHourlyPeriod == 23) hourlyPersonCount++;                  // Ensures we don't have a zero here at midnigtt
   d4bac:	bf08      	it	eq
   d4bae:	3201      	addeq	r2, #1
{
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i, \"temp\":%i, \"resets\":%i, \"alerts\":%i, \"maxmin\":%i}",hourlyPersonCount, dailyPersonCount, stateOfCharge, temperatureF, resetCount, alerts, maxMin);
  Particle.publish("Ubidots-Car-Hook", data, PRIVATE);
  webhookTimeStamp = millis();
  currentHourlyPeriod = Time.hour();                                  // Change the time period
   d4bb0:	7018      	strb	r0, [r3, #0]
  if(currentHourlyPeriod == 23) hourlyPersonCount++;                  // Ensures we don't have a zero here at midnigtt
   d4bb2:	bf08      	it	eq
   d4bb4:	6022      	streq	r2, [r4, #0]
  hourlyPersonCountSent = hourlyPersonCount;                          // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
   d4bb6:	4b10      	ldr	r3, [pc, #64]	; (d4bf8 <_Z9sendEventv+0xb4>)
   d4bb8:	6822      	ldr	r2, [r4, #0]
   d4bba:	601a      	str	r2, [r3, #0]
  dataInFlight = true;                                                // set the data inflight flag
   d4bbc:	4b0f      	ldr	r3, [pc, #60]	; (d4bfc <_Z9sendEventv+0xb8>)
   d4bbe:	2201      	movs	r2, #1
   d4bc0:	701a      	strb	r2, [r3, #0]
}
   d4bc2:	b048      	add	sp, #288	; 0x120
   d4bc4:	bd10      	pop	{r4, pc}
   d4bc6:	bf00      	nop
   d4bc8:	2003e260 	.word	0x2003e260
   d4bcc:	2003e1d0 	.word	0x2003e1d0
   d4bd0:	000dba19 	.word	0x000dba19
   d4bd4:	2003e1d4 	.word	0x2003e1d4
   d4bd8:	2003e1dc 	.word	0x2003e1dc
   d4bdc:	2003e1ec 	.word	0x2003e1ec
   d4be0:	2003e1d8 	.word	0x2003e1d8
   d4be4:	2003e198 	.word	0x2003e198
   d4be8:	2003e1ad 	.word	0x2003e1ad
   d4bec:	000dba72 	.word	0x000dba72
   d4bf0:	2003e1a0 	.word	0x2003e1a0
   d4bf4:	2003e1f0 	.word	0x2003e1f0
   d4bf8:	2003e1c4 	.word	0x2003e1c4
   d4bfc:	2003e264 	.word	0x2003e264

000d4c00 <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d4c00:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4c02:	b085      	sub	sp, #20
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
   d4c04:	4608      	mov	r0, r1
  hourlyPersonCountSent = hourlyPersonCount;                          // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
  dataInFlight = true;                                                // set the data inflight flag
}

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d4c06:	af02      	add	r7, sp, #8
   d4c08:	460e      	mov	r6, r1
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
   d4c0a:	f004 fcbc 	bl	d9586 <strlen>
   d4c0e:	f100 0308 	add.w	r3, r0, #8
   d4c12:	f023 0307 	bic.w	r3, r3, #7
    waitUntil(meterParticlePublish);
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
    FRAMwrite32(FRAM::lastHookResponseAddr,Time.now());                     // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
   d4c16:	466d      	mov	r5, sp
  dataInFlight = true;                                                // set the data inflight flag
}

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
   d4c18:	ebad 0d03 	sub.w	sp, sp, r3
   d4c1c:	ac02      	add	r4, sp, #8
  strncpy(dataCopy, data, sizeof(dataCopy));                          // Copy - overflow safe
   d4c1e:	1c42      	adds	r2, r0, #1
   d4c20:	4631      	mov	r1, r6
   d4c22:	4620      	mov	r0, r4
   d4c24:	f004 fccc 	bl	d95c0 <strncpy>
  if (!strlen(dataCopy)) {                                            // First check to see if there is any data
   d4c28:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d4c2c:	b95e      	cbnz	r6, d4c46 <_Z14UbidotsHandlerPKcS0_+0x46>
    waitUntil(meterParticlePublish);
   d4c2e:	f7ff fd23 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4c32:	f001 fd95 	bl	d6760 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d4c36:	2800      	cmp	r0, #0
   d4c38:	d037      	beq.n	d4caa <_Z14UbidotsHandlerPKcS0_+0xaa>
   d4c3a:	4b1e      	ldr	r3, [pc, #120]	; (d4cb4 <_Z14UbidotsHandlerPKcS0_+0xb4>)
   d4c3c:	4a1e      	ldr	r2, [pc, #120]	; (d4cb8 <_Z14UbidotsHandlerPKcS0_+0xb8>)
   d4c3e:	781b      	ldrb	r3, [r3, #0]
   d4c40:	f88d 6000 	strb.w	r6, [sp]
   d4c44:	e02a      	b.n	d4c9c <_Z14UbidotsHandlerPKcS0_+0x9c>
    return;
  }
  int responseCode = atoi(dataCopy);                                  // Response is only a single number thanks to Template
   d4c46:	4620      	mov	r0, r4
   d4c48:	f004 fb0c 	bl	d9264 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d4c4c:	38c8      	subs	r0, #200	; 0xc8
   d4c4e:	2801      	cmp	r0, #1
   d4c50:	d81b      	bhi.n	d4c8a <_Z14UbidotsHandlerPKcS0_+0x8a>
  {
    waitUntil(meterParticlePublish);
   d4c52:	f7ff fd11 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d4c56:	f001 fd83 	bl	d6760 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
   d4c5a:	b160      	cbz	r0, d4c76 <_Z14UbidotsHandlerPKcS0_+0x76>
   d4c5c:	4b15      	ldr	r3, [pc, #84]	; (d4cb4 <_Z14UbidotsHandlerPKcS0_+0xb4>)
   d4c5e:	4917      	ldr	r1, [pc, #92]	; (d4cbc <_Z14UbidotsHandlerPKcS0_+0xbc>)
   d4c60:	781b      	ldrb	r3, [r3, #0]
   d4c62:	2200      	movs	r2, #0
   d4c64:	f88d 2000 	strb.w	r2, [sp]
   d4c68:	4638      	mov	r0, r7
   d4c6a:	4a15      	ldr	r2, [pc, #84]	; (d4cc0 <_Z14UbidotsHandlerPKcS0_+0xc0>)
   d4c6c:	f7ff fad5 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d4c70:	1d38      	adds	r0, r7, #4
   d4c72:	f7ff fd39 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    FRAMwrite32(FRAM::lastHookResponseAddr,Time.now());                     // Record the last successful Webhook Response
   d4c76:	f003 f9ee 	bl	d8056 <_ZN9TimeClass3nowEv>
   d4c7a:	4601      	mov	r1, r0
   d4c7c:	2014      	movs	r0, #20
   d4c7e:	f7ff fb6d 	bl	d435c <_Z11FRAMwrite32im>
    dataInFlight = false;                                             // Data has been received
   d4c82:	4b10      	ldr	r3, [pc, #64]	; (d4cc4 <_Z14UbidotsHandlerPKcS0_+0xc4>)
   d4c84:	2200      	movs	r2, #0
   d4c86:	701a      	strb	r2, [r3, #0]
   d4c88:	e00f      	b.n	d4caa <_Z14UbidotsHandlerPKcS0_+0xaa>
   d4c8a:	f001 fd69 	bl	d6760 <spark_cloud_flag_connected>
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
   d4c8e:	b160      	cbz	r0, d4caa <_Z14UbidotsHandlerPKcS0_+0xaa>
   d4c90:	4b08      	ldr	r3, [pc, #32]	; (d4cb4 <_Z14UbidotsHandlerPKcS0_+0xb4>)
   d4c92:	2200      	movs	r2, #0
   d4c94:	781b      	ldrb	r3, [r3, #0]
   d4c96:	f88d 2000 	strb.w	r2, [sp]
   d4c9a:	4622      	mov	r2, r4
   d4c9c:	4638      	mov	r0, r7
   d4c9e:	490a      	ldr	r1, [pc, #40]	; (d4cc8 <_Z14UbidotsHandlerPKcS0_+0xc8>)
   d4ca0:	f7ff fabb 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d4ca4:	1d38      	adds	r0, r7, #4
   d4ca6:	f7ff fd1f 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4caa:	370c      	adds	r7, #12
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
  strncpy(dataCopy, data, sizeof(dataCopy));                          // Copy - overflow safe
  if (!strlen(dataCopy)) {                                            // First check to see if there is any data
    waitUntil(meterParticlePublish);
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    return;
   d4cac:	46ad      	mov	sp, r5
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
    FRAMwrite32(FRAM::lastHookResponseAddr,Time.now());                     // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
}
   d4cae:	46bd      	mov	sp, r7
   d4cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4cb2:	bf00      	nop
   d4cb4:	2003e1ad 	.word	0x2003e1ad
   d4cb8:	000dba83 	.word	0x000dba83
   d4cbc:	000dbaaa 	.word	0x000dbaaa
   d4cc0:	000dba98 	.word	0x000dba98
   d4cc4:	2003e264 	.word	0x2003e264
   d4cc8:	000dba8b 	.word	0x000dba8b

000d4ccc <_Z12hardResetNow6String>:
  }
  else return 0;
}

int hardResetNow(String command)                                      // Will perform a hard reset on the Electron
{
   d4ccc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4cce:	490e      	ldr	r1, [pc, #56]	; (d4d08 <_Z12hardResetNow6String+0x3c>)
   d4cd0:	f003 f885 	bl	d7dde <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4cd4:	b1a8      	cbz	r0, d4d02 <_Z12hardResetNow6String+0x36>
   d4cd6:	4b0d      	ldr	r3, [pc, #52]	; (d4d0c <_Z12hardResetNow6String+0x40>)
  {
    Particle.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d4cd8:	490d      	ldr	r1, [pc, #52]	; (d4d10 <_Z12hardResetNow6String+0x44>)
   d4cda:	781b      	ldrb	r3, [r3, #0]
   d4cdc:	2200      	movs	r2, #0
   d4cde:	f88d 2000 	strb.w	r2, [sp]
   d4ce2:	a802      	add	r0, sp, #8
   d4ce4:	4a0b      	ldr	r2, [pc, #44]	; (d4d14 <_Z12hardResetNow6String+0x48>)
   d4ce6:	f7ff fa98 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d4cea:	a803      	add	r0, sp, #12
   d4cec:	f7ff fcfc 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(2000);
   d4cf0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4cf4:	f001 fdfc 	bl	d68f0 <delay>
    digitalWrite(hardResetPin,HIGH);                                  // This will cut all power to the Electron AND the carrir board
   d4cf8:	2006      	movs	r0, #6
   d4cfa:	2101      	movs	r1, #1
   d4cfc:	f003 fb7f 	bl	d83fe <digitalWrite>
   d4d00:	2001      	movs	r0, #1
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}
   d4d02:	b005      	add	sp, #20
   d4d04:	f85d fb04 	ldr.w	pc, [sp], #4
   d4d08:	000dbd82 	.word	0x000dbd82
   d4d0c:	2003e1ad 	.word	0x2003e1ad
   d4d10:	000dbbef 	.word	0x000dbbef
   d4d14:	000dbab0 	.word	0x000dbab0

000d4d18 <_Z11setDebounce6String>:

int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
   d4d18:	b500      	push	{lr}
   d4d1a:	ed2d 8b02 	vpush	{d8}
   d4d1e:	b087      	sub	sp, #28
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
   d4d20:	a903      	add	r1, sp, #12
   d4d22:	6800      	ldr	r0, [r0, #0]
   d4d24:	f005 fa7c 	bl	da220 <strtof>
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4d28:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d4d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}

int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
   d4d30:	eeb0 8a40 	vmov.f32	s16, s0
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4d34:	d444      	bmi.n	d4dc0 <_Z11setDebounce6String+0xa8>
   d4d36:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d4d3a:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4d42:	dc3d      	bgt.n	d4dc0 <_Z11setDebounce6String+0xa8>
  debounce = int(inputDebounce*1000);                                 // debounce is how long we must space events to prevent overcounting
   d4d44:	eddf 7a22 	vldr	s15, [pc, #136]	; d4dd0 <_Z11setDebounce6String+0xb8>
   d4d48:	4a22      	ldr	r2, [pc, #136]	; (d4dd4 <_Z11setDebounce6String+0xbc>)
   d4d4a:	ee60 7a27 	vmul.f32	s15, s0, s15
   d4d4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4d52:	ee17 3a90 	vmov	r3, s15
  int debounceFRAM = constrain(int(inputDebounce*10),1,255);          // Store as a byte in FRAM = 1.6 seconds becomes 16 dSec
   d4d56:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   d4d5a:	ee60 7a27 	vmul.f32	s15, s0, s15
int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  debounce = int(inputDebounce*1000);                                 // debounce is how long we must space events to prevent overcounting
   d4d5e:	8013      	strh	r3, [r2, #0]
  int debounceFRAM = constrain(int(inputDebounce*10),1,255);          // Store as a byte in FRAM = 1.6 seconds becomes 16 dSec
   d4d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4d64:	ee17 1a90 	vmov	r1, s15
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d4d68:	2900      	cmp	r1, #0
   d4d6a:	dd03      	ble.n	d4d74 <_Z11setDebounce6String+0x5c>
   d4d6c:	29ff      	cmp	r1, #255	; 0xff
   d4d6e:	bfa8      	it	ge
   d4d70:	21ff      	movge	r1, #255	; 0xff
   d4d72:	e000      	b.n	d4d76 <_Z11setDebounce6String+0x5e>
   d4d74:	2101      	movs	r1, #1
  FRAMwrite8(FRAM::debounceAddr,static_cast<uint8_t>(debounceFRAM));        // Convert to Int16 and store
   d4d76:	b2c9      	uxtb	r1, r1
   d4d78:	2002      	movs	r0, #2
   d4d7a:	f7ff fa6b 	bl	d4254 <_Z10FRAMwrite8jh>
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",inputDebounce);
   d4d7e:	ee18 0a10 	vmov	r0, s16
   d4d82:	f003 fe97 	bl	d8ab4 <__aeabi_f2d>
   d4d86:	4a14      	ldr	r2, [pc, #80]	; (d4dd8 <_Z11setDebounce6String+0xc0>)
   d4d88:	e9cd 0100 	strd	r0, r1, [sp]
   d4d8c:	2108      	movs	r1, #8
   d4d8e:	4813      	ldr	r0, [pc, #76]	; (d4ddc <_Z11setDebounce6String+0xc4>)
   d4d90:	f001 fd96 	bl	d68c0 <snprintf>
  if (verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
   d4d94:	4b12      	ldr	r3, [pc, #72]	; (d4de0 <_Z11setDebounce6String+0xc8>)
   d4d96:	781b      	ldrb	r3, [r3, #0]
   d4d98:	b1a3      	cbz	r3, d4dc4 <_Z11setDebounce6String+0xac>
   d4d9a:	f001 fce1 	bl	d6760 <spark_cloud_flag_connected>
   d4d9e:	b188      	cbz	r0, d4dc4 <_Z11setDebounce6String+0xac>
    waitUntil(meterParticlePublish);
   d4da0:	f7ff fc6a 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d4da4:	4b0f      	ldr	r3, [pc, #60]	; (d4de4 <_Z11setDebounce6String+0xcc>)
    Particle.publish("Debounce",debounceStr, PRIVATE);
   d4da6:	4910      	ldr	r1, [pc, #64]	; (d4de8 <_Z11setDebounce6String+0xd0>)
   d4da8:	781b      	ldrb	r3, [r3, #0]
   d4daa:	2200      	movs	r2, #0
   d4dac:	f88d 2000 	strb.w	r2, [sp]
   d4db0:	a804      	add	r0, sp, #16
   d4db2:	4a0a      	ldr	r2, [pc, #40]	; (d4ddc <_Z11setDebounce6String+0xc4>)
   d4db4:	f7ff fa31 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d4db8:	a805      	add	r0, sp, #20
   d4dba:	f7ff fc95 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4dbe:	e001      	b.n	d4dc4 <_Z11setDebounce6String+0xac>

int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4dc0:	2000      	movs	r0, #0
   d4dc2:	e000      	b.n	d4dc6 <_Z11setDebounce6String+0xae>
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",inputDebounce);
  if (verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
    waitUntil(meterParticlePublish);
    Particle.publish("Debounce",debounceStr, PRIVATE);
  }
  return 1;                                                           // Returns 1 to let the user know if was reset
   d4dc4:	2001      	movs	r0, #1
}
   d4dc6:	b007      	add	sp, #28
   d4dc8:	ecbd 8b02 	vpop	{d8}
   d4dcc:	f85d fb04 	ldr.w	pc, [sp], #4
   d4dd0:	447a0000 	.word	0x447a0000
   d4dd4:	2003e20e 	.word	0x2003e20e
   d4dd8:	000dbac8 	.word	0x000dbac8
   d4ddc:	2003e09c 	.word	0x2003e09c
   d4de0:	2003e20c 	.word	0x2003e20c
   d4de4:	2003e1ad 	.word	0x2003e1ad
   d4de8:	000dbd25 	.word	0x000dbd25

000d4dec <_Z12setSolarMode6String>:
  FRAMwrite8(FRAM::alertsCountAddr,0);
  hourlyPersonCount = dailyPersonCount = resetCount = alerts = 0;   // Reset everything for the day
}

int setSolarMode(String command) // Function to force sending data in current hour
{
   d4dec:	b530      	push	{r4, r5, lr}
   d4dee:	4925      	ldr	r1, [pc, #148]	; (d4e84 <_Z12setSolarMode6String+0x98>)
   d4df0:	b085      	sub	sp, #20
   d4df2:	4605      	mov	r5, r0
   d4df4:	f002 fff3 	bl	d7dde <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4df8:	4604      	mov	r4, r0
   d4dfa:	b1d8      	cbz	r0, d4e34 <_Z12setSolarMode6String+0x48>
  {
    solarPowerMode = true;
   d4dfc:	4b22      	ldr	r3, [pc, #136]	; (d4e88 <_Z12setSolarMode6String+0x9c>)
   d4dfe:	2401      	movs	r4, #1
    controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);
   d4e00:	2007      	movs	r0, #7

int setSolarMode(String command) // Function to force sending data in current hour
{
  if (command == "1")
  {
    solarPowerMode = true;
   d4e02:	701c      	strb	r4, [r3, #0]
    controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);
   d4e04:	f7ff fa20 	bl	d4248 <_Z9FRAMread8j>
    controlRegisterValue = (0b00000100 | controlRegisterValue);          // Turn on solarPowerMode
   d4e08:	4b20      	ldr	r3, [pc, #128]	; (d4e8c <_Z12setSolarMode6String+0xa0>)
   d4e0a:	f040 0004 	orr.w	r0, r0, #4
   d4e0e:	b2c1      	uxtb	r1, r0
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);               // Write it to the register
   d4e10:	2007      	movs	r0, #7
{
  if (command == "1")
  {
    solarPowerMode = true;
    controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);
    controlRegisterValue = (0b00000100 | controlRegisterValue);          // Turn on solarPowerMode
   d4e12:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);               // Write it to the register
   d4e14:	f7ff fa1e 	bl	d4254 <_Z10FRAMwrite8jh>
    PMICreset();                                               // Change the power management Settings
   d4e18:	f7ff fb80 	bl	d451c <_Z9PMICresetv>
    waitUntil(meterParticlePublish);
   d4e1c:	f7ff fc2c 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d4e20:	f001 fc9e 	bl	d6760 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set Solar Powered Mode", PRIVATE);
   d4e24:	b350      	cbz	r0, d4e7c <_Z12setSolarMode6String+0x90>
   d4e26:	4b1a      	ldr	r3, [pc, #104]	; (d4e90 <_Z12setSolarMode6String+0xa4>)
   d4e28:	2200      	movs	r2, #0
   d4e2a:	781b      	ldrb	r3, [r3, #0]
   d4e2c:	f88d 2000 	strb.w	r2, [sp]
   d4e30:	4a18      	ldr	r2, [pc, #96]	; (d4e94 <_Z12setSolarMode6String+0xa8>)
   d4e32:	e01c      	b.n	d4e6e <_Z12setSolarMode6String+0x82>
   d4e34:	4918      	ldr	r1, [pc, #96]	; (d4e98 <_Z12setSolarMode6String+0xac>)
   d4e36:	4628      	mov	r0, r5
   d4e38:	f002 ffd1 	bl	d7dde <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4e3c:	b1f8      	cbz	r0, d4e7e <_Z12setSolarMode6String+0x92>
  {
    solarPowerMode = false;
   d4e3e:	4b12      	ldr	r3, [pc, #72]	; (d4e88 <_Z12setSolarMode6String+0x9c>)
    controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);
   d4e40:	2007      	movs	r0, #7
    if (Particle.connected()) Particle.publish("Mode","Set Solar Powered Mode", PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    solarPowerMode = false;
   d4e42:	701c      	strb	r4, [r3, #0]
    controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);
   d4e44:	f7ff fa00 	bl	d4248 <_Z9FRAMread8j>
    controlRegisterValue = (0b11111011 & controlRegisterValue);           // Turn off solarPowerMode
   d4e48:	4b10      	ldr	r3, [pc, #64]	; (d4e8c <_Z12setSolarMode6String+0xa0>)
   d4e4a:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);                // Write it to the register
   d4e4e:	2007      	movs	r0, #7
  }
  else if (command == "0")
  {
    solarPowerMode = false;
    controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);
    controlRegisterValue = (0b11111011 & controlRegisterValue);           // Turn off solarPowerMode
   d4e50:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);                // Write it to the register
   d4e52:	f7ff f9ff 	bl	d4254 <_Z10FRAMwrite8jh>
    PMICreset();                                                // Change the power management settings
   d4e56:	f7ff fb61 	bl	d451c <_Z9PMICresetv>
    waitUntil(meterParticlePublish);
   d4e5a:	f7ff fc0d 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d4e5e:	f001 fc7f 	bl	d6760 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Cleared Solar Powered Mode", PRIVATE);
   d4e62:	b158      	cbz	r0, d4e7c <_Z12setSolarMode6String+0x90>
   d4e64:	4b0a      	ldr	r3, [pc, #40]	; (d4e90 <_Z12setSolarMode6String+0xa4>)
   d4e66:	4a0d      	ldr	r2, [pc, #52]	; (d4e9c <_Z12setSolarMode6String+0xb0>)
   d4e68:	781b      	ldrb	r3, [r3, #0]
   d4e6a:	f88d 4000 	strb.w	r4, [sp]
   d4e6e:	a802      	add	r0, sp, #8
   d4e70:	490b      	ldr	r1, [pc, #44]	; (d4ea0 <_Z12setSolarMode6String+0xb4>)
   d4e72:	f7ff f9d2 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d4e76:	a803      	add	r0, sp, #12
   d4e78:	f7ff fc36 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d4e7c:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4e7e:	b005      	add	sp, #20
   d4e80:	bd30      	pop	{r4, r5, pc}
   d4e82:	bf00      	nop
   d4e84:	000dbd82 	.word	0x000dbd82
   d4e88:	2003e1cc 	.word	0x2003e1cc
   d4e8c:	2003e1f1 	.word	0x2003e1f1
   d4e90:	2003e1ad 	.word	0x2003e1ad
   d4e94:	000dbad2 	.word	0x000dbad2
   d4e98:	000dbae9 	.word	0x000dbae9
   d4e9c:	000dbaeb 	.word	0x000dbaeb
   d4ea0:	000dbb01 	.word	0x000dbb01

000d4ea4 <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d4ea4:	b530      	push	{r4, r5, lr}
   d4ea6:	4923      	ldr	r1, [pc, #140]	; (d4f34 <_Z14setVerboseMode6String+0x90>)
   d4ea8:	b085      	sub	sp, #20
   d4eaa:	4605      	mov	r5, r0
   d4eac:	f002 ff97 	bl	d7dde <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4eb0:	4604      	mov	r4, r0
   d4eb2:	b1c8      	cbz	r0, d4ee8 <_Z14setVerboseMode6String+0x44>
  {
    verboseMode = true;
   d4eb4:	4b20      	ldr	r3, [pc, #128]	; (d4f38 <_Z14setVerboseMode6String+0x94>)
   d4eb6:	2401      	movs	r4, #1
    controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);
   d4eb8:	2007      	movs	r0, #7

int setVerboseMode(String command) // Function to force sending data in current hour
{
  if (command == "1")
  {
    verboseMode = true;
   d4eba:	701c      	strb	r4, [r3, #0]
    controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);
   d4ebc:	f7ff f9c4 	bl	d4248 <_Z9FRAMread8j>
    controlRegisterValue = (0b00001000 | controlRegisterValue);                    // Turn on verboseMode
   d4ec0:	4b1e      	ldr	r3, [pc, #120]	; (d4f3c <_Z14setVerboseMode6String+0x98>)
   d4ec2:	f040 0008 	orr.w	r0, r0, #8
   d4ec6:	b2c1      	uxtb	r1, r0
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);                        // Write it to the register
   d4ec8:	2007      	movs	r0, #7
{
  if (command == "1")
  {
    verboseMode = true;
    controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);
    controlRegisterValue = (0b00001000 | controlRegisterValue);                    // Turn on verboseMode
   d4eca:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);                        // Write it to the register
   d4ecc:	f7ff f9c2 	bl	d4254 <_Z10FRAMwrite8jh>
    waitUntil(meterParticlePublish);
   d4ed0:	f7ff fbd2 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d4ed4:	f001 fc44 	bl	d6760 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set Verbose Mode", PRIVATE);
   d4ed8:	b340      	cbz	r0, d4f2c <_Z14setVerboseMode6String+0x88>
   d4eda:	4b19      	ldr	r3, [pc, #100]	; (d4f40 <_Z14setVerboseMode6String+0x9c>)
   d4edc:	2200      	movs	r2, #0
   d4ede:	781b      	ldrb	r3, [r3, #0]
   d4ee0:	f88d 2000 	strb.w	r2, [sp]
   d4ee4:	4a17      	ldr	r2, [pc, #92]	; (d4f44 <_Z14setVerboseMode6String+0xa0>)
   d4ee6:	e01a      	b.n	d4f1e <_Z14setVerboseMode6String+0x7a>
   d4ee8:	4917      	ldr	r1, [pc, #92]	; (d4f48 <_Z14setVerboseMode6String+0xa4>)
   d4eea:	4628      	mov	r0, r5
   d4eec:	f002 ff77 	bl	d7dde <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4ef0:	b1e8      	cbz	r0, d4f2e <_Z14setVerboseMode6String+0x8a>
  {
    verboseMode = false;
   d4ef2:	4b11      	ldr	r3, [pc, #68]	; (d4f38 <_Z14setVerboseMode6String+0x94>)
    controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);
   d4ef4:	2007      	movs	r0, #7
    if (Particle.connected()) Particle.publish("Mode","Set Verbose Mode", PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
   d4ef6:	701c      	strb	r4, [r3, #0]
    controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);
   d4ef8:	f7ff f9a6 	bl	d4248 <_Z9FRAMread8j>
    controlRegisterValue = (0b11110111 & controlRegisterValue);                    // Turn off verboseMode
   d4efc:	4b0f      	ldr	r3, [pc, #60]	; (d4f3c <_Z14setVerboseMode6String+0x98>)
   d4efe:	f000 01f7 	and.w	r1, r0, #247	; 0xf7
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);                        // Write it to the register
   d4f02:	2007      	movs	r0, #7
  }
  else if (command == "0")
  {
    verboseMode = false;
    controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);
    controlRegisterValue = (0b11110111 & controlRegisterValue);                    // Turn off verboseMode
   d4f04:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);                        // Write it to the register
   d4f06:	f7ff f9a5 	bl	d4254 <_Z10FRAMwrite8jh>
    waitUntil(meterParticlePublish);
   d4f0a:	f7ff fbb5 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d4f0e:	f001 fc27 	bl	d6760 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d4f12:	b158      	cbz	r0, d4f2c <_Z14setVerboseMode6String+0x88>
   d4f14:	4b0a      	ldr	r3, [pc, #40]	; (d4f40 <_Z14setVerboseMode6String+0x9c>)
   d4f16:	4a0d      	ldr	r2, [pc, #52]	; (d4f4c <_Z14setVerboseMode6String+0xa8>)
   d4f18:	781b      	ldrb	r3, [r3, #0]
   d4f1a:	f88d 4000 	strb.w	r4, [sp]
   d4f1e:	a802      	add	r0, sp, #8
   d4f20:	490b      	ldr	r1, [pc, #44]	; (d4f50 <_Z14setVerboseMode6String+0xac>)
   d4f22:	f7ff f97a 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d4f26:	a803      	add	r0, sp, #12
   d4f28:	f7ff fbde 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d4f2c:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4f2e:	b005      	add	sp, #20
   d4f30:	bd30      	pop	{r4, r5, pc}
   d4f32:	bf00      	nop
   d4f34:	000dbd82 	.word	0x000dbd82
   d4f38:	2003e20c 	.word	0x2003e20c
   d4f3c:	2003e1f1 	.word	0x2003e1f1
   d4f40:	2003e1ad 	.word	0x2003e1ad
   d4f44:	000dbb06 	.word	0x000dbb06
   d4f48:	000dbae9 	.word	0x000dbae9
   d4f4c:	000dbb17 	.word	0x000dbb17
   d4f50:	000dbb01 	.word	0x000dbb01

000d4f54 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
   d4f54:	b530      	push	{r4, r5, lr}
   d4f56:	b0cd      	sub	sp, #308	; 0x134
   d4f58:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d4f5a:	f003 f87c 	bl	d8056 <_ZN9TimeClass3nowEv>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4f5e:	220a      	movs	r2, #10

int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d4f60:	4605      	mov	r5, r0
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4f62:	a905      	add	r1, sp, #20
   d4f64:	6820      	ldr	r0, [r4, #0]
   d4f66:	f005 fa01 	bl	da36c <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4f6a:	b2c4      	uxtb	r4, r0
   d4f6c:	f104 030c 	add.w	r3, r4, #12
   d4f70:	b2db      	uxtb	r3, r3
   d4f72:	2b18      	cmp	r3, #24
   d4f74:	d840      	bhi.n	d4ff8 <_Z11setTimeZone6String+0xa4>
int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4f76:	b243      	sxtb	r3, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
   d4f78:	ee07 3a90 	vmov	s15, r3
   d4f7c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d4f80:	9303      	str	r3, [sp, #12]
   d4f82:	f003 f809 	bl	d7f98 <_ZN9TimeClass4zoneEf>
  FRAMwrite8(FRAM::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
   d4f86:	4621      	mov	r1, r4
   d4f88:	2004      	movs	r0, #4
   d4f8a:	f7ff f963 	bl	d4254 <_Z10FRAMwrite8jh>
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d4f8e:	9b03      	ldr	r3, [sp, #12]
   d4f90:	4a1c      	ldr	r2, [pc, #112]	; (d5004 <_Z11setTimeZone6String+0xb0>)
   d4f92:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4f96:	a80c      	add	r0, sp, #48	; 0x30
   d4f98:	f001 fc92 	bl	d68c0 <snprintf>
  waitUntil(meterParticlePublish);
   d4f9c:	f7ff fb6c 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d4fa0:	f001 fbde 	bl	d6760 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d4fa4:	b160      	cbz	r0, d4fc0 <_Z11setTimeZone6String+0x6c>
   d4fa6:	4b18      	ldr	r3, [pc, #96]	; (d5008 <_Z11setTimeZone6String+0xb4>)
   d4fa8:	4918      	ldr	r1, [pc, #96]	; (d500c <_Z11setTimeZone6String+0xb8>)
   d4faa:	781b      	ldrb	r3, [r3, #0]
   d4fac:	2200      	movs	r2, #0
   d4fae:	f88d 2000 	strb.w	r2, [sp]
   d4fb2:	a808      	add	r0, sp, #32
   d4fb4:	aa0c      	add	r2, sp, #48	; 0x30
   d4fb6:	f7ff f930 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d4fba:	a809      	add	r0, sp, #36	; 0x24
   d4fbc:	f7ff fb94 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  waitUntil(meterParticlePublish);
   d4fc0:	f7ff fb5a 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d4fc4:	f001 fbcc 	bl	d6760 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(t), PRIVATE);
   d4fc8:	b1c0      	cbz	r0, d4ffc <_Z11setTimeZone6String+0xa8>
   d4fca:	4629      	mov	r1, r5
   d4fcc:	a808      	add	r0, sp, #32
   d4fce:	f002 ffff 	bl	d7fd0 <_ZN9TimeClass7timeStrEl>
   d4fd2:	9b08      	ldr	r3, [sp, #32]
   d4fd4:	9303      	str	r3, [sp, #12]
   d4fd6:	4b0c      	ldr	r3, [pc, #48]	; (d5008 <_Z11setTimeZone6String+0xb4>)
   d4fd8:	490c      	ldr	r1, [pc, #48]	; (d500c <_Z11setTimeZone6String+0xb8>)
   d4fda:	781b      	ldrb	r3, [r3, #0]
   d4fdc:	2200      	movs	r2, #0
   d4fde:	f88d 2000 	strb.w	r2, [sp]
   d4fe2:	a806      	add	r0, sp, #24
   d4fe4:	9a03      	ldr	r2, [sp, #12]
   d4fe6:	f7ff f918 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d4fea:	a807      	add	r0, sp, #28
   d4fec:	f7ff fb7c 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ff0:	a808      	add	r0, sp, #32
   d4ff2:	f002 fe80 	bl	d7cf6 <_ZN6StringD1Ev>
   d4ff6:	e001      	b.n	d4ffc <_Z11setTimeZone6String+0xa8>
{
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4ff8:	2000      	movs	r0, #0
   d4ffa:	e000      	b.n	d4ffe <_Z11setTimeZone6String+0xaa>
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(t), PRIVATE);
  return 1;
   d4ffc:	2001      	movs	r0, #1
}
   d4ffe:	b04d      	add	sp, #308	; 0x134
   d5000:	bd30      	pop	{r4, r5, pc}
   d5002:	bf00      	nop
   d5004:	000dbb2c 	.word	0x000dbb2c
   d5008:	2003e1ad 	.word	0x2003e1ad
   d500c:	000dbc98 	.word	0x000dbc98

000d5010 <_Z11setOpenTime6String>:

int setOpenTime(String command)
{
   d5010:	b510      	push	{r4, lr}
   d5012:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d5014:	220a      	movs	r2, #10
   d5016:	a903      	add	r1, sp, #12
   d5018:	6800      	ldr	r0, [r0, #0]
   d501a:	f005 f9a7 	bl	da36c <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d501e:	2817      	cmp	r0, #23
   d5020:	d81f      	bhi.n	d5062 <_Z11setOpenTime6String+0x52>
  openTime = tempTime;
   d5022:	4c12      	ldr	r4, [pc, #72]	; (d506c <_Z11setOpenTime6String+0x5c>)
  FRAMwrite8(FRAM::openTimeAddr,openTime);                             // Store the new value in FRAMwrite8
   d5024:	b2c1      	uxtb	r1, r0
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  openTime = tempTime;
   d5026:	6020      	str	r0, [r4, #0]
  FRAMwrite8(FRAM::openTimeAddr,openTime);                             // Store the new value in FRAMwrite8
   d5028:	2005      	movs	r0, #5
   d502a:	f7ff f913 	bl	d4254 <_Z10FRAMwrite8jh>
  snprintf(data, sizeof(data), "Open time set to %i",openTime);
   d502e:	6823      	ldr	r3, [r4, #0]
   d5030:	4a0f      	ldr	r2, [pc, #60]	; (d5070 <_Z11setOpenTime6String+0x60>)
   d5032:	f44f 7180 	mov.w	r1, #256	; 0x100
   d5036:	a806      	add	r0, sp, #24
   d5038:	f001 fc42 	bl	d68c0 <snprintf>
  waitUntil(meterParticlePublish);
   d503c:	f7ff fb1c 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d5040:	f001 fb8e 	bl	d6760 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d5044:	b178      	cbz	r0, d5066 <_Z11setOpenTime6String+0x56>
   d5046:	4b0b      	ldr	r3, [pc, #44]	; (d5074 <_Z11setOpenTime6String+0x64>)
   d5048:	490b      	ldr	r1, [pc, #44]	; (d5078 <_Z11setOpenTime6String+0x68>)
   d504a:	781b      	ldrb	r3, [r3, #0]
   d504c:	2200      	movs	r2, #0
   d504e:	f88d 2000 	strb.w	r2, [sp]
   d5052:	a804      	add	r0, sp, #16
   d5054:	aa06      	add	r2, sp, #24
   d5056:	f7ff f8e0 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d505a:	a805      	add	r0, sp, #20
   d505c:	f7ff fb44 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5060:	e001      	b.n	d5066 <_Z11setOpenTime6String+0x56>
int setOpenTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d5062:	2000      	movs	r0, #0
   d5064:	e000      	b.n	d5068 <_Z11setOpenTime6String+0x58>
  openTime = tempTime;
  FRAMwrite8(FRAM::openTimeAddr,openTime);                             // Store the new value in FRAMwrite8
  snprintf(data, sizeof(data), "Open time set to %i",openTime);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  return 1;
   d5066:	2001      	movs	r0, #1
}
   d5068:	b046      	add	sp, #280	; 0x118
   d506a:	bd10      	pop	{r4, pc}
   d506c:	2003e25c 	.word	0x2003e25c
   d5070:	000dbb40 	.word	0x000dbb40
   d5074:	2003e1ad 	.word	0x2003e1ad
   d5078:	000dbc98 	.word	0x000dbc98

000d507c <_Z12setCloseTime6String>:

int setCloseTime(String command)
{
   d507c:	b510      	push	{r4, lr}
   d507e:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d5080:	220a      	movs	r2, #10
   d5082:	a903      	add	r1, sp, #12
   d5084:	6800      	ldr	r0, [r0, #0]
   d5086:	f005 f971 	bl	da36c <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d508a:	2817      	cmp	r0, #23
   d508c:	d81f      	bhi.n	d50ce <_Z12setCloseTime6String+0x52>
  closeTime = tempTime;
   d508e:	4c12      	ldr	r4, [pc, #72]	; (d50d8 <_Z12setCloseTime6String+0x5c>)
  FRAMwrite8(FRAM::closeTimeAddr,closeTime);                             // Store the new value in FRAMwrite8
   d5090:	b2c1      	uxtb	r1, r0
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  closeTime = tempTime;
   d5092:	6020      	str	r0, [r4, #0]
  FRAMwrite8(FRAM::closeTimeAddr,closeTime);                             // Store the new value in FRAMwrite8
   d5094:	2006      	movs	r0, #6
   d5096:	f7ff f8dd 	bl	d4254 <_Z10FRAMwrite8jh>
  snprintf(data, sizeof(data), "Closing time set to %i",closeTime);
   d509a:	6823      	ldr	r3, [r4, #0]
   d509c:	4a0f      	ldr	r2, [pc, #60]	; (d50dc <_Z12setCloseTime6String+0x60>)
   d509e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d50a2:	a806      	add	r0, sp, #24
   d50a4:	f001 fc0c 	bl	d68c0 <snprintf>
  waitUntil(meterParticlePublish);
   d50a8:	f7ff fae6 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d50ac:	f001 fb58 	bl	d6760 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d50b0:	b178      	cbz	r0, d50d2 <_Z12setCloseTime6String+0x56>
   d50b2:	4b0b      	ldr	r3, [pc, #44]	; (d50e0 <_Z12setCloseTime6String+0x64>)
   d50b4:	490b      	ldr	r1, [pc, #44]	; (d50e4 <_Z12setCloseTime6String+0x68>)
   d50b6:	781b      	ldrb	r3, [r3, #0]
   d50b8:	2200      	movs	r2, #0
   d50ba:	f88d 2000 	strb.w	r2, [sp]
   d50be:	a804      	add	r0, sp, #16
   d50c0:	aa06      	add	r2, sp, #24
   d50c2:	f7ff f8aa 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d50c6:	a805      	add	r0, sp, #20
   d50c8:	f7ff fb0e 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d50cc:	e001      	b.n	d50d2 <_Z12setCloseTime6String+0x56>
int setCloseTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d50ce:	2000      	movs	r0, #0
   d50d0:	e000      	b.n	d50d4 <_Z12setCloseTime6String+0x58>
  closeTime = tempTime;
  FRAMwrite8(FRAM::closeTimeAddr,closeTime);                             // Store the new value in FRAMwrite8
  snprintf(data, sizeof(data), "Closing time set to %i",closeTime);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  return 1;
   d50d2:	2001      	movs	r0, #1
}
   d50d4:	b046      	add	sp, #280	; 0x118
   d50d6:	bd10      	pop	{r4, pc}
   d50d8:	2003e208 	.word	0x2003e208
   d50dc:	000dbb54 	.word	0x000dbb54
   d50e0:	2003e1ad 	.word	0x2003e1ad
   d50e4:	000dbc98 	.word	0x000dbc98

000d50e8 <_Z15setLowPowerMode6String>:


int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d50e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d50ec:	494e      	ldr	r1, [pc, #312]	; (d5228 <_Z15setLowPowerMode6String+0x140>)
   d50ee:	b085      	sub	sp, #20
   d50f0:	4605      	mov	r5, r0
   d50f2:	f002 fe74 	bl	d7dde <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d50f6:	b930      	cbnz	r0, d5106 <_Z15setLowPowerMode6String+0x1e>
   d50f8:	494c      	ldr	r1, [pc, #304]	; (d522c <_Z15setLowPowerMode6String+0x144>)
   d50fa:	4628      	mov	r0, r5
   d50fc:	f002 fe6f 	bl	d7dde <_ZNK6String6equalsEPKc>
   d5100:	2800      	cmp	r0, #0
   d5102:	f000 808e 	beq.w	d5222 <_Z15setLowPowerMode6String+0x13a>
  controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);        // Get the control register (general approach)
   d5106:	2007      	movs	r0, #7
   d5108:	f7ff f89e 	bl	d4248 <_Z9FRAMread8j>
   d510c:	4c48      	ldr	r4, [pc, #288]	; (d5230 <_Z15setLowPowerMode6String+0x148>)
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d510e:	4946      	ldr	r1, [pc, #280]	; (d5228 <_Z15setLowPowerMode6String+0x140>)
   d5110:	7020      	strb	r0, [r4, #0]
   d5112:	4628      	mov	r0, r5
   d5114:	f002 fe63 	bl	d7dde <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d5118:	4606      	mov	r6, r0
   d511a:	b300      	cbz	r0, d515e <_Z15setLowPowerMode6String+0x76>
  {
    if (verboseMode && Particle.connected()) {
   d511c:	4b45      	ldr	r3, [pc, #276]	; (d5234 <_Z15setLowPowerMode6String+0x14c>)
   d511e:	781b      	ldrb	r3, [r3, #0]
   d5120:	b11b      	cbz	r3, d512a <_Z15setLowPowerMode6String+0x42>
   d5122:	f001 fb1d 	bl	d6760 <spark_cloud_flag_connected>
   d5126:	2800      	cmp	r0, #0
   d5128:	d159      	bne.n	d51de <_Z15setLowPowerMode6String+0xf6>
      waitUntil(meterParticlePublish);
      Particle.publish("Mode","Low Power", PRIVATE);
    }
    if ((0b00010000 & controlRegisterValue)) {                        // If we are in connected mode
   d512a:	7823      	ldrb	r3, [r4, #0]
   d512c:	4d40      	ldr	r5, [pc, #256]	; (d5230 <_Z15setLowPowerMode6String+0x148>)
   d512e:	06d9      	lsls	r1, r3, #27
   d5130:	d50f      	bpl.n	d5152 <_Z15setLowPowerMode6String+0x6a>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d5132:	f001 fb0d 	bl	d6750 <spark_cloud_flag_disconnect>
      Particle.disconnect();                                          // Otherwise Electron will attempt to reconnect on wake
      controlRegisterValue = (0b11101111 & controlRegisterValue);     // Turn off connected mode 1 = connected and 0 = disconnected
   d5136:	782b      	ldrb	r3, [r5, #0]
      connectionMode = false;
      Cellular.off();
   d5138:	483f      	ldr	r0, [pc, #252]	; (d5238 <_Z15setLowPowerMode6String+0x150>)
      waitUntil(meterParticlePublish);
      Particle.publish("Mode","Low Power", PRIVATE);
    }
    if ((0b00010000 & controlRegisterValue)) {                        // If we are in connected mode
      Particle.disconnect();                                          // Otherwise Electron will attempt to reconnect on wake
      controlRegisterValue = (0b11101111 & controlRegisterValue);     // Turn off connected mode 1 = connected and 0 = disconnected
   d513a:	f023 0310 	bic.w	r3, r3, #16
   d513e:	702b      	strb	r3, [r5, #0]
      connectionMode = false;
   d5140:	4b3e      	ldr	r3, [pc, #248]	; (d523c <_Z15setLowPowerMode6String+0x154>)
   d5142:	2200      	movs	r2, #0
   d5144:	701a      	strb	r2, [r3, #0]
      Cellular.off();
   d5146:	f7ff f875 	bl	d4234 <_ZN5spark13CellularClass3offEv>
      delay(1000);                                                    // Bummer but only should happen once an hour
   d514a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d514e:	f001 fbcf 	bl	d68f0 <delay>
    }
    controlRegisterValue = (0b00000001 | controlRegisterValue);       // If so, flip the lowPowerMode bit
   d5152:	7823      	ldrb	r3, [r4, #0]
   d5154:	f043 0301 	orr.w	r3, r3, #1
   d5158:	7023      	strb	r3, [r4, #0]
    lowPowerMode = true;
   d515a:	2201      	movs	r2, #1
   d515c:	e037      	b.n	d51ce <_Z15setLowPowerMode6String+0xe6>
   d515e:	4933      	ldr	r1, [pc, #204]	; (d522c <_Z15setLowPowerMode6String+0x144>)
   d5160:	4628      	mov	r0, r5
   d5162:	f002 fe3c 	bl	d7dde <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d5166:	2800      	cmp	r0, #0
   d5168:	d033      	beq.n	d51d2 <_Z15setLowPowerMode6String+0xea>
  {
    if (verboseMode && Particle.connected()) {
   d516a:	4b32      	ldr	r3, [pc, #200]	; (d5234 <_Z15setLowPowerMode6String+0x14c>)
   d516c:	781b      	ldrb	r3, [r3, #0]
   d516e:	b11b      	cbz	r3, d5178 <_Z15setLowPowerMode6String+0x90>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5170:	f001 faf6 	bl	d6760 <spark_cloud_flag_connected>
   d5174:	2800      	cmp	r0, #0
   d5176:	d142      	bne.n	d51fe <_Z15setLowPowerMode6String+0x116>
      waitUntil(meterParticlePublish);
      Particle.publish("Mode","Normal Operations", PRIVATE);
    }
    if (!(0b00010000 & controlRegisterValue)) {
   d5178:	7823      	ldrb	r3, [r4, #0]
   d517a:	06da      	lsls	r2, r3, #27
   d517c:	d422      	bmi.n	d51c4 <_Z15setLowPowerMode6String+0xdc>
      controlRegisterValue = (0b00010000 | controlRegisterValue);       // Turn on connected mode 1 = connected and 0 = disconnected
   d517e:	4a2c      	ldr	r2, [pc, #176]	; (d5230 <_Z15setLowPowerMode6String+0x148>)
   d5180:	f043 0310 	orr.w	r3, r3, #16
   d5184:	7013      	strb	r3, [r2, #0]
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d5186:	f001 fadb 	bl	d6740 <spark_cloud_flag_connect>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d518a:	f7ff f859 	bl	d4240 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d518e:	2700      	movs	r7, #0
   d5190:	4606      	mov	r6, r0
   d5192:	f64e 285f 	movw	r8, #59999	; 0xea5f
   d5196:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d519a:	f7ff f851 	bl	d4240 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d519e:	1b80      	subs	r0, r0, r6
   d51a0:	eb61 0107 	sbc.w	r1, r1, r7
   d51a4:	4589      	cmp	r9, r1
   d51a6:	bf08      	it	eq
   d51a8:	4580      	cmpeq	r8, r0
   d51aa:	d303      	bcc.n	d51b4 <_Z15setLowPowerMode6String+0xcc>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d51ac:	f001 fad8 	bl	d6760 <spark_cloud_flag_connected>
   d51b0:	2800      	cmp	r0, #0
   d51b2:	d033      	beq.n	d521c <_Z15setLowPowerMode6String+0x134>
   d51b4:	f001 fad4 	bl	d6760 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d51b8:	f001 f8d4 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d51bc:	4b20      	ldr	r3, [pc, #128]	; (d5240 <_Z15setLowPowerMode6String+0x158>)
   d51be:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d51c0:	f001 fab6 	bl	d6730 <spark_process>
      Particle.connect();
      waitFor(Particle.connected,60000);                                // Give us 60 seconds to connect
      Particle.process();
    }
    controlRegisterValue = (0b11111110 & controlRegisterValue);         // If so, flip the lowPowerMode bit
   d51c4:	7823      	ldrb	r3, [r4, #0]
   d51c6:	f023 0301 	bic.w	r3, r3, #1
   d51ca:	7023      	strb	r3, [r4, #0]
    lowPowerMode = false;
   d51cc:	2200      	movs	r2, #0
   d51ce:	4b1d      	ldr	r3, [pc, #116]	; (d5244 <_Z15setLowPowerMode6String+0x15c>)
   d51d0:	701a      	strb	r2, [r3, #0]
  }
  FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);           // Write to the control register
   d51d2:	2007      	movs	r0, #7
   d51d4:	7821      	ldrb	r1, [r4, #0]
   d51d6:	f7ff f83d 	bl	d4254 <_Z10FRAMwrite8jh>
   d51da:	2001      	movs	r0, #1
   d51dc:	e021      	b.n	d5222 <_Z15setLowPowerMode6String+0x13a>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
  controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);        // Get the control register (general approach)
  if (command == "1")                                                 // Command calls for setting lowPowerMode
  {
    if (verboseMode && Particle.connected()) {
      waitUntil(meterParticlePublish);
   d51de:	f7ff fa4b 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d51e2:	4b19      	ldr	r3, [pc, #100]	; (d5248 <_Z15setLowPowerMode6String+0x160>)
      Particle.publish("Mode","Low Power", PRIVATE);
   d51e4:	4919      	ldr	r1, [pc, #100]	; (d524c <_Z15setLowPowerMode6String+0x164>)
   d51e6:	781b      	ldrb	r3, [r3, #0]
   d51e8:	2200      	movs	r2, #0
   d51ea:	f88d 2000 	strb.w	r2, [sp]
   d51ee:	a802      	add	r0, sp, #8
   d51f0:	4a17      	ldr	r2, [pc, #92]	; (d5250 <_Z15setLowPowerMode6String+0x168>)
   d51f2:	f7ff f812 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d51f6:	a803      	add	r0, sp, #12
   d51f8:	f7ff fa76 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51fc:	e795      	b.n	d512a <_Z15setLowPowerMode6String+0x42>
    lowPowerMode = true;
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
  {
    if (verboseMode && Particle.connected()) {
      waitUntil(meterParticlePublish);
   d51fe:	f7ff fa3b 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d5202:	4b11      	ldr	r3, [pc, #68]	; (d5248 <_Z15setLowPowerMode6String+0x160>)
      Particle.publish("Mode","Normal Operations", PRIVATE);
   d5204:	4a13      	ldr	r2, [pc, #76]	; (d5254 <_Z15setLowPowerMode6String+0x16c>)
   d5206:	781b      	ldrb	r3, [r3, #0]
   d5208:	4910      	ldr	r1, [pc, #64]	; (d524c <_Z15setLowPowerMode6String+0x164>)
   d520a:	f88d 6000 	strb.w	r6, [sp]
   d520e:	a802      	add	r0, sp, #8
   d5210:	f7ff f803 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d5214:	a803      	add	r0, sp, #12
   d5216:	f7ff fa67 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d521a:	e7ad      	b.n	d5178 <_Z15setLowPowerMode6String+0x90>
            spark_process();
   d521c:	f001 fa88 	bl	d6730 <spark_process>
   d5220:	e7bb      	b.n	d519a <_Z15setLowPowerMode6String+0xb2>
    controlRegisterValue = (0b11111110 & controlRegisterValue);         // If so, flip the lowPowerMode bit
    lowPowerMode = false;
  }
  FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);           // Write to the control register
  return 1;
}
   d5222:	b005      	add	sp, #20
   d5224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5228:	000dbd82 	.word	0x000dbd82
   d522c:	000dbae9 	.word	0x000dbae9
   d5230:	2003e1f1 	.word	0x2003e1f1
   d5234:	2003e20c 	.word	0x2003e20c
   d5238:	2003e2a4 	.word	0x2003e2a4
   d523c:	2003e265 	.word	0x2003e265
   d5240:	2003e6d4 	.word	0x2003e6d4
   d5244:	2003e202 	.word	0x2003e202
   d5248:	2003e1ad 	.word	0x2003e1ad
   d524c:	000dbb01 	.word	0x000dbb01
   d5250:	000dbb6b 	.word	0x000dbb6b
   d5254:	000db9c4 	.word	0x000db9c4

000d5258 <_Z14setMaxMinLimit6String>:

int setMaxMinLimit(String command)
{
   d5258:	b510      	push	{r4, lr}
   d525a:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempMaxMinLimit = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d525c:	220a      	movs	r2, #10
   d525e:	a903      	add	r1, sp, #12
   d5260:	6800      	ldr	r0, [r0, #0]
   d5262:	f005 f883 	bl	da36c <strtol>
  if ((tempMaxMinLimit < 2) || (tempMaxMinLimit > 30)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d5266:	1e83      	subs	r3, r0, #2
   d5268:	2b1c      	cmp	r3, #28
   d526a:	d81f      	bhi.n	d52ac <_Z14setMaxMinLimit6String+0x54>
  maxMinLimit = tempMaxMinLimit;
   d526c:	4c12      	ldr	r4, [pc, #72]	; (d52b8 <_Z14setMaxMinLimit6String+0x60>)
  FRAMwrite8(FRAM::maxMinLimitAddr,maxMinLimit);                        // Store the new value in FRAMwrite8
   d526e:	b2c1      	uxtb	r1, r0
{
  char * pEND;
  char data[256];
  int tempMaxMinLimit = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempMaxMinLimit < 2) || (tempMaxMinLimit > 30)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  maxMinLimit = tempMaxMinLimit;
   d5270:	6020      	str	r0, [r4, #0]
  FRAMwrite8(FRAM::maxMinLimitAddr,maxMinLimit);                        // Store the new value in FRAMwrite8
   d5272:	2013      	movs	r0, #19
   d5274:	f7fe ffee 	bl	d4254 <_Z10FRAMwrite8jh>
  snprintf(data, sizeof(data), "MaxMin limit set to %i",maxMinLimit);
   d5278:	6823      	ldr	r3, [r4, #0]
   d527a:	4a10      	ldr	r2, [pc, #64]	; (d52bc <_Z14setMaxMinLimit6String+0x64>)
   d527c:	f44f 7180 	mov.w	r1, #256	; 0x100
   d5280:	a806      	add	r0, sp, #24
   d5282:	f001 fb1d 	bl	d68c0 <snprintf>
  waitUntil(meterParticlePublish);
   d5286:	f7ff f9f7 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d528a:	f001 fa69 	bl	d6760 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("MaxMin",data,PRIVATE);
   d528e:	b178      	cbz	r0, d52b0 <_Z14setMaxMinLimit6String+0x58>
   d5290:	4b0b      	ldr	r3, [pc, #44]	; (d52c0 <_Z14setMaxMinLimit6String+0x68>)
   d5292:	490c      	ldr	r1, [pc, #48]	; (d52c4 <_Z14setMaxMinLimit6String+0x6c>)
   d5294:	781b      	ldrb	r3, [r3, #0]
   d5296:	2200      	movs	r2, #0
   d5298:	f88d 2000 	strb.w	r2, [sp]
   d529c:	a804      	add	r0, sp, #16
   d529e:	aa06      	add	r2, sp, #24
   d52a0:	f7fe ffbb 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d52a4:	a805      	add	r0, sp, #20
   d52a6:	f7ff fa1f 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52aa:	e001      	b.n	d52b0 <_Z14setMaxMinLimit6String+0x58>
int setMaxMinLimit(String command)
{
  char * pEND;
  char data[256];
  int tempMaxMinLimit = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempMaxMinLimit < 2) || (tempMaxMinLimit > 30)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d52ac:	2000      	movs	r0, #0
   d52ae:	e000      	b.n	d52b2 <_Z14setMaxMinLimit6String+0x5a>
  maxMinLimit = tempMaxMinLimit;
  FRAMwrite8(FRAM::maxMinLimitAddr,maxMinLimit);                        // Store the new value in FRAMwrite8
  snprintf(data, sizeof(data), "MaxMin limit set to %i",maxMinLimit);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("MaxMin",data,PRIVATE);
  return 1;
   d52b0:	2001      	movs	r0, #1
}
   d52b2:	b046      	add	sp, #280	; 0x118
   d52b4:	bd10      	pop	{r4, pc}
   d52b6:	bf00      	nop
   d52b8:	2003e1a8 	.word	0x2003e1a8
   d52bc:	000dbb75 	.word	0x000dbb75
   d52c0:	2003e1ad 	.word	0x2003e1ad
   d52c4:	000dbb8c 	.word	0x000dbb8c

000d52c8 <_Z22publishStateTransitionv>:
  }
  else return 0;
}

void publishStateTransition(void)
{
   d52c8:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d52ca:	4d16      	ldr	r5, [pc, #88]	; (d5324 <_Z22publishStateTransitionv+0x5c>)
   d52cc:	4c16      	ldr	r4, [pc, #88]	; (d5328 <_Z22publishStateTransitionv+0x60>)
   d52ce:	4917      	ldr	r1, [pc, #92]	; (d532c <_Z22publishStateTransitionv+0x64>)
   d52d0:	782a      	ldrb	r2, [r5, #0]
   d52d2:	7820      	ldrb	r0, [r4, #0]
  }
  else return 0;
}

void publishStateTransition(void)
{
   d52d4:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d52d6:	230e      	movs	r3, #14
   d52d8:	fb03 1202 	mla	r2, r3, r2, r1
   d52dc:	9200      	str	r2, [sp, #0]
   d52de:	fb03 1300 	mla	r3, r3, r0, r1
   d52e2:	4a13      	ldr	r2, [pc, #76]	; (d5330 <_Z22publishStateTransitionv+0x68>)
   d52e4:	2128      	movs	r1, #40	; 0x28
   d52e6:	a804      	add	r0, sp, #16
   d52e8:	f001 faea 	bl	d68c0 <snprintf>
  oldState = state;
   d52ec:	782b      	ldrb	r3, [r5, #0]
   d52ee:	7023      	strb	r3, [r4, #0]
   d52f0:	f001 fa36 	bl	d6760 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d52f4:	b170      	cbz	r0, d5314 <_Z22publishStateTransitionv+0x4c>
    waitUntil(meterParticlePublish);
   d52f6:	f7ff f9bf 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d52fa:	4b0e      	ldr	r3, [pc, #56]	; (d5334 <_Z22publishStateTransitionv+0x6c>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d52fc:	490e      	ldr	r1, [pc, #56]	; (d5338 <_Z22publishStateTransitionv+0x70>)
   d52fe:	781b      	ldrb	r3, [r3, #0]
   d5300:	2200      	movs	r2, #0
   d5302:	f88d 2000 	strb.w	r2, [sp]
   d5306:	a802      	add	r0, sp, #8
   d5308:	aa04      	add	r2, sp, #16
   d530a:	f7fe ff86 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d530e:	a803      	add	r0, sp, #12
   d5310:	f7ff f9ea 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  Serial.println(stateTransitionString);
   d5314:	f002 ffae 	bl	d8274 <_Z16_fetch_usbserialv>
   d5318:	a904      	add	r1, sp, #16
   d531a:	f002 fc5b 	bl	d7bd4 <_ZN5Print7printlnEPKc>
}
   d531e:	b00f      	add	sp, #60	; 0x3c
   d5320:	bd30      	pop	{r4, r5, pc}
   d5322:	bf00      	nop
   d5324:	2003e1c9 	.word	0x2003e1c9
   d5328:	2003e1bc 	.word	0x2003e1bc
   d532c:	2003e02c 	.word	0x2003e02c
   d5330:	000dbb93 	.word	0x000dbb93
   d5334:	2003e1ad 	.word	0x2003e1ad
   d5338:	000dbba1 	.word	0x000dbba1

000d533c <_Z12dailyCleanupv>:
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void dailyCleanup() {                                                 // Function to clean house at the end of the day
   d533c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);        // Load the control Register
   d5340:	2007      	movs	r0, #7
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void dailyCleanup() {                                                 // Function to clean house at the end of the day
   d5342:	b085      	sub	sp, #20
  controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);        // Load the control Register
   d5344:	f7fe ff80 	bl	d4248 <_Z9FRAMread8j>
   d5348:	4c27      	ldr	r4, [pc, #156]	; (d53e8 <_Z12dailyCleanupv+0xac>)
   d534a:	7020      	strb	r0, [r4, #0]

  waitUntil(meterParticlePublish);
   d534c:	f7ff f994 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d5350:	4b26      	ldr	r3, [pc, #152]	; (d53ec <_Z12dailyCleanupv+0xb0>)
  Particle.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d5352:	4a27      	ldr	r2, [pc, #156]	; (d53f0 <_Z12dailyCleanupv+0xb4>)
   d5354:	781b      	ldrb	r3, [r3, #0]
   d5356:	4927      	ldr	r1, [pc, #156]	; (d53f4 <_Z12dailyCleanupv+0xb8>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5358:	2500      	movs	r5, #0
   d535a:	a802      	add	r0, sp, #8
   d535c:	f88d 5000 	strb.w	r5, [sp]
   d5360:	f7fe ff5b 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d5364:	a803      	add	r0, sp, #12
   d5366:	f7ff f9bf 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  verboseMode = false;
   d536a:	4b23      	ldr	r3, [pc, #140]	; (d53f8 <_Z12dailyCleanupv+0xbc>)
   d536c:	701d      	strb	r5, [r3, #0]
  controlRegisterValue = (0b11110111 & controlRegisterValue);         // Turn off verboseMode
   d536e:	7823      	ldrb	r3, [r4, #0]
   d5370:	f023 0308 	bic.w	r3, r3, #8
   d5374:	7023      	strb	r3, [r4, #0]
   d5376:	f001 f9f3 	bl	d6760 <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d537a:	b110      	cbz	r0, d5382 <_Z12dailyCleanupv+0x46>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
   d537c:	4628      	mov	r0, r5
   d537e:	f001 fa0f 	bl	d67a0 <spark_sync_time>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d5382:	f7fe ff5d 	bl	d4240 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5386:	2700      	movs	r7, #0
   d5388:	4606      	mov	r6, r0
   d538a:	f247 582f 	movw	r8, #29999	; 0x752f
   d538e:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5392:	f7fe ff55 	bl	d4240 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5396:	1b80      	subs	r0, r0, r6
   d5398:	eb61 0107 	sbc.w	r1, r1, r7
   d539c:	4589      	cmp	r9, r1
   d539e:	bf08      	it	eq
   d53a0:	4580      	cmpeq	r8, r0
   d53a2:	d305      	bcc.n	d53b0 <_Z12dailyCleanupv+0x74>

  Particle.syncTime();                                                // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
   d53a4:	f7fe ff2c 	bl	d4200 <_ZN10CloudClass12syncTimeDoneEv.isra.38>
   d53a8:	b910      	cbnz	r0, d53b0 <_Z12dailyCleanupv+0x74>
            spark_process();
   d53aa:	f001 f9c1 	bl	d6730 <spark_process>
   d53ae:	e7f0      	b.n	d5392 <_Z12dailyCleanupv+0x56>
   d53b0:	f7fe ff26 	bl	d4200 <_ZN10CloudClass12syncTimeDoneEv.isra.38>

  if (solarPowerMode || stateOfCharge <= 70) {                        // If the battery is being discharged
   d53b4:	4b11      	ldr	r3, [pc, #68]	; (d53fc <_Z12dailyCleanupv+0xc0>)
   d53b6:	781b      	ldrb	r3, [r3, #0]
   d53b8:	b91b      	cbnz	r3, d53c2 <_Z12dailyCleanupv+0x86>
   d53ba:	4b11      	ldr	r3, [pc, #68]	; (d5400 <_Z12dailyCleanupv+0xc4>)
   d53bc:	681b      	ldr	r3, [r3, #0]
   d53be:	2b46      	cmp	r3, #70	; 0x46
   d53c0:	dc0a      	bgt.n	d53d8 <_Z12dailyCleanupv+0x9c>
    controlRegisterValue = (0b00000001 | controlRegisterValue);       // If so, put the device in lowPowerMode
   d53c2:	7823      	ldrb	r3, [r4, #0]
    lowPowerMode = true;
   d53c4:	4a0f      	ldr	r2, [pc, #60]	; (d5404 <_Z12dailyCleanupv+0xc8>)
   d53c6:	2101      	movs	r1, #1
    controlRegisterValue = (0b11101111 & controlRegisterValue);       // Turn off connected mode 1 = connected and 0 = disconnected
   d53c8:	f023 0310 	bic.w	r3, r3, #16
   d53cc:	430b      	orrs	r3, r1
   d53ce:	7023      	strb	r3, [r4, #0]
    connectionMode = false;
   d53d0:	4b0d      	ldr	r3, [pc, #52]	; (d5408 <_Z12dailyCleanupv+0xcc>)
  Particle.syncTime();                                                // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete

  if (solarPowerMode || stateOfCharge <= 70) {                        // If the battery is being discharged
    controlRegisterValue = (0b00000001 | controlRegisterValue);       // If so, put the device in lowPowerMode
    lowPowerMode = true;
   d53d2:	7011      	strb	r1, [r2, #0]
    controlRegisterValue = (0b11101111 & controlRegisterValue);       // Turn off connected mode 1 = connected and 0 = disconnected
    connectionMode = false;
   d53d4:	2200      	movs	r2, #0
   d53d6:	701a      	strb	r2, [r3, #0]
  }
  FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);         // Write it to the register
   d53d8:	7821      	ldrb	r1, [r4, #0]
   d53da:	2007      	movs	r0, #7
   d53dc:	f7fe ff3a 	bl	d4254 <_Z10FRAMwrite8jh>
}
   d53e0:	b005      	add	sp, #20
   d53e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d53e6:	bf00      	nop
   d53e8:	2003e1f1 	.word	0x2003e1f1
   d53ec:	2003e1ad 	.word	0x2003e1ad
   d53f0:	000dbbb2 	.word	0x000dbbb2
   d53f4:	000dbbba 	.word	0x000dbbba
   d53f8:	2003e20c 	.word	0x2003e20c
   d53fc:	2003e1cc 	.word	0x2003e1cc
   d5400:	2003e1d8 	.word	0x2003e1d8
   d5404:	2003e202 	.word	0x2003e202
   d5408:	2003e265 	.word	0x2003e265

000d540c <loop>:

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
}

void loop()
{
   d540c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(state) {
   d540e:	4ca5      	ldr	r4, [pc, #660]	; (d56a4 <loop+0x298>)
   d5410:	7823      	ldrb	r3, [r4, #0]
   d5412:	3b01      	subs	r3, #1

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
}

void loop()
{
   d5414:	b089      	sub	sp, #36	; 0x24
  switch(state) {
   d5416:	2b05      	cmp	r3, #5
   d5418:	f200 81f0 	bhi.w	d57fc <loop+0x3f0>
   d541c:	e8df f013 	tbh	[pc, r3, lsl #1]
   d5420:	0006017a 	.word	0x0006017a
   d5424:	0099005e 	.word	0x0099005e
   d5428:	010b00ea 	.word	0x010b00ea
  case IDLE_STATE:                                                    // Where we spend most time - note, the order of these conditionals is important
    if (verboseMode && state != oldState) publishStateTransition();
   d542c:	4b9e      	ldr	r3, [pc, #632]	; (d56a8 <loop+0x29c>)
   d542e:	781a      	ldrb	r2, [r3, #0]
   d5430:	461d      	mov	r5, r3
   d5432:	b12a      	cbz	r2, d5440 <loop+0x34>
   d5434:	4b9d      	ldr	r3, [pc, #628]	; (d56ac <loop+0x2a0>)
   d5436:	781b      	ldrb	r3, [r3, #0]
   d5438:	2b02      	cmp	r3, #2
   d543a:	d001      	beq.n	d5440 <loop+0x34>
   d543c:	f7ff ff44 	bl	d52c8 <_Z22publishStateTransitionv>
    if (watchdogFlag) {
   d5440:	4b9b      	ldr	r3, [pc, #620]	; (d56b0 <loop+0x2a4>)
   d5442:	781b      	ldrb	r3, [r3, #0]
   d5444:	b143      	cbz	r3, d5458 <loop+0x4c>
      petWatchdog();                                                  // Watchdog flag is raised - time to pet the watchdog
   d5446:	f7ff f849 	bl	d44dc <_Z11petWatchdogv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d544a:	f001 f989 	bl	d6760 <spark_cloud_flag_connected>
      if (Particle.connected() && verboseMode) {
   d544e:	b118      	cbz	r0, d5458 <loop+0x4c>
   d5450:	782b      	ldrb	r3, [r5, #0]
   d5452:	2b00      	cmp	r3, #0
   d5454:	f040 81da 	bne.w	d580c <loop+0x400>
        waitUntil(meterParticlePublish);
        Particle.publish("Watchdog","Petted",PRIVATE);
      }
    }
    if (sensorDetect) recordCount();                                  // The ISR had raised the sensor flag
   d5458:	4b96      	ldr	r3, [pc, #600]	; (d56b4 <loop+0x2a8>)
   d545a:	781b      	ldrb	r3, [r3, #0]
   d545c:	b10b      	cbz	r3, d5462 <loop+0x56>
   d545e:	f7ff f9eb 	bl	d4838 <_Z11recordCountv>
    if (hourlyPersonCountSent) {                                      // Cleared here as there could be counts coming in while "in Flight"
   d5462:	4e95      	ldr	r6, [pc, #596]	; (d56b8 <loop+0x2ac>)
   d5464:	4d95      	ldr	r5, [pc, #596]	; (d56bc <loop+0x2b0>)
   d5466:	6831      	ldr	r1, [r6, #0]
   d5468:	b1a9      	cbz	r1, d5496 <loop+0x8a>
      hourlyPersonCount -= hourlyPersonCountSent;                     // Confirmed that count was recevied - clearing
   d546a:	4a95      	ldr	r2, [pc, #596]	; (d56c0 <loop+0x2b4>)
   d546c:	6813      	ldr	r3, [r2, #0]
   d546e:	1a59      	subs	r1, r3, r1
   d5470:	6011      	str	r1, [r2, #0]
      FRAMwrite16(FRAM::currentHourlyCountAddr, static_cast<uint16_t>(hourlyPersonCount));  // Load Hourly Count to memory
   d5472:	2008      	movs	r0, #8
   d5474:	b289      	uxth	r1, r1
   d5476:	f7fe ff07 	bl	d4288 <_Z11FRAMwrite16ji>
      hourlyPersonCountSent = 0;                                      // Zero out the counts until next reporting period
      maxMin = 0;
   d547a:	4b92      	ldr	r3, [pc, #584]	; (d56c4 <loop+0x2b8>)
    }
    if (sensorDetect) recordCount();                                  // The ISR had raised the sensor flag
    if (hourlyPersonCountSent) {                                      // Cleared here as there could be counts coming in while "in Flight"
      hourlyPersonCount -= hourlyPersonCountSent;                     // Confirmed that count was recevied - clearing
      FRAMwrite16(FRAM::currentHourlyCountAddr, static_cast<uint16_t>(hourlyPersonCount));  // Load Hourly Count to memory
      hourlyPersonCountSent = 0;                                      // Zero out the counts until next reporting period
   d547c:	2100      	movs	r1, #0
      maxMin = 0;
   d547e:	6019      	str	r1, [r3, #0]
      alerts = 0;
   d5480:	4b91      	ldr	r3, [pc, #580]	; (d56c8 <loop+0x2bc>)
    }
    if (sensorDetect) recordCount();                                  // The ISR had raised the sensor flag
    if (hourlyPersonCountSent) {                                      // Cleared here as there could be counts coming in while "in Flight"
      hourlyPersonCount -= hourlyPersonCountSent;                     // Confirmed that count was recevied - clearing
      FRAMwrite16(FRAM::currentHourlyCountAddr, static_cast<uint16_t>(hourlyPersonCount));  // Load Hourly Count to memory
      hourlyPersonCountSent = 0;                                      // Zero out the counts until next reporting period
   d5482:	6031      	str	r1, [r6, #0]
      maxMin = 0;
      alerts = 0;
      FRAMwrite8(FRAM::alertsCountAddr,0);
   d5484:	2012      	movs	r0, #18
    if (hourlyPersonCountSent) {                                      // Cleared here as there could be counts coming in while "in Flight"
      hourlyPersonCount -= hourlyPersonCountSent;                     // Confirmed that count was recevied - clearing
      FRAMwrite16(FRAM::currentHourlyCountAddr, static_cast<uint16_t>(hourlyPersonCount));  // Load Hourly Count to memory
      hourlyPersonCountSent = 0;                                      // Zero out the counts until next reporting period
      maxMin = 0;
      alerts = 0;
   d5486:	6019      	str	r1, [r3, #0]
      FRAMwrite8(FRAM::alertsCountAddr,0);
   d5488:	f7fe fee4 	bl	d4254 <_Z10FRAMwrite8jh>
      if (currentHourlyPeriod == 23) resetEverything();                // We have reported for the previous day - reset for the next - only needed if no sleep
   d548c:	782b      	ldrb	r3, [r5, #0]
   d548e:	2b17      	cmp	r3, #23
   d5490:	d101      	bne.n	d5496 <loop+0x8a>
   d5492:	f7ff f8b1 	bl	d45f8 <_Z15resetEverythingv>
    }
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;  // When in low power mode, we can nap between taps
   d5496:	4b8d      	ldr	r3, [pc, #564]	; (d56cc <loop+0x2c0>)
   d5498:	781b      	ldrb	r3, [r3, #0]
   d549a:	b14b      	cbz	r3, d54b0 <loop+0xa4>
   d549c:	f000 ff62 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
   d54a0:	4b8b      	ldr	r3, [pc, #556]	; (d56d0 <loop+0x2c4>)
   d54a2:	681b      	ldr	r3, [r3, #0]
   d54a4:	1ac0      	subs	r0, r0, r3
   d54a6:	4b8b      	ldr	r3, [pc, #556]	; (d56d4 <loop+0x2c8>)
   d54a8:	681b      	ldr	r3, [r3, #0]
   d54aa:	4298      	cmp	r0, r3
   d54ac:	f200 81be 	bhi.w	d582c <loop+0x420>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;  // We want to report on the hour but not after bedtime
   d54b0:	f002 fdd8 	bl	d8064 <_ZN9TimeClass4hourEv>
   d54b4:	782b      	ldrb	r3, [r5, #0]
   d54b6:	4298      	cmp	r0, r3
   d54b8:	bf1c      	itt	ne
   d54ba:	2305      	movne	r3, #5
   d54bc:	7023      	strbne	r3, [r4, #0]
    if ((Time.hour() > closeTime || Time.hour() < openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d54be:	f002 fdd1 	bl	d8064 <_ZN9TimeClass4hourEv>
   d54c2:	4b85      	ldr	r3, [pc, #532]	; (d56d8 <loop+0x2cc>)
   d54c4:	681b      	ldr	r3, [r3, #0]
   d54c6:	4298      	cmp	r0, r3
   d54c8:	f300 81b3 	bgt.w	d5832 <loop+0x426>
   d54cc:	f002 fdca 	bl	d8064 <_ZN9TimeClass4hourEv>
   d54d0:	4b82      	ldr	r3, [pc, #520]	; (d56dc <loop+0x2d0>)
   d54d2:	681b      	ldr	r3, [r3, #0]
   d54d4:	4298      	cmp	r0, r3
   d54d6:	f2c0 81ac 	blt.w	d5832 <loop+0x426>
   d54da:	e18f      	b.n	d57fc <loop+0x3f0>
    break;

  case SLEEPING_STATE: {                                              // This state is triggered once the park closes and runs until it opens
    if (verboseMode && state != oldState) publishStateTransition();
   d54dc:	4b72      	ldr	r3, [pc, #456]	; (d56a8 <loop+0x29c>)
   d54de:	781b      	ldrb	r3, [r3, #0]
   d54e0:	b12b      	cbz	r3, d54ee <loop+0xe2>
   d54e2:	4b72      	ldr	r3, [pc, #456]	; (d56ac <loop+0x2a0>)
   d54e4:	781b      	ldrb	r3, [r3, #0]
   d54e6:	2b03      	cmp	r3, #3
   d54e8:	d001      	beq.n	d54ee <loop+0xe2>
   d54ea:	f7ff feed 	bl	d52c8 <_Z22publishStateTransitionv>
    detachInterrupt(intPin);                                          // Done sensing for the day
   d54ee:	200c      	movs	r0, #12
   d54f0:	f001 ff88 	bl	d7404 <_Z15detachInterruptt>

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d54f4:	4b7a      	ldr	r3, [pc, #488]	; (d56e0 <loop+0x2d4>)
   d54f6:	681b      	ldr	r3, [r3, #0]
    nrf_gpio_pin_set(nrf_pin);
   d54f8:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   d54fc:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
   d5500:	f003 031f 	and.w	r3, r3, #31
   d5504:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d5508:	f7fe fe4e 	bl	d41a8 <nrf_gpio_pin_set>
    pinSetFast(disableModule);                                        // Turn off the pressure module for the hour
    if (hourlyPersonCount) {                                          // If this number is not zero then we need to send this last count
   d550c:	4b6c      	ldr	r3, [pc, #432]	; (d56c0 <loop+0x2b4>)
   d550e:	681b      	ldr	r3, [r3, #0]
   d5510:	b10b      	cbz	r3, d5516 <loop+0x10a>
      state = REPORTING_STATE;
   d5512:	2305      	movs	r3, #5
   d5514:	e0c3      	b.n	d569e <loop+0x292>
      break;
    }
    if (connectionMode) disconnectFromParticle();                     // Disconnect cleanly from Particle
   d5516:	4b73      	ldr	r3, [pc, #460]	; (d56e4 <loop+0x2d8>)
   d5518:	781b      	ldrb	r3, [r3, #0]
   d551a:	b10b      	cbz	r3, d5520 <loop+0x114>
   d551c:	f7ff f846 	bl	d45ac <_Z22disconnectFromParticlev>
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d5520:	2100      	movs	r1, #0
   d5522:	2007      	movs	r0, #7
   d5524:	f002 ff6b 	bl	d83fe <digitalWrite>
    //digitalWrite(tmp36Shutdwn, LOW);                                  // Turns off the temp sensor
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d5528:	f002 fd95 	bl	d8056 <_ZN9TimeClass3nowEv>
    System.sleep(SLEEP_MODE_DEEP,wakeInSeconds);                      // Very deep sleep till the next hour - then resets
   d552c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d5530:	fb90 f2f3 	sdiv	r2, r0, r3
   d5534:	fb02 0013 	mls	r0, r2, r3, r0
   d5538:	1a1a      	subs	r2, r3, r0
   d553a:	4b6b      	ldr	r3, [pc, #428]	; (d56e8 <loop+0x2dc>)
   d553c:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
   d5540:	681b      	ldr	r3, [r3, #0]
   d5542:	bfa8      	it	ge
   d5544:	f44f 6261 	movge.w	r2, #3600	; 0xe10
   d5548:	2101      	movs	r1, #1
   d554a:	a806      	add	r0, sp, #24
   d554c:	f002 fc7a 	bl	d7e44 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    } break;
   d5550:	e154      	b.n	d57fc <loop+0x3f0>

  case NAPPING_STATE: {  // This state puts the device in low power mode quickly
    if (verboseMode && state != oldState) publishStateTransition();
   d5552:	4b55      	ldr	r3, [pc, #340]	; (d56a8 <loop+0x29c>)
   d5554:	781b      	ldrb	r3, [r3, #0]
   d5556:	b12b      	cbz	r3, d5564 <loop+0x158>
   d5558:	4b54      	ldr	r3, [pc, #336]	; (d56ac <loop+0x2a0>)
   d555a:	781b      	ldrb	r3, [r3, #0]
   d555c:	2b04      	cmp	r3, #4
   d555e:	d001      	beq.n	d5564 <loop+0x158>
   d5560:	f7ff feb2 	bl	d52c8 <_Z22publishStateTransitionv>
    if (sensorDetect) break;                                   // Don't nap until we are done with event
   d5564:	4e53      	ldr	r6, [pc, #332]	; (d56b4 <loop+0x2a8>)
   d5566:	7833      	ldrb	r3, [r6, #0]
   d5568:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   d556c:	2b00      	cmp	r3, #0
   d556e:	f040 8145 	bne.w	d57fc <loop+0x3f0>
    if ((0b00010000 & controlRegisterValue)) {                        // If we are in connected mode
   d5572:	4d5e      	ldr	r5, [pc, #376]	; (d56ec <loop+0x2e0>)
   d5574:	782b      	ldrb	r3, [r5, #0]
   d5576:	06da      	lsls	r2, r3, #27
   d5578:	d50c      	bpl.n	d5594 <loop+0x188>
      disconnectFromParticle();                                       // Disconnect from Particle
   d557a:	f7ff f817 	bl	d45ac <_Z22disconnectFromParticlev>
      controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);    // Get the control register (general approach)
   d557e:	2007      	movs	r0, #7
   d5580:	f7fe fe62 	bl	d4248 <_Z9FRAMread8j>
      controlRegisterValue = (0b11101111 & controlRegisterValue);     // Turn off connected mode 1 = connected and 0 = disconnected
      connectionMode = false;
   d5584:	4b57      	ldr	r3, [pc, #348]	; (d56e4 <loop+0x2d8>)
    if (verboseMode && state != oldState) publishStateTransition();
    if (sensorDetect) break;                                   // Don't nap until we are done with event
    if ((0b00010000 & controlRegisterValue)) {                        // If we are in connected mode
      disconnectFromParticle();                                       // Disconnect from Particle
      controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);    // Get the control register (general approach)
      controlRegisterValue = (0b11101111 & controlRegisterValue);     // Turn off connected mode 1 = connected and 0 = disconnected
   d5586:	f000 01ef 	and.w	r1, r0, #239	; 0xef
      connectionMode = false;
      FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);     // Write to the control register
   d558a:	2007      	movs	r0, #7
    if (verboseMode && state != oldState) publishStateTransition();
    if (sensorDetect) break;                                   // Don't nap until we are done with event
    if ((0b00010000 & controlRegisterValue)) {                        // If we are in connected mode
      disconnectFromParticle();                                       // Disconnect from Particle
      controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);    // Get the control register (general approach)
      controlRegisterValue = (0b11101111 & controlRegisterValue);     // Turn off connected mode 1 = connected and 0 = disconnected
   d558c:	7029      	strb	r1, [r5, #0]
      connectionMode = false;
   d558e:	701f      	strb	r7, [r3, #0]
      FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);     // Write to the control register
   d5590:	f7fe fe60 	bl	d4254 <_Z10FRAMwrite8jh>
    }
    stayAwake = debounce;                                             // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour                                                 
   d5594:	4b56      	ldr	r3, [pc, #344]	; (d56f0 <loop+0x2e4>)
   d5596:	881a      	ldrh	r2, [r3, #0]
   d5598:	4b4e      	ldr	r3, [pc, #312]	; (d56d4 <loop+0x2c8>)
   d559a:	601a      	str	r2, [r3, #0]
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d559c:	f002 fd5b 	bl	d8056 <_ZN9TimeClass3nowEv>
   d55a0:	4607      	mov	r7, r0
    petWatchdog();                                                    // Reset the watchdog
   d55a2:	f7fe ff9b 	bl	d44dc <_Z11petWatchdogv>
   d55a6:	4b50      	ldr	r3, [pc, #320]	; (d56e8 <loop+0x2dc>)
   d55a8:	220c      	movs	r2, #12
   d55aa:	681b      	ldr	r3, [r3, #0]
   d55ac:	f8ad 2016 	strh.w	r2, [sp, #22]
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
   d55b0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   d55b4:	9302      	str	r3, [sp, #8]
   d55b6:	fb97 f3f2 	sdiv	r3, r7, r2
   d55ba:	fb02 7013 	mls	r0, r2, r3, r7
   d55be:	1a10      	subs	r0, r2, r0
   d55c0:	4290      	cmp	r0, r2
   d55c2:	bfa8      	it	ge
   d55c4:	4610      	movge	r0, r2
   d55c6:	2501      	movs	r5, #1
   d55c8:	9001      	str	r0, [sp, #4]
   d55ca:	f10d 0315 	add.w	r3, sp, #21
   d55ce:	9500      	str	r5, [sp, #0]
   d55d0:	462a      	mov	r2, r5
   d55d2:	f10d 0116 	add.w	r1, sp, #22
   d55d6:	a806      	add	r0, sp, #24
   d55d8:	f88d 5015 	strb.w	r5, [sp, #21]
   d55dc:	f002 fc62 	bl	d7ea4 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.sleep(intPin, RISING, wakeInSeconds);                      // Sensor will wake us with an interrupt or timeout at the hour
    if (sensorDetect) {
   d55e0:	7833      	ldrb	r3, [r6, #0]
   d55e2:	b12b      	cbz	r3, d55f0 <loop+0x1e4>
       awokeFromNap=true;                                             // Since millis() stops when sleeping - need this to debounce
   d55e4:	4b43      	ldr	r3, [pc, #268]	; (d56f4 <loop+0x2e8>)
   d55e6:	701d      	strb	r5, [r3, #0]
   d55e8:	f000 febc 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
       stayAwakeTimeStamp = millis();
   d55ec:	4b38      	ldr	r3, [pc, #224]	; (d56d0 <loop+0x2c4>)
   d55ee:	6018      	str	r0, [r3, #0]
    }
    state = IDLE_STATE;                                               // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
   d55f0:	2302      	movs	r3, #2
   d55f2:	e054      	b.n	d569e <loop+0x292>
    } break;

  case REPORTING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
   d55f4:	4b2c      	ldr	r3, [pc, #176]	; (d56a8 <loop+0x29c>)
   d55f6:	781b      	ldrb	r3, [r3, #0]
   d55f8:	b12b      	cbz	r3, d5606 <loop+0x1fa>
   d55fa:	4b2c      	ldr	r3, [pc, #176]	; (d56ac <loop+0x2a0>)
   d55fc:	781b      	ldrb	r3, [r3, #0]
   d55fe:	2b05      	cmp	r3, #5
   d5600:	d001      	beq.n	d5606 <loop+0x1fa>
   d5602:	f7ff fe61 	bl	d52c8 <_Z22publishStateTransitionv>
    if (!(0b00010000 & controlRegisterValue)) connectToParticle();    // Only attempt to connect if not already New process to get connected
   d5606:	4b39      	ldr	r3, [pc, #228]	; (d56ec <loop+0x2e0>)
   d5608:	781b      	ldrb	r3, [r3, #0]
   d560a:	06db      	lsls	r3, r3, #27
   d560c:	d401      	bmi.n	d5612 <loop+0x206>
   d560e:	f7ff fa47 	bl	d4aa0 <_Z17connectToParticlev>
   d5612:	f001 f8a5 	bl	d6760 <spark_cloud_flag_connected>
    //System.disableUpdates();                                          // Don't want an update while we are reporting
    if (Particle.connected()) {
   d5616:	2800      	cmp	r0, #0
   d5618:	d040      	beq.n	d569c <loop+0x290>
      if (Time.hour() == closeTime) dailyCleanup();                   // Once a day, clean house
   d561a:	f002 fd23 	bl	d8064 <_ZN9TimeClass4hourEv>
   d561e:	4b2e      	ldr	r3, [pc, #184]	; (d56d8 <loop+0x2cc>)
   d5620:	681b      	ldr	r3, [r3, #0]
   d5622:	4298      	cmp	r0, r3
   d5624:	d101      	bne.n	d562a <loop+0x21e>
   d5626:	f7ff fe89 	bl	d533c <_Z12dailyCleanupv>
      takeMeasurements();                                             // Update Temp, Battery and Signal Strength values
   d562a:	f7fe ff3b 	bl	d44a4 <_Z16takeMeasurementsv>
      sendEvent();                                                    // Send data to Ubidots
   d562e:	f7ff fa89 	bl	d4b44 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d5632:	2306      	movs	r3, #6
   d5634:	e033      	b.n	d569e <loop+0x292>
    }
    else state = ERROR_STATE;
    break;

  case RESP_WAIT_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
   d5636:	4b1c      	ldr	r3, [pc, #112]	; (d56a8 <loop+0x29c>)
   d5638:	781b      	ldrb	r3, [r3, #0]
   d563a:	b12b      	cbz	r3, d5648 <loop+0x23c>
   d563c:	4b1b      	ldr	r3, [pc, #108]	; (d56ac <loop+0x2a0>)
   d563e:	781b      	ldrb	r3, [r3, #0]
   d5640:	2b06      	cmp	r3, #6
   d5642:	d001      	beq.n	d5648 <loop+0x23c>
   d5644:	f7ff fe40 	bl	d52c8 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d5648:	4b2b      	ldr	r3, [pc, #172]	; (d56f8 <loop+0x2ec>)
   d564a:	781b      	ldrb	r3, [r3, #0]
   d564c:	b94b      	cbnz	r3, d5662 <loop+0x256>
    {
      state = IDLE_STATE;
   d564e:	2302      	movs	r3, #2
   d5650:	7023      	strb	r3, [r4, #0]
      //System.enableUpdates();                                         // Allowing updates as we are heading off to the idle state
      stayAwake = stayAwakeLong;                                      // Keeps Electron awake after reboot - helps with recovery
   d5652:	4b20      	ldr	r3, [pc, #128]	; (d56d4 <loop+0x2c8>)
   d5654:	4a29      	ldr	r2, [pc, #164]	; (d56fc <loop+0x2f0>)
   d5656:	601a      	str	r2, [r3, #0]
   d5658:	f000 fe84 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d565c:	4b1c      	ldr	r3, [pc, #112]	; (d56d0 <loop+0x2c4>)
   d565e:	6018      	str	r0, [r3, #0]
   d5660:	e0cc      	b.n	d57fc <loop+0x3f0>
   d5662:	f000 fe7f 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d5666:	4b26      	ldr	r3, [pc, #152]	; (d5700 <loop+0x2f4>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	1ac0      	subs	r0, r0, r3
   d566c:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d5670:	4298      	cmp	r0, r3
   d5672:	f240 80c3 	bls.w	d57fc <loop+0x3f0>
   d5676:	f000 fe75 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d567a:	4b22      	ldr	r3, [pc, #136]	; (d5704 <loop+0x2f8>)
   d567c:	6018      	str	r0, [r3, #0]
      waitUntil(meterParticlePublish);
   d567e:	f7fe fffb 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d5682:	4b21      	ldr	r3, [pc, #132]	; (d5708 <loop+0x2fc>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5684:	4921      	ldr	r1, [pc, #132]	; (d570c <loop+0x300>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5686:	781b      	ldrb	r3, [r3, #0]
   d5688:	2200      	movs	r2, #0
   d568a:	f88d 2000 	strb.w	r2, [sp]
   d568e:	a806      	add	r0, sp, #24
   d5690:	4a1f      	ldr	r2, [pc, #124]	; (d5710 <loop+0x304>)
   d5692:	f7fe fdc2 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d5696:	a807      	add	r0, sp, #28
   d5698:	f7ff f826 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
   d569c:	2301      	movs	r3, #1
   d569e:	7023      	strb	r3, [r4, #0]
   d56a0:	e0ac      	b.n	d57fc <loop+0x3f0>
   d56a2:	bf00      	nop
   d56a4:	2003e1c9 	.word	0x2003e1c9
   d56a8:	2003e20c 	.word	0x2003e20c
   d56ac:	2003e1bc 	.word	0x2003e1bc
   d56b0:	2003e1f2 	.word	0x2003e1f2
   d56b4:	2003e19c 	.word	0x2003e19c
   d56b8:	2003e1c4 	.word	0x2003e1c4
   d56bc:	2003e1f0 	.word	0x2003e1f0
   d56c0:	2003e1d0 	.word	0x2003e1d0
   d56c4:	2003e260 	.word	0x2003e260
   d56c8:	2003e1d4 	.word	0x2003e1d4
   d56cc:	2003e202 	.word	0x2003e202
   d56d0:	2003e210 	.word	0x2003e210
   d56d4:	2003e1f4 	.word	0x2003e1f4
   d56d8:	2003e208 	.word	0x2003e208
   d56dc:	2003e25c 	.word	0x2003e25c
   d56e0:	2003e204 	.word	0x2003e204
   d56e4:	2003e265 	.word	0x2003e265
   d56e8:	2003e1f8 	.word	0x2003e1f8
   d56ec:	2003e1f1 	.word	0x2003e1f1
   d56f0:	2003e20e 	.word	0x2003e20e
   d56f4:	2003e1c8 	.word	0x2003e1c8
   d56f8:	2003e264 	.word	0x2003e264
   d56fc:	00015f90 	.word	0x00015f90
   d5700:	2003e1a0 	.word	0x2003e1a0
   d5704:	2003e258 	.word	0x2003e258
   d5708:	2003e1ad 	.word	0x2003e1ad
   d570c:	000dbbc8 	.word	0x000dbbc8
   d5710:	000db95b 	.word	0x000db95b
    }
    break;

  case ERROR_STATE:                                                   // To be enhanced - where we deal with errors
    if (verboseMode && state != oldState) publishStateTransition();
   d5714:	4b48      	ldr	r3, [pc, #288]	; (d5838 <loop+0x42c>)
   d5716:	781b      	ldrb	r3, [r3, #0]
   d5718:	b12b      	cbz	r3, d5726 <loop+0x31a>
   d571a:	4b48      	ldr	r3, [pc, #288]	; (d583c <loop+0x430>)
   d571c:	781b      	ldrb	r3, [r3, #0]
   d571e:	2b01      	cmp	r3, #1
   d5720:	d001      	beq.n	d5726 <loop+0x31a>
   d5722:	f7ff fdd1 	bl	d52c8 <_Z22publishStateTransitionv>
   d5726:	f000 fe1d 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d572a:	4b45      	ldr	r3, [pc, #276]	; (d5840 <loop+0x434>)
   d572c:	681b      	ldr	r3, [r3, #0]
   d572e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d5732:	3330      	adds	r3, #48	; 0x30
   d5734:	4298      	cmp	r0, r3
   d5736:	d961      	bls.n	d57fc <loop+0x3f0>
    {
      if (resetCount <= 3) {                                          // First try simple reset
   d5738:	4b42      	ldr	r3, [pc, #264]	; (d5844 <loop+0x438>)
   d573a:	681b      	ldr	r3, [r3, #0]
   d573c:	2b03      	cmp	r3, #3
   d573e:	dc18      	bgt.n	d5772 <loop+0x366>
        waitUntil(meterParticlePublish);
   d5740:	f7fe ff9a 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d5744:	f001 f80c 	bl	d6760 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d5748:	b160      	cbz	r0, d5764 <loop+0x358>
   d574a:	4b3f      	ldr	r3, [pc, #252]	; (d5848 <loop+0x43c>)
   d574c:	493f      	ldr	r1, [pc, #252]	; (d584c <loop+0x440>)
   d574e:	781b      	ldrb	r3, [r3, #0]
   d5750:	2200      	movs	r2, #0
   d5752:	f88d 2000 	strb.w	r2, [sp]
   d5756:	a806      	add	r0, sp, #24
   d5758:	4a3d      	ldr	r2, [pc, #244]	; (d5850 <loop+0x444>)
   d575a:	f7fe fd5e 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d575e:	a807      	add	r0, sp, #28
   d5760:	f7fe ffc2 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d5764:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5768:	f001 f8c2 	bl	d68f0 <delay>
        System.reset();
   d576c:	f002 fb66 	bl	d7e3c <_ZN11SystemClass5resetEv>
   d5770:	e044      	b.n	d57fc <loop+0x3f0>
      }
      else if (Time.now() - FRAMread32(FRAM::lastHookResponseAddr) > 7200L) { //It has been more than two hours since a sucessful hook response
   d5772:	f002 fc70 	bl	d8056 <_ZN9TimeClass3nowEv>
   d5776:	4604      	mov	r4, r0
   d5778:	2014      	movs	r0, #20
   d577a:	f7fe fdcb 	bl	d4314 <_Z10FRAMread32m>
   d577e:	1a20      	subs	r0, r4, r0
   d5780:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d5784:	d91e      	bls.n	d57c4 <loop+0x3b8>
        waitUntil(meterParticlePublish);
   d5786:	f7fe ff77 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d578a:	f000 ffe9 	bl	d6760 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d578e:	b160      	cbz	r0, d57aa <loop+0x39e>
   d5790:	4b2d      	ldr	r3, [pc, #180]	; (d5848 <loop+0x43c>)
   d5792:	492e      	ldr	r1, [pc, #184]	; (d584c <loop+0x440>)
   d5794:	781b      	ldrb	r3, [r3, #0]
   d5796:	2200      	movs	r2, #0
   d5798:	f88d 2000 	strb.w	r2, [sp]
   d579c:	a806      	add	r0, sp, #24
   d579e:	4a2d      	ldr	r2, [pc, #180]	; (d5854 <loop+0x448>)
   d57a0:	f7fe fd3b 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d57a4:	a807      	add	r0, sp, #28
   d57a6:	f7fe ff9f 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d57aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d57ae:	f001 f89f 	bl	d68f0 <delay>
        FRAMwrite8(FRAM::resetCountAddr,0);                           // Zero the ResetCount
   d57b2:	2100      	movs	r1, #0
   d57b4:	2003      	movs	r0, #3
   d57b6:	f7fe fd4d 	bl	d4254 <_Z10FRAMwrite8jh>
        digitalWrite(hardResetPin,HIGH);                              // This will cut all power to the Electron AND the carrier board
   d57ba:	2101      	movs	r1, #1
   d57bc:	2006      	movs	r0, #6
   d57be:	f002 fe1e 	bl	d83fe <digitalWrite>
   d57c2:	e01b      	b.n	d57fc <loop+0x3f0>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        waitUntil(meterParticlePublish);
   d57c4:	f7fe ff58 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d57c8:	f000 ffca 	bl	d6760 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d57cc:	b160      	cbz	r0, d57e8 <loop+0x3dc>
   d57ce:	4b1e      	ldr	r3, [pc, #120]	; (d5848 <loop+0x43c>)
   d57d0:	491e      	ldr	r1, [pc, #120]	; (d584c <loop+0x440>)
   d57d2:	781b      	ldrb	r3, [r3, #0]
   d57d4:	2200      	movs	r2, #0
   d57d6:	f88d 2000 	strb.w	r2, [sp]
   d57da:	a806      	add	r0, sp, #24
   d57dc:	4a1e      	ldr	r2, [pc, #120]	; (d5858 <loop+0x44c>)
   d57de:	f7fe fd1c 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d57e2:	a807      	add	r0, sp, #28
   d57e4:	f7fe ff80 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d57e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d57ec:	f001 f880 	bl	d68f0 <delay>
        FRAMwrite8(FRAM::resetCountAddr,0);                           // Zero the ResetCount
   d57f0:	2100      	movs	r1, #0
   d57f2:	2003      	movs	r0, #3
   d57f4:	f7fe fd2e 	bl	d4254 <_Z10FRAMwrite8jh>
        fullModemReset();                                             // Full Modem reset and reboots
   d57f8:	f7fe ff4a 	bl	d4690 <_Z14fullModemResetv>
      }
    }
    break;
  }
  connectionEvents.loop();
   d57fc:	4817      	ldr	r0, [pc, #92]	; (d585c <loop+0x450>)
   d57fe:	f000 fc47 	bl	d6090 <_ZN16ConnectionEvents4loopEv>
  batteryCheck.loop();
   d5802:	4817      	ldr	r0, [pc, #92]	; (d5860 <loop+0x454>)
   d5804:	f000 fbbc 	bl	d5f80 <_ZN12BatteryCheck4loopEv>
}
   d5808:	b009      	add	sp, #36	; 0x24
   d580a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  case IDLE_STATE:                                                    // Where we spend most time - note, the order of these conditionals is important
    if (verboseMode && state != oldState) publishStateTransition();
    if (watchdogFlag) {
      petWatchdog();                                                  // Watchdog flag is raised - time to pet the watchdog
      if (Particle.connected() && verboseMode) {
        waitUntil(meterParticlePublish);
   d580c:	f7fe ff34 	bl	d4678 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.69>
   d5810:	4b0d      	ldr	r3, [pc, #52]	; (d5848 <loop+0x43c>)
        Particle.publish("Watchdog","Petted",PRIVATE);
   d5812:	4914      	ldr	r1, [pc, #80]	; (d5864 <loop+0x458>)
   d5814:	781b      	ldrb	r3, [r3, #0]
   d5816:	2200      	movs	r2, #0
   d5818:	f88d 2000 	strb.w	r2, [sp]
   d581c:	a806      	add	r0, sp, #24
   d581e:	4a12      	ldr	r2, [pc, #72]	; (d5868 <loop+0x45c>)
   d5820:	f7fe fcfb 	bl	d421a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.136>
   d5824:	a807      	add	r0, sp, #28
   d5826:	f7fe ff5f 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d582a:	e615      	b.n	d5458 <loop+0x4c>
      maxMin = 0;
      alerts = 0;
      FRAMwrite8(FRAM::alertsCountAddr,0);
      if (currentHourlyPeriod == 23) resetEverything();                // We have reported for the previous day - reset for the next - only needed if no sleep
    }
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;  // When in low power mode, we can nap between taps
   d582c:	2304      	movs	r3, #4
   d582e:	7023      	strb	r3, [r4, #0]
   d5830:	e63e      	b.n	d54b0 <loop+0xa4>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;  // We want to report on the hour but not after bedtime
    if ((Time.hour() > closeTime || Time.hour() < openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d5832:	2303      	movs	r3, #3
   d5834:	e733      	b.n	d569e <loop+0x292>
   d5836:	bf00      	nop
   d5838:	2003e20c 	.word	0x2003e20c
   d583c:	2003e1bc 	.word	0x2003e1bc
   d5840:	2003e258 	.word	0x2003e258
   d5844:	2003e1dc 	.word	0x2003e1dc
   d5848:	2003e1ad 	.word	0x2003e1ad
   d584c:	000dbaaa 	.word	0x000dbaaa
   d5850:	000dbbe1 	.word	0x000dbbe1
   d5854:	000dbbf5 	.word	0x000dbbf5
   d5858:	000dbc0f 	.word	0x000dbc0f
   d585c:	2003e1e0 	.word	0x2003e1e0
   d5860:	2003e268 	.word	0x2003e268
   d5864:	000dbc35 	.word	0x000dbc35
   d5868:	000dbc2e 	.word	0x000dbc2e

000d586c <_ZN10CloudClass8variableIA9_cIA8_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d586c:	2300      	movs	r3, #0
   d586e:	2204      	movs	r2, #4
   d5870:	f000 bf4e 	b.w	d6710 <spark_variable>

000d5874 <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>:
   d5874:	2300      	movs	r3, #0
   d5876:	2202      	movs	r2, #2
   d5878:	f000 bf4a 	b.w	d6710 <spark_variable>

000d587c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d587c:	4602      	mov	r2, r0
   d587e:	4801      	ldr	r0, [pc, #4]	; (d5884 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d5880:	f001 b9ca 	b.w	d6c18 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5884:	000d6bed 	.word	0x000d6bed

000d5888 <setup>:
int alerts = 0;                                     // Alerts are triggered when MaxMinLimit is exceeded or a reset due to errors
int maxMin = 0;                                     // What is the current maximum count in a minute for this reporting period
int maxMinLimit;                                    // Counts above this amount will be deemed erroroneus

void setup()                                        // Note: Disconnected Setup()
{
   d5888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
       2) Each hour while the device is sleeping
       3) After a reset event
    All three of these have some common code - this will go first then we will set a conditional
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d588c:	2100      	movs	r1, #0
int alerts = 0;                                     // Alerts are triggered when MaxMinLimit is exceeded or a reset due to errors
int maxMin = 0;                                     // What is the current maximum count in a minute for this reporting period
int maxMinLimit;                                    // Counts above this amount will be deemed erroroneus

void setup()                                        // Note: Disconnected Setup()
{
   d588e:	b0ad      	sub	sp, #180	; 0xb4
       2) Each hour while the device is sleeping
       3) After a reset event
    All three of these have some common code - this will go first then we will set a conditional
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d5890:	2008      	movs	r0, #8
   d5892:	f002 fda3 	bl	d83dc <pinMode>
  pinMode(analogIn,INPUT);                          // Not used but don't want it floating
   d5896:	2100      	movs	r1, #0
   d5898:	200d      	movs	r0, #13
   d589a:	f002 fd9f 	bl	d83dc <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d589e:	4d6f      	ldr	r5, [pc, #444]	; (d5a5c <setup+0x1d4>)
   d58a0:	f8df a298 	ldr.w	sl, [pc, #664]	; d5b3c <setup+0x2b4>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d58a4:	2100      	movs	r1, #0
   d58a6:	2004      	movs	r0, #4
   d58a8:	f002 fd98 	bl	d83dc <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d58ac:	2101      	movs	r1, #1
   d58ae:	2007      	movs	r0, #7
   d58b0:	f002 fd94 	bl	d83dc <pinMode>
   d58b4:	682b      	ldr	r3, [r5, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d58b6:	f893 0100 	ldrb.w	r0, [r3, #256]	; 0x100
   d58ba:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
   d58be:	f003 031f 	and.w	r3, r3, #31
   d58c2:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d58c6:	f7fe fc7e 	bl	d41c6 <nrf_gpio_pin_clear>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d58ca:	682b      	ldr	r3, [r5, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d58cc:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
   d58d0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   d58d4:	f003 031f 	and.w	r3, r3, #31
   d58d8:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d58dc:	f7fe fc73 	bl	d41c6 <nrf_gpio_pin_clear>
  pinResetFast(donePin);
  pinResetFast(hardResetPin);
  // Pressure / PIR Module Pin Setup
  pinMode(intPin,INPUT_PULLDOWN);                   // pressure sensor interrupt
   d58e0:	2103      	movs	r1, #3
   d58e2:	200c      	movs	r0, #12
   d58e4:	f002 fd7a 	bl	d83dc <pinMode>
  pinMode(disableModule,OUTPUT);                    // Turns on the module when pulled low
   d58e8:	2101      	movs	r1, #1
   d58ea:	200e      	movs	r0, #14
   d58ec:	f002 fd76 	bl	d83dc <pinMode>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d58f0:	682b      	ldr	r3, [r5, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d58f2:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   d58f6:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
   d58fa:	f003 031f 	and.w	r3, r3, #31
   d58fe:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d5902:	f7fe fc60 	bl	d41c6 <nrf_gpio_pin_clear>
  pinResetFast(disableModule);                      // Turn on the module - send high to switch off board
  pinMode(ledPower,OUTPUT);                         // Turn on the lights
   d5906:	2101      	movs	r1, #1
   d5908:	200b      	movs	r0, #11
   d590a:	f002 fd67 	bl	d83dc <pinMode>

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d590e:	682b      	ldr	r3, [r5, #0]
    nrf_gpio_pin_set(nrf_pin);
   d5910:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
   d5914:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   d5918:	f003 031f 	and.w	r3, r3, #31
   d591c:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d5920:	f7fe fc42 	bl	d41a8 <nrf_gpio_pin_set>
  pinSetFast(ledPower);                             // Turns on the LED on the pressure sensor board

  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d5924:	2101      	movs	r1, #1
   d5926:	2010      	movs	r0, #16
  pinMode(hardResetPin,OUTPUT);                     // For a hard reset active HIGH

  petWatchdog();                                    // Pet the watchdog - not necessary in a power on event but just in case
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d5928:	2400      	movs	r4, #0
  pinMode(disableModule,OUTPUT);                    // Turns on the module when pulled low
  pinResetFast(disableModule);                      // Turn on the module - send high to switch off board
  pinMode(ledPower,OUTPUT);                         // Turn on the lights
  pinSetFast(ledPower);                             // Turns on the LED on the pressure sensor board

  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d592a:	f002 fd57 	bl	d83dc <pinMode>
  pinMode(hardResetPin,OUTPUT);                     // For a hard reset active HIGH
   d592e:	2101      	movs	r1, #1
   d5930:	2006      	movs	r0, #6
   d5932:	f002 fd53 	bl	d83dc <pinMode>

  petWatchdog();                                    // Pet the watchdog - not necessary in a power on event but just in case
   d5936:	f7fe fdd1 	bl	d44dc <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d593a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d593e:	2201      	movs	r2, #1
   d5940:	4947      	ldr	r1, [pc, #284]	; (d5a60 <setup+0x1d8>)
   d5942:	9400      	str	r4, [sp, #0]
   d5944:	2008      	movs	r0, #8
   d5946:	f001 fd33 	bl	d73b0 <_Z15attachInterrupttPFvvE13InterruptModeah>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d594a:	a804      	add	r0, sp, #16
   d594c:	f000 ff10 	bl	d6770 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d5950:	4623      	mov	r3, r4
   d5952:	227d      	movs	r2, #125	; 0x7d
   d5954:	a90c      	add	r1, sp, #48	; 0x30
   d5956:	a804      	add	r0, sp, #16
   d5958:	f002 fa53 	bl	d7e02 <_ZNK6String8getBytesEPhjj>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d595c:	4623      	mov	r3, r4
   d595e:	4622      	mov	r2, r4
   d5960:	4940      	ldr	r1, [pc, #256]	; (d5a64 <setup+0x1dc>)
   d5962:	9401      	str	r4, [sp, #4]
   d5964:	9400      	str	r4, [sp, #0]
   d5966:	a80c      	add	r0, sp, #48	; 0x30
   d5968:	f000 ff12 	bl	d6790 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);          // Puts the deviceID into the response topic array
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);      // Subscribe to the integration response event

  Particle.variable("HourlyCount", hourlyPersonCount);                // Define my Particle variables
   d596c:	493e      	ldr	r1, [pc, #248]	; (d5a68 <setup+0x1e0>)
   d596e:	483f      	ldr	r0, [pc, #252]	; (d5a6c <setup+0x1e4>)
   d5970:	f7ff ff80 	bl	d5874 <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("DailyCount", dailyPersonCount);                  // Note: Don't have to be connected for any of this!!!
   d5974:	493e      	ldr	r1, [pc, #248]	; (d5a70 <setup+0x1e8>)
   d5976:	483f      	ldr	r0, [pc, #252]	; (d5a74 <setup+0x1ec>)
   d5978:	f7ff ff7c 	bl	d5874 <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("Signal", SignalString);
   d597c:	493e      	ldr	r1, [pc, #248]	; (d5a78 <setup+0x1f0>)
   d597e:	483f      	ldr	r0, [pc, #252]	; (d5a7c <setup+0x1f4>)
   d5980:	f7ff ff74 	bl	d586c <_ZN10CloudClass8variableIA9_cIA8_cEEEbRKT_DpRKT0_>
  Particle.variable("ResetCount", resetCount);
   d5984:	493e      	ldr	r1, [pc, #248]	; (d5a80 <setup+0x1f8>)
   d5986:	483f      	ldr	r0, [pc, #252]	; (d5a84 <setup+0x1fc>)
   d5988:	f7ff ff74 	bl	d5874 <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("Temperature",temperatureF);
   d598c:	493e      	ldr	r1, [pc, #248]	; (d5a88 <setup+0x200>)
   d598e:	483f      	ldr	r0, [pc, #252]	; (d5a8c <setup+0x204>)
   d5990:	f7ff ff70 	bl	d5874 <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("Release",releaseNumber);
   d5994:	493e      	ldr	r1, [pc, #248]	; (d5a90 <setup+0x208>)
   d5996:	483f      	ldr	r0, [pc, #252]	; (d5a94 <setup+0x20c>)
   d5998:	f7ff ff68 	bl	d586c <_ZN10CloudClass8variableIA9_cIA8_cEEEbRKT_DpRKT0_>
  Particle.variable("stateOfChg", stateOfCharge);
   d599c:	493e      	ldr	r1, [pc, #248]	; (d5a98 <setup+0x210>)
   d599e:	483f      	ldr	r0, [pc, #252]	; (d5a9c <setup+0x214>)
   d59a0:	f7ff ff68 	bl	d5874 <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d59a4:	4623      	mov	r3, r4
   d59a6:	2201      	movs	r2, #1
   d59a8:	493d      	ldr	r1, [pc, #244]	; (d5aa0 <setup+0x218>)
   d59aa:	483e      	ldr	r0, [pc, #248]	; (d5aa4 <setup+0x21c>)
   d59ac:	f000 feb0 	bl	d6710 <spark_variable>
  Particle.variable("lowPowerMode",lowPowerMode);
  Particle.variable("OpenTime",openTime);
   d59b0:	493d      	ldr	r1, [pc, #244]	; (d5aa8 <setup+0x220>)
   d59b2:	483e      	ldr	r0, [pc, #248]	; (d5aac <setup+0x224>)
   d59b4:	f7ff ff5e 	bl	d5874 <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("CloseTime",closeTime);
   d59b8:	493d      	ldr	r1, [pc, #244]	; (d5ab0 <setup+0x228>)
   d59ba:	483e      	ldr	r0, [pc, #248]	; (d5ab4 <setup+0x22c>)
   d59bc:	f7ff ff5a 	bl	d5874 <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("Debounce",debounceStr);
   d59c0:	493d      	ldr	r1, [pc, #244]	; (d5ab8 <setup+0x230>)
   d59c2:	483e      	ldr	r0, [pc, #248]	; (d5abc <setup+0x234>)
   d59c4:	f7ff ff52 	bl	d586c <_ZN10CloudClass8variableIA9_cIA8_cEEEbRKT_DpRKT0_>
  Particle.variable("MaxMinLimit",maxMinLimit);
   d59c8:	493d      	ldr	r1, [pc, #244]	; (d5ac0 <setup+0x238>)
   d59ca:	483e      	ldr	r0, [pc, #248]	; (d5ac4 <setup+0x23c>)
   d59cc:	f7ff ff52 	bl	d5874 <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("Alerts",alerts);
   d59d0:	493d      	ldr	r1, [pc, #244]	; (d5ac8 <setup+0x240>)
   d59d2:	483e      	ldr	r0, [pc, #248]	; (d5acc <setup+0x244>)
   d59d4:	f7ff ff4e 	bl	d5874 <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>

  Particle.function("resetFRAM", resetFRAM);                          // These are the functions exposed to the mobile app and console
   d59d8:	493d      	ldr	r1, [pc, #244]	; (d5ad0 <setup+0x248>)
   d59da:	483e      	ldr	r0, [pc, #248]	; (d5ad4 <setup+0x24c>)
   d59dc:	f7ff ff4e 	bl	d587c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("resetCounts",resetCounts);
   d59e0:	493d      	ldr	r1, [pc, #244]	; (d5ad8 <setup+0x250>)
   d59e2:	483e      	ldr	r0, [pc, #248]	; (d5adc <setup+0x254>)
   d59e4:	f7ff ff4a 	bl	d587c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("HardReset",hardResetNow);
   d59e8:	493d      	ldr	r1, [pc, #244]	; (d5ae0 <setup+0x258>)
   d59ea:	483e      	ldr	r0, [pc, #248]	; (d5ae4 <setup+0x25c>)
   d59ec:	f7ff ff46 	bl	d587c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SendNow",sendNow);
   d59f0:	493d      	ldr	r1, [pc, #244]	; (d5ae8 <setup+0x260>)
   d59f2:	483e      	ldr	r0, [pc, #248]	; (d5aec <setup+0x264>)
   d59f4:	f7ff ff42 	bl	d587c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
   d59f8:	493d      	ldr	r1, [pc, #244]	; (d5af0 <setup+0x268>)
   d59fa:	483e      	ldr	r0, [pc, #248]	; (d5af4 <setup+0x26c>)
   d59fc:	f7ff ff3e 	bl	d587c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Solar-Mode",setSolarMode);
   d5a00:	493d      	ldr	r1, [pc, #244]	; (d5af8 <setup+0x270>)
   d5a02:	483e      	ldr	r0, [pc, #248]	; (d5afc <setup+0x274>)
   d5a04:	f7ff ff3a 	bl	d587c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
   d5a08:	493d      	ldr	r1, [pc, #244]	; (d5b00 <setup+0x278>)
   d5a0a:	483e      	ldr	r0, [pc, #248]	; (d5b04 <setup+0x27c>)
   d5a0c:	f7ff ff36 	bl	d587c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);
   d5a10:	493d      	ldr	r1, [pc, #244]	; (d5b08 <setup+0x280>)
   d5a12:	483e      	ldr	r0, [pc, #248]	; (d5b0c <setup+0x284>)
   d5a14:	f7ff ff32 	bl	d587c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-OpenTime",setOpenTime);
   d5a18:	493d      	ldr	r1, [pc, #244]	; (d5b10 <setup+0x288>)
   d5a1a:	483e      	ldr	r0, [pc, #248]	; (d5b14 <setup+0x28c>)
   d5a1c:	f7ff ff2e 	bl	d587c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Close",setCloseTime);
   d5a20:	493d      	ldr	r1, [pc, #244]	; (d5b18 <setup+0x290>)
   d5a22:	483e      	ldr	r0, [pc, #248]	; (d5b1c <setup+0x294>)
   d5a24:	f7ff ff2a 	bl	d587c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Debounce",setDebounce);
   d5a28:	493d      	ldr	r1, [pc, #244]	; (d5b20 <setup+0x298>)
   d5a2a:	483e      	ldr	r0, [pc, #248]	; (d5b24 <setup+0x29c>)
   d5a2c:	f7ff ff26 	bl	d587c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-MaxMin-Limit",setMaxMinLimit);
   d5a30:	493d      	ldr	r1, [pc, #244]	; (d5b28 <setup+0x2a0>)
   d5a32:	483e      	ldr	r0, [pc, #248]	; (d5b2c <setup+0x2a4>)
   d5a34:	f7ff ff22 	bl	d587c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>

  // Load the elements for improving troubleshooting and reliability
  connectionEvents.setup();                                           // For logging connection event data
   d5a38:	483d      	ldr	r0, [pc, #244]	; (d5b30 <setup+0x2a8>)
   d5a3a:	f000 fbd9 	bl	d61f0 <_ZN16ConnectionEvents5setupEv>
  batteryCheck.setup();
   d5a3e:	483d      	ldr	r0, [pc, #244]	; (d5b34 <setup+0x2ac>)
   d5a40:	f000 fa9c 	bl	d5f7c <_ZN12BatteryCheck5setupEv>

  // Load FRAM and reset variables to their correct values
  if (!fram.begin()) state = ERROR_STATE;                             // You can stick the new i2c addr in here, e.g. begin(0x51);
   d5a44:	2150      	movs	r1, #80	; 0x50
   d5a46:	483c      	ldr	r0, [pc, #240]	; (d5b38 <setup+0x2b0>)
   d5a48:	f7fe fb3c 	bl	d40c4 <_ZN17Adafruit_FRAM_I2C5beginEh>
   d5a4c:	9502      	str	r5, [sp, #8]
   d5a4e:	2800      	cmp	r0, #0
   d5a50:	d176      	bne.n	d5b40 <setup+0x2b8>
   d5a52:	2301      	movs	r3, #1
   d5a54:	f88a 3000 	strb.w	r3, [sl]
   d5a58:	e07f      	b.n	d5b5a <setup+0x2d2>
   d5a5a:	bf00      	nop
   d5a5c:	2003e204 	.word	0x2003e204
   d5a60:	000d416d 	.word	0x000d416d
   d5a64:	000d4c01 	.word	0x000d4c01
   d5a68:	2003e1d0 	.word	0x2003e1d0
   d5a6c:	000dbc3e 	.word	0x000dbc3e
   d5a70:	2003e198 	.word	0x2003e198
   d5a74:	000dbc4a 	.word	0x000dbc4a
   d5a78:	2003e214 	.word	0x2003e214
   d5a7c:	000dbc55 	.word	0x000dbc55
   d5a80:	2003e1dc 	.word	0x2003e1dc
   d5a84:	000dbc5c 	.word	0x000dbc5c
   d5a88:	2003e1ec 	.word	0x2003e1ec
   d5a8c:	000dbc67 	.word	0x000dbc67
   d5a90:	000db930 	.word	0x000db930
   d5a94:	000dbc73 	.word	0x000dbc73
   d5a98:	2003e1d8 	.word	0x2003e1d8
   d5a9c:	000dbc7b 	.word	0x000dbc7b
   d5aa0:	2003e202 	.word	0x2003e202
   d5aa4:	000dbc86 	.word	0x000dbc86
   d5aa8:	2003e25c 	.word	0x2003e25c
   d5aac:	000dbd0e 	.word	0x000dbd0e
   d5ab0:	2003e208 	.word	0x2003e208
   d5ab4:	000dbc93 	.word	0x000dbc93
   d5ab8:	2003e09c 	.word	0x2003e09c
   d5abc:	000dbd25 	.word	0x000dbd25
   d5ac0:	2003e1a8 	.word	0x2003e1a8
   d5ac4:	000dbc9d 	.word	0x000dbc9d
   d5ac8:	2003e1d4 	.word	0x2003e1d4
   d5acc:	000dbca9 	.word	0x000dbca9
   d5ad0:	000d4821 	.word	0x000d4821
   d5ad4:	000dbcb0 	.word	0x000dbcb0
   d5ad8:	000d42b1 	.word	0x000d42b1
   d5adc:	000dbcba 	.word	0x000dbcba
   d5ae0:	000d4ccd 	.word	0x000d4ccd
   d5ae4:	000dbcc6 	.word	0x000dbcc6
   d5ae8:	000d41e5 	.word	0x000d41e5
   d5aec:	000dbcd0 	.word	0x000dbcd0
   d5af0:	000d50e9 	.word	0x000d50e9
   d5af4:	000dbcd8 	.word	0x000dbcd8
   d5af8:	000d4ded 	.word	0x000d4ded
   d5afc:	000dbce5 	.word	0x000dbce5
   d5b00:	000d4ea5 	.word	0x000d4ea5
   d5b04:	000dbcf0 	.word	0x000dbcf0
   d5b08:	000d4f55 	.word	0x000d4f55
   d5b0c:	000dbcfd 	.word	0x000dbcfd
   d5b10:	000d5011 	.word	0x000d5011
   d5b14:	000dbd0a 	.word	0x000dbd0a
   d5b18:	000d507d 	.word	0x000d507d
   d5b1c:	000dbd17 	.word	0x000dbd17
   d5b20:	000d4d19 	.word	0x000d4d19
   d5b24:	000dbd21 	.word	0x000dbd21
   d5b28:	000d5259 	.word	0x000d5259
   d5b2c:	000dbd2e 	.word	0x000dbd2e
   d5b30:	2003e1e0 	.word	0x2003e1e0
   d5b34:	2003e268 	.word	0x2003e268
   d5b38:	2003e1a4 	.word	0x2003e1a4
   d5b3c:	2003e1c9 	.word	0x2003e1c9
  else if (FRAMread8(FRAM::versionAddr) != versionNumber) {           // Check to see if the memory map in the sketch matches the data on the chip
   d5b40:	4620      	mov	r0, r4
   d5b42:	f7fe fb81 	bl	d4248 <_Z9FRAMread8j>
   d5b46:	2809      	cmp	r0, #9
   d5b48:	d007      	beq.n	d5b5a <setup+0x2d2>
    ResetFRAM();                                                      // Reset the FRAM to correct the issue
   d5b4a:	f7fe fde3 	bl	d4714 <_Z9ResetFRAMv>
    if (FRAMread8(FRAM::versionAddr) != versionNumber)state = ERROR_STATE; // Resetting did not fix the issue
   d5b4e:	4620      	mov	r0, r4
   d5b50:	f7fe fb7a 	bl	d4248 <_Z9FRAMread8j>
   d5b54:	2809      	cmp	r0, #9
   d5b56:	f47f af7c 	bne.w	d5a52 <setup+0x1ca>
  }

  alerts = FRAMread8(FRAM::alertsCountAddr);                          // Load the alerts count
   d5b5a:	2012      	movs	r0, #18
   d5b5c:	f7fe fb74 	bl	d4248 <_Z9FRAMread8j>
   d5b60:	4b91      	ldr	r3, [pc, #580]	; (d5da8 <setup+0x520>)
  resetCount = FRAMread8(FRAM::resetCountAddr);                       // Retrive system recount data from FRAM
   d5b62:	4d92      	ldr	r5, [pc, #584]	; (d5dac <setup+0x524>)
  else if (FRAMread8(FRAM::versionAddr) != versionNumber) {           // Check to see if the memory map in the sketch matches the data on the chip
    ResetFRAM();                                                      // Reset the FRAM to correct the issue
    if (FRAMread8(FRAM::versionAddr) != versionNumber)state = ERROR_STATE; // Resetting did not fix the issue
  }

  alerts = FRAMread8(FRAM::alertsCountAddr);                          // Load the alerts count
   d5b64:	6018      	str	r0, [r3, #0]
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5b66:	ac2c      	add	r4, sp, #176	; 0xb0
  resetCount = FRAMread8(FRAM::resetCountAddr);                       // Retrive system recount data from FRAM
   d5b68:	2003      	movs	r0, #3
   d5b6a:	f7fe fb6d 	bl	d4248 <_Z9FRAMread8j>
   d5b6e:	2600      	movs	r6, #0
   d5b70:	f844 6d90 	str.w	r6, [r4, #-144]!
   d5b74:	6028      	str	r0, [r5, #0]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5b76:	4632      	mov	r2, r6
   d5b78:	4631      	mov	r1, r6
   d5b7a:	4620      	mov	r0, r4
   d5b7c:	f000 fbda 	bl	d6334 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5b80:	9b08      	ldr	r3, [sp, #32]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER)  // Check to see if we are starting from a pin reset or a reset in the sketch
   d5b82:	2b14      	cmp	r3, #20
   d5b84:	f000 80fc 	beq.w	d5d80 <setup+0x4f8>
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5b88:	4632      	mov	r2, r6
   d5b8a:	4631      	mov	r1, r6
   d5b8c:	4620      	mov	r0, r4
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5b8e:	9608      	str	r6, [sp, #32]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5b90:	f000 fbd0 	bl	d6334 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5b94:	9b08      	ldr	r3, [sp, #32]
   d5b96:	2b8c      	cmp	r3, #140	; 0x8c
   d5b98:	f000 80f2 	beq.w	d5d80 <setup+0x4f8>
    resetCount++;
    FRAMwrite8(FRAM::resetCountAddr,static_cast<uint8_t>(resetCount));// If so, store incremented number - watchdog must have done This
  }

  // Check and import values from FRAM
  debounce = 100*FRAMread8(FRAM::debounceAddr);
   d5b9c:	2002      	movs	r0, #2
   d5b9e:	f7fe fb53 	bl	d4248 <_Z9FRAMread8j>
   d5ba2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d5ba6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d5baa:	0080      	lsls	r0, r0, #2
   d5bac:	b280      	uxth	r0, r0
  if (debounce <= 100 || debounce > 2000) debounce = 500;             // We store debounce in dSec so mult by 100 for mSec
   d5bae:	f1a0 0365 	sub.w	r3, r0, #101	; 0x65
   d5bb2:	f240 726b 	movw	r2, #1899	; 0x76b
   d5bb6:	b29b      	uxth	r3, r3
   d5bb8:	4293      	cmp	r3, r2
   d5bba:	4b7d      	ldr	r3, [pc, #500]	; (d5db0 <setup+0x528>)
   d5bbc:	4e7d      	ldr	r6, [pc, #500]	; (d5db4 <setup+0x52c>)
    resetCount++;
    FRAMwrite8(FRAM::resetCountAddr,static_cast<uint8_t>(resetCount));// If so, store incremented number - watchdog must have done This
  }

  // Check and import values from FRAM
  debounce = 100*FRAMread8(FRAM::debounceAddr);
   d5bbe:	bf92      	itee	ls
   d5bc0:	8018      	strhls	r0, [r3, #0]
  if (debounce <= 100 || debounce > 2000) debounce = 500;             // We store debounce in dSec so mult by 100 for mSec
   d5bc2:	f44f 72fa 	movhi.w	r2, #500	; 0x1f4
   d5bc6:	801a      	strhhi	r2, [r3, #0]
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",(debounce/1000.0));
   d5bc8:	8818      	ldrh	r0, [r3, #0]
   d5bca:	4d7b      	ldr	r5, [pc, #492]	; (d5db8 <setup+0x530>)
  else Time.zone((float)tempFRAMvalue);                               // Load Timezone from FRAM
  maxMinLimit = FRAMread8(FRAM::maxMinLimitAddr);                     // This is the maximum number of counts in a minute
  if (maxMinLimit < 2 || maxMinLimit > 30) maxMinLimit = 10;          // If value has never been intialized - reasonable value

  controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);        // Read the Control Register for system modes
  lowPowerMode    = (0b00000001 & controlRegisterValue);              // Bitwise AND to set the lowPowerMode flag from control Register
   d5bcc:	4f7b      	ldr	r7, [pc, #492]	; (d5dbc <setup+0x534>)
  verboseMode     = (0b00001000 & controlRegisterValue);              // verboseMode
  solarPowerMode  = (0b00000100 & controlRegisterValue);              // solarPowerMode
   d5bce:	f8df 922c 	ldr.w	r9, [pc, #556]	; d5dfc <setup+0x574>
  connectionMode  = (0b00010000 & controlRegisterValue);              // connected mode 1 = connected and 0 = disconnected
   d5bd2:	f8df 822c 	ldr.w	r8, [pc, #556]	; d5e00 <setup+0x578>
  }

  // Check and import values from FRAM
  debounce = 100*FRAMread8(FRAM::debounceAddr);
  if (debounce <= 100 || debounce > 2000) debounce = 500;             // We store debounce in dSec so mult by 100 for mSec
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",(debounce/1000.0));
   d5bd6:	f002 ff5b 	bl	d8a90 <__aeabi_i2d>
   d5bda:	4b79      	ldr	r3, [pc, #484]	; (d5dc0 <setup+0x538>)
   d5bdc:	2200      	movs	r2, #0
   d5bde:	f003 f8e7 	bl	d8db0 <__aeabi_ddiv>
   d5be2:	4a78      	ldr	r2, [pc, #480]	; (d5dc4 <setup+0x53c>)
   d5be4:	e9cd 0100 	strd	r0, r1, [sp]
   d5be8:	2108      	movs	r1, #8
   d5bea:	4877      	ldr	r0, [pc, #476]	; (d5dc8 <setup+0x540>)
   d5bec:	f000 fe68 	bl	d68c0 <snprintf>
  openTime = FRAMread8(FRAM::openTimeAddr);
   d5bf0:	2005      	movs	r0, #5
   d5bf2:	f7fe fb29 	bl	d4248 <_Z9FRAMread8j>
  if (openTime < 0 || openTime > 22) openTime = 0;                    // Open and close in 24hr format
   d5bf6:	2816      	cmp	r0, #22
   d5bf8:	bf8c      	ite	hi
   d5bfa:	2300      	movhi	r3, #0

  // Check and import values from FRAM
  debounce = 100*FRAMread8(FRAM::debounceAddr);
  if (debounce <= 100 || debounce > 2000) debounce = 500;             // We store debounce in dSec so mult by 100 for mSec
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",(debounce/1000.0));
  openTime = FRAMread8(FRAM::openTimeAddr);
   d5bfc:	6030      	strls	r0, [r6, #0]
  if (openTime < 0 || openTime > 22) openTime = 0;                    // Open and close in 24hr format
  closeTime = FRAMread8(FRAM::closeTimeAddr);
   d5bfe:	f04f 0006 	mov.w	r0, #6
  // Check and import values from FRAM
  debounce = 100*FRAMread8(FRAM::debounceAddr);
  if (debounce <= 100 || debounce > 2000) debounce = 500;             // We store debounce in dSec so mult by 100 for mSec
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",(debounce/1000.0));
  openTime = FRAMread8(FRAM::openTimeAddr);
  if (openTime < 0 || openTime > 22) openTime = 0;                    // Open and close in 24hr format
   d5c02:	bf88      	it	hi
   d5c04:	6033      	strhi	r3, [r6, #0]
  closeTime = FRAMread8(FRAM::closeTimeAddr);
   d5c06:	f7fe fb1f 	bl	d4248 <_Z9FRAMread8j>
  if (closeTime < 1 || closeTime > 23) closeTime = 23;
   d5c0a:	1e43      	subs	r3, r0, #1
   d5c0c:	2b16      	cmp	r3, #22
   d5c0e:	bf8c      	ite	hi
   d5c10:	2317      	movhi	r3, #23
  debounce = 100*FRAMread8(FRAM::debounceAddr);
  if (debounce <= 100 || debounce > 2000) debounce = 500;             // We store debounce in dSec so mult by 100 for mSec
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",(debounce/1000.0));
  openTime = FRAMread8(FRAM::openTimeAddr);
  if (openTime < 0 || openTime > 22) openTime = 0;                    // Open and close in 24hr format
  closeTime = FRAMread8(FRAM::closeTimeAddr);
   d5c12:	6028      	strls	r0, [r5, #0]
  if (closeTime < 1 || closeTime > 23) closeTime = 23;
  int8_t tempFRAMvalue = FRAMread8(FRAM::timeZoneAddr);
   d5c14:	f04f 0004 	mov.w	r0, #4
  if (debounce <= 100 || debounce > 2000) debounce = 500;             // We store debounce in dSec so mult by 100 for mSec
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",(debounce/1000.0));
  openTime = FRAMread8(FRAM::openTimeAddr);
  if (openTime < 0 || openTime > 22) openTime = 0;                    // Open and close in 24hr format
  closeTime = FRAMread8(FRAM::closeTimeAddr);
  if (closeTime < 1 || closeTime > 23) closeTime = 23;
   d5c18:	bf88      	it	hi
   d5c1a:	602b      	strhi	r3, [r5, #0]
  int8_t tempFRAMvalue = FRAMread8(FRAM::timeZoneAddr);
   d5c1c:	f7fe fb14 	bl	d4248 <_Z9FRAMread8j>
  if (tempFRAMvalue >= 12 || tempFRAMvalue <= -12)  Time.zone(-5);    // Default is EST in case proper value not in FRAM
   d5c20:	f100 030b 	add.w	r3, r0, #11
   d5c24:	b2db      	uxtb	r3, r3
   d5c26:	2b16      	cmp	r3, #22
  else Time.zone((float)tempFRAMvalue);                               // Load Timezone from FRAM
   d5c28:	bf9b      	ittet	ls
   d5c2a:	b243      	sxtbls	r3, r0
   d5c2c:	ee00 3a10 	vmovls	s0, r3
  openTime = FRAMread8(FRAM::openTimeAddr);
  if (openTime < 0 || openTime > 22) openTime = 0;                    // Open and close in 24hr format
  closeTime = FRAMread8(FRAM::closeTimeAddr);
  if (closeTime < 1 || closeTime > 23) closeTime = 23;
  int8_t tempFRAMvalue = FRAMread8(FRAM::timeZoneAddr);
  if (tempFRAMvalue >= 12 || tempFRAMvalue <= -12)  Time.zone(-5);    // Default is EST in case proper value not in FRAM
   d5c30:	eeb9 0a04 	vmovhi.f32	s0, #148	; 0xc0a00000 -5.0
  else Time.zone((float)tempFRAMvalue);                               // Load Timezone from FRAM
   d5c34:	eeb8 0ac0 	vcvtls.f32.s32	s0, s0
   d5c38:	f002 f9ae 	bl	d7f98 <_ZN9TimeClass4zoneEf>
  maxMinLimit = FRAMread8(FRAM::maxMinLimitAddr);                     // This is the maximum number of counts in a minute
   d5c3c:	2013      	movs	r0, #19
   d5c3e:	f7fe fb03 	bl	d4248 <_Z9FRAMread8j>
  if (maxMinLimit < 2 || maxMinLimit > 30) maxMinLimit = 10;          // If value has never been intialized - reasonable value
   d5c42:	1e83      	subs	r3, r0, #2
   d5c44:	2b1c      	cmp	r3, #28
   d5c46:	4b61      	ldr	r3, [pc, #388]	; (d5dcc <setup+0x544>)
   d5c48:	bf8c      	ite	hi
   d5c4a:	220a      	movhi	r2, #10
  closeTime = FRAMread8(FRAM::closeTimeAddr);
  if (closeTime < 1 || closeTime > 23) closeTime = 23;
  int8_t tempFRAMvalue = FRAMread8(FRAM::timeZoneAddr);
  if (tempFRAMvalue >= 12 || tempFRAMvalue <= -12)  Time.zone(-5);    // Default is EST in case proper value not in FRAM
  else Time.zone((float)tempFRAMvalue);                               // Load Timezone from FRAM
  maxMinLimit = FRAMread8(FRAM::maxMinLimitAddr);                     // This is the maximum number of counts in a minute
   d5c4c:	6018      	strls	r0, [r3, #0]
  if (maxMinLimit < 2 || maxMinLimit > 30) maxMinLimit = 10;          // If value has never been intialized - reasonable value

  controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);        // Read the Control Register for system modes
   d5c4e:	f04f 0007 	mov.w	r0, #7
  if (closeTime < 1 || closeTime > 23) closeTime = 23;
  int8_t tempFRAMvalue = FRAMread8(FRAM::timeZoneAddr);
  if (tempFRAMvalue >= 12 || tempFRAMvalue <= -12)  Time.zone(-5);    // Default is EST in case proper value not in FRAM
  else Time.zone((float)tempFRAMvalue);                               // Load Timezone from FRAM
  maxMinLimit = FRAMread8(FRAM::maxMinLimitAddr);                     // This is the maximum number of counts in a minute
  if (maxMinLimit < 2 || maxMinLimit > 30) maxMinLimit = 10;          // If value has never been intialized - reasonable value
   d5c52:	bf88      	it	hi
   d5c54:	601a      	strhi	r2, [r3, #0]

  controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);        // Read the Control Register for system modes
   d5c56:	f7fe faf7 	bl	d4248 <_Z9FRAMread8j>
  lowPowerMode    = (0b00000001 & controlRegisterValue);              // Bitwise AND to set the lowPowerMode flag from control Register
   d5c5a:	f000 0201 	and.w	r2, r0, #1
  if (tempFRAMvalue >= 12 || tempFRAMvalue <= -12)  Time.zone(-5);    // Default is EST in case proper value not in FRAM
  else Time.zone((float)tempFRAMvalue);                               // Load Timezone from FRAM
  maxMinLimit = FRAMread8(FRAM::maxMinLimitAddr);                     // This is the maximum number of counts in a minute
  if (maxMinLimit < 2 || maxMinLimit > 30) maxMinLimit = 10;          // If value has never been intialized - reasonable value

  controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);        // Read the Control Register for system modes
   d5c5e:	4b5c      	ldr	r3, [pc, #368]	; (d5dd0 <setup+0x548>)
  lowPowerMode    = (0b00000001 & controlRegisterValue);              // Bitwise AND to set the lowPowerMode flag from control Register
   d5c60:	703a      	strb	r2, [r7, #0]
  verboseMode     = (0b00001000 & controlRegisterValue);              // verboseMode
   d5c62:	4a5c      	ldr	r2, [pc, #368]	; (d5dd4 <setup+0x54c>)
  if (tempFRAMvalue >= 12 || tempFRAMvalue <= -12)  Time.zone(-5);    // Default is EST in case proper value not in FRAM
  else Time.zone((float)tempFRAMvalue);                               // Load Timezone from FRAM
  maxMinLimit = FRAMread8(FRAM::maxMinLimitAddr);                     // This is the maximum number of counts in a minute
  if (maxMinLimit < 2 || maxMinLimit > 30) maxMinLimit = 10;          // If value has never been intialized - reasonable value

  controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);        // Read the Control Register for system modes
   d5c64:	7018      	strb	r0, [r3, #0]
  lowPowerMode    = (0b00000001 & controlRegisterValue);              // Bitwise AND to set the lowPowerMode flag from control Register
  verboseMode     = (0b00001000 & controlRegisterValue);              // verboseMode
   d5c66:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   d5c6a:	7011      	strb	r1, [r2, #0]
  solarPowerMode  = (0b00000100 & controlRegisterValue);              // solarPowerMode
   d5c6c:	f3c0 0280 	ubfx	r2, r0, #2, #1
  connectionMode  = (0b00010000 & controlRegisterValue);              // connected mode 1 = connected and 0 = disconnected
   d5c70:	f3c0 1000 	ubfx	r0, r0, #4, #1
  if (tempFRAMvalue >= 12 || tempFRAMvalue <= -12)  Time.zone(-5);    // Default is EST in case proper value not in FRAM
  else Time.zone((float)tempFRAMvalue);                               // Load Timezone from FRAM
  maxMinLimit = FRAMread8(FRAM::maxMinLimitAddr);                     // This is the maximum number of counts in a minute
  if (maxMinLimit < 2 || maxMinLimit > 30) maxMinLimit = 10;          // If value has never been intialized - reasonable value

  controlRegisterValue = FRAMread8(FRAM::controlRegisterAddr);        // Read the Control Register for system modes
   d5c74:	9303      	str	r3, [sp, #12]
  lowPowerMode    = (0b00000001 & controlRegisterValue);              // Bitwise AND to set the lowPowerMode flag from control Register
  verboseMode     = (0b00001000 & controlRegisterValue);              // verboseMode
  solarPowerMode  = (0b00000100 & controlRegisterValue);              // solarPowerMode
   d5c76:	f889 2000 	strb.w	r2, [r9]
  connectionMode  = (0b00010000 & controlRegisterValue);              // connected mode 1 = connected and 0 = disconnected
   d5c7a:	f888 0000 	strb.w	r0, [r8]

  PMICreset();                                                        // Executes commands that set up the PMIC for Solar charging
   d5c7e:	f7fe fc4d 	bl	d451c <_Z9PMICresetv>

  currentHourlyPeriod = Time.hour();                                  // Sets the hour period for when the count starts (see #defines)
   d5c82:	f002 f9ef 	bl	d8064 <_ZN9TimeClass4hourEv>
   d5c86:	4a54      	ldr	r2, [pc, #336]	; (d5dd8 <setup+0x550>)
   d5c88:	7010      	strb	r0, [r2, #0]
  currentDailyPeriod = Time.day();                                    // What day is it?
   d5c8a:	f002 f9ff 	bl	d808c <_ZN9TimeClass3dayEv>
   d5c8e:	4a53      	ldr	r2, [pc, #332]	; (d5ddc <setup+0x554>)
   d5c90:	7010      	strb	r0, [r2, #0]

  time_t unixTime = FRAMread32(FRAM::currentCountsTimeAddr);          // Need to reload last recorded event - current periods set from this event
   d5c92:	200e      	movs	r0, #14
   d5c94:	f7fe fb3e 	bl	d4314 <_Z10FRAMread32m>
   d5c98:	4683      	mov	fp, r0
  dailyPersonCount = FRAMread16(FRAM::currentDailyCountAddr);         // Load Daily Count from memory
   d5c9a:	200c      	movs	r0, #12
   d5c9c:	f7fe fae2 	bl	d4264 <_Z10FRAMread16j>
   d5ca0:	4a4f      	ldr	r2, [pc, #316]	; (d5de0 <setup+0x558>)
   d5ca2:	6010      	str	r0, [r2, #0]
  hourlyPersonCount = FRAMread16(FRAM::currentHourlyCountAddr);       // Load Hourly Count from memory
   d5ca4:	2008      	movs	r0, #8
   d5ca6:	f7fe fadd 	bl	d4264 <_Z10FRAMread16j>
   d5caa:	4a4e      	ldr	r2, [pc, #312]	; (d5de4 <setup+0x55c>)
   d5cac:	6010      	str	r0, [r2, #0]

  if (!digitalRead(userSwitch)) {                                     // Rescue mode to locally take lowPowerMode so you can connect to device
   d5cae:	2004      	movs	r0, #4
   d5cb0:	f002 fbbe 	bl	d8430 <digitalRead>
   d5cb4:	9b03      	ldr	r3, [sp, #12]
   d5cb6:	b9b0      	cbnz	r0, d5ce6 <setup+0x45e>
    lowPowerMode = false;                                             // Press the user switch while resetting the device
    connectionMode = true;                                            // Set the stage for the devic to get connected
    controlRegisterValue = (0b11111110 & controlRegisterValue);       // Turn off Low power mode
    controlRegisterValue = (0b00010000 | controlRegisterValue);       // Turn on the connectionMode
   d5cb8:	7819      	ldrb	r1, [r3, #0]
  time_t unixTime = FRAMread32(FRAM::currentCountsTimeAddr);          // Need to reload last recorded event - current periods set from this event
  dailyPersonCount = FRAMread16(FRAM::currentDailyCountAddr);         // Load Daily Count from memory
  hourlyPersonCount = FRAMread16(FRAM::currentHourlyCountAddr);       // Load Hourly Count from memory

  if (!digitalRead(userSwitch)) {                                     // Rescue mode to locally take lowPowerMode so you can connect to device
    lowPowerMode = false;                                             // Press the user switch while resetting the device
   d5cba:	7038      	strb	r0, [r7, #0]
    connectionMode = true;                                            // Set the stage for the devic to get connected
    controlRegisterValue = (0b11111110 & controlRegisterValue);       // Turn off Low power mode
    controlRegisterValue = (0b00010000 | controlRegisterValue);       // Turn on the connectionMode
   d5cbc:	f021 0101 	bic.w	r1, r1, #1
  dailyPersonCount = FRAMread16(FRAM::currentDailyCountAddr);         // Load Daily Count from memory
  hourlyPersonCount = FRAMread16(FRAM::currentHourlyCountAddr);       // Load Hourly Count from memory

  if (!digitalRead(userSwitch)) {                                     // Rescue mode to locally take lowPowerMode so you can connect to device
    lowPowerMode = false;                                             // Press the user switch while resetting the device
    connectionMode = true;                                            // Set the stage for the devic to get connected
   d5cc0:	2201      	movs	r2, #1
    controlRegisterValue = (0b11111110 & controlRegisterValue);       // Turn off Low power mode
    controlRegisterValue = (0b00010000 | controlRegisterValue);       // Turn on the connectionMode
   d5cc2:	f041 0110 	orr.w	r1, r1, #16
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);       // Write it to the register
   d5cc6:	2007      	movs	r0, #7

  if (!digitalRead(userSwitch)) {                                     // Rescue mode to locally take lowPowerMode so you can connect to device
    lowPowerMode = false;                                             // Press the user switch while resetting the device
    connectionMode = true;                                            // Set the stage for the devic to get connected
    controlRegisterValue = (0b11111110 & controlRegisterValue);       // Turn off Low power mode
    controlRegisterValue = (0b00010000 | controlRegisterValue);       // Turn on the connectionMode
   d5cc8:	7019      	strb	r1, [r3, #0]
  dailyPersonCount = FRAMread16(FRAM::currentDailyCountAddr);         // Load Daily Count from memory
  hourlyPersonCount = FRAMread16(FRAM::currentHourlyCountAddr);       // Load Hourly Count from memory

  if (!digitalRead(userSwitch)) {                                     // Rescue mode to locally take lowPowerMode so you can connect to device
    lowPowerMode = false;                                             // Press the user switch while resetting the device
    connectionMode = true;                                            // Set the stage for the devic to get connected
   d5cca:	f888 2000 	strb.w	r2, [r8]
    controlRegisterValue = (0b11111110 & controlRegisterValue);       // Turn off Low power mode
    controlRegisterValue = (0b00010000 | controlRegisterValue);       // Turn on the connectionMode
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);       // Write it to the register
   d5cce:	f7fe fac1 	bl	d4254 <_Z10FRAMwrite8jh>
    if ((Time.hour() > closeTime || Time.hour() < openTime))  {       // Device may also be sleeping due to time or TimeZone setting
   d5cd2:	f002 f9c7 	bl	d8064 <_ZN9TimeClass4hourEv>
   d5cd6:	682b      	ldr	r3, [r5, #0]
   d5cd8:	4298      	cmp	r0, r3
   d5cda:	dc59      	bgt.n	d5d90 <setup+0x508>
   d5cdc:	f002 f9c2 	bl	d8064 <_ZN9TimeClass4hourEv>
   d5ce0:	6833      	ldr	r3, [r6, #0]
   d5ce2:	4298      	cmp	r0, r3
   d5ce4:	db54      	blt.n	d5d90 <setup+0x508>
    }
  }

  // Here is where the code diverges based on why we are running Setup()
  // Deterimine when the last counts were taken check when starting test to determine if we reload values or start counts over
  if (currentDailyPeriod != Time.day(unixTime)) {
   d5ce6:	4b3d      	ldr	r3, [pc, #244]	; (d5ddc <setup+0x554>)
   d5ce8:	4658      	mov	r0, fp
   d5cea:	781b      	ldrb	r3, [r3, #0]
   d5cec:	9303      	str	r3, [sp, #12]
   d5cee:	f002 f94b 	bl	d7f88 <_ZN9TimeClass3dayEl>
   d5cf2:	9b03      	ldr	r3, [sp, #12]
   d5cf4:	4283      	cmp	r3, r0
   d5cf6:	d010      	beq.n	d5d1a <setup+0x492>
    resetEverything();                                                // Zero the counts for the new day
   d5cf8:	f7fe fc7e 	bl	d45f8 <_Z15resetEverythingv>
    if (solarPowerMode && !lowPowerMode) setLowPowerMode("1");        // If we are running on solar, we will reset to lowPowerMode at Midnight
   d5cfc:	f899 3000 	ldrb.w	r3, [r9]
   d5d00:	b15b      	cbz	r3, d5d1a <setup+0x492>
   d5d02:	783b      	ldrb	r3, [r7, #0]
   d5d04:	b94b      	cbnz	r3, d5d1a <setup+0x492>
   d5d06:	4938      	ldr	r1, [pc, #224]	; (d5de8 <setup+0x560>)
   d5d08:	4620      	mov	r0, r4
   d5d0a:	f002 f83b 	bl	d7d84 <_ZN6StringC1EPK19__FlashStringHelper>
   d5d0e:	4620      	mov	r0, r4
   d5d10:	f7ff f9ea 	bl	d50e8 <_Z15setLowPowerMode6String>
   d5d14:	4620      	mov	r0, r4
   d5d16:	f001 ffee 	bl	d7cf6 <_ZN6StringD1Ev>
  }
  if ((currentHourlyPeriod > closeTime || currentHourlyPeriod < openTime)) {}         // The park is closed - sleep
   d5d1a:	4b2f      	ldr	r3, [pc, #188]	; (d5dd8 <setup+0x550>)
   d5d1c:	682a      	ldr	r2, [r5, #0]
   d5d1e:	781b      	ldrb	r3, [r3, #0]
   d5d20:	4293      	cmp	r3, r2
   d5d22:	dc15      	bgt.n	d5d50 <setup+0x4c8>
   d5d24:	6832      	ldr	r2, [r6, #0]
   d5d26:	4293      	cmp	r3, r2
   d5d28:	db12      	blt.n	d5d50 <setup+0x4c8>
  else {                                                              // Park is open let's get ready for the day
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
   d5d2a:	2300      	movs	r3, #0
   d5d2c:	9300      	str	r3, [sp, #0]
   d5d2e:	2201      	movs	r2, #1
   d5d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5d34:	492d      	ldr	r1, [pc, #180]	; (d5dec <setup+0x564>)
   d5d36:	200c      	movs	r0, #12
   d5d38:	f001 fb3a 	bl	d73b0 <_Z15attachInterrupttPFvvE13InterruptModeah>
    if (connectionMode) connectToParticle();                          // Only going to connect if we are in connectionMode
   d5d3c:	f898 3000 	ldrb.w	r3, [r8]
   d5d40:	b10b      	cbz	r3, d5d46 <setup+0x4be>
   d5d42:	f7fe fead 	bl	d4aa0 <_Z17connectToParticlev>
    takeMeasurements();                                               // Populates values so you can read them before the hour
   d5d46:	f7fe fbad 	bl	d44a4 <_Z16takeMeasurementsv>
    stayAwake = stayAwakeLong;                                        // Keeps Electron awake after reboot - helps with recovery
   d5d4a:	4b29      	ldr	r3, [pc, #164]	; (d5df0 <setup+0x568>)
   d5d4c:	4a29      	ldr	r2, [pc, #164]	; (d5df4 <setup+0x56c>)
   d5d4e:	601a      	str	r2, [r3, #0]
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d5d50:	9b02      	ldr	r3, [sp, #8]
   d5d52:	681b      	ldr	r3, [r3, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d5d54:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
   d5d58:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   d5d5c:	f003 031f 	and.w	r3, r3, #31
   d5d60:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d5d64:	f7fe fa2f 	bl	d41c6 <nrf_gpio_pin_clear>
  }

  pinResetFast(ledPower);                                             // Turns off the LED on the sensor board

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d5d68:	f89a 3000 	ldrb.w	r3, [sl]
   d5d6c:	b913      	cbnz	r3, d5d74 <setup+0x4ec>
   d5d6e:	4b22      	ldr	r3, [pc, #136]	; (d5df8 <setup+0x570>)
   d5d70:	2202      	movs	r2, #2
   d5d72:	701a      	strb	r2, [r3, #0]

  petWatchdog();                                    // Pet the watchdog - not necessary in a power on event but just in case
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond

  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple Electrons share the same hook - keeps things straight
   d5d74:	a804      	add	r0, sp, #16
   d5d76:	f001 ffbe 	bl	d7cf6 <_ZN6StringD1Ev>
  }

  pinResetFast(ledPower);                                             // Turns off the LED on the sensor board

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
}
   d5d7a:	b02d      	add	sp, #180	; 0xb4
   d5d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  alerts = FRAMread8(FRAM::alertsCountAddr);                          // Load the alerts count
  resetCount = FRAMread8(FRAM::resetCountAddr);                       // Retrive system recount data from FRAM
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER)  // Check to see if we are starting from a pin reset or a reset in the sketch
  {
    resetCount++;
   d5d80:	6829      	ldr	r1, [r5, #0]
   d5d82:	3101      	adds	r1, #1
   d5d84:	6029      	str	r1, [r5, #0]
    FRAMwrite8(FRAM::resetCountAddr,static_cast<uint8_t>(resetCount));// If so, store incremented number - watchdog must have done This
   d5d86:	2003      	movs	r0, #3
   d5d88:	b2c9      	uxtb	r1, r1
   d5d8a:	f7fe fa63 	bl	d4254 <_Z10FRAMwrite8jh>
   d5d8e:	e705      	b.n	d5b9c <setup+0x314>
    connectionMode = true;                                            // Set the stage for the devic to get connected
    controlRegisterValue = (0b11111110 & controlRegisterValue);       // Turn off Low power mode
    controlRegisterValue = (0b00010000 | controlRegisterValue);       // Turn on the connectionMode
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);       // Write it to the register
    if ((Time.hour() > closeTime || Time.hour() < openTime))  {       // Device may also be sleeping due to time or TimeZone setting
      openTime = 0;                                                   // Only change these values if it is an issue
   d5d90:	2100      	movs	r1, #0
      FRAMwrite8(FRAM::openTimeAddr,0);                               // Reset open and close time values to ensure device is awake
   d5d92:	2005      	movs	r0, #5
    connectionMode = true;                                            // Set the stage for the devic to get connected
    controlRegisterValue = (0b11111110 & controlRegisterValue);       // Turn off Low power mode
    controlRegisterValue = (0b00010000 | controlRegisterValue);       // Turn on the connectionMode
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);       // Write it to the register
    if ((Time.hour() > closeTime || Time.hour() < openTime))  {       // Device may also be sleeping due to time or TimeZone setting
      openTime = 0;                                                   // Only change these values if it is an issue
   d5d94:	6031      	str	r1, [r6, #0]
      FRAMwrite8(FRAM::openTimeAddr,0);                               // Reset open and close time values to ensure device is awake
   d5d96:	f7fe fa5d 	bl	d4254 <_Z10FRAMwrite8jh>
      closeTime = 23;
   d5d9a:	2117      	movs	r1, #23
      FRAMwrite8(FRAM::closeTimeAddr,23);
   d5d9c:	2006      	movs	r0, #6
    controlRegisterValue = (0b00010000 | controlRegisterValue);       // Turn on the connectionMode
    FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);       // Write it to the register
    if ((Time.hour() > closeTime || Time.hour() < openTime))  {       // Device may also be sleeping due to time or TimeZone setting
      openTime = 0;                                                   // Only change these values if it is an issue
      FRAMwrite8(FRAM::openTimeAddr,0);                               // Reset open and close time values to ensure device is awake
      closeTime = 23;
   d5d9e:	6029      	str	r1, [r5, #0]
      FRAMwrite8(FRAM::closeTimeAddr,23);
   d5da0:	f7fe fa58 	bl	d4254 <_Z10FRAMwrite8jh>
   d5da4:	e79f      	b.n	d5ce6 <setup+0x45e>
   d5da6:	bf00      	nop
   d5da8:	2003e1d4 	.word	0x2003e1d4
   d5dac:	2003e1dc 	.word	0x2003e1dc
   d5db0:	2003e20e 	.word	0x2003e20e
   d5db4:	2003e25c 	.word	0x2003e25c
   d5db8:	2003e208 	.word	0x2003e208
   d5dbc:	2003e202 	.word	0x2003e202
   d5dc0:	408f4000 	.word	0x408f4000
   d5dc4:	000dbac8 	.word	0x000dbac8
   d5dc8:	2003e09c 	.word	0x2003e09c
   d5dcc:	2003e1a8 	.word	0x2003e1a8
   d5dd0:	2003e1f1 	.word	0x2003e1f1
   d5dd4:	2003e20c 	.word	0x2003e20c
   d5dd8:	2003e1f0 	.word	0x2003e1f0
   d5ddc:	2003e1cb 	.word	0x2003e1cb
   d5de0:	2003e198 	.word	0x2003e198
   d5de4:	2003e1d0 	.word	0x2003e1d0
   d5de8:	000dbd82 	.word	0x000dbd82
   d5dec:	000d4161 	.word	0x000d4161
   d5df0:	2003e1f4 	.word	0x2003e1f4
   d5df4:	00015f90 	.word	0x00015f90
   d5df8:	2003e1c9 	.word	0x2003e1c9
   d5dfc:	2003e1cc 	.word	0x2003e1cc
   d5e00:	2003e265 	.word	0x2003e265

000d5e04 <_GLOBAL__sub_I_fram>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5e04:	4b26      	ldr	r3, [pc, #152]	; (d5ea0 <_GLOBAL__sub_I_fram+0x9c>)
    lowPowerMode = true;
    controlRegisterValue = (0b11101111 & controlRegisterValue);       // Turn off connected mode 1 = connected and 0 = disconnected
    connectionMode = false;
  }
  FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);         // Write it to the register
}
   d5e06:	b570      	push	{r4, r5, r6, lr}
   d5e08:	2400      	movs	r4, #0
   d5e0a:	601c      	str	r4, [r3, #0]
   d5e0c:	4b25      	ldr	r3, [pc, #148]	; (d5ea4 <_GLOBAL__sub_I_fram+0xa0>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
   d5e0e:	4e26      	ldr	r6, [pc, #152]	; (d5ea8 <_GLOBAL__sub_I_fram+0xa4>)
   d5e10:	2501      	movs	r5, #1
   d5e12:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5e14:	f000 fac6 	bl	d63a4 <HAL_Pin_Map>
   d5e18:	4b24      	ldr	r3, [pc, #144]	; (d5eac <_GLOBAL__sub_I_fram+0xa8>)
   d5e1a:	6018      	str	r0, [r3, #0]
// FRAM Library Extensions Header File

Adafruit_FRAM_I2C fram = Adafruit_FRAM_I2C(); // Init the FRAM
   d5e1c:	4824      	ldr	r0, [pc, #144]	; (d5eb0 <_GLOBAL__sub_I_fram+0xac>)
   d5e1e:	f7fe f94e 	bl	d40be <_ZN17Adafruit_FRAM_I2CC1Ev>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5e22:	4b24      	ldr	r3, [pc, #144]	; (d5eb4 <_GLOBAL__sub_I_fram+0xb0>)
   d5e24:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5e28:	701c      	strb	r4, [r3, #0]
   d5e2a:	805c      	strh	r4, [r3, #2]
   d5e2c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5e2e:	2002      	movs	r0, #2
   d5e30:	f000 fc18 	bl	d6664 <set_system_mode>

const char releaseNumber[6] = "1";                  // Displays the release on the menu ****  this is not a production release ****

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5e34:	4621      	mov	r1, r4
   d5e36:	4628      	mov	r0, r5
   d5e38:	f000 fc2c 	bl	d6694 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d5e3c:	4629      	mov	r1, r5
   d5e3e:	2004      	movs	r0, #4
   d5e40:	f000 fa68 	bl	d6314 <HAL_Feature_Set>
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
   d5e44:	4d1c      	ldr	r5, [pc, #112]	; (d5eb8 <_GLOBAL__sub_I_fram+0xb4>)
   d5e46:	4621      	mov	r1, r4
   d5e48:	4630      	mov	r0, r6
   d5e4a:	f001 f9d1 	bl	d71f0 <_ZN9FuelGaugeC1Eb>
   d5e4e:	4630      	mov	r0, r6
PMIC power;                                         //Initalize the PMIC class so you can call the Power Management functions below.
   d5e50:	4e1a      	ldr	r6, [pc, #104]	; (d5ebc <_GLOBAL__sub_I_fram+0xb8>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
   d5e52:	491b      	ldr	r1, [pc, #108]	; (d5ec0 <_GLOBAL__sub_I_fram+0xbc>)
   d5e54:	462a      	mov	r2, r5
   d5e56:	f002 fb77 	bl	d8548 <__aeabi_atexit>
PMIC power;                                         //Initalize the PMIC class so you can call the Power Management functions below.
   d5e5a:	4621      	mov	r1, r4
   d5e5c:	4630      	mov	r0, r6
ConnectionEvents connectionEvents("connEventStats");// Connection events object
   d5e5e:	4c19      	ldr	r4, [pc, #100]	; (d5ec4 <_GLOBAL__sub_I_fram+0xc0>)
// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
PMIC power;                                         //Initalize the PMIC class so you can call the Power Management functions below.
   d5e60:	f001 fccf 	bl	d7802 <_ZN4PMICC1Eb>
   d5e64:	462a      	mov	r2, r5
   d5e66:	4918      	ldr	r1, [pc, #96]	; (d5ec8 <_GLOBAL__sub_I_fram+0xc4>)
   d5e68:	4630      	mov	r0, r6
   d5e6a:	f002 fb6d 	bl	d8548 <__aeabi_atexit>
ConnectionEvents connectionEvents("connEventStats");// Connection events object
   d5e6e:	4917      	ldr	r1, [pc, #92]	; (d5ecc <_GLOBAL__sub_I_fram+0xc8>)
   d5e70:	4620      	mov	r0, r4
   d5e72:	f000 f8eb 	bl	d604c <_ZN16ConnectionEventsC1EPKc>
   d5e76:	4620      	mov	r0, r4
BatteryCheck batteryCheck(15.0, 3600);
   d5e78:	4c15      	ldr	r4, [pc, #84]	; (d5ed0 <_GLOBAL__sub_I_fram+0xcc>)
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
PMIC power;                                         //Initalize the PMIC class so you can call the Power Management functions below.
ConnectionEvents connectionEvents("connEventStats");// Connection events object
   d5e7a:	4916      	ldr	r1, [pc, #88]	; (d5ed4 <_GLOBAL__sub_I_fram+0xd0>)
   d5e7c:	462a      	mov	r2, r5
   d5e7e:	f002 fb63 	bl	d8548 <__aeabi_atexit>
BatteryCheck batteryCheck(15.0, 3600);
   d5e82:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d5e86:	4620      	mov	r0, r4
   d5e88:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
   d5e8c:	f000 f83a 	bl	d5f04 <_ZN12BatteryCheckC1Efl>
   d5e90:	462a      	mov	r2, r5
   d5e92:	4620      	mov	r0, r4
   d5e94:	4910      	ldr	r1, [pc, #64]	; (d5ed8 <_GLOBAL__sub_I_fram+0xd4>)
    lowPowerMode = true;
    controlRegisterValue = (0b11101111 & controlRegisterValue);       // Turn off connected mode 1 = connected and 0 = disconnected
    connectionMode = false;
  }
  FRAMwrite8(FRAM::controlRegisterAddr,controlRegisterValue);         // Write it to the register
}
   d5e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
PMIC power;                                         //Initalize the PMIC class so you can call the Power Management functions below.
ConnectionEvents connectionEvents("connEventStats");// Connection events object
BatteryCheck batteryCheck(15.0, 3600);
   d5e9a:	f002 bb55 	b.w	d8548 <__aeabi_atexit>
   d5e9e:	bf00      	nop
   d5ea0:	2003e1f8 	.word	0x2003e1f8
   d5ea4:	2003e1ad 	.word	0x2003e1ad
   d5ea8:	2003e1b4 	.word	0x2003e1b4
   d5eac:	2003e204 	.word	0x2003e204
   d5eb0:	2003e1a4 	.word	0x2003e1a4
   d5eb4:	2003e1fc 	.word	0x2003e1fc
   d5eb8:	2003e194 	.word	0x2003e194
   d5ebc:	2003e1ca 	.word	0x2003e1ca
   d5ec0:	000d720f 	.word	0x000d720f
   d5ec4:	2003e1e0 	.word	0x2003e1e0
   d5ec8:	000d7821 	.word	0x000d7821
   d5ecc:	000dbd3f 	.word	0x000dbd3f
   d5ed0:	2003e268 	.word	0x2003e268
   d5ed4:	000d603d 	.word	0x000d603d
   d5ed8:	000d5ef3 	.word	0x000d5ef3

000d5edc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5edc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5ede:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5ee0:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5ee2:	b113      	cbz	r3, d5eea <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5ee4:	2203      	movs	r2, #3
   d5ee6:	4601      	mov	r1, r0
   d5ee8:	4798      	blx	r3
    }
   d5eea:	4620      	mov	r0, r4
   d5eec:	bd10      	pop	{r4, pc}

000d5eee <_GLOBAL__sub_I__ZN18AppWatchdogWrapperC2Em>:
   d5eee:	f000 ba59 	b.w	d63a4 <HAL_Pin_Map>

000d5ef2 <_ZN12BatteryCheckD1Ev>:


}
BatteryCheck::~BatteryCheck() {

}
   d5ef2:	4770      	bx	lr

000d5ef4 <_ZN12BatteryCheckD0Ev>:

BatteryCheck::BatteryCheck(float minimumSoC, long sleepTimeSecs) : minimumSoC(minimumSoC), sleepTimeSecs(sleepTimeSecs) {


}
BatteryCheck::~BatteryCheck() {
   d5ef4:	b510      	push	{r4, lr}

}
   d5ef6:	2110      	movs	r1, #16

BatteryCheck::BatteryCheck(float minimumSoC, long sleepTimeSecs) : minimumSoC(minimumSoC), sleepTimeSecs(sleepTimeSecs) {


}
BatteryCheck::~BatteryCheck() {
   d5ef8:	4604      	mov	r4, r0

}
   d5efa:	f002 fb2a 	bl	d8552 <_ZdlPvj>
   d5efe:	4620      	mov	r0, r4
   d5f00:	bd10      	pop	{r4, pc}
	...

000d5f04 <_ZN12BatteryCheckC1Efl>:
#include "ConnectionEvents.h"

static FuelGauge fuel;
static PMIC pmic;

BatteryCheck::BatteryCheck(float minimumSoC, long sleepTimeSecs) : minimumSoC(minimumSoC), sleepTimeSecs(sleepTimeSecs) {
   d5f04:	4a03      	ldr	r2, [pc, #12]	; (d5f14 <_ZN12BatteryCheckC1Efl+0x10>)
   d5f06:	6002      	str	r2, [r0, #0]
   d5f08:	2200      	movs	r2, #0
   d5f0a:	ed80 0a01 	vstr	s0, [r0, #4]
   d5f0e:	6081      	str	r1, [r0, #8]
   d5f10:	60c2      	str	r2, [r0, #12]


}
   d5f12:	4770      	bx	lr
   d5f14:	000dbd8c 	.word	0x000dbd8c

000d5f18 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv>:
		lastCheckMs = millis();
		checkAndSleepIfNecessary();
	}
}

void BatteryCheck::checkAndSleepIfNecessary() {
   d5f18:	b510      	push	{r4, lr}
   d5f1a:	ed2d 8b02 	vpush	{d8}
   d5f1e:	4604      	mov	r4, r0
   d5f20:	b082      	sub	sp, #8
	float soc = fuel.getSoC();
   d5f22:	4813      	ldr	r0, [pc, #76]	; (d5f70 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x58>)
   d5f24:	f001 f9a4 	bl	d7270 <_ZN9FuelGauge6getSoCEv>

	// There is an SoC, it's less than the minimum, and there's no external power (USB or VIN)
	if (soc != 0.0 && soc < minimumSoC && !pmic.isPowerGood()) {
   d5f28:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d5f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		checkAndSleepIfNecessary();
	}
}

void BatteryCheck::checkAndSleepIfNecessary() {
	float soc = fuel.getSoC();
   d5f30:	eeb0 8a40 	vmov.f32	s16, s0

	// There is an SoC, it's less than the minimum, and there's no external power (USB or VIN)
	if (soc != 0.0 && soc < minimumSoC && !pmic.isPowerGood()) {
   d5f34:	d018      	beq.n	d5f68 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x50>
   d5f36:	edd4 7a01 	vldr	s15, [r4, #4]
   d5f3a:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5f42:	d511      	bpl.n	d5f68 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x50>
   d5f44:	480b      	ldr	r0, [pc, #44]	; (d5f74 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x5c>)
   d5f46:	f001 fca4 	bl	d7892 <_ZN4PMIC11isPowerGoodEv>
   d5f4a:	b968      	cbnz	r0, d5f68 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x50>
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LOW_BATTERY_SLEEP, static_cast<int>(soc));
   d5f4c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   d5f50:	200d      	movs	r0, #13
   d5f52:	ee17 1a90 	vmov	r1, s15
   d5f56:	f000 f979 	bl	d624c <_ZN16ConnectionEvents8addEventEii>

		System.sleep(SLEEP_MODE_DEEP, sleepTimeSecs);
   d5f5a:	4b07      	ldr	r3, [pc, #28]	; (d5f78 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv+0x60>)
   d5f5c:	68a2      	ldr	r2, [r4, #8]
   d5f5e:	681b      	ldr	r3, [r3, #0]
   d5f60:	2101      	movs	r1, #1
   d5f62:	4668      	mov	r0, sp
   d5f64:	f001 ff6e 	bl	d7e44 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
	}

}
   d5f68:	b002      	add	sp, #8
   d5f6a:	ecbd 8b02 	vpop	{d8}
   d5f6e:	bd10      	pop	{r4, pc}
   d5f70:	2003e278 	.word	0x2003e278
   d5f74:	2003e284 	.word	0x2003e284
   d5f78:	2003e280 	.word	0x2003e280

000d5f7c <_ZN12BatteryCheck5setupEv>:
BatteryCheck::~BatteryCheck() {

}

void BatteryCheck::setup() {
	checkAndSleepIfNecessary();
   d5f7c:	f7ff bfcc 	b.w	d5f18 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv>

000d5f80 <_ZN12BatteryCheck4loopEv>:
}

void BatteryCheck::loop() {
   d5f80:	b510      	push	{r4, lr}
   d5f82:	4604      	mov	r4, r0
   d5f84:	f000 f9ee 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastCheckMs >= CHECK_PERIOD_MS) {
   d5f88:	68e3      	ldr	r3, [r4, #12]
   d5f8a:	1ac0      	subs	r0, r0, r3
   d5f8c:	f64e 235f 	movw	r3, #59999	; 0xea5f
   d5f90:	4298      	cmp	r0, r3
   d5f92:	d907      	bls.n	d5fa4 <_ZN12BatteryCheck4loopEv+0x24>
   d5f94:	f000 f9e6 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
		lastCheckMs = millis();
   d5f98:	60e0      	str	r0, [r4, #12]
		checkAndSleepIfNecessary();
   d5f9a:	4620      	mov	r0, r4
	}
}
   d5f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void BatteryCheck::loop() {
	if (millis() - lastCheckMs >= CHECK_PERIOD_MS) {
		lastCheckMs = millis();
		checkAndSleepIfNecessary();
   d5fa0:	f7ff bfba 	b.w	d5f18 <_ZN12BatteryCheck24checkAndSleepIfNecessaryEv>
   d5fa4:	bd10      	pop	{r4, pc}
	...

000d5fa8 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl>:
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LOW_BATTERY_SLEEP, static_cast<int>(soc));

		System.sleep(SLEEP_MODE_DEEP, sleepTimeSecs);
	}

}
   d5fa8:	b570      	push	{r4, r5, r6, lr}
   d5faa:	4b0e      	ldr	r3, [pc, #56]	; (d5fe4 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x3c>)
#include "BatteryCheck.h"

#include "ConnectionEvents.h"

static FuelGauge fuel;
   d5fac:	4d0e      	ldr	r5, [pc, #56]	; (d5fe8 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x40>)
   d5fae:	4e0f      	ldr	r6, [pc, #60]	; (d5fec <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x44>)
   d5fb0:	2400      	movs	r4, #0
   d5fb2:	601c      	str	r4, [r3, #0]
   d5fb4:	f000 f9f6 	bl	d63a4 <HAL_Pin_Map>
   d5fb8:	4621      	mov	r1, r4
   d5fba:	4628      	mov	r0, r5
   d5fbc:	f001 f918 	bl	d71f0 <_ZN9FuelGaugeC1Eb>
   d5fc0:	4628      	mov	r0, r5
static PMIC pmic;
   d5fc2:	4d0b      	ldr	r5, [pc, #44]	; (d5ff0 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x48>)
#include "BatteryCheck.h"

#include "ConnectionEvents.h"

static FuelGauge fuel;
   d5fc4:	490b      	ldr	r1, [pc, #44]	; (d5ff4 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x4c>)
   d5fc6:	4632      	mov	r2, r6
   d5fc8:	f002 fabe 	bl	d8548 <__aeabi_atexit>
static PMIC pmic;
   d5fcc:	4621      	mov	r1, r4
   d5fce:	4628      	mov	r0, r5
   d5fd0:	f001 fc17 	bl	d7802 <_ZN4PMICC1Eb>
   d5fd4:	4632      	mov	r2, r6
   d5fd6:	4628      	mov	r0, r5
   d5fd8:	4907      	ldr	r1, [pc, #28]	; (d5ff8 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x50>)
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LOW_BATTERY_SLEEP, static_cast<int>(soc));

		System.sleep(SLEEP_MODE_DEEP, sleepTimeSecs);
	}

}
   d5fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#include "BatteryCheck.h"

#include "ConnectionEvents.h"

static FuelGauge fuel;
static PMIC pmic;
   d5fde:	f002 bab3 	b.w	d8548 <__aeabi_atexit>
   d5fe2:	bf00      	nop
   d5fe4:	2003e280 	.word	0x2003e280
   d5fe8:	2003e278 	.word	0x2003e278
   d5fec:	2003e194 	.word	0x2003e194
   d5ff0:	2003e284 	.word	0x2003e284
   d5ff4:	000d720f 	.word	0x000d720f
   d5ff8:	000d7821 	.word	0x000d7821

000d5ffc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5ffc:	b40e      	push	{r1, r2, r3}
   d5ffe:	b500      	push	{lr}
   d6000:	b08c      	sub	sp, #48	; 0x30
   d6002:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d6004:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d6006:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d600a:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d600c:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d6010:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d6012:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d6014:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d6016:	aa04      	add	r2, sp, #16
   d6018:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d601a:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d601c:	f000 fb12 	bl	d6644 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d6020:	b00c      	add	sp, #48	; 0x30
   d6022:	f85d eb04 	ldr.w	lr, [sp], #4
   d6026:	b003      	add	sp, #12
   d6028:	4770      	bx	lr
	...

000d602c <_GLOBAL__sub_I__ZN15ConnectionCheck8instanceE>:
   d602c:	4b02      	ldr	r3, [pc, #8]	; (d6038 <_GLOBAL__sub_I__ZN15ConnectionCheck8instanceE+0xc>)
   d602e:	2200      	movs	r2, #0
   d6030:	601a      	str	r2, [r3, #0]
   d6032:	f000 b9b7 	b.w	d63a4 <HAL_Pin_Map>
   d6036:	bf00      	nop
   d6038:	2003e288 	.word	0x2003e288

000d603c <_ZN16ConnectionEventsD1Ev>:
	instance = this;
}

ConnectionEvents::~ConnectionEvents() {

}
   d603c:	4770      	bx	lr

000d603e <_ZN16ConnectionEventsD0Ev>:

ConnectionEvents::ConnectionEvents(const char *connectionEventName) : connectionEventName(connectionEventName) {
	instance = this;
}

ConnectionEvents::~ConnectionEvents() {
   d603e:	b510      	push	{r4, lr}

}
   d6040:	210c      	movs	r1, #12

ConnectionEvents::ConnectionEvents(const char *connectionEventName) : connectionEventName(connectionEventName) {
	instance = this;
}

ConnectionEvents::~ConnectionEvents() {
   d6042:	4604      	mov	r4, r0

}
   d6044:	f002 fa85 	bl	d8552 <_ZdlPvj>
   d6048:	4620      	mov	r0, r4
   d604a:	bd10      	pop	{r4, pc}

000d604c <_ZN16ConnectionEventsC1EPKc>:
retained ConnectionEventData ConnectionEvents::connectionEventData;

ConnectionEvents *ConnectionEvents::instance;


ConnectionEvents::ConnectionEvents(const char *connectionEventName) : connectionEventName(connectionEventName) {
   d604c:	4a03      	ldr	r2, [pc, #12]	; (d605c <_ZN16ConnectionEventsC1EPKc+0x10>)
   d604e:	6002      	str	r2, [r0, #0]
   d6050:	2200      	movs	r2, #0
   d6052:	6082      	str	r2, [r0, #8]
	instance = this;
   d6054:	4a02      	ldr	r2, [pc, #8]	; (d6060 <_ZN16ConnectionEventsC1EPKc+0x14>)
retained ConnectionEventData ConnectionEvents::connectionEventData;

ConnectionEvents *ConnectionEvents::instance;


ConnectionEvents::ConnectionEvents(const char *connectionEventName) : connectionEventName(connectionEventName) {
   d6056:	6041      	str	r1, [r0, #4]
	instance = this;
   d6058:	6010      	str	r0, [r2, #0]
}
   d605a:	4770      	bx	lr
   d605c:	000dbe4c 	.word	0x000dbe4c
   d6060:	2003e290 	.word	0x2003e290

000d6064 <_ZN16ConnectionEvents10canPublishEv>:

	Particle.publish(connectionEventName, buf, PRIVATE);
	completedPublish();
}

bool ConnectionEvents::canPublish() {
   d6064:	b510      	push	{r4, lr}
   d6066:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6068:	f000 fb7a 	bl	d6760 <spark_cloud_flag_connected>
	if (!Particle.connected()) {
   d606c:	b148      	cbz	r0, d6082 <_ZN16ConnectionEvents10canPublishEv+0x1e>
   d606e:	f000 f979 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
		// Not cloud connected, can't publish
		return false;
	}

	if (millis() - connectionEventLastSent < PUBLISH_MIN_PERIOD_MS) {
   d6072:	68a3      	ldr	r3, [r4, #8]
   d6074:	1ac0      	subs	r0, r0, r3
   d6076:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d607a:	4298      	cmp	r0, r3
   d607c:	bf94      	ite	ls
   d607e:	2000      	movls	r0, #0
   d6080:	2001      	movhi	r0, #1
		// Need to wait before sending again to avoid exceeding publish limits
		return false;
	}
	return true;
}
   d6082:	bd10      	pop	{r4, pc}

000d6084 <_ZN16ConnectionEvents16completedPublishEv>:

void ConnectionEvents::completedPublish() {
   d6084:	b510      	push	{r4, lr}
   d6086:	4604      	mov	r4, r0
   d6088:	f000 f96c 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
	connectionEventLastSent = millis();
   d608c:	60a0      	str	r0, [r4, #8]
   d608e:	bd10      	pop	{r4, pc}

000d6090 <_ZN16ConnectionEvents4loopEv>:
	}
}

// This should be called from loop()
// If there are queued events and there is a cloud connection they're published, oldest first.
void ConnectionEvents::loop() {
   d6090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	if (connectionEventData.eventCount == 0) {
   d6094:	4d34      	ldr	r5, [pc, #208]	; (d6168 <_ZN16ConnectionEvents4loopEv+0xd8>)
   d6096:	686b      	ldr	r3, [r5, #4]
	}
}

// This should be called from loop()
// If there are queued events and there is a cloud connection they're published, oldest first.
void ConnectionEvents::loop() {
   d6098:	b0d5      	sub	sp, #340	; 0x154
   d609a:	4607      	mov	r7, r0

	if (connectionEventData.eventCount == 0) {
   d609c:	2b00      	cmp	r3, #0
   d609e:	d05f      	beq.n	d6160 <_ZN16ConnectionEvents4loopEv+0xd0>
		// No events to send
		return;
	}

	if (!canPublish()) {
   d60a0:	f7ff ffe0 	bl	d6064 <_ZN16ConnectionEvents10canPublishEv>
   d60a4:	2800      	cmp	r0, #0
   d60a6:	d05b      	beq.n	d6160 <_ZN16ConnectionEvents4loopEv+0xd0>
   d60a8:	f04f 0800 	mov.w	r8, #0
   d60ac:	462e      	mov	r6, r5
   d60ae:	4644      	mov	r4, r8
	char buf[256]; // 255 data bytes, plus null-terminator
	size_t numHandled;
	size_t offset = 0;

	// Pack as many events as we have, up to what will fit in a 255 byte publish
	for(numHandled = 0; numHandled < connectionEventData.eventCount; numHandled++) {
   d60b0:	686b      	ldr	r3, [r5, #4]
   d60b2:	429c      	cmp	r4, r3
   d60b4:	d21b      	bcs.n	d60ee <_ZN16ConnectionEvents4loopEv+0x5e>
		char entryBuf[64];

		ConnectionEventInfo *ev = &connectionEventData.events[numHandled];
		size_t len = snprintf(entryBuf, sizeof(entryBuf), "%lu,%lu,%d,%d;", ev->tsDate, ev->tsMillis, ev->eventCode, ev->data);
   d60b6:	6973      	ldr	r3, [r6, #20]
   d60b8:	9302      	str	r3, [sp, #8]
   d60ba:	6933      	ldr	r3, [r6, #16]
   d60bc:	9301      	str	r3, [sp, #4]
   d60be:	68f3      	ldr	r3, [r6, #12]
   d60c0:	9300      	str	r3, [sp, #0]
   d60c2:	68b3      	ldr	r3, [r6, #8]
   d60c4:	4a29      	ldr	r2, [pc, #164]	; (d616c <_ZN16ConnectionEvents4loopEv+0xdc>)
   d60c6:	2140      	movs	r1, #64	; 0x40
   d60c8:	a804      	add	r0, sp, #16
   d60ca:	f000 fbf9 	bl	d68c0 <snprintf>
		if ((offset + len) >= sizeof(buf)) {
   d60ce:	eb00 0908 	add.w	r9, r0, r8
   d60d2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d60d6:	f106 0610 	add.w	r6, r6, #16
   d60da:	d808      	bhi.n	d60ee <_ZN16ConnectionEvents4loopEv+0x5e>
			// Not enough buffer space to send in this publish; try again later
			break;
		}
		strcpy(&buf[offset], entryBuf);
   d60dc:	ab14      	add	r3, sp, #80	; 0x50
   d60de:	eb03 0008 	add.w	r0, r3, r8
   d60e2:	a904      	add	r1, sp, #16
   d60e4:	f003 fa2c 	bl	d9540 <strcpy>
	char buf[256]; // 255 data bytes, plus null-terminator
	size_t numHandled;
	size_t offset = 0;

	// Pack as many events as we have, up to what will fit in a 255 byte publish
	for(numHandled = 0; numHandled < connectionEventData.eventCount; numHandled++) {
   d60e8:	3401      	adds	r4, #1
   d60ea:	46c8      	mov	r8, r9
   d60ec:	e7e0      	b.n	d60b0 <_ZN16ConnectionEvents4loopEv+0x20>
			break;
		}
		strcpy(&buf[offset], entryBuf);
		offset += len;
	}
	connectionEventData.eventCount -= numHandled;
   d60ee:	686a      	ldr	r2, [r5, #4]
   d60f0:	4e1d      	ldr	r6, [pc, #116]	; (d6168 <_ZN16ConnectionEvents4loopEv+0xd8>)
   d60f2:	1b12      	subs	r2, r2, r4
   d60f4:	606a      	str	r2, [r5, #4]
	if (connectionEventData.eventCount > 0) {
   d60f6:	b17a      	cbz	r2, d6118 <_ZN16ConnectionEvents4loopEv+0x88>
		Log.info("couldn't send all events, saving %d for later", connectionEventData.eventCount);
   d60f8:	491d      	ldr	r1, [pc, #116]	; (d6170 <_ZN16ConnectionEvents4loopEv+0xe0>)
   d60fa:	481e      	ldr	r0, [pc, #120]	; (d6174 <_ZN16ConnectionEvents4loopEv+0xe4>)
   d60fc:	f7ff ff7e 	bl	d5ffc <_ZNK5spark6Logger4infoEPKcz>
		memmove(&connectionEventData.events[0], &connectionEventData.events[numHandled], connectionEventData.eventCount * sizeof(ConnectionEventData));
   d6100:	6873      	ldr	r3, [r6, #4]
   d6102:	eb06 1104 	add.w	r1, r6, r4, lsl #4
   d6106:	f44f 7202 	mov.w	r2, #520	; 0x208
   d610a:	435a      	muls	r2, r3
   d610c:	3108      	adds	r1, #8
   d610e:	f106 0008 	add.w	r0, r6, #8
   d6112:	f003 f9c0 	bl	d9496 <memmove>
   d6116:	e004      	b.n	d6122 <_ZN16ConnectionEvents4loopEv+0x92>
	}
	else {
		Log.info("sent %d events", numHandled);
   d6118:	4622      	mov	r2, r4
   d611a:	4917      	ldr	r1, [pc, #92]	; (d6178 <_ZN16ConnectionEvents4loopEv+0xe8>)
   d611c:	4815      	ldr	r0, [pc, #84]	; (d6174 <_ZN16ConnectionEvents4loopEv+0xe4>)
   d611e:	f7ff ff6d 	bl	d5ffc <_ZNK5spark6Logger4infoEPKcz>
   d6122:	4b16      	ldr	r3, [pc, #88]	; (d617c <_ZN16ConnectionEvents4loopEv+0xec>)
   d6124:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d6126:	f88d 3000 	strb.w	r3, [sp]
   d612a:	aa14      	add	r2, sp, #80	; 0x50
   d612c:	233c      	movs	r3, #60	; 0x3c
   d612e:	6879      	ldr	r1, [r7, #4]
   d6130:	a804      	add	r0, sp, #16
   d6132:	f000 fe91 	bl	d6e58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d6136:	9c05      	ldr	r4, [sp, #20]
   d6138:	b17c      	cbz	r4, d615a <_ZN16ConnectionEvents4loopEv+0xca>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d613a:	6863      	ldr	r3, [r4, #4]
   d613c:	3b01      	subs	r3, #1
   d613e:	6063      	str	r3, [r4, #4]
   d6140:	b95b      	cbnz	r3, d615a <_ZN16ConnectionEvents4loopEv+0xca>
        {
          _M_dispose();
   d6142:	6823      	ldr	r3, [r4, #0]
   d6144:	4620      	mov	r0, r4
   d6146:	689b      	ldr	r3, [r3, #8]
   d6148:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d614a:	68a3      	ldr	r3, [r4, #8]
   d614c:	3b01      	subs	r3, #1
   d614e:	60a3      	str	r3, [r4, #8]
   d6150:	b91b      	cbnz	r3, d615a <_ZN16ConnectionEvents4loopEv+0xca>
            _M_destroy();
   d6152:	6823      	ldr	r3, [r4, #0]
   d6154:	4620      	mov	r0, r4
   d6156:	68db      	ldr	r3, [r3, #12]
   d6158:	4798      	blx	r3
	}

	Particle.publish(connectionEventName, buf, PRIVATE);
	completedPublish();
   d615a:	4638      	mov	r0, r7
   d615c:	f7ff ff92 	bl	d6084 <_ZN16ConnectionEvents16completedPublishEv>
}
   d6160:	b055      	add	sp, #340	; 0x154
   d6162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6166:	bf00      	nop
   d6168:	2003f400 	.word	0x2003f400
   d616c:	000dbd94 	.word	0x000dbd94
   d6170:	000dbda3 	.word	0x000dbda3
   d6174:	2003e36c 	.word	0x2003e36c
   d6178:	000dbdd1 	.word	0x000dbdd1
   d617c:	2003e28c 	.word	0x2003e28c

000d6180 <_ZN16ConnectionEvents3addEii>:
}


// Add a new event. This should only be called from the main loop thread.
// Do not call from other threads like the system thread, software timer, or interrupt service routine.
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
   d6180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
   d6184:	4c16      	ldr	r4, [pc, #88]	; (d61e0 <_ZN16ConnectionEvents3addEii+0x60>)
   d6186:	6863      	ldr	r3, [r4, #4]
   d6188:	2b1f      	cmp	r3, #31
}


// Add a new event. This should only be called from the main loop thread.
// Do not call from other threads like the system thread, software timer, or interrupt service routine.
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
   d618a:	460f      	mov	r7, r1
   d618c:	4690      	mov	r8, r2
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
   d618e:	d90f      	bls.n	d61b0 <_ZN16ConnectionEvents3addEii+0x30>
		// Throw out oldest event
		Log.info("discarding old event");
   d6190:	4914      	ldr	r1, [pc, #80]	; (d61e4 <_ZN16ConnectionEvents3addEii+0x64>)
   d6192:	4815      	ldr	r0, [pc, #84]	; (d61e8 <_ZN16ConnectionEvents3addEii+0x68>)
   d6194:	f7ff ff32 	bl	d5ffc <_ZNK5spark6Logger4infoEPKcz>
		connectionEventData.eventCount--;
   d6198:	6863      	ldr	r3, [r4, #4]
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
   d619a:	f44f 7202 	mov.w	r2, #520	; 0x208
// Do not call from other threads like the system thread, software timer, or interrupt service routine.
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
		// Throw out oldest event
		Log.info("discarding old event");
		connectionEventData.eventCount--;
   d619e:	3b01      	subs	r3, #1
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
   d61a0:	435a      	muls	r2, r3
   d61a2:	f104 0118 	add.w	r1, r4, #24
   d61a6:	f104 0008 	add.w	r0, r4, #8
// Do not call from other threads like the system thread, software timer, or interrupt service routine.
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
		// Throw out oldest event
		Log.info("discarding old event");
		connectionEventData.eventCount--;
   d61aa:	6063      	str	r3, [r4, #4]
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
   d61ac:	f003 f973 	bl	d9496 <memmove>
	}

	// Add new event
	ConnectionEventInfo *ev = &connectionEventData.events[connectionEventData.eventCount++];
   d61b0:	6866      	ldr	r6, [r4, #4]
   d61b2:	1c75      	adds	r5, r6, #1
   d61b4:	6065      	str	r5, [r4, #4]
	ev->tsDate = Time.now();
   d61b6:	f001 ff4e 	bl	d8056 <_ZN9TimeClass3nowEv>
   d61ba:	eb04 1606 	add.w	r6, r4, r6, lsl #4
	ev->tsMillis = millis();
	ev->eventCode = eventCode;
   d61be:	012d      	lsls	r5, r5, #4
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
	}

	// Add new event
	ConnectionEventInfo *ev = &connectionEventData.events[connectionEventData.eventCount++];
	ev->tsDate = Time.now();
   d61c0:	60b0      	str	r0, [r6, #8]
   d61c2:	f000 f8cf 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
	ev->tsMillis = millis();
	ev->eventCode = eventCode;
   d61c6:	1963      	adds	r3, r4, r5
	}

	// Add new event
	ConnectionEventInfo *ev = &connectionEventData.events[connectionEventData.eventCount++];
	ev->tsDate = Time.now();
	ev->tsMillis = millis();
   d61c8:	60f0      	str	r0, [r6, #12]
	ev->eventCode = eventCode;
	ev->data = data;
   d61ca:	f8c3 8004 	str.w	r8, [r3, #4]

	// Add new event
	ConnectionEventInfo *ev = &connectionEventData.events[connectionEventData.eventCount++];
	ev->tsDate = Time.now();
	ev->tsMillis = millis();
	ev->eventCode = eventCode;
   d61ce:	5167      	str	r7, [r4, r5]
	ev->data = data;

	Log.info("connectionEvent event=%d data=%d", eventCode, data);
   d61d0:	4643      	mov	r3, r8
   d61d2:	463a      	mov	r2, r7
   d61d4:	4905      	ldr	r1, [pc, #20]	; (d61ec <_ZN16ConnectionEvents3addEii+0x6c>)
   d61d6:	4804      	ldr	r0, [pc, #16]	; (d61e8 <_ZN16ConnectionEvents3addEii+0x68>)
   d61d8:	f7ff ff10 	bl	d5ffc <_ZNK5spark6Logger4infoEPKcz>
   d61dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d61e0:	2003f400 	.word	0x2003f400
   d61e4:	000dbde0 	.word	0x000dbde0
   d61e8:	2003e36c 	.word	0x2003e36c
   d61ec:	000dbdf5 	.word	0x000dbdf5

000d61f0 <_ZN16ConnectionEvents5setupEv>:
}



// This should be called during setup()
void ConnectionEvents::setup() {
   d61f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (connectionEventData.eventMagic != CONNECTION_EVENT_MAGIC ||
   d61f2:	4c12      	ldr	r4, [pc, #72]	; (d623c <_ZN16ConnectionEvents5setupEv+0x4c>)
   d61f4:	4b12      	ldr	r3, [pc, #72]	; (d6240 <_ZN16ConnectionEvents5setupEv+0x50>)
   d61f6:	6822      	ldr	r2, [r4, #0]
   d61f8:	429a      	cmp	r2, r3
}



// This should be called during setup()
void ConnectionEvents::setup() {
   d61fa:	4606      	mov	r6, r0
   d61fc:	461d      	mov	r5, r3
	if (connectionEventData.eventMagic != CONNECTION_EVENT_MAGIC ||
   d61fe:	d102      	bne.n	d6206 <_ZN16ConnectionEvents5setupEv+0x16>
   d6200:	6863      	ldr	r3, [r4, #4]
   d6202:	2b20      	cmp	r3, #32
   d6204:	d906      	bls.n	d6214 <_ZN16ConnectionEvents5setupEv+0x24>
		connectionEventData.eventCount > CONNECTION_EVENTS_MAX_EVENTS) {
		//
		Log.info("initializing connection event retained memory");
   d6206:	490f      	ldr	r1, [pc, #60]	; (d6244 <_ZN16ConnectionEvents5setupEv+0x54>)
   d6208:	480f      	ldr	r0, [pc, #60]	; (d6248 <_ZN16ConnectionEvents5setupEv+0x58>)
   d620a:	f7ff fef7 	bl	d5ffc <_ZNK5spark6Logger4infoEPKcz>
		connectionEventData.eventMagic = CONNECTION_EVENT_MAGIC;
		connectionEventData.eventCount = 0;
   d620e:	2300      	movs	r3, #0
void ConnectionEvents::setup() {
	if (connectionEventData.eventMagic != CONNECTION_EVENT_MAGIC ||
		connectionEventData.eventCount > CONNECTION_EVENTS_MAX_EVENTS) {
		//
		Log.info("initializing connection event retained memory");
		connectionEventData.eventMagic = CONNECTION_EVENT_MAGIC;
   d6210:	6025      	str	r5, [r4, #0]
		connectionEventData.eventCount = 0;
   d6212:	6063      	str	r3, [r4, #4]
	}
	add(CONNECTION_EVENT_SETUP_STARTED);
   d6214:	2200      	movs	r2, #0
   d6216:	4611      	mov	r1, r2
   d6218:	4630      	mov	r0, r6
   d621a:	f7ff ffb1 	bl	d6180 <_ZN16ConnectionEvents3addEii>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d621e:	a802      	add	r0, sp, #8
   d6220:	2200      	movs	r2, #0
   d6222:	f840 2d04 	str.w	r2, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d6226:	4611      	mov	r1, r2
   d6228:	f000 f884 	bl	d6334 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d622c:	9a01      	ldr	r2, [sp, #4]

	int resetReason = System.resetReason();
	if (resetReason != RESET_REASON_NONE) {
   d622e:	b11a      	cbz	r2, d6238 <_ZN16ConnectionEvents5setupEv+0x48>
		add(CONNECTION_EVENT_RESET_REASON, resetReason);
   d6230:	2112      	movs	r1, #18
   d6232:	4630      	mov	r0, r6
   d6234:	f7ff ffa4 	bl	d6180 <_ZN16ConnectionEvents3addEii>
	}
}
   d6238:	b002      	add	sp, #8
   d623a:	bd70      	pop	{r4, r5, r6, pc}
   d623c:	2003f400 	.word	0x2003f400
   d6240:	5c39d416 	.word	0x5c39d416
   d6244:	000dbe16 	.word	0x000dbe16
   d6248:	2003e36c 	.word	0x2003e36c

000d624c <_ZN16ConnectionEvents8addEventEii>:
	Log.info("connectionEvent event=%d data=%d", eventCode, data);
}

// static
void ConnectionEvents::addEvent(int eventCode, int data) {
	if (instance) {
   d624c:	4b04      	ldr	r3, [pc, #16]	; (d6260 <_ZN16ConnectionEvents8addEventEii+0x14>)
   d624e:	681b      	ldr	r3, [r3, #0]

	Log.info("connectionEvent event=%d data=%d", eventCode, data);
}

// static
void ConnectionEvents::addEvent(int eventCode, int data) {
   d6250:	460a      	mov	r2, r1
	if (instance) {
   d6252:	b11b      	cbz	r3, d625c <_ZN16ConnectionEvents8addEventEii+0x10>
		instance->add(eventCode, data);
   d6254:	4601      	mov	r1, r0
   d6256:	4618      	mov	r0, r3
   d6258:	f7ff bf92 	b.w	d6180 <_ZN16ConnectionEvents3addEii>
   d625c:	4770      	bx	lr
   d625e:	bf00      	nop
   d6260:	2003e290 	.word	0x2003e290

000d6264 <_GLOBAL__sub_I__ZN16ConnectionEvents19connectionEventDataE>:
   d6264:	4b02      	ldr	r3, [pc, #8]	; (d6270 <_GLOBAL__sub_I__ZN16ConnectionEvents19connectionEventDataE+0xc>)
   d6266:	2201      	movs	r2, #1
   d6268:	701a      	strb	r2, [r3, #0]
   d626a:	f000 b89b 	b.w	d63a4 <HAL_Pin_Map>
   d626e:	bf00      	nop
   d6270:	2003e28c 	.word	0x2003e28c

000d6274 <_GLOBAL__sub_I__ZN12SessionCheck19sessionRetainedDataE>:
   d6274:	4b02      	ldr	r3, [pc, #8]	; (d6280 <_GLOBAL__sub_I__ZN12SessionCheck19sessionRetainedDataE+0xc>)
   d6276:	2201      	movs	r2, #1
   d6278:	701a      	strb	r2, [r3, #0]
   d627a:	f000 b893 	b.w	d63a4 <HAL_Pin_Map>
   d627e:	bf00      	nop
   d6280:	2003e294 	.word	0x2003e294

000d6284 <_GLOBAL__sub_I__ZN6TesterC2EPKci>:
   d6284:	4b04      	ldr	r3, [pc, #16]	; (d6298 <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x14>)
   d6286:	2200      	movs	r2, #0
   d6288:	601a      	str	r2, [r3, #0]
   d628a:	4a04      	ldr	r2, [pc, #16]	; (d629c <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x18>)
   d628c:	2301      	movs	r3, #1
   d628e:	6013      	str	r3, [r2, #0]
   d6290:	4a03      	ldr	r2, [pc, #12]	; (d62a0 <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x1c>)
   d6292:	7013      	strb	r3, [r2, #0]
   d6294:	f000 b886 	b.w	d63a4 <HAL_Pin_Map>
   d6298:	2003e298 	.word	0x2003e298
   d629c:	2003e29c 	.word	0x2003e29c
   d62a0:	2003e295 	.word	0x2003e295

000d62a4 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d62a4:	b508      	push	{r3, lr}
   d62a6:	4b02      	ldr	r3, [pc, #8]	; (d62b0 <cellular_signal+0xc>)
   d62a8:	681b      	ldr	r3, [r3, #0]
   d62aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d62ac:	9301      	str	r3, [sp, #4]
   d62ae:	bd08      	pop	{r3, pc}
   d62b0:	00030274 	.word	0x00030274

000d62b4 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d62b4:	b508      	push	{r3, lr}
   d62b6:	4b02      	ldr	r3, [pc, #8]	; (d62c0 <cellular_command+0xc>)
   d62b8:	681b      	ldr	r3, [r3, #0]
   d62ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d62bc:	9301      	str	r3, [sp, #4]
   d62be:	bd08      	pop	{r3, pc}
   d62c0:	00030274 	.word	0x00030274

000d62c4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d62c4:	b508      	push	{r3, lr}
   d62c6:	4b02      	ldr	r3, [pc, #8]	; (d62d0 <os_thread_is_current+0xc>)
   d62c8:	681b      	ldr	r3, [r3, #0]
   d62ca:	689b      	ldr	r3, [r3, #8]
   d62cc:	9301      	str	r3, [sp, #4]
   d62ce:	bd08      	pop	{r3, pc}
   d62d0:	00030248 	.word	0x00030248

000d62d4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d62d4:	b508      	push	{r3, lr}
   d62d6:	4b02      	ldr	r3, [pc, #8]	; (d62e0 <os_thread_join+0xc>)
   d62d8:	681b      	ldr	r3, [r3, #0]
   d62da:	691b      	ldr	r3, [r3, #16]
   d62dc:	9301      	str	r3, [sp, #4]
   d62de:	bd08      	pop	{r3, pc}
   d62e0:	00030248 	.word	0x00030248

000d62e4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d62e4:	b508      	push	{r3, lr}
   d62e6:	4b02      	ldr	r3, [pc, #8]	; (d62f0 <os_thread_cleanup+0xc>)
   d62e8:	681b      	ldr	r3, [r3, #0]
   d62ea:	695b      	ldr	r3, [r3, #20]
   d62ec:	9301      	str	r3, [sp, #4]
   d62ee:	bd08      	pop	{r3, pc}
   d62f0:	00030248 	.word	0x00030248

000d62f4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d62f4:	b508      	push	{r3, lr}
   d62f6:	4b02      	ldr	r3, [pc, #8]	; (d6300 <os_mutex_create+0xc>)
   d62f8:	681b      	ldr	r3, [r3, #0]
   d62fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d62fc:	9301      	str	r3, [sp, #4]
   d62fe:	bd08      	pop	{r3, pc}
   d6300:	00030248 	.word	0x00030248

000d6304 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6304:	b508      	push	{r3, lr}
   d6306:	4b02      	ldr	r3, [pc, #8]	; (d6310 <os_mutex_recursive_create+0xc>)
   d6308:	681b      	ldr	r3, [r3, #0]
   d630a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d630c:	9301      	str	r3, [sp, #4]
   d630e:	bd08      	pop	{r3, pc}
   d6310:	00030248 	.word	0x00030248

000d6314 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d6314:	b508      	push	{r3, lr}
   d6316:	4b02      	ldr	r3, [pc, #8]	; (d6320 <HAL_Feature_Set+0xc>)
   d6318:	681b      	ldr	r3, [r3, #0]
   d631a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d631c:	9301      	str	r3, [sp, #4]
   d631e:	bd08      	pop	{r3, pc}
   d6320:	00030234 	.word	0x00030234

000d6324 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d6324:	b508      	push	{r3, lr}
   d6326:	4b02      	ldr	r3, [pc, #8]	; (d6330 <HAL_Core_System_Reset_Ex+0xc>)
   d6328:	681b      	ldr	r3, [r3, #0]
   d632a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d632c:	9301      	str	r3, [sp, #4]
   d632e:	bd08      	pop	{r3, pc}
   d6330:	00030234 	.word	0x00030234

000d6334 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d6334:	b508      	push	{r3, lr}
   d6336:	4b02      	ldr	r3, [pc, #8]	; (d6340 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d6338:	681b      	ldr	r3, [r3, #0]
   d633a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d633c:	9301      	str	r3, [sp, #4]
   d633e:	bd08      	pop	{r3, pc}
   d6340:	00030234 	.word	0x00030234

000d6344 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6344:	b508      	push	{r3, lr}
   d6346:	4b02      	ldr	r3, [pc, #8]	; (d6350 <HAL_RNG_GetRandomNumber+0xc>)
   d6348:	681b      	ldr	r3, [r3, #0]
   d634a:	685b      	ldr	r3, [r3, #4]
   d634c:	9301      	str	r3, [sp, #4]
   d634e:	bd08      	pop	{r3, pc}
   d6350:	00030218 	.word	0x00030218

000d6354 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6354:	b508      	push	{r3, lr}
   d6356:	4b02      	ldr	r3, [pc, #8]	; (d6360 <HAL_Delay_Microseconds+0xc>)
   d6358:	681b      	ldr	r3, [r3, #0]
   d635a:	68db      	ldr	r3, [r3, #12]
   d635c:	9301      	str	r3, [sp, #4]
   d635e:	bd08      	pop	{r3, pc}
   d6360:	00030218 	.word	0x00030218

000d6364 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6364:	b508      	push	{r3, lr}
   d6366:	4b02      	ldr	r3, [pc, #8]	; (d6370 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6368:	681b      	ldr	r3, [r3, #0]
   d636a:	695b      	ldr	r3, [r3, #20]
   d636c:	9301      	str	r3, [sp, #4]
   d636e:	bd08      	pop	{r3, pc}
   d6370:	00030218 	.word	0x00030218

000d6374 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d6374:	b508      	push	{r3, lr}
   d6376:	4b02      	ldr	r3, [pc, #8]	; (d6380 <HAL_RTC_Get_UnixTime+0xc>)
   d6378:	681b      	ldr	r3, [r3, #0]
   d637a:	69db      	ldr	r3, [r3, #28]
   d637c:	9301      	str	r3, [sp, #4]
   d637e:	bd08      	pop	{r3, pc}
   d6380:	00030218 	.word	0x00030218

000d6384 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d6384:	b508      	push	{r3, lr}
   d6386:	4b02      	ldr	r3, [pc, #8]	; (d6390 <HAL_RTC_Time_Is_Valid+0xc>)
   d6388:	681b      	ldr	r3, [r3, #0]
   d638a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d638c:	9301      	str	r3, [sp, #4]
   d638e:	bd08      	pop	{r3, pc}
   d6390:	00030218 	.word	0x00030218

000d6394 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d6394:	b508      	push	{r3, lr}
   d6396:	4b02      	ldr	r3, [pc, #8]	; (d63a0 <hal_timer_millis+0xc>)
   d6398:	681b      	ldr	r3, [r3, #0]
   d639a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d639c:	9301      	str	r3, [sp, #4]
   d639e:	bd08      	pop	{r3, pc}
   d63a0:	00030218 	.word	0x00030218

000d63a4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d63a4:	b508      	push	{r3, lr}
   d63a6:	4b02      	ldr	r3, [pc, #8]	; (d63b0 <HAL_Pin_Map+0xc>)
   d63a8:	681b      	ldr	r3, [r3, #0]
   d63aa:	681b      	ldr	r3, [r3, #0]
   d63ac:	9301      	str	r3, [sp, #4]
   d63ae:	bd08      	pop	{r3, pc}
   d63b0:	0003022c 	.word	0x0003022c

000d63b4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d63b4:	b508      	push	{r3, lr}
   d63b6:	4b02      	ldr	r3, [pc, #8]	; (d63c0 <HAL_Validate_Pin_Function+0xc>)
   d63b8:	681b      	ldr	r3, [r3, #0]
   d63ba:	685b      	ldr	r3, [r3, #4]
   d63bc:	9301      	str	r3, [sp, #4]
   d63be:	bd08      	pop	{r3, pc}
   d63c0:	0003022c 	.word	0x0003022c

000d63c4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d63c4:	b508      	push	{r3, lr}
   d63c6:	4b02      	ldr	r3, [pc, #8]	; (d63d0 <HAL_Pin_Mode+0xc>)
   d63c8:	681b      	ldr	r3, [r3, #0]
   d63ca:	689b      	ldr	r3, [r3, #8]
   d63cc:	9301      	str	r3, [sp, #4]
   d63ce:	bd08      	pop	{r3, pc}
   d63d0:	0003022c 	.word	0x0003022c

000d63d4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d63d4:	b508      	push	{r3, lr}
   d63d6:	4b02      	ldr	r3, [pc, #8]	; (d63e0 <HAL_Get_Pin_Mode+0xc>)
   d63d8:	681b      	ldr	r3, [r3, #0]
   d63da:	68db      	ldr	r3, [r3, #12]
   d63dc:	9301      	str	r3, [sp, #4]
   d63de:	bd08      	pop	{r3, pc}
   d63e0:	0003022c 	.word	0x0003022c

000d63e4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d63e4:	b508      	push	{r3, lr}
   d63e6:	4b02      	ldr	r3, [pc, #8]	; (d63f0 <HAL_GPIO_Write+0xc>)
   d63e8:	681b      	ldr	r3, [r3, #0]
   d63ea:	691b      	ldr	r3, [r3, #16]
   d63ec:	9301      	str	r3, [sp, #4]
   d63ee:	bd08      	pop	{r3, pc}
   d63f0:	0003022c 	.word	0x0003022c

000d63f4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d63f4:	b508      	push	{r3, lr}
   d63f6:	4b02      	ldr	r3, [pc, #8]	; (d6400 <HAL_GPIO_Read+0xc>)
   d63f8:	681b      	ldr	r3, [r3, #0]
   d63fa:	695b      	ldr	r3, [r3, #20]
   d63fc:	9301      	str	r3, [sp, #4]
   d63fe:	bd08      	pop	{r3, pc}
   d6400:	0003022c 	.word	0x0003022c

000d6404 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d6404:	b508      	push	{r3, lr}
   d6406:	4b02      	ldr	r3, [pc, #8]	; (d6410 <HAL_Interrupts_Attach+0xc>)
   d6408:	681b      	ldr	r3, [r3, #0]
   d640a:	699b      	ldr	r3, [r3, #24]
   d640c:	9301      	str	r3, [sp, #4]
   d640e:	bd08      	pop	{r3, pc}
   d6410:	0003022c 	.word	0x0003022c

000d6414 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
   d6414:	b508      	push	{r3, lr}
   d6416:	4b02      	ldr	r3, [pc, #8]	; (d6420 <HAL_Interrupts_Detach+0xc>)
   d6418:	681b      	ldr	r3, [r3, #0]
   d641a:	69db      	ldr	r3, [r3, #28]
   d641c:	9301      	str	r3, [sp, #4]
   d641e:	bd08      	pop	{r3, pc}
   d6420:	0003022c 	.word	0x0003022c

000d6424 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d6424:	b508      	push	{r3, lr}
   d6426:	4b02      	ldr	r3, [pc, #8]	; (d6430 <HAL_ADC_Read+0xc>)
   d6428:	681b      	ldr	r3, [r3, #0]
   d642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d642c:	9301      	str	r3, [sp, #4]
   d642e:	bd08      	pop	{r3, pc}
   d6430:	0003022c 	.word	0x0003022c

000d6434 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d6434:	b508      	push	{r3, lr}
   d6436:	4b02      	ldr	r3, [pc, #8]	; (d6440 <HAL_I2C_Begin+0xc>)
   d6438:	681b      	ldr	r3, [r3, #0]
   d643a:	68db      	ldr	r3, [r3, #12]
   d643c:	9301      	str	r3, [sp, #4]
   d643e:	bd08      	pop	{r3, pc}
   d6440:	00030228 	.word	0x00030228

000d6444 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d6444:	b508      	push	{r3, lr}
   d6446:	4b02      	ldr	r3, [pc, #8]	; (d6450 <HAL_I2C_Request_Data+0xc>)
   d6448:	681b      	ldr	r3, [r3, #0]
   d644a:	695b      	ldr	r3, [r3, #20]
   d644c:	9301      	str	r3, [sp, #4]
   d644e:	bd08      	pop	{r3, pc}
   d6450:	00030228 	.word	0x00030228

000d6454 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d6454:	b508      	push	{r3, lr}
   d6456:	4b02      	ldr	r3, [pc, #8]	; (d6460 <HAL_I2C_Begin_Transmission+0xc>)
   d6458:	681b      	ldr	r3, [r3, #0]
   d645a:	699b      	ldr	r3, [r3, #24]
   d645c:	9301      	str	r3, [sp, #4]
   d645e:	bd08      	pop	{r3, pc}
   d6460:	00030228 	.word	0x00030228

000d6464 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d6464:	b508      	push	{r3, lr}
   d6466:	4b02      	ldr	r3, [pc, #8]	; (d6470 <HAL_I2C_End_Transmission+0xc>)
   d6468:	681b      	ldr	r3, [r3, #0]
   d646a:	69db      	ldr	r3, [r3, #28]
   d646c:	9301      	str	r3, [sp, #4]
   d646e:	bd08      	pop	{r3, pc}
   d6470:	00030228 	.word	0x00030228

000d6474 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6474:	b508      	push	{r3, lr}
   d6476:	4b02      	ldr	r3, [pc, #8]	; (d6480 <HAL_I2C_Write_Data+0xc>)
   d6478:	681b      	ldr	r3, [r3, #0]
   d647a:	6a1b      	ldr	r3, [r3, #32]
   d647c:	9301      	str	r3, [sp, #4]
   d647e:	bd08      	pop	{r3, pc}
   d6480:	00030228 	.word	0x00030228

000d6484 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6484:	b508      	push	{r3, lr}
   d6486:	4b02      	ldr	r3, [pc, #8]	; (d6490 <HAL_I2C_Available_Data+0xc>)
   d6488:	681b      	ldr	r3, [r3, #0]
   d648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d648c:	9301      	str	r3, [sp, #4]
   d648e:	bd08      	pop	{r3, pc}
   d6490:	00030228 	.word	0x00030228

000d6494 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6494:	b508      	push	{r3, lr}
   d6496:	4b02      	ldr	r3, [pc, #8]	; (d64a0 <HAL_I2C_Read_Data+0xc>)
   d6498:	681b      	ldr	r3, [r3, #0]
   d649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d649c:	9301      	str	r3, [sp, #4]
   d649e:	bd08      	pop	{r3, pc}
   d64a0:	00030228 	.word	0x00030228

000d64a4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d64a4:	b508      	push	{r3, lr}
   d64a6:	4b02      	ldr	r3, [pc, #8]	; (d64b0 <HAL_I2C_Peek_Data+0xc>)
   d64a8:	681b      	ldr	r3, [r3, #0]
   d64aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d64ac:	9301      	str	r3, [sp, #4]
   d64ae:	bd08      	pop	{r3, pc}
   d64b0:	00030228 	.word	0x00030228

000d64b4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d64b4:	b508      	push	{r3, lr}
   d64b6:	4b02      	ldr	r3, [pc, #8]	; (d64c0 <HAL_I2C_Flush_Data+0xc>)
   d64b8:	681b      	ldr	r3, [r3, #0]
   d64ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d64bc:	9301      	str	r3, [sp, #4]
   d64be:	bd08      	pop	{r3, pc}
   d64c0:	00030228 	.word	0x00030228

000d64c4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d64c4:	b508      	push	{r3, lr}
   d64c6:	4b02      	ldr	r3, [pc, #8]	; (d64d0 <HAL_I2C_Is_Enabled+0xc>)
   d64c8:	681b      	ldr	r3, [r3, #0]
   d64ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d64cc:	9301      	str	r3, [sp, #4]
   d64ce:	bd08      	pop	{r3, pc}
   d64d0:	00030228 	.word	0x00030228

000d64d4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d64d4:	b508      	push	{r3, lr}
   d64d6:	4b02      	ldr	r3, [pc, #8]	; (d64e0 <HAL_I2C_Init+0xc>)
   d64d8:	681b      	ldr	r3, [r3, #0]
   d64da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d64dc:	9301      	str	r3, [sp, #4]
   d64de:	bd08      	pop	{r3, pc}
   d64e0:	00030228 	.word	0x00030228

000d64e4 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d64e4:	b508      	push	{r3, lr}
   d64e6:	4b02      	ldr	r3, [pc, #8]	; (d64f0 <HAL_I2C_Acquire+0xc>)
   d64e8:	681b      	ldr	r3, [r3, #0]
   d64ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d64ec:	9301      	str	r3, [sp, #4]
   d64ee:	bd08      	pop	{r3, pc}
   d64f0:	00030228 	.word	0x00030228

000d64f4 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d64f4:	b508      	push	{r3, lr}
   d64f6:	4b02      	ldr	r3, [pc, #8]	; (d6500 <HAL_I2C_Release+0xc>)
   d64f8:	681b      	ldr	r3, [r3, #0]
   d64fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d64fc:	9301      	str	r3, [sp, #4]
   d64fe:	bd08      	pop	{r3, pc}
   d6500:	00030228 	.word	0x00030228

000d6504 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6504:	b508      	push	{r3, lr}
   d6506:	4b02      	ldr	r3, [pc, #8]	; (d6510 <inet_inet_ntop+0xc>)
   d6508:	681b      	ldr	r3, [r3, #0]
   d650a:	695b      	ldr	r3, [r3, #20]
   d650c:	9301      	str	r3, [sp, #4]
   d650e:	bd08      	pop	{r3, pc}
   d6510:	00030264 	.word	0x00030264

000d6514 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6514:	b508      	push	{r3, lr}
   d6516:	4b02      	ldr	r3, [pc, #8]	; (d6520 <netdb_freeaddrinfo+0xc>)
   d6518:	681b      	ldr	r3, [r3, #0]
   d651a:	689b      	ldr	r3, [r3, #8]
   d651c:	9301      	str	r3, [sp, #4]
   d651e:	bd08      	pop	{r3, pc}
   d6520:	00030268 	.word	0x00030268

000d6524 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6524:	b508      	push	{r3, lr}
   d6526:	4b02      	ldr	r3, [pc, #8]	; (d6530 <netdb_getaddrinfo+0xc>)
   d6528:	681b      	ldr	r3, [r3, #0]
   d652a:	68db      	ldr	r3, [r3, #12]
   d652c:	9301      	str	r3, [sp, #4]
   d652e:	bd08      	pop	{r3, pc}
   d6530:	00030268 	.word	0x00030268

000d6534 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6534:	b508      	push	{r3, lr}
   d6536:	4b02      	ldr	r3, [pc, #8]	; (d6540 <HAL_SPI_Init+0xc>)
   d6538:	681b      	ldr	r3, [r3, #0]
   d653a:	69db      	ldr	r3, [r3, #28]
   d653c:	9301      	str	r3, [sp, #4]
   d653e:	bd08      	pop	{r3, pc}
   d6540:	00030230 	.word	0x00030230

000d6544 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6544:	b508      	push	{r3, lr}
   d6546:	4b02      	ldr	r3, [pc, #8]	; (d6550 <HAL_SPI_Is_Enabled+0xc>)
   d6548:	681b      	ldr	r3, [r3, #0]
   d654a:	6a1b      	ldr	r3, [r3, #32]
   d654c:	9301      	str	r3, [sp, #4]
   d654e:	bd08      	pop	{r3, pc}
   d6550:	00030230 	.word	0x00030230

000d6554 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6554:	b508      	push	{r3, lr}
   d6556:	4b02      	ldr	r3, [pc, #8]	; (d6560 <HAL_USART_Init+0xc>)
   d6558:	681b      	ldr	r3, [r3, #0]
   d655a:	681b      	ldr	r3, [r3, #0]
   d655c:	9301      	str	r3, [sp, #4]
   d655e:	bd08      	pop	{r3, pc}
   d6560:	0003023c 	.word	0x0003023c

000d6564 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6564:	b508      	push	{r3, lr}
   d6566:	4b02      	ldr	r3, [pc, #8]	; (d6570 <HAL_USART_Write_Data+0xc>)
   d6568:	681b      	ldr	r3, [r3, #0]
   d656a:	68db      	ldr	r3, [r3, #12]
   d656c:	9301      	str	r3, [sp, #4]
   d656e:	bd08      	pop	{r3, pc}
   d6570:	0003023c 	.word	0x0003023c

000d6574 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6574:	b508      	push	{r3, lr}
   d6576:	4b02      	ldr	r3, [pc, #8]	; (d6580 <HAL_USART_Available_Data+0xc>)
   d6578:	681b      	ldr	r3, [r3, #0]
   d657a:	691b      	ldr	r3, [r3, #16]
   d657c:	9301      	str	r3, [sp, #4]
   d657e:	bd08      	pop	{r3, pc}
   d6580:	0003023c 	.word	0x0003023c

000d6584 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6584:	b508      	push	{r3, lr}
   d6586:	4b02      	ldr	r3, [pc, #8]	; (d6590 <HAL_USART_Read_Data+0xc>)
   d6588:	681b      	ldr	r3, [r3, #0]
   d658a:	695b      	ldr	r3, [r3, #20]
   d658c:	9301      	str	r3, [sp, #4]
   d658e:	bd08      	pop	{r3, pc}
   d6590:	0003023c 	.word	0x0003023c

000d6594 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6594:	b508      	push	{r3, lr}
   d6596:	4b02      	ldr	r3, [pc, #8]	; (d65a0 <HAL_USART_Peek_Data+0xc>)
   d6598:	681b      	ldr	r3, [r3, #0]
   d659a:	699b      	ldr	r3, [r3, #24]
   d659c:	9301      	str	r3, [sp, #4]
   d659e:	bd08      	pop	{r3, pc}
   d65a0:	0003023c 	.word	0x0003023c

000d65a4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d65a4:	b508      	push	{r3, lr}
   d65a6:	4b02      	ldr	r3, [pc, #8]	; (d65b0 <HAL_USART_Flush_Data+0xc>)
   d65a8:	681b      	ldr	r3, [r3, #0]
   d65aa:	69db      	ldr	r3, [r3, #28]
   d65ac:	9301      	str	r3, [sp, #4]
   d65ae:	bd08      	pop	{r3, pc}
   d65b0:	0003023c 	.word	0x0003023c

000d65b4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d65b4:	b508      	push	{r3, lr}
   d65b6:	4b02      	ldr	r3, [pc, #8]	; (d65c0 <HAL_USART_Is_Enabled+0xc>)
   d65b8:	681b      	ldr	r3, [r3, #0]
   d65ba:	6a1b      	ldr	r3, [r3, #32]
   d65bc:	9301      	str	r3, [sp, #4]
   d65be:	bd08      	pop	{r3, pc}
   d65c0:	0003023c 	.word	0x0003023c

000d65c4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d65c4:	b508      	push	{r3, lr}
   d65c6:	4b02      	ldr	r3, [pc, #8]	; (d65d0 <HAL_USART_Available_Data_For_Write+0xc>)
   d65c8:	681b      	ldr	r3, [r3, #0]
   d65ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d65cc:	9301      	str	r3, [sp, #4]
   d65ce:	bd08      	pop	{r3, pc}
   d65d0:	0003023c 	.word	0x0003023c

000d65d4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d65d4:	b508      	push	{r3, lr}
   d65d6:	4b02      	ldr	r3, [pc, #8]	; (d65e0 <HAL_USB_USART_Init+0xc>)
   d65d8:	681b      	ldr	r3, [r3, #0]
   d65da:	681b      	ldr	r3, [r3, #0]
   d65dc:	9301      	str	r3, [sp, #4]
   d65de:	bd08      	pop	{r3, pc}
   d65e0:	0003024c 	.word	0x0003024c

000d65e4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d65e4:	b508      	push	{r3, lr}
   d65e6:	4b02      	ldr	r3, [pc, #8]	; (d65f0 <HAL_USB_USART_Available_Data+0xc>)
   d65e8:	681b      	ldr	r3, [r3, #0]
   d65ea:	691b      	ldr	r3, [r3, #16]
   d65ec:	9301      	str	r3, [sp, #4]
   d65ee:	bd08      	pop	{r3, pc}
   d65f0:	0003024c 	.word	0x0003024c

000d65f4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d65f4:	b508      	push	{r3, lr}
   d65f6:	4b02      	ldr	r3, [pc, #8]	; (d6600 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d65f8:	681b      	ldr	r3, [r3, #0]
   d65fa:	695b      	ldr	r3, [r3, #20]
   d65fc:	9301      	str	r3, [sp, #4]
   d65fe:	bd08      	pop	{r3, pc}
   d6600:	0003024c 	.word	0x0003024c

000d6604 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6604:	b508      	push	{r3, lr}
   d6606:	4b02      	ldr	r3, [pc, #8]	; (d6610 <HAL_USB_USART_Receive_Data+0xc>)
   d6608:	681b      	ldr	r3, [r3, #0]
   d660a:	699b      	ldr	r3, [r3, #24]
   d660c:	9301      	str	r3, [sp, #4]
   d660e:	bd08      	pop	{r3, pc}
   d6610:	0003024c 	.word	0x0003024c

000d6614 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6614:	b508      	push	{r3, lr}
   d6616:	4b02      	ldr	r3, [pc, #8]	; (d6620 <HAL_USB_USART_Send_Data+0xc>)
   d6618:	681b      	ldr	r3, [r3, #0]
   d661a:	69db      	ldr	r3, [r3, #28]
   d661c:	9301      	str	r3, [sp, #4]
   d661e:	bd08      	pop	{r3, pc}
   d6620:	0003024c 	.word	0x0003024c

000d6624 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6624:	b508      	push	{r3, lr}
   d6626:	4b02      	ldr	r3, [pc, #8]	; (d6630 <HAL_USB_USART_Flush_Data+0xc>)
   d6628:	681b      	ldr	r3, [r3, #0]
   d662a:	6a1b      	ldr	r3, [r3, #32]
   d662c:	9301      	str	r3, [sp, #4]
   d662e:	bd08      	pop	{r3, pc}
   d6630:	0003024c 	.word	0x0003024c

000d6634 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6634:	b508      	push	{r3, lr}
   d6636:	4b02      	ldr	r3, [pc, #8]	; (d6640 <panic_+0xc>)
   d6638:	681b      	ldr	r3, [r3, #0]
   d663a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d663c:	9301      	str	r3, [sp, #4]
   d663e:	bd08      	pop	{r3, pc}
   d6640:	00030260 	.word	0x00030260

000d6644 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6644:	b508      	push	{r3, lr}
   d6646:	4b02      	ldr	r3, [pc, #8]	; (d6650 <log_message_v+0xc>)
   d6648:	681b      	ldr	r3, [r3, #0]
   d664a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d664c:	9301      	str	r3, [sp, #4]
   d664e:	bd08      	pop	{r3, pc}
   d6650:	00030260 	.word	0x00030260

000d6654 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6654:	b508      	push	{r3, lr}
   d6656:	4b02      	ldr	r3, [pc, #8]	; (d6660 <system_mode+0xc>)
   d6658:	681b      	ldr	r3, [r3, #0]
   d665a:	681b      	ldr	r3, [r3, #0]
   d665c:	9301      	str	r3, [sp, #4]
   d665e:	bd08      	pop	{r3, pc}
   d6660:	00030220 	.word	0x00030220

000d6664 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6664:	b508      	push	{r3, lr}
   d6666:	4b02      	ldr	r3, [pc, #8]	; (d6670 <set_system_mode+0xc>)
   d6668:	681b      	ldr	r3, [r3, #0]
   d666a:	685b      	ldr	r3, [r3, #4]
   d666c:	9301      	str	r3, [sp, #4]
   d666e:	bd08      	pop	{r3, pc}
   d6670:	00030220 	.word	0x00030220

000d6674 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6674:	b508      	push	{r3, lr}
   d6676:	4b02      	ldr	r3, [pc, #8]	; (d6680 <system_delay_ms+0xc>)
   d6678:	681b      	ldr	r3, [r3, #0]
   d667a:	695b      	ldr	r3, [r3, #20]
   d667c:	9301      	str	r3, [sp, #4]
   d667e:	bd08      	pop	{r3, pc}
   d6680:	00030220 	.word	0x00030220

000d6684 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d6684:	b508      	push	{r3, lr}
   d6686:	4b02      	ldr	r3, [pc, #8]	; (d6690 <system_sleep+0xc>)
   d6688:	681b      	ldr	r3, [r3, #0]
   d668a:	699b      	ldr	r3, [r3, #24]
   d668c:	9301      	str	r3, [sp, #4]
   d668e:	bd08      	pop	{r3, pc}
   d6690:	00030220 	.word	0x00030220

000d6694 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6694:	b508      	push	{r3, lr}
   d6696:	4b02      	ldr	r3, [pc, #8]	; (d66a0 <system_thread_set_state+0xc>)
   d6698:	681b      	ldr	r3, [r3, #0]
   d669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d669c:	9301      	str	r3, [sp, #4]
   d669e:	bd08      	pop	{r3, pc}
   d66a0:	00030220 	.word	0x00030220

000d66a4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d66a4:	b508      	push	{r3, lr}
   d66a6:	4b02      	ldr	r3, [pc, #8]	; (d66b0 <application_thread_current+0xc>)
   d66a8:	681b      	ldr	r3, [r3, #0]
   d66aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d66ac:	9301      	str	r3, [sp, #4]
   d66ae:	bd08      	pop	{r3, pc}
   d66b0:	00030220 	.word	0x00030220

000d66b4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d66b4:	b508      	push	{r3, lr}
   d66b6:	4b02      	ldr	r3, [pc, #8]	; (d66c0 <application_thread_invoke+0xc>)
   d66b8:	681b      	ldr	r3, [r3, #0]
   d66ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d66bc:	9301      	str	r3, [sp, #4]
   d66be:	bd08      	pop	{r3, pc}
   d66c0:	00030220 	.word	0x00030220

000d66c4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d66c4:	b508      	push	{r3, lr}
   d66c6:	4b02      	ldr	r3, [pc, #8]	; (d66d0 <system_thread_get_state+0xc>)
   d66c8:	681b      	ldr	r3, [r3, #0]
   d66ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d66cc:	9301      	str	r3, [sp, #4]
   d66ce:	bd08      	pop	{r3, pc}
   d66d0:	00030220 	.word	0x00030220

000d66d4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d66d4:	b508      	push	{r3, lr}
   d66d6:	4b03      	ldr	r3, [pc, #12]	; (d66e4 <system_ctrl_set_app_request_handler+0x10>)
   d66d8:	681b      	ldr	r3, [r3, #0]
   d66da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d66de:	9301      	str	r3, [sp, #4]
   d66e0:	bd08      	pop	{r3, pc}
   d66e2:	0000      	.short	0x0000
   d66e4:	00030220 	.word	0x00030220

000d66e8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d66e8:	b508      	push	{r3, lr}
   d66ea:	4b03      	ldr	r3, [pc, #12]	; (d66f8 <system_ctrl_set_result+0x10>)
   d66ec:	681b      	ldr	r3, [r3, #0]
   d66ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d66f2:	9301      	str	r3, [sp, #4]
   d66f4:	bd08      	pop	{r3, pc}
   d66f6:	0000      	.short	0x0000
   d66f8:	00030220 	.word	0x00030220

000d66fc <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d66fc:	b508      	push	{r3, lr}
   d66fe:	4b03      	ldr	r3, [pc, #12]	; (d670c <system_sleep_pins+0x10>)
   d6700:	681b      	ldr	r3, [r3, #0]
   d6702:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d6706:	9301      	str	r3, [sp, #4]
   d6708:	bd08      	pop	{r3, pc}
   d670a:	0000      	.short	0x0000
   d670c:	00030220 	.word	0x00030220

000d6710 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d6710:	b508      	push	{r3, lr}
   d6712:	4b02      	ldr	r3, [pc, #8]	; (d671c <spark_variable+0xc>)
   d6714:	681b      	ldr	r3, [r3, #0]
   d6716:	681b      	ldr	r3, [r3, #0]
   d6718:	9301      	str	r3, [sp, #4]
   d671a:	bd08      	pop	{r3, pc}
   d671c:	00030244 	.word	0x00030244

000d6720 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d6720:	b508      	push	{r3, lr}
   d6722:	4b02      	ldr	r3, [pc, #8]	; (d672c <spark_function+0xc>)
   d6724:	681b      	ldr	r3, [r3, #0]
   d6726:	685b      	ldr	r3, [r3, #4]
   d6728:	9301      	str	r3, [sp, #4]
   d672a:	bd08      	pop	{r3, pc}
   d672c:	00030244 	.word	0x00030244

000d6730 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6730:	b508      	push	{r3, lr}
   d6732:	4b02      	ldr	r3, [pc, #8]	; (d673c <spark_process+0xc>)
   d6734:	681b      	ldr	r3, [r3, #0]
   d6736:	689b      	ldr	r3, [r3, #8]
   d6738:	9301      	str	r3, [sp, #4]
   d673a:	bd08      	pop	{r3, pc}
   d673c:	00030244 	.word	0x00030244

000d6740 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d6740:	b508      	push	{r3, lr}
   d6742:	4b02      	ldr	r3, [pc, #8]	; (d674c <spark_cloud_flag_connect+0xc>)
   d6744:	681b      	ldr	r3, [r3, #0]
   d6746:	68db      	ldr	r3, [r3, #12]
   d6748:	9301      	str	r3, [sp, #4]
   d674a:	bd08      	pop	{r3, pc}
   d674c:	00030244 	.word	0x00030244

000d6750 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d6750:	b508      	push	{r3, lr}
   d6752:	4b02      	ldr	r3, [pc, #8]	; (d675c <spark_cloud_flag_disconnect+0xc>)
   d6754:	681b      	ldr	r3, [r3, #0]
   d6756:	691b      	ldr	r3, [r3, #16]
   d6758:	9301      	str	r3, [sp, #4]
   d675a:	bd08      	pop	{r3, pc}
   d675c:	00030244 	.word	0x00030244

000d6760 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6760:	b508      	push	{r3, lr}
   d6762:	4b02      	ldr	r3, [pc, #8]	; (d676c <spark_cloud_flag_connected+0xc>)
   d6764:	681b      	ldr	r3, [r3, #0]
   d6766:	695b      	ldr	r3, [r3, #20]
   d6768:	9301      	str	r3, [sp, #4]
   d676a:	bd08      	pop	{r3, pc}
   d676c:	00030244 	.word	0x00030244

000d6770 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6770:	b508      	push	{r3, lr}
   d6772:	4b02      	ldr	r3, [pc, #8]	; (d677c <spark_deviceID+0xc>)
   d6774:	681b      	ldr	r3, [r3, #0]
   d6776:	69db      	ldr	r3, [r3, #28]
   d6778:	9301      	str	r3, [sp, #4]
   d677a:	bd08      	pop	{r3, pc}
   d677c:	00030244 	.word	0x00030244

000d6780 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6780:	b508      	push	{r3, lr}
   d6782:	4b02      	ldr	r3, [pc, #8]	; (d678c <spark_send_event+0xc>)
   d6784:	681b      	ldr	r3, [r3, #0]
   d6786:	6a1b      	ldr	r3, [r3, #32]
   d6788:	9301      	str	r3, [sp, #4]
   d678a:	bd08      	pop	{r3, pc}
   d678c:	00030244 	.word	0x00030244

000d6790 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6790:	b508      	push	{r3, lr}
   d6792:	4b02      	ldr	r3, [pc, #8]	; (d679c <spark_subscribe+0xc>)
   d6794:	681b      	ldr	r3, [r3, #0]
   d6796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6798:	9301      	str	r3, [sp, #4]
   d679a:	bd08      	pop	{r3, pc}
   d679c:	00030244 	.word	0x00030244

000d67a0 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d67a0:	b508      	push	{r3, lr}
   d67a2:	4b02      	ldr	r3, [pc, #8]	; (d67ac <spark_sync_time+0xc>)
   d67a4:	681b      	ldr	r3, [r3, #0]
   d67a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d67a8:	9301      	str	r3, [sp, #4]
   d67aa:	bd08      	pop	{r3, pc}
   d67ac:	00030244 	.word	0x00030244

000d67b0 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d67b0:	b508      	push	{r3, lr}
   d67b2:	4b02      	ldr	r3, [pc, #8]	; (d67bc <spark_sync_time_pending+0xc>)
   d67b4:	681b      	ldr	r3, [r3, #0]
   d67b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d67b8:	9301      	str	r3, [sp, #4]
   d67ba:	bd08      	pop	{r3, pc}
   d67bc:	00030244 	.word	0x00030244

000d67c0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d67c0:	b508      	push	{r3, lr}
   d67c2:	4b02      	ldr	r3, [pc, #8]	; (d67cc <spark_set_random_seed_from_cloud_handler+0xc>)
   d67c4:	681b      	ldr	r3, [r3, #0]
   d67c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d67c8:	9301      	str	r3, [sp, #4]
   d67ca:	bd08      	pop	{r3, pc}
   d67cc:	00030244 	.word	0x00030244

000d67d0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d67d0:	b508      	push	{r3, lr}
   d67d2:	4b02      	ldr	r3, [pc, #8]	; (d67dc <network_connect+0xc>)
   d67d4:	681b      	ldr	r3, [r3, #0]
   d67d6:	685b      	ldr	r3, [r3, #4]
   d67d8:	9301      	str	r3, [sp, #4]
   d67da:	bd08      	pop	{r3, pc}
   d67dc:	00030240 	.word	0x00030240

000d67e0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d67e0:	b508      	push	{r3, lr}
   d67e2:	4b02      	ldr	r3, [pc, #8]	; (d67ec <network_connecting+0xc>)
   d67e4:	681b      	ldr	r3, [r3, #0]
   d67e6:	689b      	ldr	r3, [r3, #8]
   d67e8:	9301      	str	r3, [sp, #4]
   d67ea:	bd08      	pop	{r3, pc}
   d67ec:	00030240 	.word	0x00030240

000d67f0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d67f0:	b508      	push	{r3, lr}
   d67f2:	4b02      	ldr	r3, [pc, #8]	; (d67fc <network_disconnect+0xc>)
   d67f4:	681b      	ldr	r3, [r3, #0]
   d67f6:	68db      	ldr	r3, [r3, #12]
   d67f8:	9301      	str	r3, [sp, #4]
   d67fa:	bd08      	pop	{r3, pc}
   d67fc:	00030240 	.word	0x00030240

000d6800 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6800:	b508      	push	{r3, lr}
   d6802:	4b02      	ldr	r3, [pc, #8]	; (d680c <network_ready+0xc>)
   d6804:	681b      	ldr	r3, [r3, #0]
   d6806:	691b      	ldr	r3, [r3, #16]
   d6808:	9301      	str	r3, [sp, #4]
   d680a:	bd08      	pop	{r3, pc}
   d680c:	00030240 	.word	0x00030240

000d6810 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6810:	b508      	push	{r3, lr}
   d6812:	4b02      	ldr	r3, [pc, #8]	; (d681c <network_on+0xc>)
   d6814:	681b      	ldr	r3, [r3, #0]
   d6816:	695b      	ldr	r3, [r3, #20]
   d6818:	9301      	str	r3, [sp, #4]
   d681a:	bd08      	pop	{r3, pc}
   d681c:	00030240 	.word	0x00030240

000d6820 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6820:	b508      	push	{r3, lr}
   d6822:	4b02      	ldr	r3, [pc, #8]	; (d682c <network_off+0xc>)
   d6824:	681b      	ldr	r3, [r3, #0]
   d6826:	699b      	ldr	r3, [r3, #24]
   d6828:	9301      	str	r3, [sp, #4]
   d682a:	bd08      	pop	{r3, pc}
   d682c:	00030240 	.word	0x00030240

000d6830 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6830:	b508      	push	{r3, lr}
   d6832:	4b02      	ldr	r3, [pc, #8]	; (d683c <network_listen+0xc>)
   d6834:	681b      	ldr	r3, [r3, #0]
   d6836:	69db      	ldr	r3, [r3, #28]
   d6838:	9301      	str	r3, [sp, #4]
   d683a:	bd08      	pop	{r3, pc}
   d683c:	00030240 	.word	0x00030240

000d6840 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6840:	b508      	push	{r3, lr}
   d6842:	4b02      	ldr	r3, [pc, #8]	; (d684c <network_listening+0xc>)
   d6844:	681b      	ldr	r3, [r3, #0]
   d6846:	6a1b      	ldr	r3, [r3, #32]
   d6848:	9301      	str	r3, [sp, #4]
   d684a:	bd08      	pop	{r3, pc}
   d684c:	00030240 	.word	0x00030240

000d6850 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6850:	b508      	push	{r3, lr}
   d6852:	4b02      	ldr	r3, [pc, #8]	; (d685c <network_set_listen_timeout+0xc>)
   d6854:	681b      	ldr	r3, [r3, #0]
   d6856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6858:	9301      	str	r3, [sp, #4]
   d685a:	bd08      	pop	{r3, pc}
   d685c:	00030240 	.word	0x00030240

000d6860 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6860:	b508      	push	{r3, lr}
   d6862:	4b02      	ldr	r3, [pc, #8]	; (d686c <network_get_listen_timeout+0xc>)
   d6864:	681b      	ldr	r3, [r3, #0]
   d6866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6868:	9301      	str	r3, [sp, #4]
   d686a:	bd08      	pop	{r3, pc}
   d686c:	00030240 	.word	0x00030240

000d6870 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6870:	b508      	push	{r3, lr}
   d6872:	4b02      	ldr	r3, [pc, #8]	; (d687c <malloc+0xc>)
   d6874:	681b      	ldr	r3, [r3, #0]
   d6876:	681b      	ldr	r3, [r3, #0]
   d6878:	9301      	str	r3, [sp, #4]
   d687a:	bd08      	pop	{r3, pc}
   d687c:	0003021c 	.word	0x0003021c

000d6880 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6880:	b508      	push	{r3, lr}
   d6882:	4b02      	ldr	r3, [pc, #8]	; (d688c <free+0xc>)
   d6884:	681b      	ldr	r3, [r3, #0]
   d6886:	685b      	ldr	r3, [r3, #4]
   d6888:	9301      	str	r3, [sp, #4]
   d688a:	bd08      	pop	{r3, pc}
   d688c:	0003021c 	.word	0x0003021c

000d6890 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6890:	b508      	push	{r3, lr}
   d6892:	4b02      	ldr	r3, [pc, #8]	; (d689c <realloc+0xc>)
   d6894:	681b      	ldr	r3, [r3, #0]
   d6896:	689b      	ldr	r3, [r3, #8]
   d6898:	9301      	str	r3, [sp, #4]
   d689a:	bd08      	pop	{r3, pc}
   d689c:	0003021c 	.word	0x0003021c

000d68a0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d68a0:	b508      	push	{r3, lr}
   d68a2:	4b02      	ldr	r3, [pc, #8]	; (d68ac <siprintf+0xc>)
   d68a4:	681b      	ldr	r3, [r3, #0]
   d68a6:	691b      	ldr	r3, [r3, #16]
   d68a8:	9301      	str	r3, [sp, #4]
   d68aa:	bd08      	pop	{r3, pc}
   d68ac:	0003021c 	.word	0x0003021c

000d68b0 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d68b0:	b508      	push	{r3, lr}
   d68b2:	4b02      	ldr	r3, [pc, #8]	; (d68bc <siscanf+0xc>)
   d68b4:	681b      	ldr	r3, [r3, #0]
   d68b6:	699b      	ldr	r3, [r3, #24]
   d68b8:	9301      	str	r3, [sp, #4]
   d68ba:	bd08      	pop	{r3, pc}
   d68bc:	0003021c 	.word	0x0003021c

000d68c0 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d68c0:	b508      	push	{r3, lr}
   d68c2:	4b02      	ldr	r3, [pc, #8]	; (d68cc <snprintf+0xc>)
   d68c4:	681b      	ldr	r3, [r3, #0]
   d68c6:	69db      	ldr	r3, [r3, #28]
   d68c8:	9301      	str	r3, [sp, #4]
   d68ca:	bd08      	pop	{r3, pc}
   d68cc:	0003021c 	.word	0x0003021c

000d68d0 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d68d0:	b508      	push	{r3, lr}
   d68d2:	4b02      	ldr	r3, [pc, #8]	; (d68dc <abort+0xc>)
   d68d4:	681b      	ldr	r3, [r3, #0]
   d68d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d68d8:	9301      	str	r3, [sp, #4]
   d68da:	bd08      	pop	{r3, pc}
   d68dc:	0003021c 	.word	0x0003021c

000d68e0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d68e0:	b508      	push	{r3, lr}
   d68e2:	4b02      	ldr	r3, [pc, #8]	; (d68ec <_malloc_r+0xc>)
   d68e4:	681b      	ldr	r3, [r3, #0]
   d68e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d68e8:	9301      	str	r3, [sp, #4]
   d68ea:	bd08      	pop	{r3, pc}
   d68ec:	0003021c 	.word	0x0003021c

000d68f0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d68f0:	2100      	movs	r1, #0
   d68f2:	f7ff bebf 	b.w	d6674 <system_delay_ms>

000d68f6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d68f6:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d68f8:	6883      	ldr	r3, [r0, #8]
   d68fa:	4604      	mov	r4, r0
   d68fc:	b90b      	cbnz	r3, d6902 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d68fe:	f001 fe2a 	bl	d8556 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6902:	68c3      	ldr	r3, [r0, #12]
   d6904:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6906:	68a3      	ldr	r3, [r4, #8]
   d6908:	b11b      	cbz	r3, d6912 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d690a:	2203      	movs	r2, #3
   d690c:	4621      	mov	r1, r4
   d690e:	4620      	mov	r0, r4
   d6910:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6912:	4620      	mov	r0, r4
   d6914:	2110      	movs	r1, #16
}
   d6916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d691a:	f001 be1a 	b.w	d8552 <_ZdlPvj>

000d691e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d691e:	680b      	ldr	r3, [r1, #0]
   d6920:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6922:	b113      	cbz	r3, d692a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6924:	685a      	ldr	r2, [r3, #4]
   d6926:	3201      	adds	r2, #1
   d6928:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d692a:	4770      	bx	lr

000d692c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d692c:	4802      	ldr	r0, [pc, #8]	; (d6938 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d692e:	2300      	movs	r3, #0
   d6930:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6932:	f7ff bce7 	b.w	d6304 <os_mutex_recursive_create>
   d6936:	bf00      	nop
   d6938:	2003e2a0 	.word	0x2003e2a0

000d693c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d693c:	2200      	movs	r2, #0
   d693e:	4611      	mov	r1, r2
   d6940:	6840      	ldr	r0, [r0, #4]
   d6942:	f7ff bf5d 	b.w	d6800 <network_ready>

000d6946 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6946:	2200      	movs	r2, #0
   d6948:	4611      	mov	r1, r2
   d694a:	6840      	ldr	r0, [r0, #4]
   d694c:	f7ff bf78 	b.w	d6840 <network_listening>

000d6950 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6950:	2200      	movs	r2, #0
   d6952:	4611      	mov	r1, r2
   d6954:	6840      	ldr	r0, [r0, #4]
   d6956:	f7ff bf83 	b.w	d6860 <network_get_listen_timeout>

000d695a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d695a:	2200      	movs	r2, #0
   d695c:	6840      	ldr	r0, [r0, #4]
   d695e:	f7ff bf77 	b.w	d6850 <network_set_listen_timeout>

000d6962 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6962:	2200      	movs	r2, #0
   d6964:	f081 0101 	eor.w	r1, r1, #1
   d6968:	6840      	ldr	r0, [r0, #4]
   d696a:	f7ff bf61 	b.w	d6830 <network_listen>

000d696e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d696e:	2300      	movs	r3, #0
   d6970:	461a      	mov	r2, r3
   d6972:	4619      	mov	r1, r3
   d6974:	6840      	ldr	r0, [r0, #4]
   d6976:	f7ff bf4b 	b.w	d6810 <network_on>

000d697a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d697a:	2200      	movs	r2, #0
   d697c:	4611      	mov	r1, r2
   d697e:	6840      	ldr	r0, [r0, #4]
   d6980:	f7ff bf2e 	b.w	d67e0 <network_connecting>

000d6984 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6984:	2200      	movs	r2, #0
   d6986:	2102      	movs	r1, #2
   d6988:	6840      	ldr	r0, [r0, #4]
   d698a:	f7ff bf31 	b.w	d67f0 <network_disconnect>

000d698e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d698e:	2300      	movs	r3, #0
   d6990:	461a      	mov	r2, r3
   d6992:	6840      	ldr	r0, [r0, #4]
   d6994:	f7ff bf1c 	b.w	d67d0 <network_connect>

000d6998 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d6998:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d699a:	4b1b      	ldr	r3, [pc, #108]	; (d6a08 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d699c:	6003      	str	r3, [r0, #0]
   d699e:	2500      	movs	r5, #0
   d69a0:	460f      	mov	r7, r1
   d69a2:	3328      	adds	r3, #40	; 0x28
   d69a4:	2618      	movs	r6, #24
   d69a6:	b089      	sub	sp, #36	; 0x24
   d69a8:	6043      	str	r3, [r0, #4]
   d69aa:	6085      	str	r5, [r0, #8]
   d69ac:	60c5      	str	r5, [r0, #12]
   d69ae:	4632      	mov	r2, r6
   d69b0:	4629      	mov	r1, r5
   d69b2:	4604      	mov	r4, r0
   d69b4:	3010      	adds	r0, #16
   d69b6:	f002 fd89 	bl	d94cc <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d69ba:	462a      	mov	r2, r5
   d69bc:	4629      	mov	r1, r5
   d69be:	6878      	ldr	r0, [r7, #4]
   d69c0:	f7ff ff1e 	bl	d6800 <network_ready>
   d69c4:	b908      	cbnz	r0, d69ca <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d69c6:	60a0      	str	r0, [r4, #8]
            return sig;
   d69c8:	e01b      	b.n	d6a02 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d69ca:	4629      	mov	r1, r5
   d69cc:	4632      	mov	r2, r6
   d69ce:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d69d0:	9500      	str	r5, [sp, #0]
   d69d2:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d69d4:	f002 fd7a 	bl	d94cc <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d69d8:	a902      	add	r1, sp, #8
   d69da:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d69dc:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d69e0:	f7ff fc60 	bl	d62a4 <cellular_signal>
   d69e4:	b110      	cbz	r0, d69ec <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d69e6:	2301      	movs	r3, #1
   d69e8:	60a3      	str	r3, [r4, #8]
            return sig;
   d69ea:	e00a      	b.n	d6a02 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d69ec:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d69ee:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d69f0:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d69f2:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d69f4:	b90b      	cbnz	r3, d69fa <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d69f6:	2302      	movs	r3, #2
   d69f8:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d69fa:	a902      	add	r1, sp, #8
   d69fc:	4620      	mov	r0, r4
   d69fe:	f000 f8a1 	bl	d6b44 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d6a02:	4620      	mov	r0, r4
   d6a04:	b009      	add	sp, #36	; 0x24
   d6a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6a08:	000dbe90 	.word	0x000dbe90

000d6a0c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6a0c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6a0e:	4c08      	ldr	r4, [pc, #32]	; (d6a30 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d6a10:	2528      	movs	r5, #40	; 0x28
   d6a12:	462a      	mov	r2, r5
   d6a14:	2100      	movs	r1, #0
   d6a16:	4620      	mov	r0, r4
   d6a18:	f002 fd58 	bl	d94cc <memset>
        cid = -1;
   d6a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6a20:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6a22:	4b04      	ldr	r3, [pc, #16]	; (d6a34 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d6a24:	8025      	strh	r5, [r4, #0]
   d6a26:	2204      	movs	r2, #4
   d6a28:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6a2a:	4a03      	ldr	r2, [pc, #12]	; (d6a38 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6a2c:	601a      	str	r2, [r3, #0]
   d6a2e:	bd38      	pop	{r3, r4, r5, pc}
   d6a30:	2003e2ac 	.word	0x2003e2ac
   d6a34:	2003e2a4 	.word	0x2003e2a4
   d6a38:	000dbe5c 	.word	0x000dbe5c

000d6a3c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d6a3c:	4770      	bx	lr

000d6a3e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d6a3e:	7d00      	ldrb	r0, [r0, #20]
   d6a40:	4770      	bx	lr
	...

000d6a44 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d6a44:	7d03      	ldrb	r3, [r0, #20]
   d6a46:	b11b      	cbz	r3, d6a50 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d6a48:	6983      	ldr	r3, [r0, #24]
   d6a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6a4e:	d102      	bne.n	d6a56 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d6a50:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6a68 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d6a54:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d6a56:	ee07 3a90 	vmov	s15, r3
   d6a5a:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6a6c <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d6a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6a62:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d6a66:	4770      	bx	lr
   d6a68:	00000000 	.word	0x00000000
   d6a6c:	42c80000 	.word	0x42c80000

000d6a70 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d6a70:	7d03      	ldrb	r3, [r0, #20]
   d6a72:	b11b      	cbz	r3, d6a7c <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d6a74:	6a03      	ldr	r3, [r0, #32]
   d6a76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6a7a:	d102      	bne.n	d6a82 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d6a7c:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6a94 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d6a80:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d6a82:	ee07 3a90 	vmov	s15, r3
   d6a86:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6a98 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d6a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6a8e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d6a92:	4770      	bx	lr
   d6a94:	00000000 	.word	0x00000000
   d6a98:	42c80000 	.word	0x42c80000

000d6a9c <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
   d6a9c:	b570      	push	{r4, r5, r6, lr}
   d6a9e:	460d      	mov	r5, r1
   d6aa0:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d6aa2:	220a      	movs	r2, #10
   d6aa4:	6881      	ldr	r1, [r0, #8]
   d6aa6:	4628      	mov	r0, r5
   d6aa8:	f001 f8ef 	bl	d7c8a <_ZN5Print5printEii>
    n += p.print(',');
   d6aac:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d6aae:	4604      	mov	r4, r0
    n += p.print(',');
   d6ab0:	4628      	mov	r0, r5
   d6ab2:	f001 f880 	bl	d7bb6 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d6ab6:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d6ab8:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d6aba:	68f1      	ldr	r1, [r6, #12]
   d6abc:	4628      	mov	r0, r5
   d6abe:	f001 f8e4 	bl	d7c8a <_ZN5Print5printEii>
    return n;
}
   d6ac2:	4420      	add	r0, r4
   d6ac4:	bd70      	pop	{r4, r5, r6, pc}

000d6ac6 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d6ac6:	f1a0 0004 	sub.w	r0, r0, #4
   d6aca:	f7ff bfe7 	b.w	d6a9c <_ZNK14CellularSignal7printToER5Print>

000d6ace <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d6ace:	b510      	push	{r4, lr}
   d6ad0:	2128      	movs	r1, #40	; 0x28
   d6ad2:	4604      	mov	r4, r0
   d6ad4:	f001 fd3d 	bl	d8552 <_ZdlPvj>
   d6ad8:	4620      	mov	r0, r4
   d6ada:	bd10      	pop	{r4, pc}

000d6adc <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d6adc:	7d03      	ldrb	r3, [r0, #20]
   d6ade:	b17b      	cbz	r3, d6b00 <_ZNK14CellularSignal10getQualityEv+0x24>
   d6ae0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d6ae2:	2b00      	cmp	r3, #0
   d6ae4:	db0c      	blt.n	d6b00 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d6ae6:	ee07 3a90 	vmov	s15, r3
   d6aea:	eddf 6a07 	vldr	s13, [pc, #28]	; d6b08 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d6aee:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6b0c <_ZNK14CellularSignal10getQualityEv+0x30>
   d6af2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d6af6:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6afa:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6afe:	4770      	bx	lr
    }

    return -1.0f;
   d6b00:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6b04:	4770      	bx	lr
   d6b06:	bf00      	nop
   d6b08:	477fff00 	.word	0x477fff00
   d6b0c:	42c80000 	.word	0x42c80000

000d6b10 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d6b10:	7d03      	ldrb	r3, [r0, #20]
   d6b12:	b17b      	cbz	r3, d6b34 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d6b14:	69c3      	ldr	r3, [r0, #28]
   d6b16:	2b00      	cmp	r3, #0
   d6b18:	db0c      	blt.n	d6b34 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d6b1a:	ee07 3a90 	vmov	s15, r3
   d6b1e:	eddf 6a07 	vldr	s13, [pc, #28]	; d6b3c <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d6b22:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6b40 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d6b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d6b2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6b2e:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6b32:	4770      	bx	lr
    }

    return -1.0f;
   d6b34:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6b38:	4770      	bx	lr
   d6b3a:	bf00      	nop
   d6b3c:	477fff00 	.word	0x477fff00
   d6b40:	42c80000 	.word	0x42c80000

000d6b44 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d6b44:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d6b46:	460d      	mov	r5, r1
   d6b48:	f100 0410 	add.w	r4, r0, #16
   d6b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b50:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6b54:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d6b58:	2001      	movs	r0, #1
   d6b5a:	bd30      	pop	{r4, r5, pc}

000d6b5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6b5c:	4770      	bx	lr

000d6b5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d6b5e:	2000      	movs	r0, #0
   d6b60:	4770      	bx	lr

000d6b62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6b62:	b510      	push	{r4, lr}
   d6b64:	2110      	movs	r1, #16
   d6b66:	4604      	mov	r4, r0
   d6b68:	f001 fcf3 	bl	d8552 <_ZdlPvj>
   d6b6c:	4620      	mov	r0, r4
   d6b6e:	bd10      	pop	{r4, pc}

000d6b70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d6b70:	b508      	push	{r3, lr}
      { delete this; }
   d6b72:	b108      	cbz	r0, d6b78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d6b74:	f7ff fff5 	bl	d6b62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6b78:	bd08      	pop	{r3, pc}

000d6b7a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6b7a:	2200      	movs	r2, #0
   d6b7c:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6b7e:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6b80:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d6b84:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6b86:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d6b8a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b8c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b8e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6b90:	680c      	ldr	r4, [r1, #0]
   d6b92:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b94:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d6b96:	bd10      	pop	{r4, pc}

000d6b98 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6b98:	b510      	push	{r4, lr}
   d6b9a:	4604      	mov	r4, r0
    free((void*)msg_);
   d6b9c:	6800      	ldr	r0, [r0, #0]
   d6b9e:	f7ff fe6f 	bl	d6880 <free>
}
   d6ba2:	4620      	mov	r0, r4
   d6ba4:	bd10      	pop	{r4, pc}

000d6ba6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6ba6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6ba8:	68c4      	ldr	r4, [r0, #12]
   d6baa:	b1f4      	cbz	r4, d6bea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6bac:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6bae:	2b02      	cmp	r3, #2
   d6bb0:	d103      	bne.n	d6bba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6bb2:	f104 000c 	add.w	r0, r4, #12
   d6bb6:	f7ff ffef 	bl	d6b98 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d6bba:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d6bbc:	b135      	cbz	r5, d6bcc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6bbe:	4628      	mov	r0, r5
   d6bc0:	f7ff f98c 	bl	d5edc <_ZNSt14_Function_baseD1Ev>
   d6bc4:	2110      	movs	r1, #16
   d6bc6:	4628      	mov	r0, r5
   d6bc8:	f001 fcc3 	bl	d8552 <_ZdlPvj>
   d6bcc:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6bce:	b135      	cbz	r5, d6bde <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6bd0:	4628      	mov	r0, r5
   d6bd2:	f7ff f983 	bl	d5edc <_ZNSt14_Function_baseD1Ev>
   d6bd6:	2110      	movs	r1, #16
   d6bd8:	4628      	mov	r0, r5
   d6bda:	f001 fcba 	bl	d8552 <_ZdlPvj>
   d6bde:	4620      	mov	r0, r4
   d6be0:	2114      	movs	r1, #20
   d6be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6be6:	f001 bcb4 	b.w	d8552 <_ZdlPvj>
   d6bea:	bd38      	pop	{r3, r4, r5, pc}

000d6bec <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d6bec:	b510      	push	{r4, lr}
   d6bee:	b088      	sub	sp, #32
   d6bf0:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6bf2:	4668      	mov	r0, sp
   d6bf4:	f001 f8c6 	bl	d7d84 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d6bf8:	4669      	mov	r1, sp
   d6bfa:	a804      	add	r0, sp, #16
   d6bfc:	f001 f8e4 	bl	d7dc8 <_ZN6StringC1ERKS_>
   d6c00:	a804      	add	r0, sp, #16
   d6c02:	47a0      	blx	r4
   d6c04:	4604      	mov	r4, r0
   d6c06:	a804      	add	r0, sp, #16
   d6c08:	f001 f875 	bl	d7cf6 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6c0c:	4668      	mov	r0, sp
   d6c0e:	f001 f872 	bl	d7cf6 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d6c12:	4620      	mov	r0, r4
   d6c14:	b008      	add	sp, #32
   d6c16:	bd10      	pop	{r4, pc}

000d6c18 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d6c18:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d6c1a:	2410      	movs	r4, #16
   d6c1c:	b085      	sub	sp, #20
   d6c1e:	4607      	mov	r7, r0
   d6c20:	460e      	mov	r6, r1
   d6c22:	4615      	mov	r5, r2
   d6c24:	2100      	movs	r1, #0
   d6c26:	4622      	mov	r2, r4
   d6c28:	4668      	mov	r0, sp
   d6c2a:	f002 fc4f 	bl	d94cc <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6c2e:	2200      	movs	r2, #0
   d6c30:	4669      	mov	r1, sp
   d6c32:	4610      	mov	r0, r2
         size = sizeof(*this);
   d6c34:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d6c38:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d6c3a:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d6c3c:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6c3e:	f7ff fd6f 	bl	d6720 <spark_function>
}
   d6c42:	b005      	add	sp, #20
   d6c44:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6c46 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d6c46:	b513      	push	{r0, r1, r4, lr}
   d6c48:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6c4a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d6c4e:	2300      	movs	r3, #0
   d6c50:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6c52:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6c54:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6c56:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6c58:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6c5a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6c5c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6c5e:	f7fd fd43 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c62:	4620      	mov	r0, r4
   d6c64:	b002      	add	sp, #8
   d6c66:	bd10      	pop	{r4, pc}

000d6c68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6c6a:	460c      	mov	r4, r1
   d6c6c:	ad02      	add	r5, sp, #8
   d6c6e:	f854 3b04 	ldr.w	r3, [r4], #4
   d6c72:	f845 3d08 	str.w	r3, [r5, #-8]!
   d6c76:	4606      	mov	r6, r0
   d6c78:	460f      	mov	r7, r1
   d6c7a:	a801      	add	r0, sp, #4
   d6c7c:	4621      	mov	r1, r4
   d6c7e:	f7ff fe4e 	bl	d691e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d6c82:	4629      	mov	r1, r5
   d6c84:	4630      	mov	r0, r6
   d6c86:	f7ff ffde 	bl	d6c46 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6c8a:	a801      	add	r0, sp, #4
   d6c8c:	f7fd fd2c 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c90:	4620      	mov	r0, r4
   d6c92:	f7fd fd29 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d6c96:	4638      	mov	r0, r7
   d6c98:	2108      	movs	r1, #8
   d6c9a:	f001 fc5a 	bl	d8552 <_ZdlPvj>
        return p;
    }
   d6c9e:	4630      	mov	r0, r6
   d6ca0:	b003      	add	sp, #12
   d6ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6ca4 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d6ca4:	b513      	push	{r0, r1, r4, lr}
   d6ca6:	460b      	mov	r3, r1
   d6ca8:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6caa:	c803      	ldmia	r0, {r0, r1}
   d6cac:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6cb0:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6cb4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6cb8:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6cbc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6cc0:	b002      	add	sp, #8
   d6cc2:	bd10      	pop	{r4, pc}

000d6cc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6cc4:	b538      	push	{r3, r4, r5, lr}
   d6cc6:	2300      	movs	r3, #0
   d6cc8:	4604      	mov	r4, r0
   d6cca:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6ccc:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6cce:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6cd0:	f7fd f9e3 	bl	d409a <_Znwj>
   d6cd4:	b128      	cbz	r0, d6ce2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6cd6:	2301      	movs	r3, #1
   d6cd8:	6043      	str	r3, [r0, #4]
   d6cda:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6cdc:	4b02      	ldr	r3, [pc, #8]	; (d6ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6cde:	6003      	str	r3, [r0, #0]
   d6ce0:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6ce2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d6ce4:	4620      	mov	r0, r4
   d6ce6:	bd38      	pop	{r3, r4, r5, pc}
   d6ce8:	000dbec4 	.word	0x000dbec4

000d6cec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6cec:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6cee:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6cf0:	b90a      	cbnz	r2, d6cf6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6cf2:	f001 fc30 	bl	d8556 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6cf6:	68c3      	ldr	r3, [r0, #12]
    }
   d6cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6cfc:	4718      	bx	r3

000d6cfe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6cfe:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6d00:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6d02:	f100 0110 	add.w	r1, r0, #16
   d6d06:	f7ff fff1 	bl	d6cec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6d0a:	bd08      	pop	{r3, pc}

000d6d0c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6d0c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6d0e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6d10:	b90a      	cbnz	r2, d6d16 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6d12:	f001 fc20 	bl	d8556 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6d16:	68c3      	ldr	r3, [r0, #12]
    }
   d6d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6d1c:	4718      	bx	r3

000d6d1e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6d1e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6d20:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6d22:	f100 0110 	add.w	r1, r0, #16
   d6d26:	f7ff fff1 	bl	d6d0c <_ZNKSt8functionIFvRKbEEclES1_>
   d6d2a:	bd08      	pop	{r3, pc}

000d6d2c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6d2c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6d2e:	2300      	movs	r3, #0
   d6d30:	6083      	str	r3, [r0, #8]
   d6d32:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6d34:	4604      	mov	r4, r0
   d6d36:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6d38:	b12b      	cbz	r3, d6d46 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6d3a:	2202      	movs	r2, #2
   d6d3c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6d3e:	68eb      	ldr	r3, [r5, #12]
   d6d40:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6d42:	68ab      	ldr	r3, [r5, #8]
   d6d44:	60a3      	str	r3, [r4, #8]
	}
    }
   d6d46:	4620      	mov	r0, r4
   d6d48:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6d4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6d4e:	b089      	sub	sp, #36	; 0x24
   d6d50:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6d52:	4668      	mov	r0, sp
   d6d54:	f7ff ff11 	bl	d6b7a <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6d58:	2300      	movs	r3, #0
   d6d5a:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6d5e:	f04f 0202 	mov.w	r2, #2
   d6d62:	e8d4 3f4f 	ldrexb	r3, [r4]
   d6d66:	2b00      	cmp	r3, #0
   d6d68:	d103      	bne.n	d6d72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d6d6a:	e8c4 2f41 	strexb	r1, r2, [r4]
   d6d6e:	2900      	cmp	r1, #0
   d6d70:	d1f7      	bne.n	d6d62 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d6d72:	d002      	beq.n	d6d7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d6d74:	f88d 3008 	strb.w	r3, [sp, #8]
   d6d78:	e063      	b.n	d6e42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d6d7a:	f114 050c 	adds.w	r5, r4, #12
   d6d7e:	d003      	beq.n	d6d88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d6d80:	4669      	mov	r1, sp
   d6d82:	4628      	mov	r0, r5
   d6d84:	f7ff fef9 	bl	d6b7a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6d88:	f3bf 8f5f 	dmb	sy
   d6d8c:	2301      	movs	r3, #1
   d6d8e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6d90:	2000      	movs	r0, #0
   d6d92:	f104 0308 	add.w	r3, r4, #8
   d6d96:	f3bf 8f5f 	dmb	sy
   d6d9a:	e853 6f00 	ldrex	r6, [r3]
   d6d9e:	e843 0200 	strex	r2, r0, [r3]
   d6da2:	2a00      	cmp	r2, #0
   d6da4:	d1f9      	bne.n	d6d9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d6da6:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6daa:	2e00      	cmp	r6, #0
   d6dac:	d049      	beq.n	d6e42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6dae:	f7ff fc79 	bl	d66a4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6db2:	b120      	cbz	r0, d6dbe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6db4:	4629      	mov	r1, r5
   d6db6:	4630      	mov	r0, r6
   d6db8:	f7ff ff98 	bl	d6cec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6dbc:	e03a      	b.n	d6e34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6dbe:	4631      	mov	r1, r6
   d6dc0:	a802      	add	r0, sp, #8
   d6dc2:	f7ff ffb3 	bl	d6d2c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6dc6:	68e0      	ldr	r0, [r4, #12]
   d6dc8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6dcc:	b108      	cbz	r0, d6dd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d6dce:	f002 fbbf 	bl	d9550 <strdup>
   d6dd2:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6dd4:	2010      	movs	r0, #16
   d6dd6:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6dda:	f7fd f95e 	bl	d409a <_Znwj>
   d6dde:	4605      	mov	r5, r0
   d6de0:	b1e8      	cbz	r0, d6e1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6de2:	2700      	movs	r7, #0
   d6de4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6de6:	2018      	movs	r0, #24
   d6de8:	f7fd f957 	bl	d409a <_Znwj>
   d6dec:	4604      	mov	r4, r0
   d6dee:	b188      	cbz	r0, d6e14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6df0:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6df2:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6df4:	a802      	add	r0, sp, #8
   d6df6:	f7ff ff55 	bl	d6ca4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6dfa:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6dfc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6dfe:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e00:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6e02:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6e04:	a906      	add	r1, sp, #24
   d6e06:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e08:	60e3      	str	r3, [r4, #12]
   d6e0a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6e0e:	9205      	str	r2, [sp, #20]
   d6e10:	f7ff feb3 	bl	d6b7a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6e14:	4b0d      	ldr	r3, [pc, #52]	; (d6e4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d6e16:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6e18:	4b0d      	ldr	r3, [pc, #52]	; (d6e50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6e1a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6e1c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d6e1e:	a806      	add	r0, sp, #24
   d6e20:	f7ff feba 	bl	d6b98 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6e24:	a802      	add	r0, sp, #8
   d6e26:	f7ff f859 	bl	d5edc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6e2a:	2200      	movs	r2, #0
   d6e2c:	4629      	mov	r1, r5
   d6e2e:	4809      	ldr	r0, [pc, #36]	; (d6e54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d6e30:	f7ff fc40 	bl	d66b4 <application_thread_invoke>
   d6e34:	4630      	mov	r0, r6
   d6e36:	f7ff f851 	bl	d5edc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6e3a:	2110      	movs	r1, #16
   d6e3c:	4630      	mov	r0, r6
   d6e3e:	f001 fb88 	bl	d8552 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d6e42:	4668      	mov	r0, sp
   d6e44:	f7ff fea8 	bl	d6b98 <_ZN8particle5ErrorD1Ev>
    }
   d6e48:	b009      	add	sp, #36	; 0x24
   d6e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6e4c:	000d6cff 	.word	0x000d6cff
   d6e50:	000d6f75 	.word	0x000d6f75
   d6e54:	000d68f7 	.word	0x000d68f7

000d6e58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6e5c:	b08b      	sub	sp, #44	; 0x2c
   d6e5e:	4606      	mov	r6, r0
   d6e60:	460f      	mov	r7, r1
   d6e62:	4690      	mov	r8, r2
   d6e64:	4699      	mov	r9, r3
   d6e66:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6e6a:	f7ff fc79 	bl	d6760 <spark_cloud_flag_connected>
   d6e6e:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d6e70:	4683      	mov	fp, r0
   d6e72:	bb30      	cbnz	r0, d6ec2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6e74:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6e78:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6e7a:	a905      	add	r1, sp, #20
   d6e7c:	4628      	mov	r0, r5
   d6e7e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6e82:	f7ff fe7a 	bl	d6b7a <_ZN8particle5ErrorC1EOS0_>
   d6e86:	2014      	movs	r0, #20
   d6e88:	f7fd f907 	bl	d409a <_Znwj>
   d6e8c:	4604      	mov	r4, r0
   d6e8e:	b158      	cbz	r0, d6ea8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6e90:	2302      	movs	r3, #2
   d6e92:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6e94:	2301      	movs	r3, #1
   d6e96:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6e98:	f8c0 b004 	str.w	fp, [r0, #4]
   d6e9c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d6ea0:	4629      	mov	r1, r5
   d6ea2:	300c      	adds	r0, #12
   d6ea4:	f7ff fe69 	bl	d6b7a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6ea8:	4630      	mov	r0, r6
   d6eaa:	4621      	mov	r1, r4
   d6eac:	f840 4b04 	str.w	r4, [r0], #4
   d6eb0:	f7ff ff08 	bl	d6cc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6eb4:	4628      	mov	r0, r5
   d6eb6:	f7ff fe6f 	bl	d6b98 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6eba:	a805      	add	r0, sp, #20
   d6ebc:	f7ff fe6c 	bl	d6b98 <_ZN8particle5ErrorD1Ev>
   d6ec0:	e052      	b.n	d6f68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6ec2:	2400      	movs	r4, #0
   d6ec4:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6ec6:	2014      	movs	r0, #20
   d6ec8:	606c      	str	r4, [r5, #4]
   d6eca:	60ac      	str	r4, [r5, #8]
   d6ecc:	9307      	str	r3, [sp, #28]
   d6ece:	f7fd f8e4 	bl	d409a <_Znwj>
   d6ed2:	4601      	mov	r1, r0
   d6ed4:	b118      	cbz	r0, d6ede <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d6ed6:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6ed8:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6eda:	6044      	str	r4, [r0, #4]
   d6edc:	6084      	str	r4, [r0, #8]
   d6ede:	a804      	add	r0, sp, #16
   d6ee0:	9103      	str	r1, [sp, #12]
   d6ee2:	f7ff feef 	bl	d6cc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6ee6:	4b22      	ldr	r3, [pc, #136]	; (d6f70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6ee8:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6eea:	2008      	movs	r0, #8
   d6eec:	f7fd f8d5 	bl	d409a <_Znwj>
   d6ef0:	4604      	mov	r4, r0
   d6ef2:	b128      	cbz	r0, d6f00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6ef4:	9b03      	ldr	r3, [sp, #12]
   d6ef6:	f840 3b04 	str.w	r3, [r0], #4
   d6efa:	a904      	add	r1, sp, #16
   d6efc:	f7ff fd0f 	bl	d691e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6f00:	9500      	str	r5, [sp, #0]
   d6f02:	fa5f f38a 	uxtb.w	r3, sl
   d6f06:	464a      	mov	r2, r9
   d6f08:	4641      	mov	r1, r8
   d6f0a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6f0c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6f0e:	f7ff fc37 	bl	d6780 <spark_send_event>
   d6f12:	b920      	cbnz	r0, d6f1e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6f14:	9b03      	ldr	r3, [sp, #12]
   d6f16:	785b      	ldrb	r3, [r3, #1]
   d6f18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6f1c:	b183      	cbz	r3, d6f40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d6f1e:	9b03      	ldr	r3, [sp, #12]
   d6f20:	9305      	str	r3, [sp, #20]
   d6f22:	a904      	add	r1, sp, #16
   d6f24:	a806      	add	r0, sp, #24
   d6f26:	f7ff fcfa 	bl	d691e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6f2a:	a905      	add	r1, sp, #20
   d6f2c:	4630      	mov	r0, r6
   d6f2e:	f7ff fe8a 	bl	d6c46 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6f32:	a806      	add	r0, sp, #24
   d6f34:	f7fd fbd8 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f38:	a804      	add	r0, sp, #16
   d6f3a:	f7fd fbd5 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f3e:	e013      	b.n	d6f68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d6f40:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6f44:	a905      	add	r1, sp, #20
   d6f46:	a803      	add	r0, sp, #12
   d6f48:	9205      	str	r2, [sp, #20]
   d6f4a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6f4e:	f7ff fefd 	bl	d6d4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6f52:	a805      	add	r0, sp, #20
   d6f54:	f7ff fe20 	bl	d6b98 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6f58:	a805      	add	r0, sp, #20
   d6f5a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6f5c:	f7ff fe84 	bl	d6c68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d6f60:	a806      	add	r0, sp, #24
   d6f62:	f7fd fbc1 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f66:	e7da      	b.n	d6f1e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d6f68:	4630      	mov	r0, r6
   d6f6a:	b00b      	add	sp, #44	; 0x2c
   d6f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6f70:	000d70e5 	.word	0x000d70e5

000d6f74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6f74:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f78:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6f7a:	d006      	beq.n	d6f8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6f7c:	2a03      	cmp	r2, #3
   d6f7e:	d017      	beq.n	d6fb0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6f80:	2a01      	cmp	r2, #1
   d6f82:	d122      	bne.n	d6fca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6f84:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6f86:	6003      	str	r3, [r0, #0]
	      break;
   d6f88:	e01f      	b.n	d6fca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6f8a:	2018      	movs	r0, #24
   d6f8c:	680e      	ldr	r6, [r1, #0]
   d6f8e:	f7fd f884 	bl	d409a <_Znwj>
   d6f92:	4605      	mov	r5, r0
   d6f94:	b150      	cbz	r0, d6fac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6f96:	4631      	mov	r1, r6
   d6f98:	f7ff fec8 	bl	d6d2c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6f9c:	6930      	ldr	r0, [r6, #16]
   d6f9e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6fa2:	b108      	cbz	r0, d6fa8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6fa4:	f002 fad4 	bl	d9550 <strdup>
   d6fa8:	6128      	str	r0, [r5, #16]
   d6faa:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6fac:	6025      	str	r5, [r4, #0]
   d6fae:	e00c      	b.n	d6fca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6fb0:	6804      	ldr	r4, [r0, #0]
   d6fb2:	b154      	cbz	r4, d6fca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6fb4:	f104 0010 	add.w	r0, r4, #16
   d6fb8:	f7ff fdee 	bl	d6b98 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6fbc:	4620      	mov	r0, r4
   d6fbe:	f7fe ff8d 	bl	d5edc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6fc2:	2118      	movs	r1, #24
   d6fc4:	4620      	mov	r0, r4
   d6fc6:	f001 fac4 	bl	d8552 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6fca:	2000      	movs	r0, #0
   d6fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6fce <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6fce:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6fd0:	2300      	movs	r3, #0
   d6fd2:	6083      	str	r3, [r0, #8]
   d6fd4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6fd6:	4604      	mov	r4, r0
   d6fd8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6fda:	b12b      	cbz	r3, d6fe8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6fdc:	2202      	movs	r2, #2
   d6fde:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6fe0:	68eb      	ldr	r3, [r5, #12]
   d6fe2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6fe4:	68ab      	ldr	r3, [r5, #8]
   d6fe6:	60a3      	str	r3, [r4, #8]
	}
    }
   d6fe8:	4620      	mov	r0, r4
   d6fea:	bd38      	pop	{r3, r4, r5, pc}

000d6fec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6fec:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6fee:	b570      	push	{r4, r5, r6, lr}
   d6ff0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6ff2:	d006      	beq.n	d7002 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6ff4:	2a03      	cmp	r2, #3
   d6ff6:	d011      	beq.n	d701c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6ff8:	2a01      	cmp	r2, #1
   d6ffa:	d118      	bne.n	d702e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6ffc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6ffe:	6003      	str	r3, [r0, #0]
	      break;
   d7000:	e015      	b.n	d702e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7002:	2014      	movs	r0, #20
   d7004:	680e      	ldr	r6, [r1, #0]
   d7006:	f7fd f848 	bl	d409a <_Znwj>
   d700a:	4605      	mov	r5, r0
   d700c:	b120      	cbz	r0, d7018 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d700e:	4631      	mov	r1, r6
   d7010:	f7ff ffdd 	bl	d6fce <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7014:	7c33      	ldrb	r3, [r6, #16]
   d7016:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7018:	6025      	str	r5, [r4, #0]
   d701a:	e008      	b.n	d702e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d701c:	6804      	ldr	r4, [r0, #0]
   d701e:	b134      	cbz	r4, d702e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7020:	4620      	mov	r0, r4
   d7022:	f7fe ff5b 	bl	d5edc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7026:	2114      	movs	r1, #20
   d7028:	4620      	mov	r0, r4
   d702a:	f001 fa92 	bl	d8552 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d702e:	2000      	movs	r0, #0
   d7030:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7034 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d7034:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7036:	2300      	movs	r3, #0
   d7038:	b087      	sub	sp, #28
   d703a:	460c      	mov	r4, r1
   d703c:	f3bf 8f5f 	dmb	sy
   d7040:	e850 6f00 	ldrex	r6, [r0]
   d7044:	e840 3200 	strex	r2, r3, [r0]
   d7048:	2a00      	cmp	r2, #0
   d704a:	d1f9      	bne.n	d7040 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d704c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7050:	2e00      	cmp	r6, #0
   d7052:	d03f      	beq.n	d70d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7054:	4618      	mov	r0, r3
   d7056:	f7ff fb25 	bl	d66a4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d705a:	4607      	mov	r7, r0
   d705c:	b120      	cbz	r0, d7068 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d705e:	4621      	mov	r1, r4
   d7060:	4630      	mov	r0, r6
   d7062:	f7ff fe53 	bl	d6d0c <_ZNKSt8functionIFvRKbEEclES1_>
   d7066:	e02e      	b.n	d70c6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7068:	4631      	mov	r1, r6
   d706a:	a801      	add	r0, sp, #4
   d706c:	f7ff ffaf 	bl	d6fce <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7070:	7823      	ldrb	r3, [r4, #0]
   d7072:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7076:	2010      	movs	r0, #16
   d7078:	f7fd f80f 	bl	d409a <_Znwj>
   d707c:	4605      	mov	r5, r0
   d707e:	b1d0      	cbz	r0, d70b6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7080:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7082:	2014      	movs	r0, #20
   d7084:	f7fd f809 	bl	d409a <_Znwj>
   d7088:	4604      	mov	r4, r0
   d708a:	b178      	cbz	r0, d70ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d708c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d708e:	4601      	mov	r1, r0
   d7090:	a801      	add	r0, sp, #4
   d7092:	f7ff fe07 	bl	d6ca4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7096:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7098:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d709a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d709c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d709e:	9203      	str	r2, [sp, #12]
   d70a0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d70a2:	60e3      	str	r3, [r4, #12]
   d70a4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d70a8:	9204      	str	r2, [sp, #16]
   d70aa:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d70ac:	4b0a      	ldr	r3, [pc, #40]	; (d70d8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d70ae:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d70b0:	4b0a      	ldr	r3, [pc, #40]	; (d70dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d70b2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d70b4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d70b6:	a801      	add	r0, sp, #4
   d70b8:	f7fe ff10 	bl	d5edc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d70bc:	2200      	movs	r2, #0
   d70be:	4629      	mov	r1, r5
   d70c0:	4807      	ldr	r0, [pc, #28]	; (d70e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d70c2:	f7ff faf7 	bl	d66b4 <application_thread_invoke>
   d70c6:	4630      	mov	r0, r6
   d70c8:	f7fe ff08 	bl	d5edc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d70cc:	2110      	movs	r1, #16
   d70ce:	4630      	mov	r0, r6
   d70d0:	f001 fa3f 	bl	d8552 <_ZdlPvj>
        }
    }
   d70d4:	b007      	add	sp, #28
   d70d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d70d8:	000d6d1f 	.word	0x000d6d1f
   d70dc:	000d6fed 	.word	0x000d6fed
   d70e0:	000d68f7 	.word	0x000d68f7

000d70e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d70e4:	b530      	push	{r4, r5, lr}
   d70e6:	b085      	sub	sp, #20
   d70e8:	4604      	mov	r4, r0
   d70ea:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d70ec:	4668      	mov	r0, sp
   d70ee:	4611      	mov	r1, r2
   d70f0:	f7ff fdba 	bl	d6c68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d70f4:	b17c      	cbz	r4, d7116 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d70f6:	b224      	sxth	r4, r4
   d70f8:	4628      	mov	r0, r5
   d70fa:	b10d      	cbz	r5, d7100 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d70fc:	f002 fa28 	bl	d9550 <strdup>
   d7100:	9002      	str	r0, [sp, #8]
   d7102:	a902      	add	r1, sp, #8
   d7104:	4668      	mov	r0, sp
   d7106:	f8ad 400c 	strh.w	r4, [sp, #12]
   d710a:	f7ff fe1f 	bl	d6d4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d710e:	a802      	add	r0, sp, #8
   d7110:	f7ff fd42 	bl	d6b98 <_ZN8particle5ErrorD1Ev>
   d7114:	e01d      	b.n	d7152 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d7116:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7118:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d711c:	f04f 0201 	mov.w	r2, #1
   d7120:	e8d0 3f4f 	ldrexb	r3, [r0]
   d7124:	42a3      	cmp	r3, r4
   d7126:	d103      	bne.n	d7130 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d7128:	e8c0 2f41 	strexb	r1, r2, [r0]
   d712c:	2900      	cmp	r1, #0
   d712e:	d1f7      	bne.n	d7120 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d7130:	d002      	beq.n	d7138 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d7132:	f88d 3008 	strb.w	r3, [sp, #8]
   d7136:	e00c      	b.n	d7152 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d7138:	f110 010c 	adds.w	r1, r0, #12
   d713c:	f04f 0301 	mov.w	r3, #1
   d7140:	bf18      	it	ne
   d7142:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7144:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d7148:	3004      	adds	r0, #4
   d714a:	f800 3c03 	strb.w	r3, [r0, #-3]
   d714e:	f7ff ff71 	bl	d7034 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d7152:	a801      	add	r0, sp, #4
   d7154:	f7fd fac8 	bl	d46e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d7158:	b005      	add	sp, #20
   d715a:	bd30      	pop	{r4, r5, pc}

000d715c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d715c:	2200      	movs	r2, #0
   d715e:	4611      	mov	r1, r2
   d7160:	6840      	ldr	r0, [r0, #4]
   d7162:	f7ff bb6d 	b.w	d6840 <network_listening>

000d7166 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7166:	2200      	movs	r2, #0
   d7168:	4611      	mov	r1, r2
   d716a:	6840      	ldr	r0, [r0, #4]
   d716c:	f7ff bb78 	b.w	d6860 <network_get_listen_timeout>

000d7170 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7170:	2200      	movs	r2, #0
   d7172:	6840      	ldr	r0, [r0, #4]
   d7174:	f7ff bb6c 	b.w	d6850 <network_set_listen_timeout>

000d7178 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7178:	2200      	movs	r2, #0
   d717a:	f081 0101 	eor.w	r1, r1, #1
   d717e:	6840      	ldr	r0, [r0, #4]
   d7180:	f7ff bb56 	b.w	d6830 <network_listen>

000d7184 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d7184:	2300      	movs	r3, #0
   d7186:	461a      	mov	r2, r3
   d7188:	4619      	mov	r1, r3
   d718a:	6840      	ldr	r0, [r0, #4]
   d718c:	f7ff bb48 	b.w	d6820 <network_off>

000d7190 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7190:	2300      	movs	r3, #0
   d7192:	461a      	mov	r2, r3
   d7194:	4619      	mov	r1, r3
   d7196:	6840      	ldr	r0, [r0, #4]
   d7198:	f7ff bb3a 	b.w	d6810 <network_on>

000d719c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d719c:	2200      	movs	r2, #0
   d719e:	4611      	mov	r1, r2
   d71a0:	6840      	ldr	r0, [r0, #4]
   d71a2:	f7ff bb2d 	b.w	d6800 <network_ready>

000d71a6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d71a6:	2200      	movs	r2, #0
   d71a8:	4611      	mov	r1, r2
   d71aa:	6840      	ldr	r0, [r0, #4]
   d71ac:	f7ff bb18 	b.w	d67e0 <network_connecting>

000d71b0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d71b0:	2200      	movs	r2, #0
   d71b2:	2102      	movs	r1, #2
   d71b4:	6840      	ldr	r0, [r0, #4]
   d71b6:	f7ff bb1b 	b.w	d67f0 <network_disconnect>

000d71ba <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d71ba:	2300      	movs	r3, #0
   d71bc:	461a      	mov	r2, r3
   d71be:	6840      	ldr	r0, [r0, #4]
   d71c0:	f7ff bb06 	b.w	d67d0 <network_connect>

000d71c4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d71c4:	4b02      	ldr	r3, [pc, #8]	; (d71d0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d71c6:	2203      	movs	r2, #3
   d71c8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d71ca:	4a02      	ldr	r2, [pc, #8]	; (d71d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d71cc:	601a      	str	r2, [r3, #0]
   d71ce:	4770      	bx	lr
   d71d0:	2003e2d4 	.word	0x2003e2d4
   d71d4:	000dbee0 	.word	0x000dbee0

000d71d8 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d71d8:	6800      	ldr	r0, [r0, #0]
   d71da:	f000 b8d6 	b.w	d738a <_ZN7TwoWire4lockEv>

000d71de <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d71de:	b510      	push	{r4, lr}
   d71e0:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d71e2:	6001      	str	r1, [r0, #0]
   d71e4:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d71e6:	b10a      	cbz	r2, d71ec <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d71e8:	f7ff fff6 	bl	d71d8 <_ZN9FuelGauge4lockEv>
    }
}
   d71ec:	4620      	mov	r0, r4
   d71ee:	bd10      	pop	{r4, pc}

000d71f0 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d71f0:	b538      	push	{r3, r4, r5, lr}
   d71f2:	4604      	mov	r4, r0
   d71f4:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d71f6:	f001 f965 	bl	d84c4 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d71fa:	462a      	mov	r2, r5
   d71fc:	4601      	mov	r1, r0
   d71fe:	4620      	mov	r0, r4
   d7200:	f7ff ffed 	bl	d71de <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d7204:	4620      	mov	r0, r4
   d7206:	bd38      	pop	{r3, r4, r5, pc}

000d7208 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d7208:	6800      	ldr	r0, [r0, #0]
   d720a:	f000 b8c7 	b.w	d739c <_ZN7TwoWire6unlockEv>

000d720e <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d720e:	b510      	push	{r4, lr}
{
    if (lock_) {
   d7210:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d7212:	4604      	mov	r4, r0
{
    if (lock_) {
   d7214:	b10b      	cbz	r3, d721a <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d7216:	f7ff fff7 	bl	d7208 <_ZN9FuelGauge6unlockEv>
    }
}
   d721a:	4620      	mov	r0, r4
   d721c:	bd10      	pop	{r4, pc}

000d721e <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d721e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7220:	4604      	mov	r4, r0
   d7222:	4616      	mov	r6, r2
   d7224:	461d      	mov	r5, r3
   d7226:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d7228:	f7ff ffd6 	bl	d71d8 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d722c:	6820      	ldr	r0, [r4, #0]
   d722e:	2136      	movs	r1, #54	; 0x36
   d7230:	f000 f89d 	bl	d736e <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d7234:	6820      	ldr	r0, [r4, #0]
   d7236:	6803      	ldr	r3, [r0, #0]
   d7238:	4639      	mov	r1, r7
   d723a:	689b      	ldr	r3, [r3, #8]
   d723c:	4798      	blx	r3
    i2c_.endTransmission(true);
   d723e:	2101      	movs	r1, #1
   d7240:	6820      	ldr	r0, [r4, #0]
   d7242:	f000 f897 	bl	d7374 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d7246:	2202      	movs	r2, #2
   d7248:	2136      	movs	r1, #54	; 0x36
   d724a:	2301      	movs	r3, #1
   d724c:	6820      	ldr	r0, [r4, #0]
   d724e:	f000 f885 	bl	d735c <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
   d7252:	6820      	ldr	r0, [r4, #0]
   d7254:	6803      	ldr	r3, [r0, #0]
   d7256:	695b      	ldr	r3, [r3, #20]
   d7258:	4798      	blx	r3
   d725a:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d725c:	6820      	ldr	r0, [r4, #0]
   d725e:	6803      	ldr	r3, [r0, #0]
   d7260:	695b      	ldr	r3, [r3, #20]
   d7262:	4798      	blx	r3
   d7264:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d7266:	4620      	mov	r0, r4
}
   d7268:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d726c:	f7ff bfcc 	b.w	d7208 <_ZN9FuelGauge6unlockEv>

000d7270 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d7270:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d7272:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d7274:	2200      	movs	r2, #0
	byte LSB = 0;
   d7276:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d727a:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d727e:	2104      	movs	r1, #4
   d7280:	f10d 0206 	add.w	r2, sp, #6
   d7284:	f7ff ffcb 	bl	d721e <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d7288:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d728c:	f001 fc00 	bl	d8a90 <__aeabi_i2d>
   d7290:	2200      	movs	r2, #0
   d7292:	4b09      	ldr	r3, [pc, #36]	; (d72b8 <_ZN9FuelGauge6getSoCEv+0x48>)
   d7294:	f001 fc62 	bl	d8b5c <__aeabi_dmul>
   d7298:	f001 ff58 	bl	d914c <__aeabi_d2f>
   d729c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d72a0:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d72a4:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d72a8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d72ac:	ee37 0a80 	vadd.f32	s0, s15, s0
   d72b0:	b003      	add	sp, #12
   d72b2:	f85d fb04 	ldr.w	pc, [sp], #4
   d72b6:	bf00      	nop
   d72b8:	3f700000 	.word	0x3f700000

000d72bc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d72bc:	4770      	bx	lr

000d72be <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d72be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d72c0:	4606      	mov	r6, r0
   d72c2:	4615      	mov	r5, r2
   d72c4:	460c      	mov	r4, r1
   d72c6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d72c8:	42bc      	cmp	r4, r7
   d72ca:	d006      	beq.n	d72da <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d72cc:	6833      	ldr	r3, [r6, #0]
   d72ce:	f814 1b01 	ldrb.w	r1, [r4], #1
   d72d2:	689b      	ldr	r3, [r3, #8]
   d72d4:	4630      	mov	r0, r6
   d72d6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d72d8:	e7f6      	b.n	d72c8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d72da:	4628      	mov	r0, r5
   d72dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d72de <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d72de:	2200      	movs	r2, #0
   d72e0:	7c00      	ldrb	r0, [r0, #16]
   d72e2:	f7ff b8c7 	b.w	d6474 <HAL_I2C_Write_Data>

000d72e6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d72e6:	2100      	movs	r1, #0
   d72e8:	7c00      	ldrb	r0, [r0, #16]
   d72ea:	f7ff b8cb 	b.w	d6484 <HAL_I2C_Available_Data>

000d72ee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d72ee:	2100      	movs	r1, #0
   d72f0:	7c00      	ldrb	r0, [r0, #16]
   d72f2:	f7ff b8cf 	b.w	d6494 <HAL_I2C_Read_Data>

000d72f6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d72f6:	2100      	movs	r1, #0
   d72f8:	7c00      	ldrb	r0, [r0, #16]
   d72fa:	f7ff b8d3 	b.w	d64a4 <HAL_I2C_Peek_Data>

000d72fe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d72fe:	2100      	movs	r1, #0
   d7300:	7c00      	ldrb	r0, [r0, #16]
   d7302:	f7ff b8d7 	b.w	d64b4 <HAL_I2C_Flush_Data>

000d7306 <_ZN7TwoWireD0Ev>:
   d7306:	b510      	push	{r4, lr}
   d7308:	2114      	movs	r1, #20
   d730a:	4604      	mov	r4, r0
   d730c:	f001 f921 	bl	d8552 <_ZdlPvj>
   d7310:	4620      	mov	r0, r4
   d7312:	bd10      	pop	{r4, pc}

000d7314 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d7314:	b510      	push	{r4, lr}
   d7316:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7318:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d731c:	4608      	mov	r0, r1
   d731e:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7320:	2100      	movs	r1, #0
   d7322:	4b04      	ldr	r3, [pc, #16]	; (d7334 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d7324:	7420      	strb	r0, [r4, #16]
   d7326:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d7328:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d732a:	f7ff f8d3 	bl	d64d4 <HAL_I2C_Init>

}
   d732e:	4620      	mov	r0, r4
   d7330:	bd10      	pop	{r4, pc}
   d7332:	bf00      	nop
   d7334:	000dbf14 	.word	0x000dbf14

000d7338 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7338:	2300      	movs	r3, #0
   d733a:	461a      	mov	r2, r3
   d733c:	4619      	mov	r1, r3
   d733e:	7c00      	ldrb	r0, [r0, #16]
   d7340:	f7ff b878 	b.w	d6434 <HAL_I2C_Begin>

000d7344 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d7344:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d7346:	2400      	movs	r4, #0
   d7348:	7c00      	ldrb	r0, [r0, #16]
   d734a:	9400      	str	r4, [sp, #0]
   d734c:	f7ff f87a 	bl	d6444 <HAL_I2C_Request_Data>
  return result;
}
   d7350:	b2c0      	uxtb	r0, r0
   d7352:	b002      	add	sp, #8
   d7354:	bd10      	pop	{r4, pc}

000d7356 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d7356:	2301      	movs	r3, #1
   d7358:	f7ff bff4 	b.w	d7344 <_ZN7TwoWire11requestFromEhhh>

000d735c <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
   d735c:	b2db      	uxtb	r3, r3
   d735e:	b2d2      	uxtb	r2, r2
   d7360:	b2c9      	uxtb	r1, r1
   d7362:	f7ff bfef 	b.w	d7344 <_ZN7TwoWire11requestFromEhhh>

000d7366 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d7366:	2200      	movs	r2, #0
   d7368:	7c00      	ldrb	r0, [r0, #16]
   d736a:	f7ff b873 	b.w	d6454 <HAL_I2C_Begin_Transmission>

000d736e <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d736e:	b2c9      	uxtb	r1, r1
   d7370:	f7ff bff9 	b.w	d7366 <_ZN7TwoWire17beginTransmissionEh>

000d7374 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d7374:	2200      	movs	r2, #0
   d7376:	7c00      	ldrb	r0, [r0, #16]
   d7378:	f7ff b874 	b.w	d6464 <HAL_I2C_End_Transmission>

000d737c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d737c:	2101      	movs	r1, #1
   d737e:	f7ff bff9 	b.w	d7374 <_ZN7TwoWire15endTransmissionEh>

000d7382 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7382:	2100      	movs	r1, #0
   d7384:	7c00      	ldrb	r0, [r0, #16]
   d7386:	f7ff b89d 	b.w	d64c4 <HAL_I2C_Is_Enabled>

000d738a <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d738a:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d738c:	2100      	movs	r1, #0
   d738e:	7c00      	ldrb	r0, [r0, #16]
   d7390:	f7ff f8a8 	bl	d64e4 <HAL_I2C_Acquire>
}
   d7394:	fab0 f080 	clz	r0, r0
   d7398:	0940      	lsrs	r0, r0, #5
   d739a:	bd08      	pop	{r3, pc}

000d739c <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d739c:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d739e:	2100      	movs	r1, #0
   d73a0:	7c00      	ldrb	r0, [r0, #16]
   d73a2:	f7ff f8a7 	bl	d64f4 <HAL_I2C_Release>
}
   d73a6:	fab0 f080 	clz	r0, r0
   d73aa:	0940      	lsrs	r0, r0, #5
   d73ac:	bd08      	pop	{r3, pc}

000d73ae <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d73ae:	4700      	bx	r0

000d73b0 <_Z15attachInterrupttPFvvE13InterruptModeah>:
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
   d73b0:	2807      	cmp	r0, #7
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d73b2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d73b6:	4605      	mov	r5, r0
   d73b8:	460f      	mov	r7, r1
   d73ba:	4690      	mov	r8, r2
   d73bc:	461e      	mov	r6, r3
   d73be:	f04f 0400 	mov.w	r4, #0
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
   d73c2:	d019      	beq.n	d73f8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>
#endif
    HAL_Interrupts_Detach(pin);
   d73c4:	f7ff f826 	bl	d6414 <HAL_Interrupts_Detach>
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d73c8:	42a6      	cmp	r6, r4
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d73ca:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d73ce:	9403      	str	r4, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d73d0:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d73d4:	bfa2      	ittt	ge
   d73d6:	ac03      	addge	r4, sp, #12
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d73d8:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d73dc:	f88d 300e 	strbge.w	r3, [sp, #14]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
   d73e0:	4628      	mov	r0, r5
   d73e2:	9400      	str	r4, [sp, #0]
   d73e4:	4643      	mov	r3, r8
   d73e6:	463a      	mov	r2, r7
   d73e8:	4905      	ldr	r1, [pc, #20]	; (d7400 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d73ea:	bfa8      	it	ge
   d73ec:	f88d 600d 	strbge.w	r6, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
   d73f0:	f7ff f808 	bl	d6404 <HAL_Interrupts_Attach>
    return true;
   d73f4:	2001      	movs	r0, #1
   d73f6:	e000      	b.n	d73fa <_Z15attachInterrupttPFvvE13InterruptModeah+0x4a>
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
   d73f8:	4620      	mov	r0, r4
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
    return true;
}
   d73fa:	b004      	add	sp, #16
   d73fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7400:	000d73af 	.word	0x000d73af

000d7404 <_Z15detachInterruptt>:
void detachInterrupt(uint16_t pin)
{
#if Wiring_Cellular == 1
    /* safety check that prevents users from detaching an interrupt from
     * BATT_INT_PC13 for power management which is shared with D7 */
    if (pin == D7) return;
   d7404:	2807      	cmp	r0, #7
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void detachInterrupt(uint16_t pin)
{
   d7406:	b570      	push	{r4, r5, r6, lr}
   d7408:	4605      	mov	r5, r0
#if Wiring_Cellular == 1
    /* safety check that prevents users from detaching an interrupt from
     * BATT_INT_PC13 for power management which is shared with D7 */
    if (pin == D7) return;
   d740a:	d010      	beq.n	d742e <_Z15detachInterruptt+0x2a>
#endif
    HAL_Interrupts_Detach(pin);
   d740c:	f7ff f802 	bl	d6414 <HAL_Interrupts_Detach>
    delete handlers[pin];
   d7410:	4b07      	ldr	r3, [pc, #28]	; (d7430 <_Z15detachInterruptt+0x2c>)
   d7412:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
   d7416:	461c      	mov	r4, r3
   d7418:	b136      	cbz	r6, d7428 <_Z15detachInterruptt+0x24>
   d741a:	4630      	mov	r0, r6
   d741c:	f7fe fd5e 	bl	d5edc <_ZNSt14_Function_baseD1Ev>
   d7420:	2110      	movs	r1, #16
   d7422:	4630      	mov	r0, r6
   d7424:	f001 f895 	bl	d8552 <_ZdlPvj>
    handlers[pin] = NULL;
   d7428:	2300      	movs	r3, #0
   d742a:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   d742e:	bd70      	pop	{r4, r5, r6, pc}
   d7430:	2003e2dc 	.word	0x2003e2dc

000d7434 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7434:	4770      	bx	lr

000d7436 <_ZN9IPAddressD0Ev>:
   d7436:	b510      	push	{r4, lr}
   d7438:	2118      	movs	r1, #24
   d743a:	4604      	mov	r4, r0
   d743c:	f001 f889 	bl	d8552 <_ZdlPvj>
   d7440:	4620      	mov	r0, r4
   d7442:	bd10      	pop	{r4, pc}

000d7444 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7444:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7446:	7d03      	ldrb	r3, [r0, #20]
   d7448:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d744a:	b08d      	sub	sp, #52	; 0x34
   d744c:	460e      	mov	r6, r1
   d744e:	f100 0704 	add.w	r7, r0, #4
   d7452:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7456:	d002      	beq.n	d745e <_ZNK9IPAddress7printToER5Print+0x1a>
   d7458:	f100 0508 	add.w	r5, r0, #8
   d745c:	e018      	b.n	d7490 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d745e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7460:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7462:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7466:	232f      	movs	r3, #47	; 0x2f
   d7468:	462a      	mov	r2, r5
   d746a:	200a      	movs	r0, #10
   d746c:	f7ff f84a 	bl	d6504 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7470:	4628      	mov	r0, r5
   d7472:	f002 f888 	bl	d9586 <strlen>
   d7476:	6833      	ldr	r3, [r6, #0]
   d7478:	4602      	mov	r2, r0
   d747a:	68db      	ldr	r3, [r3, #12]
   d747c:	4629      	mov	r1, r5
   d747e:	4630      	mov	r0, r6
   d7480:	4798      	blx	r3
   d7482:	e00f      	b.n	d74a4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7484:	b124      	cbz	r4, d7490 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7486:	212e      	movs	r1, #46	; 0x2e
   d7488:	4630      	mov	r0, r6
   d748a:	f000 fb94 	bl	d7bb6 <_ZN5Print5printEc>
   d748e:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d7490:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7494:	220a      	movs	r2, #10
   d7496:	4630      	mov	r0, r6
   d7498:	f000 fbd3 	bl	d7c42 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d749c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d749e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d74a0:	d1f0      	bne.n	d7484 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d74a2:	4620      	mov	r0, r4
    }
    return n;
}
   d74a4:	b00d      	add	sp, #52	; 0x34
   d74a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d74a8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d74a8:	b510      	push	{r4, lr}
   d74aa:	4b05      	ldr	r3, [pc, #20]	; (d74c0 <_ZN9IPAddressC1Ev+0x18>)
   d74ac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d74ae:	2211      	movs	r2, #17
   d74b0:	f840 3b04 	str.w	r3, [r0], #4
   d74b4:	2100      	movs	r1, #0
   d74b6:	f002 f809 	bl	d94cc <memset>
{
    clear();
}
   d74ba:	4620      	mov	r0, r4
   d74bc:	bd10      	pop	{r4, pc}
   d74be:	bf00      	nop
   d74c0:	000dbf3c 	.word	0x000dbf3c

000d74c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d74c4:	4603      	mov	r3, r0
   d74c6:	4a07      	ldr	r2, [pc, #28]	; (d74e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d74c8:	b510      	push	{r4, lr}
   d74ca:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d74ce:	f101 0210 	add.w	r2, r1, #16
   d74d2:	f851 4b04 	ldr.w	r4, [r1], #4
   d74d6:	f843 4b04 	str.w	r4, [r3], #4
   d74da:	4291      	cmp	r1, r2
   d74dc:	d1f9      	bne.n	d74d2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d74de:	780a      	ldrb	r2, [r1, #0]
   d74e0:	701a      	strb	r2, [r3, #0]
}
   d74e2:	bd10      	pop	{r4, pc}
   d74e4:	000dbf3c 	.word	0x000dbf3c

000d74e8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d74e8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d74ea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d74ee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d74f2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d74f6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d74fa:	2304      	movs	r3, #4
   d74fc:	6041      	str	r1, [r0, #4]
   d74fe:	7503      	strb	r3, [r0, #20]
   d7500:	bd10      	pop	{r4, pc}

000d7502 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7502:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7504:	780d      	ldrb	r5, [r1, #0]
   d7506:	788b      	ldrb	r3, [r1, #2]
   d7508:	784a      	ldrb	r2, [r1, #1]
   d750a:	78c9      	ldrb	r1, [r1, #3]
   d750c:	9100      	str	r1, [sp, #0]
   d750e:	4629      	mov	r1, r5
   d7510:	f7ff ffea 	bl	d74e8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7514:	b003      	add	sp, #12
   d7516:	bd30      	pop	{r4, r5, pc}

000d7518 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7518:	4b01      	ldr	r3, [pc, #4]	; (d7520 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d751a:	4a02      	ldr	r2, [pc, #8]	; (d7524 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d751c:	601a      	str	r2, [r3, #0]
   d751e:	4770      	bx	lr
   d7520:	2003e36c 	.word	0x2003e36c
   d7524:	000dbff5 	.word	0x000dbff5

000d7528 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7528:	2200      	movs	r2, #0
   d752a:	4611      	mov	r1, r2
   d752c:	6840      	ldr	r0, [r0, #4]
   d752e:	f7ff b987 	b.w	d6840 <network_listening>

000d7532 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7532:	2200      	movs	r2, #0
   d7534:	4611      	mov	r1, r2
   d7536:	6840      	ldr	r0, [r0, #4]
   d7538:	f7ff b992 	b.w	d6860 <network_get_listen_timeout>

000d753c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d753c:	2200      	movs	r2, #0
   d753e:	6840      	ldr	r0, [r0, #4]
   d7540:	f7ff b986 	b.w	d6850 <network_set_listen_timeout>

000d7544 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7544:	2200      	movs	r2, #0
   d7546:	f081 0101 	eor.w	r1, r1, #1
   d754a:	6840      	ldr	r0, [r0, #4]
   d754c:	f7ff b970 	b.w	d6830 <network_listen>

000d7550 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7550:	2300      	movs	r3, #0
   d7552:	461a      	mov	r2, r3
   d7554:	2101      	movs	r1, #1
   d7556:	6840      	ldr	r0, [r0, #4]
   d7558:	f7ff b962 	b.w	d6820 <network_off>

000d755c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d755c:	2300      	movs	r3, #0
   d755e:	461a      	mov	r2, r3
   d7560:	4619      	mov	r1, r3
   d7562:	6840      	ldr	r0, [r0, #4]
   d7564:	f7ff b954 	b.w	d6810 <network_on>

000d7568 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7568:	2200      	movs	r2, #0
   d756a:	4611      	mov	r1, r2
   d756c:	6840      	ldr	r0, [r0, #4]
   d756e:	f7ff b947 	b.w	d6800 <network_ready>

000d7572 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7572:	2200      	movs	r2, #0
   d7574:	4611      	mov	r1, r2
   d7576:	6840      	ldr	r0, [r0, #4]
   d7578:	f7ff b932 	b.w	d67e0 <network_connecting>

000d757c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d757c:	2200      	movs	r2, #0
   d757e:	2102      	movs	r1, #2
   d7580:	6840      	ldr	r0, [r0, #4]
   d7582:	f7ff b935 	b.w	d67f0 <network_disconnect>

000d7586 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7586:	2300      	movs	r3, #0
   d7588:	461a      	mov	r2, r3
   d758a:	6840      	ldr	r0, [r0, #4]
   d758c:	f7ff b920 	b.w	d67d0 <network_connect>

000d7590 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7590:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7592:	4605      	mov	r5, r0
   d7594:	b188      	cbz	r0, d75ba <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7596:	6804      	ldr	r4, [r0, #0]
   d7598:	b14c      	cbz	r4, d75ae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d759a:	68a3      	ldr	r3, [r4, #8]
   d759c:	b11b      	cbz	r3, d75a6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d759e:	2203      	movs	r2, #3
   d75a0:	4621      	mov	r1, r4
   d75a2:	4620      	mov	r0, r4
   d75a4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d75a6:	2110      	movs	r1, #16
   d75a8:	4620      	mov	r0, r4
   d75aa:	f000 ffd2 	bl	d8552 <_ZdlPvj>
   d75ae:	4628      	mov	r0, r5
   d75b0:	2114      	movs	r1, #20
      }
   d75b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d75b6:	f000 bfcc 	b.w	d8552 <_ZdlPvj>
   d75ba:	bd38      	pop	{r3, r4, r5, pc}

000d75bc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d75bc:	b110      	cbz	r0, d75c4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d75be:	6803      	ldr	r3, [r0, #0]
   d75c0:	685b      	ldr	r3, [r3, #4]
   d75c2:	4718      	bx	r3
   d75c4:	4770      	bx	lr

000d75c6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d75c6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d75c8:	6803      	ldr	r3, [r0, #0]
   d75ca:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d75cc:	b1bb      	cbz	r3, d75fe <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d75ce:	6858      	ldr	r0, [r3, #4]
   d75d0:	f7fe fe78 	bl	d62c4 <os_thread_is_current>
   d75d4:	b978      	cbnz	r0, d75f6 <_ZN6ThreadD1Ev+0x30>
   d75d6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d75d8:	7c5a      	ldrb	r2, [r3, #17]
   d75da:	b912      	cbnz	r2, d75e2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d75dc:	6858      	ldr	r0, [r3, #4]
   d75de:	f7fe fe79 	bl	d62d4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d75e2:	6823      	ldr	r3, [r4, #0]
   d75e4:	6858      	ldr	r0, [r3, #4]
   d75e6:	f7fe fe7d 	bl	d62e4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d75ea:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d75ec:	2300      	movs	r3, #0
   d75ee:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d75f0:	b128      	cbz	r0, d75fe <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d75f2:	f7ff ffcd 	bl	d7590 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d75f6:	6820      	ldr	r0, [r4, #0]
   d75f8:	b108      	cbz	r0, d75fe <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d75fa:	f7ff ffc9 	bl	d7590 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d75fe:	4620      	mov	r0, r4
   d7600:	bd10      	pop	{r4, pc}
	...

000d7604 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7604:	b538      	push	{r3, r4, r5, lr}
   d7606:	4b0c      	ldr	r3, [pc, #48]	; (d7638 <_ZN5spark9MeshClassD1Ev+0x34>)
   d7608:	6003      	str	r3, [r0, #0]
   d760a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d760c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d7610:	b108      	cbz	r0, d7616 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7612:	f7fc fd46 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7616:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d761a:	b135      	cbz	r5, d762a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d761c:	4628      	mov	r0, r5
   d761e:	f7ff ffd2 	bl	d75c6 <_ZN6ThreadD1Ev>
   d7622:	2104      	movs	r1, #4
   d7624:	4628      	mov	r0, r5
   d7626:	f000 ff94 	bl	d8552 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d762a:	68a0      	ldr	r0, [r4, #8]
   d762c:	b108      	cbz	r0, d7632 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d762e:	f7ff ffc5 	bl	d75bc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7632:	4620      	mov	r0, r4
   d7634:	bd38      	pop	{r3, r4, r5, pc}
   d7636:	bf00      	nop
   d7638:	000dc028 	.word	0x000dc028

000d763c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d763c:	b538      	push	{r3, r4, r5, lr}
   d763e:	4c0e      	ldr	r4, [pc, #56]	; (d7678 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7640:	4b0e      	ldr	r3, [pc, #56]	; (d767c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7642:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7644:	2500      	movs	r5, #0
   d7646:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7648:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d764c:	6063      	str	r3, [r4, #4]
   d764e:	60a5      	str	r5, [r4, #8]
   d7650:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7654:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7658:	f7fe fe54 	bl	d6304 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d765c:	4b08      	ldr	r3, [pc, #32]	; (d7680 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d765e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7662:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7666:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7668:	4620      	mov	r0, r4
   d766a:	4a06      	ldr	r2, [pc, #24]	; (d7684 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d766c:	4906      	ldr	r1, [pc, #24]	; (d7688 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d766e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7672:	f000 bf69 	b.w	d8548 <__aeabi_atexit>
   d7676:	bf00      	nop
   d7678:	2003e370 	.word	0x2003e370
   d767c:	000dc05c 	.word	0x000dc05c
   d7680:	000dc028 	.word	0x000dc028
   d7684:	2003e194 	.word	0x2003e194
   d7688:	000d7605 	.word	0x000d7605

000d768c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d768c:	2300      	movs	r3, #0
   d768e:	461a      	mov	r2, r3
   d7690:	6840      	ldr	r0, [r0, #4]
   d7692:	f7ff b89d 	b.w	d67d0 <network_connect>

000d7696 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7696:	2200      	movs	r2, #0
   d7698:	2102      	movs	r1, #2
   d769a:	6840      	ldr	r0, [r0, #4]
   d769c:	f7ff b8a8 	b.w	d67f0 <network_disconnect>

000d76a0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d76a0:	2200      	movs	r2, #0
   d76a2:	4611      	mov	r1, r2
   d76a4:	6840      	ldr	r0, [r0, #4]
   d76a6:	f7ff b89b 	b.w	d67e0 <network_connecting>

000d76aa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d76aa:	2200      	movs	r2, #0
   d76ac:	4611      	mov	r1, r2
   d76ae:	6840      	ldr	r0, [r0, #4]
   d76b0:	f7ff b8a6 	b.w	d6800 <network_ready>

000d76b4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d76b4:	2300      	movs	r3, #0
   d76b6:	461a      	mov	r2, r3
   d76b8:	4619      	mov	r1, r3
   d76ba:	6840      	ldr	r0, [r0, #4]
   d76bc:	f7ff b8a8 	b.w	d6810 <network_on>

000d76c0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d76c0:	2300      	movs	r3, #0
   d76c2:	461a      	mov	r2, r3
   d76c4:	4619      	mov	r1, r3
   d76c6:	6840      	ldr	r0, [r0, #4]
   d76c8:	f7ff b8aa 	b.w	d6820 <network_off>

000d76cc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d76cc:	2200      	movs	r2, #0
   d76ce:	f081 0101 	eor.w	r1, r1, #1
   d76d2:	6840      	ldr	r0, [r0, #4]
   d76d4:	f7ff b8ac 	b.w	d6830 <network_listen>

000d76d8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d76d8:	2200      	movs	r2, #0
   d76da:	6840      	ldr	r0, [r0, #4]
   d76dc:	f7ff b8b8 	b.w	d6850 <network_set_listen_timeout>

000d76e0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d76e0:	2200      	movs	r2, #0
   d76e2:	4611      	mov	r1, r2
   d76e4:	6840      	ldr	r0, [r0, #4]
   d76e6:	f7ff b8bb 	b.w	d6860 <network_get_listen_timeout>

000d76ea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d76ea:	2200      	movs	r2, #0
   d76ec:	4611      	mov	r1, r2
   d76ee:	6840      	ldr	r0, [r0, #4]
   d76f0:	f7ff b8a6 	b.w	d6840 <network_listening>

000d76f4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d76f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d76f8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d76fa:	b095      	sub	sp, #84	; 0x54
   d76fc:	4616      	mov	r6, r2
   d76fe:	460d      	mov	r5, r1
   d7700:	4607      	mov	r7, r0
    IPAddress addr;
   d7702:	f7ff fed1 	bl	d74a8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7706:	4621      	mov	r1, r4
   d7708:	2220      	movs	r2, #32
   d770a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d770c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d770e:	f001 fedd 	bl	d94cc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7712:	2340      	movs	r3, #64	; 0x40
   d7714:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7716:	4621      	mov	r1, r4
   d7718:	466b      	mov	r3, sp
   d771a:	aa0c      	add	r2, sp, #48	; 0x30
   d771c:	4630      	mov	r0, r6
   d771e:	f7fe ff01 	bl	d6524 <netdb_getaddrinfo>
    if (!r) {
   d7722:	4604      	mov	r4, r0
   d7724:	2800      	cmp	r0, #0
   d7726:	d144      	bne.n	d77b2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7728:	4602      	mov	r2, r0
   d772a:	2101      	movs	r1, #1
   d772c:	6868      	ldr	r0, [r5, #4]
   d772e:	f7ff f867 	bl	d6800 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7732:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7734:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7736:	4622      	mov	r2, r4
   d7738:	6868      	ldr	r0, [r5, #4]
   d773a:	f7ff f861 	bl	d6800 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d773e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7740:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7742:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7744:	2e00      	cmp	r6, #0
   d7746:	d034      	beq.n	d77b2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7748:	2900      	cmp	r1, #0
   d774a:	d132      	bne.n	d77b2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d774c:	6873      	ldr	r3, [r6, #4]
   d774e:	2b02      	cmp	r3, #2
   d7750:	d002      	beq.n	d7758 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7752:	2b0a      	cmp	r3, #10
   d7754:	d009      	beq.n	d776a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7756:	e02a      	b.n	d77ae <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7758:	f1b8 0f00 	cmp.w	r8, #0
   d775c:	d027      	beq.n	d77ae <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d775e:	6971      	ldr	r1, [r6, #20]
   d7760:	4638      	mov	r0, r7
   d7762:	3104      	adds	r1, #4
   d7764:	f7ff fecd 	bl	d7502 <_ZN9IPAddressaSEPKh>
   d7768:	e020      	b.n	d77ac <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d776a:	f1b9 0f00 	cmp.w	r9, #0
   d776e:	d01e      	beq.n	d77ae <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7770:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7772:	2211      	movs	r2, #17
   d7774:	a801      	add	r0, sp, #4
   d7776:	f001 fea9 	bl	d94cc <memset>
                    a.v = 6;
   d777a:	2306      	movs	r3, #6
   d777c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7780:	ad01      	add	r5, sp, #4
   d7782:	f104 0308 	add.w	r3, r4, #8
   d7786:	3418      	adds	r4, #24
   d7788:	6818      	ldr	r0, [r3, #0]
   d778a:	6859      	ldr	r1, [r3, #4]
   d778c:	462a      	mov	r2, r5
   d778e:	c203      	stmia	r2!, {r0, r1}
   d7790:	3308      	adds	r3, #8
   d7792:	42a3      	cmp	r3, r4
   d7794:	4615      	mov	r5, r2
   d7796:	d1f7      	bne.n	d7788 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7798:	a901      	add	r1, sp, #4
   d779a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d779c:	ad07      	add	r5, sp, #28
   d779e:	f7ff fe91 	bl	d74c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d77a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d77a4:	1d3c      	adds	r4, r7, #4
   d77a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d77a8:	682b      	ldr	r3, [r5, #0]
   d77aa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d77ac:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d77ae:	69f6      	ldr	r6, [r6, #28]
   d77b0:	e7c8      	b.n	d7744 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d77b2:	9800      	ldr	r0, [sp, #0]
   d77b4:	f7fe feae 	bl	d6514 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d77b8:	4638      	mov	r0, r7
   d77ba:	b015      	add	sp, #84	; 0x54
   d77bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d77c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d77c0:	4b02      	ldr	r3, [pc, #8]	; (d77cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d77c2:	4a03      	ldr	r2, [pc, #12]	; (d77d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d77c4:	601a      	str	r2, [r3, #0]
   d77c6:	2200      	movs	r2, #0
   d77c8:	605a      	str	r2, [r3, #4]
   d77ca:	4770      	bx	lr
   d77cc:	2003e544 	.word	0x2003e544
   d77d0:	000dc05c 	.word	0x000dc05c

000d77d4 <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
   d77d4:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d77d6:	f000 fe75 	bl	d84c4 <_Z20__fetch_global_Wire1v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
   d77da:	f7ff fdd2 	bl	d7382 <_ZN7TwoWire9isEnabledEv>
   d77de:	b918      	cbnz	r0, d77e8 <_ZN4PMIC5beginEv+0x14>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d77e0:	f000 fe70 	bl	d84c4 <_Z20__fetch_global_Wire1v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
   d77e4:	f7ff fda8 	bl	d7338 <_ZN7TwoWire5beginEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d77e8:	f000 fe6c 	bl	d84c4 <_Z20__fetch_global_Wire1v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
   d77ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
   d77f0:	f7ff bdc7 	b.w	d7382 <_ZN7TwoWire9isEnabledEv>

000d77f4 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d77f4:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d77f6:	f000 fe65 	bl	d84c4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
   d77fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
   d77fe:	f7ff bdc4 	b.w	d738a <_ZN7TwoWire4lockEv>

000d7802 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
   d7802:	b510      	push	{r4, lr}
   d7804:	4604      	mov	r4, r0
    lock_(_lock)
   d7806:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
   d7808:	b109      	cbz	r1, d780e <_ZN4PMICC1Eb+0xc>
        lock();
   d780a:	f7ff fff3 	bl	d77f4 <_ZN4PMIC4lockEv>
    }
}
   d780e:	4620      	mov	r0, r4
   d7810:	bd10      	pop	{r4, pc}

000d7812 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
   d7812:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7814:	f000 fe56 	bl	d84c4 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
   d7818:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
   d781c:	f7ff bdbe 	b.w	d739c <_ZN7TwoWire6unlockEv>

000d7820 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d7820:	b510      	push	{r4, lr}
{
    if (lock_) {
   d7822:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d7824:	4604      	mov	r4, r0
{
    if (lock_) {
   d7826:	b10b      	cbz	r3, d782c <_ZN4PMICD1Ev+0xc>
        unlock();
   d7828:	f7ff fff3 	bl	d7812 <_ZN4PMIC6unlockEv>
    }
}
   d782c:	4620      	mov	r0, r4
   d782e:	bd10      	pop	{r4, pc}

000d7830 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7830:	b510      	push	{r4, lr}
   d7832:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d7834:	6800      	ldr	r0, [r0, #0]
   d7836:	f7ff ffec 	bl	d7812 <_ZN4PMIC6unlockEv>
   d783a:	4620      	mov	r0, r4
   d783c:	bd10      	pop	{r4, pc}

000d783e <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
   d783e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7840:	ac02      	add	r4, sp, #8
   d7842:	460d      	mov	r5, r1
   d7844:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d7848:	f7ff ffd4 	bl	d77f4 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d784c:	f000 fe3a 	bl	d84c4 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d7850:	216b      	movs	r1, #107	; 0x6b
   d7852:	f7ff fd8c 	bl	d736e <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7856:	f000 fe35 	bl	d84c4 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
   d785a:	6803      	ldr	r3, [r0, #0]
   d785c:	4629      	mov	r1, r5
   d785e:	689b      	ldr	r3, [r3, #8]
   d7860:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7862:	f000 fe2f 	bl	d84c4 <_Z20__fetch_global_Wire1v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
   d7866:	2101      	movs	r1, #1
   d7868:	f7ff fd84 	bl	d7374 <_ZN7TwoWire15endTransmissionEh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d786c:	f000 fe2a 	bl	d84c4 <_Z20__fetch_global_Wire1v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
   d7870:	2301      	movs	r3, #1
   d7872:	461a      	mov	r2, r3
   d7874:	216b      	movs	r1, #107	; 0x6b
   d7876:	f7ff fd71 	bl	d735c <_ZN7TwoWire11requestFromEiii>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d787a:	f000 fe23 	bl	d84c4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
   d787e:	6803      	ldr	r3, [r0, #0]
   d7880:	695b      	ldr	r3, [r3, #20]
   d7882:	4798      	blx	r3
   d7884:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
   d7886:	4620      	mov	r0, r4
   d7888:	f7ff ffd2 	bl	d7830 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
   d788c:	b2e8      	uxtb	r0, r5
   d788e:	b003      	add	sp, #12
   d7890:	bd30      	pop	{r4, r5, pc}

000d7892 <_ZN4PMIC11isPowerGoodEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::isPowerGood(void) {
   d7892:	b508      	push	{r3, lr}

    byte DATA = 0;
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
   d7894:	2108      	movs	r1, #8
   d7896:	f7ff ffd2 	bl	d783e <_ZN4PMIC12readRegisterEh>
    if(DATA & 0b00000100) return 1;
    else return 0;
}
   d789a:	f3c0 0080 	ubfx	r0, r0, #2, #1
   d789e:	bd08      	pop	{r3, pc}

000d78a0 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
   d78a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d78a2:	ac02      	add	r4, sp, #8
   d78a4:	4615      	mov	r5, r2
   d78a6:	460e      	mov	r6, r1
   d78a8:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d78ac:	f7ff ffa2 	bl	d77f4 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d78b0:	f000 fe08 	bl	d84c4 <_Z20__fetch_global_Wire1v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d78b4:	216b      	movs	r1, #107	; 0x6b
   d78b6:	f7ff fd5a 	bl	d736e <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d78ba:	f000 fe03 	bl	d84c4 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
   d78be:	6803      	ldr	r3, [r0, #0]
   d78c0:	4631      	mov	r1, r6
   d78c2:	689b      	ldr	r3, [r3, #8]
   d78c4:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d78c6:	f000 fdfd 	bl	d84c4 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
   d78ca:	6803      	ldr	r3, [r0, #0]
   d78cc:	4629      	mov	r1, r5
   d78ce:	689b      	ldr	r3, [r3, #8]
   d78d0:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d78d2:	f000 fdf7 	bl	d84c4 <_Z20__fetch_global_Wire1v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
   d78d6:	2101      	movs	r1, #1
   d78d8:	f7ff fd4c 	bl	d7374 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
   d78dc:	4620      	mov	r0, r4
   d78de:	f7ff ffa7 	bl	d7830 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
   d78e2:	b002      	add	sp, #8
   d78e4:	bd70      	pop	{r4, r5, r6, pc}

000d78e6 <_ZN4PMIC20setInputVoltageLimitEt>:
                    5000
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
   d78e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d78e8:	4604      	mov	r4, r0
   d78ea:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d78ec:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d78ee:	f7ff ff81 	bl	d77f4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
   d78f2:	2100      	movs	r1, #0
   d78f4:	4620      	mov	r0, r4
   d78f6:	f7ff ffa2 	bl	d783e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d78fa:	f241 1358 	movw	r3, #4440	; 0x1158
   d78fe:	429d      	cmp	r5, r3
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;
   d7900:	f000 0287 	and.w	r2, r0, #135	; 0x87

    switch(voltage) {
   d7904:	d05b      	beq.n	d79be <_ZN4PMIC20setInputVoltageLimitEt+0xd8>
   d7906:	d820      	bhi.n	d794a <_ZN4PMIC20setInputVoltageLimitEt+0x64>
   d7908:	f241 0318 	movw	r3, #4120	; 0x1018
   d790c:	429d      	cmp	r5, r3
   d790e:	d04d      	beq.n	d79ac <_ZN4PMIC20setInputVoltageLimitEt+0xc6>
   d7910:	d80c      	bhi.n	d792c <_ZN4PMIC20setInputVoltageLimitEt+0x46>
   d7912:	f640 7378 	movw	r3, #3960	; 0xf78
   d7916:	429d      	cmp	r5, r3
   d7918:	d042      	beq.n	d79a0 <_ZN4PMIC20setInputVoltageLimitEt+0xba>
   d791a:	f640 73c8 	movw	r3, #4040	; 0xfc8
   d791e:	429d      	cmp	r5, r3
   d7920:	d041      	beq.n	d79a6 <_ZN4PMIC20setInputVoltageLimitEt+0xc0>
   d7922:	f640 7328 	movw	r3, #3880	; 0xf28
   d7926:	429d      	cmp	r5, r3
   d7928:	d160      	bne.n	d79ec <_ZN4PMIC20setInputVoltageLimitEt+0x106>
   d792a:	e059      	b.n	d79e0 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
   d792c:	f241 03b8 	movw	r3, #4280	; 0x10b8
   d7930:	429d      	cmp	r5, r3
   d7932:	d03e      	beq.n	d79b2 <_ZN4PMIC20setInputVoltageLimitEt+0xcc>
   d7934:	f241 1308 	movw	r3, #4360	; 0x1108
   d7938:	429d      	cmp	r5, r3
   d793a:	d03d      	beq.n	d79b8 <_ZN4PMIC20setInputVoltageLimitEt+0xd2>
   d793c:	f241 0368 	movw	r3, #4200	; 0x1068
   d7940:	429d      	cmp	r5, r3
   d7942:	d153      	bne.n	d79ec <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
        break;

        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
   d7944:	f042 0220 	orr.w	r2, r2, #32
   d7948:	e04a      	b.n	d79e0 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d794a:	f241 2398 	movw	r3, #4760	; 0x1298
   d794e:	429d      	cmp	r5, r3
   d7950:	d03e      	beq.n	d79d0 <_ZN4PMIC20setInputVoltageLimitEt+0xea>
   d7952:	d80e      	bhi.n	d7972 <_ZN4PMIC20setInputVoltageLimitEt+0x8c>
   d7954:	f241 13f8 	movw	r3, #4600	; 0x11f8
   d7958:	429d      	cmp	r5, r3
   d795a:	d033      	beq.n	d79c4 <_ZN4PMIC20setInputVoltageLimitEt+0xde>
   d795c:	f241 2348 	movw	r3, #4680	; 0x1248
   d7960:	429d      	cmp	r5, r3
   d7962:	d032      	beq.n	d79ca <_ZN4PMIC20setInputVoltageLimitEt+0xe4>
   d7964:	f241 13a8 	movw	r3, #4520	; 0x11a8
   d7968:	429d      	cmp	r5, r3
   d796a:	d13f      	bne.n	d79ec <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
        break;

        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
   d796c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   d7970:	e036      	b.n	d79e0 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d7972:	f241 3338 	movw	r3, #4920	; 0x1338
   d7976:	429d      	cmp	r5, r3
   d7978:	d02d      	beq.n	d79d6 <_ZN4PMIC20setInputVoltageLimitEt+0xf0>
   d797a:	d806      	bhi.n	d798a <_ZN4PMIC20setInputVoltageLimitEt+0xa4>
   d797c:	f241 23e8 	movw	r3, #4840	; 0x12e8
   d7980:	429d      	cmp	r5, r3
   d7982:	d133      	bne.n	d79ec <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
        break;

        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
   d7984:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   d7988:	e02a      	b.n	d79e0 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d798a:	f241 3388 	movw	r3, #5000	; 0x1388
   d798e:	429d      	cmp	r5, r3
   d7990:	d024      	beq.n	d79dc <_ZN4PMIC20setInputVoltageLimitEt+0xf6>
   d7992:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d7996:	429d      	cmp	r5, r3
   d7998:	d128      	bne.n	d79ec <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;

        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
   d799a:	f042 0278 	orr.w	r2, r2, #120	; 0x78
   d799e:	e01f      	b.n	d79e0 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 3880:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 3960:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00001000));
   d79a0:	f042 0208 	orr.w	r2, r2, #8
   d79a4:	e01c      	b.n	d79e0 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4040:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00010000));
   d79a6:	f042 0210 	orr.w	r2, r2, #16
   d79aa:	e019      	b.n	d79e0 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
   d79ac:	f042 0218 	orr.w	r2, r2, #24
   d79b0:	e016      	b.n	d79e0 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
        break;

        case 4280:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00101000));
   d79b2:	f042 0228 	orr.w	r2, r2, #40	; 0x28
   d79b6:	e013      	b.n	d79e0 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4360:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00110000));
   d79b8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   d79bc:	e010      	b.n	d79e0 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
   d79be:	f042 0238 	orr.w	r2, r2, #56	; 0x38
   d79c2:	e00d      	b.n	d79e0 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
        break;

        case 4600:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01001000));
   d79c4:	f042 0248 	orr.w	r2, r2, #72	; 0x48
   d79c8:	e00a      	b.n	d79e0 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4680:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01010000));
   d79ca:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   d79ce:	e007      	b.n	d79e0 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
   d79d0:	f042 0258 	orr.w	r2, r2, #88	; 0x58
   d79d4:	e004      	b.n	d79e0 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
        break;

        case 4920:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
   d79d6:	f042 0268 	orr.w	r2, r2, #104	; 0x68
   d79da:	e001      	b.n	d79e0 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
   d79dc:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   d79e0:	4620      	mov	r0, r4
   d79e2:	2100      	movs	r1, #0
   d79e4:	f7ff ff5c 	bl	d78a0 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
   d79e8:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;
   d79ea:	e000      	b.n	d79ee <_ZN4PMIC20setInputVoltageLimitEt+0x108>
        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
        break;

        default:
        return 0; // return error since the value passed didn't match
   d79ec:	2400      	movs	r4, #0
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
   d79ee:	a801      	add	r0, sp, #4
   d79f0:	f7ff ff1e 	bl	d7830 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
   d79f4:	4620      	mov	r0, r4
   d79f6:	b003      	add	sp, #12
   d79f8:	bd30      	pop	{r4, r5, pc}

000d79fa <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
   d79fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d79fc:	4604      	mov	r4, r0
   d79fe:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7a00:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7a02:	f7ff fef7 	bl	d77f4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
   d7a06:	2100      	movs	r1, #0
   d7a08:	4620      	mov	r0, r4
   d7a0a:	f7ff ff18 	bl	d783e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
   d7a0e:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
   d7a12:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
   d7a16:	d023      	beq.n	d7a60 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
   d7a18:	d807      	bhi.n	d7a2a <_ZN4PMIC20setInputCurrentLimitEt+0x30>
   d7a1a:	2d96      	cmp	r5, #150	; 0x96
   d7a1c:	d01a      	beq.n	d7a54 <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
   d7a1e:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   d7a22:	d01a      	beq.n	d7a5a <_ZN4PMIC20setInputCurrentLimitEt+0x60>
   d7a24:	2d64      	cmp	r5, #100	; 0x64
   d7a26:	d129      	bne.n	d7a7c <_ZN4PMIC20setInputCurrentLimitEt+0x82>
   d7a28:	e022      	b.n	d7a70 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
   d7a2a:	f240 53dc 	movw	r3, #1500	; 0x5dc
   d7a2e:	429d      	cmp	r5, r3
   d7a30:	d019      	beq.n	d7a66 <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
   d7a32:	d805      	bhi.n	d7a40 <_ZN4PMIC20setInputCurrentLimitEt+0x46>
   d7a34:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
   d7a38:	d120      	bne.n	d7a7c <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
   d7a3a:	f042 0204 	orr.w	r2, r2, #4
   d7a3e:	e017      	b.n	d7a70 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
   d7a40:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
   d7a44:	d012      	beq.n	d7a6c <_ZN4PMIC20setInputCurrentLimitEt+0x72>
   d7a46:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d7a4a:	429d      	cmp	r5, r3
   d7a4c:	d116      	bne.n	d7a7c <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
   d7a4e:	f042 0207 	orr.w	r2, r2, #7
   d7a52:	e00d      	b.n	d7a70 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
   d7a54:	f042 0201 	orr.w	r2, r2, #1
   d7a58:	e00a      	b.n	d7a70 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
   d7a5a:	f042 0202 	orr.w	r2, r2, #2
   d7a5e:	e007      	b.n	d7a70 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
   d7a60:	f042 0203 	orr.w	r2, r2, #3
   d7a64:	e004      	b.n	d7a70 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
   d7a66:	f042 0205 	orr.w	r2, r2, #5
   d7a6a:	e001      	b.n	d7a70 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
   d7a6c:	f042 0206 	orr.w	r2, r2, #6
   d7a70:	4620      	mov	r0, r4
   d7a72:	2100      	movs	r1, #0
   d7a74:	f7ff ff14 	bl	d78a0 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
   d7a78:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
   d7a7a:	e000      	b.n	d7a7e <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
   d7a7c:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
   d7a7e:	a801      	add	r0, sp, #4
   d7a80:	f7ff fed6 	bl	d7830 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
   d7a84:	4620      	mov	r0, r4
   d7a86:	b003      	add	sp, #12
   d7a88:	bd30      	pop	{r4, r5, pc}

000d7a8a <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
   d7a8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7a8c:	460c      	mov	r4, r1
   d7a8e:	4605      	mov	r5, r0
   d7a90:	4617      	mov	r7, r2
   d7a92:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7a94:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7a96:	f7ff fead 	bl	d77f4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
   d7a9a:	2c00      	cmp	r4, #0
   d7a9c:	bf0c      	ite	eq
   d7a9e:	2400      	moveq	r4, #0
   d7aa0:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
   d7aa2:	b117      	cbz	r7, d7aaa <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
   d7aa4:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   d7aa8:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
   d7aaa:	b10e      	cbz	r6, d7ab0 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
   d7aac:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
   d7ab0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   d7ab4:	b10b      	cbz	r3, d7aba <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
   d7ab6:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
   d7aba:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d7abe:	b10b      	cbz	r3, d7ac4 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
   d7ac0:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
   d7ac4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d7ac8:	b10b      	cbz	r3, d7ace <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
   d7aca:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
   d7ace:	2102      	movs	r1, #2
   d7ad0:	4628      	mov	r0, r5
   d7ad2:	f7ff feb4 	bl	d783e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
   d7ad6:	f000 0201 	and.w	r2, r0, #1
   d7ada:	4322      	orrs	r2, r4
   d7adc:	2102      	movs	r1, #2
   d7ade:	4628      	mov	r0, r5
   d7ae0:	f7ff fede 	bl	d78a0 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
   d7ae4:	a801      	add	r0, sp, #4
   d7ae6:	f7ff fea3 	bl	d7830 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
   d7aea:	2001      	movs	r0, #1
   d7aec:	b003      	add	sp, #12
   d7aee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7af0 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
   d7af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7af2:	4604      	mov	r4, r0
   d7af4:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7af6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7af8:	f7ff fe7c 	bl	d77f4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
   d7afc:	2104      	movs	r1, #4
   d7afe:	4620      	mov	r0, r4
   d7b00:	f7ff fe9d 	bl	d783e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
   d7b04:	f241 0310 	movw	r3, #4112	; 0x1010
   d7b08:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
   d7b0a:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
   d7b0e:	d006      	beq.n	d7b1e <_ZN4PMIC16setChargeVoltageEt+0x2e>
   d7b10:	f241 0370 	movw	r3, #4208	; 0x1070
   d7b14:	429d      	cmp	r5, r3
   d7b16:	d10a      	bne.n	d7b2e <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
   d7b18:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
   d7b1c:	e001      	b.n	d7b22 <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
   d7b1e:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
   d7b22:	4620      	mov	r0, r4
   d7b24:	2104      	movs	r1, #4
   d7b26:	f7ff febb 	bl	d78a0 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
   d7b2a:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
   d7b2c:	e000      	b.n	d7b30 <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
   d7b2e:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
   d7b30:	a801      	add	r0, sp, #4
   d7b32:	f7ff fe7d 	bl	d7830 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
   d7b36:	4620      	mov	r0, r4
   d7b38:	b003      	add	sp, #12
   d7b3a:	bd30      	pop	{r4, r5, pc}

000d7b3c <_ZN4PMIC15disableWatchdogEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
   d7b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7b3e:	ac02      	add	r4, sp, #8
   d7b40:	4605      	mov	r5, r0
   d7b42:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d7b46:	f7ff fe55 	bl	d77f4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
   d7b4a:	2105      	movs	r1, #5
   d7b4c:	4628      	mov	r0, r5
   d7b4e:	f7ff fe76 	bl	d783e <_ZN4PMIC12readRegisterEh>
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
   d7b52:	2105      	movs	r1, #5
   d7b54:	f000 02ce 	and.w	r2, r0, #206	; 0xce
   d7b58:	4628      	mov	r0, r5
   d7b5a:	f7ff fea1 	bl	d78a0 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
    std::lock_guard<PMIC> l(*this);
   d7b5e:	4620      	mov	r0, r4
   d7b60:	f7ff fe66 	bl	d7830 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
    return 1;
}
   d7b64:	2001      	movs	r0, #1
   d7b66:	b003      	add	sp, #12
   d7b68:	bd30      	pop	{r4, r5, pc}

000d7b6a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7b6c:	4606      	mov	r6, r0
   d7b6e:	460d      	mov	r5, r1
   d7b70:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7b72:	2400      	movs	r4, #0
  while (size--) {
   d7b74:	42bd      	cmp	r5, r7
   d7b76:	d00c      	beq.n	d7b92 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7b78:	6833      	ldr	r3, [r6, #0]
   d7b7a:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7b7e:	689b      	ldr	r3, [r3, #8]
   d7b80:	4630      	mov	r0, r6
   d7b82:	4798      	blx	r3
     if (chunk>=0)
   d7b84:	2800      	cmp	r0, #0
   d7b86:	db01      	blt.n	d7b8c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7b88:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7b8a:	e7f3      	b.n	d7b74 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7b8c:	2c00      	cmp	r4, #0
   d7b8e:	bf08      	it	eq
   d7b90:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7b92:	4620      	mov	r0, r4
   d7b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7b96 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7b96:	b570      	push	{r4, r5, r6, lr}
   d7b98:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7b9a:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7b9c:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7b9e:	b149      	cbz	r1, d7bb4 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7ba0:	f001 fcf1 	bl	d9586 <strlen>
   d7ba4:	682b      	ldr	r3, [r5, #0]
   d7ba6:	4602      	mov	r2, r0
   d7ba8:	4621      	mov	r1, r4
   d7baa:	4628      	mov	r0, r5
   d7bac:	68db      	ldr	r3, [r3, #12]
    }
   d7bae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7bb2:	4718      	bx	r3
    }
   d7bb4:	bd70      	pop	{r4, r5, r6, pc}

000d7bb6 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7bb6:	6803      	ldr	r3, [r0, #0]
   d7bb8:	689b      	ldr	r3, [r3, #8]
   d7bba:	4718      	bx	r3

000d7bbc <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7bbc:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7bbe:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7bc0:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7bc2:	f7ff fff8 	bl	d7bb6 <_ZN5Print5printEc>
  n += print('\n');
   d7bc6:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d7bc8:	4604      	mov	r4, r0
  n += print('\n');
   d7bca:	4628      	mov	r0, r5
   d7bcc:	f7ff fff3 	bl	d7bb6 <_ZN5Print5printEc>
  return n;
}
   d7bd0:	4420      	add	r0, r4
   d7bd2:	bd38      	pop	{r3, r4, r5, pc}

000d7bd4 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7bd4:	b538      	push	{r3, r4, r5, lr}
   d7bd6:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7bd8:	f7ff ffdd 	bl	d7b96 <_ZN5Print5writeEPKc>
   d7bdc:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d7bde:	4628      	mov	r0, r5
   d7be0:	f7ff ffec 	bl	d7bbc <_ZN5Print7printlnEv>
  return n;
}
   d7be4:	4420      	add	r0, r4
   d7be6:	bd38      	pop	{r3, r4, r5, pc}

000d7be8 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7be8:	b530      	push	{r4, r5, lr}
   d7bea:	b08b      	sub	sp, #44	; 0x2c
   d7bec:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7bee:	2100      	movs	r1, #0
   d7bf0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7bf4:	2a01      	cmp	r2, #1
   d7bf6:	bf98      	it	ls
   d7bf8:	220a      	movls	r2, #10
   d7bfa:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d7bfe:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d7c02:	fb05 3312 	mls	r3, r5, r2, r3
   d7c06:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7c0a:	2b09      	cmp	r3, #9
   d7c0c:	bf94      	ite	ls
   d7c0e:	3330      	addls	r3, #48	; 0x30
   d7c10:	3337      	addhi	r3, #55	; 0x37
   d7c12:	b2db      	uxtb	r3, r3
   d7c14:	4621      	mov	r1, r4
   d7c16:	f804 3901 	strb.w	r3, [r4], #-1
   d7c1a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d7c1c:	2d00      	cmp	r5, #0
   d7c1e:	d1ee      	bne.n	d7bfe <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7c20:	f7ff ffb9 	bl	d7b96 <_ZN5Print5writeEPKc>
}
   d7c24:	b00b      	add	sp, #44	; 0x2c
   d7c26:	bd30      	pop	{r4, r5, pc}

000d7c28 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d7c28:	b410      	push	{r4}
  if (base == 0) return write(n);
   d7c2a:	b92a      	cbnz	r2, d7c38 <_ZN5Print5printEmi+0x10>
   d7c2c:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d7c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d7c32:	689b      	ldr	r3, [r3, #8]
   d7c34:	b2c9      	uxtb	r1, r1
   d7c36:	4718      	bx	r3
  else return printNumber(n, base);
   d7c38:	b2d2      	uxtb	r2, r2
}
   d7c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d7c3e:	f7ff bfd3 	b.w	d7be8 <_ZN5Print11printNumberEmh>

000d7c42 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d7c42:	f7ff bff1 	b.w	d7c28 <_ZN5Print5printEmi>

000d7c46 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d7c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7c4a:	4607      	mov	r7, r0
   d7c4c:	460e      	mov	r6, r1
  if (base == 0) {
   d7c4e:	4615      	mov	r5, r2
   d7c50:	b92a      	cbnz	r2, d7c5e <_ZN5Print5printEli+0x18>
    return write(n);
   d7c52:	6803      	ldr	r3, [r0, #0]
   d7c54:	b2c9      	uxtb	r1, r1
   d7c56:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d7c58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d7c5c:	4718      	bx	r3
  } else if (base == 10) {
   d7c5e:	2a0a      	cmp	r2, #10
   d7c60:	d102      	bne.n	d7c68 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d7c62:	2900      	cmp	r1, #0
   d7c64:	da01      	bge.n	d7c6a <_ZN5Print5printEli+0x24>
   d7c66:	e004      	b.n	d7c72 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d7c68:	b2d2      	uxtb	r2, r2
  }
}
   d7c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d7c6e:	f7ff bfbb 	b.w	d7be8 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d7c72:	212d      	movs	r1, #45	; 0x2d
   d7c74:	f7ff ff9f 	bl	d7bb6 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d7c78:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d7c7a:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d7c7c:	4271      	negs	r1, r6
   d7c7e:	4638      	mov	r0, r7
   d7c80:	f7ff ffb2 	bl	d7be8 <_ZN5Print11printNumberEmh>
   d7c84:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d7c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7c8a <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d7c8a:	f7ff bfdc 	b.w	d7c46 <_ZN5Print5printEli>

000d7c8e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7c8e:	b510      	push	{r4, lr}
   d7c90:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7c92:	f7fe f923 	bl	d5edc <_ZNSt14_Function_baseD1Ev>
   d7c96:	4620      	mov	r0, r4
   d7c98:	bd10      	pop	{r4, pc}
	...

000d7c9c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7c9c:	4803      	ldr	r0, [pc, #12]	; (d7cac <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7c9e:	4a04      	ldr	r2, [pc, #16]	; (d7cb0 <_GLOBAL__sub_I_RGB+0x14>)
   d7ca0:	4904      	ldr	r1, [pc, #16]	; (d7cb4 <_GLOBAL__sub_I_RGB+0x18>)
   d7ca2:	2300      	movs	r3, #0
   d7ca4:	6083      	str	r3, [r0, #8]
   d7ca6:	f000 bc4f 	b.w	d8548 <__aeabi_atexit>
   d7caa:	bf00      	nop
   d7cac:	2003e54c 	.word	0x2003e54c
   d7cb0:	2003e194 	.word	0x2003e194
   d7cb4:	000d7c8f 	.word	0x000d7c8f

000d7cb8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d7cb8:	4770      	bx	lr

000d7cba <_ZN8SPIClassD0Ev>:
   d7cba:	b510      	push	{r4, lr}
   d7cbc:	2110      	movs	r1, #16
   d7cbe:	4604      	mov	r4, r0
   d7cc0:	f000 fc47 	bl	d8552 <_ZdlPvj>
   d7cc4:	4620      	mov	r0, r4
   d7cc6:	bd10      	pop	{r4, pc}

000d7cc8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7cc8:	b570      	push	{r4, r5, r6, lr}
   d7cca:	4b08      	ldr	r3, [pc, #32]	; (d7cec <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d7ccc:	6003      	str	r3, [r0, #0]
   d7cce:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d7cd0:	2500      	movs	r5, #0
   d7cd2:	460e      	mov	r6, r1
   d7cd4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d7cd8:	f7fe fb0c 	bl	d62f4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d7cdc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d7cde:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d7ce0:	f7fe fc28 	bl	d6534 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d7ce4:	60a5      	str	r5, [r4, #8]
}
   d7ce6:	4620      	mov	r0, r4
   d7ce8:	bd70      	pop	{r4, r5, r6, pc}
   d7cea:	bf00      	nop
   d7cec:	000dc090 	.word	0x000dc090

000d7cf0 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d7cf0:	7900      	ldrb	r0, [r0, #4]
   d7cf2:	f7fe bc27 	b.w	d6544 <HAL_SPI_Is_Enabled>

000d7cf6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7cf6:	b510      	push	{r4, lr}
   d7cf8:	4604      	mov	r4, r0
{
	free(buffer);
   d7cfa:	6800      	ldr	r0, [r0, #0]
   d7cfc:	f7fe fdc0 	bl	d6880 <free>
}
   d7d00:	4620      	mov	r0, r4
   d7d02:	bd10      	pop	{r4, pc}

000d7d04 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7d04:	b510      	push	{r4, lr}
   d7d06:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7d08:	6800      	ldr	r0, [r0, #0]
   d7d0a:	b108      	cbz	r0, d7d10 <_ZN6String10invalidateEv+0xc>
   d7d0c:	f7fe fdb8 	bl	d6880 <free>
	buffer = NULL;
   d7d10:	2300      	movs	r3, #0
   d7d12:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7d14:	60a3      	str	r3, [r4, #8]
   d7d16:	6063      	str	r3, [r4, #4]
   d7d18:	bd10      	pop	{r4, pc}

000d7d1a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7d1a:	b538      	push	{r3, r4, r5, lr}
   d7d1c:	4604      	mov	r4, r0
   d7d1e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7d20:	6800      	ldr	r0, [r0, #0]
   d7d22:	3101      	adds	r1, #1
   d7d24:	f7fe fdb4 	bl	d6890 <realloc>
	if (newbuffer) {
   d7d28:	b110      	cbz	r0, d7d30 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7d2a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7d2e:	2001      	movs	r0, #1
	}
	return 0;
}
   d7d30:	bd38      	pop	{r3, r4, r5, pc}

000d7d32 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7d32:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7d34:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7d36:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7d38:	b113      	cbz	r3, d7d40 <_ZN6String7reserveEj+0xe>
   d7d3a:	6843      	ldr	r3, [r0, #4]
   d7d3c:	428b      	cmp	r3, r1
   d7d3e:	d207      	bcs.n	d7d50 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7d40:	4620      	mov	r0, r4
   d7d42:	f7ff ffea 	bl	d7d1a <_ZN6String12changeBufferEj>
   d7d46:	b120      	cbz	r0, d7d52 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7d48:	68a3      	ldr	r3, [r4, #8]
   d7d4a:	b90b      	cbnz	r3, d7d50 <_ZN6String7reserveEj+0x1e>
   d7d4c:	6822      	ldr	r2, [r4, #0]
   d7d4e:	7013      	strb	r3, [r2, #0]
   d7d50:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7d52:	bd10      	pop	{r4, pc}

000d7d54 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7d54:	b570      	push	{r4, r5, r6, lr}
   d7d56:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7d58:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7d5a:	4604      	mov	r4, r0
   d7d5c:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d7d5e:	f7ff ffe8 	bl	d7d32 <_ZN6String7reserveEj>
   d7d62:	b918      	cbnz	r0, d7d6c <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7d64:	4620      	mov	r0, r4
   d7d66:	f7ff ffcd 	bl	d7d04 <_ZN6String10invalidateEv>
		return *this;
   d7d6a:	e009      	b.n	d7d80 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d7d6c:	462a      	mov	r2, r5
   d7d6e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7d70:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7d72:	6820      	ldr	r0, [r4, #0]
   d7d74:	f001 fb84 	bl	d9480 <memcpy>
	buffer[len] = 0;
   d7d78:	6822      	ldr	r2, [r4, #0]
   d7d7a:	68a3      	ldr	r3, [r4, #8]
   d7d7c:	2100      	movs	r1, #0
   d7d7e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7d80:	4620      	mov	r0, r4
   d7d82:	bd70      	pop	{r4, r5, r6, pc}

000d7d84 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7d84:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7d86:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7d88:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7d8a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7d8c:	6043      	str	r3, [r0, #4]
	len = 0;
   d7d8e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7d90:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7d92:	460d      	mov	r5, r1
   d7d94:	b139      	cbz	r1, d7da6 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7d96:	4608      	mov	r0, r1
   d7d98:	f001 fbf5 	bl	d9586 <strlen>
   d7d9c:	4629      	mov	r1, r5
   d7d9e:	4602      	mov	r2, r0
   d7da0:	4620      	mov	r0, r4
   d7da2:	f7ff ffd7 	bl	d7d54 <_ZN6String4copyEPKcj>
}
   d7da6:	4620      	mov	r0, r4
   d7da8:	bd38      	pop	{r3, r4, r5, pc}

000d7daa <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7daa:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d7dac:	b510      	push	{r4, lr}
   d7dae:	460b      	mov	r3, r1
   d7db0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7db2:	d007      	beq.n	d7dc4 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7db4:	6809      	ldr	r1, [r1, #0]
   d7db6:	b119      	cbz	r1, d7dc0 <_ZN6StringaSERKS_+0x16>
   d7db8:	689a      	ldr	r2, [r3, #8]
   d7dba:	f7ff ffcb 	bl	d7d54 <_ZN6String4copyEPKcj>
   d7dbe:	e001      	b.n	d7dc4 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d7dc0:	f7ff ffa0 	bl	d7d04 <_ZN6String10invalidateEv>

	return *this;
}
   d7dc4:	4620      	mov	r0, r4
   d7dc6:	bd10      	pop	{r4, pc}

000d7dc8 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7dc8:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7dca:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7dcc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7dce:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7dd0:	6043      	str	r3, [r0, #4]
	len = 0;
   d7dd2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7dd4:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d7dd6:	f7ff ffe8 	bl	d7daa <_ZN6StringaSERKS_>
}
   d7dda:	4620      	mov	r0, r4
   d7ddc:	bd10      	pop	{r4, pc}

000d7dde <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7dde:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7de0:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7de2:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7de4:	b912      	cbnz	r2, d7dec <_ZNK6String6equalsEPKc+0xe>
   d7de6:	b919      	cbnz	r1, d7df0 <_ZNK6String6equalsEPKc+0x12>
   d7de8:	2001      	movs	r0, #1
   d7dea:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d7dec:	b911      	cbnz	r1, d7df4 <_ZNK6String6equalsEPKc+0x16>
   d7dee:	6803      	ldr	r3, [r0, #0]
   d7df0:	7818      	ldrb	r0, [r3, #0]
   d7df2:	e002      	b.n	d7dfa <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d7df4:	6800      	ldr	r0, [r0, #0]
   d7df6:	f001 fb99 	bl	d952c <strcmp>
   d7dfa:	fab0 f080 	clz	r0, r0
   d7dfe:	0940      	lsrs	r0, r0, #5
}
   d7e00:	bd08      	pop	{r3, pc}

000d7e02 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d7e02:	b570      	push	{r4, r5, r6, lr}
   d7e04:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d7e06:	b19a      	cbz	r2, d7e30 <_ZNK6String8getBytesEPhjj+0x2e>
   d7e08:	b191      	cbz	r1, d7e30 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d7e0a:	6885      	ldr	r5, [r0, #8]
   d7e0c:	429d      	cmp	r5, r3
   d7e0e:	d802      	bhi.n	d7e16 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d7e10:	2300      	movs	r3, #0
   d7e12:	700b      	strb	r3, [r1, #0]
		return;
   d7e14:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d7e16:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d7e18:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d7e1a:	6801      	ldr	r1, [r0, #0]
   d7e1c:	42ac      	cmp	r4, r5
   d7e1e:	bf28      	it	cs
   d7e20:	462c      	movcs	r4, r5
   d7e22:	4419      	add	r1, r3
   d7e24:	4622      	mov	r2, r4
   d7e26:	4630      	mov	r0, r6
   d7e28:	f001 fbca 	bl	d95c0 <strncpy>
	buf[n] = 0;
   d7e2c:	2300      	movs	r3, #0
   d7e2e:	5533      	strb	r3, [r6, r4]
   d7e30:	bd70      	pop	{r4, r5, r6, pc}

000d7e32 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d7e32:	4601      	mov	r1, r0
   d7e34:	2200      	movs	r2, #0
   d7e36:	208c      	movs	r0, #140	; 0x8c
   d7e38:	f7fe ba74 	b.w	d6324 <HAL_Core_System_Reset_Ex>

000d7e3c <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d7e3c:	2000      	movs	r0, #0
   d7e3e:	f7ff bff8 	b.w	d7e32 <_ZN11SystemClass5resetEm>
	...

000d7e44 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d7e44:	b510      	push	{r4, lr}
   d7e46:	4604      	mov	r4, r0
   d7e48:	4608      	mov	r0, r1
   d7e4a:	4611      	mov	r1, r2
   d7e4c:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d7e4e:	2300      	movs	r3, #0
   d7e50:	f7fe fc18 	bl	d6684 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   d7e54:	4b06      	ldr	r3, [pc, #24]	; (d7e70 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   d7e56:	2200      	movs	r2, #0
   d7e58:	701a      	strb	r2, [r3, #0]
   d7e5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7e5e:	8058      	strh	r0, [r3, #2]
   d7e60:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d7e62:	681a      	ldr	r2, [r3, #0]
   d7e64:	889b      	ldrh	r3, [r3, #4]
   d7e66:	6022      	str	r2, [r4, #0]
   d7e68:	80a3      	strh	r3, [r4, #4]
}
   d7e6a:	4620      	mov	r0, r4
   d7e6c:	bd10      	pop	{r4, pc}
   d7e6e:	bf00      	nop
   d7e70:	2003e55c 	.word	0x2003e55c

000d7e74 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d7e74:	b510      	push	{r4, lr}
   d7e76:	2400      	movs	r4, #0
   d7e78:	7004      	strb	r4, [r0, #0]
   d7e7a:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d7e7c:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d7e7e:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d7e82:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d7e84:	dd07      	ble.n	d7e96 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d7e86:	3901      	subs	r1, #1
   d7e88:	4299      	cmp	r1, r3
   d7e8a:	d209      	bcs.n	d7ea0 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d7e8c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d7e90:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d7e92:	2301      	movs	r3, #1
   d7e94:	e001      	b.n	d7e9a <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d7e96:	d102      	bne.n	d7e9e <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d7e98:	2302      	movs	r3, #2
   d7e9a:	7003      	strb	r3, [r0, #0]
   d7e9c:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d7e9e:	8041      	strh	r1, [r0, #2]
    }
}
   d7ea0:	bd10      	pop	{r4, pc}
	...

000d7ea4 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7ea4:	b570      	push	{r4, r5, r6, lr}
   d7ea6:	b086      	sub	sp, #24
   d7ea8:	4616      	mov	r6, r2
   d7eaa:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7eac:	2300      	movs	r3, #0
   d7eae:	9302      	str	r3, [sp, #8]
   d7eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7eb2:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7eb4:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d7eb8:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7eba:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7ebe:	4631      	mov	r1, r6
   d7ec0:	4628      	mov	r0, r5
   d7ec2:	f7fe fc1b 	bl	d66fc <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   d7ec6:	4633      	mov	r3, r6
   d7ec8:	462a      	mov	r2, r5
   d7eca:	4601      	mov	r1, r0
   d7ecc:	a804      	add	r0, sp, #16
   d7ece:	f7ff ffd1 	bl	d7e74 <_ZN11SleepResultC1EiPKtj>
   d7ed2:	4b06      	ldr	r3, [pc, #24]	; (d7eec <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d7ed4:	9804      	ldr	r0, [sp, #16]
   d7ed6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   d7eda:	6018      	str	r0, [r3, #0]
   d7edc:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d7ede:	681a      	ldr	r2, [r3, #0]
   d7ee0:	889b      	ldrh	r3, [r3, #4]
   d7ee2:	6022      	str	r2, [r4, #0]
}
   d7ee4:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   d7ee6:	80a3      	strh	r3, [r4, #4]
}
   d7ee8:	b006      	add	sp, #24
   d7eea:	bd70      	pop	{r4, r5, r6, pc}
   d7eec:	2003e55c 	.word	0x2003e55c

000d7ef0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d7ef0:	4b04      	ldr	r3, [pc, #16]	; (d7f04 <_GLOBAL__sub_I_System+0x14>)
   d7ef2:	2000      	movs	r0, #0
   d7ef4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7ef8:	7018      	strb	r0, [r3, #0]
   d7efa:	8058      	strh	r0, [r3, #2]
   d7efc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7efe:	f7fe bbb1 	b.w	d6664 <set_system_mode>
   d7f02:	bf00      	nop
   d7f04:	2003e55c 	.word	0x2003e55c

000d7f08 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7f08:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d7f0a:	4b14      	ldr	r3, [pc, #80]	; (d7f5c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7f0c:	4f14      	ldr	r7, [pc, #80]	; (d7f60 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d7f0e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d7f10:	4b14      	ldr	r3, [pc, #80]	; (d7f64 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d7f12:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d7f14:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d7f16:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d7f18:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d7f1a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7f1c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7f1e:	d01b      	beq.n	d7f58 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d7f20:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d7f22:	ad01      	add	r5, sp, #4
   d7f24:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d7f28:	f001 f9ae 	bl	d9288 <localtime>
	calendar_time->tm_year += 1900;
   d7f2c:	6943      	ldr	r3, [r0, #20]
   d7f2e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d7f32:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d7f34:	4604      	mov	r4, r0
   d7f36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7f38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7f3e:	f8d4 e000 	ldr.w	lr, [r4]
   d7f42:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7f46:	ad01      	add	r5, sp, #4
   d7f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7f4a:	4c07      	ldr	r4, [pc, #28]	; (d7f68 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d7f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7f4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7f50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d7f52:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7f54:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d7f58:	b00b      	add	sp, #44	; 0x2c
   d7f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7f5c:	2003e594 	.word	0x2003e594
   d7f60:	2003e590 	.word	0x2003e590
   d7f64:	2003e58c 	.word	0x2003e58c
   d7f68:	2003e564 	.word	0x2003e564

000d7f6c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d7f6c:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d7f6e:	2000      	movs	r0, #0
   d7f70:	f7fe fc1e 	bl	d67b0 <spark_sync_time_pending>
   d7f74:	b128      	cbz	r0, d7f82 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7f76:	f7fe fbf3 	bl	d6760 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d7f7a:	f080 0001 	eor.w	r0, r0, #1
   d7f7e:	b2c0      	uxtb	r0, r0
   d7f80:	bd08      	pop	{r3, pc}
   d7f82:	2001      	movs	r0, #1
    }
   d7f84:	bd08      	pop	{r3, pc}
	...

000d7f88 <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   d7f88:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d7f8a:	f7ff ffbd 	bl	d7f08 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
   d7f8e:	4b01      	ldr	r3, [pc, #4]	; (d7f94 <_ZN9TimeClass3dayEl+0xc>)
   d7f90:	68d8      	ldr	r0, [r3, #12]
   d7f92:	bd08      	pop	{r3, pc}
   d7f94:	2003e564 	.word	0x2003e564

000d7f98 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d7f98:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d7f9c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7fa4:	d40f      	bmi.n	d7fc6 <_ZN9TimeClass4zoneEf+0x2e>
   d7fa6:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d7faa:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7fb2:	dc08      	bgt.n	d7fc6 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d7fb4:	eddf 7a04 	vldr	s15, [pc, #16]	; d7fc8 <_ZN9TimeClass4zoneEf+0x30>
   d7fb8:	4b04      	ldr	r3, [pc, #16]	; (d7fcc <_ZN9TimeClass4zoneEf+0x34>)
   d7fba:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7fbe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d7fc2:	ed83 0a00 	vstr	s0, [r3]
   d7fc6:	4770      	bx	lr
   d7fc8:	45610000 	.word	0x45610000
   d7fcc:	2003e594 	.word	0x2003e594

000d7fd0 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7fd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d7fd2:	4b0e      	ldr	r3, [pc, #56]	; (d800c <_ZN9TimeClass7timeStrEl+0x3c>)
   d7fd4:	681b      	ldr	r3, [r3, #0]
   d7fd6:	4419      	add	r1, r3
   d7fd8:	4b0d      	ldr	r3, [pc, #52]	; (d8010 <_ZN9TimeClass7timeStrEl+0x40>)
   d7fda:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7fdc:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d7fde:	a802      	add	r0, sp, #8
   d7fe0:	4419      	add	r1, r3
   d7fe2:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d7fe6:	f001 f94f 	bl	d9288 <localtime>
        char* ascstr = asctime(calendar_time);
   d7fea:	f001 f8ff 	bl	d91ec <asctime>
   d7fee:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d7ff0:	f001 fac9 	bl	d9586 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d7ff4:	4428      	add	r0, r5
   d7ff6:	2300      	movs	r3, #0
   d7ff8:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d7ffc:	4629      	mov	r1, r5
   d7ffe:	4620      	mov	r0, r4
   d8000:	f7ff fec0 	bl	d7d84 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d8004:	4620      	mov	r0, r4
   d8006:	b003      	add	sp, #12
   d8008:	bd30      	pop	{r4, r5, pc}
   d800a:	bf00      	nop
   d800c:	2003e594 	.word	0x2003e594
   d8010:	2003e58c 	.word	0x2003e58c

000d8014 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d8014:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d8016:	2000      	movs	r0, #0
   d8018:	f7fe f9b4 	bl	d6384 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d801c:	4604      	mov	r4, r0
   d801e:	b968      	cbnz	r0, d803c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8020:	f7fe fb18 	bl	d6654 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8024:	2801      	cmp	r0, #1
   d8026:	d10b      	bne.n	d8040 <_ZN9TimeClass7isValidEv+0x2c>
   d8028:	4620      	mov	r0, r4
   d802a:	f7fe fb4b 	bl	d66c4 <system_thread_get_state>
   d802e:	b938      	cbnz	r0, d8040 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d8030:	f7ff ff9c 	bl	d7f6c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8034:	b930      	cbnz	r0, d8044 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d8036:	f7fe fb7b 	bl	d6730 <spark_process>
   d803a:	e7f9      	b.n	d8030 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d803c:	2001      	movs	r0, #1
   d803e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d8040:	2000      	movs	r0, #0
   d8042:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d8044:	f7ff ff92 	bl	d7f6c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d8048:	2000      	movs	r0, #0
   d804a:	f7fe f99b 	bl	d6384 <HAL_RTC_Time_Is_Valid>
   d804e:	3000      	adds	r0, #0
   d8050:	bf18      	it	ne
   d8052:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d8054:	bd10      	pop	{r4, pc}

000d8056 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d8056:	b508      	push	{r3, lr}
    (void)isValid();
   d8058:	f7ff ffdc 	bl	d8014 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d805c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d8060:	f7fe b988 	b.w	d6374 <HAL_RTC_Get_UnixTime>

000d8064 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d8064:	b508      	push	{r3, lr}
	return hour(now());
   d8066:	f7ff fff6 	bl	d8056 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d806a:	f7ff ff4d 	bl	d7f08 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d806e:	4b01      	ldr	r3, [pc, #4]	; (d8074 <_ZN9TimeClass4hourEv+0x10>)
   d8070:	6898      	ldr	r0, [r3, #8]
   d8072:	bd08      	pop	{r3, pc}
   d8074:	2003e564 	.word	0x2003e564

000d8078 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d8078:	b508      	push	{r3, lr}
	return minute(now());
   d807a:	f7ff ffec 	bl	d8056 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d807e:	f7ff ff43 	bl	d7f08 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d8082:	4b01      	ldr	r3, [pc, #4]	; (d8088 <_ZN9TimeClass6minuteEv+0x10>)
   d8084:	6858      	ldr	r0, [r3, #4]
   d8086:	bd08      	pop	{r3, pc}
   d8088:	2003e564 	.word	0x2003e564

000d808c <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   d808c:	b508      	push	{r3, lr}
	return day(now());
   d808e:	f7ff ffe2 	bl	d8056 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d8092:	f7ff ff39 	bl	d7f08 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   d8096:	4b01      	ldr	r3, [pc, #4]	; (d809c <_ZN9TimeClass3dayEv+0x10>)
   d8098:	68d8      	ldr	r0, [r3, #12]
   d809a:	bd08      	pop	{r3, pc}
   d809c:	2003e564 	.word	0x2003e564

000d80a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d80a0:	4b02      	ldr	r3, [pc, #8]	; (d80ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d80a2:	681a      	ldr	r2, [r3, #0]
   d80a4:	4b02      	ldr	r3, [pc, #8]	; (d80b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d80a6:	601a      	str	r2, [r3, #0]
   d80a8:	4770      	bx	lr
   d80aa:	bf00      	nop
   d80ac:	2003e0a4 	.word	0x2003e0a4
   d80b0:	2003e588 	.word	0x2003e588

000d80b4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d80b4:	4770      	bx	lr

000d80b6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d80b6:	7441      	strb	r1, [r0, #17]
   d80b8:	4770      	bx	lr

000d80ba <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d80ba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d80bc:	7c00      	ldrb	r0, [r0, #16]
   d80be:	f7fe fa81 	bl	d65c4 <HAL_USART_Available_Data_For_Write>
}
   d80c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d80c6:	bd08      	pop	{r3, pc}

000d80c8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d80c8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d80ca:	7c00      	ldrb	r0, [r0, #16]
   d80cc:	f7fe fa52 	bl	d6574 <HAL_USART_Available_Data>
}
   d80d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d80d4:	bd08      	pop	{r3, pc}

000d80d6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d80d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d80d8:	7c00      	ldrb	r0, [r0, #16]
   d80da:	f7fe fa5b 	bl	d6594 <HAL_USART_Peek_Data>
}
   d80de:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d80e2:	bf28      	it	cs
   d80e4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d80e8:	bd08      	pop	{r3, pc}

000d80ea <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d80ea:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d80ec:	7c00      	ldrb	r0, [r0, #16]
   d80ee:	f7fe fa49 	bl	d6584 <HAL_USART_Read_Data>
}
   d80f2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d80f6:	bf28      	it	cs
   d80f8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d80fc:	bd08      	pop	{r3, pc}

000d80fe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d80fe:	7c00      	ldrb	r0, [r0, #16]
   d8100:	f7fe ba50 	b.w	d65a4 <HAL_USART_Flush_Data>

000d8104 <_ZN11USARTSerialD0Ev>:
   d8104:	b510      	push	{r4, lr}
   d8106:	2114      	movs	r1, #20
   d8108:	4604      	mov	r4, r0
   d810a:	f000 fa22 	bl	d8552 <_ZdlPvj>
   d810e:	4620      	mov	r0, r4
   d8110:	bd10      	pop	{r4, pc}

000d8112 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8112:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8114:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d8116:	4604      	mov	r4, r0
   d8118:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d811a:	b925      	cbnz	r5, d8126 <_ZN11USARTSerial5writeEh+0x14>
   d811c:	7c00      	ldrb	r0, [r0, #16]
   d811e:	f7fe fa51 	bl	d65c4 <HAL_USART_Available_Data_For_Write>
   d8122:	2800      	cmp	r0, #0
   d8124:	dd05      	ble.n	d8132 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8126:	4631      	mov	r1, r6
   d8128:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d812a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d812e:	f7fe ba19 	b.w	d6564 <HAL_USART_Write_Data>
  }
  return 0;
}
   d8132:	4628      	mov	r0, r5
   d8134:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8138 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8138:	b510      	push	{r4, lr}
   d813a:	4604      	mov	r4, r0
   d813c:	4608      	mov	r0, r1
   d813e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8140:	2200      	movs	r2, #0
   d8142:	6062      	str	r2, [r4, #4]
   d8144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8148:	60a2      	str	r2, [r4, #8]
   d814a:	4a05      	ldr	r2, [pc, #20]	; (d8160 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d814c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d814e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8150:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d8152:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d8154:	461a      	mov	r2, r3
   d8156:	f7fe f9fd 	bl	d6554 <HAL_USART_Init>
}
   d815a:	4620      	mov	r0, r4
   d815c:	bd10      	pop	{r4, pc}
   d815e:	bf00      	nop
   d8160:	000dc0c8 	.word	0x000dc0c8

000d8164 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d8164:	7c00      	ldrb	r0, [r0, #16]
   d8166:	f7fe ba25 	b.w	d65b4 <HAL_USART_Is_Enabled>
	...

000d816c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d816c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d816e:	4d0c      	ldr	r5, [pc, #48]	; (d81a0 <_Z22__fetch_global_Serial1v+0x34>)
   d8170:	6829      	ldr	r1, [r5, #0]
   d8172:	f011 0401 	ands.w	r4, r1, #1
   d8176:	d111      	bne.n	d819c <_Z22__fetch_global_Serial1v+0x30>
   d8178:	4628      	mov	r0, r5
   d817a:	f7fb ff94 	bl	d40a6 <__cxa_guard_acquire>
   d817e:	b168      	cbz	r0, d819c <_Z22__fetch_global_Serial1v+0x30>
   d8180:	4a08      	ldr	r2, [pc, #32]	; (d81a4 <_Z22__fetch_global_Serial1v+0x38>)
   d8182:	4b09      	ldr	r3, [pc, #36]	; (d81a8 <_Z22__fetch_global_Serial1v+0x3c>)
   d8184:	4809      	ldr	r0, [pc, #36]	; (d81ac <_Z22__fetch_global_Serial1v+0x40>)
   d8186:	4621      	mov	r1, r4
   d8188:	f7ff ffd6 	bl	d8138 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d818c:	4628      	mov	r0, r5
   d818e:	f7fb ff8f 	bl	d40b0 <__cxa_guard_release>
   d8192:	4a07      	ldr	r2, [pc, #28]	; (d81b0 <_Z22__fetch_global_Serial1v+0x44>)
   d8194:	4907      	ldr	r1, [pc, #28]	; (d81b4 <_Z22__fetch_global_Serial1v+0x48>)
   d8196:	4805      	ldr	r0, [pc, #20]	; (d81ac <_Z22__fetch_global_Serial1v+0x40>)
   d8198:	f000 f9d6 	bl	d8548 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d819c:	4803      	ldr	r0, [pc, #12]	; (d81ac <_Z22__fetch_global_Serial1v+0x40>)
   d819e:	bd38      	pop	{r3, r4, r5, pc}
   d81a0:	2003e630 	.word	0x2003e630
   d81a4:	2003e634 	.word	0x2003e634
   d81a8:	2003e5ac 	.word	0x2003e5ac
   d81ac:	2003e598 	.word	0x2003e598
   d81b0:	2003e194 	.word	0x2003e194
   d81b4:	000d80b5 	.word	0x000d80b5

000d81b8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d81b8:	7441      	strb	r1, [r0, #17]
   d81ba:	4770      	bx	lr

000d81bc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d81bc:	4770      	bx	lr

000d81be <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d81be:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d81c0:	2100      	movs	r1, #0
   d81c2:	7c00      	ldrb	r0, [r0, #16]
   d81c4:	f7fe fa1e 	bl	d6604 <HAL_USB_USART_Receive_Data>
}
   d81c8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d81cc:	bf28      	it	cs
   d81ce:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d81d2:	bd08      	pop	{r3, pc}

000d81d4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d81d4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d81d6:	2101      	movs	r1, #1
   d81d8:	7c00      	ldrb	r0, [r0, #16]
   d81da:	f7fe fa13 	bl	d6604 <HAL_USB_USART_Receive_Data>
}
   d81de:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d81e2:	bf28      	it	cs
   d81e4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d81e8:	bd08      	pop	{r3, pc}

000d81ea <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d81ea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d81ec:	7c00      	ldrb	r0, [r0, #16]
   d81ee:	f7fe fa01 	bl	d65f4 <HAL_USB_USART_Available_Data_For_Write>
}
   d81f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d81f6:	bd08      	pop	{r3, pc}

000d81f8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d81f8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d81fa:	7c00      	ldrb	r0, [r0, #16]
   d81fc:	f7fe f9f2 	bl	d65e4 <HAL_USB_USART_Available_Data>
}
   d8200:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8204:	bd08      	pop	{r3, pc}

000d8206 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d8206:	7c00      	ldrb	r0, [r0, #16]
   d8208:	f7fe ba0c 	b.w	d6624 <HAL_USB_USART_Flush_Data>

000d820c <_ZN9USBSerialD0Ev>:
   d820c:	b510      	push	{r4, lr}
   d820e:	2114      	movs	r1, #20
   d8210:	4604      	mov	r4, r0
   d8212:	f000 f99e 	bl	d8552 <_ZdlPvj>
   d8216:	4620      	mov	r0, r4
   d8218:	bd10      	pop	{r4, pc}

000d821a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d821a:	b538      	push	{r3, r4, r5, lr}
   d821c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d821e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8220:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8222:	f7fe f9e7 	bl	d65f4 <HAL_USB_USART_Available_Data_For_Write>
   d8226:	2800      	cmp	r0, #0
   d8228:	dc01      	bgt.n	d822e <_ZN9USBSerial5writeEh+0x14>
   d822a:	7c60      	ldrb	r0, [r4, #17]
   d822c:	b128      	cbz	r0, d823a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d822e:	4629      	mov	r1, r5
   d8230:	7c20      	ldrb	r0, [r4, #16]
   d8232:	f7fe f9ef 	bl	d6614 <HAL_USB_USART_Send_Data>
   d8236:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d823a:	bd38      	pop	{r3, r4, r5, pc}

000d823c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d823c:	b510      	push	{r4, lr}
   d823e:	4604      	mov	r4, r0
   d8240:	2300      	movs	r3, #0
   d8242:	6063      	str	r3, [r4, #4]
   d8244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8248:	60a3      	str	r3, [r4, #8]
   d824a:	4b05      	ldr	r3, [pc, #20]	; (d8260 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d824c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d824e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8250:	4608      	mov	r0, r1
{
  _serial = serial;
   d8252:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8254:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d8256:	4611      	mov	r1, r2
   d8258:	f7fe f9bc 	bl	d65d4 <HAL_USB_USART_Init>
}
   d825c:	4620      	mov	r0, r4
   d825e:	bd10      	pop	{r4, pc}
   d8260:	000dc0f8 	.word	0x000dc0f8

000d8264 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8264:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8266:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8268:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d826a:	2100      	movs	r1, #0
   d826c:	f001 f92e 	bl	d94cc <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8270:	4620      	mov	r0, r4
   d8272:	bd10      	pop	{r4, pc}

000d8274 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8274:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8276:	4d0e      	ldr	r5, [pc, #56]	; (d82b0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d8278:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d827a:	a801      	add	r0, sp, #4
   d827c:	f7ff fff2 	bl	d8264 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8280:	6829      	ldr	r1, [r5, #0]
   d8282:	f011 0401 	ands.w	r4, r1, #1
   d8286:	d110      	bne.n	d82aa <_Z16_fetch_usbserialv+0x36>
   d8288:	4628      	mov	r0, r5
   d828a:	f7fb ff0c 	bl	d40a6 <__cxa_guard_acquire>
   d828e:	b160      	cbz	r0, d82aa <_Z16_fetch_usbserialv+0x36>
   d8290:	aa01      	add	r2, sp, #4
   d8292:	4621      	mov	r1, r4
   d8294:	4807      	ldr	r0, [pc, #28]	; (d82b4 <_Z16_fetch_usbserialv+0x40>)
   d8296:	f7ff ffd1 	bl	d823c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d829a:	4628      	mov	r0, r5
   d829c:	f7fb ff08 	bl	d40b0 <__cxa_guard_release>
   d82a0:	4a05      	ldr	r2, [pc, #20]	; (d82b8 <_Z16_fetch_usbserialv+0x44>)
   d82a2:	4906      	ldr	r1, [pc, #24]	; (d82bc <_Z16_fetch_usbserialv+0x48>)
   d82a4:	4803      	ldr	r0, [pc, #12]	; (d82b4 <_Z16_fetch_usbserialv+0x40>)
   d82a6:	f000 f94f 	bl	d8548 <__aeabi_atexit>
	return _usbserial;
}
   d82aa:	4802      	ldr	r0, [pc, #8]	; (d82b4 <_Z16_fetch_usbserialv+0x40>)
   d82ac:	b007      	add	sp, #28
   d82ae:	bd30      	pop	{r4, r5, pc}
   d82b0:	2003e6b8 	.word	0x2003e6b8
   d82b4:	2003e6bc 	.word	0x2003e6bc
   d82b8:	2003e194 	.word	0x2003e194
   d82bc:	000d81bd 	.word	0x000d81bd

000d82c0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d82c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d82c2:	4b0c      	ldr	r3, [pc, #48]	; (d82f4 <serialEventRun+0x34>)
   d82c4:	b133      	cbz	r3, d82d4 <serialEventRun+0x14>
   d82c6:	f7ff ffd5 	bl	d8274 <_Z16_fetch_usbserialv>
   d82ca:	6803      	ldr	r3, [r0, #0]
   d82cc:	691b      	ldr	r3, [r3, #16]
   d82ce:	4798      	blx	r3
   d82d0:	2800      	cmp	r0, #0
   d82d2:	dc09      	bgt.n	d82e8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d82d4:	4b08      	ldr	r3, [pc, #32]	; (d82f8 <serialEventRun+0x38>)
   d82d6:	b163      	cbz	r3, d82f2 <serialEventRun+0x32>
   d82d8:	f7ff ff48 	bl	d816c <_Z22__fetch_global_Serial1v>
   d82dc:	6803      	ldr	r3, [r0, #0]
   d82de:	691b      	ldr	r3, [r3, #16]
   d82e0:	4798      	blx	r3
   d82e2:	2800      	cmp	r0, #0
   d82e4:	dc03      	bgt.n	d82ee <serialEventRun+0x2e>
   d82e6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d82e8:	f3af 8000 	nop.w
   d82ec:	e7f2      	b.n	d82d4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d82ee:	f3af 8000 	nop.w
   d82f2:	bd08      	pop	{r3, pc}
	...

000d82fc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d82fc:	b508      	push	{r3, lr}
	serialEventRun();
   d82fe:	f7ff ffdf 	bl	d82c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8302:	f7fe f82f 	bl	d6364 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8306:	4b01      	ldr	r3, [pc, #4]	; (d830c <_post_loop+0x10>)
   d8308:	6018      	str	r0, [r3, #0]
   d830a:	bd08      	pop	{r3, pc}
   d830c:	2003e6d4 	.word	0x2003e6d4

000d8310 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8310:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8312:	2300      	movs	r3, #0
   d8314:	9300      	str	r3, [sp, #0]
   d8316:	461a      	mov	r2, r3
   d8318:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d831c:	f7fe f9e4 	bl	d66e8 <system_ctrl_set_result>
}
   d8320:	b003      	add	sp, #12
   d8322:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8328 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d8328:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d832a:	8843      	ldrh	r3, [r0, #2]
   d832c:	2b0a      	cmp	r3, #10
   d832e:	d008      	beq.n	d8342 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8330:	2b50      	cmp	r3, #80	; 0x50
   d8332:	d109      	bne.n	d8348 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d8334:	4b09      	ldr	r3, [pc, #36]	; (d835c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8336:	681b      	ldr	r3, [r3, #0]
   d8338:	b13b      	cbz	r3, d834a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d833a:	b003      	add	sp, #12
   d833c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d8340:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d8342:	f7ff ffe5 	bl	d8310 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d8346:	e006      	b.n	d8356 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8348:	2300      	movs	r3, #0
   d834a:	9300      	str	r3, [sp, #0]
   d834c:	461a      	mov	r2, r3
   d834e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8352:	f7fe f9c9 	bl	d66e8 <system_ctrl_set_result>
        break;
    }
}
   d8356:	b003      	add	sp, #12
   d8358:	f85d fb04 	ldr.w	pc, [sp], #4
   d835c:	2003e6d0 	.word	0x2003e6d0

000d8360 <module_user_init_hook>:

void module_user_init_hook()
{
   d8360:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8362:	f7fd ffef 	bl	d6344 <HAL_RNG_GetRandomNumber>
   d8366:	4604      	mov	r4, r0
    srand(seed);
   d8368:	f001 f8b8 	bl	d94dc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d836c:	4b07      	ldr	r3, [pc, #28]	; (d838c <module_user_init_hook+0x2c>)
   d836e:	b113      	cbz	r3, d8376 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d8370:	4620      	mov	r0, r4
   d8372:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8376:	2100      	movs	r1, #0
   d8378:	4804      	ldr	r0, [pc, #16]	; (d838c <module_user_init_hook+0x2c>)
   d837a:	f7fe fa21 	bl	d67c0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d837e:	2100      	movs	r1, #0
   d8380:	4803      	ldr	r0, [pc, #12]	; (d8390 <module_user_init_hook+0x30>)
}
   d8382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8386:	f7fe b9a5 	b.w	d66d4 <system_ctrl_set_app_request_handler>
   d838a:	bf00      	nop
   d838c:	00000000 	.word	0x00000000
   d8390:	000d8329 	.word	0x000d8329

000d8394 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8394:	b510      	push	{r4, lr}
   d8396:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8398:	480f      	ldr	r0, [pc, #60]	; (d83d8 <pinAvailable+0x44>)
   d839a:	f7ff fca9 	bl	d7cf0 <_ZN8SPIClass9isEnabledEv>
   d839e:	b128      	cbz	r0, d83ac <pinAvailable+0x18>
   d83a0:	f1a4 030b 	sub.w	r3, r4, #11
   d83a4:	2b02      	cmp	r3, #2
   d83a6:	d801      	bhi.n	d83ac <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d83a8:	2000      	movs	r0, #0
   d83aa:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d83ac:	f000 f86a 	bl	d8484 <_Z19__fetch_global_Wirev>
   d83b0:	f7fe ffe7 	bl	d7382 <_ZN7TwoWire9isEnabledEv>
   d83b4:	b108      	cbz	r0, d83ba <pinAvailable+0x26>
   d83b6:	2c01      	cmp	r4, #1
   d83b8:	d9f6      	bls.n	d83a8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d83ba:	f7ff fed7 	bl	d816c <_Z22__fetch_global_Serial1v>
   d83be:	f7ff fed1 	bl	d8164 <_ZN11USARTSerial9isEnabledEv>
   d83c2:	b118      	cbz	r0, d83cc <pinAvailable+0x38>
   d83c4:	f1a4 0309 	sub.w	r3, r4, #9
   d83c8:	2b01      	cmp	r3, #1
   d83ca:	d9ed      	bls.n	d83a8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d83cc:	2c23      	cmp	r4, #35	; 0x23
   d83ce:	bf8c      	ite	hi
   d83d0:	2000      	movhi	r0, #0
   d83d2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d83d4:	bd10      	pop	{r4, pc}
   d83d6:	bf00      	nop
   d83d8:	2003e708 	.word	0x2003e708

000d83dc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d83dc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d83de:	b538      	push	{r3, r4, r5, lr}
   d83e0:	4604      	mov	r4, r0
   d83e2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d83e4:	d80a      	bhi.n	d83fc <pinMode+0x20>
   d83e6:	29ff      	cmp	r1, #255	; 0xff
   d83e8:	d008      	beq.n	d83fc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d83ea:	f7ff ffd3 	bl	d8394 <pinAvailable>
   d83ee:	b128      	cbz	r0, d83fc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d83f0:	4629      	mov	r1, r5
   d83f2:	4620      	mov	r0, r4
}
   d83f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d83f8:	f7fd bfe4 	b.w	d63c4 <HAL_Pin_Mode>
   d83fc:	bd38      	pop	{r3, r4, r5, pc}

000d83fe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d83fe:	b538      	push	{r3, r4, r5, lr}
   d8400:	4604      	mov	r4, r0
   d8402:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8404:	f7fd ffe6 	bl	d63d4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8408:	28ff      	cmp	r0, #255	; 0xff
   d840a:	d010      	beq.n	d842e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d840c:	2806      	cmp	r0, #6
   d840e:	d804      	bhi.n	d841a <digitalWrite+0x1c>
   d8410:	234d      	movs	r3, #77	; 0x4d
   d8412:	fa23 f000 	lsr.w	r0, r3, r0
   d8416:	07c3      	lsls	r3, r0, #31
   d8418:	d409      	bmi.n	d842e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d841a:	4620      	mov	r0, r4
   d841c:	f7ff ffba 	bl	d8394 <pinAvailable>
   d8420:	b128      	cbz	r0, d842e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8422:	4629      	mov	r1, r5
   d8424:	4620      	mov	r0, r4
}
   d8426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d842a:	f7fd bfdb 	b.w	d63e4 <HAL_GPIO_Write>
   d842e:	bd38      	pop	{r3, r4, r5, pc}

000d8430 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8430:	b510      	push	{r4, lr}
   d8432:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8434:	f7fd ffce 	bl	d63d4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d8438:	3804      	subs	r0, #4
   d843a:	b2c0      	uxtb	r0, r0
   d843c:	2801      	cmp	r0, #1
   d843e:	d908      	bls.n	d8452 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8440:	4620      	mov	r0, r4
   d8442:	f7ff ffa7 	bl	d8394 <pinAvailable>
   d8446:	b120      	cbz	r0, d8452 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8448:	4620      	mov	r0, r4
}
   d844a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d844e:	f7fd bfd1 	b.w	d63f4 <HAL_GPIO_Read>
}
   d8452:	2000      	movs	r0, #0
   d8454:	bd10      	pop	{r4, pc}

000d8456 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8456:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d8458:	b510      	push	{r4, lr}
   d845a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d845c:	bf9c      	itt	ls
   d845e:	340e      	addls	r4, #14
   d8460:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8462:	4620      	mov	r0, r4
   d8464:	f7ff ff96 	bl	d8394 <pinAvailable>
   d8468:	b150      	cbz	r0, d8480 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d846a:	2103      	movs	r1, #3
   d846c:	4620      	mov	r0, r4
   d846e:	f7fd ffa1 	bl	d63b4 <HAL_Validate_Pin_Function>
   d8472:	2803      	cmp	r0, #3
   d8474:	d104      	bne.n	d8480 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8476:	4620      	mov	r0, r4
}
   d8478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d847c:	f7fd bfd2 	b.w	d6424 <HAL_ADC_Read>
}
   d8480:	2000      	movs	r0, #0
   d8482:	bd10      	pop	{r4, pc}

000d8484 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d8484:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d8486:	4d0b      	ldr	r5, [pc, #44]	; (d84b4 <_Z19__fetch_global_Wirev+0x30>)
   d8488:	6829      	ldr	r1, [r5, #0]
   d848a:	f011 0401 	ands.w	r4, r1, #1
   d848e:	d10f      	bne.n	d84b0 <_Z19__fetch_global_Wirev+0x2c>
   d8490:	4628      	mov	r0, r5
   d8492:	f7fb fe08 	bl	d40a6 <__cxa_guard_acquire>
   d8496:	b158      	cbz	r0, d84b0 <_Z19__fetch_global_Wirev+0x2c>
   d8498:	4621      	mov	r1, r4
   d849a:	4807      	ldr	r0, [pc, #28]	; (d84b8 <_Z19__fetch_global_Wirev+0x34>)
   d849c:	f7fe ff3a 	bl	d7314 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d84a0:	4628      	mov	r0, r5
   d84a2:	f7fb fe05 	bl	d40b0 <__cxa_guard_release>
   d84a6:	4a05      	ldr	r2, [pc, #20]	; (d84bc <_Z19__fetch_global_Wirev+0x38>)
   d84a8:	4905      	ldr	r1, [pc, #20]	; (d84c0 <_Z19__fetch_global_Wirev+0x3c>)
   d84aa:	4803      	ldr	r0, [pc, #12]	; (d84b8 <_Z19__fetch_global_Wirev+0x34>)
   d84ac:	f000 f84c 	bl	d8548 <__aeabi_atexit>
	return wire;
}
   d84b0:	4801      	ldr	r0, [pc, #4]	; (d84b8 <_Z19__fetch_global_Wirev+0x34>)
   d84b2:	bd38      	pop	{r3, r4, r5, pc}
   d84b4:	2003e6d8 	.word	0x2003e6d8
   d84b8:	2003e6f0 	.word	0x2003e6f0
   d84bc:	2003e194 	.word	0x2003e194
   d84c0:	000d72bd 	.word	0x000d72bd

000d84c4 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d84c4:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   d84c6:	4c0b      	ldr	r4, [pc, #44]	; (d84f4 <_Z20__fetch_global_Wire1v+0x30>)
   d84c8:	6823      	ldr	r3, [r4, #0]
   d84ca:	07db      	lsls	r3, r3, #31
   d84cc:	d40f      	bmi.n	d84ee <_Z20__fetch_global_Wire1v+0x2a>
   d84ce:	4620      	mov	r0, r4
   d84d0:	f7fb fde9 	bl	d40a6 <__cxa_guard_acquire>
   d84d4:	b158      	cbz	r0, d84ee <_Z20__fetch_global_Wire1v+0x2a>
   d84d6:	2101      	movs	r1, #1
   d84d8:	4807      	ldr	r0, [pc, #28]	; (d84f8 <_Z20__fetch_global_Wire1v+0x34>)
   d84da:	f7fe ff1b 	bl	d7314 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d84de:	4620      	mov	r0, r4
   d84e0:	f7fb fde6 	bl	d40b0 <__cxa_guard_release>
   d84e4:	4a05      	ldr	r2, [pc, #20]	; (d84fc <_Z20__fetch_global_Wire1v+0x38>)
   d84e6:	4906      	ldr	r1, [pc, #24]	; (d8500 <_Z20__fetch_global_Wire1v+0x3c>)
   d84e8:	4803      	ldr	r0, [pc, #12]	; (d84f8 <_Z20__fetch_global_Wire1v+0x34>)
   d84ea:	f000 f82d 	bl	d8548 <__aeabi_atexit>
	return wire;
}
   d84ee:	4802      	ldr	r0, [pc, #8]	; (d84f8 <_Z20__fetch_global_Wire1v+0x34>)
   d84f0:	bd10      	pop	{r4, pc}
   d84f2:	bf00      	nop
   d84f4:	2003e704 	.word	0x2003e704
   d84f8:	2003e6dc 	.word	0x2003e6dc
   d84fc:	2003e194 	.word	0x2003e194
   d8500:	000d72bd 	.word	0x000d72bd

000d8504 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8504:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d8506:	4c0c      	ldr	r4, [pc, #48]	; (d8538 <_GLOBAL__sub_I_SPI+0x34>)
   d8508:	4e0c      	ldr	r6, [pc, #48]	; (d853c <_GLOBAL__sub_I_SPI+0x38>)
   d850a:	4d0d      	ldr	r5, [pc, #52]	; (d8540 <_GLOBAL__sub_I_SPI+0x3c>)
   d850c:	2100      	movs	r1, #0
   d850e:	4620      	mov	r0, r4
   d8510:	f7ff fbda 	bl	d7cc8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8514:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8516:	4c0b      	ldr	r4, [pc, #44]	; (d8544 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d8518:	4632      	mov	r2, r6
   d851a:	4629      	mov	r1, r5
   d851c:	f000 f814 	bl	d8548 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8520:	2101      	movs	r1, #1
   d8522:	4620      	mov	r0, r4
   d8524:	f7ff fbd0 	bl	d7cc8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8528:	4632      	mov	r2, r6
   d852a:	4629      	mov	r1, r5
   d852c:	4620      	mov	r0, r4
   d852e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8532:	f000 b809 	b.w	d8548 <__aeabi_atexit>
   d8536:	bf00      	nop
   d8538:	2003e708 	.word	0x2003e708
   d853c:	2003e194 	.word	0x2003e194
   d8540:	000d7cb9 	.word	0x000d7cb9
   d8544:	2003e718 	.word	0x2003e718

000d8548 <__aeabi_atexit>:
   d8548:	460b      	mov	r3, r1
   d854a:	4601      	mov	r1, r0
   d854c:	4618      	mov	r0, r3
   d854e:	f000 be8d 	b.w	d926c <__cxa_atexit>

000d8552 <_ZdlPvj>:
   d8552:	f7fb bda4 	b.w	d409e <_ZdlPv>

000d8556 <_ZSt25__throw_bad_function_callv>:
   d8556:	b508      	push	{r3, lr}
   d8558:	f7fe f9ba 	bl	d68d0 <abort>

000d855c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d855c:	4b24      	ldr	r3, [pc, #144]	; (d85f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d855e:	681a      	ldr	r2, [r3, #0]
   d8560:	07d0      	lsls	r0, r2, #31
   d8562:	bf5c      	itt	pl
   d8564:	2201      	movpl	r2, #1
   d8566:	601a      	strpl	r2, [r3, #0]
   d8568:	4b22      	ldr	r3, [pc, #136]	; (d85f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d856a:	681a      	ldr	r2, [r3, #0]
   d856c:	07d1      	lsls	r1, r2, #31
   d856e:	bf5c      	itt	pl
   d8570:	2201      	movpl	r2, #1
   d8572:	601a      	strpl	r2, [r3, #0]
   d8574:	4b20      	ldr	r3, [pc, #128]	; (d85f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8576:	681a      	ldr	r2, [r3, #0]
   d8578:	07d2      	lsls	r2, r2, #31
   d857a:	bf5c      	itt	pl
   d857c:	2201      	movpl	r2, #1
   d857e:	601a      	strpl	r2, [r3, #0]
   d8580:	4b1e      	ldr	r3, [pc, #120]	; (d85fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8582:	681a      	ldr	r2, [r3, #0]
   d8584:	07d0      	lsls	r0, r2, #31
   d8586:	bf5c      	itt	pl
   d8588:	2201      	movpl	r2, #1
   d858a:	601a      	strpl	r2, [r3, #0]
   d858c:	4b1c      	ldr	r3, [pc, #112]	; (d8600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d858e:	681a      	ldr	r2, [r3, #0]
   d8590:	07d1      	lsls	r1, r2, #31
   d8592:	bf5c      	itt	pl
   d8594:	2201      	movpl	r2, #1
   d8596:	601a      	strpl	r2, [r3, #0]
   d8598:	4b1a      	ldr	r3, [pc, #104]	; (d8604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d859a:	681a      	ldr	r2, [r3, #0]
   d859c:	07d2      	lsls	r2, r2, #31
   d859e:	bf5c      	itt	pl
   d85a0:	2201      	movpl	r2, #1
   d85a2:	601a      	strpl	r2, [r3, #0]
   d85a4:	4b18      	ldr	r3, [pc, #96]	; (d8608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d85a6:	681a      	ldr	r2, [r3, #0]
   d85a8:	07d0      	lsls	r0, r2, #31
   d85aa:	bf5c      	itt	pl
   d85ac:	2201      	movpl	r2, #1
   d85ae:	601a      	strpl	r2, [r3, #0]
   d85b0:	4b16      	ldr	r3, [pc, #88]	; (d860c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d85b2:	681a      	ldr	r2, [r3, #0]
   d85b4:	07d1      	lsls	r1, r2, #31
   d85b6:	bf5c      	itt	pl
   d85b8:	2201      	movpl	r2, #1
   d85ba:	601a      	strpl	r2, [r3, #0]
   d85bc:	4b14      	ldr	r3, [pc, #80]	; (d8610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d85be:	681a      	ldr	r2, [r3, #0]
   d85c0:	07d2      	lsls	r2, r2, #31
   d85c2:	bf5c      	itt	pl
   d85c4:	2201      	movpl	r2, #1
   d85c6:	601a      	strpl	r2, [r3, #0]
   d85c8:	4b12      	ldr	r3, [pc, #72]	; (d8614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d85ca:	681a      	ldr	r2, [r3, #0]
   d85cc:	07d0      	lsls	r0, r2, #31
   d85ce:	bf5c      	itt	pl
   d85d0:	2201      	movpl	r2, #1
   d85d2:	601a      	strpl	r2, [r3, #0]
   d85d4:	4b10      	ldr	r3, [pc, #64]	; (d8618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d85d6:	681a      	ldr	r2, [r3, #0]
   d85d8:	07d1      	lsls	r1, r2, #31
   d85da:	bf5c      	itt	pl
   d85dc:	2201      	movpl	r2, #1
   d85de:	601a      	strpl	r2, [r3, #0]
   d85e0:	4b0e      	ldr	r3, [pc, #56]	; (d861c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d85e2:	681a      	ldr	r2, [r3, #0]
   d85e4:	07d2      	lsls	r2, r2, #31
   d85e6:	bf5c      	itt	pl
   d85e8:	2201      	movpl	r2, #1
   d85ea:	601a      	strpl	r2, [r3, #0]
   d85ec:	4770      	bx	lr
   d85ee:	bf00      	nop
   d85f0:	2003e754 	.word	0x2003e754
   d85f4:	2003e750 	.word	0x2003e750
   d85f8:	2003e74c 	.word	0x2003e74c
   d85fc:	2003e748 	.word	0x2003e748
   d8600:	2003e744 	.word	0x2003e744
   d8604:	2003e740 	.word	0x2003e740
   d8608:	2003e73c 	.word	0x2003e73c
   d860c:	2003e738 	.word	0x2003e738
   d8610:	2003e734 	.word	0x2003e734
   d8614:	2003e730 	.word	0x2003e730
   d8618:	2003e72c 	.word	0x2003e72c
   d861c:	2003e728 	.word	0x2003e728

000d8620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8620:	4b18      	ldr	r3, [pc, #96]	; (d8684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8622:	681a      	ldr	r2, [r3, #0]
   d8624:	07d1      	lsls	r1, r2, #31
   d8626:	bf5c      	itt	pl
   d8628:	2201      	movpl	r2, #1
   d862a:	601a      	strpl	r2, [r3, #0]
   d862c:	4b16      	ldr	r3, [pc, #88]	; (d8688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d862e:	681a      	ldr	r2, [r3, #0]
   d8630:	07d2      	lsls	r2, r2, #31
   d8632:	bf5c      	itt	pl
   d8634:	2201      	movpl	r2, #1
   d8636:	601a      	strpl	r2, [r3, #0]
   d8638:	4b14      	ldr	r3, [pc, #80]	; (d868c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d863a:	681a      	ldr	r2, [r3, #0]
   d863c:	07d0      	lsls	r0, r2, #31
   d863e:	bf5c      	itt	pl
   d8640:	2201      	movpl	r2, #1
   d8642:	601a      	strpl	r2, [r3, #0]
   d8644:	4b12      	ldr	r3, [pc, #72]	; (d8690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8646:	681a      	ldr	r2, [r3, #0]
   d8648:	07d1      	lsls	r1, r2, #31
   d864a:	bf5c      	itt	pl
   d864c:	2201      	movpl	r2, #1
   d864e:	601a      	strpl	r2, [r3, #0]
   d8650:	4b10      	ldr	r3, [pc, #64]	; (d8694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8652:	681a      	ldr	r2, [r3, #0]
   d8654:	07d2      	lsls	r2, r2, #31
   d8656:	bf5c      	itt	pl
   d8658:	2201      	movpl	r2, #1
   d865a:	601a      	strpl	r2, [r3, #0]
   d865c:	4b0e      	ldr	r3, [pc, #56]	; (d8698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d865e:	681a      	ldr	r2, [r3, #0]
   d8660:	07d0      	lsls	r0, r2, #31
   d8662:	bf5c      	itt	pl
   d8664:	2201      	movpl	r2, #1
   d8666:	601a      	strpl	r2, [r3, #0]
   d8668:	4b0c      	ldr	r3, [pc, #48]	; (d869c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d866a:	681a      	ldr	r2, [r3, #0]
   d866c:	07d1      	lsls	r1, r2, #31
   d866e:	bf5c      	itt	pl
   d8670:	2201      	movpl	r2, #1
   d8672:	601a      	strpl	r2, [r3, #0]
   d8674:	4b0a      	ldr	r3, [pc, #40]	; (d86a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8676:	681a      	ldr	r2, [r3, #0]
   d8678:	07d2      	lsls	r2, r2, #31
   d867a:	bf5c      	itt	pl
   d867c:	2201      	movpl	r2, #1
   d867e:	601a      	strpl	r2, [r3, #0]
   d8680:	4770      	bx	lr
   d8682:	bf00      	nop
   d8684:	2003e774 	.word	0x2003e774
   d8688:	2003e770 	.word	0x2003e770
   d868c:	2003e76c 	.word	0x2003e76c
   d8690:	2003e768 	.word	0x2003e768
   d8694:	2003e764 	.word	0x2003e764
   d8698:	2003e760 	.word	0x2003e760
   d869c:	2003e75c 	.word	0x2003e75c
   d86a0:	2003e758 	.word	0x2003e758

000d86a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d86a4:	4b18      	ldr	r3, [pc, #96]	; (d8708 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d86a6:	681a      	ldr	r2, [r3, #0]
   d86a8:	07d1      	lsls	r1, r2, #31
   d86aa:	bf5c      	itt	pl
   d86ac:	2201      	movpl	r2, #1
   d86ae:	601a      	strpl	r2, [r3, #0]
   d86b0:	4b16      	ldr	r3, [pc, #88]	; (d870c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d86b2:	681a      	ldr	r2, [r3, #0]
   d86b4:	07d2      	lsls	r2, r2, #31
   d86b6:	bf5c      	itt	pl
   d86b8:	2201      	movpl	r2, #1
   d86ba:	601a      	strpl	r2, [r3, #0]
   d86bc:	4b14      	ldr	r3, [pc, #80]	; (d8710 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d86be:	681a      	ldr	r2, [r3, #0]
   d86c0:	07d0      	lsls	r0, r2, #31
   d86c2:	bf5c      	itt	pl
   d86c4:	2201      	movpl	r2, #1
   d86c6:	601a      	strpl	r2, [r3, #0]
   d86c8:	4b12      	ldr	r3, [pc, #72]	; (d8714 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d86ca:	681a      	ldr	r2, [r3, #0]
   d86cc:	07d1      	lsls	r1, r2, #31
   d86ce:	bf5c      	itt	pl
   d86d0:	2201      	movpl	r2, #1
   d86d2:	601a      	strpl	r2, [r3, #0]
   d86d4:	4b10      	ldr	r3, [pc, #64]	; (d8718 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d86d6:	681a      	ldr	r2, [r3, #0]
   d86d8:	07d2      	lsls	r2, r2, #31
   d86da:	bf5c      	itt	pl
   d86dc:	2201      	movpl	r2, #1
   d86de:	601a      	strpl	r2, [r3, #0]
   d86e0:	4b0e      	ldr	r3, [pc, #56]	; (d871c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d86e2:	681a      	ldr	r2, [r3, #0]
   d86e4:	07d0      	lsls	r0, r2, #31
   d86e6:	bf5c      	itt	pl
   d86e8:	2201      	movpl	r2, #1
   d86ea:	601a      	strpl	r2, [r3, #0]
   d86ec:	4b0c      	ldr	r3, [pc, #48]	; (d8720 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d86ee:	681a      	ldr	r2, [r3, #0]
   d86f0:	07d1      	lsls	r1, r2, #31
   d86f2:	bf5c      	itt	pl
   d86f4:	2201      	movpl	r2, #1
   d86f6:	601a      	strpl	r2, [r3, #0]
   d86f8:	4b0a      	ldr	r3, [pc, #40]	; (d8724 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d86fa:	681a      	ldr	r2, [r3, #0]
   d86fc:	07d2      	lsls	r2, r2, #31
   d86fe:	bf5c      	itt	pl
   d8700:	2201      	movpl	r2, #1
   d8702:	601a      	strpl	r2, [r3, #0]
   d8704:	4770      	bx	lr
   d8706:	bf00      	nop
   d8708:	2003e794 	.word	0x2003e794
   d870c:	2003e790 	.word	0x2003e790
   d8710:	2003e78c 	.word	0x2003e78c
   d8714:	2003e788 	.word	0x2003e788
   d8718:	2003e784 	.word	0x2003e784
   d871c:	2003e780 	.word	0x2003e780
   d8720:	2003e77c 	.word	0x2003e77c
   d8724:	2003e778 	.word	0x2003e778

000d8728 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8728:	4b24      	ldr	r3, [pc, #144]	; (d87bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d872a:	681a      	ldr	r2, [r3, #0]
   d872c:	07d0      	lsls	r0, r2, #31
   d872e:	bf5c      	itt	pl
   d8730:	2201      	movpl	r2, #1
   d8732:	601a      	strpl	r2, [r3, #0]
   d8734:	4b22      	ldr	r3, [pc, #136]	; (d87c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d8736:	681a      	ldr	r2, [r3, #0]
   d8738:	07d1      	lsls	r1, r2, #31
   d873a:	bf5c      	itt	pl
   d873c:	2201      	movpl	r2, #1
   d873e:	601a      	strpl	r2, [r3, #0]
   d8740:	4b20      	ldr	r3, [pc, #128]	; (d87c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8742:	681a      	ldr	r2, [r3, #0]
   d8744:	07d2      	lsls	r2, r2, #31
   d8746:	bf5c      	itt	pl
   d8748:	2201      	movpl	r2, #1
   d874a:	601a      	strpl	r2, [r3, #0]
   d874c:	4b1e      	ldr	r3, [pc, #120]	; (d87c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d874e:	681a      	ldr	r2, [r3, #0]
   d8750:	07d0      	lsls	r0, r2, #31
   d8752:	bf5c      	itt	pl
   d8754:	2201      	movpl	r2, #1
   d8756:	601a      	strpl	r2, [r3, #0]
   d8758:	4b1c      	ldr	r3, [pc, #112]	; (d87cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d875a:	681a      	ldr	r2, [r3, #0]
   d875c:	07d1      	lsls	r1, r2, #31
   d875e:	bf5c      	itt	pl
   d8760:	2201      	movpl	r2, #1
   d8762:	601a      	strpl	r2, [r3, #0]
   d8764:	4b1a      	ldr	r3, [pc, #104]	; (d87d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d8766:	681a      	ldr	r2, [r3, #0]
   d8768:	07d2      	lsls	r2, r2, #31
   d876a:	bf5c      	itt	pl
   d876c:	2201      	movpl	r2, #1
   d876e:	601a      	strpl	r2, [r3, #0]
   d8770:	4b18      	ldr	r3, [pc, #96]	; (d87d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8772:	681a      	ldr	r2, [r3, #0]
   d8774:	07d0      	lsls	r0, r2, #31
   d8776:	bf5c      	itt	pl
   d8778:	2201      	movpl	r2, #1
   d877a:	601a      	strpl	r2, [r3, #0]
   d877c:	4b16      	ldr	r3, [pc, #88]	; (d87d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d877e:	681a      	ldr	r2, [r3, #0]
   d8780:	07d1      	lsls	r1, r2, #31
   d8782:	bf5c      	itt	pl
   d8784:	2201      	movpl	r2, #1
   d8786:	601a      	strpl	r2, [r3, #0]
   d8788:	4b14      	ldr	r3, [pc, #80]	; (d87dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d878a:	681a      	ldr	r2, [r3, #0]
   d878c:	07d2      	lsls	r2, r2, #31
   d878e:	bf5c      	itt	pl
   d8790:	2201      	movpl	r2, #1
   d8792:	601a      	strpl	r2, [r3, #0]
   d8794:	4b12      	ldr	r3, [pc, #72]	; (d87e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8796:	681a      	ldr	r2, [r3, #0]
   d8798:	07d0      	lsls	r0, r2, #31
   d879a:	bf5c      	itt	pl
   d879c:	2201      	movpl	r2, #1
   d879e:	601a      	strpl	r2, [r3, #0]
   d87a0:	4b10      	ldr	r3, [pc, #64]	; (d87e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d87a2:	681a      	ldr	r2, [r3, #0]
   d87a4:	07d1      	lsls	r1, r2, #31
   d87a6:	bf5c      	itt	pl
   d87a8:	2201      	movpl	r2, #1
   d87aa:	601a      	strpl	r2, [r3, #0]
   d87ac:	4b0e      	ldr	r3, [pc, #56]	; (d87e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d87ae:	681a      	ldr	r2, [r3, #0]
   d87b0:	07d2      	lsls	r2, r2, #31
   d87b2:	bf5c      	itt	pl
   d87b4:	2201      	movpl	r2, #1
   d87b6:	601a      	strpl	r2, [r3, #0]
   d87b8:	4770      	bx	lr
   d87ba:	bf00      	nop
   d87bc:	2003e7c4 	.word	0x2003e7c4
   d87c0:	2003e7c0 	.word	0x2003e7c0
   d87c4:	2003e7bc 	.word	0x2003e7bc
   d87c8:	2003e7b8 	.word	0x2003e7b8
   d87cc:	2003e7b4 	.word	0x2003e7b4
   d87d0:	2003e7b0 	.word	0x2003e7b0
   d87d4:	2003e7ac 	.word	0x2003e7ac
   d87d8:	2003e7a8 	.word	0x2003e7a8
   d87dc:	2003e7a4 	.word	0x2003e7a4
   d87e0:	2003e7a0 	.word	0x2003e7a0
   d87e4:	2003e79c 	.word	0x2003e79c
   d87e8:	2003e798 	.word	0x2003e798

000d87ec <__aeabi_drsub>:
   d87ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d87f0:	e002      	b.n	d87f8 <__adddf3>
   d87f2:	bf00      	nop

000d87f4 <__aeabi_dsub>:
   d87f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d87f8 <__adddf3>:
   d87f8:	b530      	push	{r4, r5, lr}
   d87fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d87fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8802:	ea94 0f05 	teq	r4, r5
   d8806:	bf08      	it	eq
   d8808:	ea90 0f02 	teqeq	r0, r2
   d880c:	bf1f      	itttt	ne
   d880e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8812:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8816:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d881a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d881e:	f000 80e2 	beq.w	d89e6 <__adddf3+0x1ee>
   d8822:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8826:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d882a:	bfb8      	it	lt
   d882c:	426d      	neglt	r5, r5
   d882e:	dd0c      	ble.n	d884a <__adddf3+0x52>
   d8830:	442c      	add	r4, r5
   d8832:	ea80 0202 	eor.w	r2, r0, r2
   d8836:	ea81 0303 	eor.w	r3, r1, r3
   d883a:	ea82 0000 	eor.w	r0, r2, r0
   d883e:	ea83 0101 	eor.w	r1, r3, r1
   d8842:	ea80 0202 	eor.w	r2, r0, r2
   d8846:	ea81 0303 	eor.w	r3, r1, r3
   d884a:	2d36      	cmp	r5, #54	; 0x36
   d884c:	bf88      	it	hi
   d884e:	bd30      	pophi	{r4, r5, pc}
   d8850:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8854:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8858:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d885c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8860:	d002      	beq.n	d8868 <__adddf3+0x70>
   d8862:	4240      	negs	r0, r0
   d8864:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8868:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d886c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8870:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8874:	d002      	beq.n	d887c <__adddf3+0x84>
   d8876:	4252      	negs	r2, r2
   d8878:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d887c:	ea94 0f05 	teq	r4, r5
   d8880:	f000 80a7 	beq.w	d89d2 <__adddf3+0x1da>
   d8884:	f1a4 0401 	sub.w	r4, r4, #1
   d8888:	f1d5 0e20 	rsbs	lr, r5, #32
   d888c:	db0d      	blt.n	d88aa <__adddf3+0xb2>
   d888e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8892:	fa22 f205 	lsr.w	r2, r2, r5
   d8896:	1880      	adds	r0, r0, r2
   d8898:	f141 0100 	adc.w	r1, r1, #0
   d889c:	fa03 f20e 	lsl.w	r2, r3, lr
   d88a0:	1880      	adds	r0, r0, r2
   d88a2:	fa43 f305 	asr.w	r3, r3, r5
   d88a6:	4159      	adcs	r1, r3
   d88a8:	e00e      	b.n	d88c8 <__adddf3+0xd0>
   d88aa:	f1a5 0520 	sub.w	r5, r5, #32
   d88ae:	f10e 0e20 	add.w	lr, lr, #32
   d88b2:	2a01      	cmp	r2, #1
   d88b4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d88b8:	bf28      	it	cs
   d88ba:	f04c 0c02 	orrcs.w	ip, ip, #2
   d88be:	fa43 f305 	asr.w	r3, r3, r5
   d88c2:	18c0      	adds	r0, r0, r3
   d88c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d88c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d88cc:	d507      	bpl.n	d88de <__adddf3+0xe6>
   d88ce:	f04f 0e00 	mov.w	lr, #0
   d88d2:	f1dc 0c00 	rsbs	ip, ip, #0
   d88d6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d88da:	eb6e 0101 	sbc.w	r1, lr, r1
   d88de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d88e2:	d31b      	bcc.n	d891c <__adddf3+0x124>
   d88e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d88e8:	d30c      	bcc.n	d8904 <__adddf3+0x10c>
   d88ea:	0849      	lsrs	r1, r1, #1
   d88ec:	ea5f 0030 	movs.w	r0, r0, rrx
   d88f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d88f4:	f104 0401 	add.w	r4, r4, #1
   d88f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d88fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8900:	f080 809a 	bcs.w	d8a38 <__adddf3+0x240>
   d8904:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8908:	bf08      	it	eq
   d890a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d890e:	f150 0000 	adcs.w	r0, r0, #0
   d8912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8916:	ea41 0105 	orr.w	r1, r1, r5
   d891a:	bd30      	pop	{r4, r5, pc}
   d891c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8920:	4140      	adcs	r0, r0
   d8922:	eb41 0101 	adc.w	r1, r1, r1
   d8926:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d892a:	f1a4 0401 	sub.w	r4, r4, #1
   d892e:	d1e9      	bne.n	d8904 <__adddf3+0x10c>
   d8930:	f091 0f00 	teq	r1, #0
   d8934:	bf04      	itt	eq
   d8936:	4601      	moveq	r1, r0
   d8938:	2000      	moveq	r0, #0
   d893a:	fab1 f381 	clz	r3, r1
   d893e:	bf08      	it	eq
   d8940:	3320      	addeq	r3, #32
   d8942:	f1a3 030b 	sub.w	r3, r3, #11
   d8946:	f1b3 0220 	subs.w	r2, r3, #32
   d894a:	da0c      	bge.n	d8966 <__adddf3+0x16e>
   d894c:	320c      	adds	r2, #12
   d894e:	dd08      	ble.n	d8962 <__adddf3+0x16a>
   d8950:	f102 0c14 	add.w	ip, r2, #20
   d8954:	f1c2 020c 	rsb	r2, r2, #12
   d8958:	fa01 f00c 	lsl.w	r0, r1, ip
   d895c:	fa21 f102 	lsr.w	r1, r1, r2
   d8960:	e00c      	b.n	d897c <__adddf3+0x184>
   d8962:	f102 0214 	add.w	r2, r2, #20
   d8966:	bfd8      	it	le
   d8968:	f1c2 0c20 	rsble	ip, r2, #32
   d896c:	fa01 f102 	lsl.w	r1, r1, r2
   d8970:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8974:	bfdc      	itt	le
   d8976:	ea41 010c 	orrle.w	r1, r1, ip
   d897a:	4090      	lslle	r0, r2
   d897c:	1ae4      	subs	r4, r4, r3
   d897e:	bfa2      	ittt	ge
   d8980:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8984:	4329      	orrge	r1, r5
   d8986:	bd30      	popge	{r4, r5, pc}
   d8988:	ea6f 0404 	mvn.w	r4, r4
   d898c:	3c1f      	subs	r4, #31
   d898e:	da1c      	bge.n	d89ca <__adddf3+0x1d2>
   d8990:	340c      	adds	r4, #12
   d8992:	dc0e      	bgt.n	d89b2 <__adddf3+0x1ba>
   d8994:	f104 0414 	add.w	r4, r4, #20
   d8998:	f1c4 0220 	rsb	r2, r4, #32
   d899c:	fa20 f004 	lsr.w	r0, r0, r4
   d89a0:	fa01 f302 	lsl.w	r3, r1, r2
   d89a4:	ea40 0003 	orr.w	r0, r0, r3
   d89a8:	fa21 f304 	lsr.w	r3, r1, r4
   d89ac:	ea45 0103 	orr.w	r1, r5, r3
   d89b0:	bd30      	pop	{r4, r5, pc}
   d89b2:	f1c4 040c 	rsb	r4, r4, #12
   d89b6:	f1c4 0220 	rsb	r2, r4, #32
   d89ba:	fa20 f002 	lsr.w	r0, r0, r2
   d89be:	fa01 f304 	lsl.w	r3, r1, r4
   d89c2:	ea40 0003 	orr.w	r0, r0, r3
   d89c6:	4629      	mov	r1, r5
   d89c8:	bd30      	pop	{r4, r5, pc}
   d89ca:	fa21 f004 	lsr.w	r0, r1, r4
   d89ce:	4629      	mov	r1, r5
   d89d0:	bd30      	pop	{r4, r5, pc}
   d89d2:	f094 0f00 	teq	r4, #0
   d89d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d89da:	bf06      	itte	eq
   d89dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d89e0:	3401      	addeq	r4, #1
   d89e2:	3d01      	subne	r5, #1
   d89e4:	e74e      	b.n	d8884 <__adddf3+0x8c>
   d89e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d89ea:	bf18      	it	ne
   d89ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d89f0:	d029      	beq.n	d8a46 <__adddf3+0x24e>
   d89f2:	ea94 0f05 	teq	r4, r5
   d89f6:	bf08      	it	eq
   d89f8:	ea90 0f02 	teqeq	r0, r2
   d89fc:	d005      	beq.n	d8a0a <__adddf3+0x212>
   d89fe:	ea54 0c00 	orrs.w	ip, r4, r0
   d8a02:	bf04      	itt	eq
   d8a04:	4619      	moveq	r1, r3
   d8a06:	4610      	moveq	r0, r2
   d8a08:	bd30      	pop	{r4, r5, pc}
   d8a0a:	ea91 0f03 	teq	r1, r3
   d8a0e:	bf1e      	ittt	ne
   d8a10:	2100      	movne	r1, #0
   d8a12:	2000      	movne	r0, #0
   d8a14:	bd30      	popne	{r4, r5, pc}
   d8a16:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8a1a:	d105      	bne.n	d8a28 <__adddf3+0x230>
   d8a1c:	0040      	lsls	r0, r0, #1
   d8a1e:	4149      	adcs	r1, r1
   d8a20:	bf28      	it	cs
   d8a22:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8a26:	bd30      	pop	{r4, r5, pc}
   d8a28:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8a2c:	bf3c      	itt	cc
   d8a2e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8a32:	bd30      	popcc	{r4, r5, pc}
   d8a34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8a38:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8a3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8a40:	f04f 0000 	mov.w	r0, #0
   d8a44:	bd30      	pop	{r4, r5, pc}
   d8a46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8a4a:	bf1a      	itte	ne
   d8a4c:	4619      	movne	r1, r3
   d8a4e:	4610      	movne	r0, r2
   d8a50:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8a54:	bf1c      	itt	ne
   d8a56:	460b      	movne	r3, r1
   d8a58:	4602      	movne	r2, r0
   d8a5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8a5e:	bf06      	itte	eq
   d8a60:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8a64:	ea91 0f03 	teqeq	r1, r3
   d8a68:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8a6c:	bd30      	pop	{r4, r5, pc}
   d8a6e:	bf00      	nop

000d8a70 <__aeabi_ui2d>:
   d8a70:	f090 0f00 	teq	r0, #0
   d8a74:	bf04      	itt	eq
   d8a76:	2100      	moveq	r1, #0
   d8a78:	4770      	bxeq	lr
   d8a7a:	b530      	push	{r4, r5, lr}
   d8a7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8a80:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8a84:	f04f 0500 	mov.w	r5, #0
   d8a88:	f04f 0100 	mov.w	r1, #0
   d8a8c:	e750      	b.n	d8930 <__adddf3+0x138>
   d8a8e:	bf00      	nop

000d8a90 <__aeabi_i2d>:
   d8a90:	f090 0f00 	teq	r0, #0
   d8a94:	bf04      	itt	eq
   d8a96:	2100      	moveq	r1, #0
   d8a98:	4770      	bxeq	lr
   d8a9a:	b530      	push	{r4, r5, lr}
   d8a9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8aa0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8aa4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8aa8:	bf48      	it	mi
   d8aaa:	4240      	negmi	r0, r0
   d8aac:	f04f 0100 	mov.w	r1, #0
   d8ab0:	e73e      	b.n	d8930 <__adddf3+0x138>
   d8ab2:	bf00      	nop

000d8ab4 <__aeabi_f2d>:
   d8ab4:	0042      	lsls	r2, r0, #1
   d8ab6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8aba:	ea4f 0131 	mov.w	r1, r1, rrx
   d8abe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8ac2:	bf1f      	itttt	ne
   d8ac4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8ac8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8acc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8ad0:	4770      	bxne	lr
   d8ad2:	f092 0f00 	teq	r2, #0
   d8ad6:	bf14      	ite	ne
   d8ad8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8adc:	4770      	bxeq	lr
   d8ade:	b530      	push	{r4, r5, lr}
   d8ae0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8ae4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8ae8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8aec:	e720      	b.n	d8930 <__adddf3+0x138>
   d8aee:	bf00      	nop

000d8af0 <__aeabi_ul2d>:
   d8af0:	ea50 0201 	orrs.w	r2, r0, r1
   d8af4:	bf08      	it	eq
   d8af6:	4770      	bxeq	lr
   d8af8:	b530      	push	{r4, r5, lr}
   d8afa:	f04f 0500 	mov.w	r5, #0
   d8afe:	e00a      	b.n	d8b16 <__aeabi_l2d+0x16>

000d8b00 <__aeabi_l2d>:
   d8b00:	ea50 0201 	orrs.w	r2, r0, r1
   d8b04:	bf08      	it	eq
   d8b06:	4770      	bxeq	lr
   d8b08:	b530      	push	{r4, r5, lr}
   d8b0a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8b0e:	d502      	bpl.n	d8b16 <__aeabi_l2d+0x16>
   d8b10:	4240      	negs	r0, r0
   d8b12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8b16:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8b1a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8b1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8b22:	f43f aedc 	beq.w	d88de <__adddf3+0xe6>
   d8b26:	f04f 0203 	mov.w	r2, #3
   d8b2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8b2e:	bf18      	it	ne
   d8b30:	3203      	addne	r2, #3
   d8b32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8b36:	bf18      	it	ne
   d8b38:	3203      	addne	r2, #3
   d8b3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8b3e:	f1c2 0320 	rsb	r3, r2, #32
   d8b42:	fa00 fc03 	lsl.w	ip, r0, r3
   d8b46:	fa20 f002 	lsr.w	r0, r0, r2
   d8b4a:	fa01 fe03 	lsl.w	lr, r1, r3
   d8b4e:	ea40 000e 	orr.w	r0, r0, lr
   d8b52:	fa21 f102 	lsr.w	r1, r1, r2
   d8b56:	4414      	add	r4, r2
   d8b58:	e6c1      	b.n	d88de <__adddf3+0xe6>
   d8b5a:	bf00      	nop

000d8b5c <__aeabi_dmul>:
   d8b5c:	b570      	push	{r4, r5, r6, lr}
   d8b5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8b62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8b66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8b6a:	bf1d      	ittte	ne
   d8b6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8b70:	ea94 0f0c 	teqne	r4, ip
   d8b74:	ea95 0f0c 	teqne	r5, ip
   d8b78:	f000 f8de 	bleq	d8d38 <__aeabi_dmul+0x1dc>
   d8b7c:	442c      	add	r4, r5
   d8b7e:	ea81 0603 	eor.w	r6, r1, r3
   d8b82:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8b86:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8b8a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8b8e:	bf18      	it	ne
   d8b90:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8b94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8b98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8b9c:	d038      	beq.n	d8c10 <__aeabi_dmul+0xb4>
   d8b9e:	fba0 ce02 	umull	ip, lr, r0, r2
   d8ba2:	f04f 0500 	mov.w	r5, #0
   d8ba6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8baa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8bae:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8bb2:	f04f 0600 	mov.w	r6, #0
   d8bb6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8bba:	f09c 0f00 	teq	ip, #0
   d8bbe:	bf18      	it	ne
   d8bc0:	f04e 0e01 	orrne.w	lr, lr, #1
   d8bc4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8bc8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8bcc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8bd0:	d204      	bcs.n	d8bdc <__aeabi_dmul+0x80>
   d8bd2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8bd6:	416d      	adcs	r5, r5
   d8bd8:	eb46 0606 	adc.w	r6, r6, r6
   d8bdc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8be0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8be4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8be8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8bec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8bf0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8bf4:	bf88      	it	hi
   d8bf6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8bfa:	d81e      	bhi.n	d8c3a <__aeabi_dmul+0xde>
   d8bfc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8c00:	bf08      	it	eq
   d8c02:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8c06:	f150 0000 	adcs.w	r0, r0, #0
   d8c0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8c0e:	bd70      	pop	{r4, r5, r6, pc}
   d8c10:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8c14:	ea46 0101 	orr.w	r1, r6, r1
   d8c18:	ea40 0002 	orr.w	r0, r0, r2
   d8c1c:	ea81 0103 	eor.w	r1, r1, r3
   d8c20:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8c24:	bfc2      	ittt	gt
   d8c26:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8c2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8c2e:	bd70      	popgt	{r4, r5, r6, pc}
   d8c30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8c34:	f04f 0e00 	mov.w	lr, #0
   d8c38:	3c01      	subs	r4, #1
   d8c3a:	f300 80ab 	bgt.w	d8d94 <__aeabi_dmul+0x238>
   d8c3e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8c42:	bfde      	ittt	le
   d8c44:	2000      	movle	r0, #0
   d8c46:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8c4a:	bd70      	pople	{r4, r5, r6, pc}
   d8c4c:	f1c4 0400 	rsb	r4, r4, #0
   d8c50:	3c20      	subs	r4, #32
   d8c52:	da35      	bge.n	d8cc0 <__aeabi_dmul+0x164>
   d8c54:	340c      	adds	r4, #12
   d8c56:	dc1b      	bgt.n	d8c90 <__aeabi_dmul+0x134>
   d8c58:	f104 0414 	add.w	r4, r4, #20
   d8c5c:	f1c4 0520 	rsb	r5, r4, #32
   d8c60:	fa00 f305 	lsl.w	r3, r0, r5
   d8c64:	fa20 f004 	lsr.w	r0, r0, r4
   d8c68:	fa01 f205 	lsl.w	r2, r1, r5
   d8c6c:	ea40 0002 	orr.w	r0, r0, r2
   d8c70:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8c74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8c78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8c7c:	fa21 f604 	lsr.w	r6, r1, r4
   d8c80:	eb42 0106 	adc.w	r1, r2, r6
   d8c84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8c88:	bf08      	it	eq
   d8c8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8c8e:	bd70      	pop	{r4, r5, r6, pc}
   d8c90:	f1c4 040c 	rsb	r4, r4, #12
   d8c94:	f1c4 0520 	rsb	r5, r4, #32
   d8c98:	fa00 f304 	lsl.w	r3, r0, r4
   d8c9c:	fa20 f005 	lsr.w	r0, r0, r5
   d8ca0:	fa01 f204 	lsl.w	r2, r1, r4
   d8ca4:	ea40 0002 	orr.w	r0, r0, r2
   d8ca8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8cac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8cb0:	f141 0100 	adc.w	r1, r1, #0
   d8cb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8cb8:	bf08      	it	eq
   d8cba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8cbe:	bd70      	pop	{r4, r5, r6, pc}
   d8cc0:	f1c4 0520 	rsb	r5, r4, #32
   d8cc4:	fa00 f205 	lsl.w	r2, r0, r5
   d8cc8:	ea4e 0e02 	orr.w	lr, lr, r2
   d8ccc:	fa20 f304 	lsr.w	r3, r0, r4
   d8cd0:	fa01 f205 	lsl.w	r2, r1, r5
   d8cd4:	ea43 0302 	orr.w	r3, r3, r2
   d8cd8:	fa21 f004 	lsr.w	r0, r1, r4
   d8cdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8ce0:	fa21 f204 	lsr.w	r2, r1, r4
   d8ce4:	ea20 0002 	bic.w	r0, r0, r2
   d8ce8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8cec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8cf0:	bf08      	it	eq
   d8cf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8cf6:	bd70      	pop	{r4, r5, r6, pc}
   d8cf8:	f094 0f00 	teq	r4, #0
   d8cfc:	d10f      	bne.n	d8d1e <__aeabi_dmul+0x1c2>
   d8cfe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8d02:	0040      	lsls	r0, r0, #1
   d8d04:	eb41 0101 	adc.w	r1, r1, r1
   d8d08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8d0c:	bf08      	it	eq
   d8d0e:	3c01      	subeq	r4, #1
   d8d10:	d0f7      	beq.n	d8d02 <__aeabi_dmul+0x1a6>
   d8d12:	ea41 0106 	orr.w	r1, r1, r6
   d8d16:	f095 0f00 	teq	r5, #0
   d8d1a:	bf18      	it	ne
   d8d1c:	4770      	bxne	lr
   d8d1e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8d22:	0052      	lsls	r2, r2, #1
   d8d24:	eb43 0303 	adc.w	r3, r3, r3
   d8d28:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8d2c:	bf08      	it	eq
   d8d2e:	3d01      	subeq	r5, #1
   d8d30:	d0f7      	beq.n	d8d22 <__aeabi_dmul+0x1c6>
   d8d32:	ea43 0306 	orr.w	r3, r3, r6
   d8d36:	4770      	bx	lr
   d8d38:	ea94 0f0c 	teq	r4, ip
   d8d3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8d40:	bf18      	it	ne
   d8d42:	ea95 0f0c 	teqne	r5, ip
   d8d46:	d00c      	beq.n	d8d62 <__aeabi_dmul+0x206>
   d8d48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8d4c:	bf18      	it	ne
   d8d4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8d52:	d1d1      	bne.n	d8cf8 <__aeabi_dmul+0x19c>
   d8d54:	ea81 0103 	eor.w	r1, r1, r3
   d8d58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8d5c:	f04f 0000 	mov.w	r0, #0
   d8d60:	bd70      	pop	{r4, r5, r6, pc}
   d8d62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8d66:	bf06      	itte	eq
   d8d68:	4610      	moveq	r0, r2
   d8d6a:	4619      	moveq	r1, r3
   d8d6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8d70:	d019      	beq.n	d8da6 <__aeabi_dmul+0x24a>
   d8d72:	ea94 0f0c 	teq	r4, ip
   d8d76:	d102      	bne.n	d8d7e <__aeabi_dmul+0x222>
   d8d78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8d7c:	d113      	bne.n	d8da6 <__aeabi_dmul+0x24a>
   d8d7e:	ea95 0f0c 	teq	r5, ip
   d8d82:	d105      	bne.n	d8d90 <__aeabi_dmul+0x234>
   d8d84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8d88:	bf1c      	itt	ne
   d8d8a:	4610      	movne	r0, r2
   d8d8c:	4619      	movne	r1, r3
   d8d8e:	d10a      	bne.n	d8da6 <__aeabi_dmul+0x24a>
   d8d90:	ea81 0103 	eor.w	r1, r1, r3
   d8d94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8d98:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8d9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8da0:	f04f 0000 	mov.w	r0, #0
   d8da4:	bd70      	pop	{r4, r5, r6, pc}
   d8da6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8daa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8dae:	bd70      	pop	{r4, r5, r6, pc}

000d8db0 <__aeabi_ddiv>:
   d8db0:	b570      	push	{r4, r5, r6, lr}
   d8db2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8db6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8dba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8dbe:	bf1d      	ittte	ne
   d8dc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8dc4:	ea94 0f0c 	teqne	r4, ip
   d8dc8:	ea95 0f0c 	teqne	r5, ip
   d8dcc:	f000 f8a7 	bleq	d8f1e <__aeabi_ddiv+0x16e>
   d8dd0:	eba4 0405 	sub.w	r4, r4, r5
   d8dd4:	ea81 0e03 	eor.w	lr, r1, r3
   d8dd8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8ddc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8de0:	f000 8088 	beq.w	d8ef4 <__aeabi_ddiv+0x144>
   d8de4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8de8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8dec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8df0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8df4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8df8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8dfc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8e00:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8e04:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8e08:	429d      	cmp	r5, r3
   d8e0a:	bf08      	it	eq
   d8e0c:	4296      	cmpeq	r6, r2
   d8e0e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8e12:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8e16:	d202      	bcs.n	d8e1e <__aeabi_ddiv+0x6e>
   d8e18:	085b      	lsrs	r3, r3, #1
   d8e1a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e1e:	1ab6      	subs	r6, r6, r2
   d8e20:	eb65 0503 	sbc.w	r5, r5, r3
   d8e24:	085b      	lsrs	r3, r3, #1
   d8e26:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e2a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8e2e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8e32:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e36:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e3a:	bf22      	ittt	cs
   d8e3c:	1ab6      	subcs	r6, r6, r2
   d8e3e:	4675      	movcs	r5, lr
   d8e40:	ea40 000c 	orrcs.w	r0, r0, ip
   d8e44:	085b      	lsrs	r3, r3, #1
   d8e46:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e4a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e52:	bf22      	ittt	cs
   d8e54:	1ab6      	subcs	r6, r6, r2
   d8e56:	4675      	movcs	r5, lr
   d8e58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8e5c:	085b      	lsrs	r3, r3, #1
   d8e5e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e62:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e66:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e6a:	bf22      	ittt	cs
   d8e6c:	1ab6      	subcs	r6, r6, r2
   d8e6e:	4675      	movcs	r5, lr
   d8e70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8e74:	085b      	lsrs	r3, r3, #1
   d8e76:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e7a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e82:	bf22      	ittt	cs
   d8e84:	1ab6      	subcs	r6, r6, r2
   d8e86:	4675      	movcs	r5, lr
   d8e88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8e8c:	ea55 0e06 	orrs.w	lr, r5, r6
   d8e90:	d018      	beq.n	d8ec4 <__aeabi_ddiv+0x114>
   d8e92:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8e96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8e9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8e9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8ea2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8ea6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8eaa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8eae:	d1c0      	bne.n	d8e32 <__aeabi_ddiv+0x82>
   d8eb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8eb4:	d10b      	bne.n	d8ece <__aeabi_ddiv+0x11e>
   d8eb6:	ea41 0100 	orr.w	r1, r1, r0
   d8eba:	f04f 0000 	mov.w	r0, #0
   d8ebe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8ec2:	e7b6      	b.n	d8e32 <__aeabi_ddiv+0x82>
   d8ec4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8ec8:	bf04      	itt	eq
   d8eca:	4301      	orreq	r1, r0
   d8ecc:	2000      	moveq	r0, #0
   d8ece:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8ed2:	bf88      	it	hi
   d8ed4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8ed8:	f63f aeaf 	bhi.w	d8c3a <__aeabi_dmul+0xde>
   d8edc:	ebb5 0c03 	subs.w	ip, r5, r3
   d8ee0:	bf04      	itt	eq
   d8ee2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8ee6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8eea:	f150 0000 	adcs.w	r0, r0, #0
   d8eee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8ef2:	bd70      	pop	{r4, r5, r6, pc}
   d8ef4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8ef8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8efc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8f00:	bfc2      	ittt	gt
   d8f02:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8f06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8f0a:	bd70      	popgt	{r4, r5, r6, pc}
   d8f0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8f10:	f04f 0e00 	mov.w	lr, #0
   d8f14:	3c01      	subs	r4, #1
   d8f16:	e690      	b.n	d8c3a <__aeabi_dmul+0xde>
   d8f18:	ea45 0e06 	orr.w	lr, r5, r6
   d8f1c:	e68d      	b.n	d8c3a <__aeabi_dmul+0xde>
   d8f1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8f22:	ea94 0f0c 	teq	r4, ip
   d8f26:	bf08      	it	eq
   d8f28:	ea95 0f0c 	teqeq	r5, ip
   d8f2c:	f43f af3b 	beq.w	d8da6 <__aeabi_dmul+0x24a>
   d8f30:	ea94 0f0c 	teq	r4, ip
   d8f34:	d10a      	bne.n	d8f4c <__aeabi_ddiv+0x19c>
   d8f36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8f3a:	f47f af34 	bne.w	d8da6 <__aeabi_dmul+0x24a>
   d8f3e:	ea95 0f0c 	teq	r5, ip
   d8f42:	f47f af25 	bne.w	d8d90 <__aeabi_dmul+0x234>
   d8f46:	4610      	mov	r0, r2
   d8f48:	4619      	mov	r1, r3
   d8f4a:	e72c      	b.n	d8da6 <__aeabi_dmul+0x24a>
   d8f4c:	ea95 0f0c 	teq	r5, ip
   d8f50:	d106      	bne.n	d8f60 <__aeabi_ddiv+0x1b0>
   d8f52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8f56:	f43f aefd 	beq.w	d8d54 <__aeabi_dmul+0x1f8>
   d8f5a:	4610      	mov	r0, r2
   d8f5c:	4619      	mov	r1, r3
   d8f5e:	e722      	b.n	d8da6 <__aeabi_dmul+0x24a>
   d8f60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8f64:	bf18      	it	ne
   d8f66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8f6a:	f47f aec5 	bne.w	d8cf8 <__aeabi_dmul+0x19c>
   d8f6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8f72:	f47f af0d 	bne.w	d8d90 <__aeabi_dmul+0x234>
   d8f76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8f7a:	f47f aeeb 	bne.w	d8d54 <__aeabi_dmul+0x1f8>
   d8f7e:	e712      	b.n	d8da6 <__aeabi_dmul+0x24a>

000d8f80 <__gedf2>:
   d8f80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8f84:	e006      	b.n	d8f94 <__cmpdf2+0x4>
   d8f86:	bf00      	nop

000d8f88 <__ledf2>:
   d8f88:	f04f 0c01 	mov.w	ip, #1
   d8f8c:	e002      	b.n	d8f94 <__cmpdf2+0x4>
   d8f8e:	bf00      	nop

000d8f90 <__cmpdf2>:
   d8f90:	f04f 0c01 	mov.w	ip, #1
   d8f94:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8f98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8fa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8fa4:	bf18      	it	ne
   d8fa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8faa:	d01b      	beq.n	d8fe4 <__cmpdf2+0x54>
   d8fac:	b001      	add	sp, #4
   d8fae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8fb2:	bf0c      	ite	eq
   d8fb4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8fb8:	ea91 0f03 	teqne	r1, r3
   d8fbc:	bf02      	ittt	eq
   d8fbe:	ea90 0f02 	teqeq	r0, r2
   d8fc2:	2000      	moveq	r0, #0
   d8fc4:	4770      	bxeq	lr
   d8fc6:	f110 0f00 	cmn.w	r0, #0
   d8fca:	ea91 0f03 	teq	r1, r3
   d8fce:	bf58      	it	pl
   d8fd0:	4299      	cmppl	r1, r3
   d8fd2:	bf08      	it	eq
   d8fd4:	4290      	cmpeq	r0, r2
   d8fd6:	bf2c      	ite	cs
   d8fd8:	17d8      	asrcs	r0, r3, #31
   d8fda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8fde:	f040 0001 	orr.w	r0, r0, #1
   d8fe2:	4770      	bx	lr
   d8fe4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8fec:	d102      	bne.n	d8ff4 <__cmpdf2+0x64>
   d8fee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8ff2:	d107      	bne.n	d9004 <__cmpdf2+0x74>
   d8ff4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8ff8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8ffc:	d1d6      	bne.n	d8fac <__cmpdf2+0x1c>
   d8ffe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9002:	d0d3      	beq.n	d8fac <__cmpdf2+0x1c>
   d9004:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9008:	4770      	bx	lr
   d900a:	bf00      	nop

000d900c <__aeabi_cdrcmple>:
   d900c:	4684      	mov	ip, r0
   d900e:	4610      	mov	r0, r2
   d9010:	4662      	mov	r2, ip
   d9012:	468c      	mov	ip, r1
   d9014:	4619      	mov	r1, r3
   d9016:	4663      	mov	r3, ip
   d9018:	e000      	b.n	d901c <__aeabi_cdcmpeq>
   d901a:	bf00      	nop

000d901c <__aeabi_cdcmpeq>:
   d901c:	b501      	push	{r0, lr}
   d901e:	f7ff ffb7 	bl	d8f90 <__cmpdf2>
   d9022:	2800      	cmp	r0, #0
   d9024:	bf48      	it	mi
   d9026:	f110 0f00 	cmnmi.w	r0, #0
   d902a:	bd01      	pop	{r0, pc}

000d902c <__aeabi_dcmpeq>:
   d902c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9030:	f7ff fff4 	bl	d901c <__aeabi_cdcmpeq>
   d9034:	bf0c      	ite	eq
   d9036:	2001      	moveq	r0, #1
   d9038:	2000      	movne	r0, #0
   d903a:	f85d fb08 	ldr.w	pc, [sp], #8
   d903e:	bf00      	nop

000d9040 <__aeabi_dcmplt>:
   d9040:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9044:	f7ff ffea 	bl	d901c <__aeabi_cdcmpeq>
   d9048:	bf34      	ite	cc
   d904a:	2001      	movcc	r0, #1
   d904c:	2000      	movcs	r0, #0
   d904e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9052:	bf00      	nop

000d9054 <__aeabi_dcmple>:
   d9054:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9058:	f7ff ffe0 	bl	d901c <__aeabi_cdcmpeq>
   d905c:	bf94      	ite	ls
   d905e:	2001      	movls	r0, #1
   d9060:	2000      	movhi	r0, #0
   d9062:	f85d fb08 	ldr.w	pc, [sp], #8
   d9066:	bf00      	nop

000d9068 <__aeabi_dcmpge>:
   d9068:	f84d ed08 	str.w	lr, [sp, #-8]!
   d906c:	f7ff ffce 	bl	d900c <__aeabi_cdrcmple>
   d9070:	bf94      	ite	ls
   d9072:	2001      	movls	r0, #1
   d9074:	2000      	movhi	r0, #0
   d9076:	f85d fb08 	ldr.w	pc, [sp], #8
   d907a:	bf00      	nop

000d907c <__aeabi_dcmpgt>:
   d907c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9080:	f7ff ffc4 	bl	d900c <__aeabi_cdrcmple>
   d9084:	bf34      	ite	cc
   d9086:	2001      	movcc	r0, #1
   d9088:	2000      	movcs	r0, #0
   d908a:	f85d fb08 	ldr.w	pc, [sp], #8
   d908e:	bf00      	nop

000d9090 <__aeabi_dcmpun>:
   d9090:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9098:	d102      	bne.n	d90a0 <__aeabi_dcmpun+0x10>
   d909a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d909e:	d10a      	bne.n	d90b6 <__aeabi_dcmpun+0x26>
   d90a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d90a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d90a8:	d102      	bne.n	d90b0 <__aeabi_dcmpun+0x20>
   d90aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d90ae:	d102      	bne.n	d90b6 <__aeabi_dcmpun+0x26>
   d90b0:	f04f 0000 	mov.w	r0, #0
   d90b4:	4770      	bx	lr
   d90b6:	f04f 0001 	mov.w	r0, #1
   d90ba:	4770      	bx	lr

000d90bc <__aeabi_d2iz>:
   d90bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d90c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d90c4:	d215      	bcs.n	d90f2 <__aeabi_d2iz+0x36>
   d90c6:	d511      	bpl.n	d90ec <__aeabi_d2iz+0x30>
   d90c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d90cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d90d0:	d912      	bls.n	d90f8 <__aeabi_d2iz+0x3c>
   d90d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d90d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d90da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d90de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d90e2:	fa23 f002 	lsr.w	r0, r3, r2
   d90e6:	bf18      	it	ne
   d90e8:	4240      	negne	r0, r0
   d90ea:	4770      	bx	lr
   d90ec:	f04f 0000 	mov.w	r0, #0
   d90f0:	4770      	bx	lr
   d90f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d90f6:	d105      	bne.n	d9104 <__aeabi_d2iz+0x48>
   d90f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d90fc:	bf08      	it	eq
   d90fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9102:	4770      	bx	lr
   d9104:	f04f 0000 	mov.w	r0, #0
   d9108:	4770      	bx	lr
   d910a:	bf00      	nop

000d910c <__aeabi_d2uiz>:
   d910c:	004a      	lsls	r2, r1, #1
   d910e:	d211      	bcs.n	d9134 <__aeabi_d2uiz+0x28>
   d9110:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9114:	d211      	bcs.n	d913a <__aeabi_d2uiz+0x2e>
   d9116:	d50d      	bpl.n	d9134 <__aeabi_d2uiz+0x28>
   d9118:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d911c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9120:	d40e      	bmi.n	d9140 <__aeabi_d2uiz+0x34>
   d9122:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9126:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d912a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d912e:	fa23 f002 	lsr.w	r0, r3, r2
   d9132:	4770      	bx	lr
   d9134:	f04f 0000 	mov.w	r0, #0
   d9138:	4770      	bx	lr
   d913a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d913e:	d102      	bne.n	d9146 <__aeabi_d2uiz+0x3a>
   d9140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9144:	4770      	bx	lr
   d9146:	f04f 0000 	mov.w	r0, #0
   d914a:	4770      	bx	lr

000d914c <__aeabi_d2f>:
   d914c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9150:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9154:	bf24      	itt	cs
   d9156:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d915a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d915e:	d90d      	bls.n	d917c <__aeabi_d2f+0x30>
   d9160:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9164:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9168:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d916c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9170:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9174:	bf08      	it	eq
   d9176:	f020 0001 	biceq.w	r0, r0, #1
   d917a:	4770      	bx	lr
   d917c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9180:	d121      	bne.n	d91c6 <__aeabi_d2f+0x7a>
   d9182:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9186:	bfbc      	itt	lt
   d9188:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d918c:	4770      	bxlt	lr
   d918e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9192:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9196:	f1c2 0218 	rsb	r2, r2, #24
   d919a:	f1c2 0c20 	rsb	ip, r2, #32
   d919e:	fa10 f30c 	lsls.w	r3, r0, ip
   d91a2:	fa20 f002 	lsr.w	r0, r0, r2
   d91a6:	bf18      	it	ne
   d91a8:	f040 0001 	orrne.w	r0, r0, #1
   d91ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d91b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d91b4:	fa03 fc0c 	lsl.w	ip, r3, ip
   d91b8:	ea40 000c 	orr.w	r0, r0, ip
   d91bc:	fa23 f302 	lsr.w	r3, r3, r2
   d91c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d91c4:	e7cc      	b.n	d9160 <__aeabi_d2f+0x14>
   d91c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d91ca:	d107      	bne.n	d91dc <__aeabi_d2f+0x90>
   d91cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d91d0:	bf1e      	ittt	ne
   d91d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d91d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d91da:	4770      	bxne	lr
   d91dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d91e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d91e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d91e8:	4770      	bx	lr
   d91ea:	bf00      	nop

000d91ec <asctime>:
   d91ec:	4b09      	ldr	r3, [pc, #36]	; (d9214 <asctime+0x28>)
   d91ee:	b570      	push	{r4, r5, r6, lr}
   d91f0:	681c      	ldr	r4, [r3, #0]
   d91f2:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d91f4:	4606      	mov	r6, r0
   d91f6:	b93d      	cbnz	r5, d9208 <asctime+0x1c>
   d91f8:	201a      	movs	r0, #26
   d91fa:	f7fd fb39 	bl	d6870 <malloc>
   d91fe:	221a      	movs	r2, #26
   d9200:	6420      	str	r0, [r4, #64]	; 0x40
   d9202:	4629      	mov	r1, r5
   d9204:	f000 f962 	bl	d94cc <memset>
   d9208:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d920a:	4630      	mov	r0, r6
   d920c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d9210:	f000 b802 	b.w	d9218 <asctime_r>
   d9214:	2003e10c 	.word	0x2003e10c

000d9218 <asctime_r>:
   d9218:	b510      	push	{r4, lr}
   d921a:	460c      	mov	r4, r1
   d921c:	6941      	ldr	r1, [r0, #20]
   d921e:	6903      	ldr	r3, [r0, #16]
   d9220:	6982      	ldr	r2, [r0, #24]
   d9222:	b086      	sub	sp, #24
   d9224:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d9228:	9104      	str	r1, [sp, #16]
   d922a:	6801      	ldr	r1, [r0, #0]
   d922c:	9103      	str	r1, [sp, #12]
   d922e:	6841      	ldr	r1, [r0, #4]
   d9230:	9102      	str	r1, [sp, #8]
   d9232:	6881      	ldr	r1, [r0, #8]
   d9234:	9101      	str	r1, [sp, #4]
   d9236:	68c1      	ldr	r1, [r0, #12]
   d9238:	9100      	str	r1, [sp, #0]
   d923a:	4907      	ldr	r1, [pc, #28]	; (d9258 <asctime_r+0x40>)
   d923c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d9240:	440b      	add	r3, r1
   d9242:	4906      	ldr	r1, [pc, #24]	; (d925c <asctime_r+0x44>)
   d9244:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d9248:	440a      	add	r2, r1
   d924a:	4620      	mov	r0, r4
   d924c:	4904      	ldr	r1, [pc, #16]	; (d9260 <asctime_r+0x48>)
   d924e:	f7fd fb27 	bl	d68a0 <siprintf>
   d9252:	4620      	mov	r0, r4
   d9254:	b006      	add	sp, #24
   d9256:	bd10      	pop	{r4, pc}
   d9258:	000dc135 	.word	0x000dc135
   d925c:	000dc120 	.word	0x000dc120
   d9260:	000dc159 	.word	0x000dc159

000d9264 <atoi>:
   d9264:	220a      	movs	r2, #10
   d9266:	2100      	movs	r1, #0
   d9268:	f001 b880 	b.w	da36c <strtol>

000d926c <__cxa_atexit>:
   d926c:	b510      	push	{r4, lr}
   d926e:	4c05      	ldr	r4, [pc, #20]	; (d9284 <__cxa_atexit+0x18>)
   d9270:	4613      	mov	r3, r2
   d9272:	b12c      	cbz	r4, d9280 <__cxa_atexit+0x14>
   d9274:	460a      	mov	r2, r1
   d9276:	4601      	mov	r1, r0
   d9278:	2002      	movs	r0, #2
   d927a:	f3af 8000 	nop.w
   d927e:	bd10      	pop	{r4, pc}
   d9280:	4620      	mov	r0, r4
   d9282:	bd10      	pop	{r4, pc}
   d9284:	00000000 	.word	0x00000000

000d9288 <localtime>:
   d9288:	b538      	push	{r3, r4, r5, lr}
   d928a:	4b07      	ldr	r3, [pc, #28]	; (d92a8 <localtime+0x20>)
   d928c:	681c      	ldr	r4, [r3, #0]
   d928e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9290:	4605      	mov	r5, r0
   d9292:	b91b      	cbnz	r3, d929c <localtime+0x14>
   d9294:	2024      	movs	r0, #36	; 0x24
   d9296:	f7fd faeb 	bl	d6870 <malloc>
   d929a:	63e0      	str	r0, [r4, #60]	; 0x3c
   d929c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d929e:	4628      	mov	r0, r5
   d92a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d92a4:	f000 b802 	b.w	d92ac <localtime_r>
   d92a8:	2003e10c 	.word	0x2003e10c

000d92ac <localtime_r>:
   d92ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d92b0:	460c      	mov	r4, r1
   d92b2:	4680      	mov	r8, r0
   d92b4:	f001 fe7e 	bl	dafb4 <__gettzinfo>
   d92b8:	4621      	mov	r1, r4
   d92ba:	4607      	mov	r7, r0
   d92bc:	4640      	mov	r0, r8
   d92be:	f001 fe7d 	bl	dafbc <gmtime_r>
   d92c2:	6946      	ldr	r6, [r0, #20]
   d92c4:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d92c8:	07b3      	lsls	r3, r6, #30
   d92ca:	4604      	mov	r4, r0
   d92cc:	d105      	bne.n	d92da <localtime_r+0x2e>
   d92ce:	2264      	movs	r2, #100	; 0x64
   d92d0:	fb96 f3f2 	sdiv	r3, r6, r2
   d92d4:	fb02 6313 	mls	r3, r2, r3, r6
   d92d8:	b94b      	cbnz	r3, d92ee <localtime_r+0x42>
   d92da:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d92de:	fb96 f3f5 	sdiv	r3, r6, r5
   d92e2:	fb05 6513 	mls	r5, r5, r3, r6
   d92e6:	fab5 f385 	clz	r3, r5
   d92ea:	095b      	lsrs	r3, r3, #5
   d92ec:	e000      	b.n	d92f0 <localtime_r+0x44>
   d92ee:	2301      	movs	r3, #1
   d92f0:	4a5f      	ldr	r2, [pc, #380]	; (d9470 <localtime_r+0x1c4>)
   d92f2:	2530      	movs	r5, #48	; 0x30
   d92f4:	fb05 2503 	mla	r5, r5, r3, r2
   d92f8:	f001 f972 	bl	da5e0 <__tz_lock>
   d92fc:	f001 f972 	bl	da5e4 <_tzset_unlocked>
   d9300:	4b5c      	ldr	r3, [pc, #368]	; (d9474 <localtime_r+0x1c8>)
   d9302:	681b      	ldr	r3, [r3, #0]
   d9304:	b1f3      	cbz	r3, d9344 <localtime_r+0x98>
   d9306:	687b      	ldr	r3, [r7, #4]
   d9308:	429e      	cmp	r6, r3
   d930a:	d105      	bne.n	d9318 <localtime_r+0x6c>
   d930c:	6839      	ldr	r1, [r7, #0]
   d930e:	f8d8 3000 	ldr.w	r3, [r8]
   d9312:	69fa      	ldr	r2, [r7, #28]
   d9314:	b941      	cbnz	r1, d9328 <localtime_r+0x7c>
   d9316:	e00a      	b.n	d932e <localtime_r+0x82>
   d9318:	4630      	mov	r0, r6
   d931a:	f001 f8b9 	bl	da490 <__tzcalc_limits>
   d931e:	2800      	cmp	r0, #0
   d9320:	d1f4      	bne.n	d930c <localtime_r+0x60>
   d9322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9326:	e00d      	b.n	d9344 <localtime_r+0x98>
   d9328:	4293      	cmp	r3, r2
   d932a:	db08      	blt.n	d933e <localtime_r+0x92>
   d932c:	e001      	b.n	d9332 <localtime_r+0x86>
   d932e:	4293      	cmp	r3, r2
   d9330:	da07      	bge.n	d9342 <localtime_r+0x96>
   d9332:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d9334:	4293      	cmp	r3, r2
   d9336:	bfac      	ite	ge
   d9338:	2300      	movge	r3, #0
   d933a:	2301      	movlt	r3, #1
   d933c:	e002      	b.n	d9344 <localtime_r+0x98>
   d933e:	2300      	movs	r3, #0
   d9340:	e000      	b.n	d9344 <localtime_r+0x98>
   d9342:	2301      	movs	r3, #1
   d9344:	6223      	str	r3, [r4, #32]
   d9346:	6a23      	ldr	r3, [r4, #32]
   d9348:	2b01      	cmp	r3, #1
   d934a:	bf0c      	ite	eq
   d934c:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d934e:	6a39      	ldrne	r1, [r7, #32]
   d9350:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9354:	203c      	movs	r0, #60	; 0x3c
   d9356:	fb91 f6f3 	sdiv	r6, r1, r3
   d935a:	fb03 1316 	mls	r3, r3, r6, r1
   d935e:	6861      	ldr	r1, [r4, #4]
   d9360:	fb93 f2f0 	sdiv	r2, r3, r0
   d9364:	fb00 3012 	mls	r0, r0, r2, r3
   d9368:	6823      	ldr	r3, [r4, #0]
   d936a:	1a89      	subs	r1, r1, r2
   d936c:	68a2      	ldr	r2, [r4, #8]
   d936e:	6061      	str	r1, [r4, #4]
   d9370:	1a1b      	subs	r3, r3, r0
   d9372:	1b92      	subs	r2, r2, r6
   d9374:	2b3b      	cmp	r3, #59	; 0x3b
   d9376:	6023      	str	r3, [r4, #0]
   d9378:	60a2      	str	r2, [r4, #8]
   d937a:	dd03      	ble.n	d9384 <localtime_r+0xd8>
   d937c:	3101      	adds	r1, #1
   d937e:	6061      	str	r1, [r4, #4]
   d9380:	3b3c      	subs	r3, #60	; 0x3c
   d9382:	e004      	b.n	d938e <localtime_r+0xe2>
   d9384:	2b00      	cmp	r3, #0
   d9386:	da03      	bge.n	d9390 <localtime_r+0xe4>
   d9388:	3901      	subs	r1, #1
   d938a:	6061      	str	r1, [r4, #4]
   d938c:	333c      	adds	r3, #60	; 0x3c
   d938e:	6023      	str	r3, [r4, #0]
   d9390:	6863      	ldr	r3, [r4, #4]
   d9392:	2b3b      	cmp	r3, #59	; 0x3b
   d9394:	dd03      	ble.n	d939e <localtime_r+0xf2>
   d9396:	3201      	adds	r2, #1
   d9398:	60a2      	str	r2, [r4, #8]
   d939a:	3b3c      	subs	r3, #60	; 0x3c
   d939c:	e004      	b.n	d93a8 <localtime_r+0xfc>
   d939e:	2b00      	cmp	r3, #0
   d93a0:	da03      	bge.n	d93aa <localtime_r+0xfe>
   d93a2:	3a01      	subs	r2, #1
   d93a4:	60a2      	str	r2, [r4, #8]
   d93a6:	333c      	adds	r3, #60	; 0x3c
   d93a8:	6063      	str	r3, [r4, #4]
   d93aa:	68a3      	ldr	r3, [r4, #8]
   d93ac:	2b17      	cmp	r3, #23
   d93ae:	dd22      	ble.n	d93f6 <localtime_r+0x14a>
   d93b0:	69e2      	ldr	r2, [r4, #28]
   d93b2:	3201      	adds	r2, #1
   d93b4:	61e2      	str	r2, [r4, #28]
   d93b6:	69a2      	ldr	r2, [r4, #24]
   d93b8:	3201      	adds	r2, #1
   d93ba:	2a06      	cmp	r2, #6
   d93bc:	bfc8      	it	gt
   d93be:	2200      	movgt	r2, #0
   d93c0:	61a2      	str	r2, [r4, #24]
   d93c2:	68e2      	ldr	r2, [r4, #12]
   d93c4:	3b18      	subs	r3, #24
   d93c6:	3201      	adds	r2, #1
   d93c8:	60a3      	str	r3, [r4, #8]
   d93ca:	6923      	ldr	r3, [r4, #16]
   d93cc:	60e2      	str	r2, [r4, #12]
   d93ce:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d93d2:	428a      	cmp	r2, r1
   d93d4:	dd46      	ble.n	d9464 <localtime_r+0x1b8>
   d93d6:	3301      	adds	r3, #1
   d93d8:	2b0c      	cmp	r3, #12
   d93da:	bf0c      	ite	eq
   d93dc:	6963      	ldreq	r3, [r4, #20]
   d93de:	6123      	strne	r3, [r4, #16]
   d93e0:	eba2 0201 	sub.w	r2, r2, r1
   d93e4:	60e2      	str	r2, [r4, #12]
   d93e6:	bf01      	itttt	eq
   d93e8:	3301      	addeq	r3, #1
   d93ea:	2200      	moveq	r2, #0
   d93ec:	6122      	streq	r2, [r4, #16]
   d93ee:	6163      	streq	r3, [r4, #20]
   d93f0:	bf08      	it	eq
   d93f2:	61e2      	streq	r2, [r4, #28]
   d93f4:	e036      	b.n	d9464 <localtime_r+0x1b8>
   d93f6:	2b00      	cmp	r3, #0
   d93f8:	da34      	bge.n	d9464 <localtime_r+0x1b8>
   d93fa:	69e2      	ldr	r2, [r4, #28]
   d93fc:	3a01      	subs	r2, #1
   d93fe:	61e2      	str	r2, [r4, #28]
   d9400:	69a2      	ldr	r2, [r4, #24]
   d9402:	3a01      	subs	r2, #1
   d9404:	bf48      	it	mi
   d9406:	2206      	movmi	r2, #6
   d9408:	61a2      	str	r2, [r4, #24]
   d940a:	68e2      	ldr	r2, [r4, #12]
   d940c:	3318      	adds	r3, #24
   d940e:	3a01      	subs	r2, #1
   d9410:	60e2      	str	r2, [r4, #12]
   d9412:	60a3      	str	r3, [r4, #8]
   d9414:	bb32      	cbnz	r2, d9464 <localtime_r+0x1b8>
   d9416:	6923      	ldr	r3, [r4, #16]
   d9418:	3b01      	subs	r3, #1
   d941a:	d401      	bmi.n	d9420 <localtime_r+0x174>
   d941c:	6123      	str	r3, [r4, #16]
   d941e:	e01d      	b.n	d945c <localtime_r+0x1b0>
   d9420:	230b      	movs	r3, #11
   d9422:	6123      	str	r3, [r4, #16]
   d9424:	6963      	ldr	r3, [r4, #20]
   d9426:	1e5a      	subs	r2, r3, #1
   d9428:	f012 0f03 	tst.w	r2, #3
   d942c:	6162      	str	r2, [r4, #20]
   d942e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d9432:	d105      	bne.n	d9440 <localtime_r+0x194>
   d9434:	2164      	movs	r1, #100	; 0x64
   d9436:	fb93 f2f1 	sdiv	r2, r3, r1
   d943a:	fb01 3212 	mls	r2, r1, r2, r3
   d943e:	b94a      	cbnz	r2, d9454 <localtime_r+0x1a8>
   d9440:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d9444:	fb93 f2f1 	sdiv	r2, r3, r1
   d9448:	fb01 3312 	mls	r3, r1, r2, r3
   d944c:	fab3 f383 	clz	r3, r3
   d9450:	095b      	lsrs	r3, r3, #5
   d9452:	e000      	b.n	d9456 <localtime_r+0x1aa>
   d9454:	2301      	movs	r3, #1
   d9456:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d945a:	61e3      	str	r3, [r4, #28]
   d945c:	6923      	ldr	r3, [r4, #16]
   d945e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d9462:	60e3      	str	r3, [r4, #12]
   d9464:	f001 f8bd 	bl	da5e2 <__tz_unlock>
   d9468:	4620      	mov	r0, r4
   d946a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d946e:	bf00      	nop
   d9470:	000dc2e8 	.word	0x000dc2e8
   d9474:	2003e7e4 	.word	0x2003e7e4

000d9478 <_localeconv_r>:
   d9478:	4800      	ldr	r0, [pc, #0]	; (d947c <_localeconv_r+0x4>)
   d947a:	4770      	bx	lr
   d947c:	2003e110 	.word	0x2003e110

000d9480 <memcpy>:
   d9480:	b510      	push	{r4, lr}
   d9482:	1e43      	subs	r3, r0, #1
   d9484:	440a      	add	r2, r1
   d9486:	4291      	cmp	r1, r2
   d9488:	d004      	beq.n	d9494 <memcpy+0x14>
   d948a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d948e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9492:	e7f8      	b.n	d9486 <memcpy+0x6>
   d9494:	bd10      	pop	{r4, pc}

000d9496 <memmove>:
   d9496:	4288      	cmp	r0, r1
   d9498:	b510      	push	{r4, lr}
   d949a:	eb01 0302 	add.w	r3, r1, r2
   d949e:	d801      	bhi.n	d94a4 <memmove+0xe>
   d94a0:	1e42      	subs	r2, r0, #1
   d94a2:	e00b      	b.n	d94bc <memmove+0x26>
   d94a4:	4298      	cmp	r0, r3
   d94a6:	d2fb      	bcs.n	d94a0 <memmove+0xa>
   d94a8:	1881      	adds	r1, r0, r2
   d94aa:	1ad2      	subs	r2, r2, r3
   d94ac:	42d3      	cmn	r3, r2
   d94ae:	d004      	beq.n	d94ba <memmove+0x24>
   d94b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d94b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d94b8:	e7f8      	b.n	d94ac <memmove+0x16>
   d94ba:	bd10      	pop	{r4, pc}
   d94bc:	4299      	cmp	r1, r3
   d94be:	d004      	beq.n	d94ca <memmove+0x34>
   d94c0:	f811 4b01 	ldrb.w	r4, [r1], #1
   d94c4:	f802 4f01 	strb.w	r4, [r2, #1]!
   d94c8:	e7f8      	b.n	d94bc <memmove+0x26>
   d94ca:	bd10      	pop	{r4, pc}

000d94cc <memset>:
   d94cc:	4402      	add	r2, r0
   d94ce:	4603      	mov	r3, r0
   d94d0:	4293      	cmp	r3, r2
   d94d2:	d002      	beq.n	d94da <memset+0xe>
   d94d4:	f803 1b01 	strb.w	r1, [r3], #1
   d94d8:	e7fa      	b.n	d94d0 <memset+0x4>
   d94da:	4770      	bx	lr

000d94dc <srand>:
   d94dc:	b538      	push	{r3, r4, r5, lr}
   d94de:	4b12      	ldr	r3, [pc, #72]	; (d9528 <srand+0x4c>)
   d94e0:	681c      	ldr	r4, [r3, #0]
   d94e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d94e4:	4605      	mov	r5, r0
   d94e6:	b9d3      	cbnz	r3, d951e <srand+0x42>
   d94e8:	2018      	movs	r0, #24
   d94ea:	f7fd f9c1 	bl	d6870 <malloc>
   d94ee:	f243 330e 	movw	r3, #13070	; 0x330e
   d94f2:	63a0      	str	r0, [r4, #56]	; 0x38
   d94f4:	8003      	strh	r3, [r0, #0]
   d94f6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d94fa:	8043      	strh	r3, [r0, #2]
   d94fc:	f241 2334 	movw	r3, #4660	; 0x1234
   d9500:	8083      	strh	r3, [r0, #4]
   d9502:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9506:	80c3      	strh	r3, [r0, #6]
   d9508:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d950c:	8103      	strh	r3, [r0, #8]
   d950e:	2305      	movs	r3, #5
   d9510:	8143      	strh	r3, [r0, #10]
   d9512:	230b      	movs	r3, #11
   d9514:	8183      	strh	r3, [r0, #12]
   d9516:	2201      	movs	r2, #1
   d9518:	2300      	movs	r3, #0
   d951a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d951e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9520:	2200      	movs	r2, #0
   d9522:	611d      	str	r5, [r3, #16]
   d9524:	615a      	str	r2, [r3, #20]
   d9526:	bd38      	pop	{r3, r4, r5, pc}
   d9528:	2003e10c 	.word	0x2003e10c

000d952c <strcmp>:
   d952c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9530:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9534:	2a01      	cmp	r2, #1
   d9536:	bf28      	it	cs
   d9538:	429a      	cmpcs	r2, r3
   d953a:	d0f7      	beq.n	d952c <strcmp>
   d953c:	1ad0      	subs	r0, r2, r3
   d953e:	4770      	bx	lr

000d9540 <strcpy>:
   d9540:	4603      	mov	r3, r0
   d9542:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9546:	f803 2b01 	strb.w	r2, [r3], #1
   d954a:	2a00      	cmp	r2, #0
   d954c:	d1f9      	bne.n	d9542 <strcpy+0x2>
   d954e:	4770      	bx	lr

000d9550 <strdup>:
   d9550:	4b02      	ldr	r3, [pc, #8]	; (d955c <strdup+0xc>)
   d9552:	4601      	mov	r1, r0
   d9554:	6818      	ldr	r0, [r3, #0]
   d9556:	f000 b803 	b.w	d9560 <_strdup_r>
   d955a:	bf00      	nop
   d955c:	2003e10c 	.word	0x2003e10c

000d9560 <_strdup_r>:
   d9560:	b570      	push	{r4, r5, r6, lr}
   d9562:	4606      	mov	r6, r0
   d9564:	4608      	mov	r0, r1
   d9566:	460c      	mov	r4, r1
   d9568:	f000 f80d 	bl	d9586 <strlen>
   d956c:	1c45      	adds	r5, r0, #1
   d956e:	4629      	mov	r1, r5
   d9570:	4630      	mov	r0, r6
   d9572:	f7fd f9b5 	bl	d68e0 <_malloc_r>
   d9576:	4606      	mov	r6, r0
   d9578:	b118      	cbz	r0, d9582 <_strdup_r+0x22>
   d957a:	462a      	mov	r2, r5
   d957c:	4621      	mov	r1, r4
   d957e:	f7ff ff7f 	bl	d9480 <memcpy>
   d9582:	4630      	mov	r0, r6
   d9584:	bd70      	pop	{r4, r5, r6, pc}

000d9586 <strlen>:
   d9586:	4603      	mov	r3, r0
   d9588:	f813 2b01 	ldrb.w	r2, [r3], #1
   d958c:	2a00      	cmp	r2, #0
   d958e:	d1fb      	bne.n	d9588 <strlen+0x2>
   d9590:	1a18      	subs	r0, r3, r0
   d9592:	3801      	subs	r0, #1
   d9594:	4770      	bx	lr

000d9596 <strncmp>:
   d9596:	b530      	push	{r4, r5, lr}
   d9598:	b182      	cbz	r2, d95bc <strncmp+0x26>
   d959a:	1e45      	subs	r5, r0, #1
   d959c:	3901      	subs	r1, #1
   d959e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d95a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d95a6:	42a3      	cmp	r3, r4
   d95a8:	d106      	bne.n	d95b8 <strncmp+0x22>
   d95aa:	43ec      	mvns	r4, r5
   d95ac:	4414      	add	r4, r2
   d95ae:	42e0      	cmn	r0, r4
   d95b0:	d001      	beq.n	d95b6 <strncmp+0x20>
   d95b2:	2b00      	cmp	r3, #0
   d95b4:	d1f3      	bne.n	d959e <strncmp+0x8>
   d95b6:	461c      	mov	r4, r3
   d95b8:	1b18      	subs	r0, r3, r4
   d95ba:	bd30      	pop	{r4, r5, pc}
   d95bc:	4610      	mov	r0, r2
   d95be:	bd30      	pop	{r4, r5, pc}

000d95c0 <strncpy>:
   d95c0:	b510      	push	{r4, lr}
   d95c2:	4603      	mov	r3, r0
   d95c4:	b142      	cbz	r2, d95d8 <strncpy+0x18>
   d95c6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d95ca:	f803 4b01 	strb.w	r4, [r3], #1
   d95ce:	3a01      	subs	r2, #1
   d95d0:	2c00      	cmp	r4, #0
   d95d2:	d1f7      	bne.n	d95c4 <strncpy+0x4>
   d95d4:	441a      	add	r2, r3
   d95d6:	e000      	b.n	d95da <strncpy+0x1a>
   d95d8:	bd10      	pop	{r4, pc}
   d95da:	4293      	cmp	r3, r2
   d95dc:	d002      	beq.n	d95e4 <strncpy+0x24>
   d95de:	f803 4b01 	strb.w	r4, [r3], #1
   d95e2:	e7fa      	b.n	d95da <strncpy+0x1a>
   d95e4:	bd10      	pop	{r4, pc}

000d95e6 <sulp>:
   d95e6:	b570      	push	{r4, r5, r6, lr}
   d95e8:	4604      	mov	r4, r0
   d95ea:	460d      	mov	r5, r1
   d95ec:	ec45 4b10 	vmov	d0, r4, r5
   d95f0:	4616      	mov	r6, r2
   d95f2:	f002 f841 	bl	db678 <__ulp>
   d95f6:	ec51 0b10 	vmov	r0, r1, d0
   d95fa:	b17e      	cbz	r6, d961c <sulp+0x36>
   d95fc:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d9600:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9604:	2b00      	cmp	r3, #0
   d9606:	dd09      	ble.n	d961c <sulp+0x36>
   d9608:	051b      	lsls	r3, r3, #20
   d960a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d960e:	2400      	movs	r4, #0
   d9610:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d9614:	4622      	mov	r2, r4
   d9616:	462b      	mov	r3, r5
   d9618:	f7ff faa0 	bl	d8b5c <__aeabi_dmul>
   d961c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9620 <_strtod_r>:
   d9620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9624:	b09d      	sub	sp, #116	; 0x74
   d9626:	2300      	movs	r3, #0
   d9628:	9002      	str	r0, [sp, #8]
   d962a:	460c      	mov	r4, r1
   d962c:	9213      	str	r2, [sp, #76]	; 0x4c
   d962e:	9318      	str	r3, [sp, #96]	; 0x60
   d9630:	f04f 0a00 	mov.w	sl, #0
   d9634:	f04f 0b00 	mov.w	fp, #0
   d9638:	9117      	str	r1, [sp, #92]	; 0x5c
   d963a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d963c:	781a      	ldrb	r2, [r3, #0]
   d963e:	2a0d      	cmp	r2, #13
   d9640:	d805      	bhi.n	d964e <_strtod_r+0x2e>
   d9642:	2a09      	cmp	r2, #9
   d9644:	d213      	bcs.n	d966e <_strtod_r+0x4e>
   d9646:	2a00      	cmp	r2, #0
   d9648:	f000 81ac 	beq.w	d99a4 <_strtod_r+0x384>
   d964c:	e012      	b.n	d9674 <_strtod_r+0x54>
   d964e:	2a2b      	cmp	r2, #43	; 0x2b
   d9650:	d004      	beq.n	d965c <_strtod_r+0x3c>
   d9652:	2a2d      	cmp	r2, #45	; 0x2d
   d9654:	d004      	beq.n	d9660 <_strtod_r+0x40>
   d9656:	2a20      	cmp	r2, #32
   d9658:	d10c      	bne.n	d9674 <_strtod_r+0x54>
   d965a:	e008      	b.n	d966e <_strtod_r+0x4e>
   d965c:	2200      	movs	r2, #0
   d965e:	e000      	b.n	d9662 <_strtod_r+0x42>
   d9660:	2201      	movs	r2, #1
   d9662:	920c      	str	r2, [sp, #48]	; 0x30
   d9664:	1c5a      	adds	r2, r3, #1
   d9666:	9217      	str	r2, [sp, #92]	; 0x5c
   d9668:	785b      	ldrb	r3, [r3, #1]
   d966a:	b92b      	cbnz	r3, d9678 <_strtod_r+0x58>
   d966c:	e19a      	b.n	d99a4 <_strtod_r+0x384>
   d966e:	3301      	adds	r3, #1
   d9670:	9317      	str	r3, [sp, #92]	; 0x5c
   d9672:	e7e2      	b.n	d963a <_strtod_r+0x1a>
   d9674:	2300      	movs	r3, #0
   d9676:	930c      	str	r3, [sp, #48]	; 0x30
   d9678:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d967a:	782b      	ldrb	r3, [r5, #0]
   d967c:	2b30      	cmp	r3, #48	; 0x30
   d967e:	d15c      	bne.n	d973a <_strtod_r+0x11a>
   d9680:	786b      	ldrb	r3, [r5, #1]
   d9682:	2b58      	cmp	r3, #88	; 0x58
   d9684:	d001      	beq.n	d968a <_strtod_r+0x6a>
   d9686:	2b78      	cmp	r3, #120	; 0x78
   d9688:	d14c      	bne.n	d9724 <_strtod_r+0x104>
   d968a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d968c:	9301      	str	r3, [sp, #4]
   d968e:	ab18      	add	r3, sp, #96	; 0x60
   d9690:	9300      	str	r3, [sp, #0]
   d9692:	4aa9      	ldr	r2, [pc, #676]	; (d9938 <_strtod_r+0x318>)
   d9694:	9802      	ldr	r0, [sp, #8]
   d9696:	ab19      	add	r3, sp, #100	; 0x64
   d9698:	a917      	add	r1, sp, #92	; 0x5c
   d969a:	f001 f974 	bl	da986 <__gethex>
   d969e:	f010 0607 	ands.w	r6, r0, #7
   d96a2:	4604      	mov	r4, r0
   d96a4:	f000 8587 	beq.w	da1b6 <_strtod_r+0xb96>
   d96a8:	2e06      	cmp	r6, #6
   d96aa:	d105      	bne.n	d96b8 <_strtod_r+0x98>
   d96ac:	3501      	adds	r5, #1
   d96ae:	2300      	movs	r3, #0
   d96b0:	9517      	str	r5, [sp, #92]	; 0x5c
   d96b2:	930c      	str	r3, [sp, #48]	; 0x30
   d96b4:	f000 bd7f 	b.w	da1b6 <_strtod_r+0xb96>
   d96b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d96ba:	b13a      	cbz	r2, d96cc <_strtod_r+0xac>
   d96bc:	2135      	movs	r1, #53	; 0x35
   d96be:	a81a      	add	r0, sp, #104	; 0x68
   d96c0:	f002 f8c7 	bl	db852 <__copybits>
   d96c4:	9918      	ldr	r1, [sp, #96]	; 0x60
   d96c6:	9802      	ldr	r0, [sp, #8]
   d96c8:	f001 fd45 	bl	db156 <_Bfree>
   d96cc:	2e06      	cmp	r6, #6
   d96ce:	d822      	bhi.n	d9716 <_strtod_r+0xf6>
   d96d0:	e8df f006 	tbb	[pc, r6]
   d96d4:	18080d04 	.word	0x18080d04
   d96d8:	0d1d      	.short	0x0d1d
   d96da:	04          	.byte	0x04
   d96db:	00          	.byte	0x00
   d96dc:	f04f 0b00 	mov.w	fp, #0
   d96e0:	46da      	mov	sl, fp
   d96e2:	e018      	b.n	d9716 <_strtod_r+0xf6>
   d96e4:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d96e8:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d96ec:	e013      	b.n	d9716 <_strtod_r+0xf6>
   d96ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d96f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d96f2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d96f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d96fa:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d96fe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d9702:	e008      	b.n	d9716 <_strtod_r+0xf6>
   d9704:	f8df b234 	ldr.w	fp, [pc, #564]	; d993c <_strtod_r+0x31c>
   d9708:	f04f 0a00 	mov.w	sl, #0
   d970c:	e003      	b.n	d9716 <_strtod_r+0xf6>
   d970e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d9712:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9716:	0721      	lsls	r1, r4, #28
   d9718:	f140 854d 	bpl.w	da1b6 <_strtod_r+0xb96>
   d971c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d9720:	f000 bd49 	b.w	da1b6 <_strtod_r+0xb96>
   d9724:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9726:	1c5a      	adds	r2, r3, #1
   d9728:	9217      	str	r2, [sp, #92]	; 0x5c
   d972a:	785b      	ldrb	r3, [r3, #1]
   d972c:	2b30      	cmp	r3, #48	; 0x30
   d972e:	d0f9      	beq.n	d9724 <_strtod_r+0x104>
   d9730:	2b00      	cmp	r3, #0
   d9732:	f000 8540 	beq.w	da1b6 <_strtod_r+0xb96>
   d9736:	2301      	movs	r3, #1
   d9738:	e000      	b.n	d973c <_strtod_r+0x11c>
   d973a:	2300      	movs	r3, #0
   d973c:	f04f 0800 	mov.w	r8, #0
   d9740:	9306      	str	r3, [sp, #24]
   d9742:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9744:	9307      	str	r3, [sp, #28]
   d9746:	f8cd 8014 	str.w	r8, [sp, #20]
   d974a:	f8cd 8010 	str.w	r8, [sp, #16]
   d974e:	220a      	movs	r2, #10
   d9750:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d9752:	782e      	ldrb	r6, [r5, #0]
   d9754:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d9758:	b2d9      	uxtb	r1, r3
   d975a:	2909      	cmp	r1, #9
   d975c:	d80e      	bhi.n	d977c <_strtod_r+0x15c>
   d975e:	9904      	ldr	r1, [sp, #16]
   d9760:	2908      	cmp	r1, #8
   d9762:	bfdd      	ittte	le
   d9764:	9905      	ldrle	r1, [sp, #20]
   d9766:	fb02 3301 	mlale	r3, r2, r1, r3
   d976a:	9305      	strle	r3, [sp, #20]
   d976c:	fb02 3808 	mlagt	r8, r2, r8, r3
   d9770:	9b04      	ldr	r3, [sp, #16]
   d9772:	3501      	adds	r5, #1
   d9774:	3301      	adds	r3, #1
   d9776:	9304      	str	r3, [sp, #16]
   d9778:	9517      	str	r5, [sp, #92]	; 0x5c
   d977a:	e7e9      	b.n	d9750 <_strtod_r+0x130>
   d977c:	9802      	ldr	r0, [sp, #8]
   d977e:	f7ff fe7b 	bl	d9478 <_localeconv_r>
   d9782:	6807      	ldr	r7, [r0, #0]
   d9784:	9802      	ldr	r0, [sp, #8]
   d9786:	f7ff fe77 	bl	d9478 <_localeconv_r>
   d978a:	6800      	ldr	r0, [r0, #0]
   d978c:	f7ff fefb 	bl	d9586 <strlen>
   d9790:	4639      	mov	r1, r7
   d9792:	4602      	mov	r2, r0
   d9794:	4628      	mov	r0, r5
   d9796:	f7ff fefe 	bl	d9596 <strncmp>
   d979a:	4607      	mov	r7, r0
   d979c:	b128      	cbz	r0, d97aa <_strtod_r+0x18a>
   d979e:	2000      	movs	r0, #0
   d97a0:	4633      	mov	r3, r6
   d97a2:	9d04      	ldr	r5, [sp, #16]
   d97a4:	4602      	mov	r2, r0
   d97a6:	4601      	mov	r1, r0
   d97a8:	e057      	b.n	d985a <_strtod_r+0x23a>
   d97aa:	9802      	ldr	r0, [sp, #8]
   d97ac:	f7ff fe64 	bl	d9478 <_localeconv_r>
   d97b0:	6800      	ldr	r0, [r0, #0]
   d97b2:	f7ff fee8 	bl	d9586 <strlen>
   d97b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d97b8:	181a      	adds	r2, r3, r0
   d97ba:	9217      	str	r2, [sp, #92]	; 0x5c
   d97bc:	9a04      	ldr	r2, [sp, #16]
   d97be:	5c1b      	ldrb	r3, [r3, r0]
   d97c0:	2a00      	cmp	r2, #0
   d97c2:	d142      	bne.n	d984a <_strtod_r+0x22a>
   d97c4:	4610      	mov	r0, r2
   d97c6:	2b30      	cmp	r3, #48	; 0x30
   d97c8:	d105      	bne.n	d97d6 <_strtod_r+0x1b6>
   d97ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d97cc:	1c5a      	adds	r2, r3, #1
   d97ce:	9217      	str	r2, [sp, #92]	; 0x5c
   d97d0:	3001      	adds	r0, #1
   d97d2:	785b      	ldrb	r3, [r3, #1]
   d97d4:	e7f7      	b.n	d97c6 <_strtod_r+0x1a6>
   d97d6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d97da:	2a08      	cmp	r2, #8
   d97dc:	d843      	bhi.n	d9866 <_strtod_r+0x246>
   d97de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d97e0:	9207      	str	r2, [sp, #28]
   d97e2:	4602      	mov	r2, r0
   d97e4:	2000      	movs	r0, #0
   d97e6:	4605      	mov	r5, r0
   d97e8:	3b30      	subs	r3, #48	; 0x30
   d97ea:	f100 0101 	add.w	r1, r0, #1
   d97ee:	d026      	beq.n	d983e <_strtod_r+0x21e>
   d97f0:	440a      	add	r2, r1
   d97f2:	eb05 0c00 	add.w	ip, r5, r0
   d97f6:	4629      	mov	r1, r5
   d97f8:	260a      	movs	r6, #10
   d97fa:	4561      	cmp	r1, ip
   d97fc:	d00e      	beq.n	d981c <_strtod_r+0x1fc>
   d97fe:	3101      	adds	r1, #1
   d9800:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   d9804:	f1be 0f08 	cmp.w	lr, #8
   d9808:	dc03      	bgt.n	d9812 <_strtod_r+0x1f2>
   d980a:	9f05      	ldr	r7, [sp, #20]
   d980c:	4377      	muls	r7, r6
   d980e:	9705      	str	r7, [sp, #20]
   d9810:	e7f3      	b.n	d97fa <_strtod_r+0x1da>
   d9812:	2910      	cmp	r1, #16
   d9814:	bfd8      	it	le
   d9816:	fb06 f808 	mulle.w	r8, r6, r8
   d981a:	e7ee      	b.n	d97fa <_strtod_r+0x1da>
   d981c:	4428      	add	r0, r5
   d981e:	2808      	cmp	r0, #8
   d9820:	f100 0501 	add.w	r5, r0, #1
   d9824:	dc05      	bgt.n	d9832 <_strtod_r+0x212>
   d9826:	9805      	ldr	r0, [sp, #20]
   d9828:	210a      	movs	r1, #10
   d982a:	fb01 3300 	mla	r3, r1, r0, r3
   d982e:	9305      	str	r3, [sp, #20]
   d9830:	e004      	b.n	d983c <_strtod_r+0x21c>
   d9832:	2d10      	cmp	r5, #16
   d9834:	bfdc      	itt	le
   d9836:	210a      	movle	r1, #10
   d9838:	fb01 3808 	mlale	r8, r1, r8, r3
   d983c:	2100      	movs	r1, #0
   d983e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9840:	1c58      	adds	r0, r3, #1
   d9842:	9017      	str	r0, [sp, #92]	; 0x5c
   d9844:	785b      	ldrb	r3, [r3, #1]
   d9846:	4608      	mov	r0, r1
   d9848:	e002      	b.n	d9850 <_strtod_r+0x230>
   d984a:	9d04      	ldr	r5, [sp, #16]
   d984c:	4638      	mov	r0, r7
   d984e:	463a      	mov	r2, r7
   d9850:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d9854:	2909      	cmp	r1, #9
   d9856:	d9c7      	bls.n	d97e8 <_strtod_r+0x1c8>
   d9858:	2101      	movs	r1, #1
   d985a:	2b65      	cmp	r3, #101	; 0x65
   d985c:	d001      	beq.n	d9862 <_strtod_r+0x242>
   d985e:	2b45      	cmp	r3, #69	; 0x45
   d9860:	d151      	bne.n	d9906 <_strtod_r+0x2e6>
   d9862:	b96d      	cbnz	r5, d9880 <_strtod_r+0x260>
   d9864:	e004      	b.n	d9870 <_strtod_r+0x250>
   d9866:	2b65      	cmp	r3, #101	; 0x65
   d9868:	f040 84b3 	bne.w	da1d2 <_strtod_r+0xbb2>
   d986c:	2200      	movs	r2, #0
   d986e:	2101      	movs	r1, #1
   d9870:	b928      	cbnz	r0, d987e <_strtod_r+0x25e>
   d9872:	9b06      	ldr	r3, [sp, #24]
   d9874:	2b00      	cmp	r3, #0
   d9876:	f000 8095 	beq.w	d99a4 <_strtod_r+0x384>
   d987a:	4605      	mov	r5, r0
   d987c:	e000      	b.n	d9880 <_strtod_r+0x260>
   d987e:	2500      	movs	r5, #0
   d9880:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d9882:	1c63      	adds	r3, r4, #1
   d9884:	9317      	str	r3, [sp, #92]	; 0x5c
   d9886:	7863      	ldrb	r3, [r4, #1]
   d9888:	2b2b      	cmp	r3, #43	; 0x2b
   d988a:	d006      	beq.n	d989a <_strtod_r+0x27a>
   d988c:	2b2d      	cmp	r3, #45	; 0x2d
   d988e:	d002      	beq.n	d9896 <_strtod_r+0x276>
   d9890:	2600      	movs	r6, #0
   d9892:	9603      	str	r6, [sp, #12]
   d9894:	e006      	b.n	d98a4 <_strtod_r+0x284>
   d9896:	2301      	movs	r3, #1
   d9898:	e000      	b.n	d989c <_strtod_r+0x27c>
   d989a:	2300      	movs	r3, #0
   d989c:	9303      	str	r3, [sp, #12]
   d989e:	1ca3      	adds	r3, r4, #2
   d98a0:	9317      	str	r3, [sp, #92]	; 0x5c
   d98a2:	78a3      	ldrb	r3, [r4, #2]
   d98a4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d98a8:	2e09      	cmp	r6, #9
   d98aa:	d82b      	bhi.n	d9904 <_strtod_r+0x2e4>
   d98ac:	2b30      	cmp	r3, #48	; 0x30
   d98ae:	d104      	bne.n	d98ba <_strtod_r+0x29a>
   d98b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d98b2:	1c5e      	adds	r6, r3, #1
   d98b4:	9617      	str	r6, [sp, #92]	; 0x5c
   d98b6:	785b      	ldrb	r3, [r3, #1]
   d98b8:	e7f8      	b.n	d98ac <_strtod_r+0x28c>
   d98ba:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d98be:	2e08      	cmp	r6, #8
   d98c0:	d821      	bhi.n	d9906 <_strtod_r+0x2e6>
   d98c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d98c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d98c8:	f04f 0c0a 	mov.w	ip, #10
   d98cc:	461f      	mov	r7, r3
   d98ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d98d0:	1c5e      	adds	r6, r3, #1
   d98d2:	9617      	str	r6, [sp, #92]	; 0x5c
   d98d4:	785b      	ldrb	r3, [r3, #1]
   d98d6:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d98da:	f1b9 0f09 	cmp.w	r9, #9
   d98de:	d804      	bhi.n	d98ea <_strtod_r+0x2ca>
   d98e0:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d98e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d98e8:	e7f1      	b.n	d98ce <_strtod_r+0x2ae>
   d98ea:	1bf6      	subs	r6, r6, r7
   d98ec:	2e08      	cmp	r6, #8
   d98ee:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d98f2:	dc02      	bgt.n	d98fa <_strtod_r+0x2da>
   d98f4:	45f1      	cmp	r9, lr
   d98f6:	bfa8      	it	ge
   d98f8:	46f1      	movge	r9, lr
   d98fa:	9e03      	ldr	r6, [sp, #12]
   d98fc:	b12e      	cbz	r6, d990a <_strtod_r+0x2ea>
   d98fe:	f1c9 0900 	rsb	r9, r9, #0
   d9902:	e002      	b.n	d990a <_strtod_r+0x2ea>
   d9904:	9417      	str	r4, [sp, #92]	; 0x5c
   d9906:	f04f 0900 	mov.w	r9, #0
   d990a:	2d00      	cmp	r5, #0
   d990c:	d153      	bne.n	d99b6 <_strtod_r+0x396>
   d990e:	2800      	cmp	r0, #0
   d9910:	f040 8451 	bne.w	da1b6 <_strtod_r+0xb96>
   d9914:	9a06      	ldr	r2, [sp, #24]
   d9916:	2a00      	cmp	r2, #0
   d9918:	f040 844d 	bne.w	da1b6 <_strtod_r+0xb96>
   d991c:	2900      	cmp	r1, #0
   d991e:	d141      	bne.n	d99a4 <_strtod_r+0x384>
   d9920:	2b4e      	cmp	r3, #78	; 0x4e
   d9922:	d020      	beq.n	d9966 <_strtod_r+0x346>
   d9924:	dc02      	bgt.n	d992c <_strtod_r+0x30c>
   d9926:	2b49      	cmp	r3, #73	; 0x49
   d9928:	d00a      	beq.n	d9940 <_strtod_r+0x320>
   d992a:	e03b      	b.n	d99a4 <_strtod_r+0x384>
   d992c:	2b69      	cmp	r3, #105	; 0x69
   d992e:	d007      	beq.n	d9940 <_strtod_r+0x320>
   d9930:	2b6e      	cmp	r3, #110	; 0x6e
   d9932:	d018      	beq.n	d9966 <_strtod_r+0x346>
   d9934:	e036      	b.n	d99a4 <_strtod_r+0x384>
   d9936:	bf00      	nop
   d9938:	000dc348 	.word	0x000dc348
   d993c:	7ff00000 	.word	0x7ff00000
   d9940:	49a8      	ldr	r1, [pc, #672]	; (d9be4 <_strtod_r+0x5c4>)
   d9942:	a817      	add	r0, sp, #92	; 0x5c
   d9944:	f001 fa50 	bl	dade8 <__match>
   d9948:	b360      	cbz	r0, d99a4 <_strtod_r+0x384>
   d994a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d994c:	49a6      	ldr	r1, [pc, #664]	; (d9be8 <_strtod_r+0x5c8>)
   d994e:	3b01      	subs	r3, #1
   d9950:	a817      	add	r0, sp, #92	; 0x5c
   d9952:	9317      	str	r3, [sp, #92]	; 0x5c
   d9954:	f001 fa48 	bl	dade8 <__match>
   d9958:	b910      	cbnz	r0, d9960 <_strtod_r+0x340>
   d995a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d995c:	3301      	adds	r3, #1
   d995e:	9317      	str	r3, [sp, #92]	; 0x5c
   d9960:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d9c04 <_strtod_r+0x5e4>
   d9964:	e01a      	b.n	d999c <_strtod_r+0x37c>
   d9966:	49a1      	ldr	r1, [pc, #644]	; (d9bec <_strtod_r+0x5cc>)
   d9968:	a817      	add	r0, sp, #92	; 0x5c
   d996a:	f001 fa3d 	bl	dade8 <__match>
   d996e:	b1c8      	cbz	r0, d99a4 <_strtod_r+0x384>
   d9970:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9972:	781b      	ldrb	r3, [r3, #0]
   d9974:	2b28      	cmp	r3, #40	; 0x28
   d9976:	d10f      	bne.n	d9998 <_strtod_r+0x378>
   d9978:	aa1a      	add	r2, sp, #104	; 0x68
   d997a:	499d      	ldr	r1, [pc, #628]	; (d9bf0 <_strtod_r+0x5d0>)
   d997c:	a817      	add	r0, sp, #92	; 0x5c
   d997e:	f001 fa46 	bl	dae0e <__hexnan>
   d9982:	2805      	cmp	r0, #5
   d9984:	d108      	bne.n	d9998 <_strtod_r+0x378>
   d9986:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d9988:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d998c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d9990:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d9994:	f000 bc0f 	b.w	da1b6 <_strtod_r+0xb96>
   d9998:	f8df b26c 	ldr.w	fp, [pc, #620]	; d9c08 <_strtod_r+0x5e8>
   d999c:	f04f 0a00 	mov.w	sl, #0
   d99a0:	f000 bc09 	b.w	da1b6 <_strtod_r+0xb96>
   d99a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d99a6:	9417      	str	r4, [sp, #92]	; 0x5c
   d99a8:	2b00      	cmp	r3, #0
   d99aa:	f000 840f 	beq.w	da1cc <_strtod_r+0xbac>
   d99ae:	2300      	movs	r3, #0
   d99b0:	930c      	str	r3, [sp, #48]	; 0x30
   d99b2:	f000 bc02 	b.w	da1ba <_strtod_r+0xb9a>
   d99b6:	9b04      	ldr	r3, [sp, #16]
   d99b8:	9805      	ldr	r0, [sp, #20]
   d99ba:	2b00      	cmp	r3, #0
   d99bc:	bf08      	it	eq
   d99be:	462b      	moveq	r3, r5
   d99c0:	2d10      	cmp	r5, #16
   d99c2:	462c      	mov	r4, r5
   d99c4:	ebc2 0909 	rsb	r9, r2, r9
   d99c8:	bfa8      	it	ge
   d99ca:	2410      	movge	r4, #16
   d99cc:	9304      	str	r3, [sp, #16]
   d99ce:	f7ff f84f 	bl	d8a70 <__aeabi_ui2d>
   d99d2:	2c09      	cmp	r4, #9
   d99d4:	4682      	mov	sl, r0
   d99d6:	468b      	mov	fp, r1
   d99d8:	dd13      	ble.n	d9a02 <_strtod_r+0x3e2>
   d99da:	4b86      	ldr	r3, [pc, #536]	; (d9bf4 <_strtod_r+0x5d4>)
   d99dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d99e0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d99e4:	f7ff f8ba 	bl	d8b5c <__aeabi_dmul>
   d99e8:	4606      	mov	r6, r0
   d99ea:	4640      	mov	r0, r8
   d99ec:	460f      	mov	r7, r1
   d99ee:	f7ff f83f 	bl	d8a70 <__aeabi_ui2d>
   d99f2:	4602      	mov	r2, r0
   d99f4:	460b      	mov	r3, r1
   d99f6:	4630      	mov	r0, r6
   d99f8:	4639      	mov	r1, r7
   d99fa:	f7fe fefd 	bl	d87f8 <__adddf3>
   d99fe:	4682      	mov	sl, r0
   d9a00:	468b      	mov	fp, r1
   d9a02:	2d0f      	cmp	r5, #15
   d9a04:	dc36      	bgt.n	d9a74 <_strtod_r+0x454>
   d9a06:	f1b9 0f00 	cmp.w	r9, #0
   d9a0a:	f000 83d4 	beq.w	da1b6 <_strtod_r+0xb96>
   d9a0e:	dd24      	ble.n	d9a5a <_strtod_r+0x43a>
   d9a10:	f1b9 0f16 	cmp.w	r9, #22
   d9a14:	dc07      	bgt.n	d9a26 <_strtod_r+0x406>
   d9a16:	4d77      	ldr	r5, [pc, #476]	; (d9bf4 <_strtod_r+0x5d4>)
   d9a18:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d9a1c:	4652      	mov	r2, sl
   d9a1e:	465b      	mov	r3, fp
   d9a20:	e9d9 0100 	ldrd	r0, r1, [r9]
   d9a24:	e014      	b.n	d9a50 <_strtod_r+0x430>
   d9a26:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d9a2a:	4599      	cmp	r9, r3
   d9a2c:	dc22      	bgt.n	d9a74 <_strtod_r+0x454>
   d9a2e:	4c71      	ldr	r4, [pc, #452]	; (d9bf4 <_strtod_r+0x5d4>)
   d9a30:	f1c5 050f 	rsb	r5, r5, #15
   d9a34:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d9a38:	ebc5 0509 	rsb	r5, r5, r9
   d9a3c:	4652      	mov	r2, sl
   d9a3e:	465b      	mov	r3, fp
   d9a40:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9a44:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d9a48:	f7ff f888 	bl	d8b5c <__aeabi_dmul>
   d9a4c:	e9d4 2300 	ldrd	r2, r3, [r4]
   d9a50:	f7ff f884 	bl	d8b5c <__aeabi_dmul>
   d9a54:	4682      	mov	sl, r0
   d9a56:	468b      	mov	fp, r1
   d9a58:	e3ad      	b.n	da1b6 <_strtod_r+0xb96>
   d9a5a:	f119 0f16 	cmn.w	r9, #22
   d9a5e:	db09      	blt.n	d9a74 <_strtod_r+0x454>
   d9a60:	4d64      	ldr	r5, [pc, #400]	; (d9bf4 <_strtod_r+0x5d4>)
   d9a62:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d9a66:	e9d9 2300 	ldrd	r2, r3, [r9]
   d9a6a:	4650      	mov	r0, sl
   d9a6c:	4659      	mov	r1, fp
   d9a6e:	f7ff f99f 	bl	d8db0 <__aeabi_ddiv>
   d9a72:	e7ef      	b.n	d9a54 <_strtod_r+0x434>
   d9a74:	1b2c      	subs	r4, r5, r4
   d9a76:	444c      	add	r4, r9
   d9a78:	2c00      	cmp	r4, #0
   d9a7a:	dd57      	ble.n	d9b2c <_strtod_r+0x50c>
   d9a7c:	f014 010f 	ands.w	r1, r4, #15
   d9a80:	d00a      	beq.n	d9a98 <_strtod_r+0x478>
   d9a82:	4b5c      	ldr	r3, [pc, #368]	; (d9bf4 <_strtod_r+0x5d4>)
   d9a84:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d9a88:	4652      	mov	r2, sl
   d9a8a:	465b      	mov	r3, fp
   d9a8c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9a90:	f7ff f864 	bl	d8b5c <__aeabi_dmul>
   d9a94:	4682      	mov	sl, r0
   d9a96:	468b      	mov	fp, r1
   d9a98:	f034 040f 	bics.w	r4, r4, #15
   d9a9c:	f000 80b8 	beq.w	d9c10 <_strtod_r+0x5f0>
   d9aa0:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d9aa4:	dd0b      	ble.n	d9abe <_strtod_r+0x49e>
   d9aa6:	2400      	movs	r4, #0
   d9aa8:	4625      	mov	r5, r4
   d9aaa:	9405      	str	r4, [sp, #20]
   d9aac:	9404      	str	r4, [sp, #16]
   d9aae:	9a02      	ldr	r2, [sp, #8]
   d9ab0:	f8df b150 	ldr.w	fp, [pc, #336]	; d9c04 <_strtod_r+0x5e4>
   d9ab4:	2322      	movs	r3, #34	; 0x22
   d9ab6:	6013      	str	r3, [r2, #0]
   d9ab8:	f04f 0a00 	mov.w	sl, #0
   d9abc:	e187      	b.n	d9dce <_strtod_r+0x7ae>
   d9abe:	4e4e      	ldr	r6, [pc, #312]	; (d9bf8 <_strtod_r+0x5d8>)
   d9ac0:	2300      	movs	r3, #0
   d9ac2:	1124      	asrs	r4, r4, #4
   d9ac4:	4650      	mov	r0, sl
   d9ac6:	4659      	mov	r1, fp
   d9ac8:	4698      	mov	r8, r3
   d9aca:	4637      	mov	r7, r6
   d9acc:	2c01      	cmp	r4, #1
   d9ace:	dd0b      	ble.n	d9ae8 <_strtod_r+0x4c8>
   d9ad0:	07e2      	lsls	r2, r4, #31
   d9ad2:	d504      	bpl.n	d9ade <_strtod_r+0x4be>
   d9ad4:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9ad8:	f7ff f840 	bl	d8b5c <__aeabi_dmul>
   d9adc:	2301      	movs	r3, #1
   d9ade:	f108 0801 	add.w	r8, r8, #1
   d9ae2:	1064      	asrs	r4, r4, #1
   d9ae4:	3608      	adds	r6, #8
   d9ae6:	e7f1      	b.n	d9acc <_strtod_r+0x4ac>
   d9ae8:	b10b      	cbz	r3, d9aee <_strtod_r+0x4ce>
   d9aea:	4682      	mov	sl, r0
   d9aec:	468b      	mov	fp, r1
   d9aee:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d9af2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d9af6:	4652      	mov	r2, sl
   d9af8:	465b      	mov	r3, fp
   d9afa:	e9d7 0100 	ldrd	r0, r1, [r7]
   d9afe:	f7ff f82d 	bl	d8b5c <__aeabi_dmul>
   d9b02:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d9b06:	468b      	mov	fp, r1
   d9b08:	460a      	mov	r2, r1
   d9b0a:	0d1b      	lsrs	r3, r3, #20
   d9b0c:	493b      	ldr	r1, [pc, #236]	; (d9bfc <_strtod_r+0x5dc>)
   d9b0e:	051b      	lsls	r3, r3, #20
   d9b10:	428b      	cmp	r3, r1
   d9b12:	4682      	mov	sl, r0
   d9b14:	d8c7      	bhi.n	d9aa6 <_strtod_r+0x486>
   d9b16:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d9b1a:	428b      	cmp	r3, r1
   d9b1c:	bf86      	itte	hi
   d9b1e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d9c0c <_strtod_r+0x5ec>
   d9b22:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d9b26:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d9b2a:	e071      	b.n	d9c10 <_strtod_r+0x5f0>
   d9b2c:	d070      	beq.n	d9c10 <_strtod_r+0x5f0>
   d9b2e:	4264      	negs	r4, r4
   d9b30:	f014 020f 	ands.w	r2, r4, #15
   d9b34:	d00a      	beq.n	d9b4c <_strtod_r+0x52c>
   d9b36:	4b2f      	ldr	r3, [pc, #188]	; (d9bf4 <_strtod_r+0x5d4>)
   d9b38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d9b3c:	4650      	mov	r0, sl
   d9b3e:	4659      	mov	r1, fp
   d9b40:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9b44:	f7ff f934 	bl	d8db0 <__aeabi_ddiv>
   d9b48:	4682      	mov	sl, r0
   d9b4a:	468b      	mov	fp, r1
   d9b4c:	1124      	asrs	r4, r4, #4
   d9b4e:	d05f      	beq.n	d9c10 <_strtod_r+0x5f0>
   d9b50:	2c1f      	cmp	r4, #31
   d9b52:	dd04      	ble.n	d9b5e <_strtod_r+0x53e>
   d9b54:	2400      	movs	r4, #0
   d9b56:	4625      	mov	r5, r4
   d9b58:	9405      	str	r4, [sp, #20]
   d9b5a:	9404      	str	r4, [sp, #16]
   d9b5c:	e130      	b.n	d9dc0 <_strtod_r+0x7a0>
   d9b5e:	f014 0f10 	tst.w	r4, #16
   d9b62:	bf0c      	ite	eq
   d9b64:	2300      	moveq	r3, #0
   d9b66:	236a      	movne	r3, #106	; 0x6a
   d9b68:	4e25      	ldr	r6, [pc, #148]	; (d9c00 <_strtod_r+0x5e0>)
   d9b6a:	9303      	str	r3, [sp, #12]
   d9b6c:	4650      	mov	r0, sl
   d9b6e:	4659      	mov	r1, fp
   d9b70:	2300      	movs	r3, #0
   d9b72:	2c00      	cmp	r4, #0
   d9b74:	dd09      	ble.n	d9b8a <_strtod_r+0x56a>
   d9b76:	07e2      	lsls	r2, r4, #31
   d9b78:	d504      	bpl.n	d9b84 <_strtod_r+0x564>
   d9b7a:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9b7e:	f7fe ffed 	bl	d8b5c <__aeabi_dmul>
   d9b82:	2301      	movs	r3, #1
   d9b84:	1064      	asrs	r4, r4, #1
   d9b86:	3608      	adds	r6, #8
   d9b88:	e7f3      	b.n	d9b72 <_strtod_r+0x552>
   d9b8a:	b10b      	cbz	r3, d9b90 <_strtod_r+0x570>
   d9b8c:	4682      	mov	sl, r0
   d9b8e:	468b      	mov	fp, r1
   d9b90:	9b03      	ldr	r3, [sp, #12]
   d9b92:	b1eb      	cbz	r3, d9bd0 <_strtod_r+0x5b0>
   d9b94:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d9b98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9b9c:	2b00      	cmp	r3, #0
   d9b9e:	4659      	mov	r1, fp
   d9ba0:	dd16      	ble.n	d9bd0 <_strtod_r+0x5b0>
   d9ba2:	2b1f      	cmp	r3, #31
   d9ba4:	dd0e      	ble.n	d9bc4 <_strtod_r+0x5a4>
   d9ba6:	2b34      	cmp	r3, #52	; 0x34
   d9ba8:	bfde      	ittt	le
   d9baa:	3b20      	suble	r3, #32
   d9bac:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d9bb0:	fa02 f303 	lslle.w	r3, r2, r3
   d9bb4:	f04f 0a00 	mov.w	sl, #0
   d9bb8:	bfcc      	ite	gt
   d9bba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d9bbe:	ea03 0b01 	andle.w	fp, r3, r1
   d9bc2:	e005      	b.n	d9bd0 <_strtod_r+0x5b0>
   d9bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9bc8:	fa02 f303 	lsl.w	r3, r2, r3
   d9bcc:	ea03 0a0a 	and.w	sl, r3, sl
   d9bd0:	2200      	movs	r2, #0
   d9bd2:	2300      	movs	r3, #0
   d9bd4:	4650      	mov	r0, sl
   d9bd6:	4659      	mov	r1, fp
   d9bd8:	f7ff fa28 	bl	d902c <__aeabi_dcmpeq>
   d9bdc:	2800      	cmp	r0, #0
   d9bde:	d1b9      	bne.n	d9b54 <_strtod_r+0x534>
   d9be0:	e018      	b.n	d9c14 <_strtod_r+0x5f4>
   d9be2:	bf00      	nop
   d9be4:	000dc370 	.word	0x000dc370
   d9be8:	000dc373 	.word	0x000dc373
   d9bec:	000dc379 	.word	0x000dc379
   d9bf0:	000dc35c 	.word	0x000dc35c
   d9bf4:	000dc3e8 	.word	0x000dc3e8
   d9bf8:	000dc4b0 	.word	0x000dc4b0
   d9bfc:	7ca00000 	.word	0x7ca00000
   d9c00:	000dc380 	.word	0x000dc380
   d9c04:	7ff00000 	.word	0x7ff00000
   d9c08:	fff80000 	.word	0xfff80000
   d9c0c:	7fefffff 	.word	0x7fefffff
   d9c10:	2300      	movs	r3, #0
   d9c12:	9303      	str	r3, [sp, #12]
   d9c14:	9b05      	ldr	r3, [sp, #20]
   d9c16:	9300      	str	r3, [sp, #0]
   d9c18:	9a04      	ldr	r2, [sp, #16]
   d9c1a:	9907      	ldr	r1, [sp, #28]
   d9c1c:	9802      	ldr	r0, [sp, #8]
   d9c1e:	462b      	mov	r3, r5
   d9c20:	f001 faeb 	bl	db1fa <__s2b>
   d9c24:	9005      	str	r0, [sp, #20]
   d9c26:	2800      	cmp	r0, #0
   d9c28:	f43f af3d 	beq.w	d9aa6 <_strtod_r+0x486>
   d9c2c:	f1b9 0f00 	cmp.w	r9, #0
   d9c30:	f1c9 0300 	rsb	r3, r9, #0
   d9c34:	bfa8      	it	ge
   d9c36:	2300      	movge	r3, #0
   d9c38:	930d      	str	r3, [sp, #52]	; 0x34
   d9c3a:	2400      	movs	r4, #0
   d9c3c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d9c40:	9312      	str	r3, [sp, #72]	; 0x48
   d9c42:	4625      	mov	r5, r4
   d9c44:	9b05      	ldr	r3, [sp, #20]
   d9c46:	9802      	ldr	r0, [sp, #8]
   d9c48:	6859      	ldr	r1, [r3, #4]
   d9c4a:	f001 fa4f 	bl	db0ec <_Balloc>
   d9c4e:	9004      	str	r0, [sp, #16]
   d9c50:	2800      	cmp	r0, #0
   d9c52:	f43f af2c 	beq.w	d9aae <_strtod_r+0x48e>
   d9c56:	9b05      	ldr	r3, [sp, #20]
   d9c58:	691a      	ldr	r2, [r3, #16]
   d9c5a:	3202      	adds	r2, #2
   d9c5c:	f103 010c 	add.w	r1, r3, #12
   d9c60:	0092      	lsls	r2, r2, #2
   d9c62:	300c      	adds	r0, #12
   d9c64:	f7ff fc0c 	bl	d9480 <memcpy>
   d9c68:	aa1a      	add	r2, sp, #104	; 0x68
   d9c6a:	a919      	add	r1, sp, #100	; 0x64
   d9c6c:	ec4b ab10 	vmov	d0, sl, fp
   d9c70:	9802      	ldr	r0, [sp, #8]
   d9c72:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d9c76:	f001 fd74 	bl	db762 <__d2b>
   d9c7a:	9018      	str	r0, [sp, #96]	; 0x60
   d9c7c:	2800      	cmp	r0, #0
   d9c7e:	f43f af16 	beq.w	d9aae <_strtod_r+0x48e>
   d9c82:	2101      	movs	r1, #1
   d9c84:	9802      	ldr	r0, [sp, #8]
   d9c86:	f001 fb43 	bl	db310 <__i2b>
   d9c8a:	4605      	mov	r5, r0
   d9c8c:	2800      	cmp	r0, #0
   d9c8e:	f43f af0e 	beq.w	d9aae <_strtod_r+0x48e>
   d9c92:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d9c94:	9903      	ldr	r1, [sp, #12]
   d9c96:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d9c98:	2b00      	cmp	r3, #0
   d9c9a:	bfad      	iteet	ge
   d9c9c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d9c9e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d9ca0:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d9ca4:	eb02 0803 	addge.w	r8, r2, r3
   d9ca8:	bfb8      	it	lt
   d9caa:	1ad2      	sublt	r2, r2, r3
   d9cac:	eba3 0301 	sub.w	r3, r3, r1
   d9cb0:	4433      	add	r3, r6
   d9cb2:	49b5      	ldr	r1, [pc, #724]	; (d9f88 <_strtod_r+0x968>)
   d9cb4:	bfa8      	it	ge
   d9cb6:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d9cb8:	3b01      	subs	r3, #1
   d9cba:	428b      	cmp	r3, r1
   d9cbc:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d9cc0:	f280 808a 	bge.w	d9dd8 <_strtod_r+0x7b8>
   d9cc4:	1ac9      	subs	r1, r1, r3
   d9cc6:	291f      	cmp	r1, #31
   d9cc8:	bfc8      	it	gt
   d9cca:	4fb0      	ldrgt	r7, [pc, #704]	; (d9f8c <_strtod_r+0x96c>)
   d9ccc:	f04f 0901 	mov.w	r9, #1
   d9cd0:	bfd4      	ite	le
   d9cd2:	fa09 f301 	lslle.w	r3, r9, r1
   d9cd6:	1aff      	subgt	r7, r7, r3
   d9cd8:	eba6 0601 	sub.w	r6, r6, r1
   d9cdc:	bfd9      	ittee	le
   d9cde:	9306      	strle	r3, [sp, #24]
   d9ce0:	2700      	movle	r7, #0
   d9ce2:	fa09 f707 	lslgt.w	r7, r9, r7
   d9ce6:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d9cea:	eb08 0906 	add.w	r9, r8, r6
   d9cee:	9b03      	ldr	r3, [sp, #12]
   d9cf0:	45c8      	cmp	r8, r9
   d9cf2:	4416      	add	r6, r2
   d9cf4:	441e      	add	r6, r3
   d9cf6:	4643      	mov	r3, r8
   d9cf8:	bfa8      	it	ge
   d9cfa:	464b      	movge	r3, r9
   d9cfc:	42b3      	cmp	r3, r6
   d9cfe:	bfa8      	it	ge
   d9d00:	4633      	movge	r3, r6
   d9d02:	2b00      	cmp	r3, #0
   d9d04:	bfc2      	ittt	gt
   d9d06:	ebc3 0909 	rsbgt	r9, r3, r9
   d9d0a:	1af6      	subgt	r6, r6, r3
   d9d0c:	ebc3 0808 	rsbgt	r8, r3, r8
   d9d10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d9d12:	2b00      	cmp	r3, #0
   d9d14:	d164      	bne.n	d9de0 <_strtod_r+0x7c0>
   d9d16:	f1b9 0f00 	cmp.w	r9, #0
   d9d1a:	dc7a      	bgt.n	d9e12 <_strtod_r+0x7f2>
   d9d1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d9d1e:	2b00      	cmp	r3, #0
   d9d20:	f040 8081 	bne.w	d9e26 <_strtod_r+0x806>
   d9d24:	2e00      	cmp	r6, #0
   d9d26:	f300 8088 	bgt.w	d9e3a <_strtod_r+0x81a>
   d9d2a:	f1b8 0f00 	cmp.w	r8, #0
   d9d2e:	f300 808e 	bgt.w	d9e4e <_strtod_r+0x82e>
   d9d32:	9a04      	ldr	r2, [sp, #16]
   d9d34:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9d36:	9802      	ldr	r0, [sp, #8]
   d9d38:	f001 fc3f 	bl	db5ba <__mdiff>
   d9d3c:	4604      	mov	r4, r0
   d9d3e:	2800      	cmp	r0, #0
   d9d40:	f43f aeb5 	beq.w	d9aae <_strtod_r+0x48e>
   d9d44:	68c3      	ldr	r3, [r0, #12]
   d9d46:	9307      	str	r3, [sp, #28]
   d9d48:	2300      	movs	r3, #0
   d9d4a:	60c3      	str	r3, [r0, #12]
   d9d4c:	4629      	mov	r1, r5
   d9d4e:	f001 fc18 	bl	db582 <__mcmp>
   d9d52:	2800      	cmp	r0, #0
   d9d54:	f280 8089 	bge.w	d9e6a <_strtod_r+0x84a>
   d9d58:	9b07      	ldr	r3, [sp, #28]
   d9d5a:	2b00      	cmp	r3, #0
   d9d5c:	f040 8204 	bne.w	da168 <_strtod_r+0xb48>
   d9d60:	f1ba 0f00 	cmp.w	sl, #0
   d9d64:	f040 8200 	bne.w	da168 <_strtod_r+0xb48>
   d9d68:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9d6c:	2b00      	cmp	r3, #0
   d9d6e:	f040 81fb 	bne.w	da168 <_strtod_r+0xb48>
   d9d72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9d76:	0d1b      	lsrs	r3, r3, #20
   d9d78:	051b      	lsls	r3, r3, #20
   d9d7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d9d7e:	f240 81f3 	bls.w	da168 <_strtod_r+0xb48>
   d9d82:	6963      	ldr	r3, [r4, #20]
   d9d84:	2b00      	cmp	r3, #0
   d9d86:	d06c      	beq.n	d9e62 <_strtod_r+0x842>
   d9d88:	4621      	mov	r1, r4
   d9d8a:	2201      	movs	r2, #1
   d9d8c:	9802      	ldr	r0, [sp, #8]
   d9d8e:	f001 fba7 	bl	db4e0 <__lshift>
   d9d92:	4629      	mov	r1, r5
   d9d94:	4604      	mov	r4, r0
   d9d96:	f001 fbf4 	bl	db582 <__mcmp>
   d9d9a:	2800      	cmp	r0, #0
   d9d9c:	f340 81e4 	ble.w	da168 <_strtod_r+0xb48>
   d9da0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9da4:	9a03      	ldr	r2, [sp, #12]
   d9da6:	0d1b      	lsrs	r3, r3, #20
   d9da8:	051b      	lsls	r3, r3, #20
   d9daa:	2a00      	cmp	r2, #0
   d9dac:	f000 808c 	beq.w	d9ec8 <_strtod_r+0x8a8>
   d9db0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d9db4:	f300 8088 	bgt.w	d9ec8 <_strtod_r+0x8a8>
   d9db8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d9dbc:	f300 81d6 	bgt.w	da16c <_strtod_r+0xb4c>
   d9dc0:	9a02      	ldr	r2, [sp, #8]
   d9dc2:	2322      	movs	r3, #34	; 0x22
   d9dc4:	f04f 0a00 	mov.w	sl, #0
   d9dc8:	f04f 0b00 	mov.w	fp, #0
   d9dcc:	6013      	str	r3, [r2, #0]
   d9dce:	9b05      	ldr	r3, [sp, #20]
   d9dd0:	2b00      	cmp	r3, #0
   d9dd2:	f040 81dc 	bne.w	da18e <_strtod_r+0xb6e>
   d9dd6:	e1ee      	b.n	da1b6 <_strtod_r+0xb96>
   d9dd8:	2301      	movs	r3, #1
   d9dda:	2700      	movs	r7, #0
   d9ddc:	9306      	str	r3, [sp, #24]
   d9dde:	e784      	b.n	d9cea <_strtod_r+0x6ca>
   d9de0:	4629      	mov	r1, r5
   d9de2:	461a      	mov	r2, r3
   d9de4:	9802      	ldr	r0, [sp, #8]
   d9de6:	f001 fb2d 	bl	db444 <__pow5mult>
   d9dea:	4605      	mov	r5, r0
   d9dec:	2800      	cmp	r0, #0
   d9dee:	f43f ae5e 	beq.w	d9aae <_strtod_r+0x48e>
   d9df2:	4601      	mov	r1, r0
   d9df4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d9df6:	9802      	ldr	r0, [sp, #8]
   d9df8:	f001 fa93 	bl	db322 <__multiply>
   d9dfc:	9007      	str	r0, [sp, #28]
   d9dfe:	2800      	cmp	r0, #0
   d9e00:	f43f ae55 	beq.w	d9aae <_strtod_r+0x48e>
   d9e04:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9e06:	9802      	ldr	r0, [sp, #8]
   d9e08:	f001 f9a5 	bl	db156 <_Bfree>
   d9e0c:	9b07      	ldr	r3, [sp, #28]
   d9e0e:	9318      	str	r3, [sp, #96]	; 0x60
   d9e10:	e781      	b.n	d9d16 <_strtod_r+0x6f6>
   d9e12:	464a      	mov	r2, r9
   d9e14:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9e16:	9802      	ldr	r0, [sp, #8]
   d9e18:	f001 fb62 	bl	db4e0 <__lshift>
   d9e1c:	9018      	str	r0, [sp, #96]	; 0x60
   d9e1e:	2800      	cmp	r0, #0
   d9e20:	f47f af7c 	bne.w	d9d1c <_strtod_r+0x6fc>
   d9e24:	e643      	b.n	d9aae <_strtod_r+0x48e>
   d9e26:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d9e28:	9904      	ldr	r1, [sp, #16]
   d9e2a:	9802      	ldr	r0, [sp, #8]
   d9e2c:	f001 fb0a 	bl	db444 <__pow5mult>
   d9e30:	9004      	str	r0, [sp, #16]
   d9e32:	2800      	cmp	r0, #0
   d9e34:	f47f af76 	bne.w	d9d24 <_strtod_r+0x704>
   d9e38:	e639      	b.n	d9aae <_strtod_r+0x48e>
   d9e3a:	4632      	mov	r2, r6
   d9e3c:	9904      	ldr	r1, [sp, #16]
   d9e3e:	9802      	ldr	r0, [sp, #8]
   d9e40:	f001 fb4e 	bl	db4e0 <__lshift>
   d9e44:	9004      	str	r0, [sp, #16]
   d9e46:	2800      	cmp	r0, #0
   d9e48:	f47f af6f 	bne.w	d9d2a <_strtod_r+0x70a>
   d9e4c:	e62f      	b.n	d9aae <_strtod_r+0x48e>
   d9e4e:	4629      	mov	r1, r5
   d9e50:	4642      	mov	r2, r8
   d9e52:	9802      	ldr	r0, [sp, #8]
   d9e54:	f001 fb44 	bl	db4e0 <__lshift>
   d9e58:	4605      	mov	r5, r0
   d9e5a:	2800      	cmp	r0, #0
   d9e5c:	f47f af69 	bne.w	d9d32 <_strtod_r+0x712>
   d9e60:	e625      	b.n	d9aae <_strtod_r+0x48e>
   d9e62:	6923      	ldr	r3, [r4, #16]
   d9e64:	2b01      	cmp	r3, #1
   d9e66:	dc8f      	bgt.n	d9d88 <_strtod_r+0x768>
   d9e68:	e17e      	b.n	da168 <_strtod_r+0xb48>
   d9e6a:	d161      	bne.n	d9f30 <_strtod_r+0x910>
   d9e6c:	9a07      	ldr	r2, [sp, #28]
   d9e6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9e72:	b322      	cbz	r2, d9ebe <_strtod_r+0x89e>
   d9e74:	4946      	ldr	r1, [pc, #280]	; (d9f90 <_strtod_r+0x970>)
   d9e76:	428b      	cmp	r3, r1
   d9e78:	465a      	mov	r2, fp
   d9e7a:	d12e      	bne.n	d9eda <_strtod_r+0x8ba>
   d9e7c:	9b03      	ldr	r3, [sp, #12]
   d9e7e:	4651      	mov	r1, sl
   d9e80:	b163      	cbz	r3, d9e9c <_strtod_r+0x87c>
   d9e82:	4b44      	ldr	r3, [pc, #272]	; (d9f94 <_strtod_r+0x974>)
   d9e84:	4013      	ands	r3, r2
   d9e86:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9e8a:	d807      	bhi.n	d9e9c <_strtod_r+0x87c>
   d9e8c:	0d1b      	lsrs	r3, r3, #20
   d9e8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9e92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9e96:	fa00 f303 	lsl.w	r3, r0, r3
   d9e9a:	e001      	b.n	d9ea0 <_strtod_r+0x880>
   d9e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9ea0:	428b      	cmp	r3, r1
   d9ea2:	d11a      	bne.n	d9eda <_strtod_r+0x8ba>
   d9ea4:	493c      	ldr	r1, [pc, #240]	; (d9f98 <_strtod_r+0x978>)
   d9ea6:	428a      	cmp	r2, r1
   d9ea8:	d102      	bne.n	d9eb0 <_strtod_r+0x890>
   d9eaa:	3301      	adds	r3, #1
   d9eac:	f43f adff 	beq.w	d9aae <_strtod_r+0x48e>
   d9eb0:	4b38      	ldr	r3, [pc, #224]	; (d9f94 <_strtod_r+0x974>)
   d9eb2:	4013      	ands	r3, r2
   d9eb4:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d9eb8:	f04f 0a00 	mov.w	sl, #0
   d9ebc:	e154      	b.n	da168 <_strtod_r+0xb48>
   d9ebe:	b963      	cbnz	r3, d9eda <_strtod_r+0x8ba>
   d9ec0:	f1ba 0f00 	cmp.w	sl, #0
   d9ec4:	d109      	bne.n	d9eda <_strtod_r+0x8ba>
   d9ec6:	e76b      	b.n	d9da0 <_strtod_r+0x780>
   d9ec8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d9ecc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d9ed0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d9ed4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9ed8:	e146      	b.n	da168 <_strtod_r+0xb48>
   d9eda:	b117      	cbz	r7, d9ee2 <_strtod_r+0x8c2>
   d9edc:	ea17 0f0b 	tst.w	r7, fp
   d9ee0:	e002      	b.n	d9ee8 <_strtod_r+0x8c8>
   d9ee2:	9b06      	ldr	r3, [sp, #24]
   d9ee4:	ea13 0f0a 	tst.w	r3, sl
   d9ee8:	f000 813e 	beq.w	da168 <_strtod_r+0xb48>
   d9eec:	9b07      	ldr	r3, [sp, #28]
   d9eee:	9a03      	ldr	r2, [sp, #12]
   d9ef0:	4650      	mov	r0, sl
   d9ef2:	4659      	mov	r1, fp
   d9ef4:	b153      	cbz	r3, d9f0c <_strtod_r+0x8ec>
   d9ef6:	f7ff fb76 	bl	d95e6 <sulp>
   d9efa:	4602      	mov	r2, r0
   d9efc:	460b      	mov	r3, r1
   d9efe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d9f02:	f7fe fc79 	bl	d87f8 <__adddf3>
   d9f06:	4682      	mov	sl, r0
   d9f08:	468b      	mov	fp, r1
   d9f0a:	e12d      	b.n	da168 <_strtod_r+0xb48>
   d9f0c:	f7ff fb6b 	bl	d95e6 <sulp>
   d9f10:	4602      	mov	r2, r0
   d9f12:	460b      	mov	r3, r1
   d9f14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d9f18:	f7fe fc6c 	bl	d87f4 <__aeabi_dsub>
   d9f1c:	2200      	movs	r2, #0
   d9f1e:	2300      	movs	r3, #0
   d9f20:	4682      	mov	sl, r0
   d9f22:	468b      	mov	fp, r1
   d9f24:	f7ff f882 	bl	d902c <__aeabi_dcmpeq>
   d9f28:	2800      	cmp	r0, #0
   d9f2a:	f47f af49 	bne.w	d9dc0 <_strtod_r+0x7a0>
   d9f2e:	e11b      	b.n	da168 <_strtod_r+0xb48>
   d9f30:	4629      	mov	r1, r5
   d9f32:	4620      	mov	r0, r4
   d9f34:	f001 fc63 	bl	db7fe <__ratio>
   d9f38:	ec57 6b10 	vmov	r6, r7, d0
   d9f3c:	2200      	movs	r2, #0
   d9f3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9f42:	ee10 0a10 	vmov	r0, s0
   d9f46:	4639      	mov	r1, r7
   d9f48:	f7ff f884 	bl	d9054 <__aeabi_dcmple>
   d9f4c:	2800      	cmp	r0, #0
   d9f4e:	d042      	beq.n	d9fd6 <_strtod_r+0x9b6>
   d9f50:	9b07      	ldr	r3, [sp, #28]
   d9f52:	b123      	cbz	r3, d9f5e <_strtod_r+0x93e>
   d9f54:	f04f 0800 	mov.w	r8, #0
   d9f58:	f8df 9040 	ldr.w	r9, [pc, #64]	; d9f9c <_strtod_r+0x97c>
   d9f5c:	e011      	b.n	d9f82 <_strtod_r+0x962>
   d9f5e:	f1ba 0f00 	cmp.w	sl, #0
   d9f62:	d103      	bne.n	d9f6c <_strtod_r+0x94c>
   d9f64:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9f68:	b93b      	cbnz	r3, d9f7a <_strtod_r+0x95a>
   d9f6a:	e01b      	b.n	d9fa4 <_strtod_r+0x984>
   d9f6c:	f1ba 0f01 	cmp.w	sl, #1
   d9f70:	d103      	bne.n	d9f7a <_strtod_r+0x95a>
   d9f72:	f1bb 0f00 	cmp.w	fp, #0
   d9f76:	f43f af23 	beq.w	d9dc0 <_strtod_r+0x7a0>
   d9f7a:	f8df 9024 	ldr.w	r9, [pc, #36]	; d9fa0 <_strtod_r+0x980>
   d9f7e:	f04f 0800 	mov.w	r8, #0
   d9f82:	2600      	movs	r6, #0
   d9f84:	4f05      	ldr	r7, [pc, #20]	; (d9f9c <_strtod_r+0x97c>)
   d9f86:	e039      	b.n	d9ffc <_strtod_r+0x9dc>
   d9f88:	fffffc02 	.word	0xfffffc02
   d9f8c:	fffffbe2 	.word	0xfffffbe2
   d9f90:	000fffff 	.word	0x000fffff
   d9f94:	7ff00000 	.word	0x7ff00000
   d9f98:	7fefffff 	.word	0x7fefffff
   d9f9c:	3ff00000 	.word	0x3ff00000
   d9fa0:	bff00000 	.word	0xbff00000
   d9fa4:	2200      	movs	r2, #0
   d9fa6:	4b98      	ldr	r3, [pc, #608]	; (da208 <_strtod_r+0xbe8>)
   d9fa8:	4630      	mov	r0, r6
   d9faa:	4639      	mov	r1, r7
   d9fac:	f7ff f848 	bl	d9040 <__aeabi_dcmplt>
   d9fb0:	b940      	cbnz	r0, d9fc4 <_strtod_r+0x9a4>
   d9fb2:	4630      	mov	r0, r6
   d9fb4:	4639      	mov	r1, r7
   d9fb6:	2200      	movs	r2, #0
   d9fb8:	4b94      	ldr	r3, [pc, #592]	; (da20c <_strtod_r+0xbec>)
   d9fba:	f7fe fdcf 	bl	d8b5c <__aeabi_dmul>
   d9fbe:	4606      	mov	r6, r0
   d9fc0:	460f      	mov	r7, r1
   d9fc2:	e001      	b.n	d9fc8 <_strtod_r+0x9a8>
   d9fc4:	4f91      	ldr	r7, [pc, #580]	; (da20c <_strtod_r+0xbec>)
   d9fc6:	2600      	movs	r6, #0
   d9fc8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d9fcc:	9614      	str	r6, [sp, #80]	; 0x50
   d9fce:	9315      	str	r3, [sp, #84]	; 0x54
   d9fd0:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d9fd4:	e012      	b.n	d9ffc <_strtod_r+0x9dc>
   d9fd6:	4b8d      	ldr	r3, [pc, #564]	; (da20c <_strtod_r+0xbec>)
   d9fd8:	4630      	mov	r0, r6
   d9fda:	4639      	mov	r1, r7
   d9fdc:	2200      	movs	r2, #0
   d9fde:	f7fe fdbd 	bl	d8b5c <__aeabi_dmul>
   d9fe2:	9b07      	ldr	r3, [sp, #28]
   d9fe4:	4606      	mov	r6, r0
   d9fe6:	460f      	mov	r7, r1
   d9fe8:	b923      	cbnz	r3, d9ff4 <_strtod_r+0x9d4>
   d9fea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9fee:	900e      	str	r0, [sp, #56]	; 0x38
   d9ff0:	930f      	str	r3, [sp, #60]	; 0x3c
   d9ff2:	e001      	b.n	d9ff8 <_strtod_r+0x9d8>
   d9ff4:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d9ff8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d9ffc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da000:	0d1b      	lsrs	r3, r3, #20
   da002:	051b      	lsls	r3, r3, #20
   da004:	9306      	str	r3, [sp, #24]
   da006:	9a06      	ldr	r2, [sp, #24]
   da008:	4b81      	ldr	r3, [pc, #516]	; (da210 <_strtod_r+0xbf0>)
   da00a:	429a      	cmp	r2, r3
   da00c:	d12b      	bne.n	da066 <_strtod_r+0xa46>
   da00e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   da012:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   da016:	ec4b ab10 	vmov	d0, sl, fp
   da01a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   da01e:	f001 fb2b 	bl	db678 <__ulp>
   da022:	4640      	mov	r0, r8
   da024:	ec53 2b10 	vmov	r2, r3, d0
   da028:	4649      	mov	r1, r9
   da02a:	f7fe fd97 	bl	d8b5c <__aeabi_dmul>
   da02e:	4652      	mov	r2, sl
   da030:	465b      	mov	r3, fp
   da032:	f7fe fbe1 	bl	d87f8 <__adddf3>
   da036:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   da03a:	0d1b      	lsrs	r3, r3, #20
   da03c:	4a75      	ldr	r2, [pc, #468]	; (da214 <_strtod_r+0xbf4>)
   da03e:	051b      	lsls	r3, r3, #20
   da040:	4293      	cmp	r3, r2
   da042:	4682      	mov	sl, r0
   da044:	d90c      	bls.n	da060 <_strtod_r+0xa40>
   da046:	4b74      	ldr	r3, [pc, #464]	; (da218 <_strtod_r+0xbf8>)
   da048:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   da04a:	429a      	cmp	r2, r3
   da04c:	d103      	bne.n	da056 <_strtod_r+0xa36>
   da04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da050:	3301      	adds	r3, #1
   da052:	f43f ad2c 	beq.w	d9aae <_strtod_r+0x48e>
   da056:	f8df b1c0 	ldr.w	fp, [pc, #448]	; da218 <_strtod_r+0xbf8>
   da05a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   da05e:	e072      	b.n	da146 <_strtod_r+0xb26>
   da060:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   da064:	e038      	b.n	da0d8 <_strtod_r+0xab8>
   da066:	9b03      	ldr	r3, [sp, #12]
   da068:	b333      	cbz	r3, da0b8 <_strtod_r+0xa98>
   da06a:	9b06      	ldr	r3, [sp, #24]
   da06c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   da070:	d822      	bhi.n	da0b8 <_strtod_r+0xa98>
   da072:	a35d      	add	r3, pc, #372	; (adr r3, da1e8 <_strtod_r+0xbc8>)
   da074:	e9d3 2300 	ldrd	r2, r3, [r3]
   da078:	4630      	mov	r0, r6
   da07a:	4639      	mov	r1, r7
   da07c:	f7fe ffea 	bl	d9054 <__aeabi_dcmple>
   da080:	b1a8      	cbz	r0, da0ae <_strtod_r+0xa8e>
   da082:	4639      	mov	r1, r7
   da084:	4630      	mov	r0, r6
   da086:	f7ff f841 	bl	d910c <__aeabi_d2uiz>
   da08a:	2800      	cmp	r0, #0
   da08c:	bf08      	it	eq
   da08e:	2001      	moveq	r0, #1
   da090:	f7fe fcee 	bl	d8a70 <__aeabi_ui2d>
   da094:	9b07      	ldr	r3, [sp, #28]
   da096:	4606      	mov	r6, r0
   da098:	460f      	mov	r7, r1
   da09a:	b923      	cbnz	r3, da0a6 <_strtod_r+0xa86>
   da09c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da0a0:	9010      	str	r0, [sp, #64]	; 0x40
   da0a2:	9311      	str	r3, [sp, #68]	; 0x44
   da0a4:	e001      	b.n	da0aa <_strtod_r+0xa8a>
   da0a6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   da0aa:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   da0ae:	9a06      	ldr	r2, [sp, #24]
   da0b0:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   da0b4:	ebc2 0903 	rsb	r9, r2, r3
   da0b8:	ed9d 0b08 	vldr	d0, [sp, #32]
   da0bc:	f001 fadc 	bl	db678 <__ulp>
   da0c0:	4640      	mov	r0, r8
   da0c2:	ec53 2b10 	vmov	r2, r3, d0
   da0c6:	4649      	mov	r1, r9
   da0c8:	f7fe fd48 	bl	d8b5c <__aeabi_dmul>
   da0cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   da0d0:	f7fe fb92 	bl	d87f8 <__adddf3>
   da0d4:	4682      	mov	sl, r0
   da0d6:	468b      	mov	fp, r1
   da0d8:	9b03      	ldr	r3, [sp, #12]
   da0da:	bba3      	cbnz	r3, da146 <_strtod_r+0xb26>
   da0dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da0e0:	0d1b      	lsrs	r3, r3, #20
   da0e2:	9a06      	ldr	r2, [sp, #24]
   da0e4:	051b      	lsls	r3, r3, #20
   da0e6:	429a      	cmp	r2, r3
   da0e8:	46d8      	mov	r8, fp
   da0ea:	d12c      	bne.n	da146 <_strtod_r+0xb26>
   da0ec:	4639      	mov	r1, r7
   da0ee:	4630      	mov	r0, r6
   da0f0:	f7fe ffe4 	bl	d90bc <__aeabi_d2iz>
   da0f4:	f7fe fccc 	bl	d8a90 <__aeabi_i2d>
   da0f8:	460b      	mov	r3, r1
   da0fa:	4602      	mov	r2, r0
   da0fc:	4639      	mov	r1, r7
   da0fe:	4630      	mov	r0, r6
   da100:	f7fe fb78 	bl	d87f4 <__aeabi_dsub>
   da104:	9b07      	ldr	r3, [sp, #28]
   da106:	4606      	mov	r6, r0
   da108:	460f      	mov	r7, r1
   da10a:	b92b      	cbnz	r3, da118 <_strtod_r+0xaf8>
   da10c:	f1ba 0f00 	cmp.w	sl, #0
   da110:	d102      	bne.n	da118 <_strtod_r+0xaf8>
   da112:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da116:	b183      	cbz	r3, da13a <_strtod_r+0xb1a>
   da118:	a335      	add	r3, pc, #212	; (adr r3, da1f0 <_strtod_r+0xbd0>)
   da11a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da11e:	4630      	mov	r0, r6
   da120:	4639      	mov	r1, r7
   da122:	f7fe ff8d 	bl	d9040 <__aeabi_dcmplt>
   da126:	2800      	cmp	r0, #0
   da128:	d131      	bne.n	da18e <_strtod_r+0xb6e>
   da12a:	a333      	add	r3, pc, #204	; (adr r3, da1f8 <_strtod_r+0xbd8>)
   da12c:	e9d3 2300 	ldrd	r2, r3, [r3]
   da130:	4630      	mov	r0, r6
   da132:	4639      	mov	r1, r7
   da134:	f7fe ffa2 	bl	d907c <__aeabi_dcmpgt>
   da138:	e004      	b.n	da144 <_strtod_r+0xb24>
   da13a:	a331      	add	r3, pc, #196	; (adr r3, da200 <_strtod_r+0xbe0>)
   da13c:	e9d3 2300 	ldrd	r2, r3, [r3]
   da140:	f7fe ff7e 	bl	d9040 <__aeabi_dcmplt>
   da144:	bb18      	cbnz	r0, da18e <_strtod_r+0xb6e>
   da146:	9918      	ldr	r1, [sp, #96]	; 0x60
   da148:	9802      	ldr	r0, [sp, #8]
   da14a:	f001 f804 	bl	db156 <_Bfree>
   da14e:	9904      	ldr	r1, [sp, #16]
   da150:	9802      	ldr	r0, [sp, #8]
   da152:	f001 f800 	bl	db156 <_Bfree>
   da156:	4629      	mov	r1, r5
   da158:	9802      	ldr	r0, [sp, #8]
   da15a:	f000 fffc 	bl	db156 <_Bfree>
   da15e:	4621      	mov	r1, r4
   da160:	9802      	ldr	r0, [sp, #8]
   da162:	f000 fff8 	bl	db156 <_Bfree>
   da166:	e56d      	b.n	d9c44 <_strtod_r+0x624>
   da168:	9b03      	ldr	r3, [sp, #12]
   da16a:	b183      	cbz	r3, da18e <_strtod_r+0xb6e>
   da16c:	4b2b      	ldr	r3, [pc, #172]	; (da21c <_strtod_r+0xbfc>)
   da16e:	930b      	str	r3, [sp, #44]	; 0x2c
   da170:	2300      	movs	r3, #0
   da172:	930a      	str	r3, [sp, #40]	; 0x28
   da174:	4650      	mov	r0, sl
   da176:	4659      	mov	r1, fp
   da178:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da17c:	f7fe fcee 	bl	d8b5c <__aeabi_dmul>
   da180:	4682      	mov	sl, r0
   da182:	468b      	mov	fp, r1
   da184:	b919      	cbnz	r1, da18e <_strtod_r+0xb6e>
   da186:	b910      	cbnz	r0, da18e <_strtod_r+0xb6e>
   da188:	9a02      	ldr	r2, [sp, #8]
   da18a:	2322      	movs	r3, #34	; 0x22
   da18c:	6013      	str	r3, [r2, #0]
   da18e:	9918      	ldr	r1, [sp, #96]	; 0x60
   da190:	9802      	ldr	r0, [sp, #8]
   da192:	f000 ffe0 	bl	db156 <_Bfree>
   da196:	9904      	ldr	r1, [sp, #16]
   da198:	9802      	ldr	r0, [sp, #8]
   da19a:	f000 ffdc 	bl	db156 <_Bfree>
   da19e:	4629      	mov	r1, r5
   da1a0:	9802      	ldr	r0, [sp, #8]
   da1a2:	f000 ffd8 	bl	db156 <_Bfree>
   da1a6:	9905      	ldr	r1, [sp, #20]
   da1a8:	9802      	ldr	r0, [sp, #8]
   da1aa:	f000 ffd4 	bl	db156 <_Bfree>
   da1ae:	4621      	mov	r1, r4
   da1b0:	9802      	ldr	r0, [sp, #8]
   da1b2:	f000 ffd0 	bl	db156 <_Bfree>
   da1b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   da1b8:	b113      	cbz	r3, da1c0 <_strtod_r+0xba0>
   da1ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   da1bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da1be:	6013      	str	r3, [r2, #0]
   da1c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   da1c2:	b11b      	cbz	r3, da1cc <_strtod_r+0xbac>
   da1c4:	4652      	mov	r2, sl
   da1c6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   da1ca:	e007      	b.n	da1dc <_strtod_r+0xbbc>
   da1cc:	4652      	mov	r2, sl
   da1ce:	465b      	mov	r3, fp
   da1d0:	e004      	b.n	da1dc <_strtod_r+0xbbc>
   da1d2:	2500      	movs	r5, #0
   da1d4:	462a      	mov	r2, r5
   da1d6:	2101      	movs	r1, #1
   da1d8:	f7ff bb41 	b.w	d985e <_strtod_r+0x23e>
   da1dc:	ec43 2b10 	vmov	d0, r2, r3
   da1e0:	b01d      	add	sp, #116	; 0x74
   da1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da1e6:	bf00      	nop
   da1e8:	ffc00000 	.word	0xffc00000
   da1ec:	41dfffff 	.word	0x41dfffff
   da1f0:	94a03595 	.word	0x94a03595
   da1f4:	3fdfffff 	.word	0x3fdfffff
   da1f8:	35afe535 	.word	0x35afe535
   da1fc:	3fe00000 	.word	0x3fe00000
   da200:	94a03595 	.word	0x94a03595
   da204:	3fcfffff 	.word	0x3fcfffff
   da208:	3ff00000 	.word	0x3ff00000
   da20c:	3fe00000 	.word	0x3fe00000
   da210:	7fe00000 	.word	0x7fe00000
   da214:	7c9fffff 	.word	0x7c9fffff
   da218:	7fefffff 	.word	0x7fefffff
   da21c:	39500000 	.word	0x39500000

000da220 <strtof>:
   da220:	b538      	push	{r3, r4, r5, lr}
   da222:	4b0e      	ldr	r3, [pc, #56]	; (da25c <strtof+0x3c>)
   da224:	460a      	mov	r2, r1
   da226:	4601      	mov	r1, r0
   da228:	6818      	ldr	r0, [r3, #0]
   da22a:	f7ff f9f9 	bl	d9620 <_strtod_r>
   da22e:	ec55 4b10 	vmov	r4, r5, d0
   da232:	ee10 2a10 	vmov	r2, s0
   da236:	462b      	mov	r3, r5
   da238:	ee10 0a10 	vmov	r0, s0
   da23c:	4629      	mov	r1, r5
   da23e:	f7fe ff27 	bl	d9090 <__aeabi_dcmpun>
   da242:	b120      	cbz	r0, da24e <strtof+0x2e>
   da244:	2000      	movs	r0, #0
   da246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da24a:	f001 bb4d 	b.w	db8e8 <nanf>
   da24e:	4620      	mov	r0, r4
   da250:	4629      	mov	r1, r5
   da252:	f7fe ff7b 	bl	d914c <__aeabi_d2f>
   da256:	ee00 0a10 	vmov	s0, r0
   da25a:	bd38      	pop	{r3, r4, r5, pc}
   da25c:	2003e10c 	.word	0x2003e10c

000da260 <_strtol_r>:
   da260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da264:	4680      	mov	r8, r0
   da266:	4840      	ldr	r0, [pc, #256]	; (da368 <_strtol_r+0x108>)
   da268:	f8d0 9000 	ldr.w	r9, [r0]
   da26c:	460f      	mov	r7, r1
   da26e:	463d      	mov	r5, r7
   da270:	f815 4b01 	ldrb.w	r4, [r5], #1
   da274:	eb09 0004 	add.w	r0, r9, r4
   da278:	7840      	ldrb	r0, [r0, #1]
   da27a:	f000 0008 	and.w	r0, r0, #8
   da27e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   da282:	b108      	cbz	r0, da288 <_strtol_r+0x28>
   da284:	462f      	mov	r7, r5
   da286:	e7f2      	b.n	da26e <_strtol_r+0xe>
   da288:	2c2d      	cmp	r4, #45	; 0x2d
   da28a:	d103      	bne.n	da294 <_strtol_r+0x34>
   da28c:	1cbd      	adds	r5, r7, #2
   da28e:	787c      	ldrb	r4, [r7, #1]
   da290:	2601      	movs	r6, #1
   da292:	e003      	b.n	da29c <_strtol_r+0x3c>
   da294:	2c2b      	cmp	r4, #43	; 0x2b
   da296:	bf04      	itt	eq
   da298:	787c      	ldrbeq	r4, [r7, #1]
   da29a:	1cbd      	addeq	r5, r7, #2
   da29c:	b113      	cbz	r3, da2a4 <_strtol_r+0x44>
   da29e:	2b10      	cmp	r3, #16
   da2a0:	d10a      	bne.n	da2b8 <_strtol_r+0x58>
   da2a2:	e05b      	b.n	da35c <_strtol_r+0xfc>
   da2a4:	2c30      	cmp	r4, #48	; 0x30
   da2a6:	d157      	bne.n	da358 <_strtol_r+0xf8>
   da2a8:	7828      	ldrb	r0, [r5, #0]
   da2aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da2ae:	2858      	cmp	r0, #88	; 0x58
   da2b0:	d14d      	bne.n	da34e <_strtol_r+0xee>
   da2b2:	786c      	ldrb	r4, [r5, #1]
   da2b4:	2310      	movs	r3, #16
   da2b6:	3502      	adds	r5, #2
   da2b8:	2e00      	cmp	r6, #0
   da2ba:	bf14      	ite	ne
   da2bc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   da2c0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   da2c4:	2700      	movs	r7, #0
   da2c6:	fbbc faf3 	udiv	sl, ip, r3
   da2ca:	4638      	mov	r0, r7
   da2cc:	fb03 cc1a 	mls	ip, r3, sl, ip
   da2d0:	eb09 0e04 	add.w	lr, r9, r4
   da2d4:	f89e e001 	ldrb.w	lr, [lr, #1]
   da2d8:	f01e 0f04 	tst.w	lr, #4
   da2dc:	d001      	beq.n	da2e2 <_strtol_r+0x82>
   da2de:	3c30      	subs	r4, #48	; 0x30
   da2e0:	e00b      	b.n	da2fa <_strtol_r+0x9a>
   da2e2:	f01e 0e03 	ands.w	lr, lr, #3
   da2e6:	d01b      	beq.n	da320 <_strtol_r+0xc0>
   da2e8:	f1be 0f01 	cmp.w	lr, #1
   da2ec:	bf0c      	ite	eq
   da2ee:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   da2f2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   da2f6:	ebce 0404 	rsb	r4, lr, r4
   da2fa:	42a3      	cmp	r3, r4
   da2fc:	dd10      	ble.n	da320 <_strtol_r+0xc0>
   da2fe:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   da302:	d00a      	beq.n	da31a <_strtol_r+0xba>
   da304:	4550      	cmp	r0, sl
   da306:	d806      	bhi.n	da316 <_strtol_r+0xb6>
   da308:	d101      	bne.n	da30e <_strtol_r+0xae>
   da30a:	4564      	cmp	r4, ip
   da30c:	dc03      	bgt.n	da316 <_strtol_r+0xb6>
   da30e:	fb03 4000 	mla	r0, r3, r0, r4
   da312:	2701      	movs	r7, #1
   da314:	e001      	b.n	da31a <_strtol_r+0xba>
   da316:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   da31a:	f815 4b01 	ldrb.w	r4, [r5], #1
   da31e:	e7d7      	b.n	da2d0 <_strtol_r+0x70>
   da320:	1c7b      	adds	r3, r7, #1
   da322:	d10c      	bne.n	da33e <_strtol_r+0xde>
   da324:	2e00      	cmp	r6, #0
   da326:	f04f 0322 	mov.w	r3, #34	; 0x22
   da32a:	bf14      	ite	ne
   da32c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   da330:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   da334:	f8c8 3000 	str.w	r3, [r8]
   da338:	b92a      	cbnz	r2, da346 <_strtol_r+0xe6>
   da33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da33e:	b106      	cbz	r6, da342 <_strtol_r+0xe2>
   da340:	4240      	negs	r0, r0
   da342:	b172      	cbz	r2, da362 <_strtol_r+0x102>
   da344:	b107      	cbz	r7, da348 <_strtol_r+0xe8>
   da346:	1e69      	subs	r1, r5, #1
   da348:	6011      	str	r1, [r2, #0]
   da34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da34e:	2430      	movs	r4, #48	; 0x30
   da350:	2b00      	cmp	r3, #0
   da352:	d1b1      	bne.n	da2b8 <_strtol_r+0x58>
   da354:	2308      	movs	r3, #8
   da356:	e7af      	b.n	da2b8 <_strtol_r+0x58>
   da358:	230a      	movs	r3, #10
   da35a:	e7ad      	b.n	da2b8 <_strtol_r+0x58>
   da35c:	2c30      	cmp	r4, #48	; 0x30
   da35e:	d0a3      	beq.n	da2a8 <_strtol_r+0x48>
   da360:	e7aa      	b.n	da2b8 <_strtol_r+0x58>
   da362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da366:	bf00      	nop
   da368:	2003e0a8 	.word	0x2003e0a8

000da36c <strtol>:
   da36c:	4613      	mov	r3, r2
   da36e:	460a      	mov	r2, r1
   da370:	4601      	mov	r1, r0
   da372:	4802      	ldr	r0, [pc, #8]	; (da37c <strtol+0x10>)
   da374:	6800      	ldr	r0, [r0, #0]
   da376:	f7ff bf73 	b.w	da260 <_strtol_r>
   da37a:	bf00      	nop
   da37c:	2003e10c 	.word	0x2003e10c

000da380 <_strtoul_r>:
   da380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da384:	4680      	mov	r8, r0
   da386:	483c      	ldr	r0, [pc, #240]	; (da478 <_strtoul_r+0xf8>)
   da388:	f8d0 9000 	ldr.w	r9, [r0]
   da38c:	460e      	mov	r6, r1
   da38e:	4635      	mov	r5, r6
   da390:	f815 4b01 	ldrb.w	r4, [r5], #1
   da394:	eb09 0004 	add.w	r0, r9, r4
   da398:	7840      	ldrb	r0, [r0, #1]
   da39a:	f000 0008 	and.w	r0, r0, #8
   da39e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   da3a2:	b108      	cbz	r0, da3a8 <_strtoul_r+0x28>
   da3a4:	462e      	mov	r6, r5
   da3a6:	e7f2      	b.n	da38e <_strtoul_r+0xe>
   da3a8:	2c2d      	cmp	r4, #45	; 0x2d
   da3aa:	d103      	bne.n	da3b4 <_strtoul_r+0x34>
   da3ac:	1cb5      	adds	r5, r6, #2
   da3ae:	7874      	ldrb	r4, [r6, #1]
   da3b0:	2701      	movs	r7, #1
   da3b2:	e003      	b.n	da3bc <_strtoul_r+0x3c>
   da3b4:	2c2b      	cmp	r4, #43	; 0x2b
   da3b6:	bf04      	itt	eq
   da3b8:	7874      	ldrbeq	r4, [r6, #1]
   da3ba:	1cb5      	addeq	r5, r6, #2
   da3bc:	b113      	cbz	r3, da3c4 <_strtoul_r+0x44>
   da3be:	2b10      	cmp	r3, #16
   da3c0:	d10a      	bne.n	da3d8 <_strtoul_r+0x58>
   da3c2:	e053      	b.n	da46c <_strtoul_r+0xec>
   da3c4:	2c30      	cmp	r4, #48	; 0x30
   da3c6:	d14f      	bne.n	da468 <_strtoul_r+0xe8>
   da3c8:	7828      	ldrb	r0, [r5, #0]
   da3ca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da3ce:	2858      	cmp	r0, #88	; 0x58
   da3d0:	d145      	bne.n	da45e <_strtoul_r+0xde>
   da3d2:	786c      	ldrb	r4, [r5, #1]
   da3d4:	2310      	movs	r3, #16
   da3d6:	3502      	adds	r5, #2
   da3d8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   da3dc:	2600      	movs	r6, #0
   da3de:	fbbc fcf3 	udiv	ip, ip, r3
   da3e2:	fb03 fa0c 	mul.w	sl, r3, ip
   da3e6:	ea6f 0a0a 	mvn.w	sl, sl
   da3ea:	4630      	mov	r0, r6
   da3ec:	eb09 0e04 	add.w	lr, r9, r4
   da3f0:	f89e e001 	ldrb.w	lr, [lr, #1]
   da3f4:	f01e 0f04 	tst.w	lr, #4
   da3f8:	d001      	beq.n	da3fe <_strtoul_r+0x7e>
   da3fa:	3c30      	subs	r4, #48	; 0x30
   da3fc:	e00b      	b.n	da416 <_strtoul_r+0x96>
   da3fe:	f01e 0e03 	ands.w	lr, lr, #3
   da402:	d01a      	beq.n	da43a <_strtoul_r+0xba>
   da404:	f1be 0f01 	cmp.w	lr, #1
   da408:	bf0c      	ite	eq
   da40a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   da40e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   da412:	ebce 0404 	rsb	r4, lr, r4
   da416:	42a3      	cmp	r3, r4
   da418:	dd0f      	ble.n	da43a <_strtoul_r+0xba>
   da41a:	2e00      	cmp	r6, #0
   da41c:	db08      	blt.n	da430 <_strtoul_r+0xb0>
   da41e:	4560      	cmp	r0, ip
   da420:	d806      	bhi.n	da430 <_strtoul_r+0xb0>
   da422:	d101      	bne.n	da428 <_strtoul_r+0xa8>
   da424:	4554      	cmp	r4, sl
   da426:	dc03      	bgt.n	da430 <_strtoul_r+0xb0>
   da428:	fb03 4000 	mla	r0, r3, r0, r4
   da42c:	2601      	movs	r6, #1
   da42e:	e001      	b.n	da434 <_strtoul_r+0xb4>
   da430:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   da434:	f815 4b01 	ldrb.w	r4, [r5], #1
   da438:	e7d8      	b.n	da3ec <_strtoul_r+0x6c>
   da43a:	2e00      	cmp	r6, #0
   da43c:	da07      	bge.n	da44e <_strtoul_r+0xce>
   da43e:	2322      	movs	r3, #34	; 0x22
   da440:	f8c8 3000 	str.w	r3, [r8]
   da444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da448:	b92a      	cbnz	r2, da456 <_strtoul_r+0xd6>
   da44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da44e:	b107      	cbz	r7, da452 <_strtoul_r+0xd2>
   da450:	4240      	negs	r0, r0
   da452:	b172      	cbz	r2, da472 <_strtoul_r+0xf2>
   da454:	b106      	cbz	r6, da458 <_strtoul_r+0xd8>
   da456:	1e69      	subs	r1, r5, #1
   da458:	6011      	str	r1, [r2, #0]
   da45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da45e:	2430      	movs	r4, #48	; 0x30
   da460:	2b00      	cmp	r3, #0
   da462:	d1b9      	bne.n	da3d8 <_strtoul_r+0x58>
   da464:	2308      	movs	r3, #8
   da466:	e7b7      	b.n	da3d8 <_strtoul_r+0x58>
   da468:	230a      	movs	r3, #10
   da46a:	e7b5      	b.n	da3d8 <_strtoul_r+0x58>
   da46c:	2c30      	cmp	r4, #48	; 0x30
   da46e:	d0ab      	beq.n	da3c8 <_strtoul_r+0x48>
   da470:	e7b2      	b.n	da3d8 <_strtoul_r+0x58>
   da472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da476:	bf00      	nop
   da478:	2003e0a8 	.word	0x2003e0a8

000da47c <strtoul>:
   da47c:	4613      	mov	r3, r2
   da47e:	460a      	mov	r2, r1
   da480:	4601      	mov	r1, r0
   da482:	4802      	ldr	r0, [pc, #8]	; (da48c <strtoul+0x10>)
   da484:	6800      	ldr	r0, [r0, #0]
   da486:	f7ff bf7b 	b.w	da380 <_strtoul_r>
   da48a:	bf00      	nop
   da48c:	2003e10c 	.word	0x2003e10c

000da490 <__tzcalc_limits>:
   da490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da494:	4604      	mov	r4, r0
   da496:	f000 fd8d 	bl	dafb4 <__gettzinfo>
   da49a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   da49e:	429c      	cmp	r4, r3
   da4a0:	f340 8096 	ble.w	da5d0 <__tzcalc_limits+0x140>
   da4a4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   da4a8:	18e3      	adds	r3, r4, r3
   da4aa:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   da4ae:	109b      	asrs	r3, r3, #2
   da4b0:	f240 156d 	movw	r5, #365	; 0x16d
   da4b4:	fb05 3502 	mla	r5, r5, r2, r3
   da4b8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   da4bc:	f06f 0363 	mvn.w	r3, #99	; 0x63
   da4c0:	fb92 f3f3 	sdiv	r3, r2, r3
   da4c4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   da4c8:	442b      	add	r3, r5
   da4ca:	18a5      	adds	r5, r4, r2
   da4cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da4d0:	fb95 f5f2 	sdiv	r5, r5, r2
   da4d4:	441d      	add	r5, r3
   da4d6:	2364      	movs	r3, #100	; 0x64
   da4d8:	fb94 f7f2 	sdiv	r7, r4, r2
   da4dc:	fb94 f6f3 	sdiv	r6, r4, r3
   da4e0:	fb02 4717 	mls	r7, r2, r7, r4
   da4e4:	fb03 4616 	mls	r6, r3, r6, r4
   da4e8:	f100 0338 	add.w	r3, r0, #56	; 0x38
   da4ec:	fab7 fe87 	clz	lr, r7
   da4f0:	9301      	str	r3, [sp, #4]
   da4f2:	f004 0303 	and.w	r3, r4, #3
   da4f6:	6044      	str	r4, [r0, #4]
   da4f8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   da4fc:	4601      	mov	r1, r0
   da4fe:	9300      	str	r3, [sp, #0]
   da500:	f04f 0c07 	mov.w	ip, #7
   da504:	7a0b      	ldrb	r3, [r1, #8]
   da506:	2b4a      	cmp	r3, #74	; 0x4a
   da508:	d10e      	bne.n	da528 <__tzcalc_limits+0x98>
   da50a:	694b      	ldr	r3, [r1, #20]
   da50c:	9a00      	ldr	r2, [sp, #0]
   da50e:	18ec      	adds	r4, r5, r3
   da510:	b902      	cbnz	r2, da514 <__tzcalc_limits+0x84>
   da512:	b906      	cbnz	r6, da516 <__tzcalc_limits+0x86>
   da514:	b927      	cbnz	r7, da520 <__tzcalc_limits+0x90>
   da516:	2b3b      	cmp	r3, #59	; 0x3b
   da518:	bfd4      	ite	le
   da51a:	2300      	movle	r3, #0
   da51c:	2301      	movgt	r3, #1
   da51e:	e000      	b.n	da522 <__tzcalc_limits+0x92>
   da520:	2300      	movs	r3, #0
   da522:	4423      	add	r3, r4
   da524:	3b01      	subs	r3, #1
   da526:	e03f      	b.n	da5a8 <__tzcalc_limits+0x118>
   da528:	2b44      	cmp	r3, #68	; 0x44
   da52a:	d102      	bne.n	da532 <__tzcalc_limits+0xa2>
   da52c:	694b      	ldr	r3, [r1, #20]
   da52e:	442b      	add	r3, r5
   da530:	e03a      	b.n	da5a8 <__tzcalc_limits+0x118>
   da532:	9b00      	ldr	r3, [sp, #0]
   da534:	b92b      	cbnz	r3, da542 <__tzcalc_limits+0xb2>
   da536:	2e00      	cmp	r6, #0
   da538:	bf0c      	ite	eq
   da53a:	46f0      	moveq	r8, lr
   da53c:	f04f 0801 	movne.w	r8, #1
   da540:	e000      	b.n	da544 <__tzcalc_limits+0xb4>
   da542:	46f0      	mov	r8, lr
   da544:	4b24      	ldr	r3, [pc, #144]	; (da5d8 <__tzcalc_limits+0x148>)
   da546:	68cc      	ldr	r4, [r1, #12]
   da548:	2230      	movs	r2, #48	; 0x30
   da54a:	fb02 3808 	mla	r8, r2, r8, r3
   da54e:	f1a8 0a04 	sub.w	sl, r8, #4
   da552:	46a9      	mov	r9, r5
   da554:	2301      	movs	r3, #1
   da556:	42a3      	cmp	r3, r4
   da558:	da04      	bge.n	da564 <__tzcalc_limits+0xd4>
   da55a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   da55e:	3301      	adds	r3, #1
   da560:	44d9      	add	r9, fp
   da562:	e7f8      	b.n	da556 <__tzcalc_limits+0xc6>
   da564:	f109 0304 	add.w	r3, r9, #4
   da568:	fb93 fbfc 	sdiv	fp, r3, ip
   da56c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   da570:	2c01      	cmp	r4, #1
   da572:	ebca 0a03 	rsb	sl, sl, r3
   da576:	694b      	ldr	r3, [r1, #20]
   da578:	bfb8      	it	lt
   da57a:	2401      	movlt	r4, #1
   da57c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   da580:	ebb3 0a0a 	subs.w	sl, r3, sl
   da584:	690b      	ldr	r3, [r1, #16]
   da586:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   da58a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   da58e:	bf48      	it	mi
   da590:	f10a 0a07 	addmi.w	sl, sl, #7
   da594:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   da598:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   da59c:	4453      	add	r3, sl
   da59e:	42a3      	cmp	r3, r4
   da5a0:	db01      	blt.n	da5a6 <__tzcalc_limits+0x116>
   da5a2:	3b07      	subs	r3, #7
   da5a4:	e7fb      	b.n	da59e <__tzcalc_limits+0x10e>
   da5a6:	444b      	add	r3, r9
   da5a8:	698c      	ldr	r4, [r1, #24]
   da5aa:	4a0c      	ldr	r2, [pc, #48]	; (da5dc <__tzcalc_limits+0x14c>)
   da5ac:	fb02 4303 	mla	r3, r2, r3, r4
   da5b0:	6a0c      	ldr	r4, [r1, #32]
   da5b2:	4423      	add	r3, r4
   da5b4:	f841 3f1c 	str.w	r3, [r1, #28]!
   da5b8:	9b01      	ldr	r3, [sp, #4]
   da5ba:	4299      	cmp	r1, r3
   da5bc:	d1a2      	bne.n	da504 <__tzcalc_limits+0x74>
   da5be:	69c3      	ldr	r3, [r0, #28]
   da5c0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   da5c2:	4293      	cmp	r3, r2
   da5c4:	bfac      	ite	ge
   da5c6:	2300      	movge	r3, #0
   da5c8:	2301      	movlt	r3, #1
   da5ca:	6003      	str	r3, [r0, #0]
   da5cc:	2001      	movs	r0, #1
   da5ce:	e000      	b.n	da5d2 <__tzcalc_limits+0x142>
   da5d0:	2000      	movs	r0, #0
   da5d2:	b003      	add	sp, #12
   da5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da5d8:	000dc2e8 	.word	0x000dc2e8
   da5dc:	00015180 	.word	0x00015180

000da5e0 <__tz_lock>:
   da5e0:	4770      	bx	lr

000da5e2 <__tz_unlock>:
   da5e2:	4770      	bx	lr

000da5e4 <_tzset_unlocked>:
   da5e4:	4b01      	ldr	r3, [pc, #4]	; (da5ec <_tzset_unlocked+0x8>)
   da5e6:	6818      	ldr	r0, [r3, #0]
   da5e8:	f000 b802 	b.w	da5f0 <_tzset_unlocked_r>
   da5ec:	2003e10c 	.word	0x2003e10c

000da5f0 <_tzset_unlocked_r>:
   da5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da5f4:	b08d      	sub	sp, #52	; 0x34
   da5f6:	4607      	mov	r7, r0
   da5f8:	f000 fcdc 	bl	dafb4 <__gettzinfo>
   da5fc:	49b0      	ldr	r1, [pc, #704]	; (da8c0 <_tzset_unlocked_r+0x2d0>)
   da5fe:	4eb1      	ldr	r6, [pc, #708]	; (da8c4 <_tzset_unlocked_r+0x2d4>)
   da600:	4604      	mov	r4, r0
   da602:	4638      	mov	r0, r7
   da604:	f000 fcce 	bl	dafa4 <_getenv_r>
   da608:	4605      	mov	r5, r0
   da60a:	b960      	cbnz	r0, da626 <_tzset_unlocked_r+0x36>
   da60c:	4bae      	ldr	r3, [pc, #696]	; (da8c8 <_tzset_unlocked_r+0x2d8>)
   da60e:	4aaf      	ldr	r2, [pc, #700]	; (da8cc <_tzset_unlocked_r+0x2dc>)
   da610:	6018      	str	r0, [r3, #0]
   da612:	4baf      	ldr	r3, [pc, #700]	; (da8d0 <_tzset_unlocked_r+0x2e0>)
   da614:	6018      	str	r0, [r3, #0]
   da616:	4baf      	ldr	r3, [pc, #700]	; (da8d4 <_tzset_unlocked_r+0x2e4>)
   da618:	6830      	ldr	r0, [r6, #0]
   da61a:	601a      	str	r2, [r3, #0]
   da61c:	605a      	str	r2, [r3, #4]
   da61e:	f7fc f92f 	bl	d6880 <free>
   da622:	6035      	str	r5, [r6, #0]
   da624:	e148      	b.n	da8b8 <_tzset_unlocked_r+0x2c8>
   da626:	6831      	ldr	r1, [r6, #0]
   da628:	b979      	cbnz	r1, da64a <_tzset_unlocked_r+0x5a>
   da62a:	6830      	ldr	r0, [r6, #0]
   da62c:	f7fc f928 	bl	d6880 <free>
   da630:	4628      	mov	r0, r5
   da632:	f7fe ffa8 	bl	d9586 <strlen>
   da636:	1c41      	adds	r1, r0, #1
   da638:	4638      	mov	r0, r7
   da63a:	f7fc f951 	bl	d68e0 <_malloc_r>
   da63e:	6030      	str	r0, [r6, #0]
   da640:	b148      	cbz	r0, da656 <_tzset_unlocked_r+0x66>
   da642:	4629      	mov	r1, r5
   da644:	f7fe ff7c 	bl	d9540 <strcpy>
   da648:	e005      	b.n	da656 <_tzset_unlocked_r+0x66>
   da64a:	f7fe ff6f 	bl	d952c <strcmp>
   da64e:	2800      	cmp	r0, #0
   da650:	f000 8132 	beq.w	da8b8 <_tzset_unlocked_r+0x2c8>
   da654:	e7e9      	b.n	da62a <_tzset_unlocked_r+0x3a>
   da656:	782b      	ldrb	r3, [r5, #0]
   da658:	4a9f      	ldr	r2, [pc, #636]	; (da8d8 <_tzset_unlocked_r+0x2e8>)
   da65a:	49a0      	ldr	r1, [pc, #640]	; (da8dc <_tzset_unlocked_r+0x2ec>)
   da65c:	2b3a      	cmp	r3, #58	; 0x3a
   da65e:	bf08      	it	eq
   da660:	3501      	addeq	r5, #1
   da662:	ae0a      	add	r6, sp, #40	; 0x28
   da664:	4633      	mov	r3, r6
   da666:	4628      	mov	r0, r5
   da668:	f7fc f922 	bl	d68b0 <siscanf>
   da66c:	2800      	cmp	r0, #0
   da66e:	f340 8123 	ble.w	da8b8 <_tzset_unlocked_r+0x2c8>
   da672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da674:	18ef      	adds	r7, r5, r3
   da676:	5ceb      	ldrb	r3, [r5, r3]
   da678:	2b2d      	cmp	r3, #45	; 0x2d
   da67a:	d103      	bne.n	da684 <_tzset_unlocked_r+0x94>
   da67c:	3701      	adds	r7, #1
   da67e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   da682:	e003      	b.n	da68c <_tzset_unlocked_r+0x9c>
   da684:	2b2b      	cmp	r3, #43	; 0x2b
   da686:	bf08      	it	eq
   da688:	3701      	addeq	r7, #1
   da68a:	2501      	movs	r5, #1
   da68c:	f10d 0a20 	add.w	sl, sp, #32
   da690:	f10d 0b1e 	add.w	fp, sp, #30
   da694:	f04f 0800 	mov.w	r8, #0
   da698:	9603      	str	r6, [sp, #12]
   da69a:	f8cd a008 	str.w	sl, [sp, #8]
   da69e:	9601      	str	r6, [sp, #4]
   da6a0:	f8cd b000 	str.w	fp, [sp]
   da6a4:	4633      	mov	r3, r6
   da6a6:	aa07      	add	r2, sp, #28
   da6a8:	498d      	ldr	r1, [pc, #564]	; (da8e0 <_tzset_unlocked_r+0x2f0>)
   da6aa:	f8ad 801e 	strh.w	r8, [sp, #30]
   da6ae:	4638      	mov	r0, r7
   da6b0:	f8ad 8020 	strh.w	r8, [sp, #32]
   da6b4:	f7fc f8fc 	bl	d68b0 <siscanf>
   da6b8:	4540      	cmp	r0, r8
   da6ba:	f340 80fd 	ble.w	da8b8 <_tzset_unlocked_r+0x2c8>
   da6be:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da6c2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da6c6:	f8df 9224 	ldr.w	r9, [pc, #548]	; da8ec <_tzset_unlocked_r+0x2fc>
   da6ca:	213c      	movs	r1, #60	; 0x3c
   da6cc:	fb01 3302 	mla	r3, r1, r2, r3
   da6d0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da6d4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da6d8:	fb01 3302 	mla	r3, r1, r2, r3
   da6dc:	435d      	muls	r5, r3
   da6de:	6225      	str	r5, [r4, #32]
   da6e0:	4d7c      	ldr	r5, [pc, #496]	; (da8d4 <_tzset_unlocked_r+0x2e4>)
   da6e2:	4b7d      	ldr	r3, [pc, #500]	; (da8d8 <_tzset_unlocked_r+0x2e8>)
   da6e4:	602b      	str	r3, [r5, #0]
   da6e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da6e8:	497c      	ldr	r1, [pc, #496]	; (da8dc <_tzset_unlocked_r+0x2ec>)
   da6ea:	441f      	add	r7, r3
   da6ec:	464a      	mov	r2, r9
   da6ee:	4633      	mov	r3, r6
   da6f0:	4638      	mov	r0, r7
   da6f2:	f7fc f8dd 	bl	d68b0 <siscanf>
   da6f6:	4540      	cmp	r0, r8
   da6f8:	dc08      	bgt.n	da70c <_tzset_unlocked_r+0x11c>
   da6fa:	682b      	ldr	r3, [r5, #0]
   da6fc:	606b      	str	r3, [r5, #4]
   da6fe:	4b72      	ldr	r3, [pc, #456]	; (da8c8 <_tzset_unlocked_r+0x2d8>)
   da700:	6a22      	ldr	r2, [r4, #32]
   da702:	601a      	str	r2, [r3, #0]
   da704:	4b72      	ldr	r3, [pc, #456]	; (da8d0 <_tzset_unlocked_r+0x2e0>)
   da706:	f8c3 8000 	str.w	r8, [r3]
   da70a:	e0d5      	b.n	da8b8 <_tzset_unlocked_r+0x2c8>
   da70c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da70e:	f8c5 9004 	str.w	r9, [r5, #4]
   da712:	18fd      	adds	r5, r7, r3
   da714:	5cfb      	ldrb	r3, [r7, r3]
   da716:	2b2d      	cmp	r3, #45	; 0x2d
   da718:	d103      	bne.n	da722 <_tzset_unlocked_r+0x132>
   da71a:	3501      	adds	r5, #1
   da71c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   da720:	e003      	b.n	da72a <_tzset_unlocked_r+0x13a>
   da722:	2b2b      	cmp	r3, #43	; 0x2b
   da724:	bf08      	it	eq
   da726:	3501      	addeq	r5, #1
   da728:	2701      	movs	r7, #1
   da72a:	2300      	movs	r3, #0
   da72c:	f8ad 301c 	strh.w	r3, [sp, #28]
   da730:	f8ad 301e 	strh.w	r3, [sp, #30]
   da734:	f8ad 3020 	strh.w	r3, [sp, #32]
   da738:	930a      	str	r3, [sp, #40]	; 0x28
   da73a:	9603      	str	r6, [sp, #12]
   da73c:	f8cd a008 	str.w	sl, [sp, #8]
   da740:	9601      	str	r6, [sp, #4]
   da742:	f8cd b000 	str.w	fp, [sp]
   da746:	4633      	mov	r3, r6
   da748:	aa07      	add	r2, sp, #28
   da74a:	4965      	ldr	r1, [pc, #404]	; (da8e0 <_tzset_unlocked_r+0x2f0>)
   da74c:	4628      	mov	r0, r5
   da74e:	f7fc f8af 	bl	d68b0 <siscanf>
   da752:	2800      	cmp	r0, #0
   da754:	dc04      	bgt.n	da760 <_tzset_unlocked_r+0x170>
   da756:	6a23      	ldr	r3, [r4, #32]
   da758:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   da75c:	63e3      	str	r3, [r4, #60]	; 0x3c
   da75e:	e00e      	b.n	da77e <_tzset_unlocked_r+0x18e>
   da760:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da764:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da768:	213c      	movs	r1, #60	; 0x3c
   da76a:	fb01 3302 	mla	r3, r1, r2, r3
   da76e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da772:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da776:	fb01 3302 	mla	r3, r1, r2, r3
   da77a:	435f      	muls	r7, r3
   da77c:	63e7      	str	r7, [r4, #60]	; 0x3c
   da77e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da780:	4627      	mov	r7, r4
   da782:	441d      	add	r5, r3
   da784:	f04f 0900 	mov.w	r9, #0
   da788:	782b      	ldrb	r3, [r5, #0]
   da78a:	2b2c      	cmp	r3, #44	; 0x2c
   da78c:	bf08      	it	eq
   da78e:	3501      	addeq	r5, #1
   da790:	f895 8000 	ldrb.w	r8, [r5]
   da794:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   da798:	d126      	bne.n	da7e8 <_tzset_unlocked_r+0x1f8>
   da79a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   da79e:	9302      	str	r3, [sp, #8]
   da7a0:	ab09      	add	r3, sp, #36	; 0x24
   da7a2:	9300      	str	r3, [sp, #0]
   da7a4:	9603      	str	r6, [sp, #12]
   da7a6:	9601      	str	r6, [sp, #4]
   da7a8:	4633      	mov	r3, r6
   da7aa:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   da7ae:	494d      	ldr	r1, [pc, #308]	; (da8e4 <_tzset_unlocked_r+0x2f4>)
   da7b0:	4628      	mov	r0, r5
   da7b2:	f7fc f87d 	bl	d68b0 <siscanf>
   da7b6:	2803      	cmp	r0, #3
   da7b8:	d17e      	bne.n	da8b8 <_tzset_unlocked_r+0x2c8>
   da7ba:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   da7be:	1e4b      	subs	r3, r1, #1
   da7c0:	2b0b      	cmp	r3, #11
   da7c2:	d879      	bhi.n	da8b8 <_tzset_unlocked_r+0x2c8>
   da7c4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   da7c8:	1e53      	subs	r3, r2, #1
   da7ca:	2b04      	cmp	r3, #4
   da7cc:	d874      	bhi.n	da8b8 <_tzset_unlocked_r+0x2c8>
   da7ce:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   da7d2:	2b06      	cmp	r3, #6
   da7d4:	d870      	bhi.n	da8b8 <_tzset_unlocked_r+0x2c8>
   da7d6:	f887 8008 	strb.w	r8, [r7, #8]
   da7da:	60f9      	str	r1, [r7, #12]
   da7dc:	613a      	str	r2, [r7, #16]
   da7de:	617b      	str	r3, [r7, #20]
   da7e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da7e2:	eb05 0803 	add.w	r8, r5, r3
   da7e6:	e02a      	b.n	da83e <_tzset_unlocked_r+0x24e>
   da7e8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   da7ec:	bf06      	itte	eq
   da7ee:	3501      	addeq	r5, #1
   da7f0:	4643      	moveq	r3, r8
   da7f2:	2344      	movne	r3, #68	; 0x44
   da7f4:	220a      	movs	r2, #10
   da7f6:	a90b      	add	r1, sp, #44	; 0x2c
   da7f8:	4628      	mov	r0, r5
   da7fa:	9305      	str	r3, [sp, #20]
   da7fc:	f7ff fe3e 	bl	da47c <strtoul>
   da800:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   da804:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   da808:	4545      	cmp	r5, r8
   da80a:	9b05      	ldr	r3, [sp, #20]
   da80c:	d114      	bne.n	da838 <_tzset_unlocked_r+0x248>
   da80e:	234d      	movs	r3, #77	; 0x4d
   da810:	f1b9 0f00 	cmp.w	r9, #0
   da814:	d107      	bne.n	da826 <_tzset_unlocked_r+0x236>
   da816:	7223      	strb	r3, [r4, #8]
   da818:	2303      	movs	r3, #3
   da81a:	60e3      	str	r3, [r4, #12]
   da81c:	2302      	movs	r3, #2
   da81e:	6123      	str	r3, [r4, #16]
   da820:	f8c4 9014 	str.w	r9, [r4, #20]
   da824:	e00b      	b.n	da83e <_tzset_unlocked_r+0x24e>
   da826:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   da82a:	230b      	movs	r3, #11
   da82c:	62a3      	str	r3, [r4, #40]	; 0x28
   da82e:	2301      	movs	r3, #1
   da830:	62e3      	str	r3, [r4, #44]	; 0x2c
   da832:	2300      	movs	r3, #0
   da834:	6323      	str	r3, [r4, #48]	; 0x30
   da836:	e002      	b.n	da83e <_tzset_unlocked_r+0x24e>
   da838:	b280      	uxth	r0, r0
   da83a:	723b      	strb	r3, [r7, #8]
   da83c:	6178      	str	r0, [r7, #20]
   da83e:	2302      	movs	r3, #2
   da840:	f8ad 301c 	strh.w	r3, [sp, #28]
   da844:	2300      	movs	r3, #0
   da846:	f8ad 301e 	strh.w	r3, [sp, #30]
   da84a:	f8ad 3020 	strh.w	r3, [sp, #32]
   da84e:	930a      	str	r3, [sp, #40]	; 0x28
   da850:	f898 3000 	ldrb.w	r3, [r8]
   da854:	2b2f      	cmp	r3, #47	; 0x2f
   da856:	d10b      	bne.n	da870 <_tzset_unlocked_r+0x280>
   da858:	9603      	str	r6, [sp, #12]
   da85a:	f8cd a008 	str.w	sl, [sp, #8]
   da85e:	9601      	str	r6, [sp, #4]
   da860:	f8cd b000 	str.w	fp, [sp]
   da864:	4633      	mov	r3, r6
   da866:	aa07      	add	r2, sp, #28
   da868:	491f      	ldr	r1, [pc, #124]	; (da8e8 <_tzset_unlocked_r+0x2f8>)
   da86a:	4640      	mov	r0, r8
   da86c:	f7fc f820 	bl	d68b0 <siscanf>
   da870:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da874:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da878:	213c      	movs	r1, #60	; 0x3c
   da87a:	fb01 3302 	mla	r3, r1, r2, r3
   da87e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da882:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da886:	fb01 3302 	mla	r3, r1, r2, r3
   da88a:	61bb      	str	r3, [r7, #24]
   da88c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   da88e:	f109 0901 	add.w	r9, r9, #1
   da892:	f1b9 0f02 	cmp.w	r9, #2
   da896:	4445      	add	r5, r8
   da898:	f107 071c 	add.w	r7, r7, #28
   da89c:	f47f af74 	bne.w	da788 <_tzset_unlocked_r+0x198>
   da8a0:	6860      	ldr	r0, [r4, #4]
   da8a2:	f7ff fdf5 	bl	da490 <__tzcalc_limits>
   da8a6:	4b08      	ldr	r3, [pc, #32]	; (da8c8 <_tzset_unlocked_r+0x2d8>)
   da8a8:	6a22      	ldr	r2, [r4, #32]
   da8aa:	601a      	str	r2, [r3, #0]
   da8ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   da8ae:	1a9b      	subs	r3, r3, r2
   da8b0:	4a07      	ldr	r2, [pc, #28]	; (da8d0 <_tzset_unlocked_r+0x2e0>)
   da8b2:	bf18      	it	ne
   da8b4:	2301      	movne	r3, #1
   da8b6:	6013      	str	r3, [r2, #0]
   da8b8:	b00d      	add	sp, #52	; 0x34
   da8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da8be:	bf00      	nop
   da8c0:	000dc3a8 	.word	0x000dc3a8
   da8c4:	2003e7e0 	.word	0x2003e7e0
   da8c8:	2003e7e8 	.word	0x2003e7e8
   da8cc:	000dc3ab 	.word	0x000dc3ab
   da8d0:	2003e7e4 	.word	0x2003e7e4
   da8d4:	2003e148 	.word	0x2003e148
   da8d8:	2003e7d3 	.word	0x2003e7d3
   da8dc:	000dc3af 	.word	0x000dc3af
   da8e0:	000dc3d2 	.word	0x000dc3d2
   da8e4:	000dc3be 	.word	0x000dc3be
   da8e8:	000dc3d1 	.word	0x000dc3d1
   da8ec:	2003e7c8 	.word	0x2003e7c8

000da8f0 <rshift>:
   da8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   da8f2:	6906      	ldr	r6, [r0, #16]
   da8f4:	114b      	asrs	r3, r1, #5
   da8f6:	42b3      	cmp	r3, r6
   da8f8:	f100 0514 	add.w	r5, r0, #20
   da8fc:	da27      	bge.n	da94e <rshift+0x5e>
   da8fe:	f011 011f 	ands.w	r1, r1, #31
   da902:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   da906:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   da90a:	d101      	bne.n	da910 <rshift+0x20>
   da90c:	4629      	mov	r1, r5
   da90e:	e016      	b.n	da93e <rshift+0x4e>
   da910:	1d14      	adds	r4, r2, #4
   da912:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   da916:	f1c1 0e20 	rsb	lr, r1, #32
   da91a:	40ca      	lsrs	r2, r1
   da91c:	462b      	mov	r3, r5
   da91e:	42b4      	cmp	r4, r6
   da920:	d209      	bcs.n	da936 <rshift+0x46>
   da922:	6827      	ldr	r7, [r4, #0]
   da924:	fa07 f70e 	lsl.w	r7, r7, lr
   da928:	433a      	orrs	r2, r7
   da92a:	f843 2b04 	str.w	r2, [r3], #4
   da92e:	f854 2b04 	ldr.w	r2, [r4], #4
   da932:	40ca      	lsrs	r2, r1
   da934:	e7f3      	b.n	da91e <rshift+0x2e>
   da936:	601a      	str	r2, [r3, #0]
   da938:	b152      	cbz	r2, da950 <rshift+0x60>
   da93a:	3304      	adds	r3, #4
   da93c:	e008      	b.n	da950 <rshift+0x60>
   da93e:	42b2      	cmp	r2, r6
   da940:	460b      	mov	r3, r1
   da942:	d205      	bcs.n	da950 <rshift+0x60>
   da944:	f852 3b04 	ldr.w	r3, [r2], #4
   da948:	f841 3b04 	str.w	r3, [r1], #4
   da94c:	e7f7      	b.n	da93e <rshift+0x4e>
   da94e:	462b      	mov	r3, r5
   da950:	1b5b      	subs	r3, r3, r5
   da952:	109b      	asrs	r3, r3, #2
   da954:	6103      	str	r3, [r0, #16]
   da956:	b903      	cbnz	r3, da95a <rshift+0x6a>
   da958:	6143      	str	r3, [r0, #20]
   da95a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000da95c <__hexdig_fun>:
   da95c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   da960:	2b09      	cmp	r3, #9
   da962:	d801      	bhi.n	da968 <__hexdig_fun+0xc>
   da964:	3820      	subs	r0, #32
   da966:	e00a      	b.n	da97e <__hexdig_fun+0x22>
   da968:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   da96c:	2b05      	cmp	r3, #5
   da96e:	d801      	bhi.n	da974 <__hexdig_fun+0x18>
   da970:	3847      	subs	r0, #71	; 0x47
   da972:	e004      	b.n	da97e <__hexdig_fun+0x22>
   da974:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   da978:	2b05      	cmp	r3, #5
   da97a:	d802      	bhi.n	da982 <__hexdig_fun+0x26>
   da97c:	3827      	subs	r0, #39	; 0x27
   da97e:	b2c0      	uxtb	r0, r0
   da980:	4770      	bx	lr
   da982:	2000      	movs	r0, #0
   da984:	4770      	bx	lr

000da986 <__gethex>:
   da986:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da98a:	b08b      	sub	sp, #44	; 0x2c
   da98c:	468a      	mov	sl, r1
   da98e:	4690      	mov	r8, r2
   da990:	9306      	str	r3, [sp, #24]
   da992:	9002      	str	r0, [sp, #8]
   da994:	f7fe fd70 	bl	d9478 <_localeconv_r>
   da998:	6803      	ldr	r3, [r0, #0]
   da99a:	9303      	str	r3, [sp, #12]
   da99c:	4618      	mov	r0, r3
   da99e:	f7fe fdf2 	bl	d9586 <strlen>
   da9a2:	9b03      	ldr	r3, [sp, #12]
   da9a4:	9001      	str	r0, [sp, #4]
   da9a6:	4403      	add	r3, r0
   da9a8:	f04f 0b00 	mov.w	fp, #0
   da9ac:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   da9b0:	9307      	str	r3, [sp, #28]
   da9b2:	f8da 3000 	ldr.w	r3, [sl]
   da9b6:	3302      	adds	r3, #2
   da9b8:	461f      	mov	r7, r3
   da9ba:	f813 0b01 	ldrb.w	r0, [r3], #1
   da9be:	2830      	cmp	r0, #48	; 0x30
   da9c0:	d102      	bne.n	da9c8 <__gethex+0x42>
   da9c2:	f10b 0b01 	add.w	fp, fp, #1
   da9c6:	e7f7      	b.n	da9b8 <__gethex+0x32>
   da9c8:	f7ff ffc8 	bl	da95c <__hexdig_fun>
   da9cc:	4604      	mov	r4, r0
   da9ce:	b9e0      	cbnz	r0, daa0a <__gethex+0x84>
   da9d0:	9a01      	ldr	r2, [sp, #4]
   da9d2:	9903      	ldr	r1, [sp, #12]
   da9d4:	4638      	mov	r0, r7
   da9d6:	f7fe fdde 	bl	d9596 <strncmp>
   da9da:	2800      	cmp	r0, #0
   da9dc:	d134      	bne.n	daa48 <__gethex+0xc2>
   da9de:	9b01      	ldr	r3, [sp, #4]
   da9e0:	5cf8      	ldrb	r0, [r7, r3]
   da9e2:	18fe      	adds	r6, r7, r3
   da9e4:	f7ff ffba 	bl	da95c <__hexdig_fun>
   da9e8:	b380      	cbz	r0, daa4c <__gethex+0xc6>
   da9ea:	4633      	mov	r3, r6
   da9ec:	7818      	ldrb	r0, [r3, #0]
   da9ee:	2830      	cmp	r0, #48	; 0x30
   da9f0:	461f      	mov	r7, r3
   da9f2:	f103 0301 	add.w	r3, r3, #1
   da9f6:	d0f9      	beq.n	da9ec <__gethex+0x66>
   da9f8:	f7ff ffb0 	bl	da95c <__hexdig_fun>
   da9fc:	fab0 f580 	clz	r5, r0
   daa00:	096d      	lsrs	r5, r5, #5
   daa02:	4634      	mov	r4, r6
   daa04:	f04f 0b01 	mov.w	fp, #1
   daa08:	e001      	b.n	daa0e <__gethex+0x88>
   daa0a:	2500      	movs	r5, #0
   daa0c:	462c      	mov	r4, r5
   daa0e:	463a      	mov	r2, r7
   daa10:	4616      	mov	r6, r2
   daa12:	3201      	adds	r2, #1
   daa14:	7830      	ldrb	r0, [r6, #0]
   daa16:	f7ff ffa1 	bl	da95c <__hexdig_fun>
   daa1a:	2800      	cmp	r0, #0
   daa1c:	d1f8      	bne.n	daa10 <__gethex+0x8a>
   daa1e:	9a01      	ldr	r2, [sp, #4]
   daa20:	9903      	ldr	r1, [sp, #12]
   daa22:	4630      	mov	r0, r6
   daa24:	f7fe fdb7 	bl	d9596 <strncmp>
   daa28:	b950      	cbnz	r0, daa40 <__gethex+0xba>
   daa2a:	b954      	cbnz	r4, daa42 <__gethex+0xbc>
   daa2c:	9b01      	ldr	r3, [sp, #4]
   daa2e:	18f4      	adds	r4, r6, r3
   daa30:	4622      	mov	r2, r4
   daa32:	4616      	mov	r6, r2
   daa34:	3201      	adds	r2, #1
   daa36:	7830      	ldrb	r0, [r6, #0]
   daa38:	f7ff ff90 	bl	da95c <__hexdig_fun>
   daa3c:	2800      	cmp	r0, #0
   daa3e:	d1f8      	bne.n	daa32 <__gethex+0xac>
   daa40:	b134      	cbz	r4, daa50 <__gethex+0xca>
   daa42:	1ba4      	subs	r4, r4, r6
   daa44:	00a4      	lsls	r4, r4, #2
   daa46:	e003      	b.n	daa50 <__gethex+0xca>
   daa48:	463e      	mov	r6, r7
   daa4a:	e000      	b.n	daa4e <__gethex+0xc8>
   daa4c:	4604      	mov	r4, r0
   daa4e:	2501      	movs	r5, #1
   daa50:	7833      	ldrb	r3, [r6, #0]
   daa52:	2b50      	cmp	r3, #80	; 0x50
   daa54:	d001      	beq.n	daa5a <__gethex+0xd4>
   daa56:	2b70      	cmp	r3, #112	; 0x70
   daa58:	d12a      	bne.n	daab0 <__gethex+0x12a>
   daa5a:	7873      	ldrb	r3, [r6, #1]
   daa5c:	2b2b      	cmp	r3, #43	; 0x2b
   daa5e:	d008      	beq.n	daa72 <__gethex+0xec>
   daa60:	2b2d      	cmp	r3, #45	; 0x2d
   daa62:	d003      	beq.n	daa6c <__gethex+0xe6>
   daa64:	1c71      	adds	r1, r6, #1
   daa66:	f04f 0900 	mov.w	r9, #0
   daa6a:	e005      	b.n	daa78 <__gethex+0xf2>
   daa6c:	f04f 0901 	mov.w	r9, #1
   daa70:	e001      	b.n	daa76 <__gethex+0xf0>
   daa72:	f04f 0900 	mov.w	r9, #0
   daa76:	1cb1      	adds	r1, r6, #2
   daa78:	7808      	ldrb	r0, [r1, #0]
   daa7a:	f7ff ff6f 	bl	da95c <__hexdig_fun>
   daa7e:	1e43      	subs	r3, r0, #1
   daa80:	b2db      	uxtb	r3, r3
   daa82:	2b18      	cmp	r3, #24
   daa84:	d814      	bhi.n	daab0 <__gethex+0x12a>
   daa86:	f1a0 0210 	sub.w	r2, r0, #16
   daa8a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   daa8e:	f7ff ff65 	bl	da95c <__hexdig_fun>
   daa92:	1e43      	subs	r3, r0, #1
   daa94:	b2db      	uxtb	r3, r3
   daa96:	2b18      	cmp	r3, #24
   daa98:	d804      	bhi.n	daaa4 <__gethex+0x11e>
   daa9a:	230a      	movs	r3, #10
   daa9c:	fb03 0202 	mla	r2, r3, r2, r0
   daaa0:	3a10      	subs	r2, #16
   daaa2:	e7f2      	b.n	daa8a <__gethex+0x104>
   daaa4:	f1b9 0f00 	cmp.w	r9, #0
   daaa8:	d000      	beq.n	daaac <__gethex+0x126>
   daaaa:	4252      	negs	r2, r2
   daaac:	4414      	add	r4, r2
   daaae:	e000      	b.n	daab2 <__gethex+0x12c>
   daab0:	4631      	mov	r1, r6
   daab2:	f8ca 1000 	str.w	r1, [sl]
   daab6:	b12d      	cbz	r5, daac4 <__gethex+0x13e>
   daab8:	f1bb 0f00 	cmp.w	fp, #0
   daabc:	bf14      	ite	ne
   daabe:	2000      	movne	r0, #0
   daac0:	2006      	moveq	r0, #6
   daac2:	e17c      	b.n	dadbe <__gethex+0x438>
   daac4:	1bf3      	subs	r3, r6, r7
   daac6:	3b01      	subs	r3, #1
   daac8:	4629      	mov	r1, r5
   daaca:	2b07      	cmp	r3, #7
   daacc:	dd02      	ble.n	daad4 <__gethex+0x14e>
   daace:	3101      	adds	r1, #1
   daad0:	105b      	asrs	r3, r3, #1
   daad2:	e7fa      	b.n	daaca <__gethex+0x144>
   daad4:	9802      	ldr	r0, [sp, #8]
   daad6:	f000 fb09 	bl	db0ec <_Balloc>
   daada:	9b01      	ldr	r3, [sp, #4]
   daadc:	f100 0a14 	add.w	sl, r0, #20
   daae0:	f04f 0900 	mov.w	r9, #0
   daae4:	f1c3 0301 	rsb	r3, r3, #1
   daae8:	4605      	mov	r5, r0
   daaea:	f8cd a010 	str.w	sl, [sp, #16]
   daaee:	46cb      	mov	fp, r9
   daaf0:	9308      	str	r3, [sp, #32]
   daaf2:	42b7      	cmp	r7, r6
   daaf4:	d22f      	bcs.n	dab56 <__gethex+0x1d0>
   daaf6:	1e73      	subs	r3, r6, #1
   daaf8:	9305      	str	r3, [sp, #20]
   daafa:	9a07      	ldr	r2, [sp, #28]
   daafc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dab00:	4293      	cmp	r3, r2
   dab02:	d00b      	beq.n	dab1c <__gethex+0x196>
   dab04:	f1bb 0f20 	cmp.w	fp, #32
   dab08:	d116      	bne.n	dab38 <__gethex+0x1b2>
   dab0a:	9b04      	ldr	r3, [sp, #16]
   dab0c:	f8c3 9000 	str.w	r9, [r3]
   dab10:	3304      	adds	r3, #4
   dab12:	f04f 0900 	mov.w	r9, #0
   dab16:	9304      	str	r3, [sp, #16]
   dab18:	46cb      	mov	fp, r9
   dab1a:	e00d      	b.n	dab38 <__gethex+0x1b2>
   dab1c:	9b05      	ldr	r3, [sp, #20]
   dab1e:	9a08      	ldr	r2, [sp, #32]
   dab20:	4413      	add	r3, r2
   dab22:	429f      	cmp	r7, r3
   dab24:	d8ee      	bhi.n	dab04 <__gethex+0x17e>
   dab26:	4618      	mov	r0, r3
   dab28:	9a01      	ldr	r2, [sp, #4]
   dab2a:	9903      	ldr	r1, [sp, #12]
   dab2c:	9309      	str	r3, [sp, #36]	; 0x24
   dab2e:	f7fe fd32 	bl	d9596 <strncmp>
   dab32:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dab34:	b168      	cbz	r0, dab52 <__gethex+0x1cc>
   dab36:	e7e5      	b.n	dab04 <__gethex+0x17e>
   dab38:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dab3c:	f7ff ff0e 	bl	da95c <__hexdig_fun>
   dab40:	f000 000f 	and.w	r0, r0, #15
   dab44:	fa00 f00b 	lsl.w	r0, r0, fp
   dab48:	9b05      	ldr	r3, [sp, #20]
   dab4a:	ea49 0900 	orr.w	r9, r9, r0
   dab4e:	f10b 0b04 	add.w	fp, fp, #4
   dab52:	461e      	mov	r6, r3
   dab54:	e7cd      	b.n	daaf2 <__gethex+0x16c>
   dab56:	9804      	ldr	r0, [sp, #16]
   dab58:	f840 9b04 	str.w	r9, [r0], #4
   dab5c:	ebca 0000 	rsb	r0, sl, r0
   dab60:	1080      	asrs	r0, r0, #2
   dab62:	6128      	str	r0, [r5, #16]
   dab64:	0147      	lsls	r7, r0, #5
   dab66:	4648      	mov	r0, r9
   dab68:	f000 fb85 	bl	db276 <__hi0bits>
   dab6c:	f8d8 6000 	ldr.w	r6, [r8]
   dab70:	1a38      	subs	r0, r7, r0
   dab72:	42b0      	cmp	r0, r6
   dab74:	dd26      	ble.n	dabc4 <__gethex+0x23e>
   dab76:	1b87      	subs	r7, r0, r6
   dab78:	4639      	mov	r1, r7
   dab7a:	4628      	mov	r0, r5
   dab7c:	f000 fe83 	bl	db886 <__any_on>
   dab80:	b1c8      	cbz	r0, dabb6 <__gethex+0x230>
   dab82:	1e7b      	subs	r3, r7, #1
   dab84:	1159      	asrs	r1, r3, #5
   dab86:	f003 021f 	and.w	r2, r3, #31
   dab8a:	f04f 0901 	mov.w	r9, #1
   dab8e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   dab92:	fa09 f202 	lsl.w	r2, r9, r2
   dab96:	420a      	tst	r2, r1
   dab98:	d00e      	beq.n	dabb8 <__gethex+0x232>
   dab9a:	454b      	cmp	r3, r9
   dab9c:	dc02      	bgt.n	daba4 <__gethex+0x21e>
   dab9e:	f04f 0902 	mov.w	r9, #2
   daba2:	e009      	b.n	dabb8 <__gethex+0x232>
   daba4:	1eb9      	subs	r1, r7, #2
   daba6:	4628      	mov	r0, r5
   daba8:	f000 fe6d 	bl	db886 <__any_on>
   dabac:	2800      	cmp	r0, #0
   dabae:	d0f6      	beq.n	dab9e <__gethex+0x218>
   dabb0:	f04f 0903 	mov.w	r9, #3
   dabb4:	e000      	b.n	dabb8 <__gethex+0x232>
   dabb6:	4681      	mov	r9, r0
   dabb8:	4639      	mov	r1, r7
   dabba:	4628      	mov	r0, r5
   dabbc:	f7ff fe98 	bl	da8f0 <rshift>
   dabc0:	443c      	add	r4, r7
   dabc2:	e00c      	b.n	dabde <__gethex+0x258>
   dabc4:	da09      	bge.n	dabda <__gethex+0x254>
   dabc6:	1a37      	subs	r7, r6, r0
   dabc8:	4629      	mov	r1, r5
   dabca:	463a      	mov	r2, r7
   dabcc:	9802      	ldr	r0, [sp, #8]
   dabce:	f000 fc87 	bl	db4e0 <__lshift>
   dabd2:	1be4      	subs	r4, r4, r7
   dabd4:	4605      	mov	r5, r0
   dabd6:	f100 0a14 	add.w	sl, r0, #20
   dabda:	f04f 0900 	mov.w	r9, #0
   dabde:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dabe2:	429c      	cmp	r4, r3
   dabe4:	dd08      	ble.n	dabf8 <__gethex+0x272>
   dabe6:	9802      	ldr	r0, [sp, #8]
   dabe8:	4629      	mov	r1, r5
   dabea:	f000 fab4 	bl	db156 <_Bfree>
   dabee:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dabf0:	2300      	movs	r3, #0
   dabf2:	6013      	str	r3, [r2, #0]
   dabf4:	20a3      	movs	r0, #163	; 0xa3
   dabf6:	e0e2      	b.n	dadbe <__gethex+0x438>
   dabf8:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dabfc:	4284      	cmp	r4, r0
   dabfe:	da53      	bge.n	daca8 <__gethex+0x322>
   dac00:	1b04      	subs	r4, r0, r4
   dac02:	42a6      	cmp	r6, r4
   dac04:	dc2e      	bgt.n	dac64 <__gethex+0x2de>
   dac06:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dac0a:	2b02      	cmp	r3, #2
   dac0c:	d01a      	beq.n	dac44 <__gethex+0x2be>
   dac0e:	2b03      	cmp	r3, #3
   dac10:	d01c      	beq.n	dac4c <__gethex+0x2c6>
   dac12:	2b01      	cmp	r3, #1
   dac14:	d11d      	bne.n	dac52 <__gethex+0x2cc>
   dac16:	42a6      	cmp	r6, r4
   dac18:	d11b      	bne.n	dac52 <__gethex+0x2cc>
   dac1a:	2e01      	cmp	r6, #1
   dac1c:	dc0b      	bgt.n	dac36 <__gethex+0x2b0>
   dac1e:	9a06      	ldr	r2, [sp, #24]
   dac20:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dac24:	6013      	str	r3, [r2, #0]
   dac26:	2301      	movs	r3, #1
   dac28:	612b      	str	r3, [r5, #16]
   dac2a:	f8ca 3000 	str.w	r3, [sl]
   dac2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dac30:	2062      	movs	r0, #98	; 0x62
   dac32:	601d      	str	r5, [r3, #0]
   dac34:	e0c3      	b.n	dadbe <__gethex+0x438>
   dac36:	1e71      	subs	r1, r6, #1
   dac38:	4628      	mov	r0, r5
   dac3a:	f000 fe24 	bl	db886 <__any_on>
   dac3e:	2800      	cmp	r0, #0
   dac40:	d1ed      	bne.n	dac1e <__gethex+0x298>
   dac42:	e006      	b.n	dac52 <__gethex+0x2cc>
   dac44:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dac46:	2b00      	cmp	r3, #0
   dac48:	d0e9      	beq.n	dac1e <__gethex+0x298>
   dac4a:	e002      	b.n	dac52 <__gethex+0x2cc>
   dac4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dac4e:	2b00      	cmp	r3, #0
   dac50:	d1e5      	bne.n	dac1e <__gethex+0x298>
   dac52:	9802      	ldr	r0, [sp, #8]
   dac54:	4629      	mov	r1, r5
   dac56:	f000 fa7e 	bl	db156 <_Bfree>
   dac5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dac5c:	2300      	movs	r3, #0
   dac5e:	6013      	str	r3, [r2, #0]
   dac60:	2050      	movs	r0, #80	; 0x50
   dac62:	e0ac      	b.n	dadbe <__gethex+0x438>
   dac64:	1e67      	subs	r7, r4, #1
   dac66:	f1b9 0f00 	cmp.w	r9, #0
   dac6a:	d106      	bne.n	dac7a <__gethex+0x2f4>
   dac6c:	b13f      	cbz	r7, dac7e <__gethex+0x2f8>
   dac6e:	4639      	mov	r1, r7
   dac70:	4628      	mov	r0, r5
   dac72:	f000 fe08 	bl	db886 <__any_on>
   dac76:	4681      	mov	r9, r0
   dac78:	e001      	b.n	dac7e <__gethex+0x2f8>
   dac7a:	f04f 0901 	mov.w	r9, #1
   dac7e:	117a      	asrs	r2, r7, #5
   dac80:	2301      	movs	r3, #1
   dac82:	f007 071f 	and.w	r7, r7, #31
   dac86:	fa03 f707 	lsl.w	r7, r3, r7
   dac8a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   dac8e:	4621      	mov	r1, r4
   dac90:	421f      	tst	r7, r3
   dac92:	4628      	mov	r0, r5
   dac94:	bf18      	it	ne
   dac96:	f049 0902 	orrne.w	r9, r9, #2
   dac9a:	1b36      	subs	r6, r6, r4
   dac9c:	f7ff fe28 	bl	da8f0 <rshift>
   daca0:	2702      	movs	r7, #2
   daca2:	f8d8 4004 	ldr.w	r4, [r8, #4]
   daca6:	e000      	b.n	dacaa <__gethex+0x324>
   daca8:	2701      	movs	r7, #1
   dacaa:	f1b9 0f00 	cmp.w	r9, #0
   dacae:	f000 8081 	beq.w	dadb4 <__gethex+0x42e>
   dacb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dacb6:	2b02      	cmp	r3, #2
   dacb8:	d00e      	beq.n	dacd8 <__gethex+0x352>
   dacba:	2b03      	cmp	r3, #3
   dacbc:	d010      	beq.n	dace0 <__gethex+0x35a>
   dacbe:	2b01      	cmp	r3, #1
   dacc0:	d176      	bne.n	dadb0 <__gethex+0x42a>
   dacc2:	f019 0f02 	tst.w	r9, #2
   dacc6:	d073      	beq.n	dadb0 <__gethex+0x42a>
   dacc8:	f8da 0000 	ldr.w	r0, [sl]
   daccc:	ea49 0900 	orr.w	r9, r9, r0
   dacd0:	f019 0f01 	tst.w	r9, #1
   dacd4:	d107      	bne.n	dace6 <__gethex+0x360>
   dacd6:	e06b      	b.n	dadb0 <__gethex+0x42a>
   dacd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dacda:	f1c3 0301 	rsb	r3, r3, #1
   dacde:	9315      	str	r3, [sp, #84]	; 0x54
   dace0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dace2:	2b00      	cmp	r3, #0
   dace4:	d064      	beq.n	dadb0 <__gethex+0x42a>
   dace6:	f8d5 a010 	ldr.w	sl, [r5, #16]
   dacea:	f105 0314 	add.w	r3, r5, #20
   dacee:	ea4f 098a 	mov.w	r9, sl, lsl #2
   dacf2:	eb03 0109 	add.w	r1, r3, r9
   dacf6:	2000      	movs	r0, #0
   dacf8:	681a      	ldr	r2, [r3, #0]
   dacfa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dacfe:	d002      	beq.n	dad06 <__gethex+0x380>
   dad00:	3201      	adds	r2, #1
   dad02:	601a      	str	r2, [r3, #0]
   dad04:	e020      	b.n	dad48 <__gethex+0x3c2>
   dad06:	f843 0b04 	str.w	r0, [r3], #4
   dad0a:	4299      	cmp	r1, r3
   dad0c:	d8f4      	bhi.n	dacf8 <__gethex+0x372>
   dad0e:	68ab      	ldr	r3, [r5, #8]
   dad10:	459a      	cmp	sl, r3
   dad12:	db12      	blt.n	dad3a <__gethex+0x3b4>
   dad14:	6869      	ldr	r1, [r5, #4]
   dad16:	9802      	ldr	r0, [sp, #8]
   dad18:	3101      	adds	r1, #1
   dad1a:	f000 f9e7 	bl	db0ec <_Balloc>
   dad1e:	692a      	ldr	r2, [r5, #16]
   dad20:	3202      	adds	r2, #2
   dad22:	f105 010c 	add.w	r1, r5, #12
   dad26:	4683      	mov	fp, r0
   dad28:	0092      	lsls	r2, r2, #2
   dad2a:	300c      	adds	r0, #12
   dad2c:	f7fe fba8 	bl	d9480 <memcpy>
   dad30:	4629      	mov	r1, r5
   dad32:	9802      	ldr	r0, [sp, #8]
   dad34:	f000 fa0f 	bl	db156 <_Bfree>
   dad38:	465d      	mov	r5, fp
   dad3a:	692b      	ldr	r3, [r5, #16]
   dad3c:	1c5a      	adds	r2, r3, #1
   dad3e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   dad42:	612a      	str	r2, [r5, #16]
   dad44:	2201      	movs	r2, #1
   dad46:	615a      	str	r2, [r3, #20]
   dad48:	2f02      	cmp	r7, #2
   dad4a:	f105 0214 	add.w	r2, r5, #20
   dad4e:	d111      	bne.n	dad74 <__gethex+0x3ee>
   dad50:	f8d8 3000 	ldr.w	r3, [r8]
   dad54:	3b01      	subs	r3, #1
   dad56:	429e      	cmp	r6, r3
   dad58:	d127      	bne.n	dadaa <__gethex+0x424>
   dad5a:	1171      	asrs	r1, r6, #5
   dad5c:	2301      	movs	r3, #1
   dad5e:	f006 061f 	and.w	r6, r6, #31
   dad62:	fa03 f606 	lsl.w	r6, r3, r6
   dad66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   dad6a:	421e      	tst	r6, r3
   dad6c:	bf0c      	ite	eq
   dad6e:	2702      	moveq	r7, #2
   dad70:	2701      	movne	r7, #1
   dad72:	e01a      	b.n	dadaa <__gethex+0x424>
   dad74:	692b      	ldr	r3, [r5, #16]
   dad76:	459a      	cmp	sl, r3
   dad78:	da0a      	bge.n	dad90 <__gethex+0x40a>
   dad7a:	2101      	movs	r1, #1
   dad7c:	4628      	mov	r0, r5
   dad7e:	f7ff fdb7 	bl	da8f0 <rshift>
   dad82:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dad86:	3401      	adds	r4, #1
   dad88:	429c      	cmp	r4, r3
   dad8a:	f73f af2c 	bgt.w	dabe6 <__gethex+0x260>
   dad8e:	e00b      	b.n	dada8 <__gethex+0x422>
   dad90:	f016 061f 	ands.w	r6, r6, #31
   dad94:	d008      	beq.n	dada8 <__gethex+0x422>
   dad96:	4491      	add	r9, r2
   dad98:	f1c6 0620 	rsb	r6, r6, #32
   dad9c:	f859 0c04 	ldr.w	r0, [r9, #-4]
   dada0:	f000 fa69 	bl	db276 <__hi0bits>
   dada4:	42b0      	cmp	r0, r6
   dada6:	dbe8      	blt.n	dad7a <__gethex+0x3f4>
   dada8:	2701      	movs	r7, #1
   dadaa:	f047 0720 	orr.w	r7, r7, #32
   dadae:	e001      	b.n	dadb4 <__gethex+0x42e>
   dadb0:	f047 0710 	orr.w	r7, r7, #16
   dadb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dadb6:	601d      	str	r5, [r3, #0]
   dadb8:	9b06      	ldr	r3, [sp, #24]
   dadba:	4638      	mov	r0, r7
   dadbc:	601c      	str	r4, [r3, #0]
   dadbe:	b00b      	add	sp, #44	; 0x2c
   dadc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dadc4 <L_shift>:
   dadc4:	f1c2 0208 	rsb	r2, r2, #8
   dadc8:	0092      	lsls	r2, r2, #2
   dadca:	b570      	push	{r4, r5, r6, lr}
   dadcc:	f1c2 0620 	rsb	r6, r2, #32
   dadd0:	6843      	ldr	r3, [r0, #4]
   dadd2:	6805      	ldr	r5, [r0, #0]
   dadd4:	fa03 f406 	lsl.w	r4, r3, r6
   dadd8:	432c      	orrs	r4, r5
   dadda:	40d3      	lsrs	r3, r2
   daddc:	6004      	str	r4, [r0, #0]
   dadde:	f840 3f04 	str.w	r3, [r0, #4]!
   dade2:	4288      	cmp	r0, r1
   dade4:	d3f4      	bcc.n	dadd0 <L_shift+0xc>
   dade6:	bd70      	pop	{r4, r5, r6, pc}

000dade8 <__match>:
   dade8:	b530      	push	{r4, r5, lr}
   dadea:	6803      	ldr	r3, [r0, #0]
   dadec:	f811 4b01 	ldrb.w	r4, [r1], #1
   dadf0:	3301      	adds	r3, #1
   dadf2:	b14c      	cbz	r4, dae08 <__match+0x20>
   dadf4:	781a      	ldrb	r2, [r3, #0]
   dadf6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dadfa:	2d19      	cmp	r5, #25
   dadfc:	bf98      	it	ls
   dadfe:	3220      	addls	r2, #32
   dae00:	42a2      	cmp	r2, r4
   dae02:	d0f3      	beq.n	dadec <__match+0x4>
   dae04:	2000      	movs	r0, #0
   dae06:	bd30      	pop	{r4, r5, pc}
   dae08:	6003      	str	r3, [r0, #0]
   dae0a:	2001      	movs	r0, #1
   dae0c:	bd30      	pop	{r4, r5, pc}

000dae0e <__hexnan>:
   dae0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dae12:	680b      	ldr	r3, [r1, #0]
   dae14:	f8d0 b000 	ldr.w	fp, [r0]
   dae18:	115e      	asrs	r6, r3, #5
   dae1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dae1e:	f013 031f 	ands.w	r3, r3, #31
   dae22:	b085      	sub	sp, #20
   dae24:	bf18      	it	ne
   dae26:	3604      	addne	r6, #4
   dae28:	1f35      	subs	r5, r6, #4
   dae2a:	4617      	mov	r7, r2
   dae2c:	2200      	movs	r2, #0
   dae2e:	4682      	mov	sl, r0
   dae30:	9301      	str	r3, [sp, #4]
   dae32:	f846 2c04 	str.w	r2, [r6, #-4]
   dae36:	46a8      	mov	r8, r5
   dae38:	462c      	mov	r4, r5
   dae3a:	9200      	str	r2, [sp, #0]
   dae3c:	4691      	mov	r9, r2
   dae3e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   dae42:	2900      	cmp	r1, #0
   dae44:	d03c      	beq.n	daec0 <__hexnan+0xb2>
   dae46:	4608      	mov	r0, r1
   dae48:	9203      	str	r2, [sp, #12]
   dae4a:	9102      	str	r1, [sp, #8]
   dae4c:	f7ff fd86 	bl	da95c <__hexdig_fun>
   dae50:	9a03      	ldr	r2, [sp, #12]
   dae52:	bb00      	cbnz	r0, dae96 <__hexnan+0x88>
   dae54:	9902      	ldr	r1, [sp, #8]
   dae56:	2920      	cmp	r1, #32
   dae58:	d816      	bhi.n	dae88 <__hexnan+0x7a>
   dae5a:	9b00      	ldr	r3, [sp, #0]
   dae5c:	4599      	cmp	r9, r3
   dae5e:	ddee      	ble.n	dae3e <__hexnan+0x30>
   dae60:	4544      	cmp	r4, r8
   dae62:	d205      	bcs.n	dae70 <__hexnan+0x62>
   dae64:	2a07      	cmp	r2, #7
   dae66:	dc03      	bgt.n	dae70 <__hexnan+0x62>
   dae68:	4641      	mov	r1, r8
   dae6a:	4620      	mov	r0, r4
   dae6c:	f7ff ffaa 	bl	dadc4 <L_shift>
   dae70:	42bc      	cmp	r4, r7
   dae72:	d923      	bls.n	daebc <__hexnan+0xae>
   dae74:	2300      	movs	r3, #0
   dae76:	f1a4 0804 	sub.w	r8, r4, #4
   dae7a:	f844 3c04 	str.w	r3, [r4, #-4]
   dae7e:	f8cd 9000 	str.w	r9, [sp]
   dae82:	4644      	mov	r4, r8
   dae84:	461a      	mov	r2, r3
   dae86:	e7da      	b.n	dae3e <__hexnan+0x30>
   dae88:	2929      	cmp	r1, #41	; 0x29
   dae8a:	d148      	bne.n	daf1e <__hexnan+0x110>
   dae8c:	f10b 0301 	add.w	r3, fp, #1
   dae90:	f8ca 3000 	str.w	r3, [sl]
   dae94:	e014      	b.n	daec0 <__hexnan+0xb2>
   dae96:	3201      	adds	r2, #1
   dae98:	2a08      	cmp	r2, #8
   dae9a:	f109 0901 	add.w	r9, r9, #1
   dae9e:	dd06      	ble.n	daeae <__hexnan+0xa0>
   daea0:	42bc      	cmp	r4, r7
   daea2:	d9cc      	bls.n	dae3e <__hexnan+0x30>
   daea4:	2300      	movs	r3, #0
   daea6:	f844 3c04 	str.w	r3, [r4, #-4]
   daeaa:	2201      	movs	r2, #1
   daeac:	3c04      	subs	r4, #4
   daeae:	6821      	ldr	r1, [r4, #0]
   daeb0:	f000 000f 	and.w	r0, r0, #15
   daeb4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   daeb8:	6020      	str	r0, [r4, #0]
   daeba:	e7c0      	b.n	dae3e <__hexnan+0x30>
   daebc:	2208      	movs	r2, #8
   daebe:	e7be      	b.n	dae3e <__hexnan+0x30>
   daec0:	f1b9 0f00 	cmp.w	r9, #0
   daec4:	d02b      	beq.n	daf1e <__hexnan+0x110>
   daec6:	4544      	cmp	r4, r8
   daec8:	d205      	bcs.n	daed6 <__hexnan+0xc8>
   daeca:	2a07      	cmp	r2, #7
   daecc:	dc03      	bgt.n	daed6 <__hexnan+0xc8>
   daece:	4641      	mov	r1, r8
   daed0:	4620      	mov	r0, r4
   daed2:	f7ff ff77 	bl	dadc4 <L_shift>
   daed6:	42bc      	cmp	r4, r7
   daed8:	d90c      	bls.n	daef4 <__hexnan+0xe6>
   daeda:	463b      	mov	r3, r7
   daedc:	f854 2b04 	ldr.w	r2, [r4], #4
   daee0:	f843 2b04 	str.w	r2, [r3], #4
   daee4:	42a5      	cmp	r5, r4
   daee6:	d2f9      	bcs.n	daedc <__hexnan+0xce>
   daee8:	2200      	movs	r2, #0
   daeea:	f843 2b04 	str.w	r2, [r3], #4
   daeee:	429d      	cmp	r5, r3
   daef0:	d2fb      	bcs.n	daeea <__hexnan+0xdc>
   daef2:	e00b      	b.n	daf0c <__hexnan+0xfe>
   daef4:	9b01      	ldr	r3, [sp, #4]
   daef6:	b14b      	cbz	r3, daf0c <__hexnan+0xfe>
   daef8:	f1c3 0220 	rsb	r2, r3, #32
   daefc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   daf00:	40d3      	lsrs	r3, r2
   daf02:	f856 2c04 	ldr.w	r2, [r6, #-4]
   daf06:	4013      	ands	r3, r2
   daf08:	f846 3c04 	str.w	r3, [r6, #-4]
   daf0c:	682b      	ldr	r3, [r5, #0]
   daf0e:	b943      	cbnz	r3, daf22 <__hexnan+0x114>
   daf10:	42bd      	cmp	r5, r7
   daf12:	d102      	bne.n	daf1a <__hexnan+0x10c>
   daf14:	2301      	movs	r3, #1
   daf16:	602b      	str	r3, [r5, #0]
   daf18:	e003      	b.n	daf22 <__hexnan+0x114>
   daf1a:	3d04      	subs	r5, #4
   daf1c:	e7f6      	b.n	daf0c <__hexnan+0xfe>
   daf1e:	2004      	movs	r0, #4
   daf20:	e000      	b.n	daf24 <__hexnan+0x116>
   daf22:	2005      	movs	r0, #5
   daf24:	b005      	add	sp, #20
   daf26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000daf2c <_findenv_r>:
   daf2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daf30:	4607      	mov	r7, r0
   daf32:	468b      	mov	fp, r1
   daf34:	4690      	mov	r8, r2
   daf36:	f000 fcdd 	bl	db8f4 <__env_lock>
   daf3a:	4b19      	ldr	r3, [pc, #100]	; (dafa0 <_findenv_r+0x74>)
   daf3c:	681d      	ldr	r5, [r3, #0]
   daf3e:	469a      	mov	sl, r3
   daf40:	b13d      	cbz	r5, daf52 <_findenv_r+0x26>
   daf42:	465c      	mov	r4, fp
   daf44:	4623      	mov	r3, r4
   daf46:	f813 2b01 	ldrb.w	r2, [r3], #1
   daf4a:	b142      	cbz	r2, daf5e <_findenv_r+0x32>
   daf4c:	2a3d      	cmp	r2, #61	; 0x3d
   daf4e:	461c      	mov	r4, r3
   daf50:	d1f8      	bne.n	daf44 <_findenv_r+0x18>
   daf52:	4638      	mov	r0, r7
   daf54:	f000 fccf 	bl	db8f6 <__env_unlock>
   daf58:	2000      	movs	r0, #0
   daf5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daf5e:	ebcb 0404 	rsb	r4, fp, r4
   daf62:	46a9      	mov	r9, r5
   daf64:	f859 0b04 	ldr.w	r0, [r9], #4
   daf68:	2800      	cmp	r0, #0
   daf6a:	d0f2      	beq.n	daf52 <_findenv_r+0x26>
   daf6c:	4622      	mov	r2, r4
   daf6e:	4659      	mov	r1, fp
   daf70:	f7fe fb11 	bl	d9596 <strncmp>
   daf74:	b988      	cbnz	r0, daf9a <_findenv_r+0x6e>
   daf76:	f859 3c04 	ldr.w	r3, [r9, #-4]
   daf7a:	191e      	adds	r6, r3, r4
   daf7c:	5d1b      	ldrb	r3, [r3, r4]
   daf7e:	2b3d      	cmp	r3, #61	; 0x3d
   daf80:	d10b      	bne.n	daf9a <_findenv_r+0x6e>
   daf82:	f8da 3000 	ldr.w	r3, [sl]
   daf86:	1aed      	subs	r5, r5, r3
   daf88:	10ad      	asrs	r5, r5, #2
   daf8a:	4638      	mov	r0, r7
   daf8c:	f8c8 5000 	str.w	r5, [r8]
   daf90:	f000 fcb1 	bl	db8f6 <__env_unlock>
   daf94:	1c70      	adds	r0, r6, #1
   daf96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daf9a:	464d      	mov	r5, r9
   daf9c:	e7e1      	b.n	daf62 <_findenv_r+0x36>
   daf9e:	bf00      	nop
   dafa0:	2003e190 	.word	0x2003e190

000dafa4 <_getenv_r>:
   dafa4:	b507      	push	{r0, r1, r2, lr}
   dafa6:	aa01      	add	r2, sp, #4
   dafa8:	f7ff ffc0 	bl	daf2c <_findenv_r>
   dafac:	b003      	add	sp, #12
   dafae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dafb4 <__gettzinfo>:
   dafb4:	4800      	ldr	r0, [pc, #0]	; (dafb8 <__gettzinfo+0x4>)
   dafb6:	4770      	bx	lr
   dafb8:	2003e150 	.word	0x2003e150

000dafbc <gmtime_r>:
   dafbc:	6802      	ldr	r2, [r0, #0]
   dafbe:	4b47      	ldr	r3, [pc, #284]	; (db0dc <gmtime_r+0x120>)
   dafc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dafc2:	fb92 f4f3 	sdiv	r4, r2, r3
   dafc6:	fb03 2214 	mls	r2, r3, r4, r2
   dafca:	2a00      	cmp	r2, #0
   dafcc:	bfbc      	itt	lt
   dafce:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   dafd2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   dafd6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   dafda:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   dafde:	fb92 f3f0 	sdiv	r3, r2, r0
   dafe2:	fb00 2213 	mls	r2, r0, r3, r2
   dafe6:	f04f 003c 	mov.w	r0, #60	; 0x3c
   dafea:	bfac      	ite	ge
   dafec:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   daff0:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   daff4:	608b      	str	r3, [r1, #8]
   daff6:	fb92 f3f0 	sdiv	r3, r2, r0
   daffa:	fb00 2213 	mls	r2, r0, r3, r2
   daffe:	604b      	str	r3, [r1, #4]
   db000:	600a      	str	r2, [r1, #0]
   db002:	2307      	movs	r3, #7
   db004:	1ce2      	adds	r2, r4, #3
   db006:	fb92 f3f3 	sdiv	r3, r2, r3
   db00a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   db00e:	1ad3      	subs	r3, r2, r3
   db010:	618b      	str	r3, [r1, #24]
   db012:	4b33      	ldr	r3, [pc, #204]	; (db0e0 <gmtime_r+0x124>)
   db014:	4d33      	ldr	r5, [pc, #204]	; (db0e4 <gmtime_r+0x128>)
   db016:	fb94 f5f5 	sdiv	r5, r4, r5
   db01a:	fb03 4405 	mla	r4, r3, r5, r4
   db01e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   db022:	fbb4 f2f2 	udiv	r2, r4, r2
   db026:	4422      	add	r2, r4
   db028:	f240 57b4 	movw	r7, #1460	; 0x5b4
   db02c:	fbb4 f3f7 	udiv	r3, r4, r7
   db030:	1ad2      	subs	r2, r2, r3
   db032:	482d      	ldr	r0, [pc, #180]	; (db0e8 <gmtime_r+0x12c>)
   db034:	fbb4 f0f0 	udiv	r0, r4, r0
   db038:	f648 6694 	movw	r6, #36500	; 0x8e94
   db03c:	1a13      	subs	r3, r2, r0
   db03e:	fbb3 f6f6 	udiv	r6, r3, r6
   db042:	4434      	add	r4, r6
   db044:	f240 126d 	movw	r2, #365	; 0x16d
   db048:	fbb3 f0f2 	udiv	r0, r3, r2
   db04c:	fbb3 f3f7 	udiv	r3, r3, r7
   db050:	1ae3      	subs	r3, r4, r3
   db052:	fb02 3310 	mls	r3, r2, r0, r3
   db056:	2499      	movs	r4, #153	; 0x99
   db058:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   db05c:	3202      	adds	r2, #2
   db05e:	fbb2 f2f4 	udiv	r2, r2, r4
   db062:	2a0a      	cmp	r2, #10
   db064:	fb04 f402 	mul.w	r4, r4, r2
   db068:	f104 0602 	add.w	r6, r4, #2
   db06c:	f04f 0405 	mov.w	r4, #5
   db070:	fbb6 f4f4 	udiv	r4, r6, r4
   db074:	bf34      	ite	cc
   db076:	2602      	movcc	r6, #2
   db078:	f06f 0609 	mvncs.w	r6, #9
   db07c:	4416      	add	r6, r2
   db07e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db082:	fb02 0505 	mla	r5, r2, r5, r0
   db086:	1c5f      	adds	r7, r3, #1
   db088:	2e01      	cmp	r6, #1
   db08a:	bf98      	it	ls
   db08c:	3501      	addls	r5, #1
   db08e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   db092:	eba7 0704 	sub.w	r7, r7, r4
   db096:	d302      	bcc.n	db09e <gmtime_r+0xe2>
   db098:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   db09c:	e014      	b.n	db0c8 <gmtime_r+0x10c>
   db09e:	0782      	lsls	r2, r0, #30
   db0a0:	d105      	bne.n	db0ae <gmtime_r+0xf2>
   db0a2:	2464      	movs	r4, #100	; 0x64
   db0a4:	fbb0 f2f4 	udiv	r2, r0, r4
   db0a8:	fb04 0212 	mls	r2, r4, r2, r0
   db0ac:	b94a      	cbnz	r2, db0c2 <gmtime_r+0x106>
   db0ae:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db0b2:	fbb0 f4f2 	udiv	r4, r0, r2
   db0b6:	fb02 0014 	mls	r0, r2, r4, r0
   db0ba:	fab0 f280 	clz	r2, r0
   db0be:	0952      	lsrs	r2, r2, #5
   db0c0:	e000      	b.n	db0c4 <gmtime_r+0x108>
   db0c2:	2201      	movs	r2, #1
   db0c4:	333b      	adds	r3, #59	; 0x3b
   db0c6:	441a      	add	r2, r3
   db0c8:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   db0cc:	2300      	movs	r3, #0
   db0ce:	61ca      	str	r2, [r1, #28]
   db0d0:	614d      	str	r5, [r1, #20]
   db0d2:	610e      	str	r6, [r1, #16]
   db0d4:	60cf      	str	r7, [r1, #12]
   db0d6:	620b      	str	r3, [r1, #32]
   db0d8:	4608      	mov	r0, r1
   db0da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db0dc:	00015180 	.word	0x00015180
   db0e0:	fffdc54f 	.word	0xfffdc54f
   db0e4:	00023ab1 	.word	0x00023ab1
   db0e8:	00023ab0 	.word	0x00023ab0

000db0ec <_Balloc>:
   db0ec:	b570      	push	{r4, r5, r6, lr}
   db0ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
   db0f0:	4604      	mov	r4, r0
   db0f2:	460e      	mov	r6, r1
   db0f4:	b93d      	cbnz	r5, db106 <_Balloc+0x1a>
   db0f6:	2010      	movs	r0, #16
   db0f8:	f7fb fbba 	bl	d6870 <malloc>
   db0fc:	6260      	str	r0, [r4, #36]	; 0x24
   db0fe:	6045      	str	r5, [r0, #4]
   db100:	6085      	str	r5, [r0, #8]
   db102:	6005      	str	r5, [r0, #0]
   db104:	60c5      	str	r5, [r0, #12]
   db106:	6a65      	ldr	r5, [r4, #36]	; 0x24
   db108:	68eb      	ldr	r3, [r5, #12]
   db10a:	b143      	cbz	r3, db11e <_Balloc+0x32>
   db10c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   db10e:	68db      	ldr	r3, [r3, #12]
   db110:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   db114:	b178      	cbz	r0, db136 <_Balloc+0x4a>
   db116:	6802      	ldr	r2, [r0, #0]
   db118:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   db11c:	e017      	b.n	db14e <_Balloc+0x62>
   db11e:	2221      	movs	r2, #33	; 0x21
   db120:	2104      	movs	r1, #4
   db122:	4620      	mov	r0, r4
   db124:	f000 fbd1 	bl	db8ca <_calloc_r>
   db128:	6a63      	ldr	r3, [r4, #36]	; 0x24
   db12a:	60e8      	str	r0, [r5, #12]
   db12c:	68db      	ldr	r3, [r3, #12]
   db12e:	2b00      	cmp	r3, #0
   db130:	d1ec      	bne.n	db10c <_Balloc+0x20>
   db132:	2000      	movs	r0, #0
   db134:	bd70      	pop	{r4, r5, r6, pc}
   db136:	2101      	movs	r1, #1
   db138:	fa01 f506 	lsl.w	r5, r1, r6
   db13c:	1d6a      	adds	r2, r5, #5
   db13e:	0092      	lsls	r2, r2, #2
   db140:	4620      	mov	r0, r4
   db142:	f000 fbc2 	bl	db8ca <_calloc_r>
   db146:	2800      	cmp	r0, #0
   db148:	d0f3      	beq.n	db132 <_Balloc+0x46>
   db14a:	6046      	str	r6, [r0, #4]
   db14c:	6085      	str	r5, [r0, #8]
   db14e:	2300      	movs	r3, #0
   db150:	6103      	str	r3, [r0, #16]
   db152:	60c3      	str	r3, [r0, #12]
   db154:	bd70      	pop	{r4, r5, r6, pc}

000db156 <_Bfree>:
   db156:	b570      	push	{r4, r5, r6, lr}
   db158:	6a44      	ldr	r4, [r0, #36]	; 0x24
   db15a:	4606      	mov	r6, r0
   db15c:	460d      	mov	r5, r1
   db15e:	b93c      	cbnz	r4, db170 <_Bfree+0x1a>
   db160:	2010      	movs	r0, #16
   db162:	f7fb fb85 	bl	d6870 <malloc>
   db166:	6270      	str	r0, [r6, #36]	; 0x24
   db168:	6044      	str	r4, [r0, #4]
   db16a:	6084      	str	r4, [r0, #8]
   db16c:	6004      	str	r4, [r0, #0]
   db16e:	60c4      	str	r4, [r0, #12]
   db170:	b13d      	cbz	r5, db182 <_Bfree+0x2c>
   db172:	6a73      	ldr	r3, [r6, #36]	; 0x24
   db174:	686a      	ldr	r2, [r5, #4]
   db176:	68db      	ldr	r3, [r3, #12]
   db178:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   db17c:	6029      	str	r1, [r5, #0]
   db17e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   db182:	bd70      	pop	{r4, r5, r6, pc}

000db184 <__multadd>:
   db184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db188:	690d      	ldr	r5, [r1, #16]
   db18a:	461f      	mov	r7, r3
   db18c:	4606      	mov	r6, r0
   db18e:	460c      	mov	r4, r1
   db190:	f101 0e14 	add.w	lr, r1, #20
   db194:	2300      	movs	r3, #0
   db196:	f8de 0000 	ldr.w	r0, [lr]
   db19a:	b281      	uxth	r1, r0
   db19c:	fb02 7101 	mla	r1, r2, r1, r7
   db1a0:	0c0f      	lsrs	r7, r1, #16
   db1a2:	0c00      	lsrs	r0, r0, #16
   db1a4:	fb02 7000 	mla	r0, r2, r0, r7
   db1a8:	b289      	uxth	r1, r1
   db1aa:	3301      	adds	r3, #1
   db1ac:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   db1b0:	429d      	cmp	r5, r3
   db1b2:	ea4f 4710 	mov.w	r7, r0, lsr #16
   db1b6:	f84e 1b04 	str.w	r1, [lr], #4
   db1ba:	dcec      	bgt.n	db196 <__multadd+0x12>
   db1bc:	b1d7      	cbz	r7, db1f4 <__multadd+0x70>
   db1be:	68a3      	ldr	r3, [r4, #8]
   db1c0:	429d      	cmp	r5, r3
   db1c2:	db12      	blt.n	db1ea <__multadd+0x66>
   db1c4:	6861      	ldr	r1, [r4, #4]
   db1c6:	4630      	mov	r0, r6
   db1c8:	3101      	adds	r1, #1
   db1ca:	f7ff ff8f 	bl	db0ec <_Balloc>
   db1ce:	6922      	ldr	r2, [r4, #16]
   db1d0:	3202      	adds	r2, #2
   db1d2:	f104 010c 	add.w	r1, r4, #12
   db1d6:	4680      	mov	r8, r0
   db1d8:	0092      	lsls	r2, r2, #2
   db1da:	300c      	adds	r0, #12
   db1dc:	f7fe f950 	bl	d9480 <memcpy>
   db1e0:	4621      	mov	r1, r4
   db1e2:	4630      	mov	r0, r6
   db1e4:	f7ff ffb7 	bl	db156 <_Bfree>
   db1e8:	4644      	mov	r4, r8
   db1ea:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   db1ee:	3501      	adds	r5, #1
   db1f0:	615f      	str	r7, [r3, #20]
   db1f2:	6125      	str	r5, [r4, #16]
   db1f4:	4620      	mov	r0, r4
   db1f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db1fa <__s2b>:
   db1fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db1fe:	460c      	mov	r4, r1
   db200:	4615      	mov	r5, r2
   db202:	461f      	mov	r7, r3
   db204:	2209      	movs	r2, #9
   db206:	3308      	adds	r3, #8
   db208:	4606      	mov	r6, r0
   db20a:	fb93 f3f2 	sdiv	r3, r3, r2
   db20e:	2100      	movs	r1, #0
   db210:	2201      	movs	r2, #1
   db212:	429a      	cmp	r2, r3
   db214:	da02      	bge.n	db21c <__s2b+0x22>
   db216:	0052      	lsls	r2, r2, #1
   db218:	3101      	adds	r1, #1
   db21a:	e7fa      	b.n	db212 <__s2b+0x18>
   db21c:	4630      	mov	r0, r6
   db21e:	f7ff ff65 	bl	db0ec <_Balloc>
   db222:	9b08      	ldr	r3, [sp, #32]
   db224:	6143      	str	r3, [r0, #20]
   db226:	2d09      	cmp	r5, #9
   db228:	f04f 0301 	mov.w	r3, #1
   db22c:	6103      	str	r3, [r0, #16]
   db22e:	dd11      	ble.n	db254 <__s2b+0x5a>
   db230:	f104 0809 	add.w	r8, r4, #9
   db234:	46c1      	mov	r9, r8
   db236:	442c      	add	r4, r5
   db238:	f819 3b01 	ldrb.w	r3, [r9], #1
   db23c:	4601      	mov	r1, r0
   db23e:	3b30      	subs	r3, #48	; 0x30
   db240:	220a      	movs	r2, #10
   db242:	4630      	mov	r0, r6
   db244:	f7ff ff9e 	bl	db184 <__multadd>
   db248:	45a1      	cmp	r9, r4
   db24a:	d1f5      	bne.n	db238 <__s2b+0x3e>
   db24c:	eb08 0405 	add.w	r4, r8, r5
   db250:	3c08      	subs	r4, #8
   db252:	e001      	b.n	db258 <__s2b+0x5e>
   db254:	340a      	adds	r4, #10
   db256:	2509      	movs	r5, #9
   db258:	1b2d      	subs	r5, r5, r4
   db25a:	1963      	adds	r3, r4, r5
   db25c:	429f      	cmp	r7, r3
   db25e:	dd08      	ble.n	db272 <__s2b+0x78>
   db260:	f814 3b01 	ldrb.w	r3, [r4], #1
   db264:	4601      	mov	r1, r0
   db266:	3b30      	subs	r3, #48	; 0x30
   db268:	220a      	movs	r2, #10
   db26a:	4630      	mov	r0, r6
   db26c:	f7ff ff8a 	bl	db184 <__multadd>
   db270:	e7f3      	b.n	db25a <__s2b+0x60>
   db272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db276 <__hi0bits>:
   db276:	0c03      	lsrs	r3, r0, #16
   db278:	041b      	lsls	r3, r3, #16
   db27a:	b913      	cbnz	r3, db282 <__hi0bits+0xc>
   db27c:	0400      	lsls	r0, r0, #16
   db27e:	2310      	movs	r3, #16
   db280:	e000      	b.n	db284 <__hi0bits+0xe>
   db282:	2300      	movs	r3, #0
   db284:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   db288:	bf04      	itt	eq
   db28a:	0200      	lsleq	r0, r0, #8
   db28c:	3308      	addeq	r3, #8
   db28e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   db292:	bf04      	itt	eq
   db294:	0100      	lsleq	r0, r0, #4
   db296:	3304      	addeq	r3, #4
   db298:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   db29c:	bf04      	itt	eq
   db29e:	0080      	lsleq	r0, r0, #2
   db2a0:	3302      	addeq	r3, #2
   db2a2:	2800      	cmp	r0, #0
   db2a4:	db03      	blt.n	db2ae <__hi0bits+0x38>
   db2a6:	0042      	lsls	r2, r0, #1
   db2a8:	d503      	bpl.n	db2b2 <__hi0bits+0x3c>
   db2aa:	1c58      	adds	r0, r3, #1
   db2ac:	4770      	bx	lr
   db2ae:	4618      	mov	r0, r3
   db2b0:	4770      	bx	lr
   db2b2:	2020      	movs	r0, #32
   db2b4:	4770      	bx	lr

000db2b6 <__lo0bits>:
   db2b6:	6803      	ldr	r3, [r0, #0]
   db2b8:	f013 0207 	ands.w	r2, r3, #7
   db2bc:	d00b      	beq.n	db2d6 <__lo0bits+0x20>
   db2be:	07d9      	lsls	r1, r3, #31
   db2c0:	d422      	bmi.n	db308 <__lo0bits+0x52>
   db2c2:	079a      	lsls	r2, r3, #30
   db2c4:	bf4b      	itete	mi
   db2c6:	085b      	lsrmi	r3, r3, #1
   db2c8:	089b      	lsrpl	r3, r3, #2
   db2ca:	6003      	strmi	r3, [r0, #0]
   db2cc:	6003      	strpl	r3, [r0, #0]
   db2ce:	bf4c      	ite	mi
   db2d0:	2001      	movmi	r0, #1
   db2d2:	2002      	movpl	r0, #2
   db2d4:	4770      	bx	lr
   db2d6:	b299      	uxth	r1, r3
   db2d8:	b909      	cbnz	r1, db2de <__lo0bits+0x28>
   db2da:	0c1b      	lsrs	r3, r3, #16
   db2dc:	2210      	movs	r2, #16
   db2de:	f013 0fff 	tst.w	r3, #255	; 0xff
   db2e2:	bf04      	itt	eq
   db2e4:	0a1b      	lsreq	r3, r3, #8
   db2e6:	3208      	addeq	r2, #8
   db2e8:	0719      	lsls	r1, r3, #28
   db2ea:	bf04      	itt	eq
   db2ec:	091b      	lsreq	r3, r3, #4
   db2ee:	3204      	addeq	r2, #4
   db2f0:	0799      	lsls	r1, r3, #30
   db2f2:	bf04      	itt	eq
   db2f4:	089b      	lsreq	r3, r3, #2
   db2f6:	3202      	addeq	r2, #2
   db2f8:	07d9      	lsls	r1, r3, #31
   db2fa:	d402      	bmi.n	db302 <__lo0bits+0x4c>
   db2fc:	085b      	lsrs	r3, r3, #1
   db2fe:	d005      	beq.n	db30c <__lo0bits+0x56>
   db300:	3201      	adds	r2, #1
   db302:	6003      	str	r3, [r0, #0]
   db304:	4610      	mov	r0, r2
   db306:	4770      	bx	lr
   db308:	2000      	movs	r0, #0
   db30a:	4770      	bx	lr
   db30c:	2020      	movs	r0, #32
   db30e:	4770      	bx	lr

000db310 <__i2b>:
   db310:	b510      	push	{r4, lr}
   db312:	460c      	mov	r4, r1
   db314:	2101      	movs	r1, #1
   db316:	f7ff fee9 	bl	db0ec <_Balloc>
   db31a:	2201      	movs	r2, #1
   db31c:	6144      	str	r4, [r0, #20]
   db31e:	6102      	str	r2, [r0, #16]
   db320:	bd10      	pop	{r4, pc}

000db322 <__multiply>:
   db322:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db326:	4614      	mov	r4, r2
   db328:	690a      	ldr	r2, [r1, #16]
   db32a:	6923      	ldr	r3, [r4, #16]
   db32c:	429a      	cmp	r2, r3
   db32e:	bfb8      	it	lt
   db330:	460b      	movlt	r3, r1
   db332:	4688      	mov	r8, r1
   db334:	bfbc      	itt	lt
   db336:	46a0      	movlt	r8, r4
   db338:	461c      	movlt	r4, r3
   db33a:	f8d8 7010 	ldr.w	r7, [r8, #16]
   db33e:	f8d4 9010 	ldr.w	r9, [r4, #16]
   db342:	f8d8 3008 	ldr.w	r3, [r8, #8]
   db346:	f8d8 1004 	ldr.w	r1, [r8, #4]
   db34a:	eb07 0609 	add.w	r6, r7, r9
   db34e:	429e      	cmp	r6, r3
   db350:	bfc8      	it	gt
   db352:	3101      	addgt	r1, #1
   db354:	f7ff feca 	bl	db0ec <_Balloc>
   db358:	f100 0514 	add.w	r5, r0, #20
   db35c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   db360:	462b      	mov	r3, r5
   db362:	2200      	movs	r2, #0
   db364:	4563      	cmp	r3, ip
   db366:	d202      	bcs.n	db36e <__multiply+0x4c>
   db368:	f843 2b04 	str.w	r2, [r3], #4
   db36c:	e7fa      	b.n	db364 <__multiply+0x42>
   db36e:	f104 0214 	add.w	r2, r4, #20
   db372:	f108 0114 	add.w	r1, r8, #20
   db376:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   db37a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   db37e:	9300      	str	r3, [sp, #0]
   db380:	9b00      	ldr	r3, [sp, #0]
   db382:	9201      	str	r2, [sp, #4]
   db384:	4293      	cmp	r3, r2
   db386:	d957      	bls.n	db438 <__multiply+0x116>
   db388:	f8b2 b000 	ldrh.w	fp, [r2]
   db38c:	f1bb 0f00 	cmp.w	fp, #0
   db390:	d023      	beq.n	db3da <__multiply+0xb8>
   db392:	4689      	mov	r9, r1
   db394:	46ae      	mov	lr, r5
   db396:	f04f 0800 	mov.w	r8, #0
   db39a:	f859 4b04 	ldr.w	r4, [r9], #4
   db39e:	f8be a000 	ldrh.w	sl, [lr]
   db3a2:	b2a3      	uxth	r3, r4
   db3a4:	fb0b a303 	mla	r3, fp, r3, sl
   db3a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   db3ac:	f8de 4000 	ldr.w	r4, [lr]
   db3b0:	4443      	add	r3, r8
   db3b2:	ea4f 4814 	mov.w	r8, r4, lsr #16
   db3b6:	fb0b 840a 	mla	r4, fp, sl, r8
   db3ba:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   db3be:	46f2      	mov	sl, lr
   db3c0:	b29b      	uxth	r3, r3
   db3c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   db3c6:	454f      	cmp	r7, r9
   db3c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   db3cc:	f84a 3b04 	str.w	r3, [sl], #4
   db3d0:	d901      	bls.n	db3d6 <__multiply+0xb4>
   db3d2:	46d6      	mov	lr, sl
   db3d4:	e7e1      	b.n	db39a <__multiply+0x78>
   db3d6:	f8ce 8004 	str.w	r8, [lr, #4]
   db3da:	9b01      	ldr	r3, [sp, #4]
   db3dc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   db3e0:	3204      	adds	r2, #4
   db3e2:	f1ba 0f00 	cmp.w	sl, #0
   db3e6:	d021      	beq.n	db42c <__multiply+0x10a>
   db3e8:	682b      	ldr	r3, [r5, #0]
   db3ea:	462c      	mov	r4, r5
   db3ec:	4689      	mov	r9, r1
   db3ee:	f04f 0800 	mov.w	r8, #0
   db3f2:	f8b9 e000 	ldrh.w	lr, [r9]
   db3f6:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   db3fa:	fb0a be0e 	mla	lr, sl, lr, fp
   db3fe:	44f0      	add	r8, lr
   db400:	46a3      	mov	fp, r4
   db402:	b29b      	uxth	r3, r3
   db404:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   db408:	f84b 3b04 	str.w	r3, [fp], #4
   db40c:	f859 3b04 	ldr.w	r3, [r9], #4
   db410:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   db414:	0c1b      	lsrs	r3, r3, #16
   db416:	fb0a e303 	mla	r3, sl, r3, lr
   db41a:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   db41e:	454f      	cmp	r7, r9
   db420:	ea4f 4813 	mov.w	r8, r3, lsr #16
   db424:	d901      	bls.n	db42a <__multiply+0x108>
   db426:	465c      	mov	r4, fp
   db428:	e7e3      	b.n	db3f2 <__multiply+0xd0>
   db42a:	6063      	str	r3, [r4, #4]
   db42c:	3504      	adds	r5, #4
   db42e:	e7a7      	b.n	db380 <__multiply+0x5e>
   db430:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   db434:	b913      	cbnz	r3, db43c <__multiply+0x11a>
   db436:	3e01      	subs	r6, #1
   db438:	2e00      	cmp	r6, #0
   db43a:	dcf9      	bgt.n	db430 <__multiply+0x10e>
   db43c:	6106      	str	r6, [r0, #16]
   db43e:	b003      	add	sp, #12
   db440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db444 <__pow5mult>:
   db444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db448:	4615      	mov	r5, r2
   db44a:	f012 0203 	ands.w	r2, r2, #3
   db44e:	4606      	mov	r6, r0
   db450:	460f      	mov	r7, r1
   db452:	d007      	beq.n	db464 <__pow5mult+0x20>
   db454:	3a01      	subs	r2, #1
   db456:	4c21      	ldr	r4, [pc, #132]	; (db4dc <__pow5mult+0x98>)
   db458:	2300      	movs	r3, #0
   db45a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   db45e:	f7ff fe91 	bl	db184 <__multadd>
   db462:	4607      	mov	r7, r0
   db464:	10ad      	asrs	r5, r5, #2
   db466:	d036      	beq.n	db4d6 <__pow5mult+0x92>
   db468:	6a74      	ldr	r4, [r6, #36]	; 0x24
   db46a:	b93c      	cbnz	r4, db47c <__pow5mult+0x38>
   db46c:	2010      	movs	r0, #16
   db46e:	f7fb f9ff 	bl	d6870 <malloc>
   db472:	6270      	str	r0, [r6, #36]	; 0x24
   db474:	6044      	str	r4, [r0, #4]
   db476:	6084      	str	r4, [r0, #8]
   db478:	6004      	str	r4, [r0, #0]
   db47a:	60c4      	str	r4, [r0, #12]
   db47c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   db480:	f8d8 4008 	ldr.w	r4, [r8, #8]
   db484:	b94c      	cbnz	r4, db49a <__pow5mult+0x56>
   db486:	f240 2171 	movw	r1, #625	; 0x271
   db48a:	4630      	mov	r0, r6
   db48c:	f7ff ff40 	bl	db310 <__i2b>
   db490:	2300      	movs	r3, #0
   db492:	f8c8 0008 	str.w	r0, [r8, #8]
   db496:	4604      	mov	r4, r0
   db498:	6003      	str	r3, [r0, #0]
   db49a:	f04f 0800 	mov.w	r8, #0
   db49e:	07eb      	lsls	r3, r5, #31
   db4a0:	d50a      	bpl.n	db4b8 <__pow5mult+0x74>
   db4a2:	4639      	mov	r1, r7
   db4a4:	4622      	mov	r2, r4
   db4a6:	4630      	mov	r0, r6
   db4a8:	f7ff ff3b 	bl	db322 <__multiply>
   db4ac:	4639      	mov	r1, r7
   db4ae:	4681      	mov	r9, r0
   db4b0:	4630      	mov	r0, r6
   db4b2:	f7ff fe50 	bl	db156 <_Bfree>
   db4b6:	464f      	mov	r7, r9
   db4b8:	106d      	asrs	r5, r5, #1
   db4ba:	d00c      	beq.n	db4d6 <__pow5mult+0x92>
   db4bc:	6820      	ldr	r0, [r4, #0]
   db4be:	b108      	cbz	r0, db4c4 <__pow5mult+0x80>
   db4c0:	4604      	mov	r4, r0
   db4c2:	e7ec      	b.n	db49e <__pow5mult+0x5a>
   db4c4:	4622      	mov	r2, r4
   db4c6:	4621      	mov	r1, r4
   db4c8:	4630      	mov	r0, r6
   db4ca:	f7ff ff2a 	bl	db322 <__multiply>
   db4ce:	6020      	str	r0, [r4, #0]
   db4d0:	f8c0 8000 	str.w	r8, [r0]
   db4d4:	e7f4      	b.n	db4c0 <__pow5mult+0x7c>
   db4d6:	4638      	mov	r0, r7
   db4d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db4dc:	000dc4d8 	.word	0x000dc4d8

000db4e0 <__lshift>:
   db4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db4e4:	460c      	mov	r4, r1
   db4e6:	ea4f 1a62 	mov.w	sl, r2, asr #5
   db4ea:	6926      	ldr	r6, [r4, #16]
   db4ec:	6849      	ldr	r1, [r1, #4]
   db4ee:	68a3      	ldr	r3, [r4, #8]
   db4f0:	4456      	add	r6, sl
   db4f2:	4607      	mov	r7, r0
   db4f4:	4691      	mov	r9, r2
   db4f6:	1c75      	adds	r5, r6, #1
   db4f8:	42ab      	cmp	r3, r5
   db4fa:	da02      	bge.n	db502 <__lshift+0x22>
   db4fc:	3101      	adds	r1, #1
   db4fe:	005b      	lsls	r3, r3, #1
   db500:	e7fa      	b.n	db4f8 <__lshift+0x18>
   db502:	4638      	mov	r0, r7
   db504:	f7ff fdf2 	bl	db0ec <_Balloc>
   db508:	2300      	movs	r3, #0
   db50a:	4680      	mov	r8, r0
   db50c:	f100 0114 	add.w	r1, r0, #20
   db510:	461a      	mov	r2, r3
   db512:	4553      	cmp	r3, sl
   db514:	da03      	bge.n	db51e <__lshift+0x3e>
   db516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   db51a:	3301      	adds	r3, #1
   db51c:	e7f9      	b.n	db512 <__lshift+0x32>
   db51e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   db522:	6920      	ldr	r0, [r4, #16]
   db524:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   db528:	f019 091f 	ands.w	r9, r9, #31
   db52c:	f104 0114 	add.w	r1, r4, #20
   db530:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   db534:	d014      	beq.n	db560 <__lshift+0x80>
   db536:	f1c9 0c20 	rsb	ip, r9, #32
   db53a:	2200      	movs	r2, #0
   db53c:	6808      	ldr	r0, [r1, #0]
   db53e:	fa00 f009 	lsl.w	r0, r0, r9
   db542:	4302      	orrs	r2, r0
   db544:	469a      	mov	sl, r3
   db546:	f843 2b04 	str.w	r2, [r3], #4
   db54a:	f851 2b04 	ldr.w	r2, [r1], #4
   db54e:	458e      	cmp	lr, r1
   db550:	fa22 f20c 	lsr.w	r2, r2, ip
   db554:	d8f2      	bhi.n	db53c <__lshift+0x5c>
   db556:	f8ca 2004 	str.w	r2, [sl, #4]
   db55a:	b142      	cbz	r2, db56e <__lshift+0x8e>
   db55c:	1cb5      	adds	r5, r6, #2
   db55e:	e006      	b.n	db56e <__lshift+0x8e>
   db560:	3b04      	subs	r3, #4
   db562:	f851 2b04 	ldr.w	r2, [r1], #4
   db566:	f843 2f04 	str.w	r2, [r3, #4]!
   db56a:	458e      	cmp	lr, r1
   db56c:	d8f9      	bhi.n	db562 <__lshift+0x82>
   db56e:	3d01      	subs	r5, #1
   db570:	4638      	mov	r0, r7
   db572:	f8c8 5010 	str.w	r5, [r8, #16]
   db576:	4621      	mov	r1, r4
   db578:	f7ff fded 	bl	db156 <_Bfree>
   db57c:	4640      	mov	r0, r8
   db57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000db582 <__mcmp>:
   db582:	6903      	ldr	r3, [r0, #16]
   db584:	690a      	ldr	r2, [r1, #16]
   db586:	1a9b      	subs	r3, r3, r2
   db588:	b510      	push	{r4, lr}
   db58a:	d111      	bne.n	db5b0 <__mcmp+0x2e>
   db58c:	0092      	lsls	r2, r2, #2
   db58e:	3014      	adds	r0, #20
   db590:	3114      	adds	r1, #20
   db592:	1883      	adds	r3, r0, r2
   db594:	440a      	add	r2, r1
   db596:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   db59a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   db59e:	428c      	cmp	r4, r1
   db5a0:	d002      	beq.n	db5a8 <__mcmp+0x26>
   db5a2:	d307      	bcc.n	db5b4 <__mcmp+0x32>
   db5a4:	2001      	movs	r0, #1
   db5a6:	bd10      	pop	{r4, pc}
   db5a8:	4298      	cmp	r0, r3
   db5aa:	d3f4      	bcc.n	db596 <__mcmp+0x14>
   db5ac:	2000      	movs	r0, #0
   db5ae:	bd10      	pop	{r4, pc}
   db5b0:	4618      	mov	r0, r3
   db5b2:	bd10      	pop	{r4, pc}
   db5b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db5b8:	bd10      	pop	{r4, pc}

000db5ba <__mdiff>:
   db5ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db5be:	460c      	mov	r4, r1
   db5c0:	4607      	mov	r7, r0
   db5c2:	4611      	mov	r1, r2
   db5c4:	4620      	mov	r0, r4
   db5c6:	4615      	mov	r5, r2
   db5c8:	f7ff ffdb 	bl	db582 <__mcmp>
   db5cc:	1e06      	subs	r6, r0, #0
   db5ce:	d108      	bne.n	db5e2 <__mdiff+0x28>
   db5d0:	4631      	mov	r1, r6
   db5d2:	4638      	mov	r0, r7
   db5d4:	f7ff fd8a 	bl	db0ec <_Balloc>
   db5d8:	2301      	movs	r3, #1
   db5da:	6103      	str	r3, [r0, #16]
   db5dc:	6146      	str	r6, [r0, #20]
   db5de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db5e2:	bfbc      	itt	lt
   db5e4:	4623      	movlt	r3, r4
   db5e6:	462c      	movlt	r4, r5
   db5e8:	4638      	mov	r0, r7
   db5ea:	6861      	ldr	r1, [r4, #4]
   db5ec:	bfba      	itte	lt
   db5ee:	461d      	movlt	r5, r3
   db5f0:	2601      	movlt	r6, #1
   db5f2:	2600      	movge	r6, #0
   db5f4:	f7ff fd7a 	bl	db0ec <_Balloc>
   db5f8:	692b      	ldr	r3, [r5, #16]
   db5fa:	60c6      	str	r6, [r0, #12]
   db5fc:	6926      	ldr	r6, [r4, #16]
   db5fe:	f105 0914 	add.w	r9, r5, #20
   db602:	3414      	adds	r4, #20
   db604:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   db608:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   db60c:	f100 0514 	add.w	r5, r0, #20
   db610:	f04f 0c00 	mov.w	ip, #0
   db614:	f854 3b04 	ldr.w	r3, [r4], #4
   db618:	f859 2b04 	ldr.w	r2, [r9], #4
   db61c:	fa1c f183 	uxtah	r1, ip, r3
   db620:	fa1f fe82 	uxth.w	lr, r2
   db624:	0c12      	lsrs	r2, r2, #16
   db626:	ebce 0101 	rsb	r1, lr, r1
   db62a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   db62e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   db632:	b289      	uxth	r1, r1
   db634:	ea4f 4c23 	mov.w	ip, r3, asr #16
   db638:	45c8      	cmp	r8, r9
   db63a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   db63e:	46a6      	mov	lr, r4
   db640:	f845 3b04 	str.w	r3, [r5], #4
   db644:	d8e6      	bhi.n	db614 <__mdiff+0x5a>
   db646:	45be      	cmp	lr, r7
   db648:	d20e      	bcs.n	db668 <__mdiff+0xae>
   db64a:	f85e 1b04 	ldr.w	r1, [lr], #4
   db64e:	fa1c f281 	uxtah	r2, ip, r1
   db652:	1413      	asrs	r3, r2, #16
   db654:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   db658:	b292      	uxth	r2, r2
   db65a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   db65e:	ea4f 4c23 	mov.w	ip, r3, asr #16
   db662:	f845 2b04 	str.w	r2, [r5], #4
   db666:	e7ee      	b.n	db646 <__mdiff+0x8c>
   db668:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   db66c:	b90b      	cbnz	r3, db672 <__mdiff+0xb8>
   db66e:	3e01      	subs	r6, #1
   db670:	e7fa      	b.n	db668 <__mdiff+0xae>
   db672:	6106      	str	r6, [r0, #16]
   db674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db678 <__ulp>:
   db678:	4b12      	ldr	r3, [pc, #72]	; (db6c4 <__ulp+0x4c>)
   db67a:	ee10 2a90 	vmov	r2, s1
   db67e:	401a      	ands	r2, r3
   db680:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   db684:	2b00      	cmp	r3, #0
   db686:	dd02      	ble.n	db68e <__ulp+0x16>
   db688:	2000      	movs	r0, #0
   db68a:	4619      	mov	r1, r3
   db68c:	e017      	b.n	db6be <__ulp+0x46>
   db68e:	425b      	negs	r3, r3
   db690:	151b      	asrs	r3, r3, #20
   db692:	2b13      	cmp	r3, #19
   db694:	f04f 0000 	mov.w	r0, #0
   db698:	f04f 0100 	mov.w	r1, #0
   db69c:	dc04      	bgt.n	db6a8 <__ulp+0x30>
   db69e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   db6a2:	fa42 f103 	asr.w	r1, r2, r3
   db6a6:	e00a      	b.n	db6be <__ulp+0x46>
   db6a8:	3b14      	subs	r3, #20
   db6aa:	2b1e      	cmp	r3, #30
   db6ac:	f04f 0201 	mov.w	r2, #1
   db6b0:	bfda      	itte	le
   db6b2:	f1c3 031f 	rsble	r3, r3, #31
   db6b6:	fa02 f303 	lslle.w	r3, r2, r3
   db6ba:	4613      	movgt	r3, r2
   db6bc:	4618      	mov	r0, r3
   db6be:	ec41 0b10 	vmov	d0, r0, r1
   db6c2:	4770      	bx	lr
   db6c4:	7ff00000 	.word	0x7ff00000

000db6c8 <__b2d>:
   db6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db6ca:	6905      	ldr	r5, [r0, #16]
   db6cc:	f100 0614 	add.w	r6, r0, #20
   db6d0:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   db6d4:	1f2f      	subs	r7, r5, #4
   db6d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   db6da:	4620      	mov	r0, r4
   db6dc:	f7ff fdcb 	bl	db276 <__hi0bits>
   db6e0:	f1c0 0320 	rsb	r3, r0, #32
   db6e4:	280a      	cmp	r0, #10
   db6e6:	600b      	str	r3, [r1, #0]
   db6e8:	dc14      	bgt.n	db714 <__b2d+0x4c>
   db6ea:	f1c0 0e0b 	rsb	lr, r0, #11
   db6ee:	fa24 f10e 	lsr.w	r1, r4, lr
   db6f2:	42be      	cmp	r6, r7
   db6f4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   db6f8:	bf34      	ite	cc
   db6fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db6fe:	2100      	movcs	r1, #0
   db700:	3015      	adds	r0, #21
   db702:	fa04 f000 	lsl.w	r0, r4, r0
   db706:	fa21 f10e 	lsr.w	r1, r1, lr
   db70a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db70e:	ea40 0201 	orr.w	r2, r0, r1
   db712:	e023      	b.n	db75c <__b2d+0x94>
   db714:	42be      	cmp	r6, r7
   db716:	bf3a      	itte	cc
   db718:	f1a5 0708 	subcc.w	r7, r5, #8
   db71c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db720:	2100      	movcs	r1, #0
   db722:	380b      	subs	r0, #11
   db724:	d015      	beq.n	db752 <__b2d+0x8a>
   db726:	4084      	lsls	r4, r0
   db728:	f1c0 0520 	rsb	r5, r0, #32
   db72c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   db730:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   db734:	42b7      	cmp	r7, r6
   db736:	fa21 fe05 	lsr.w	lr, r1, r5
   db73a:	ea44 030e 	orr.w	r3, r4, lr
   db73e:	bf8c      	ite	hi
   db740:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   db744:	2400      	movls	r4, #0
   db746:	fa01 f000 	lsl.w	r0, r1, r0
   db74a:	40ec      	lsrs	r4, r5
   db74c:	ea40 0204 	orr.w	r2, r0, r4
   db750:	e004      	b.n	db75c <__b2d+0x94>
   db752:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   db756:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db75a:	460a      	mov	r2, r1
   db75c:	ec43 2b10 	vmov	d0, r2, r3
   db760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db762 <__d2b>:
   db762:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db766:	460e      	mov	r6, r1
   db768:	2101      	movs	r1, #1
   db76a:	ec59 8b10 	vmov	r8, r9, d0
   db76e:	4615      	mov	r5, r2
   db770:	f7ff fcbc 	bl	db0ec <_Balloc>
   db774:	f3c9 540a 	ubfx	r4, r9, #20, #11
   db778:	4607      	mov	r7, r0
   db77a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   db77e:	b10c      	cbz	r4, db784 <__d2b+0x22>
   db780:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db784:	9301      	str	r3, [sp, #4]
   db786:	f1b8 0f00 	cmp.w	r8, #0
   db78a:	d019      	beq.n	db7c0 <__d2b+0x5e>
   db78c:	a802      	add	r0, sp, #8
   db78e:	f840 8d08 	str.w	r8, [r0, #-8]!
   db792:	f7ff fd90 	bl	db2b6 <__lo0bits>
   db796:	9b00      	ldr	r3, [sp, #0]
   db798:	b148      	cbz	r0, db7ae <__d2b+0x4c>
   db79a:	9a01      	ldr	r2, [sp, #4]
   db79c:	f1c0 0120 	rsb	r1, r0, #32
   db7a0:	fa02 f101 	lsl.w	r1, r2, r1
   db7a4:	430b      	orrs	r3, r1
   db7a6:	40c2      	lsrs	r2, r0
   db7a8:	617b      	str	r3, [r7, #20]
   db7aa:	9201      	str	r2, [sp, #4]
   db7ac:	e000      	b.n	db7b0 <__d2b+0x4e>
   db7ae:	617b      	str	r3, [r7, #20]
   db7b0:	9b01      	ldr	r3, [sp, #4]
   db7b2:	61bb      	str	r3, [r7, #24]
   db7b4:	2b00      	cmp	r3, #0
   db7b6:	bf14      	ite	ne
   db7b8:	2102      	movne	r1, #2
   db7ba:	2101      	moveq	r1, #1
   db7bc:	6139      	str	r1, [r7, #16]
   db7be:	e007      	b.n	db7d0 <__d2b+0x6e>
   db7c0:	a801      	add	r0, sp, #4
   db7c2:	f7ff fd78 	bl	db2b6 <__lo0bits>
   db7c6:	9b01      	ldr	r3, [sp, #4]
   db7c8:	617b      	str	r3, [r7, #20]
   db7ca:	2101      	movs	r1, #1
   db7cc:	6139      	str	r1, [r7, #16]
   db7ce:	3020      	adds	r0, #32
   db7d0:	b134      	cbz	r4, db7e0 <__d2b+0x7e>
   db7d2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   db7d6:	4404      	add	r4, r0
   db7d8:	6034      	str	r4, [r6, #0]
   db7da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   db7de:	e009      	b.n	db7f4 <__d2b+0x92>
   db7e0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   db7e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   db7e8:	6030      	str	r0, [r6, #0]
   db7ea:	6918      	ldr	r0, [r3, #16]
   db7ec:	f7ff fd43 	bl	db276 <__hi0bits>
   db7f0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   db7f4:	6028      	str	r0, [r5, #0]
   db7f6:	4638      	mov	r0, r7
   db7f8:	b003      	add	sp, #12
   db7fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db7fe <__ratio>:
   db7fe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db802:	4688      	mov	r8, r1
   db804:	4669      	mov	r1, sp
   db806:	4681      	mov	r9, r0
   db808:	f7ff ff5e 	bl	db6c8 <__b2d>
   db80c:	a901      	add	r1, sp, #4
   db80e:	4640      	mov	r0, r8
   db810:	ec55 4b10 	vmov	r4, r5, d0
   db814:	f7ff ff58 	bl	db6c8 <__b2d>
   db818:	f8d9 3010 	ldr.w	r3, [r9, #16]
   db81c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   db820:	1a9a      	subs	r2, r3, r2
   db822:	e89d 000a 	ldmia.w	sp, {r1, r3}
   db826:	1ac9      	subs	r1, r1, r3
   db828:	ec57 6b10 	vmov	r6, r7, d0
   db82c:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   db830:	2b00      	cmp	r3, #0
   db832:	bfcc      	ite	gt
   db834:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   db838:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   db83c:	4632      	mov	r2, r6
   db83e:	463b      	mov	r3, r7
   db840:	4620      	mov	r0, r4
   db842:	4629      	mov	r1, r5
   db844:	f7fd fab4 	bl	d8db0 <__aeabi_ddiv>
   db848:	ec41 0b10 	vmov	d0, r0, r1
   db84c:	b003      	add	sp, #12
   db84e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db852 <__copybits>:
   db852:	3901      	subs	r1, #1
   db854:	b510      	push	{r4, lr}
   db856:	1149      	asrs	r1, r1, #5
   db858:	6914      	ldr	r4, [r2, #16]
   db85a:	3101      	adds	r1, #1
   db85c:	f102 0314 	add.w	r3, r2, #20
   db860:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   db864:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   db868:	42a3      	cmp	r3, r4
   db86a:	4602      	mov	r2, r0
   db86c:	d204      	bcs.n	db878 <__copybits+0x26>
   db86e:	f853 2b04 	ldr.w	r2, [r3], #4
   db872:	f840 2b04 	str.w	r2, [r0], #4
   db876:	e7f7      	b.n	db868 <__copybits+0x16>
   db878:	2300      	movs	r3, #0
   db87a:	428a      	cmp	r2, r1
   db87c:	d202      	bcs.n	db884 <__copybits+0x32>
   db87e:	f842 3b04 	str.w	r3, [r2], #4
   db882:	e7fa      	b.n	db87a <__copybits+0x28>
   db884:	bd10      	pop	{r4, pc}

000db886 <__any_on>:
   db886:	f100 0214 	add.w	r2, r0, #20
   db88a:	6900      	ldr	r0, [r0, #16]
   db88c:	114b      	asrs	r3, r1, #5
   db88e:	4298      	cmp	r0, r3
   db890:	b510      	push	{r4, lr}
   db892:	db0c      	blt.n	db8ae <__any_on+0x28>
   db894:	dd0c      	ble.n	db8b0 <__any_on+0x2a>
   db896:	f011 011f 	ands.w	r1, r1, #31
   db89a:	d009      	beq.n	db8b0 <__any_on+0x2a>
   db89c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   db8a0:	fa24 f001 	lsr.w	r0, r4, r1
   db8a4:	fa00 f101 	lsl.w	r1, r0, r1
   db8a8:	428c      	cmp	r4, r1
   db8aa:	d10c      	bne.n	db8c6 <__any_on+0x40>
   db8ac:	e000      	b.n	db8b0 <__any_on+0x2a>
   db8ae:	4603      	mov	r3, r0
   db8b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   db8b4:	4293      	cmp	r3, r2
   db8b6:	d904      	bls.n	db8c2 <__any_on+0x3c>
   db8b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   db8bc:	2900      	cmp	r1, #0
   db8be:	d0f9      	beq.n	db8b4 <__any_on+0x2e>
   db8c0:	e001      	b.n	db8c6 <__any_on+0x40>
   db8c2:	2000      	movs	r0, #0
   db8c4:	bd10      	pop	{r4, pc}
   db8c6:	2001      	movs	r0, #1
   db8c8:	bd10      	pop	{r4, pc}

000db8ca <_calloc_r>:
   db8ca:	b538      	push	{r3, r4, r5, lr}
   db8cc:	fb02 f401 	mul.w	r4, r2, r1
   db8d0:	4621      	mov	r1, r4
   db8d2:	f7fb f805 	bl	d68e0 <_malloc_r>
   db8d6:	4605      	mov	r5, r0
   db8d8:	b118      	cbz	r0, db8e2 <_calloc_r+0x18>
   db8da:	4622      	mov	r2, r4
   db8dc:	2100      	movs	r1, #0
   db8de:	f7fd fdf5 	bl	d94cc <memset>
   db8e2:	4628      	mov	r0, r5
   db8e4:	bd38      	pop	{r3, r4, r5, pc}
	...

000db8e8 <nanf>:
   db8e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; db8f0 <nanf+0x8>
   db8ec:	4770      	bx	lr
   db8ee:	bf00      	nop
   db8f0:	7fc00000 	.word	0x7fc00000

000db8f4 <__env_lock>:
   db8f4:	4770      	bx	lr

000db8f6 <__env_unlock>:
   db8f6:	4770      	bx	lr

000db8f8 <dynalib_user>:
   db8f8:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   db908:	0000 0000 bd4e 000d bd56 000d bd5b 000d     ....N...V...[...
   db918:	bd60 000d bd64 000d bd69 000d bd6e 000d     `...d...i...n...
   db928:	bd72 000d bd7d 000d                         r...}...

000db930 <_ZL13releaseNumber>:
   db930:	0031 0000 0000 7325 5320 253a 2e32 6630     1.....%s S:%2.0f
   db940:	2525 202c 3a51 3225 302e 2566 2025 4100     %%, Q:%2.0f%% .A
   db950:	2b54 4643 4e55 313d 0d35 000a 6552 6573     T+CFUN=15...Rese
   db960:	7474 6e69 2067 6e69 7020 6f72 7267 7365     tting in progres
   db970:	0073 7246 6d61 5220 7365 7465 3120 342f     s.Fram Reset 1/4
   db980:	6420 6e6f 0065 7645 6e65 0074 7246 6d61      done.Event.Fram
   db990:	5220 7365 7465 3120 322f 6420 6e6f 0065      Reset 1/2 done.
   db9a0:	7246 6d61 5220 7365 7465 3320 342f 6420     Fram Reset 3/4 d
   db9b0:	6e6f 0065 7246 6d61 5220 7365 7465 6420     one.Fram Reset d
   db9c0:	6e6f 0065 6f4e 6d72 6c61 4f20 6570 6172     one.Normal Opera
   db9d0:	6974 6e6f 0073 7845 6563 6465 6465 4d20     tions.Exceeded M
   db9e0:	7861 696d 206e 696c 696d 0074 6c41 7265     axmin limit.Aler
   db9f0:	0074 6f43 6e75 2c74 6820 756f 6c72 3a79     t.Count, hourly:
   dba00:	2520 2c69 6420 6961 796c 203a 6925 4400      %i, daily: %i.D
   dba10:	6265 756f 636e 6465 7b00 6822 756f 6c72     ebounced.{"hourl
   dba20:	2279 253a 2c69 2220 6164 6c69 2279 253a     y":%i, "daily":%
   dba30:	2c69 6222 7461 6574 7972 3a22 6925 202c     i,"battery":%i, 
   dba40:	7422 6d65 2270 253a 2c69 2220 6572 6573     "temp":%i, "rese
   dba50:	7374 3a22 6925 202c 6122 656c 7472 2273     ts":%i, "alerts"
   dba60:	253a 2c69 2220 616d 6d78 6e69 3a22 6925     :%i, "maxmin":%i
   dba70:	007d 6255 6469 746f 2d73 6143 2d72 6f48     }.Ubidots-Car-Ho
   dba80:	6b6f 4e00 206f 6144 6174 5500 6962 6f64     ok.No Data.Ubido
   dba90:	7374 4820 6f6f 006b 6552 7073 6e6f 6573     ts Hook.Response
   dbaa0:	5220 6365 6965 6576 0064 7453 7461 0065      Received.State.
   dbab0:	6148 6472 5220 7365 7465 6920 206e 2032     Hard Reset in 2 
   dbac0:	6573 6f63 646e 0073 3225 312e 2066 6573     seconds.%2.1f se
   dbad0:	0063 6553 2074 6f53 616c 2072 6f50 6577     c.Set Solar Powe
   dbae0:	6572 2064 6f4d 6564 3000 4300 656c 7261     red Mode.0.Clear
   dbaf0:	6465 5320 6c6f 7261 5020 776f 7265 6465     ed Solar Powered
   dbb00:	4d20 646f 0065 6553 2074 6556 6272 736f      Mode.Set Verbos
   dbb10:	2065 6f4d 6564 4300 656c 7261 6465 5620     e Mode.Cleared V
   dbb20:	7265 6f62 6573 4d20 646f 0065 6954 656d     erbose Mode.Time
   dbb30:	7a20 6e6f 2065 666f 7366 7465 2520 0069      zone offset %i.
   dbb40:	704f 6e65 7420 6d69 2065 6573 2074 6f74     Open time set to
   dbb50:	2520 0069 6c43 736f 6e69 2067 6974 656d      %i.Closing time
   dbb60:	7320 7465 7420 206f 6925 4c00 776f 5020      set to %i.Low P
   dbb70:	776f 7265 4d00 7861 694d 206e 696c 696d     ower.MaxMin limi
   dbb80:	2074 6573 2074 6f74 2520 0069 614d 4d78     t set to %i.MaxM
   dbb90:	6e69 4600 6f72 206d 7325 7420 206f 7325     in.From %s to %s
   dbba0:	5300 6174 6574 5420 6172 736e 7469 6f69     .State Transitio
   dbbb0:	006e 7552 6e6e 6e69 0067 6144 6c69 2079     n.Running.Daily 
   dbbc0:	6c43 6165 756e 0070 7073 7261 2f6b 6564     Cleanup.spark/de
   dbbd0:	6976 6563 732f 7365 6973 6e6f 652f 646e     vice/session/end
   dbbe0:	4500 7272 726f 5320 6174 6574 2d20 5220     .Error State - R
   dbbf0:	7365 7465 4500 7272 726f 5320 6174 6574     eset.Error State
   dbc00:	2d20 5020 776f 7265 4320 6379 656c 4500      - Power Cycle.E
   dbc10:	7272 726f 5320 6174 6574 2d20 4620 6c75     rror State - Ful
   dbc20:	206c 6f4d 6564 206d 6552 6573 0074 6550     l Modem Reset.Pe
   dbc30:	7474 6465 5700 7461 6863 6f64 0067 6f48     tted.Watchdog.Ho
   dbc40:	7275 796c 6f43 6e75 0074 6144 6c69 4379     urlyCount.DailyC
   dbc50:	756f 746e 5300 6769 616e 006c 6552 6573     ount.Signal.Rese
   dbc60:	4374 756f 746e 5400 6d65 6570 6172 7574     tCount.Temperatu
   dbc70:	6572 5200 6c65 6165 6573 7300 6174 6574     re.Release.state
   dbc80:	664f 6843 0067 6f6c 5077 776f 7265 6f4d     OfChg.lowPowerMo
   dbc90:	6564 4300 6f6c 6573 6954 656d 4d00 7861     de.CloseTime.Max
   dbca0:	694d 4c6e 6d69 7469 4100 656c 7472 0073     MinLimit.Alerts.
   dbcb0:	6572 6573 4674 4152 004d 6572 6573 4374     resetFRAM.resetC
   dbcc0:	756f 746e 0073 6148 6472 6552 6573 0074     ounts.HardReset.
   dbcd0:	6553 646e 6f4e 0077 6f4c 5077 776f 7265     SendNow.LowPower
   dbce0:	6f4d 6564 5300 6c6f 7261 4d2d 646f 0065     Mode.Solar-Mode.
   dbcf0:	6556 6272 736f 2d65 6f4d 6564 5300 7465     Verbose-Mode.Set
   dbd00:	542d 6d69 7a65 6e6f 0065 6553 2d74 704f     -Timezone.Set-Op
   dbd10:	6e65 6954 656d 5300 7465 432d 6f6c 6573     enTime.Set-Close
   dbd20:	5300 7465 442d 6265 756f 636e 0065 6553     .Set-Debounce.Se
   dbd30:	2d74 614d 4d78 6e69 4c2d 6d69 7469 6300     t-MaxMin-Limit.c
   dbd40:	6e6f 456e 6576 746e 7453 7461 0073 6e55     onnEventStats.Un
   dbd50:	6e6b 776f 006e 6f4e 656e 5700 4669 0069     known.None.WiFi.
   dbd60:	5347 004d 4d55 5354 4300 4d44 0041 544c     GSM.UMTS.CDMA.LT
   dbd70:	0045 4549 4545 3038 3132 3435 4300 5441     E.IEEE802154.CAT
   dbd80:	4d20 0031                                    M1.

000dbd84 <_ZTV12BatteryCheck>:
	...
   dbd8c:	5ef3 000d 5ef5 000d 6c25 2c75 6c25 2c75     .^...^..%lu,%lu,
   dbd9c:	6425 252c 3b64 6300 756f 646c 276e 2074     %d,%d;.couldn't 
   dbdac:	6573 646e 6120 6c6c 6520 6576 746e 2c73     send all events,
   dbdbc:	7320 7661 6e69 2067 6425 6620 726f 6c20      saving %d for l
   dbdcc:	7461 7265 7300 6e65 2074 6425 6520 6576     ater.sent %d eve
   dbddc:	746e 0073 6964 6373 7261 6964 676e 6f20     nts.discarding o
   dbdec:	646c 6520 6576 746e 6300 6e6f 656e 7463     ld event.connect
   dbdfc:	6f69 456e 6576 746e 6520 6576 746e 253d     ionEvent event=%
   dbe0c:	2064 6164 6174 253d 0064 6e69 7469 6169     d data=%d.initia
   dbe1c:	696c 697a 676e 6320 6e6f 656e 7463 6f69     lizing connectio
   dbe2c:	206e 7665 6e65 2074 6572 6174 6e69 6465     n event retained
   dbe3c:	6d20 6d65 726f 0079                          memory.

000dbe44 <_ZTV16ConnectionEvents>:
	...
   dbe4c:	603d 000d 603f 000d                         =`..?`..

000dbe54 <_ZTVN5spark13CellularClassE>:
	...
   dbe5c:	698f 000d 6985 000d 697b 000d 693d 000d     .i...i..{i..=i..
   dbe6c:	696f 000d 4235 000d 6963 000d 695b 000d     oi..5B..ci..[i..
   dbe7c:	6951 000d 6947 000d 76f5 000d               Qi..Gi...v..

000dbe88 <_ZTV14CellularSignal>:
	...
   dbe90:	6a3d 000d 6acf 000d 6a3f 000d 6b11 000d     =j...j..?j...k..
   dbea0:	6a45 000d 6add 000d 6a71 000d 6a9d 000d     Ej...j..qj...j..
   dbeb0:	fffc ffff 0000 0000 6ac7 000d               .........j..

000dbebc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dbec4:	6b5d 000d 6b63 000d 6ba7 000d 6b71 000d     ]k..ck...k..qk..
   dbed4:	6b5f 000d                                   _k..

000dbed8 <_ZTVN5spark13EthernetClassE>:
	...
   dbee0:	71bb 000d 71b1 000d 71a7 000d 719d 000d     .q...q...q...q..
   dbef0:	7191 000d 7185 000d 7179 000d 7171 000d     .q...q..yq..qq..
   dbf00:	7167 000d 715d 000d 76f5 000d               gq..]q...v..

000dbf0c <_ZTV7TwoWire>:
	...
   dbf14:	72bd 000d 7307 000d 72df 000d 72bf 000d     .r...s...r...r..
   dbf24:	72e7 000d 72ef 000d 72f7 000d 72ff 000d     .r...r...r...r..

000dbf34 <_ZTV9IPAddress>:
	...
   dbf3c:	7445 000d 7435 000d 7437 000d 6e6c 6600     Et..5t..7t..ln.f
   dbf4c:	006e 6f63 6564 6400 7465 6961 006c 3025     n.code.detail.%0
   dbf5c:	3031 2075 5d00 0020 202c 2800 3a29 0020     10u .] ., .(): .
   dbf6c:	5b20 6300 646f 2065 203d 6400 7465 6961      [.code = .detai
   dbf7c:	736c 3d20 0020 6162 6475 5300 7265 6169     ls = .baud.Seria
   dbf8c:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   dbf9c:	7261 6d61 6300 646d 6900 0064 6e68 0064     aram.cmd.id.hnd.
   dbfac:	7473 6d72 6600 6c69 0074 766c 006c 6461     strm.filt.lvl.ad
   dbfbc:	4864 6e61 6c64 7265 7200 6d65 766f 4865     dHandler.removeH
   dbfcc:	6e61 6c64 7265 6500 756e 486d 6e61 6c64     andler.enumHandl
   dbfdc:	7265 0073 534a 4e4f 7453 6572 6d61 6f4c     ers.JSONStreamLo
   dbfec:	4867 6e61 6c64 7265 6100 7070 6e00 6e6f     gHandler.app.non
   dbffc:	0065 7274 6361 0065 6e69 6f66 7700 7261     e.trace.info.war
   dc00c:	006e 7265 6f72 0072 6170 696e 0063 6c61     n.error.panic.al
   dc01c:	006c 0000                                   l...

000dc020 <_ZTVN5spark9MeshClassE>:
	...
   dc028:	7587 000d 757d 000d 7573 000d 7569 000d     .u..}u..su..iu..
   dc038:	755d 000d 7551 000d 7545 000d 753d 000d     ]u..Qu..Eu..=u..
   dc048:	7533 000d 7529 000d 76f5 000d               3u..)u...v..

000dc054 <_ZTVN5spark12NetworkClassE>:
	...
   dc05c:	768d 000d 7697 000d 76a1 000d 76ab 000d     .v...v...v...v..
   dc06c:	76b5 000d 76c1 000d 76cd 000d 76d9 000d     .v...v...v...v..
   dc07c:	76e1 000d 76eb 000d 76f5 000d               .v...v...v..

000dc088 <_ZTV8SPIClass>:
	...
   dc090:	7cb9 000d 7cbb 000d 2b25 3330 3a64 3025     .|...|..%+03d:%0
   dc0a0:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   dc0b0:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000dc0c0 <_ZTV11USARTSerial>:
	...
   dc0c8:	80b5 000d 8105 000d 8113 000d 7b6b 000d     ............k{..
   dc0d8:	80c9 000d 80eb 000d 80d7 000d 80ff 000d     ................
   dc0e8:	80b7 000d 80bb 000d                         ........

000dc0f0 <_ZTV9USBSerial>:
	...
   dc0f8:	81bd 000d 820d 000d 821b 000d 7b6b 000d     ............k{..
   dc108:	81f9 000d 81bf 000d 81d5 000d 8207 000d     ................
   dc118:	81eb 000d 81b9 000d                         ........

000dc120 <day_name.4725>:
   dc120:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dc130:	6972 6153 4a74                                   riSat

000dc135 <mon_name.4726>:
   dc135:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dc145:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dc155:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dc165:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dc175:	6425 000a                                   %d..

000dc179 <_ctype_>:
   dc179:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dc189:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dc199:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dc1a9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dc1b9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dc1c9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dc1d9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dc1e9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc1f9:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc27c <__sf_fake_stdin>:
	...

000dc29c <__sf_fake_stdout>:
	...

000dc2bc <__sf_fake_stderr>:
	...
   dc2dc:	0043 4f50 4953 0058 002e 0000               C.POSIX.....

000dc2e8 <__month_lengths>:
   dc2e8:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dc2f8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc308:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dc318:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dc328:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc338:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000dc348 <fpi.5344>:
   dc348:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dc358:	0000 0000                                   ....

000dc35c <fpinan.5380>:
   dc35c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dc36c:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.
   dc37c:	0000 0000                                   ....

000dc380 <tinytens>:
   dc380:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dc390:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dc3a0:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   dc3b0:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   dc3c0:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   dc3d0:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   dc3e0:	2575 006e 0000 0000                         u%n.....

000dc3e8 <__mprec_tens>:
   dc3e8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dc3f8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dc408:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dc418:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dc428:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dc438:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dc448:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dc458:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dc468:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dc478:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dc488:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dc498:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dc4a8:	9db4 79d9 7843 44ea                         ...yCx.D

000dc4b0 <__mprec_bigtens>:
   dc4b0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dc4c0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dc4d0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dc4d8 <p05.5387>:
   dc4d8:	0005 0000 0019 0000 007d 0000               ........}...

000dc4e4 <link_const_variable_data_end>:
   dc4e4:	000d415d 	.word	0x000d415d
   dc4e8:	000d5e05 	.word	0x000d5e05
   dc4ec:	000d5eef 	.word	0x000d5eef
   dc4f0:	000d5fa9 	.word	0x000d5fa9
   dc4f4:	000d602d 	.word	0x000d602d
   dc4f8:	000d6265 	.word	0x000d6265
   dc4fc:	000d6275 	.word	0x000d6275
   dc500:	000d6285 	.word	0x000d6285
   dc504:	000d692d 	.word	0x000d692d
   dc508:	000d6a0d 	.word	0x000d6a0d
   dc50c:	000d71c5 	.word	0x000d71c5
   dc510:	000d7519 	.word	0x000d7519
   dc514:	000d763d 	.word	0x000d763d
   dc518:	000d77c1 	.word	0x000d77c1
   dc51c:	000d7c9d 	.word	0x000d7c9d
   dc520:	000d7ef1 	.word	0x000d7ef1
   dc524:	000d80a1 	.word	0x000d80a1
   dc528:	000d8505 	.word	0x000d8505
   dc52c:	000d855d 	.word	0x000d855d
   dc530:	000d8621 	.word	0x000d8621
   dc534:	000d86a5 	.word	0x000d86a5
   dc538:	000d8729 	.word	0x000d8729

000dc53c <link_constructors_end>:
   dc53c:	00000000 	.word	0x00000000
