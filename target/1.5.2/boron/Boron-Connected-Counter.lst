
/Users/chipmc/Documents/Maker/Particle/Projects/Boron-Connected-Counter/target/1.5.2/boron/Boron-Connected-Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a1c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000de1e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000174  2003def0  000de1e4  0001def0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000078c  2003e064  2003e064  0002e064  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  000de358  000de358  0001e358  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000de384  000de384  0001e384  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00111648  00000000  00000000  0001e388  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014e6c  00000000  00000000  0012f9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002773e  00000000  00000000  0014483c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000031e8  00000000  00000000  0016bf7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005c40  00000000  00000000  0016f162  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003a10c  00000000  00000000  00174da2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00033416  00000000  00000000  001aeeae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010d798  00000000  00000000  001e22c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000fc40  00000000  00000000  002efa5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 ff6d 	bl	d9f10 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 ff72 	bl	d9f26 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003def0 	.word	0x2003def0
   d404c:	000de1e4 	.word	0x000de1e4
   d4050:	2003e064 	.word	0x2003e064
   d4054:	2003e064 	.word	0x2003e064
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f004 fda9 	bl	d8bb4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000de1d4 	.word	0x000de1d4
   d4084:	000de194 	.word	0x000de194

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 bc02 	b.w	d5890 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f001 f90b 	bl	d52a8 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f004 bd4f 	b.w	d8b38 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 bfcf 	b.w	d703c <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 bfd5 	b.w	d704c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 bfd3 	b.w	d704c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z9sensorISRv>:
}

// Here are the various hardware and timer interrupt service routines
void sensorISR()
{
  sensorDetect = true;                              // sets the sensor flag for the main loop
   d40b8:	4b01      	ldr	r3, [pc, #4]	; (d40c0 <_Z9sensorISRv+0x8>)
   d40ba:	2201      	movs	r2, #1
   d40bc:	701a      	strb	r2, [r3, #0]
   d40be:	4770      	bx	lr
   d40c0:	2003e068 	.word	0x2003e068

000d40c4 <_Z11watchdogISRv>:
}

void watchdogISR()
{
  watchdogFlag = true;
   d40c4:	4b01      	ldr	r3, [pc, #4]	; (d40cc <_Z11watchdogISRv+0x8>)
   d40c6:	2201      	movs	r2, #1
   d40c8:	701a      	strb	r2, [r3, #0]
   d40ca:	4770      	bx	lr
   d40cc:	2003e0c8 	.word	0x2003e0c8

000d40d0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40d0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40d2:	6803      	ldr	r3, [r0, #0]
   d40d4:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40d6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40d8:	d904      	bls.n	d40e4 <nrf_gpio_pin_port_decode+0x14>
   d40da:	4a07      	ldr	r2, [pc, #28]	; (d40f8 <nrf_gpio_pin_port_decode+0x28>)
   d40dc:	2100      	movs	r1, #0
   d40de:	200a      	movs	r0, #10
   d40e0:	f002 fe62 	bl	d6da8 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d40e4:	6823      	ldr	r3, [r4, #0]
   d40e6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40e8:	bf83      	ittte	hi
   d40ea:	f003 031f 	andhi.w	r3, r3, #31
   d40ee:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d40f0:	4802      	ldrhi	r0, [pc, #8]	; (d40fc <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d40f2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d40f6:	bd10      	pop	{r4, pc}
   d40f8:	000d6ab9 	.word	0x000d6ab9
   d40fc:	50000300 	.word	0x50000300

000d4100 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d4100:	b507      	push	{r0, r1, r2, lr}
   d4102:	ab02      	add	r3, sp, #8
   d4104:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4108:	4618      	mov	r0, r3
   d410a:	f7ff ffe1 	bl	d40d0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d410e:	9a01      	ldr	r2, [sp, #4]
   d4110:	2301      	movs	r3, #1
   d4112:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4114:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}
   d4118:	b003      	add	sp, #12
   d411a:	f85d fb04 	ldr.w	pc, [sp], #4

000d411e <nrf_gpio_pin_clear>:


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
   d411e:	b507      	push	{r0, r1, r2, lr}
   d4120:	ab02      	add	r3, sp, #8
   d4122:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4126:	4618      	mov	r0, r3
   d4128:	f7ff ffd2 	bl	d40d0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d412c:	9a01      	ldr	r2, [sp, #4]
   d412e:	2301      	movs	r3, #1
   d4130:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4132:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
}
   d4136:	b003      	add	sp, #12
   d4138:	f85d fb04 	ldr.w	pc, [sp], #4

000d413c <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d413c:	b538      	push	{r3, r4, r5, lr}
   d413e:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d4140:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d4142:	b128      	cbz	r0, d4150 <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d4144:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d4146:	210c      	movs	r1, #12
   d4148:	f004 fe87 	bl	d8e5a <_ZdlPvj>
            wakeupSource = next;
   d414c:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d414e:	e7f8      	b.n	d4142 <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d4150:	4620      	mov	r0, r4
   d4152:	bd38      	pop	{r3, r4, r5, pc}

000d4154 <_Z9resetFRAM6String>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
  return !Particle.connected();
}

int resetFRAM(String command)                                     // Will reset the local counts
{
   d4154:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4156:	4904      	ldr	r1, [pc, #16]	; (d4168 <_Z9resetFRAM6String+0x14>)
   d4158:	f004 f8bb 	bl	d82d2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d415c:	b118      	cbz	r0, d4166 <_Z9resetFRAM6String+0x12>
  {
    fram.erase();
   d415e:	4803      	ldr	r0, [pc, #12]	; (d416c <_Z9resetFRAM6String+0x18>)
   d4160:	f001 feb4 	bl	d5ecc <_ZN6MB85RC5eraseEv>
    return 1;
   d4164:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4166:	bd08      	pop	{r3, pc}
   d4168:	000dd60c 	.word	0x000dd60c
   d416c:	2003e074 	.word	0x2003e074

000d4170 <_Z7sendNow6String>:
  }
  return 1;                                                           // Returns 1 to let the user know if was reset
}

int sendNow(String command) // Function to force sending data in current hour
{
   d4170:	b508      	push	{r3, lr}
   d4172:	4904      	ldr	r1, [pc, #16]	; (d4184 <_Z7sendNow6String+0x14>)
   d4174:	f004 f8ad 	bl	d82d2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4178:	b118      	cbz	r0, d4182 <_Z7sendNow6String+0x12>
  {
    state = REPORTING_STATE;
   d417a:	4b03      	ldr	r3, [pc, #12]	; (d4188 <_Z7sendNow6String+0x18>)
   d417c:	2205      	movs	r2, #5
   d417e:	701a      	strb	r2, [r3, #0]
    return 1;
   d4180:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4182:	bd08      	pop	{r3, pc}
   d4184:	000dd60c 	.word	0x000dd60c
   d4188:	2003e0c0 	.word	0x2003e0c0

000d418c <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d418c:	b510      	push	{r4, lr}
   d418e:	4b03      	ldr	r3, [pc, #12]	; (d419c <_ZN8MB85RC64D1Ev+0x10>)
   d4190:	6003      	str	r3, [r0, #0]
   d4192:	4604      	mov	r4, r0
   d4194:	f001 fe62 	bl	d5e5c <_ZN6MB85RCD1Ev>
   d4198:	4620      	mov	r0, r4
   d419a:	bd10      	pop	{r4, pc}
   d419c:	000dd15c 	.word	0x000dd15c

000d41a0 <_ZN8MB85RC64D0Ev>:
   d41a0:	b510      	push	{r4, lr}
   d41a2:	4604      	mov	r4, r0
   d41a4:	f7ff fff2 	bl	d418c <_ZN8MB85RC64D1Ev>
   d41a8:	4620      	mov	r0, r4
   d41aa:	2110      	movs	r1, #16
   d41ac:	f004 fe55 	bl	d8e5a <_ZdlPvj>
   d41b0:	4620      	mov	r0, r4
   d41b2:	bd10      	pop	{r4, pc}

000d41b4 <_Z11resetCounts6String>:
  }
  else return 0;
}

int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
   d41b4:	b508      	push	{r3, lr}
   d41b6:	490a      	ldr	r1, [pc, #40]	; (d41e0 <_Z11resetCounts6String+0x2c>)
   d41b8:	f004 f88b 	bl	d82d2 <_ZNK6String6equalsEPKc>
   d41bc:	2300      	movs	r3, #0
  if (command == "1")
   d41be:	b168      	cbz	r0, d41dc <_Z11resetCounts6String+0x28>
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d41c0:	4a08      	ldr	r2, [pc, #32]	; (d41e4 <_Z11resetCounts6String+0x30>)
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d41c2:	4909      	ldr	r1, [pc, #36]	; (d41e8 <_Z11resetCounts6String+0x34>)
int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
  if (command == "1")
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
   d41c4:	6013      	str	r3, [r2, #0]

int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
  if (command == "1")
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d41c6:	6093      	str	r3, [r2, #8]
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
    current.alertCount = 0;                                           // Reset count variables
   d41c8:	6153      	str	r3, [r2, #20]
    current.hourlyCountInFlight = 0;                                  // In the off-chance there is data in flight
   d41ca:	6053      	str	r3, [r2, #4]
    dataInFlight = false;
   d41cc:	4a07      	ldr	r2, [pc, #28]	; (d41ec <_Z11resetCounts6String+0x38>)
{
  if (command == "1")
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d41ce:	614b      	str	r3, [r1, #20]
    current.alertCount = 0;                                           // Reset count variables
    current.hourlyCountInFlight = 0;                                  // In the off-chance there is data in flight
    dataInFlight = false;
   d41d0:	7013      	strb	r3, [r2, #0]
    currentCountsWriteNeeded = true;                                  // Make sure we write to FRAM back in the main loop
   d41d2:	4b07      	ldr	r3, [pc, #28]	; (d41f0 <_Z11resetCounts6String+0x3c>)
   d41d4:	2001      	movs	r0, #1
   d41d6:	7018      	strb	r0, [r3, #0]
    systemStatusWriteNeeded = true;
   d41d8:	4b06      	ldr	r3, [pc, #24]	; (d41f4 <_Z11resetCounts6String+0x40>)
   d41da:	7018      	strb	r0, [r3, #0]
    return 1;
  }
  else return 0;
}
   d41dc:	bd08      	pop	{r3, pc}
   d41de:	bf00      	nop
   d41e0:	000dd60c 	.word	0x000dd60c
   d41e4:	2003e150 	.word	0x2003e150
   d41e8:	2003e174 	.word	0x2003e174
   d41ec:	2003e170 	.word	0x2003e170
   d41f0:	2003e148 	.word	0x2003e148
   d41f4:	2003e171 	.word	0x2003e171

000d41f8 <_ZN10CloudClass8syncTimeEv.isra.39>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   d41f8:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41fa:	f002 fe8f 	bl	d6f1c <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d41fe:	b120      	cbz	r0, d420a <_ZN10CloudClass8syncTimeEv.isra.39+0x12>
            return false;
        }
        return spark_sync_time(NULL);
   d4200:	2000      	movs	r0, #0
    }
   d4202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bool syncTime(void)
    {
        if (!connected()) {
            return false;
        }
        return spark_sync_time(NULL);
   d4206:	f002 bea9 	b.w	d6f5c <spark_sync_time>
    }
   d420a:	bd08      	pop	{r3, pc}

000d420c <_ZN10CloudClass12syncTimeDoneEv.isra.41>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d420c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d420e:	2000      	movs	r0, #0
   d4210:	f002 feac 	bl	d6f6c <spark_sync_time_pending>
   d4214:	b128      	cbz	r0, d4222 <_ZN10CloudClass12syncTimeDoneEv.isra.41+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4216:	f002 fe81 	bl	d6f1c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d421a:	f080 0001 	eor.w	r0, r0, #1
   d421e:	b2c0      	uxtb	r0, r0
   d4220:	bd08      	pop	{r3, pc}
   d4222:	2001      	movs	r0, #1
    }
   d4224:	bd08      	pop	{r3, pc}

000d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4226:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4228:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d422c:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d422e:	f88d 3000 	strb.w	r3, [sp]
   d4232:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4234:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4236:	f003 fa41 	bl	d76bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d423a:	4628      	mov	r0, r5
   d423c:	b003      	add	sp, #12
   d423e:	bd30      	pop	{r4, r5, pc}

000d4240 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4240:	b510      	push	{r4, lr}
   d4242:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4244:	6800      	ldr	r0, [r0, #0]
   d4246:	b108      	cbz	r0, d424c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4248:	f002 ff00 	bl	d704c <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d424c:	4620      	mov	r0, r4
   d424e:	bd10      	pop	{r4, pc}

000d4250 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>:
    hal_wakeup_source_base_t* wakeupSource() const {
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4250:	6803      	ldr	r3, [r0, #0]
   d4252:	68d8      	ldr	r0, [r3, #12]
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d4254:	b120      	cbz	r0, d4260 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d4256:	8883      	ldrh	r3, [r0, #4]
   d4258:	428b      	cmp	r3, r1
   d425a:	d001      	beq.n	d4260 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
                return start;
            }
            start = start->next;
   d425c:	6880      	ldr	r0, [r0, #8]
   d425e:	e7f9      	b.n	d4254 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x4>
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }
   d4260:	4770      	bx	lr
	...

000d4264 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (valid_) {
   d4268:	7d03      	ldrb	r3, [r0, #20]
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d426a:	4605      	mov	r5, r0
   d426c:	460f      	mov	r7, r1
   d426e:	4616      	mov	r6, r2
        if (valid_) {
   d4270:	b33b      	cbz	r3, d42c2 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
            // Check if this pin has been featured.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
   d4272:	2101      	movs	r1, #1
   d4274:	f7ff ffec 	bl	d4250 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            while (wakeup) {
   d4278:	b150      	cbz	r0, d4290 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x2c>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
   d427a:	8983      	ldrh	r3, [r0, #12]
   d427c:	42bb      	cmp	r3, r7
   d427e:	d104      	bne.n	d428a <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
                    gpioWakeup->mode = mode;
   d4280:	7386      	strb	r6, [r0, #14]
                    return *this;
   d4282:	e01e      	b.n	d42c2 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d4284:	8883      	ldrh	r3, [r0, #4]
   d4286:	2b01      	cmp	r3, #1
   d4288:	d0f6      	beq.n	d4278 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x14>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d428a:	6880      	ldr	r0, [r0, #8]
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d428c:	2800      	cmp	r0, #0
   d428e:	d1f9      	bne.n	d4284 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x20>
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4290:	490d      	ldr	r1, [pc, #52]	; (d42c8 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d4292:	2010      	movs	r0, #16
   d4294:	f004 fdec 	bl	d8e70 <_ZnwjRKSt9nothrow_t>
   d4298:	4604      	mov	r4, r0
   d429a:	b188      	cbz	r0, d42c0 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d429c:	f04f 0810 	mov.w	r8, #16
   d42a0:	4642      	mov	r2, r8
   d42a2:	2100      	movs	r1, #0
   d42a4:	f005 fe3f 	bl	d9f26 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d42a8:	2302      	movs	r3, #2
   d42aa:	8063      	strh	r3, [r4, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d42ac:	2301      	movs	r3, #1
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d42ae:	f8a4 8000 	strh.w	r8, [r4]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d42b2:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d42b4:	692b      	ldr	r3, [r5, #16]
   d42b6:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d42b8:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d42ba:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d42bc:	612c      	str	r4, [r5, #16]
   d42be:	e000      	b.n	d42c2 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
   d42c0:	7528      	strb	r0, [r5, #20]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d42c2:	4628      	mov	r0, r5
   d42c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d42c8:	000ddaf0 	.word	0x000ddaf0

000d42cc <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d42cc:	2000      	movs	r0, #0
   d42ce:	f002 bc1b 	b.w	d6b08 <hal_timer_millis>

000d42d2 <_ZN8particle13constexpr_powIfjEET_S1_T0_>:
                typename std::conditional<bits_fit_in_type<S, bits, int32_t>::value, typename bits_fit_in_type<S, bits, int32_t>::type,
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
   d42d2:	b508      	push	{r3, lr}
   d42d4:	ed2d 8b02 	vpush	{d8}
   d42d8:	eeb0 8a40 	vmov.f32	s16, s0
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d42dc:	b128      	cbz	r0, d42ea <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x18>
   d42de:	3801      	subs	r0, #1
   d42e0:	f7ff fff7 	bl	d42d2 <_ZN8particle13constexpr_powIfjEET_S1_T0_>
   d42e4:	ee28 0a00 	vmul.f32	s0, s16, s0
   d42e8:	e001      	b.n	d42ee <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x1c>
   d42ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
   d42ee:	ecbd 8b02 	vpop	{d8}
   d42f2:	bd08      	pop	{r3, pc}

000d42f4 <_Z17getSignalStrengthv>:
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
  systemStatusWriteNeeded=true;
}


void getSignalStrength() {
   d42f4:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d42f6:	4d19      	ldr	r5, [pc, #100]	; (d435c <_Z17getSignalStrengthv+0x68>)
   d42f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
  systemStatusWriteNeeded=true;
}


void getSignalStrength() {
   d42fa:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d42fc:	ac04      	add	r4, sp, #16
   d42fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4304:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4308:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d430c:	4914      	ldr	r1, [pc, #80]	; (d4360 <_Z17getSignalStrengthv+0x6c>)
   d430e:	a80e      	add	r0, sp, #56	; 0x38
   d4310:	f002 ff4a 	bl	d71a8 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d4314:	a80e      	add	r0, sp, #56	; 0x38
   d4316:	f002 ff9a 	bl	d724e <_ZNK14CellularSignal19getAccessTechnologyEv>
   d431a:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d431c:	a80e      	add	r0, sp, #56	; 0x38
   d431e:	f002 ffe7 	bl	d72f0 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d4322:	a80e      	add	r0, sp, #56	; 0x38
  CellularSignal sig = Cellular.RSSI();

  auto rat = sig.getAccessTechnology();

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4324:	ee10 5a10 	vmov	r5, s0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d4328:	f002 ffc8 	bl	d72bc <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d432c:	ab18      	add	r3, sp, #96	; 0x60
   d432e:	ee10 0a10 	vmov	r0, s0
   d4332:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d4336:	f005 f85b 	bl	d93f0 <__aeabi_f2d>
   d433a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d433e:	4628      	mov	r0, r5
   d4340:	f005 f856 	bl	d93f0 <__aeabi_f2d>
   d4344:	e9cd 0100 	strd	r0, r1, [sp]
   d4348:	4a06      	ldr	r2, [pc, #24]	; (d4364 <_Z17getSignalStrengthv+0x70>)
   d434a:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d434e:	4806      	ldr	r0, [pc, #24]	; (d4368 <_Z17getSignalStrengthv+0x74>)
   d4350:	2140      	movs	r1, #64	; 0x40
   d4352:	f002 fe9b 	bl	d708c <snprintf>
}
   d4356:	b019      	add	sp, #100	; 0x64
   d4358:	bd30      	pop	{r4, r5, pc}
   d435a:	bf00      	nop
   d435c:	000dd170 	.word	0x000dd170
   d4360:	2003e1a8 	.word	0x2003e1a8
   d4364:	000dd1b8 	.word	0x000dd1b8
   d4368:	2003e0fc 	.word	0x2003e0fc
   d436c:	00000000 	.word	0x00000000

000d4370 <_Z14getTemperaturev>:
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);

}

int getTemperature()
{
   d4370:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
   d4372:	200f      	movs	r0, #15
   d4374:	f004 fcd5 	bl	d8d22 <analogRead>
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
   d4378:	f005 f828 	bl	d93cc <__aeabi_i2d>
   d437c:	a320      	add	r3, pc, #128	; (adr r3, d4400 <_Z14getTemperaturev+0x90>)
   d437e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4382:	f005 f889 	bl	d9498 <__aeabi_dmul>
   d4386:	f005 fb7f 	bl	d9a88 <__aeabi_d2f>
  voltage /= 4096.0;                                                  // Electron is different than the Arduino where there are only 1024 steps
  int temperatureC = int(((voltage - 0.5) * 100));                    //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);              // now convert to Fahrenheit
   d438a:	eddf 7a15 	vldr	s15, [pc, #84]	; d43e0 <_Z14getTemperaturev+0x70>
   d438e:	ee07 0a10 	vmov	s14, r0
   d4392:	ee67 7a27 	vmul.f32	s15, s14, s15
   d4396:	ee17 0a90 	vmov	r0, s15
   d439a:	f005 f829 	bl	d93f0 <__aeabi_f2d>
   d439e:	2200      	movs	r2, #0
   d43a0:	4b10      	ldr	r3, [pc, #64]	; (d43e4 <_Z14getTemperaturev+0x74>)
   d43a2:	f004 fec5 	bl	d9130 <__aeabi_dsub>
   d43a6:	2200      	movs	r2, #0
   d43a8:	4b0f      	ldr	r3, [pc, #60]	; (d43e8 <_Z14getTemperaturev+0x78>)
   d43aa:	f005 f875 	bl	d9498 <__aeabi_dmul>
   d43ae:	f005 fb23 	bl	d99f8 <__aeabi_d2iz>
   d43b2:	f005 f80b 	bl	d93cc <__aeabi_i2d>
   d43b6:	2200      	movs	r2, #0
   d43b8:	4b0c      	ldr	r3, [pc, #48]	; (d43ec <_Z14getTemperaturev+0x7c>)
   d43ba:	f005 f86d 	bl	d9498 <__aeabi_dmul>
   d43be:	2200      	movs	r2, #0
   d43c0:	4b0b      	ldr	r3, [pc, #44]	; (d43f0 <_Z14getTemperaturev+0x80>)
   d43c2:	f005 f993 	bl	d96ec <__aeabi_ddiv>
   d43c6:	2200      	movs	r2, #0
   d43c8:	4b0a      	ldr	r3, [pc, #40]	; (d43f4 <_Z14getTemperaturev+0x84>)
   d43ca:	f004 feb3 	bl	d9134 <__adddf3>
   d43ce:	f005 fb13 	bl	d99f8 <__aeabi_d2iz>
   d43d2:	4b09      	ldr	r3, [pc, #36]	; (d43f8 <_Z14getTemperaturev+0x88>)
   d43d4:	6118      	str	r0, [r3, #16]
  currentCountsWriteNeeded=true;
   d43d6:	4b09      	ldr	r3, [pc, #36]	; (d43fc <_Z14getTemperaturev+0x8c>)
   d43d8:	2201      	movs	r2, #1
   d43da:	701a      	strb	r2, [r3, #0]
  return current.temperature;
}
   d43dc:	bd08      	pop	{r3, pc}
   d43de:	bf00      	nop
   d43e0:	39800000 	.word	0x39800000
   d43e4:	3fe00000 	.word	0x3fe00000
   d43e8:	40590000 	.word	0x40590000
   d43ec:	40220000 	.word	0x40220000
   d43f0:	40140000 	.word	0x40140000
   d43f4:	40400000 	.word	0x40400000
   d43f8:	2003e150 	.word	0x2003e150
   d43fc:	2003e148 	.word	0x2003e148
   d4400:	66666666 	.word	0x66666666
   d4404:	400a6666 	.word	0x400a6666

000d4408 <_Z11petWatchdogv>:
{
  watchdogFlag = true;
}

void petWatchdog()
{
   d4408:	b510      	push	{r4, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d440a:	4c0d      	ldr	r4, [pc, #52]	; (d4440 <_Z11petWatchdogv+0x38>)
   d440c:	6823      	ldr	r3, [r4, #0]
    nrf_gpio_pin_set(nrf_pin);
   d440e:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
   d4412:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   d4416:	f003 031f 	and.w	r3, r3, #31
   d441a:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d441e:	f7ff fe6f 	bl	d4100 <nrf_gpio_pin_set>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4422:	6823      	ldr	r3, [r4, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d4424:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
   d4428:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   d442c:	f003 031f 	and.w	r3, r3, #31
   d4430:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4434:	f7ff fe73 	bl	d411e <nrf_gpio_pin_clear>
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
  digitalWriteFast(donePin, LOW);
  watchdogFlag = false;
   d4438:	4b02      	ldr	r3, [pc, #8]	; (d4444 <_Z11petWatchdogv+0x3c>)
   d443a:	2200      	movs	r2, #0
   d443c:	701a      	strb	r2, [r3, #0]
   d443e:	bd10      	pop	{r4, pc}
   d4440:	2003e0f4 	.word	0x2003e0f4
   d4444:	2003e0c8 	.word	0x2003e0c8

000d4448 <_Z14enableChargingb>:
    return res;
  }
}

bool enableCharging(bool enableCharge)
{
   d4448:	b513      	push	{r0, r1, r4, lr}
   d444a:	4604      	mov	r4, r0
  PMIC pmic(true);
   d444c:	2101      	movs	r1, #1
   d444e:	a801      	add	r0, sp, #4
   d4450:	f003 fdad 	bl	d7fae <_ZN4PMICC1Eb>
  if(enableCharge) {
    pmic.enableCharging();
   d4454:	a801      	add	r0, sp, #4
}

bool enableCharging(bool enableCharge)
{
  PMIC pmic(true);
  if(enableCharge) {
   d4456:	b11c      	cbz	r4, d4460 <_Z14enableChargingb+0x18>
    pmic.enableCharging();
   d4458:	f003 fe44 	bl	d80e4 <_ZN4PMIC14enableChargingEv>
    return TRUE;
   d445c:	2401      	movs	r4, #1
   d445e:	e001      	b.n	d4464 <_Z14enableChargingb+0x1c>
  }
  else {
    pmic.disableCharging();
   d4460:	f003 fe10 	bl	d8084 <_ZN4PMIC15disableChargingEv>
  }
}

bool enableCharging(bool enableCharge)
{
  PMIC pmic(true);
   d4464:	a801      	add	r0, sp, #4
   d4466:	f003 fdb1 	bl	d7fcc <_ZN4PMICD1Ev>
  }
  else {
    pmic.disableCharging();
    return FALSE;
  }
}
   d446a:	4620      	mov	r0, r4
   d446c:	b002      	add	sp, #8
   d446e:	bd10      	pop	{r4, pc}

000d4470 <_Z14setPowerConfigv>:
  watchdogFlag = false;
}


// Power Management function
int setPowerConfig() {
   d4470:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d4472:	2420      	movs	r4, #32
   d4474:	b090      	sub	sp, #64	; 0x40
   d4476:	4622      	mov	r2, r4
   d4478:	2100      	movs	r1, #0
   d447a:	4668      	mov	r0, sp
   d447c:	f005 fd53 	bl	d9f26 <memset>
   d4480:	4622      	mov	r2, r4
   d4482:	2100      	movs	r1, #0
   d4484:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4488:	f88d 4005 	strb.w	r4, [sp, #5]

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d448c:	f005 fd4b 	bl	d9f26 <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d4490:	2100      	movs	r1, #0
   d4492:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4496:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d449a:	f002 fd03 	bl	d6ea4 <system_power_management_set_config>
  SystemPowerConfiguration conf;
  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration

  if (sysStatus.solarPowerMode) {
   d449e:	4b19      	ldr	r3, [pc, #100]	; (d4504 <_Z14setPowerConfigv+0x94>)
   d44a0:	7959      	ldrb	r1, [r3, #5]
   d44a2:	9b00      	ldr	r3, [sp, #0]
   d44a4:	f241 0070 	movw	r0, #4208	; 0x1070
   d44a8:	b191      	cbz	r1, d44d0 <_Z14setPowerConfigv+0x60>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d44aa:	f240 2226 	movw	r2, #550	; 0x226
   d44ae:	f8ad 2008 	strh.w	r2, [sp, #8]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d44b2:	f44f 7200 	mov.w	r2, #512	; 0x200
   d44b6:	f8ad 200a 	strh.w	r2, [sp, #10]
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d44ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d44be:	f241 0272 	movw	r2, #4210	; 0x1072

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d44c2:	f8ad 0006 	strh.w	r0, [sp, #6]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d44c6:	f8ad 200c 	strh.w	r2, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d44ca:	9300      	str	r3, [sp, #0]
   d44cc:	2100      	movs	r1, #0
   d44ce:	e00e      	b.n	d44ee <_Z14setPowerConfigv+0x7e>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d44d0:	f44f 7261 	mov.w	r2, #900	; 0x384
   d44d4:	f8ad 2008 	strh.w	r2, [sp, #8]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d44d8:	f8ad 200a 	strh.w	r2, [sp, #10]
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d44dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d44e0:	f241 0210 	movw	r2, #4112	; 0x1010

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d44e4:	f8ad 0006 	strh.w	r0, [sp, #6]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d44e8:	f8ad 200c 	strh.w	r2, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d44ec:	9300      	str	r3, [sp, #0]
   d44ee:	4668      	mov	r0, sp
   d44f0:	f002 fcd8 	bl	d6ea4 <system_power_management_set_config>
   d44f4:	4604      	mov	r4, r0
        .powerSourceMinVoltage(4208)                                  // This is the default value for the Boron
        .batteryChargeCurrent(900)                                    // higher charge current from DC-IN when not solar powered
        .batteryChargeVoltage(4112)                                   // default is 4.112V termination voltage
        .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST) ;
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    enableCharging(true);
   d44f6:	2001      	movs	r0, #1
   d44f8:	f7ff ffa6 	bl	d4448 <_Z14enableChargingb>
    return res;
  }
}
   d44fc:	4620      	mov	r0, r4
   d44fe:	b010      	add	sp, #64	; 0x40
   d4500:	bd10      	pop	{r4, pc}
   d4502:	bf00      	nop
   d4504:	2003e174 	.word	0x2003e174

000d4508 <_Z12notConnectedv>:
  systemStatusWriteNeeded = true;
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d4508:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d450a:	f002 fd07 	bl	d6f1c <spark_cloud_flag_connected>
  return !Particle.connected();
   d450e:	f080 0001 	eor.w	r0, r0, #1
}
   d4512:	b2c0      	uxtb	r0, r0
   d4514:	bd08      	pop	{r3, pc}
	...

000d4518 <_Z22disconnectFromParticlev>:
    return 0;                                                    // Failed to connect
  }
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
   d4518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d451a:	f002 fcf7 	bl	d6f0c <spark_cloud_flag_disconnect>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d451e:	f7ff fed5 	bl	d42cc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4522:	2500      	movs	r5, #0
   d4524:	4604      	mov	r4, r0
   d4526:	f643 2697 	movw	r6, #14999	; 0x3a97
   d452a:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d452c:	f7ff fece 	bl	d42cc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4530:	1b00      	subs	r0, r0, r4
   d4532:	eb61 0105 	sbc.w	r1, r1, r5
   d4536:	428f      	cmp	r7, r1
   d4538:	bf08      	it	eq
   d453a:	4286      	cmpeq	r6, r0
   d453c:	d305      	bcc.n	d454a <_Z22disconnectFromParticlev+0x32>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d453e:	f7ff ffe3 	bl	d4508 <_Z12notConnectedv>
   d4542:	b910      	cbnz	r0, d454a <_Z22disconnectFromParticlev+0x32>
            spark_process();
   d4544:	f002 fcd2 	bl	d6eec <spark_process>
   d4548:	e7f0      	b.n	d452c <_Z22disconnectFromParticlev+0x14>
   d454a:	f7ff ffdd 	bl	d4508 <_Z12notConnectedv>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d454e:	4809      	ldr	r0, [pc, #36]	; (d4574 <_Z22disconnectFromParticlev+0x5c>)
   d4550:	2300      	movs	r3, #0
   d4552:	4619      	mov	r1, r3
   d4554:	461a      	mov	r2, r3
   d4556:	6840      	ldr	r0, [r0, #4]
   d4558:	f002 fd48 	bl	d6fec <network_off>
  Cellular.off();
  sysStatus.connectedStatus = false;
   d455c:	4b06      	ldr	r3, [pc, #24]	; (d4578 <_Z22disconnectFromParticlev+0x60>)
   d455e:	2200      	movs	r2, #0
   d4560:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d4562:	4b06      	ldr	r3, [pc, #24]	; (d457c <_Z22disconnectFromParticlev+0x64>)
   d4564:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4566:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
  Cellular.off();
  sysStatus.connectedStatus = false;
  systemStatusWriteNeeded = true;
   d456a:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
   d456c:	f002 fdae 	bl	d70cc <delay>
  return true;
}
   d4570:	4620      	mov	r0, r4
   d4572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4574:	2003e1a8 	.word	0x2003e1a8
   d4578:	2003e174 	.word	0x2003e174
   d457c:	2003e171 	.word	0x2003e171

000d4580 <_Z15resetEverythingv>:
    return 1;
  }
  else return 0;
}

void resetEverything() {                                            // The device is waking up in a new day or is a new install
   d4580:	b538      	push	{r3, r4, r5, lr}
  current.dailyCount = 0;                              // Reset the counts in FRAM as well
   d4582:	4d08      	ldr	r5, [pc, #32]	; (d45a4 <_Z15resetEverythingv+0x24>)
   d4584:	2400      	movs	r4, #0
   d4586:	60ac      	str	r4, [r5, #8]
  current.hourlyCount = 0;
   d4588:	602c      	str	r4, [r5, #0]
  current.hourlyCountInFlight = 0;
   d458a:	606c      	str	r4, [r5, #4]
  current.lastCountTime = Time.now();                      // Set the time context to the new day
   d458c:	f004 f969 	bl	d8862 <_ZN9TimeClass3nowEv>
  sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
   d4590:	4b05      	ldr	r3, [pc, #20]	; (d45a8 <_Z15resetEverythingv+0x28>)
  currentCountsWriteNeeded=true;
   d4592:	4a06      	ldr	r2, [pc, #24]	; (d45ac <_Z15resetEverythingv+0x2c>)
void resetEverything() {                                            // The device is waking up in a new day or is a new install
  current.dailyCount = 0;                              // Reset the counts in FRAM as well
  current.hourlyCount = 0;
  current.hourlyCountInFlight = 0;
  current.lastCountTime = Time.now();                      // Set the time context to the new day
  sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
   d4594:	615c      	str	r4, [r3, #20]
  currentCountsWriteNeeded=true;
   d4596:	2301      	movs	r3, #1
   d4598:	7013      	strb	r3, [r2, #0]
  systemStatusWriteNeeded=true;
   d459a:	4a05      	ldr	r2, [pc, #20]	; (d45b0 <_Z15resetEverythingv+0x30>)

void resetEverything() {                                            // The device is waking up in a new day or is a new install
  current.dailyCount = 0;                              // Reset the counts in FRAM as well
  current.hourlyCount = 0;
  current.hourlyCountInFlight = 0;
  current.lastCountTime = Time.now();                      // Set the time context to the new day
   d459c:	60e8      	str	r0, [r5, #12]
  sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
   d459e:	616c      	str	r4, [r5, #20]
  currentCountsWriteNeeded=true;
  systemStatusWriteNeeded=true;
   d45a0:	7013      	strb	r3, [r2, #0]
   d45a2:	bd38      	pop	{r3, r4, r5, pc}
   d45a4:	2003e150 	.word	0x2003e150
   d45a8:	2003e174 	.word	0x2003e174
   d45ac:	2003e148 	.word	0x2003e148
   d45b0:	2003e171 	.word	0x2003e171

000d45b4 <_Z20meterParticlePublishv>:
  systemStatusWriteNeeded = true;
  return 1;
}

bool meterParticlePublish(void)
{
   d45b4:	b510      	push	{r4, lr}
  static unsigned long lastPublish=0;                                   // Initialize and store value here
  if(millis() - lastPublish >= 1000) {                                  // Particle rate limits at 1 publish per second
   d45b6:	4c07      	ldr	r4, [pc, #28]	; (d45d4 <_Z20meterParticlePublishv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d45b8:	f002 fa86 	bl	d6ac8 <HAL_Timer_Get_Milli_Seconds>
   d45bc:	6823      	ldr	r3, [r4, #0]
   d45be:	1ac0      	subs	r0, r0, r3
   d45c0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d45c4:	d304      	bcc.n	d45d0 <_Z20meterParticlePublishv+0x1c>
   d45c6:	f002 fa7f 	bl	d6ac8 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d45ca:	6020      	str	r0, [r4, #0]
   d45cc:	2001      	movs	r0, #1
   d45ce:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
   d45d0:	2000      	movs	r0, #0
}
   d45d2:	bd10      	pop	{r4, pc}
   d45d4:	2003e16c 	.word	0x2003e16c

000d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d45d8:	b508      	push	{r3, lr}
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
  waitUntil(meterParticlePublish);
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  waitUntil(meterParticlePublish);
   d45da:	f7ff ffeb 	bl	d45b4 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d45de:	b118      	cbz	r0, d45e8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d45e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d45e4:	f7ff bfe6 	b.w	d45b4 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d45e8:	f002 fc80 	bl	d6eec <spark_process>
   d45ec:	e7f5      	b.n	d45da <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71+0x2>
	...

000d45f0 <_Z14fullModemResetv>:
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
  }
  Serial.println(stateTransitionString);
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d45f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d45f2:	f002 fc8b 	bl	d6f0c <spark_cloud_flag_disconnect>
   d45f6:	f002 fa67 	bl	d6ac8 <HAL_Timer_Get_Milli_Seconds>
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d45fa:	f643 2597 	movw	r5, #14999	; 0x3a97
   d45fe:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4600:	f002 fc8c 	bl	d6f1c <spark_cloud_flag_connected>
   d4604:	b140      	cbz	r0, d4618 <_Z14fullModemResetv+0x28>
   d4606:	f002 fa5f 	bl	d6ac8 <HAL_Timer_Get_Milli_Seconds>
   d460a:	1b00      	subs	r0, r0, r4
   d460c:	42a8      	cmp	r0, r5
   d460e:	d803      	bhi.n	d4618 <_Z14fullModemResetv+0x28>
		delay(100);
   d4610:	2064      	movs	r0, #100	; 0x64
   d4612:	f002 fd5b 	bl	d70cc <delay>
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d4616:	e7f3      	b.n	d4600 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d4618:	2100      	movs	r1, #0
   d461a:	4b09      	ldr	r3, [pc, #36]	; (d4640 <_Z14fullModemResetv+0x50>)
   d461c:	f247 5230 	movw	r2, #30000	; 0x7530
   d4620:	4608      	mov	r0, r1
   d4622:	f002 f9f9 	bl	d6a18 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=15\r\n");
	delay(1000);
   d4626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d462a:	f002 fd4f 	bl	d70cc <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d462e:	4b05      	ldr	r3, [pc, #20]	; (d4644 <_Z14fullModemResetv+0x54>)
   d4630:	220a      	movs	r2, #10
   d4632:	681b      	ldr	r3, [r3, #0]
   d4634:	2101      	movs	r1, #1
   d4636:	4668      	mov	r0, sp
   d4638:	f003 ff3a 	bl	d84b0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d463c:	b003      	add	sp, #12
   d463e:	bd30      	pop	{r4, r5, pc}
   d4640:	000dd1d1 	.word	0x000dd1d1
   d4644:	2003e0e4 	.word	0x2003e0e4

000d4648 <_Z8isDSTusav>:
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(t), PRIVATE);
  return 1;
}

bool isDSTusa() {
   d4648:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
   d464a:	f004 f925 	bl	d8898 <_ZN9TimeClass3dayEv>
   d464e:	4605      	mov	r5, r0
  int month = Time.month();
   d4650:	f004 f933 	bl	d88ba <_ZN9TimeClass5monthEv>
   d4654:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d4656:	f004 f929 	bl	d88ac <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d465a:	1f23      	subs	r3, r4, #4
   d465c:	2b06      	cmp	r3, #6
   d465e:	d90e      	bls.n	d467e <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d4660:	1ee3      	subs	r3, r4, #3
   d4662:	2b08      	cmp	r3, #8
   d4664:	d80d      	bhi.n	d4682 <_Z8isDSTusav+0x3a>
  { // before March or after October is definetly standard time
    return false;
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
   d4666:	3801      	subs	r0, #1
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d4668:	1a2d      	subs	r5, r5, r0
   d466a:	d501      	bpl.n	d4670 <_Z8isDSTusav+0x28>
   d466c:	2c0b      	cmp	r4, #11
   d466e:	e002      	b.n	d4676 <_Z8isDSTusav+0x2e>
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d4670:	2d07      	cmp	r5, #7
   d4672:	dd06      	ble.n	d4682 <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d4674:	2c03      	cmp	r4, #3
   d4676:	bf14      	ite	ne
   d4678:	2000      	movne	r0, #0
   d467a:	2001      	moveq	r0, #1
   d467c:	bd38      	pop	{r3, r4, r5, pc}
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
  { // April to October definetly DST
    return true;
   d467e:	2001      	movs	r0, #1
   d4680:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (month < 3 || month > 11)
  { // before March or after October is definetly standard time
    return false;
   d4682:	2000      	movs	r0, #0
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d4684:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4688 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4688:	b530      	push	{r4, r5, lr}
   d468a:	b085      	sub	sp, #20
   d468c:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d468e:	a904      	add	r1, sp, #16
   d4690:	2200      	movs	r2, #0
   d4692:	f841 2d10 	str.w	r2, [r1, #-16]!
    const int ret = diag_get_source(id, &src, nullptr);
   d4696:	f002 fb9f 	bl	d6dd8 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d469a:	b9a8      	cbnz	r0, d46c8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d469c:	9c00      	ldr	r4, [sp, #0]
    }
    return get(src, data, size);
}

inline int AbstractDiagnosticData::get(const diag_source* src, void* data, size_t& size) {
    SPARK_ASSERT(src && src->callback);
   d469e:	b10c      	cbz	r4, d46a4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1c>
   d46a0:	6923      	ldr	r3, [r4, #16]
   d46a2:	b923      	cbnz	r3, d46ae <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x26>
   d46a4:	4a09      	ldr	r2, [pc, #36]	; (d46cc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d46a6:	2100      	movs	r1, #0
   d46a8:	200a      	movs	r0, #10
   d46aa:	f002 fb7d 	bl	d6da8 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d46ae:	2300      	movs	r3, #0
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	230c      	movs	r3, #12
   d46b4:	f8ad 3004 	strh.w	r3, [sp, #4]
   d46b8:	2304      	movs	r3, #4
   d46ba:	9303      	str	r3, [sp, #12]
   d46bc:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d46be:	6923      	ldr	r3, [r4, #16]
   d46c0:	aa01      	add	r2, sp, #4
   d46c2:	2101      	movs	r1, #1
   d46c4:	4620      	mov	r0, r4
   d46c6:	4798      	blx	r3
    const int ret = diag_get_source(id, &src, nullptr);
    if (ret != SYSTEM_ERROR_NONE) {
        return ret;
    }
    return get(src, val);
}
   d46c8:	b005      	add	sp, #20
   d46ca:	bd30      	pop	{r4, r5, pc}
   d46cc:	000d6ab9 	.word	0x000d6ab9

000d46d0 <_Z17getBatteryContextv>:
  float qualityPercentage = sig.getQuality();

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}

void getBatteryContext() {
   d46d0:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d46d2:	4d0e      	ldr	r5, [pc, #56]	; (d470c <_Z17getBatteryContextv+0x3c>)
   d46d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  float qualityPercentage = sig.getQuality();

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}

void getBatteryContext() {
   d46d6:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d46d8:	ac01      	add	r4, sp, #4
   d46da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d46dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d46e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d46e4:	4669      	mov	r1, sp
   d46e6:	2007      	movs	r0, #7
   d46e8:	f7ff ffce 	bl	d4688 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        return val;
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val));
   d46ec:	2800      	cmp	r0, #0
        return val;
   d46ee:	bfa8      	it	ge
   d46f0:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d46f2:	4a07      	ldr	r2, [pc, #28]	; (d4710 <_Z17getBatteryContextv+0x40>)
   d46f4:	ab08      	add	r3, sp, #32
   d46f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d46fa:	2110      	movs	r1, #16
   d46fc:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4700:	4804      	ldr	r0, [pc, #16]	; (d4714 <_Z17getBatteryContextv+0x44>)
   d4702:	f002 fcc3 	bl	d708c <snprintf>

}
   d4706:	b009      	add	sp, #36	; 0x24
   d4708:	bd30      	pop	{r4, r5, pc}
   d470a:	bf00      	nop
   d470c:	000dd198 	.word	0x000dd198
   d4710:	000dd776 	.word	0x000dd776
   d4714:	2003e0a9 	.word	0x2003e0a9

000d4718 <_Z16takeMeasurementsv>:
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call
void takeMeasurements()
{
   d4718:	b507      	push	{r0, r1, r2, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d471a:	4b18      	ldr	r3, [pc, #96]	; (d477c <_Z16takeMeasurementsv+0x64>)
   d471c:	2200      	movs	r2, #0
   d471e:	4611      	mov	r1, r2
   d4720:	6858      	ldr	r0, [r3, #4]
   d4722:	f002 fc53 	bl	d6fcc <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d4726:	b108      	cbz	r0, d472c <_Z16takeMeasurementsv+0x14>
   d4728:	f7ff fde4 	bl	d42f4 <_Z17getSignalStrengthv>
  getTemperature();                                                   // Get Temperature at startup as well
   d472c:	f7ff fe20 	bl	d4370 <_Z14getTemperaturev>
  getBatteryContext();                                                // What is the battery up to?
   d4730:	f7ff ffce 	bl	d46d0 <_Z17getBatteryContextv>
   d4734:	a901      	add	r1, sp, #4
   d4736:	2003      	movs	r0, #3
   d4738:	f7ff ffa6 	bl	d4688 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d473c:	b988      	cbnz	r0, d4762 <_Z16takeMeasurementsv+0x4a>
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d473e:	2006      	movs	r0, #6
   d4740:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   d4744:	f7ff fdc5 	bl	d42d2 <_ZN8particle13constexpr_powIfjEET_S1_T0_>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4748:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d474c:	ee30 0a00 	vadd.f32	s0, s0, s0
   d4750:	ee07 3a10 	vmov	s14, r3
   d4754:	ee30 0a00 	vadd.f32	s0, s0, s0
   d4758:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d475c:	eec7 7a00 	vdiv.f32	s15, s14, s0
   d4760:	e001      	b.n	d4766 <_Z16takeMeasurementsv+0x4e>
            return -1.0f;
   d4762:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  //sysStatus.stateOfCharge = int(batteryMonitor.getSoC());
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
   d4766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d476a:	4b05      	ldr	r3, [pc, #20]	; (d4780 <_Z16takeMeasurementsv+0x68>)
   d476c:	edc3 7a02 	vstr	s15, [r3, #8]
  systemStatusWriteNeeded=true;
   d4770:	4b04      	ldr	r3, [pc, #16]	; (d4784 <_Z16takeMeasurementsv+0x6c>)
   d4772:	2201      	movs	r2, #1
   d4774:	701a      	strb	r2, [r3, #0]
}
   d4776:	b003      	add	sp, #12
   d4778:	f85d fb04 	ldr.w	pc, [sp], #4
   d477c:	2003e1a8 	.word	0x2003e1a8
   d4780:	2003e174 	.word	0x2003e174
   d4784:	2003e171 	.word	0x2003e171

000d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4788:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d478a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d478c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d478e:	b17c      	cbz	r4, d47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4790:	6863      	ldr	r3, [r4, #4]
   d4792:	3b01      	subs	r3, #1
   d4794:	6063      	str	r3, [r4, #4]
   d4796:	b95b      	cbnz	r3, d47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4798:	6823      	ldr	r3, [r4, #0]
   d479a:	4620      	mov	r0, r4
   d479c:	689b      	ldr	r3, [r3, #8]
   d479e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d47a0:	68a3      	ldr	r3, [r4, #8]
   d47a2:	3b01      	subs	r3, #1
   d47a4:	60a3      	str	r3, [r4, #8]
   d47a6:	b91b      	cbnz	r3, d47b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d47a8:	6823      	ldr	r3, [r4, #0]
   d47aa:	4620      	mov	r0, r4
   d47ac:	68db      	ldr	r3, [r3, #12]
   d47ae:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d47b0:	4628      	mov	r0, r5
   d47b2:	bd38      	pop	{r3, r4, r5, pc}

000d47b4 <_Z11recordCountv>:
*/

}

void recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the Arduino
{
   d47b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d47b8:	4d41      	ldr	r5, [pc, #260]	; (d48c0 <_Z11recordCountv+0x10c>)
   d47ba:	f8df 8134 	ldr.w	r8, [pc, #308]	; d48f0 <_Z11recordCountv+0x13c>
   d47be:	682b      	ldr	r3, [r5, #0]
    nrf_gpio_pin_set(nrf_pin);
   d47c0:	f893 0070 	ldrb.w	r0, [r3, #112]	; 0x70
   d47c4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   d47c8:	f003 031f 	and.w	r3, r3, #31
   d47cc:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d47d0:	b0c4      	sub	sp, #272	; 0x110
   d47d2:	f7ff fc95 	bl	d4100 <nrf_gpio_pin_set>
   d47d6:	f002 f977 	bl	d6ac8 <HAL_Timer_Get_Milli_Seconds>
  static byte currentMinutePeriod;                                    // Current minute
  static unsigned long lastCountMillis = 0;

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
   d47da:	4b3a      	ldr	r3, [pc, #232]	; (d48c4 <_Z11recordCountv+0x110>)
   d47dc:	681a      	ldr	r2, [r3, #0]
   d47de:	1a80      	subs	r0, r0, r2
   d47e0:	4a39      	ldr	r2, [pc, #228]	; (d48c8 <_Z11recordCountv+0x114>)
   d47e2:	6911      	ldr	r1, [r2, #16]
   d47e4:	4288      	cmp	r0, r1
   d47e6:	461c      	mov	r4, r3
   d47e8:	4616      	mov	r6, r2
   d47ea:	d21c      	bcs.n	d4826 <_Z11recordCountv+0x72>
   d47ec:	f898 7000 	ldrb.w	r7, [r8]
   d47f0:	b9cf      	cbnz	r7, d4826 <_Z11recordCountv+0x72>
      snprintf(data, sizeof(data), "Count, hourly: %i, daily: %i",current.hourlyCount,current.dailyCount);
      waitUntil(meterParticlePublish);
      Particle.publish("Count",data, PRIVATE);                           // Helpful for monitoring and calibration
    }
  }
  else if(sysStatus.verboseMode && Particle.connected()) {
   d47f2:	7913      	ldrb	r3, [r2, #4]
   d47f4:	b11b      	cbz	r3, d47fe <_Z11recordCountv+0x4a>
   d47f6:	f002 fb91 	bl	d6f1c <spark_cloud_flag_connected>
   d47fa:	2800      	cmp	r0, #0
   d47fc:	d150      	bne.n	d48a0 <_Z11recordCountv+0xec>
    waitUntil(meterParticlePublish);
    Particle.publish("Event","Debounced", PRIVATE);
  }

  currentCountsWriteNeeded = true;                                    // Write updated values to FRAM
   d47fe:	4b33      	ldr	r3, [pc, #204]	; (d48cc <_Z11recordCountv+0x118>)
   d4800:	2201      	movs	r2, #1
   d4802:	701a      	strb	r2, [r3, #0]
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4804:	682b      	ldr	r3, [r5, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d4806:	f893 0070 	ldrb.w	r0, [r3, #112]	; 0x70
   d480a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   d480e:	f003 031f 	and.w	r3, r3, #31
   d4812:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4816:	f7ff fc82 	bl	d411e <nrf_gpio_pin_clear>
  pinResetFast(blueLED);                                              // Turn off the blue LED
  sensorDetect = false;                                               // Reset the flag
   d481a:	4b2d      	ldr	r3, [pc, #180]	; (d48d0 <_Z11recordCountv+0x11c>)
   d481c:	2200      	movs	r2, #0
   d481e:	701a      	strb	r2, [r3, #0]
}
   d4820:	b044      	add	sp, #272	; 0x110
   d4822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4826:	f002 f94f 	bl	d6ac8 <HAL_Timer_Get_Milli_Seconds>

  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
    lastCountMillis = millis();
    awokeFromNap = false;                                             // Reset the awoke flag

    if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
   d482a:	4f2a      	ldr	r7, [pc, #168]	; (d48d4 <_Z11recordCountv+0x120>)
  static unsigned long lastCountMillis = 0;

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
    lastCountMillis = millis();
   d482c:	6020      	str	r0, [r4, #0]
    awokeFromNap = false;                                             // Reset the awoke flag
   d482e:	2300      	movs	r3, #0

    if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
   d4830:	783c      	ldrb	r4, [r7, #0]

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
    lastCountMillis = millis();
    awokeFromNap = false;                                             // Reset the awoke flag
   d4832:	f888 3000 	strb.w	r3, [r8]

    if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
   d4836:	f004 f825 	bl	d8884 <_ZN9TimeClass6minuteEv>
   d483a:	4284      	cmp	r4, r0
   d483c:	4c26      	ldr	r4, [pc, #152]	; (d48d8 <_Z11recordCountv+0x124>)
   d483e:	d004      	beq.n	d484a <_Z11recordCountv+0x96>
      currentMinutePeriod = Time.minute();                            // Reset period
   d4840:	f004 f820 	bl	d8884 <_ZN9TimeClass6minuteEv>
      current.maxMinValue = 1;                                        // Reset for the new minute
   d4844:	2301      	movs	r3, #1
  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
    lastCountMillis = millis();
    awokeFromNap = false;                                             // Reset the awoke flag

    if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
      currentMinutePeriod = Time.minute();                            // Reset period
   d4846:	7038      	strb	r0, [r7, #0]
      current.maxMinValue = 1;                                        // Reset for the new minute
   d4848:	61a3      	str	r3, [r4, #24]
    }
    current.maxMinValue++;
   d484a:	69a3      	ldr	r3, [r4, #24]
   d484c:	4f22      	ldr	r7, [pc, #136]	; (d48d8 <_Z11recordCountv+0x124>)
   d484e:	3301      	adds	r3, #1
   d4850:	61a3      	str	r3, [r4, #24]

    current.lastCountTime = Time.now();
   d4852:	f004 f806 	bl	d8862 <_ZN9TimeClass3nowEv>
    current.hourlyCount++;                                                // Increment the PersonCount
   d4856:	6823      	ldr	r3, [r4, #0]
      currentMinutePeriod = Time.minute();                            // Reset period
      current.maxMinValue = 1;                                        // Reset for the new minute
    }
    current.maxMinValue++;

    current.lastCountTime = Time.now();
   d4858:	60e0      	str	r0, [r4, #12]
    current.hourlyCount++;                                                // Increment the PersonCount
   d485a:	3301      	adds	r3, #1
   d485c:	6023      	str	r3, [r4, #0]
    current.dailyCount++;                                                 // Increment the PersonCount
   d485e:	68a3      	ldr	r3, [r4, #8]
   d4860:	3301      	adds	r3, #1
   d4862:	60a3      	str	r3, [r4, #8]
    if (sysStatus.verboseMode && Particle.connected()) {
   d4864:	7933      	ldrb	r3, [r6, #4]
   d4866:	2b00      	cmp	r3, #0
   d4868:	d0c9      	beq.n	d47fe <_Z11recordCountv+0x4a>
   d486a:	f002 fb57 	bl	d6f1c <spark_cloud_flag_connected>
   d486e:	2800      	cmp	r0, #0
   d4870:	d0c5      	beq.n	d47fe <_Z11recordCountv+0x4a>
      char data[256];                                                    // Store the date in this character array - not global
      snprintf(data, sizeof(data), "Count, hourly: %i, daily: %i",current.hourlyCount,current.dailyCount);
   d4872:	68bb      	ldr	r3, [r7, #8]
   d4874:	9300      	str	r3, [sp, #0]
   d4876:	683b      	ldr	r3, [r7, #0]
   d4878:	4a18      	ldr	r2, [pc, #96]	; (d48dc <_Z11recordCountv+0x128>)
   d487a:	f44f 7180 	mov.w	r1, #256	; 0x100
   d487e:	a804      	add	r0, sp, #16
   d4880:	f002 fc04 	bl	d708c <snprintf>
      waitUntil(meterParticlePublish);
   d4884:	f7ff fea8 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d4888:	4b15      	ldr	r3, [pc, #84]	; (d48e0 <_Z11recordCountv+0x12c>)
      Particle.publish("Count",data, PRIVATE);                           // Helpful for monitoring and calibration
   d488a:	4916      	ldr	r1, [pc, #88]	; (d48e4 <_Z11recordCountv+0x130>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d488c:	781b      	ldrb	r3, [r3, #0]
   d488e:	2200      	movs	r2, #0
   d4890:	f88d 2000 	strb.w	r2, [sp]
   d4894:	a802      	add	r0, sp, #8
   d4896:	aa04      	add	r2, sp, #16
   d4898:	f7ff fcc5 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d489c:	a803      	add	r0, sp, #12
   d489e:	e00b      	b.n	d48b8 <_Z11recordCountv+0x104>
    }
  }
  else if(sysStatus.verboseMode && Particle.connected()) {
    waitUntil(meterParticlePublish);
   d48a0:	f7ff fe9a 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d48a4:	4b0e      	ldr	r3, [pc, #56]	; (d48e0 <_Z11recordCountv+0x12c>)
    Particle.publish("Event","Debounced", PRIVATE);
   d48a6:	4a10      	ldr	r2, [pc, #64]	; (d48e8 <_Z11recordCountv+0x134>)
   d48a8:	781b      	ldrb	r3, [r3, #0]
   d48aa:	4910      	ldr	r1, [pc, #64]	; (d48ec <_Z11recordCountv+0x138>)
   d48ac:	f88d 7000 	strb.w	r7, [sp]
   d48b0:	a804      	add	r0, sp, #16
   d48b2:	f7ff fcb8 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d48b6:	a805      	add	r0, sp, #20
   d48b8:	f7ff ff66 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d48bc:	e79f      	b.n	d47fe <_Z11recordCountv+0x4a>
   d48be:	bf00      	nop
   d48c0:	2003e0f4 	.word	0x2003e0f4
   d48c4:	2003e140 	.word	0x2003e140
   d48c8:	2003e174 	.word	0x2003e174
   d48cc:	2003e148 	.word	0x2003e148
   d48d0:	2003e068 	.word	0x2003e068
   d48d4:	2003e0c1 	.word	0x2003e0c1
   d48d8:	2003e150 	.word	0x2003e150
   d48dc:	000dd1de 	.word	0x000dd1de
   d48e0:	2003e0a0 	.word	0x2003e0a0
   d48e4:	000dd4ac 	.word	0x000dd4ac
   d48e8:	000dd1fb 	.word	0x000dd1fb
   d48ec:	000dd205 	.word	0x000dd205
   d48f0:	2003e13c 	.word	0x2003e13c

000d48f4 <_Z17connectToParticlev>:

 // These are the particle functions that allow you to configure and run the device
 // They are intended to allow for customization and control during installations
 // and to allow for management.

bool connectToParticle() {
   d48f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d48f8:	481f      	ldr	r0, [pc, #124]	; (d4978 <_Z17connectToParticlev+0x84>)
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
   d48fa:	4d20      	ldr	r5, [pc, #128]	; (d497c <_Z17connectToParticlev+0x88>)
   d48fc:	6840      	ldr	r0, [r0, #4]
   d48fe:	2300      	movs	r3, #0
   d4900:	461a      	mov	r2, r3
   d4902:	4619      	mov	r1, r3
   d4904:	f002 fb6a 	bl	d6fdc <network_on>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4908:	f002 faf8 	bl	d6efc <spark_cloud_flag_connect>
   d490c:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4910:	f240 36e7 	movw	r6, #999	; 0x3e7
   d4914:	2700      	movs	r7, #0
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4916:	f7ff fcd9 	bl	d42cc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d491a:	f04f 0900 	mov.w	r9, #0
   d491e:	4680      	mov	r8, r0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4920:	f7ff fcd4 	bl	d42cc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4924:	ebb0 0008 	subs.w	r0, r0, r8
   d4928:	eb61 0109 	sbc.w	r1, r1, r9
   d492c:	428f      	cmp	r7, r1
   d492e:	bf08      	it	eq
   d4930:	4286      	cmpeq	r6, r0
   d4932:	d305      	bcc.n	d4940 <_Z17connectToParticlev+0x4c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4934:	f002 faf2 	bl	d6f1c <spark_cloud_flag_connected>
   d4938:	b910      	cbnz	r0, d4940 <_Z17connectToParticlev+0x4c>
            spark_process();
   d493a:	f002 fad7 	bl	d6eec <spark_process>
   d493e:	e7ef      	b.n	d4920 <_Z17connectToParticlev+0x2c>
   d4940:	f002 faec 	bl	d6f1c <spark_cloud_flag_connected>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4944:	b148      	cbz	r0, d495a <_Z17connectToParticlev+0x66>
   d4946:	f002 fae9 	bl	d6f1c <spark_cloud_flag_connected>
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
    Particle.process();
  }
  if (Particle.connected()) {
   d494a:	b198      	cbz	r0, d4974 <_Z17connectToParticlev+0x80>
    sysStatus.connectedStatus = true;
   d494c:	4a0c      	ldr	r2, [pc, #48]	; (d4980 <_Z17connectToParticlev+0x8c>)
   d494e:	2301      	movs	r3, #1
   d4950:	70d3      	strb	r3, [r2, #3]
    systemStatusWriteNeeded = true;
   d4952:	4a0c      	ldr	r2, [pc, #48]	; (d4984 <_Z17connectToParticlev+0x90>)
   d4954:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
   d4956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
   d495a:	782b      	ldrb	r3, [r5, #0]
   d495c:	b10b      	cbz	r3, d4962 <_Z17connectToParticlev+0x6e>
   d495e:	f7ff ff29 	bl	d47b4 <_Z11recordCountv>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4962:	f002 f8b1 	bl	d6ac8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4966:	4b08      	ldr	r3, [pc, #32]	; (d4988 <_Z17connectToParticlev+0x94>)
   d4968:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d496a:	f002 fabf 	bl	d6eec <spark_process>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d496e:	3c01      	subs	r4, #1
   d4970:	d0e9      	beq.n	d4946 <_Z17connectToParticlev+0x52>
   d4972:	e7d0      	b.n	d4916 <_Z17connectToParticlev+0x22>
    return 1;                               // Were able to connect successfully
  }
  else {
    return 0;                                                    // Failed to connect
  }
}
   d4974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4978:	2003e1a8 	.word	0x2003e1a8
   d497c:	2003e068 	.word	0x2003e068
   d4980:	2003e174 	.word	0x2003e174
   d4984:	2003e171 	.word	0x2003e171
   d4988:	2003e5f0 	.word	0x2003e5f0

000d498c <_Z9sendEventv>:
  pinResetFast(blueLED);                                              // Turn off the blue LED
  sensorDetect = false;                                               // Reset the flag
}


void sendEvent() {
   d498c:	b510      	push	{r4, lr}
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i,  \"key1\":\"%s\", \"temp\":%i, \"resets\":%i, \"alerts\":%i, \"maxmin\":%i}",current.hourlyCount, current.dailyCount, sysStatus.stateOfCharge, batteryContextStr, current.temperature, sysStatus.resetCount, current.alertCount, current.maxMinValue);
   d498e:	4c1a      	ldr	r4, [pc, #104]	; (d49f8 <_Z9sendEventv+0x6c>)
  pinResetFast(blueLED);                                              // Turn off the blue LED
  sensorDetect = false;                                               // Reset the flag
}


void sendEvent() {
   d4990:	b0ca      	sub	sp, #296	; 0x128
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i,  \"key1\":\"%s\", \"temp\":%i, \"resets\":%i, \"alerts\":%i, \"maxmin\":%i}",current.hourlyCount, current.dailyCount, sysStatus.stateOfCharge, batteryContextStr, current.temperature, sysStatus.resetCount, current.alertCount, current.maxMinValue);
   d4992:	69a3      	ldr	r3, [r4, #24]
   d4994:	9306      	str	r3, [sp, #24]
   d4996:	6963      	ldr	r3, [r4, #20]
   d4998:	9305      	str	r3, [sp, #20]
   d499a:	4b18      	ldr	r3, [pc, #96]	; (d49fc <_Z9sendEventv+0x70>)
   d499c:	695a      	ldr	r2, [r3, #20]
   d499e:	9204      	str	r2, [sp, #16]
   d49a0:	6922      	ldr	r2, [r4, #16]
   d49a2:	9203      	str	r2, [sp, #12]
   d49a4:	4a16      	ldr	r2, [pc, #88]	; (d4a00 <_Z9sendEventv+0x74>)
   d49a6:	9202      	str	r2, [sp, #8]
   d49a8:	689b      	ldr	r3, [r3, #8]
   d49aa:	9301      	str	r3, [sp, #4]
   d49ac:	68a3      	ldr	r3, [r4, #8]
   d49ae:	9300      	str	r3, [sp, #0]
   d49b0:	4a14      	ldr	r2, [pc, #80]	; (d4a04 <_Z9sendEventv+0x78>)
   d49b2:	6823      	ldr	r3, [r4, #0]
   d49b4:	f44f 7180 	mov.w	r1, #256	; 0x100
   d49b8:	a80a      	add	r0, sp, #40	; 0x28
   d49ba:	f002 fb67 	bl	d708c <snprintf>
   d49be:	4b12      	ldr	r3, [pc, #72]	; (d4a08 <_Z9sendEventv+0x7c>)
  Particle.publish("Ubidots-Counter-Hook-v1", data, PRIVATE);
   d49c0:	4912      	ldr	r1, [pc, #72]	; (d4a0c <_Z9sendEventv+0x80>)
   d49c2:	781b      	ldrb	r3, [r3, #0]
   d49c4:	2200      	movs	r2, #0
   d49c6:	f88d 2000 	strb.w	r2, [sp]
   d49ca:	a808      	add	r0, sp, #32
   d49cc:	aa0a      	add	r2, sp, #40	; 0x28
   d49ce:	f7ff fc2a 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d49d2:	a809      	add	r0, sp, #36	; 0x24
   d49d4:	f7ff fed8 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  dataInFlight = true;                                                // set the data inflight flag
   d49d8:	4b0d      	ldr	r3, [pc, #52]	; (d4a10 <_Z9sendEventv+0x84>)
   d49da:	2201      	movs	r2, #1
   d49dc:	701a      	strb	r2, [r3, #0]
   d49de:	f002 f873 	bl	d6ac8 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d49e2:	4b0c      	ldr	r3, [pc, #48]	; (d4a14 <_Z9sendEventv+0x88>)
   d49e4:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();
   d49e6:	f003 ff43 	bl	d8870 <_ZN9TimeClass4hourEv>
   d49ea:	4b0b      	ldr	r3, [pc, #44]	; (d4a18 <_Z9sendEventv+0x8c>)
   d49ec:	6018      	str	r0, [r3, #0]
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
   d49ee:	6823      	ldr	r3, [r4, #0]
   d49f0:	6063      	str	r3, [r4, #4]
}
   d49f2:	b04a      	add	sp, #296	; 0x128
   d49f4:	bd10      	pop	{r4, pc}
   d49f6:	bf00      	nop
   d49f8:	2003e150 	.word	0x2003e150
   d49fc:	2003e174 	.word	0x2003e174
   d4a00:	2003e0a9 	.word	0x2003e0a9
   d4a04:	000dd20b 	.word	0x000dd20b
   d4a08:	2003e0a0 	.word	0x2003e0a0
   d4a0c:	000dd272 	.word	0x000dd272
   d4a10:	2003e170 	.word	0x2003e170
   d4a14:	2003e0bc 	.word	0x2003e0bc
   d4a18:	2003e0c4 	.word	0x2003e0c4

000d4a1c <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4a1c:	b510      	push	{r4, lr}
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d4a1e:	780b      	ldrb	r3, [r1, #0]
  webhookTimeStamp = millis();
  currentHourlyPeriod = Time.hour();
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4a20:	b094      	sub	sp, #80	; 0x50
   d4a22:	460c      	mov	r4, r1
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d4a24:	b923      	cbnz	r3, d4a30 <_Z14UbidotsHandlerPKcS0_+0x14>
    snprintf(responseString, sizeof(responseString),"No Data");
   d4a26:	491c      	ldr	r1, [pc, #112]	; (d4a98 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4a28:	a804      	add	r0, sp, #16
   d4a2a:	f005 fd05 	bl	da438 <strcpy>
   d4a2e:	e017      	b.n	d4a60 <_Z14UbidotsHandlerPKcS0_+0x44>
  }
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4a30:	4608      	mov	r0, r1
   d4a32:	f005 f8b5 	bl	d9ba0 <atoi>
   d4a36:	28c8      	cmp	r0, #200	; 0xc8
   d4a38:	d004      	beq.n	d4a44 <_Z14UbidotsHandlerPKcS0_+0x28>
   d4a3a:	4620      	mov	r0, r4
   d4a3c:	f005 f8b0 	bl	d9ba0 <atoi>
   d4a40:	28c9      	cmp	r0, #201	; 0xc9
   d4a42:	d11e      	bne.n	d4a82 <_Z14UbidotsHandlerPKcS0_+0x66>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4a44:	4915      	ldr	r1, [pc, #84]	; (d4a9c <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4a46:	a804      	add	r0, sp, #16
   d4a48:	f005 fcf6 	bl	da438 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4a4c:	f003 ff09 	bl	d8862 <_ZN9TimeClass3nowEv>
   d4a50:	4b13      	ldr	r3, [pc, #76]	; (d4aa0 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d4a52:	6298      	str	r0, [r3, #40]	; 0x28
    systemStatusWriteNeeded = true;
   d4a54:	4b13      	ldr	r3, [pc, #76]	; (d4aa4 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4a56:	2201      	movs	r2, #1
   d4a58:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d4a5a:	4b13      	ldr	r3, [pc, #76]	; (d4aa8 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d4a5c:	2200      	movs	r2, #0
   d4a5e:	701a      	strb	r2, [r3, #0]
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
  }
  waitUntil(meterParticlePublish);
   d4a60:	f7ff fdba 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d4a64:	4b11      	ldr	r3, [pc, #68]	; (d4aac <_Z14UbidotsHandlerPKcS0_+0x90>)
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
   d4a66:	4912      	ldr	r1, [pc, #72]	; (d4ab0 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d4a68:	781b      	ldrb	r3, [r3, #0]
   d4a6a:	2200      	movs	r2, #0
   d4a6c:	f88d 2000 	strb.w	r2, [sp]
   d4a70:	a802      	add	r0, sp, #8
   d4a72:	aa04      	add	r2, sp, #16
   d4a74:	f7ff fbd7 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4a78:	a803      	add	r0, sp, #12
   d4a7a:	f7ff fe85 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4a7e:	b014      	add	sp, #80	; 0x50
   d4a80:	bd10      	pop	{r4, pc}
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
    systemStatusWriteNeeded = true;
    dataInFlight = false;                                             // Data has been received
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4a82:	4620      	mov	r0, r4
   d4a84:	f005 f88c 	bl	d9ba0 <atoi>
   d4a88:	4a0a      	ldr	r2, [pc, #40]	; (d4ab4 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d4a8a:	4603      	mov	r3, r0
   d4a8c:	2140      	movs	r1, #64	; 0x40
   d4a8e:	a804      	add	r0, sp, #16
   d4a90:	f002 fafc 	bl	d708c <snprintf>
   d4a94:	e7e4      	b.n	d4a60 <_Z14UbidotsHandlerPKcS0_+0x44>
   d4a96:	bf00      	nop
   d4a98:	000dd28a 	.word	0x000dd28a
   d4a9c:	000dd29f 	.word	0x000dd29f
   d4aa0:	2003e174 	.word	0x2003e174
   d4aa4:	2003e171 	.word	0x2003e171
   d4aa8:	2003e170 	.word	0x2003e170
   d4aac:	2003e0a0 	.word	0x2003e0a0
   d4ab0:	000dd292 	.word	0x000dd292
   d4ab4:	000dd2b1 	.word	0x000dd2b1

000d4ab8 <_Z12hardResetNow6String>:
  }
  else return 0;
}

int hardResetNow(String command)                                      // Will perform a hard reset on the Electron
{
   d4ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4aba:	490d      	ldr	r1, [pc, #52]	; (d4af0 <_Z12hardResetNow6String+0x38>)
   d4abc:	f003 fc09 	bl	d82d2 <_ZNK6String6equalsEPKc>
   d4ac0:	2400      	movs	r4, #0
  if (command == "1")
   d4ac2:	b190      	cbz	r0, d4aea <_Z12hardResetNow6String+0x32>
   d4ac4:	4b0b      	ldr	r3, [pc, #44]	; (d4af4 <_Z12hardResetNow6String+0x3c>)
  {
    Particle.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d4ac6:	4a0c      	ldr	r2, [pc, #48]	; (d4af8 <_Z12hardResetNow6String+0x40>)
   d4ac8:	781b      	ldrb	r3, [r3, #0]
   d4aca:	490c      	ldr	r1, [pc, #48]	; (d4afc <_Z12hardResetNow6String+0x44>)
   d4acc:	f88d 4000 	strb.w	r4, [sp]
   d4ad0:	a802      	add	r0, sp, #8
   d4ad2:	f7ff fba8 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4ad6:	a803      	add	r0, sp, #12
   d4ad8:	f7ff fe56 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    rtc.setAlarm(10);
   d4adc:	4623      	mov	r3, r4
   d4ade:	2201      	movs	r2, #1
   d4ae0:	210a      	movs	r1, #10
   d4ae2:	4807      	ldr	r0, [pc, #28]	; (d4b00 <_Z12hardResetNow6String+0x48>)
   d4ae4:	f001 ff0b 	bl	d68fe <_ZN8MCP794108setAlarmEibi>
   d4ae8:	2001      	movs	r0, #1
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}
   d4aea:	b004      	add	sp, #16
   d4aec:	bd10      	pop	{r4, pc}
   d4aee:	bf00      	nop
   d4af0:	000dd60c 	.word	0x000dd60c
   d4af4:	2003e0a0 	.word	0x2003e0a0
   d4af8:	000dd2ce 	.word	0x000dd2ce
   d4afc:	000dd433 	.word	0x000dd433
   d4b00:	2003e084 	.word	0x2003e084

000d4b04 <_Z11setDebounce6String>:

int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
   d4b04:	b570      	push	{r4, r5, r6, lr}
   d4b06:	b086      	sub	sp, #24
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
   d4b08:	a903      	add	r1, sp, #12
   d4b0a:	6800      	ldr	r0, [r0, #0]
   d4b0c:	f007 f818 	bl	dbb40 <strtof>
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4b10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d4b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4b18:	d435      	bmi.n	d4b86 <_Z11setDebounce6String+0x82>
   d4b1a:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d4b1e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4b26:	bfcc      	ite	gt
   d4b28:	2501      	movgt	r5, #1
   d4b2a:	2500      	movle	r5, #0
   d4b2c:	bb5d      	cbnz	r5, d4b86 <_Z11setDebounce6String+0x82>
  sysStatus.debounce = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d4b2e:	eddf 7a18 	vldr	s15, [pc, #96]	; d4b90 <_Z11setDebounce6String+0x8c>
  systemStatusWriteNeeded = true;
   d4b32:	4b18      	ldr	r3, [pc, #96]	; (d4b94 <_Z11setDebounce6String+0x90>)
int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.debounce = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d4b34:	4e18      	ldr	r6, [pc, #96]	; (d4b98 <_Z11setDebounce6String+0x94>)
   d4b36:	ee60 7a27 	vmul.f32	s15, s0, s15
  systemStatusWriteNeeded = true;
   d4b3a:	2401      	movs	r4, #1
int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.debounce = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d4b3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  systemStatusWriteNeeded = true;
   d4b40:	701c      	strb	r4, [r3, #0]
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",inputDebounce);
   d4b42:	ee10 0a10 	vmov	r0, s0
int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.debounce = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d4b46:	edc6 7a04 	vstr	s15, [r6, #16]
  systemStatusWriteNeeded = true;
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",inputDebounce);
   d4b4a:	f004 fc51 	bl	d93f0 <__aeabi_f2d>
   d4b4e:	4a13      	ldr	r2, [pc, #76]	; (d4b9c <_Z11setDebounce6String+0x98>)
   d4b50:	e9cd 0100 	strd	r0, r1, [sp]
   d4b54:	2108      	movs	r1, #8
   d4b56:	4812      	ldr	r0, [pc, #72]	; (d4ba0 <_Z11setDebounce6String+0x9c>)
   d4b58:	f002 fa98 	bl	d708c <snprintf>
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
   d4b5c:	7933      	ldrb	r3, [r6, #4]
   d4b5e:	b1a3      	cbz	r3, d4b8a <_Z11setDebounce6String+0x86>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4b60:	f002 f9dc 	bl	d6f1c <spark_cloud_flag_connected>
   d4b64:	b188      	cbz	r0, d4b8a <_Z11setDebounce6String+0x86>
    waitUntil(meterParticlePublish);
   d4b66:	f7ff fd37 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d4b6a:	4b0e      	ldr	r3, [pc, #56]	; (d4ba4 <_Z11setDebounce6String+0xa0>)
    Particle.publish("Debounce",debounceStr, PRIVATE);
   d4b6c:	4a0c      	ldr	r2, [pc, #48]	; (d4ba0 <_Z11setDebounce6String+0x9c>)
   d4b6e:	781b      	ldrb	r3, [r3, #0]
   d4b70:	490d      	ldr	r1, [pc, #52]	; (d4ba8 <_Z11setDebounce6String+0xa4>)
   d4b72:	f88d 5000 	strb.w	r5, [sp]
   d4b76:	a804      	add	r0, sp, #16
   d4b78:	f7ff fb55 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4b7c:	a805      	add	r0, sp, #20
   d4b7e:	f7ff fe03 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b82:	4620      	mov	r0, r4
   d4b84:	e002      	b.n	d4b8c <_Z11setDebounce6String+0x88>

int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4b86:	2000      	movs	r0, #0
   d4b88:	e000      	b.n	d4b8c <_Z11setDebounce6String+0x88>
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",inputDebounce);
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
    waitUntil(meterParticlePublish);
    Particle.publish("Debounce",debounceStr, PRIVATE);
  }
  return 1;                                                           // Returns 1 to let the user know if was reset
   d4b8a:	2001      	movs	r0, #1
}
   d4b8c:	b006      	add	sp, #24
   d4b8e:	bd70      	pop	{r4, r5, r6, pc}
   d4b90:	447a0000 	.word	0x447a0000
   d4b94:	2003e171 	.word	0x2003e171
   d4b98:	2003e174 	.word	0x2003e174
   d4b9c:	000dd2e6 	.word	0x000dd2e6
   d4ba0:	2003df65 	.word	0x2003df65
   d4ba4:	2003e0a0 	.word	0x2003e0a0
   d4ba8:	000dd58c 	.word	0x000dd58c

000d4bac <_Z12setSolarMode6String>:
  currentCountsWriteNeeded=true;
  systemStatusWriteNeeded=true;
}

int setSolarMode(String command) // Function to force sending data in current hour
{
   d4bac:	b530      	push	{r4, r5, lr}
   d4bae:	4922      	ldr	r1, [pc, #136]	; (d4c38 <_Z12setSolarMode6String+0x8c>)
   d4bb0:	b085      	sub	sp, #20
   d4bb2:	4604      	mov	r4, r0
   d4bb4:	f003 fb8d 	bl	d82d2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4bb8:	4605      	mov	r5, r0
   d4bba:	b1d8      	cbz	r0, d4bf4 <_Z12setSolarMode6String+0x48>
  {
    sysStatus.solarPowerMode = true;
   d4bbc:	4b1f      	ldr	r3, [pc, #124]	; (d4c3c <_Z12setSolarMode6String+0x90>)
   d4bbe:	2401      	movs	r4, #1
   d4bc0:	715c      	strb	r4, [r3, #5]
    setPowerConfig();                                               // Change the power management Settings
   d4bc2:	f7ff fc55 	bl	d4470 <_Z14setPowerConfigv>
    systemStatusWriteNeeded=true;
   d4bc6:	4b1e      	ldr	r3, [pc, #120]	; (d4c40 <_Z12setSolarMode6String+0x94>)
   d4bc8:	701c      	strb	r4, [r3, #0]
    waitUntil(meterParticlePublish);
   d4bca:	f7ff fd05 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d4bce:	f002 f9a5 	bl	d6f1c <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set Solar Powered Mode", PRIVATE);
   d4bd2:	b908      	cbnz	r0, d4bd8 <_Z12setSolarMode6String+0x2c>
    return 1;
   d4bd4:	2001      	movs	r0, #1
   d4bd6:	e02c      	b.n	d4c32 <_Z12setSolarMode6String+0x86>
   d4bd8:	4b1a      	ldr	r3, [pc, #104]	; (d4c44 <_Z12setSolarMode6String+0x98>)
  {
    sysStatus.solarPowerMode = true;
    setPowerConfig();                                               // Change the power management Settings
    systemStatusWriteNeeded=true;
    waitUntil(meterParticlePublish);
    if (Particle.connected()) Particle.publish("Mode","Set Solar Powered Mode", PRIVATE);
   d4bda:	491b      	ldr	r1, [pc, #108]	; (d4c48 <_Z12setSolarMode6String+0x9c>)
   d4bdc:	781b      	ldrb	r3, [r3, #0]
   d4bde:	2200      	movs	r2, #0
   d4be0:	f88d 2000 	strb.w	r2, [sp]
   d4be4:	a802      	add	r0, sp, #8
   d4be6:	4a19      	ldr	r2, [pc, #100]	; (d4c4c <_Z12setSolarMode6String+0xa0>)
   d4be8:	f7ff fb1d 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4bec:	a803      	add	r0, sp, #12
   d4bee:	f7ff fdcb 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bf2:	e7ef      	b.n	d4bd4 <_Z12setSolarMode6String+0x28>
   d4bf4:	4916      	ldr	r1, [pc, #88]	; (d4c50 <_Z12setSolarMode6String+0xa4>)
   d4bf6:	4620      	mov	r0, r4
   d4bf8:	f003 fb6b 	bl	d82d2 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4bfc:	b1c8      	cbz	r0, d4c32 <_Z12setSolarMode6String+0x86>
  {
    sysStatus.solarPowerMode = false;
   d4bfe:	4b0f      	ldr	r3, [pc, #60]	; (d4c3c <_Z12setSolarMode6String+0x90>)
   d4c00:	715d      	strb	r5, [r3, #5]
    systemStatusWriteNeeded=true;
   d4c02:	4b0f      	ldr	r3, [pc, #60]	; (d4c40 <_Z12setSolarMode6String+0x94>)
   d4c04:	2401      	movs	r4, #1
   d4c06:	701c      	strb	r4, [r3, #0]
    setPowerConfig();                                                // Change the power management settings
   d4c08:	f7ff fc32 	bl	d4470 <_Z14setPowerConfigv>
    waitUntil(meterParticlePublish);
   d4c0c:	f7ff fce4 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d4c10:	f002 f984 	bl	d6f1c <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Cleared Solar Powered Mode", PRIVATE);
   d4c14:	2800      	cmp	r0, #0
   d4c16:	d0dd      	beq.n	d4bd4 <_Z12setSolarMode6String+0x28>
   d4c18:	4b0a      	ldr	r3, [pc, #40]	; (d4c44 <_Z12setSolarMode6String+0x98>)
   d4c1a:	4a0e      	ldr	r2, [pc, #56]	; (d4c54 <_Z12setSolarMode6String+0xa8>)
   d4c1c:	781b      	ldrb	r3, [r3, #0]
   d4c1e:	490a      	ldr	r1, [pc, #40]	; (d4c48 <_Z12setSolarMode6String+0x9c>)
   d4c20:	f88d 5000 	strb.w	r5, [sp]
   d4c24:	a802      	add	r0, sp, #8
   d4c26:	f7ff fafe 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4c2a:	a803      	add	r0, sp, #12
   d4c2c:	f7ff fdac 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c30:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4c32:	b005      	add	sp, #20
   d4c34:	bd30      	pop	{r4, r5, pc}
   d4c36:	bf00      	nop
   d4c38:	000dd60c 	.word	0x000dd60c
   d4c3c:	2003e174 	.word	0x2003e174
   d4c40:	2003e171 	.word	0x2003e171
   d4c44:	2003e0a0 	.word	0x2003e0a0
   d4c48:	000dd31f 	.word	0x000dd31f
   d4c4c:	000dd2f0 	.word	0x000dd2f0
   d4c50:	000dd307 	.word	0x000dd307
   d4c54:	000dd309 	.word	0x000dd309

000d4c58 <_Z14setverboseMode6String>:

int setverboseMode(String command) // Function to force sending data in current hour
{
   d4c58:	b530      	push	{r4, r5, lr}
   d4c5a:	4920      	ldr	r1, [pc, #128]	; (d4cdc <_Z14setverboseMode6String+0x84>)
   d4c5c:	b085      	sub	sp, #20
   d4c5e:	4604      	mov	r4, r0
   d4c60:	f003 fb37 	bl	d82d2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4c64:	4605      	mov	r5, r0
   d4c66:	b1c8      	cbz	r0, d4c9c <_Z14setverboseMode6String+0x44>
  {
    sysStatus.verboseMode = true;
   d4c68:	4b1d      	ldr	r3, [pc, #116]	; (d4ce0 <_Z14setverboseMode6String+0x88>)
   d4c6a:	2401      	movs	r4, #1
   d4c6c:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d4c6e:	4b1d      	ldr	r3, [pc, #116]	; (d4ce4 <_Z14setverboseMode6String+0x8c>)
   d4c70:	701c      	strb	r4, [r3, #0]
    waitUntil(meterParticlePublish);
   d4c72:	f7ff fcb1 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d4c76:	f002 f951 	bl	d6f1c <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set Verbose Mode", PRIVATE);
   d4c7a:	b908      	cbnz	r0, d4c80 <_Z14setverboseMode6String+0x28>
    return 1;
   d4c7c:	2001      	movs	r0, #1
   d4c7e:	e02a      	b.n	d4cd6 <_Z14setverboseMode6String+0x7e>
   d4c80:	4b19      	ldr	r3, [pc, #100]	; (d4ce8 <_Z14setverboseMode6String+0x90>)
  if (command == "1")
  {
    sysStatus.verboseMode = true;
    systemStatusWriteNeeded = true;
    waitUntil(meterParticlePublish);
    if (Particle.connected()) Particle.publish("Mode","Set Verbose Mode", PRIVATE);
   d4c82:	491a      	ldr	r1, [pc, #104]	; (d4cec <_Z14setverboseMode6String+0x94>)
   d4c84:	781b      	ldrb	r3, [r3, #0]
   d4c86:	2200      	movs	r2, #0
   d4c88:	f88d 2000 	strb.w	r2, [sp]
   d4c8c:	a802      	add	r0, sp, #8
   d4c8e:	4a18      	ldr	r2, [pc, #96]	; (d4cf0 <_Z14setverboseMode6String+0x98>)
   d4c90:	f7ff fac9 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4c94:	a803      	add	r0, sp, #12
   d4c96:	f7ff fd77 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c9a:	e7ef      	b.n	d4c7c <_Z14setverboseMode6String+0x24>
   d4c9c:	4915      	ldr	r1, [pc, #84]	; (d4cf4 <_Z14setverboseMode6String+0x9c>)
   d4c9e:	4620      	mov	r0, r4
   d4ca0:	f003 fb17 	bl	d82d2 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4ca4:	b1b8      	cbz	r0, d4cd6 <_Z14setverboseMode6String+0x7e>
  {
    sysStatus.verboseMode = false;
   d4ca6:	4b0e      	ldr	r3, [pc, #56]	; (d4ce0 <_Z14setverboseMode6String+0x88>)
   d4ca8:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d4caa:	4b0e      	ldr	r3, [pc, #56]	; (d4ce4 <_Z14setverboseMode6String+0x8c>)
   d4cac:	2401      	movs	r4, #1
   d4cae:	701c      	strb	r4, [r3, #0]
    waitUntil(meterParticlePublish);
   d4cb0:	f7ff fc92 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d4cb4:	f002 f932 	bl	d6f1c <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d4cb8:	2800      	cmp	r0, #0
   d4cba:	d0df      	beq.n	d4c7c <_Z14setverboseMode6String+0x24>
   d4cbc:	4b0a      	ldr	r3, [pc, #40]	; (d4ce8 <_Z14setverboseMode6String+0x90>)
   d4cbe:	4a0e      	ldr	r2, [pc, #56]	; (d4cf8 <_Z14setverboseMode6String+0xa0>)
   d4cc0:	781b      	ldrb	r3, [r3, #0]
   d4cc2:	490a      	ldr	r1, [pc, #40]	; (d4cec <_Z14setverboseMode6String+0x94>)
   d4cc4:	f88d 5000 	strb.w	r5, [sp]
   d4cc8:	a802      	add	r0, sp, #8
   d4cca:	f7ff faac 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4cce:	a803      	add	r0, sp, #12
   d4cd0:	f7ff fd5a 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4cd4:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4cd6:	b005      	add	sp, #20
   d4cd8:	bd30      	pop	{r4, r5, pc}
   d4cda:	bf00      	nop
   d4cdc:	000dd60c 	.word	0x000dd60c
   d4ce0:	2003e174 	.word	0x2003e174
   d4ce4:	2003e171 	.word	0x2003e171
   d4ce8:	2003e0a0 	.word	0x2003e0a0
   d4cec:	000dd31f 	.word	0x000dd31f
   d4cf0:	000dd324 	.word	0x000dd324
   d4cf4:	000dd307 	.word	0x000dd307
   d4cf8:	000dd335 	.word	0x000dd335
   d4cfc:	00000000 	.word	0x00000000

000d4d00 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
   d4d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4d04:	b0cd      	sub	sp, #308	; 0x134
   d4d06:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
   d4d08:	f7ff fa76 	bl	d41f8 <_ZN10CloudClass8syncTimeEv.isra.39>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4d0c:	f7ff fade 	bl	d42cc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4d10:	2700      	movs	r7, #0
   d4d12:	4606      	mov	r6, r0
   d4d14:	f247 582f 	movw	r8, #29999	; 0x752f
   d4d18:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4d1c:	f7ff fad6 	bl	d42cc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4d20:	1b80      	subs	r0, r0, r6
   d4d22:	eb61 0107 	sbc.w	r1, r1, r7
   d4d26:	4589      	cmp	r9, r1
   d4d28:	bf08      	it	eq
   d4d2a:	4580      	cmpeq	r8, r0
   d4d2c:	d305      	bcc.n	d4d3a <_Z11setTimeZone6String+0x3a>
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d4d2e:	f7ff fa6d 	bl	d420c <_ZN10CloudClass12syncTimeDoneEv.isra.41>
   d4d32:	b910      	cbnz	r0, d4d3a <_Z11setTimeZone6String+0x3a>
            spark_process();
   d4d34:	f002 f8da 	bl	d6eec <spark_process>
   d4d38:	e7f0      	b.n	d4d1c <_Z11setTimeZone6String+0x1c>
   d4d3a:	f7ff fa67 	bl	d420c <_ZN10CloudClass12syncTimeDoneEv.isra.41>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4d3e:	220a      	movs	r2, #10
   d4d40:	a905      	add	r1, sp, #20
   d4d42:	6820      	ldr	r0, [r4, #0]
   d4d44:	f006 ffa2 	bl	dbc8c <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d4d48:	f100 030c 	add.w	r3, r0, #12
   d4d4c:	b2db      	uxtb	r3, r3
   d4d4e:	2b18      	cmp	r3, #24
   d4d50:	d858      	bhi.n	d4e04 <_Z11setTimeZone6String+0x104>
{
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4d52:	b244      	sxtb	r4, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d4d54:	ee07 4a90 	vmov	s15, r4
   d4d58:	4b2f      	ldr	r3, [pc, #188]	; (d4e18 <_Z11setTimeZone6String+0x118>)
   d4d5a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d4d5e:	ed83 0a06 	vstr	s0, [r3, #24]
  Time.zone(sysStatus.timezone);
   d4d62:	f003 fc57 	bl	d8614 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d4d66:	4b2d      	ldr	r3, [pc, #180]	; (d4e1c <_Z11setTimeZone6String+0x11c>)
   d4d68:	2201      	movs	r2, #1
   d4d6a:	701a      	strb	r2, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d4d6c:	f003 fc44 	bl	d85f8 <_ZN9TimeClass5localEv>
   d4d70:	4605      	mov	r5, r0
   d4d72:	f003 fd76 	bl	d8862 <_ZN9TimeClass3nowEv>
   d4d76:	1a28      	subs	r0, r5, r0
   d4d78:	f004 fb28 	bl	d93cc <__aeabi_i2d>
   d4d7c:	a324      	add	r3, pc, #144	; (adr r3, d4e10 <_Z11setTimeZone6String+0x110>)
   d4d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4d82:	f004 fcb3 	bl	d96ec <__aeabi_ddiv>
   d4d86:	4a26      	ldr	r2, [pc, #152]	; (d4e20 <_Z11setTimeZone6String+0x120>)
   d4d88:	e9cd 0100 	strd	r0, r1, [sp]
   d4d8c:	210a      	movs	r1, #10
   d4d8e:	4825      	ldr	r0, [pc, #148]	; (d4e24 <_Z11setTimeZone6String+0x124>)
   d4d90:	f002 f97c 	bl	d708c <snprintf>
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d4d94:	4623      	mov	r3, r4
   d4d96:	4a24      	ldr	r2, [pc, #144]	; (d4e28 <_Z11setTimeZone6String+0x128>)
   d4d98:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4d9c:	a80c      	add	r0, sp, #48	; 0x30
   d4d9e:	f002 f975 	bl	d708c <snprintf>
  waitUntil(meterParticlePublish);
   d4da2:	f7ff fc19 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d4da6:	f002 f8b9 	bl	d6f1c <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d4daa:	b160      	cbz	r0, d4dc6 <_Z11setTimeZone6String+0xc6>
   d4dac:	4b1f      	ldr	r3, [pc, #124]	; (d4e2c <_Z11setTimeZone6String+0x12c>)
   d4dae:	4920      	ldr	r1, [pc, #128]	; (d4e30 <_Z11setTimeZone6String+0x130>)
   d4db0:	781b      	ldrb	r3, [r3, #0]
   d4db2:	2200      	movs	r2, #0
   d4db4:	f88d 2000 	strb.w	r2, [sp]
   d4db8:	a808      	add	r0, sp, #32
   d4dba:	aa0c      	add	r2, sp, #48	; 0x30
   d4dbc:	f7ff fa33 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4dc0:	a809      	add	r0, sp, #36	; 0x24
   d4dc2:	f7ff fce1 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  waitUntil(meterParticlePublish);
   d4dc6:	f7ff fc07 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d4dca:	f002 f8a7 	bl	d6f1c <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d4dce:	b1b8      	cbz	r0, d4e00 <_Z11setTimeZone6String+0x100>
   d4dd0:	f003 fd47 	bl	d8862 <_ZN9TimeClass3nowEv>
   d4dd4:	4601      	mov	r1, r0
   d4dd6:	a808      	add	r0, sp, #32
   d4dd8:	f003 fc6c 	bl	d86b4 <_ZN9TimeClass7timeStrEl>
   d4ddc:	9b08      	ldr	r3, [sp, #32]
   d4dde:	9303      	str	r3, [sp, #12]
   d4de0:	4b12      	ldr	r3, [pc, #72]	; (d4e2c <_Z11setTimeZone6String+0x12c>)
   d4de2:	4913      	ldr	r1, [pc, #76]	; (d4e30 <_Z11setTimeZone6String+0x130>)
   d4de4:	781b      	ldrb	r3, [r3, #0]
   d4de6:	2200      	movs	r2, #0
   d4de8:	f88d 2000 	strb.w	r2, [sp]
   d4dec:	a806      	add	r0, sp, #24
   d4dee:	9a03      	ldr	r2, [sp, #12]
   d4df0:	f7ff fa19 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4df4:	a807      	add	r0, sp, #28
   d4df6:	f7ff fcc7 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4dfa:	a808      	add	r0, sp, #32
   d4dfc:	f003 f9f5 	bl	d81ea <_ZN6StringD1Ev>
  return 1;
   d4e00:	2001      	movs	r0, #1
   d4e02:	e000      	b.n	d4e06 <_Z11setTimeZone6String+0x106>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d4e04:	2000      	movs	r0, #0
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(Time.now()), PRIVATE);
  return 1;
}
   d4e06:	b04d      	add	sp, #308	; 0x134
   d4e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4e0c:	f3af 8000 	nop.w
   d4e10:	00000000 	.word	0x00000000
   d4e14:	40ac2000 	.word	0x40ac2000
   d4e18:	2003e174 	.word	0x2003e174
   d4e1c:	2003e171 	.word	0x2003e171
   d4e20:	000dd34a 	.word	0x000dd34a
   d4e24:	2003e069 	.word	0x2003e069
   d4e28:	000dd354 	.word	0x000dd354
   d4e2c:	2003e0a0 	.word	0x2003e0a0
   d4e30:	000dd4e3 	.word	0x000dd4e3

000d4e34 <_Z11setOpenTime6String>:

int setOpenTime(String command)
{
   d4e34:	b510      	push	{r4, lr}
   d4e36:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
   d4e38:	220a      	movs	r2, #10
   d4e3a:	a903      	add	r1, sp, #12
   d4e3c:	6800      	ldr	r0, [r0, #0]
   d4e3e:	f006 ff25 	bl	dbc8c <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4e42:	2817      	cmp	r0, #23

int setOpenTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
   d4e44:	4603      	mov	r3, r0
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4e46:	d81d      	bhi.n	d4e84 <_Z11setOpenTime6String+0x50>
  sysStatus.openTime = tempTime;
   d4e48:	4a11      	ldr	r2, [pc, #68]	; (d4e90 <_Z11setOpenTime6String+0x5c>)
   d4e4a:	6210      	str	r0, [r2, #32]
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
   d4e4c:	4a11      	ldr	r2, [pc, #68]	; (d4e94 <_Z11setOpenTime6String+0x60>)
   d4e4e:	2401      	movs	r4, #1
  snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d4e50:	f44f 7180 	mov.w	r1, #256	; 0x100
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
   d4e54:	7014      	strb	r4, [r2, #0]
  snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d4e56:	a806      	add	r0, sp, #24
   d4e58:	4a0f      	ldr	r2, [pc, #60]	; (d4e98 <_Z11setOpenTime6String+0x64>)
   d4e5a:	f002 f917 	bl	d708c <snprintf>
  waitUntil(meterParticlePublish);
   d4e5e:	f7ff fbbb 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d4e62:	f002 f85b 	bl	d6f1c <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d4e66:	b178      	cbz	r0, d4e88 <_Z11setOpenTime6String+0x54>
   d4e68:	4b0c      	ldr	r3, [pc, #48]	; (d4e9c <_Z11setOpenTime6String+0x68>)
   d4e6a:	490d      	ldr	r1, [pc, #52]	; (d4ea0 <_Z11setOpenTime6String+0x6c>)
   d4e6c:	781b      	ldrb	r3, [r3, #0]
   d4e6e:	2200      	movs	r2, #0
   d4e70:	f88d 2000 	strb.w	r2, [sp]
   d4e74:	a804      	add	r0, sp, #16
   d4e76:	aa06      	add	r2, sp, #24
   d4e78:	f7ff f9d5 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4e7c:	a805      	add	r0, sp, #20
   d4e7e:	f7ff fc83 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e82:	e001      	b.n	d4e88 <_Z11setOpenTime6String+0x54>
int setOpenTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4e84:	2000      	movs	r0, #0
   d4e86:	e000      	b.n	d4e8a <_Z11setOpenTime6String+0x56>
  sysStatus.openTime = tempTime;
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  return 1;
   d4e88:	4620      	mov	r0, r4
}
   d4e8a:	b046      	add	sp, #280	; 0x118
   d4e8c:	bd10      	pop	{r4, pc}
   d4e8e:	bf00      	nop
   d4e90:	2003e174 	.word	0x2003e174
   d4e94:	2003e171 	.word	0x2003e171
   d4e98:	000dd368 	.word	0x000dd368
   d4e9c:	2003e0a0 	.word	0x2003e0a0
   d4ea0:	000dd4e3 	.word	0x000dd4e3

000d4ea4 <_Z12setCloseTime6String>:

int setCloseTime(String command)
{
   d4ea4:	b510      	push	{r4, lr}
   d4ea6:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4ea8:	220a      	movs	r2, #10
   d4eaa:	a903      	add	r1, sp, #12
   d4eac:	6800      	ldr	r0, [r0, #0]
   d4eae:	f006 feed 	bl	dbc8c <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4eb2:	2818      	cmp	r0, #24

int setCloseTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4eb4:	4603      	mov	r3, r0
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4eb6:	d81d      	bhi.n	d4ef4 <_Z12setCloseTime6String+0x50>
  sysStatus.closeTime = tempTime;
   d4eb8:	4a11      	ldr	r2, [pc, #68]	; (d4f00 <_Z12setCloseTime6String+0x5c>)
   d4eba:	6250      	str	r0, [r2, #36]	; 0x24
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4ebc:	4a11      	ldr	r2, [pc, #68]	; (d4f04 <_Z12setCloseTime6String+0x60>)
   d4ebe:	2401      	movs	r4, #1
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4ec0:	f44f 7180 	mov.w	r1, #256	; 0x100
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  sysStatus.closeTime = tempTime;
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4ec4:	7014      	strb	r4, [r2, #0]
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4ec6:	a806      	add	r0, sp, #24
   d4ec8:	4a0f      	ldr	r2, [pc, #60]	; (d4f08 <_Z12setCloseTime6String+0x64>)
   d4eca:	f002 f8df 	bl	d708c <snprintf>
  waitUntil(meterParticlePublish);
   d4ece:	f7ff fb83 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d4ed2:	f002 f823 	bl	d6f1c <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d4ed6:	b178      	cbz	r0, d4ef8 <_Z12setCloseTime6String+0x54>
   d4ed8:	4b0c      	ldr	r3, [pc, #48]	; (d4f0c <_Z12setCloseTime6String+0x68>)
   d4eda:	490d      	ldr	r1, [pc, #52]	; (d4f10 <_Z12setCloseTime6String+0x6c>)
   d4edc:	781b      	ldrb	r3, [r3, #0]
   d4ede:	2200      	movs	r2, #0
   d4ee0:	f88d 2000 	strb.w	r2, [sp]
   d4ee4:	a804      	add	r0, sp, #16
   d4ee6:	aa06      	add	r2, sp, #24
   d4ee8:	f7ff f99d 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4eec:	a805      	add	r0, sp, #20
   d4eee:	f7ff fc4b 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ef2:	e001      	b.n	d4ef8 <_Z12setCloseTime6String+0x54>
int setCloseTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4ef4:	2000      	movs	r0, #0
   d4ef6:	e000      	b.n	d4efa <_Z12setCloseTime6String+0x56>
  sysStatus.closeTime = tempTime;
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  return 1;
   d4ef8:	4620      	mov	r0, r4
}
   d4efa:	b046      	add	sp, #280	; 0x118
   d4efc:	bd10      	pop	{r4, pc}
   d4efe:	bf00      	nop
   d4f00:	2003e174 	.word	0x2003e174
   d4f04:	2003e171 	.word	0x2003e171
   d4f08:	000dd37c 	.word	0x000dd37c
   d4f0c:	2003e0a0 	.word	0x2003e0a0
   d4f10:	000dd4e3 	.word	0x000dd4e3

000d4f14 <_Z15setLowPowerMode6String>:

int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4f14:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4f16:	4929      	ldr	r1, [pc, #164]	; (d4fbc <_Z15setLowPowerMode6String+0xa8>)
   d4f18:	b085      	sub	sp, #20
   d4f1a:	4604      	mov	r4, r0
   d4f1c:	f003 f9d9 	bl	d82d2 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4f20:	b928      	cbnz	r0, d4f2e <_Z15setLowPowerMode6String+0x1a>
   d4f22:	4927      	ldr	r1, [pc, #156]	; (d4fc0 <_Z15setLowPowerMode6String+0xac>)
   d4f24:	4620      	mov	r0, r4
   d4f26:	f003 f9d4 	bl	d82d2 <_ZNK6String6equalsEPKc>
   d4f2a:	2800      	cmp	r0, #0
   d4f2c:	d043      	beq.n	d4fb6 <_Z15setLowPowerMode6String+0xa2>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4f2e:	4923      	ldr	r1, [pc, #140]	; (d4fbc <_Z15setLowPowerMode6String+0xa8>)
   d4f30:	4620      	mov	r0, r4
   d4f32:	f003 f9ce 	bl	d82d2 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4f36:	b1b0      	cbz	r0, d4f66 <_Z15setLowPowerMode6String+0x52>
   d4f38:	f001 fff0 	bl	d6f1c <spark_cloud_flag_connected>
  {
    if (Particle.connected()) {
   d4f3c:	b170      	cbz	r0, d4f5c <_Z15setLowPowerMode6String+0x48>
      waitUntil(meterParticlePublish);
   d4f3e:	f7ff fb4b 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d4f42:	4b20      	ldr	r3, [pc, #128]	; (d4fc4 <_Z15setLowPowerMode6String+0xb0>)
      Particle.publish("Mode","Low Power Mode", PRIVATE);
   d4f44:	4920      	ldr	r1, [pc, #128]	; (d4fc8 <_Z15setLowPowerMode6String+0xb4>)
   d4f46:	781b      	ldrb	r3, [r3, #0]
   d4f48:	2200      	movs	r2, #0
   d4f4a:	f88d 2000 	strb.w	r2, [sp]
   d4f4e:	a802      	add	r0, sp, #8
   d4f50:	4a1e      	ldr	r2, [pc, #120]	; (d4fcc <_Z15setLowPowerMode6String+0xb8>)
   d4f52:	f7ff f968 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4f56:	a803      	add	r0, sp, #12
   d4f58:	f7ff fc16 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    sysStatus.lowPowerMode = true;
   d4f5c:	4b1c      	ldr	r3, [pc, #112]	; (d4fd0 <_Z15setLowPowerMode6String+0xbc>)
    strcpy(lowPowerModeStr,"True");
   d4f5e:	491d      	ldr	r1, [pc, #116]	; (d4fd4 <_Z15setLowPowerMode6String+0xc0>)
  {
    if (Particle.connected()) {
      waitUntil(meterParticlePublish);
      Particle.publish("Mode","Low Power Mode", PRIVATE);
    }
    sysStatus.lowPowerMode = true;
   d4f60:	2201      	movs	r2, #1
   d4f62:	719a      	strb	r2, [r3, #6]
   d4f64:	e021      	b.n	d4faa <_Z15setLowPowerMode6String+0x96>
   d4f66:	4916      	ldr	r1, [pc, #88]	; (d4fc0 <_Z15setLowPowerMode6String+0xac>)
   d4f68:	4620      	mov	r0, r4
   d4f6a:	f003 f9b2 	bl	d82d2 <_ZNK6String6equalsEPKc>
    strcpy(lowPowerModeStr,"True");
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d4f6e:	b1f8      	cbz	r0, d4fb0 <_Z15setLowPowerMode6String+0x9c>
   d4f70:	f001 ffd4 	bl	d6f1c <spark_cloud_flag_connected>
   d4f74:	4c16      	ldr	r4, [pc, #88]	; (d4fd0 <_Z15setLowPowerMode6String+0xbc>)
  {
    if (!Particle.connected()) {                                      // In case we are not connected, we will do so now.
   d4f76:	b918      	cbnz	r0, d4f80 <_Z15setLowPowerMode6String+0x6c>
      connectToParticle();
   d4f78:	f7ff fcbc 	bl	d48f4 <_Z17connectToParticlev>
      sysStatus.connectedStatus = true;
   d4f7c:	2301      	movs	r3, #1
   d4f7e:	70e3      	strb	r3, [r4, #3]
    }
    waitUntil(meterParticlePublish);
   d4f80:	f7ff fb2a 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d4f84:	4b0f      	ldr	r3, [pc, #60]	; (d4fc4 <_Z15setLowPowerMode6String+0xb0>)
    Particle.publish("Mode","Normal Operations", PRIVATE);
   d4f86:	4910      	ldr	r1, [pc, #64]	; (d4fc8 <_Z15setLowPowerMode6String+0xb4>)
   d4f88:	781b      	ldrb	r3, [r3, #0]
   d4f8a:	4a13      	ldr	r2, [pc, #76]	; (d4fd8 <_Z15setLowPowerMode6String+0xc4>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4f8c:	2500      	movs	r5, #0
   d4f8e:	a802      	add	r0, sp, #8
   d4f90:	f88d 5000 	strb.w	r5, [sp]
   d4f94:	f7ff f947 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4f98:	a803      	add	r0, sp, #12
   d4f9a:	f7ff fbf5 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(1000);                                                      // Need to make sure the message gets out.
   d4f9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4fa2:	f002 f893 	bl	d70cc <delay>
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
    strcpy(lowPowerModeStr,"False");                                  // Use capitalization so we know that we set this.
   d4fa6:	490d      	ldr	r1, [pc, #52]	; (d4fdc <_Z15setLowPowerMode6String+0xc8>)
      sysStatus.connectedStatus = true;
    }
    waitUntil(meterParticlePublish);
    Particle.publish("Mode","Normal Operations", PRIVATE);
    delay(1000);                                                      // Need to make sure the message gets out.
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d4fa8:	71a5      	strb	r5, [r4, #6]
    strcpy(lowPowerModeStr,"False");                                  // Use capitalization so we know that we set this.
   d4faa:	480d      	ldr	r0, [pc, #52]	; (d4fe0 <_Z15setLowPowerMode6String+0xcc>)
   d4fac:	f005 fa44 	bl	da438 <strcpy>
  }
  systemStatusWriteNeeded = true;
   d4fb0:	4b0c      	ldr	r3, [pc, #48]	; (d4fe4 <_Z15setLowPowerMode6String+0xd0>)
   d4fb2:	2001      	movs	r0, #1
   d4fb4:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d4fb6:	b005      	add	sp, #20
   d4fb8:	bd30      	pop	{r4, r5, pc}
   d4fba:	bf00      	nop
   d4fbc:	000dd60c 	.word	0x000dd60c
   d4fc0:	000dd307 	.word	0x000dd307
   d4fc4:	2003e0a0 	.word	0x2003e0a0
   d4fc8:	000dd31f 	.word	0x000dd31f
   d4fcc:	000dd393 	.word	0x000dd393
   d4fd0:	2003e174 	.word	0x2003e174
   d4fd4:	000dd3a2 	.word	0x000dd3a2
   d4fd8:	000dd3a7 	.word	0x000dd3a7
   d4fdc:	000dd3b9 	.word	0x000dd3b9
   d4fe0:	2003e149 	.word	0x2003e149
   d4fe4:	2003e171 	.word	0x2003e171

000d4fe8 <_Z17checkSystemValuesv>:
  sysStatus.closeTime = 24;

  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
   d4fe8:	b530      	push	{r4, r5, lr}
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d4fea:	4c3d      	ldr	r4, [pc, #244]	; (d50e0 <_Z17checkSystemValuesv+0xf8>)
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d4fec:	4d3c      	ldr	r5, [pc, #240]	; (d50e0 <_Z17checkSystemValuesv+0xf8>)
  sysStatus.closeTime = 24;

  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
   d4fee:	b085      	sub	sp, #20
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
   d4ff0:	f7ff fb92 	bl	d4718 <_Z16takeMeasurementsv>
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d4ff4:	78a3      	ldrb	r3, [r4, #2]
   d4ff6:	2b01      	cmp	r3, #1
   d4ff8:	bf84      	itt	hi
   d4ffa:	2300      	movhi	r3, #0
   d4ffc:	70a3      	strbhi	r3, [r4, #2]
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d4ffe:	78e3      	ldrb	r3, [r4, #3]
   d5000:	2b01      	cmp	r3, #1
   d5002:	d906      	bls.n	d5012 <_Z17checkSystemValuesv+0x2a>
   d5004:	f001 ff8a 	bl	d6f1c <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d5008:	b110      	cbz	r0, d5010 <_Z17checkSystemValuesv+0x28>
   d500a:	2301      	movs	r3, #1
   d500c:	70eb      	strb	r3, [r5, #3]
   d500e:	e000      	b.n	d5012 <_Z17checkSystemValuesv+0x2a>
    else sysStatus.connectedStatus = false;
   d5010:	70e8      	strb	r0, [r5, #3]
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d5012:	7923      	ldrb	r3, [r4, #4]
   d5014:	2b01      	cmp	r3, #1
   d5016:	bf82      	ittt	hi
   d5018:	4b31      	ldrhi	r3, [pc, #196]	; (d50e0 <_Z17checkSystemValuesv+0xf8>)
   d501a:	2200      	movhi	r2, #0
   d501c:	711a      	strbhi	r2, [r3, #4]
  if (sysStatus.solarPowerMode < 0 || sysStatus.solarPowerMode >1) sysStatus.solarPowerMode = 0;
   d501e:	7963      	ldrb	r3, [r4, #5]
   d5020:	2b01      	cmp	r3, #1
   d5022:	bf82      	ittt	hi
   d5024:	4b2e      	ldrhi	r3, [pc, #184]	; (d50e0 <_Z17checkSystemValuesv+0xf8>)
   d5026:	2200      	movhi	r2, #0
   d5028:	715a      	strbhi	r2, [r3, #5]
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) setLowPowerMode("1");
   d502a:	79a3      	ldrb	r3, [r4, #6]
   d502c:	2b01      	cmp	r3, #1
   d502e:	d909      	bls.n	d5044 <_Z17checkSystemValuesv+0x5c>
   d5030:	492c      	ldr	r1, [pc, #176]	; (d50e4 <_Z17checkSystemValuesv+0xfc>)
   d5032:	4668      	mov	r0, sp
   d5034:	f003 f920 	bl	d8278 <_ZN6StringC1EPK19__FlashStringHelper>
   d5038:	4668      	mov	r0, sp
   d503a:	f7ff ff6b 	bl	d4f14 <_Z15setLowPowerMode6String>
   d503e:	4668      	mov	r0, sp
   d5040:	f003 f8d3 	bl	d81ea <_ZN6StringD1Ev>
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d5044:	68a2      	ldr	r2, [r4, #8]
   d5046:	4b26      	ldr	r3, [pc, #152]	; (d50e0 <_Z17checkSystemValuesv+0xf8>)
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.debounce < 0 || sysStatus.debounce > 6000) sysStatus.debounce = 1000;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d5048:	edd4 7a06 	vldr	s15, [r4, #24]
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
  if (sysStatus.solarPowerMode < 0 || sysStatus.solarPowerMode >1) sysStatus.solarPowerMode = 0;
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) setLowPowerMode("1");
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d504c:	2a1d      	cmp	r2, #29
   d504e:	bfd4      	ite	le
   d5050:	2201      	movle	r2, #1
  else sysStatus.lowBatteryMode = false;
   d5052:	2200      	movgt	r2, #0
   d5054:	71da      	strb	r2, [r3, #7]
  if (sysStatus.debounce < 0 || sysStatus.debounce > 6000) sysStatus.debounce = 1000;
   d5056:	6922      	ldr	r2, [r4, #16]
   d5058:	f241 7370 	movw	r3, #6000	; 0x1770
   d505c:	429a      	cmp	r2, r3
   d505e:	bf82      	ittt	hi
   d5060:	4b1f      	ldrhi	r3, [pc, #124]	; (d50e0 <_Z17checkSystemValuesv+0xf8>)
   d5062:	f44f 727a 	movhi.w	r2, #1000	; 0x3e8
   d5066:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d5068:	6963      	ldr	r3, [r4, #20]
   d506a:	2bff      	cmp	r3, #255	; 0xff
   d506c:	bf88      	it	hi
   d506e:	4b1c      	ldrhi	r3, [pc, #112]	; (d50e0 <_Z17checkSystemValuesv+0xf8>)
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d5070:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) setLowPowerMode("1");
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.debounce < 0 || sysStatus.debounce > 6000) sysStatus.debounce = 1000;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d5074:	bf88      	it	hi
   d5076:	2200      	movhi	r2, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d5078:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) setLowPowerMode("1");
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.debounce < 0 || sysStatus.debounce > 6000) sysStatus.debounce = 1000;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d507c:	bf88      	it	hi
   d507e:	615a      	strhi	r2, [r3, #20]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d5080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5084:	d406      	bmi.n	d5094 <_Z17checkSystemValuesv+0xac>
   d5086:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d508a:	eef4 7ac7 	vcmpe.f32	s15, s14
   d508e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5092:	dd01      	ble.n	d5098 <_Z17checkSystemValuesv+0xb0>
   d5094:	4b14      	ldr	r3, [pc, #80]	; (d50e8 <_Z17checkSystemValuesv+0x100>)
   d5096:	61a3      	str	r3, [r4, #24]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d5098:	edd4 7a07 	vldr	s15, [r4, #28]
   d509c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d50a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d50a4:	d406      	bmi.n	d50b4 <_Z17checkSystemValuesv+0xcc>
   d50a6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d50aa:	eef4 7ac7 	vcmpe.f32	s15, s14
   d50ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d50b2:	dd02      	ble.n	d50ba <_Z17checkSystemValuesv+0xd2>
   d50b4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d50b8:	61e3      	str	r3, [r4, #28]
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
   d50ba:	6a23      	ldr	r3, [r4, #32]
   d50bc:	2b0c      	cmp	r3, #12
   d50be:	bf82      	ittt	hi
   d50c0:	4b07      	ldrhi	r3, [pc, #28]	; (d50e0 <_Z17checkSystemValuesv+0xf8>)
   d50c2:	2200      	movhi	r2, #0
   d50c4:	621a      	strhi	r2, [r3, #32]
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 24) sysStatus.closeTime = 24;
   d50c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d50c8:	3b0c      	subs	r3, #12
   d50ca:	2b0c      	cmp	r3, #12
   d50cc:	bf82      	ittt	hi
   d50ce:	4b04      	ldrhi	r3, [pc, #16]	; (d50e0 <_Z17checkSystemValuesv+0xf8>)
   d50d0:	2218      	movhi	r2, #24
   d50d2:	625a      	strhi	r2, [r3, #36]	; 0x24
  // None for lastHookResponse

  systemStatusWriteNeeded = true;
   d50d4:	4b05      	ldr	r3, [pc, #20]	; (d50ec <_Z17checkSystemValuesv+0x104>)
   d50d6:	2201      	movs	r2, #1
   d50d8:	701a      	strb	r2, [r3, #0]
}
   d50da:	b005      	add	sp, #20
   d50dc:	bd30      	pop	{r4, r5, pc}
   d50de:	bf00      	nop
   d50e0:	2003e174 	.word	0x2003e174
   d50e4:	000dd60c 	.word	0x000dd60c
   d50e8:	c0a00000 	.word	0xc0a00000
   d50ec:	2003e171 	.word	0x2003e171

000d50f0 <_Z18loadSystemDefaultsv>:
    pmic.disableCharging();
    return FALSE;
  }
}

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d50f0:	b570      	push	{r4, r5, r6, lr}
   d50f2:	b086      	sub	sp, #24
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
   d50f4:	f7ff fbfe 	bl	d48f4 <_Z17connectToParticlev>
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
   d50f8:	f7ff fb0e 	bl	d4718 <_Z16takeMeasurementsv>
  waitUntil(meterParticlePublish);
   d50fc:	f7ff fa6c 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d5100:	f001 ff0c 	bl	d6f1c <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
   d5104:	b160      	cbz	r0, d5120 <_Z18loadSystemDefaultsv+0x30>
   d5106:	4b1b      	ldr	r3, [pc, #108]	; (d5174 <_Z18loadSystemDefaultsv+0x84>)
   d5108:	491b      	ldr	r1, [pc, #108]	; (d5178 <_Z18loadSystemDefaultsv+0x88>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d510a:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d510c:	2200      	movs	r2, #0
   d510e:	f88d 2000 	strb.w	r2, [sp]
   d5112:	a802      	add	r0, sp, #8
   d5114:	4a19      	ldr	r2, [pc, #100]	; (d517c <_Z18loadSystemDefaultsv+0x8c>)
   d5116:	f7ff f886 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d511a:	a803      	add	r0, sp, #12
   d511c:	f7ff fb34 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  sysStatus.structuresVersion = 1;
   d5120:	4c17      	ldr	r4, [pc, #92]	; (d5180 <_Z18loadSystemDefaultsv+0x90>)
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
   d5122:	4918      	ldr	r1, [pc, #96]	; (d5184 <_Z18loadSystemDefaultsv+0x94>)
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d5124:	68a3      	ldr	r3, [r4, #8]
   d5126:	2b1d      	cmp	r3, #29
   d5128:	bfcc      	ite	gt
   d512a:	2300      	movgt	r3, #0
   d512c:	2301      	movle	r3, #1
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
   d512e:	2501      	movs	r5, #1
  sysStatus.metricUnits = false;
   d5130:	2600      	movs	r6, #0
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
   d5132:	a802      	add	r0, sp, #8
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d5134:	71e3      	strb	r3, [r4, #7]
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
   d5136:	7025      	strb	r5, [r4, #0]
  sysStatus.metricUnits = false;
   d5138:	70a6      	strb	r6, [r4, #2]
  sysStatus.verboseMode = true;
   d513a:	7125      	strb	r5, [r4, #4]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
   d513c:	f003 f89c 	bl	d8278 <_ZN6StringC1EPK19__FlashStringHelper>
   d5140:	a802      	add	r0, sp, #8
   d5142:	f7ff fee7 	bl	d4f14 <_Z15setLowPowerMode6String>
   d5146:	a802      	add	r0, sp, #8
   d5148:	f003 f84f 	bl	d81ea <_ZN6StringD1Ev>
  sysStatus.debounce = 1000;
   d514c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5150:	6123      	str	r3, [r4, #16]
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d5152:	4b0d      	ldr	r3, [pc, #52]	; (d5188 <_Z18loadSystemDefaultsv+0x98>)
   d5154:	61a3      	str	r3, [r4, #24]
  sysStatus.dstOffset = 1;
   d5156:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d515a:	61e3      	str	r3, [r4, #28]
  sysStatus.openTime = 0;
  sysStatus.closeTime = 24;
   d515c:	2318      	movs	r3, #24
   d515e:	6263      	str	r3, [r4, #36]	; 0x24
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5160:	4622      	mov	r2, r4
   d5162:	232c      	movs	r3, #44	; 0x2c
   d5164:	4629      	mov	r1, r5
   d5166:	4809      	ldr	r0, [pc, #36]	; (d518c <_Z18loadSystemDefaultsv+0x9c>)
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
  sysStatus.debounce = 1000;
  sysStatus.timezone = -5;                                          // Default is East Coast Time
  sysStatus.dstOffset = 1;
  sysStatus.openTime = 0;
   d5168:	6226      	str	r6, [r4, #32]
   d516a:	f000 ff3d 	bl	d5fe8 <_ZN6MB85RC9writeDataEjPKhj>
  sysStatus.closeTime = 24;

  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}
   d516e:	b006      	add	sp, #24
   d5170:	bd70      	pop	{r4, r5, r6, pc}
   d5172:	bf00      	nop
   d5174:	2003e0a0 	.word	0x2003e0a0
   d5178:	000dd31f 	.word	0x000dd31f
   d517c:	000dd3bf 	.word	0x000dd3bf
   d5180:	2003e174 	.word	0x2003e174
   d5184:	000dd307 	.word	0x000dd307
   d5188:	c0a00000 	.word	0xc0a00000
   d518c:	2003e074 	.word	0x2003e074

000d5190 <_Z22publishStateTransitionv>:
  }
  else return 0;
}

void publishStateTransition(void)
{
   d5190:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d5192:	4d16      	ldr	r5, [pc, #88]	; (d51ec <_Z22publishStateTransitionv+0x5c>)
   d5194:	4c16      	ldr	r4, [pc, #88]	; (d51f0 <_Z22publishStateTransitionv+0x60>)
   d5196:	4917      	ldr	r1, [pc, #92]	; (d51f4 <_Z22publishStateTransitionv+0x64>)
   d5198:	782a      	ldrb	r2, [r5, #0]
   d519a:	7820      	ldrb	r0, [r4, #0]
  }
  else return 0;
}

void publishStateTransition(void)
{
   d519c:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d519e:	230e      	movs	r3, #14
   d51a0:	fb03 1202 	mla	r2, r3, r2, r1
   d51a4:	9200      	str	r2, [sp, #0]
   d51a6:	fb03 1300 	mla	r3, r3, r0, r1
   d51aa:	4a13      	ldr	r2, [pc, #76]	; (d51f8 <_Z22publishStateTransitionv+0x68>)
   d51ac:	2128      	movs	r1, #40	; 0x28
   d51ae:	a804      	add	r0, sp, #16
   d51b0:	f001 ff6c 	bl	d708c <snprintf>
  oldState = state;
   d51b4:	782b      	ldrb	r3, [r5, #0]
   d51b6:	7023      	strb	r3, [r4, #0]
   d51b8:	f001 feb0 	bl	d6f1c <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d51bc:	b170      	cbz	r0, d51dc <_Z22publishStateTransitionv+0x4c>
    waitUntil(meterParticlePublish);
   d51be:	f7ff fa0b 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d51c2:	4b0e      	ldr	r3, [pc, #56]	; (d51fc <_Z22publishStateTransitionv+0x6c>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d51c4:	490e      	ldr	r1, [pc, #56]	; (d5200 <_Z22publishStateTransitionv+0x70>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d51c6:	781b      	ldrb	r3, [r3, #0]
   d51c8:	2200      	movs	r2, #0
   d51ca:	f88d 2000 	strb.w	r2, [sp]
   d51ce:	a802      	add	r0, sp, #8
   d51d0:	aa04      	add	r2, sp, #16
   d51d2:	f7ff f828 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d51d6:	a803      	add	r0, sp, #12
   d51d8:	f7ff fad6 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  Serial.println(stateTransitionString);
   d51dc:	f003 fc68 	bl	d8ab0 <_Z16_fetch_usbserialv>
   d51e0:	a904      	add	r1, sp, #16
   d51e2:	f002 ffb6 	bl	d8152 <_ZN5Print7printlnEPKc>
}
   d51e6:	b00f      	add	sp, #60	; 0x3c
   d51e8:	bd30      	pop	{r4, r5, pc}
   d51ea:	bf00      	nop
   d51ec:	2003e0c0 	.word	0x2003e0c0
   d51f0:	2003e0a8 	.word	0x2003e0a8
   d51f4:	2003def0 	.word	0x2003def0
   d51f8:	000dd3d7 	.word	0x000dd3d7
   d51fc:	2003e0a0 	.word	0x2003e0a0
   d5200:	000dd3e5 	.word	0x000dd3e5

000d5204 <_Z12dailyCleanupv>:
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
   d5204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5208:	b087      	sub	sp, #28
  waitUntil(meterParticlePublish);
   d520a:	f7ff f9e5 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d520e:	4b20      	ldr	r3, [pc, #128]	; (d5290 <_Z12dailyCleanupv+0x8c>)
  Particle.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d5210:	4a20      	ldr	r2, [pc, #128]	; (d5294 <_Z12dailyCleanupv+0x90>)
   d5212:	781b      	ldrb	r3, [r3, #0]
   d5214:	4920      	ldr	r1, [pc, #128]	; (d5298 <_Z12dailyCleanupv+0x94>)

  sysStatus.verboseMode = false;
   d5216:	4c21      	ldr	r4, [pc, #132]	; (d529c <_Z12dailyCleanupv+0x98>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5218:	2500      	movs	r5, #0
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
  waitUntil(meterParticlePublish);
  Particle.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d521a:	a802      	add	r0, sp, #8
   d521c:	f88d 5000 	strb.w	r5, [sp]
   d5220:	f7ff f801 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d5224:	a803      	add	r0, sp, #12
   d5226:	f7ff faaf 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  sysStatus.verboseMode = false;
   d522a:	7125      	strb	r5, [r4, #4]

  Particle.syncTime();                                                // Set the clock each day
   d522c:	f7fe ffe4 	bl	d41f8 <_ZN10CloudClass8syncTimeEv.isra.39>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d5230:	f7ff f84c 	bl	d42cc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5234:	2700      	movs	r7, #0
   d5236:	4606      	mov	r6, r0
   d5238:	f247 582f 	movw	r8, #29999	; 0x752f
   d523c:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5240:	f7ff f844 	bl	d42cc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5244:	1b80      	subs	r0, r0, r6
   d5246:	eb61 0107 	sbc.w	r1, r1, r7
   d524a:	4589      	cmp	r9, r1
   d524c:	bf08      	it	eq
   d524e:	4580      	cmpeq	r8, r0
   d5250:	d305      	bcc.n	d525e <_Z12dailyCleanupv+0x5a>
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
   d5252:	f7fe ffdb 	bl	d420c <_ZN10CloudClass12syncTimeDoneEv.isra.41>
   d5256:	b910      	cbnz	r0, d525e <_Z12dailyCleanupv+0x5a>
            spark_process();
   d5258:	f001 fe48 	bl	d6eec <spark_process>
   d525c:	e7f0      	b.n	d5240 <_Z12dailyCleanupv+0x3c>
   d525e:	f7fe ffd5 	bl	d420c <_ZN10CloudClass12syncTimeDoneEv.isra.41>

  if (sysStatus.solarPowerMode || sysStatus.stateOfCharge <= 70) {    // If Solar or if the battery is being discharged
   d5262:	7963      	ldrb	r3, [r4, #5]
   d5264:	b91b      	cbnz	r3, d526e <_Z12dailyCleanupv+0x6a>
   d5266:	4b0d      	ldr	r3, [pc, #52]	; (d529c <_Z12dailyCleanupv+0x98>)
   d5268:	689b      	ldr	r3, [r3, #8]
   d526a:	2b46      	cmp	r3, #70	; 0x46
   d526c:	dc09      	bgt.n	d5282 <_Z12dailyCleanupv+0x7e>
    setLowPowerMode("1");
   d526e:	490c      	ldr	r1, [pc, #48]	; (d52a0 <_Z12dailyCleanupv+0x9c>)
   d5270:	a802      	add	r0, sp, #8
   d5272:	f003 f801 	bl	d8278 <_ZN6StringC1EPK19__FlashStringHelper>
   d5276:	a802      	add	r0, sp, #8
   d5278:	f7ff fe4c 	bl	d4f14 <_Z15setLowPowerMode6String>
   d527c:	a802      	add	r0, sp, #8
   d527e:	f002 ffb4 	bl	d81ea <_ZN6StringD1Ev>
  }
  systemStatusWriteNeeded=true;
   d5282:	4b08      	ldr	r3, [pc, #32]	; (d52a4 <_Z12dailyCleanupv+0xa0>)
   d5284:	2201      	movs	r2, #1
   d5286:	701a      	strb	r2, [r3, #0]
}
   d5288:	b007      	add	sp, #28
   d528a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d528e:	bf00      	nop
   d5290:	2003e0a0 	.word	0x2003e0a0
   d5294:	000dd3f6 	.word	0x000dd3f6
   d5298:	000dd3fe 	.word	0x000dd3fe
   d529c:	2003e174 	.word	0x2003e174
   d52a0:	000dd60c 	.word	0x000dd60c
   d52a4:	2003e171 	.word	0x2003e171

000d52a8 <loop>:

  digitalWrite(blueLED,LOW);
}

void loop()
{
   d52a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch(state) {
   d52ac:	4ca1      	ldr	r4, [pc, #644]	; (d5534 <loop+0x28c>)
   d52ae:	7823      	ldrb	r3, [r4, #0]
   d52b0:	3b01      	subs	r3, #1

  digitalWrite(blueLED,LOW);
}

void loop()
{
   d52b2:	b08b      	sub	sp, #44	; 0x2c
  switch(state) {
   d52b4:	2b05      	cmp	r3, #5
   d52b6:	f200 821b 	bhi.w	d56f0 <loop+0x448>
   d52ba:	e8df f013 	tbh	[pc, r3, lsl #1]
   d52be:	01a7      	.short	0x01a7
   d52c0:	005e0006 	.word	0x005e0006
   d52c4:	011e0099 	.word	0x011e0099
   d52c8:	016d      	.short	0x016d
  case IDLE_STATE:                                                    // Where we spend most time - note, the order of these conditionals is important
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d52ca:	4d9b      	ldr	r5, [pc, #620]	; (d5538 <loop+0x290>)
   d52cc:	792b      	ldrb	r3, [r5, #4]
   d52ce:	b12b      	cbz	r3, d52dc <loop+0x34>
   d52d0:	4b9a      	ldr	r3, [pc, #616]	; (d553c <loop+0x294>)
   d52d2:	781b      	ldrb	r3, [r3, #0]
   d52d4:	2b02      	cmp	r3, #2
   d52d6:	d001      	beq.n	d52dc <loop+0x34>
   d52d8:	f7ff ff5a 	bl	d5190 <_Z22publishStateTransitionv>
    if (watchdogFlag) petWatchdog();                                  // Watchdog flag is raised - time to pet the watchdog
   d52dc:	4b98      	ldr	r3, [pc, #608]	; (d5540 <loop+0x298>)
   d52de:	781b      	ldrb	r3, [r3, #0]
   d52e0:	b10b      	cbz	r3, d52e6 <loop+0x3e>
   d52e2:	f7ff f891 	bl	d4408 <_Z11petWatchdogv>
    if (sensorDetect) recordCount();                                  // The ISR had raised the sensor flag
   d52e6:	4b97      	ldr	r3, [pc, #604]	; (d5544 <loop+0x29c>)
   d52e8:	781b      	ldrb	r3, [r3, #0]
   d52ea:	b10b      	cbz	r3, d52f0 <loop+0x48>
   d52ec:	f7ff fa62 	bl	d47b4 <_Z11recordCountv>
    if (current.hourlyCountInFlight) {                                // Cleared here as there could be counts coming in while "in Flight"
   d52f0:	4b95      	ldr	r3, [pc, #596]	; (d5548 <loop+0x2a0>)
   d52f2:	4e96      	ldr	r6, [pc, #600]	; (d554c <loop+0x2a4>)
   d52f4:	6859      	ldr	r1, [r3, #4]
   d52f6:	b141      	cbz	r1, d530a <loop+0x62>
      current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d52f8:	681a      	ldr	r2, [r3, #0]
   d52fa:	1a52      	subs	r2, r2, r1
   d52fc:	601a      	str	r2, [r3, #0]
      current.hourlyCountInFlight = current.maxMinValue = current.alertCount = 0; // Zero out the counts until next reporting period
   d52fe:	2200      	movs	r2, #0
   d5300:	615a      	str	r2, [r3, #20]
   d5302:	619a      	str	r2, [r3, #24]
   d5304:	605a      	str	r2, [r3, #4]
      currentCountsWriteNeeded=true;
   d5306:	2301      	movs	r3, #1
   d5308:	7033      	strb	r3, [r6, #0]
    }
    if (systemStatusWriteNeeded) {
   d530a:	4f91      	ldr	r7, [pc, #580]	; (d5550 <loop+0x2a8>)
   d530c:	783b      	ldrb	r3, [r7, #0]
   d530e:	b13b      	cbz	r3, d5320 <loop+0x78>
   d5310:	232c      	movs	r3, #44	; 0x2c
   d5312:	4a89      	ldr	r2, [pc, #548]	; (d5538 <loop+0x290>)
   d5314:	488f      	ldr	r0, [pc, #572]	; (d5554 <loop+0x2ac>)
   d5316:	2101      	movs	r1, #1
   d5318:	f000 fe66 	bl	d5fe8 <_ZN6MB85RC9writeDataEjPKhj>
      fram.put(FRAM::systemStatusAddr,sysStatus);
      systemStatusWriteNeeded = false;
   d531c:	2300      	movs	r3, #0
   d531e:	703b      	strb	r3, [r7, #0]
    }
    if (currentCountsWriteNeeded) {
   d5320:	7833      	ldrb	r3, [r6, #0]
   d5322:	b143      	cbz	r3, d5336 <loop+0x8e>
   d5324:	231c      	movs	r3, #28
   d5326:	4a88      	ldr	r2, [pc, #544]	; (d5548 <loop+0x2a0>)
   d5328:	488a      	ldr	r0, [pc, #552]	; (d5554 <loop+0x2ac>)
   d532a:	2150      	movs	r1, #80	; 0x50
   d532c:	f000 fe5c 	bl	d5fe8 <_ZN6MB85RC9writeDataEjPKhj>
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
   d5330:	4b86      	ldr	r3, [pc, #536]	; (d554c <loop+0x2a4>)
   d5332:	2200      	movs	r2, #0
   d5334:	701a      	strb	r2, [r3, #0]
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;  // When in low power mode, we can nap between taps
   d5336:	79ab      	ldrb	r3, [r5, #6]
   d5338:	b14b      	cbz	r3, d534e <loop+0xa6>
   d533a:	f001 fbc5 	bl	d6ac8 <HAL_Timer_Get_Milli_Seconds>
   d533e:	4b86      	ldr	r3, [pc, #536]	; (d5558 <loop+0x2b0>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	1ac0      	subs	r0, r0, r3
   d5344:	4b85      	ldr	r3, [pc, #532]	; (d555c <loop+0x2b4>)
   d5346:	681b      	ldr	r3, [r3, #0]
   d5348:	4298      	cmp	r0, r3
   d534a:	f200 81d7 	bhi.w	d56fc <loop+0x454>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;  // We want to report on the hour but not after bedtime
   d534e:	f003 fa8f 	bl	d8870 <_ZN9TimeClass4hourEv>
   d5352:	4b83      	ldr	r3, [pc, #524]	; (d5560 <loop+0x2b8>)
   d5354:	681b      	ldr	r3, [r3, #0]
   d5356:	4298      	cmp	r0, r3
   d5358:	bf1c      	itt	ne
   d535a:	2305      	movne	r3, #5
   d535c:	7023      	strbne	r3, [r4, #0]
    if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d535e:	f003 fa87 	bl	d8870 <_ZN9TimeClass4hourEv>
   d5362:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5364:	4298      	cmp	r0, r3
   d5366:	f280 81cc 	bge.w	d5702 <loop+0x45a>
   d536a:	f003 fa81 	bl	d8870 <_ZN9TimeClass4hourEv>
   d536e:	4b72      	ldr	r3, [pc, #456]	; (d5538 <loop+0x290>)
   d5370:	6a1b      	ldr	r3, [r3, #32]
   d5372:	4298      	cmp	r0, r3
   d5374:	f2c0 81c5 	blt.w	d5702 <loop+0x45a>
   d5378:	e1ba      	b.n	d56f0 <loop+0x448>
    break;

  case SLEEPING_STATE: {                                              // This state is triggered once the park closes and runs until it opens
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d537a:	4b6f      	ldr	r3, [pc, #444]	; (d5538 <loop+0x290>)
   d537c:	791a      	ldrb	r2, [r3, #4]
   d537e:	461d      	mov	r5, r3
   d5380:	b12a      	cbz	r2, d538e <loop+0xe6>
   d5382:	4b6e      	ldr	r3, [pc, #440]	; (d553c <loop+0x294>)
   d5384:	781b      	ldrb	r3, [r3, #0]
   d5386:	2b03      	cmp	r3, #3
   d5388:	d001      	beq.n	d538e <loop+0xe6>
   d538a:	f7ff ff01 	bl	d5190 <_Z22publishStateTransitionv>
    detachInterrupt(intPin);                                          // Done sensing for the day
   d538e:	200d      	movs	r0, #13
   d5390:	f002 fc10 	bl	d7bb4 <_Z15detachInterruptt>

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d5394:	4b73      	ldr	r3, [pc, #460]	; (d5564 <loop+0x2bc>)
   d5396:	681b      	ldr	r3, [r3, #0]
    nrf_gpio_pin_set(nrf_pin);
   d5398:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
   d539c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   d53a0:	f003 031f 	and.w	r3, r3, #31
   d53a4:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d53a8:	f7fe feaa 	bl	d4100 <nrf_gpio_pin_set>
    pinSetFast(disableModule);                                        // Turn off the pressure module for the hour
    if (current.hourlyCount) {                                        // If this number is not zero then we need to send this last count
   d53ac:	4b66      	ldr	r3, [pc, #408]	; (d5548 <loop+0x2a0>)
   d53ae:	681b      	ldr	r3, [r3, #0]
   d53b0:	b10b      	cbz	r3, d53b6 <loop+0x10e>
      state = REPORTING_STATE;
   d53b2:	2305      	movs	r3, #5
   d53b4:	e128      	b.n	d5608 <loop+0x360>
      break;
    }
    if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   d53b6:	78eb      	ldrb	r3, [r5, #3]
   d53b8:	b10b      	cbz	r3, d53be <loop+0x116>
   d53ba:	f7ff f8ad 	bl	d4518 <_Z22disconnectFromParticlev>
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d53be:	2100      	movs	r1, #0
   d53c0:	2007      	movs	r0, #7
   d53c2:	f003 fc82 	bl	d8cca <digitalWrite>
    petWatchdog();
   d53c6:	f7ff f81f 	bl	d4408 <_Z11petWatchdogv>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d53ca:	f003 fa4a 	bl	d8862 <_ZN9TimeClass3nowEv>
    rtc.setAlarm(wakeInSeconds);                                // The Real Time Clock will turn the Enable pin back on to wake the device
   d53ce:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d53d2:	fb90 f1f3 	sdiv	r1, r0, r3
   d53d6:	fb01 0013 	mls	r0, r1, r3, r0
   d53da:	1a19      	subs	r1, r3, r0
   d53dc:	f5b1 6f61 	cmp.w	r1, #3600	; 0xe10
   d53e0:	f04f 0300 	mov.w	r3, #0
   d53e4:	f04f 0201 	mov.w	r2, #1
   d53e8:	bfa8      	it	ge
   d53ea:	f44f 6161 	movge.w	r1, #3600	; 0xe10
   d53ee:	e15f      	b.n	d56b0 <loop+0x408>
    } break;

  case NAPPING_STATE: {  // This state puts the device in low power mode quickly
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d53f0:	4d51      	ldr	r5, [pc, #324]	; (d5538 <loop+0x290>)
   d53f2:	792b      	ldrb	r3, [r5, #4]
   d53f4:	b12b      	cbz	r3, d5402 <loop+0x15a>
   d53f6:	4b51      	ldr	r3, [pc, #324]	; (d553c <loop+0x294>)
   d53f8:	781b      	ldrb	r3, [r3, #0]
   d53fa:	2b04      	cmp	r3, #4
   d53fc:	d001      	beq.n	d5402 <loop+0x15a>
   d53fe:	f7ff fec7 	bl	d5190 <_Z22publishStateTransitionv>
    if (sensorDetect) break;                                          // Don't nap until we are done with event
   d5402:	4b50      	ldr	r3, [pc, #320]	; (d5544 <loop+0x29c>)
   d5404:	781b      	ldrb	r3, [r3, #0]
   d5406:	2b00      	cmp	r3, #0
   d5408:	f040 8172 	bne.w	d56f0 <loop+0x448>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // If we are in connected mode we need to Disconnect from Particle
   d540c:	78eb      	ldrb	r3, [r5, #3]
   d540e:	b10b      	cbz	r3, d5414 <loop+0x16c>
   d5410:	f7ff f882 	bl	d4518 <_Z22disconnectFromParticlev>
    stayAwake = sysStatus.debounce;                                   // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   d5414:	4b51      	ldr	r3, [pc, #324]	; (d555c <loop+0x2b4>)
   d5416:	692a      	ldr	r2, [r5, #16]
   d5418:	601a      	str	r2, [r3, #0]
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d541a:	f003 fa22 	bl	d8862 <_ZN9TimeClass3nowEv>
   d541e:	4606      	mov	r6, r0
    petWatchdog();                                                    // Reset the watchdog timer interval
   d5420:	f7fe fff2 	bl	d4408 <_Z11petWatchdogv>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d5424:	4b50      	ldr	r3, [pc, #320]	; (d5568 <loop+0x2c0>)
   d5426:	7d1a      	ldrb	r2, [r3, #20]
   d5428:	b10a      	cbz	r2, d542e <loop+0x186>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d542a:	2201      	movs	r2, #1
   d542c:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::STOP).gpio(userSwitch,CHANGE).gpio(intPin,RISING).duration(wakeInSeconds * 1000).flag(SystemSleepFlag::WAIT_CLOUD);
   d542e:	2200      	movs	r2, #0
   d5430:	2104      	movs	r1, #4
   d5432:	484d      	ldr	r0, [pc, #308]	; (d5568 <loop+0x2c0>)
   d5434:	f7fe ff16 	bl	d4264 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
   d5438:	2201      	movs	r2, #1
   d543a:	210d      	movs	r1, #13
   d543c:	f7fe ff12 	bl	d4264 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d5440:	7d03      	ldrb	r3, [r0, #20]
   d5442:	4605      	mov	r5, r0
   d5444:	b35b      	cbz	r3, d549e <loop+0x1f6>
   d5446:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   d544a:	fb96 f3f2 	sdiv	r3, r6, r2
   d544e:	fb02 6313 	mls	r3, r2, r3, r6
   d5452:	1ad3      	subs	r3, r2, r3
   d5454:	4293      	cmp	r3, r2
   d5456:	bfa8      	it	ge
   d5458:	4613      	movge	r3, r2
   d545a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
   d545e:	2104      	movs	r1, #4
   d5460:	435f      	muls	r7, r3
   d5462:	f7fe fef5 	bl	d4250 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            if (wakeup) {
   d5466:	4680      	mov	r8, r0
   d5468:	b108      	cbz	r0, d546e <loop+0x1c6>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d546a:	60c7      	str	r7, [r0, #12]
   d546c:	e017      	b.n	d549e <loop+0x1f6>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d546e:	493f      	ldr	r1, [pc, #252]	; (d556c <loop+0x2c4>)
   d5470:	2010      	movs	r0, #16
   d5472:	f003 fcfd 	bl	d8e70 <_ZnwjRKSt9nothrow_t>
   d5476:	4606      	mov	r6, r0
   d5478:	2800      	cmp	r0, #0
   d547a:	f000 8144 	beq.w	d5706 <loop+0x45e>
   d547e:	f04f 0910 	mov.w	r9, #16
   d5482:	464a      	mov	r2, r9
   d5484:	4641      	mov	r1, r8
   d5486:	f004 fd4e 	bl	d9f26 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d548a:	2302      	movs	r3, #2
   d548c:	8073      	strh	r3, [r6, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d548e:	2304      	movs	r3, #4
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d5490:	f8a6 9000 	strh.w	r9, [r6]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d5494:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d5496:	692b      	ldr	r3, [r5, #16]
   d5498:	60b3      	str	r3, [r6, #8]
            wakeupSource->ms = ms;
   d549a:	60f7      	str	r7, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d549c:	612e      	str	r6, [r5, #16]
        }
        return *this;
    }

    SystemSleepConfiguration& flag(particle::EnumFlags<SystemSleepFlag> f) {
        if (valid_) {
   d549e:	7d2b      	ldrb	r3, [r5, #20]
   d54a0:	b11b      	cbz	r3, d54aa <loop+0x202>
            config_.flags |= f.value();
   d54a2:	68eb      	ldr	r3, [r5, #12]
   d54a4:	f043 0301 	orr.w	r3, r3, #1
   d54a8:	60eb      	str	r3, [r5, #12]
    SystemSleepResult result = System.sleep(config);                    // Put the device to sleep
   d54aa:	492f      	ldr	r1, [pc, #188]	; (d5568 <loop+0x2c0>)
   d54ac:	a803      	add	r0, sp, #12
   d54ae:	f002 ff97 	bl	d83e0 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
   d54b2:	9b03      	ldr	r3, [sp, #12]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d54b4:	b1c3      	cbz	r3, d54e8 <loop+0x240>
            return SystemSleepWakeupReason::UNKNOWN;
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d54b6:	889a      	ldrh	r2, [r3, #4]
   d54b8:	2a01      	cmp	r2, #1
   d54ba:	d115      	bne.n	d54e8 <loop+0x240>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d54bc:	899b      	ldrh	r3, [r3, #12]
    if (result.wakeupPin() == intPin) {                                               // Executions starts here after sleep - time or sensor interrupt?
   d54be:	2b0d      	cmp	r3, #13
   d54c0:	d106      	bne.n	d54d0 <loop+0x228>
      awokeFromNap=true;                                              // Since millis() stops when sleeping - need this to debounce
   d54c2:	4b2b      	ldr	r3, [pc, #172]	; (d5570 <loop+0x2c8>)
   d54c4:	701a      	strb	r2, [r3, #0]
   d54c6:	f001 faff 	bl	d6ac8 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d54ca:	4b23      	ldr	r3, [pc, #140]	; (d5558 <loop+0x2b0>)
   d54cc:	6018      	str	r0, [r3, #0]
   d54ce:	e00b      	b.n	d54e8 <loop+0x240>
    }
    else if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d54d0:	2b04      	cmp	r3, #4
   d54d2:	d109      	bne.n	d54e8 <loop+0x240>
   d54d4:	4927      	ldr	r1, [pc, #156]	; (d5574 <loop+0x2cc>)
   d54d6:	a806      	add	r0, sp, #24
   d54d8:	f002 fece 	bl	d8278 <_ZN6StringC1EPK19__FlashStringHelper>
   d54dc:	a806      	add	r0, sp, #24
   d54de:	f7ff fd19 	bl	d4f14 <_Z15setLowPowerMode6String>
   d54e2:	a806      	add	r0, sp, #24
   d54e4:	f002 fe81 	bl	d81ea <_ZN6StringD1Ev>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d54e8:	9803      	ldr	r0, [sp, #12]
    state = IDLE_STATE;                                               // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
   d54ea:	2302      	movs	r3, #2
   d54ec:	7023      	strb	r3, [r4, #0]
   d54ee:	2800      	cmp	r0, #0
   d54f0:	f000 80fe 	beq.w	d56f0 <loop+0x448>
            free(wakeupSource_);
   d54f4:	f001 fdaa 	bl	d704c <free>
    } break;
   d54f8:	e0fa      	b.n	d56f0 <loop+0x448>

  case REPORTING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d54fa:	4d0f      	ldr	r5, [pc, #60]	; (d5538 <loop+0x290>)
   d54fc:	792b      	ldrb	r3, [r5, #4]
   d54fe:	b12b      	cbz	r3, d550c <loop+0x264>
   d5500:	4b0e      	ldr	r3, [pc, #56]	; (d553c <loop+0x294>)
   d5502:	781b      	ldrb	r3, [r3, #0]
   d5504:	2b05      	cmp	r3, #5
   d5506:	d001      	beq.n	d550c <loop+0x264>
   d5508:	f7ff fe42 	bl	d5190 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();              // Only attempt to connect if not already New process to get connected
   d550c:	78eb      	ldrb	r3, [r5, #3]
   d550e:	b90b      	cbnz	r3, d5514 <loop+0x26c>
   d5510:	f7ff f9f0 	bl	d48f4 <_Z17connectToParticlev>
   d5514:	f001 fd02 	bl	d6f1c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5518:	b370      	cbz	r0, d5578 <loop+0x2d0>
      if (Time.hour() == sysStatus.openTime) dailyCleanup();          // Once a day, clean house
   d551a:	f003 f9a9 	bl	d8870 <_ZN9TimeClass4hourEv>
   d551e:	6a2b      	ldr	r3, [r5, #32]
   d5520:	4298      	cmp	r0, r3
   d5522:	d101      	bne.n	d5528 <loop+0x280>
   d5524:	f7ff fe6e 	bl	d5204 <_Z12dailyCleanupv>
      takeMeasurements();                                             // Update Temp, Battery and Signal Strength values
   d5528:	f7ff f8f6 	bl	d4718 <_Z16takeMeasurementsv>
      sendEvent();                                                    // Send data to Ubidots
   d552c:	f7ff fa2e 	bl	d498c <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d5530:	2306      	movs	r3, #6
   d5532:	e026      	b.n	d5582 <loop+0x2da>
   d5534:	2003e0c0 	.word	0x2003e0c0
   d5538:	2003e174 	.word	0x2003e174
   d553c:	2003e0a8 	.word	0x2003e0a8
   d5540:	2003e0c8 	.word	0x2003e0c8
   d5544:	2003e068 	.word	0x2003e068
   d5548:	2003e150 	.word	0x2003e150
   d554c:	2003e148 	.word	0x2003e148
   d5550:	2003e171 	.word	0x2003e171
   d5554:	2003e074 	.word	0x2003e074
   d5558:	2003e0f8 	.word	0x2003e0f8
   d555c:	2003e0a4 	.word	0x2003e0a4
   d5560:	2003e0c4 	.word	0x2003e0c4
   d5564:	2003e0f4 	.word	0x2003e0f4
   d5568:	2003e0cc 	.word	0x2003e0cc
   d556c:	000ddaf0 	.word	0x000ddaf0
   d5570:	2003e13c 	.word	0x2003e13c
   d5574:	000dd307 	.word	0x000dd307
   d5578:	f001 faa6 	bl	d6ac8 <HAL_Timer_Get_Milli_Seconds>
    }
    else {
      resetTimeStamp = millis();
   d557c:	4b63      	ldr	r3, [pc, #396]	; (d570c <loop+0x464>)
   d557e:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;
   d5580:	2301      	movs	r3, #1
   d5582:	7023      	strb	r3, [r4, #0]
    }
  
    if (sysStatus.lowPowerMode) Time.setTime(rtc.getRTCTime());
   d5584:	79ab      	ldrb	r3, [r5, #6]
   d5586:	2b00      	cmp	r3, #0
   d5588:	f000 80b2 	beq.w	d56f0 <loop+0x448>
   d558c:	4860      	ldr	r0, [pc, #384]	; (d5710 <loop+0x468>)
   d558e:	f000 ffc7 	bl	d6520 <_ZNK8MCP7941010getRTCTimeEv>
   d5592:	f003 f885 	bl	d86a0 <_ZN9TimeClass7setTimeEl>
   d5596:	e0ab      	b.n	d56f0 <loop+0x448>
    break;

  case RESP_WAIT_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5598:	4b5e      	ldr	r3, [pc, #376]	; (d5714 <loop+0x46c>)
   d559a:	791b      	ldrb	r3, [r3, #4]
   d559c:	b12b      	cbz	r3, d55aa <loop+0x302>
   d559e:	4b5e      	ldr	r3, [pc, #376]	; (d5718 <loop+0x470>)
   d55a0:	781b      	ldrb	r3, [r3, #0]
   d55a2:	2b06      	cmp	r3, #6
   d55a4:	d001      	beq.n	d55aa <loop+0x302>
   d55a6:	f7ff fdf3 	bl	d5190 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received back to IDLE state
   d55aa:	4b5c      	ldr	r3, [pc, #368]	; (d571c <loop+0x474>)
   d55ac:	781b      	ldrb	r3, [r3, #0]
   d55ae:	b96b      	cbnz	r3, d55cc <loop+0x324>
      stayAwake = stayAwakeLong;                                      // Keeps Electron awake after reboot - helps with recovery
   d55b0:	4b5b      	ldr	r3, [pc, #364]	; (d5720 <loop+0x478>)
   d55b2:	4a5c      	ldr	r2, [pc, #368]	; (d5724 <loop+0x47c>)
   d55b4:	601a      	str	r2, [r3, #0]
   d55b6:	f001 fa87 	bl	d6ac8 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d55ba:	4b5b      	ldr	r3, [pc, #364]	; (d5728 <loop+0x480>)
   d55bc:	6018      	str	r0, [r3, #0]
      if (Time.hour() == 0) resetEverything();                        // It is a new day.  Zero everything so we can start fresh
   d55be:	f003 f957 	bl	d8870 <_ZN9TimeClass4hourEv>
   d55c2:	b908      	cbnz	r0, d55c8 <loop+0x320>
   d55c4:	f7fe ffdc 	bl	d4580 <_Z15resetEverythingv>
      state = IDLE_STATE;
   d55c8:	2302      	movs	r3, #2
   d55ca:	e01d      	b.n	d5608 <loop+0x360>
   d55cc:	f001 fa7c 	bl	d6ac8 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d55d0:	4b56      	ldr	r3, [pc, #344]	; (d572c <loop+0x484>)
   d55d2:	681b      	ldr	r3, [r3, #0]
   d55d4:	1ac0      	subs	r0, r0, r3
   d55d6:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d55da:	4298      	cmp	r0, r3
   d55dc:	f240 8088 	bls.w	d56f0 <loop+0x448>
   d55e0:	f001 fa72 	bl	d6ac8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d55e4:	4b49      	ldr	r3, [pc, #292]	; (d570c <loop+0x464>)
   d55e6:	6018      	str	r0, [r3, #0]
      waitUntil(meterParticlePublish);
   d55e8:	f7fe fff6 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d55ec:	4b50      	ldr	r3, [pc, #320]	; (d5730 <loop+0x488>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d55ee:	4951      	ldr	r1, [pc, #324]	; (d5734 <loop+0x48c>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d55f0:	781b      	ldrb	r3, [r3, #0]
   d55f2:	2200      	movs	r2, #0
   d55f4:	f88d 2000 	strb.w	r2, [sp]
   d55f8:	a806      	add	r0, sp, #24
   d55fa:	4a4f      	ldr	r2, [pc, #316]	; (d5738 <loop+0x490>)
   d55fc:	f7fe fe13 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d5600:	a807      	add	r0, sp, #28
   d5602:	f7ff f8c1 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
   d5606:	2301      	movs	r3, #1
   d5608:	7023      	strb	r3, [r4, #0]
   d560a:	e071      	b.n	d56f0 <loop+0x448>
    }
    break;

  case ERROR_STATE:                                                   // To be enhanced - where we deal with errors
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d560c:	4c41      	ldr	r4, [pc, #260]	; (d5714 <loop+0x46c>)
   d560e:	7923      	ldrb	r3, [r4, #4]
   d5610:	b12b      	cbz	r3, d561e <loop+0x376>
   d5612:	4b41      	ldr	r3, [pc, #260]	; (d5718 <loop+0x470>)
   d5614:	781b      	ldrb	r3, [r3, #0]
   d5616:	2b01      	cmp	r3, #1
   d5618:	d001      	beq.n	d561e <loop+0x376>
   d561a:	f7ff fdb9 	bl	d5190 <_Z22publishStateTransitionv>
   d561e:	f001 fa53 	bl	d6ac8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d5622:	4b3a      	ldr	r3, [pc, #232]	; (d570c <loop+0x464>)
   d5624:	681b      	ldr	r3, [r3, #0]
   d5626:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d562a:	3330      	adds	r3, #48	; 0x30
   d562c:	4298      	cmp	r0, r3
   d562e:	d95f      	bls.n	d56f0 <loop+0x448>
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d5630:	6963      	ldr	r3, [r4, #20]
   d5632:	2b03      	cmp	r3, #3
   d5634:	dc18      	bgt.n	d5668 <loop+0x3c0>
        waitUntil(meterParticlePublish);
   d5636:	f7fe ffcf 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d563a:	f001 fc6f 	bl	d6f1c <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d563e:	b160      	cbz	r0, d565a <loop+0x3b2>
   d5640:	4b3b      	ldr	r3, [pc, #236]	; (d5730 <loop+0x488>)
   d5642:	493e      	ldr	r1, [pc, #248]	; (d573c <loop+0x494>)
   d5644:	781b      	ldrb	r3, [r3, #0]
   d5646:	2200      	movs	r2, #0
   d5648:	f88d 2000 	strb.w	r2, [sp]
   d564c:	a806      	add	r0, sp, #24
   d564e:	4a3c      	ldr	r2, [pc, #240]	; (d5740 <loop+0x498>)
   d5650:	f7fe fde9 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d5654:	a807      	add	r0, sp, #28
   d5656:	f7ff f897 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d565a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d565e:	f001 fd35 	bl	d70cc <delay>
        System.reset();
   d5662:	f002 feba 	bl	d83da <_ZN11SystemClass5resetEv>
   d5666:	e043      	b.n	d56f0 <loop+0x448>
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d5668:	f003 f8fb 	bl	d8862 <_ZN9TimeClass3nowEv>
   d566c:	4b29      	ldr	r3, [pc, #164]	; (d5714 <loop+0x46c>)
   d566e:	4d35      	ldr	r5, [pc, #212]	; (d5744 <loop+0x49c>)
   d5670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5672:	1ac0      	subs	r0, r0, r3
   d5674:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d5678:	d91e      	bls.n	d56b8 <loop+0x410>
        waitUntil(meterParticlePublish);
   d567a:	f7fe ffad 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d567e:	f001 fc4d 	bl	d6f1c <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d5682:	b160      	cbz	r0, d569e <loop+0x3f6>
   d5684:	4b2a      	ldr	r3, [pc, #168]	; (d5730 <loop+0x488>)
   d5686:	492d      	ldr	r1, [pc, #180]	; (d573c <loop+0x494>)
   d5688:	781b      	ldrb	r3, [r3, #0]
   d568a:	2200      	movs	r2, #0
   d568c:	f88d 2000 	strb.w	r2, [sp]
   d5690:	a806      	add	r0, sp, #24
   d5692:	4a2d      	ldr	r2, [pc, #180]	; (d5748 <loop+0x4a0>)
   d5694:	f7fe fdc7 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d5698:	a807      	add	r0, sp, #28
   d569a:	f7ff f875 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d569e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d56a2:	f001 fd13 	bl	d70cc <delay>
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d56a6:	2300      	movs	r3, #0
        systemStatusWriteNeeded=true;
   d56a8:	2201      	movs	r2, #1
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
        waitUntil(meterParticlePublish);
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
        delay(2000);
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d56aa:	6163      	str	r3, [r4, #20]
        systemStatusWriteNeeded=true;
   d56ac:	702a      	strb	r2, [r5, #0]
        rtc.setAlarm(10);
   d56ae:	210a      	movs	r1, #10
   d56b0:	4817      	ldr	r0, [pc, #92]	; (d5710 <loop+0x468>)
   d56b2:	f001 f924 	bl	d68fe <_ZN8MCP794108setAlarmEibi>
   d56b6:	e01b      	b.n	d56f0 <loop+0x448>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        waitUntil(meterParticlePublish);
   d56b8:	f7fe ff8e 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d56bc:	f001 fc2e 	bl	d6f1c <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d56c0:	b160      	cbz	r0, d56dc <loop+0x434>
   d56c2:	4b1b      	ldr	r3, [pc, #108]	; (d5730 <loop+0x488>)
   d56c4:	491d      	ldr	r1, [pc, #116]	; (d573c <loop+0x494>)
   d56c6:	781b      	ldrb	r3, [r3, #0]
   d56c8:	2200      	movs	r2, #0
   d56ca:	f88d 2000 	strb.w	r2, [sp]
   d56ce:	a806      	add	r0, sp, #24
   d56d0:	4a1e      	ldr	r2, [pc, #120]	; (d574c <loop+0x4a4>)
   d56d2:	f7fe fda8 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d56d6:	a807      	add	r0, sp, #28
   d56d8:	f7ff f856 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d56dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d56e0:	f001 fcf4 	bl	d70cc <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d56e4:	2300      	movs	r3, #0
   d56e6:	6163      	str	r3, [r4, #20]
        systemStatusWriteNeeded=true;
   d56e8:	2301      	movs	r3, #1
   d56ea:	702b      	strb	r3, [r5, #0]
        fullModemReset();                                             // Full Modem reset and reboots
   d56ec:	f7fe ff80 	bl	d45f0 <_Z14fullModemResetv>
      }
    }
    break;
  }
  rtc.loop();                                                         // keeps the clock up to date
   d56f0:	4807      	ldr	r0, [pc, #28]	; (d5710 <loop+0x468>)
   d56f2:	f001 f83d 	bl	d6770 <_ZN8MCP794104loopEv>
  Log.trace("Power source: %s", powerSources[std::max(0, powerSource)]);
  Log.trace("Battery state: %s", batteryStates[std::max(0, batteryState)]);
  Log.trace("Battery charge: %f", batterySoc);
*/

}
   d56f6:	b00b      	add	sp, #44	; 0x2c
   d56f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (currentCountsWriteNeeded) {
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;  // When in low power mode, we can nap between taps
   d56fc:	2304      	movs	r3, #4
   d56fe:	7023      	strb	r3, [r4, #0]
   d5700:	e625      	b.n	d534e <loop+0xa6>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;  // We want to report on the hour but not after bedtime
    if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d5702:	2303      	movs	r3, #3
   d5704:	e780      	b.n	d5608 <loop+0x360>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
   d5706:	7528      	strb	r0, [r5, #20]
   d5708:	e6c9      	b.n	d549e <loop+0x1f6>
   d570a:	bf00      	nop
   d570c:	2003e144 	.word	0x2003e144
   d5710:	2003e084 	.word	0x2003e084
   d5714:	2003e174 	.word	0x2003e174
   d5718:	2003e0a8 	.word	0x2003e0a8
   d571c:	2003e170 	.word	0x2003e170
   d5720:	2003e0a4 	.word	0x2003e0a4
   d5724:	00015f90 	.word	0x00015f90
   d5728:	2003e0f8 	.word	0x2003e0f8
   d572c:	2003e0bc 	.word	0x2003e0bc
   d5730:	2003e0a0 	.word	0x2003e0a0
   d5734:	000dd40c 	.word	0x000dd40c
   d5738:	000dd1dd 	.word	0x000dd1dd
   d573c:	000dd439 	.word	0x000dd439
   d5740:	000dd425 	.word	0x000dd425
   d5744:	2003e171 	.word	0x2003e171
   d5748:	000dd43f 	.word	0x000dd43f
   d574c:	000dd459 	.word	0x000dd459

000d5750 <_Z12setDSTOffset6String>:
    setLowPowerMode("1");
  }
  systemStatusWriteNeeded=true;
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d5750:	b530      	push	{r4, r5, lr}
   d5752:	ed2d 8b02 	vpush	{d8}
   d5756:	b0cd      	sub	sp, #308	; 0x134
   d5758:	4605      	mov	r5, r0
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d575a:	f003 f882 	bl	d8862 <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d575e:	220a      	movs	r2, #10
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d5760:	4604      	mov	r4, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d5762:	a905      	add	r1, sp, #20
   d5764:	6828      	ldr	r0, [r5, #0]
   d5766:	f006 fa91 	bl	dbc8c <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d576a:	b2c3      	uxtb	r3, r0
   d576c:	2b02      	cmp	r3, #2
   d576e:	d867      	bhi.n	d5840 <_Z12setDSTOffset6String+0xf0>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d5770:	b240      	sxtb	r0, r0
   d5772:	ee07 0a90 	vmov	s15, r0
   d5776:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   d577a:	eeb0 0a48 	vmov.f32	s0, s16
   d577e:	f002 ff65 	bl	d864c <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d5782:	4b35      	ldr	r3, [pc, #212]	; (d5858 <_Z12setDSTOffset6String+0x108>)
   d5784:	ed83 8a07 	vstr	s16, [r3, #28]
  systemStatusWriteNeeded = true;
   d5788:	4b34      	ldr	r3, [pc, #208]	; (d585c <_Z12setDSTOffset6String+0x10c>)
   d578a:	2201      	movs	r2, #1
   d578c:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d578e:	ee18 0a10 	vmov	r0, s16
   d5792:	f003 fe2d 	bl	d93f0 <__aeabi_f2d>
   d5796:	4a32      	ldr	r2, [pc, #200]	; (d5860 <_Z12setDSTOffset6String+0x110>)
   d5798:	e9cd 0100 	strd	r0, r1, [sp]
   d579c:	f44f 7180 	mov.w	r1, #256	; 0x100
   d57a0:	a80c      	add	r0, sp, #48	; 0x30
   d57a2:	f001 fc73 	bl	d708c <snprintf>
  waitUntil(meterParticlePublish);
   d57a6:	f7fe ff17 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d57aa:	f003 f839 	bl	d8820 <_ZN9TimeClass7isValidEv>
   d57ae:	b138      	cbz	r0, d57c0 <_Z12setDSTOffset6String+0x70>
   d57b0:	f7fe ff4a 	bl	d4648 <_Z8isDSTusav>
   d57b4:	b110      	cbz	r0, d57bc <_Z12setDSTOffset6String+0x6c>
   d57b6:	f002 ff63 	bl	d8680 <_ZN9TimeClass8beginDSTEv>
   d57ba:	e001      	b.n	d57c0 <_Z12setDSTOffset6String+0x70>
   d57bc:	f002 ff6a 	bl	d8694 <_ZN9TimeClass6endDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d57c0:	f002 ff1a 	bl	d85f8 <_ZN9TimeClass5localEv>
   d57c4:	4605      	mov	r5, r0
   d57c6:	f003 f84c 	bl	d8862 <_ZN9TimeClass3nowEv>
   d57ca:	1a28      	subs	r0, r5, r0
   d57cc:	f003 fdfe 	bl	d93cc <__aeabi_i2d>
   d57d0:	a31f      	add	r3, pc, #124	; (adr r3, d5850 <_Z12setDSTOffset6String+0x100>)
   d57d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d57d6:	f003 ff89 	bl	d96ec <__aeabi_ddiv>
   d57da:	4a22      	ldr	r2, [pc, #136]	; (d5864 <_Z12setDSTOffset6String+0x114>)
   d57dc:	e9cd 0100 	strd	r0, r1, [sp]
   d57e0:	210a      	movs	r1, #10
   d57e2:	4821      	ldr	r0, [pc, #132]	; (d5868 <_Z12setDSTOffset6String+0x118>)
   d57e4:	f001 fc52 	bl	d708c <snprintf>
   d57e8:	f001 fb98 	bl	d6f1c <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d57ec:	b160      	cbz	r0, d5808 <_Z12setDSTOffset6String+0xb8>
   d57ee:	4b1f      	ldr	r3, [pc, #124]	; (d586c <_Z12setDSTOffset6String+0x11c>)
   d57f0:	491f      	ldr	r1, [pc, #124]	; (d5870 <_Z12setDSTOffset6String+0x120>)
   d57f2:	781b      	ldrb	r3, [r3, #0]
   d57f4:	2200      	movs	r2, #0
   d57f6:	f88d 2000 	strb.w	r2, [sp]
   d57fa:	a808      	add	r0, sp, #32
   d57fc:	aa0c      	add	r2, sp, #48	; 0x30
   d57fe:	f7fe fd12 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d5802:	a809      	add	r0, sp, #36	; 0x24
   d5804:	f7fe ffc0 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  waitUntil(meterParticlePublish);
   d5808:	f7fe fee6 	bl	d45d8 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.71>
   d580c:	f001 fb86 	bl	d6f1c <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(t), PRIVATE);
   d5810:	b1c0      	cbz	r0, d5844 <_Z12setDSTOffset6String+0xf4>
   d5812:	4621      	mov	r1, r4
   d5814:	a808      	add	r0, sp, #32
   d5816:	f002 ff4d 	bl	d86b4 <_ZN9TimeClass7timeStrEl>
   d581a:	9b08      	ldr	r3, [sp, #32]
   d581c:	9303      	str	r3, [sp, #12]
   d581e:	4b13      	ldr	r3, [pc, #76]	; (d586c <_Z12setDSTOffset6String+0x11c>)
   d5820:	4913      	ldr	r1, [pc, #76]	; (d5870 <_Z12setDSTOffset6String+0x120>)
   d5822:	781b      	ldrb	r3, [r3, #0]
   d5824:	2200      	movs	r2, #0
   d5826:	f88d 2000 	strb.w	r2, [sp]
   d582a:	a806      	add	r0, sp, #24
   d582c:	9a03      	ldr	r2, [sp, #12]
   d582e:	f7fe fcfa 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d5832:	a807      	add	r0, sp, #28
   d5834:	f7fe ffa8 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5838:	a808      	add	r0, sp, #32
   d583a:	f002 fcd6 	bl	d81ea <_ZN6StringD1Ev>
   d583e:	e001      	b.n	d5844 <_Z12setDSTOffset6String+0xf4>
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d5840:	2000      	movs	r0, #0
   d5842:	e000      	b.n	d5846 <_Z12setDSTOffset6String+0xf6>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(t), PRIVATE);
  return 1;
   d5844:	2001      	movs	r0, #1
}
   d5846:	b04d      	add	sp, #308	; 0x134
   d5848:	ecbd 8b02 	vpop	{d8}
   d584c:	bd30      	pop	{r4, r5, pc}
   d584e:	bf00      	nop
   d5850:	00000000 	.word	0x00000000
   d5854:	40ac2000 	.word	0x40ac2000
   d5858:	2003e174 	.word	0x2003e174
   d585c:	2003e171 	.word	0x2003e171
   d5860:	000dd478 	.word	0x000dd478
   d5864:	000dd34a 	.word	0x000dd34a
   d5868:	2003e069 	.word	0x2003e069
   d586c:	2003e0a0 	.word	0x2003e0a0
   d5870:	000dd4e3 	.word	0x000dd4e3

000d5874 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5874:	2300      	movs	r3, #0
   d5876:	2202      	movs	r2, #2
   d5878:	f001 bb28 	b.w	d6ecc <spark_variable>

000d587c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>:
   d587c:	2300      	movs	r3, #0
   d587e:	2204      	movs	r2, #4
   d5880:	f001 bb24 	b.w	d6ecc <spark_variable>

000d5884 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d5884:	4602      	mov	r2, r0
   d5886:	4801      	ldr	r0, [pc, #4]	; (d588c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d5888:	f001 bdf7 	b.w	d747a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d588c:	000d744f 	.word	0x000d744f

000d5890 <setup>:
// Pressure Sensor Variables
char debounceStr[8] = "NA";                         // String to make debounce more readable on the mobile app
volatile bool sensorDetect = false;                 // This is the flag that an interrupt is triggered

void setup()                                        // Note: Disconnected Setup()
{
   d5890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
       2) Each hour while the device is sleeping
       3) After a reset event
    All three of these have some common code - this will go first then we will set a conditional
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d5894:	2100      	movs	r1, #0
// Pressure Sensor Variables
char debounceStr[8] = "NA";                         // String to make debounce more readable on the mobile app
volatile bool sensorDetect = false;                 // This is the flag that an interrupt is triggered

void setup()                                        // Note: Disconnected Setup()
{
   d5896:	b0ad      	sub	sp, #180	; 0xb4
       2) Each hour while the device is sleeping
       3) After a reset event
    All three of these have some common code - this will go first then we will set a conditional
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d5898:	2008      	movs	r0, #8
   d589a:	f003 fa05 	bl	d8ca8 <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d589e:	2100      	movs	r1, #0
   d58a0:	2004      	movs	r0, #4
   d58a2:	f003 fa01 	bl	d8ca8 <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d58a6:	2101      	movs	r1, #1
   d58a8:	2007      	movs	r0, #7
   d58aa:	f003 f9fd 	bl	d8ca8 <pinMode>
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d58ae:	2101      	movs	r1, #1
   d58b0:	2005      	movs	r0, #5
   d58b2:	f003 f9f9 	bl	d8ca8 <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d58b6:	4fac      	ldr	r7, [pc, #688]	; (d5b68 <setup+0x2d8>)
   d58b8:	4cac      	ldr	r4, [pc, #688]	; (d5b6c <setup+0x2dc>)
   d58ba:	f8df 83ac 	ldr.w	r8, [pc, #940]	; d5c68 <setup+0x3d8>

  // Pressure / PIR Module Pin Setup
  pinMode(intPin,INPUT_PULLDOWN);                   // pressure sensor interrupt
   d58be:	2103      	movs	r1, #3
   d58c0:	200d      	movs	r0, #13
   d58c2:	f003 f9f1 	bl	d8ca8 <pinMode>
  pinMode(disableModule,OUTPUT);                    // Turns on the module when pulled low
   d58c6:	2101      	movs	r1, #1
   d58c8:	200c      	movs	r0, #12
   d58ca:	f003 f9ed 	bl	d8ca8 <pinMode>
   d58ce:	683b      	ldr	r3, [r7, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d58d0:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
   d58d4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   d58d8:	f003 031f 	and.w	r3, r3, #31
   d58dc:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d58e0:	f7fe fc1d 	bl	d411e <nrf_gpio_pin_clear>
  pinResetFast(disableModule);                      // Turn on the module - send high to switch off board
  pinMode(ledPower,OUTPUT);                         // Turn on the lights
   d58e4:	2101      	movs	r1, #1
   d58e6:	200b      	movs	r0, #11
   d58e8:	f003 f9de 	bl	d8ca8 <pinMode>

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d58ec:	683b      	ldr	r3, [r7, #0]
    nrf_gpio_pin_set(nrf_pin);
   d58ee:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
   d58f2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   d58f6:	f003 031f 	and.w	r3, r3, #31
   d58fa:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
  pinSetFast(ledPower);                             // Turns on the LED on the pressure sensor board

  digitalWrite(blueLED,HIGH);

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d58fe:	2500      	movs	r5, #0
   d5900:	f7fe fbfe 	bl	d4100 <nrf_gpio_pin_set>
  pinMode(disableModule,OUTPUT);                    // Turns on the module when pulled low
  pinResetFast(disableModule);                      // Turn on the module - send high to switch off board
  pinMode(ledPower,OUTPUT);                         // Turn on the lights
  pinSetFast(ledPower);                             // Turns on the LED on the pressure sensor board

  digitalWrite(blueLED,HIGH);
   d5904:	2101      	movs	r1, #1
   d5906:	2007      	movs	r0, #7
   d5908:	f003 f9df 	bl	d8cca <digitalWrite>

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
   d590c:	f7fe fd7c 	bl	d4408 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d5910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5914:	2201      	movs	r2, #1
   d5916:	4996      	ldr	r1, [pc, #600]	; (d5b70 <setup+0x2e0>)
   d5918:	9500      	str	r5, [sp, #0]
   d591a:	2008      	movs	r0, #8
   d591c:	f002 f922 	bl	d7b64 <_Z15attachInterrupttPFvvE13InterruptModeah>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d5920:	a804      	add	r0, sp, #16
   d5922:	f001 fb03 	bl	d6f2c <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d5926:	462b      	mov	r3, r5
   d5928:	227d      	movs	r2, #125	; 0x7d
   d592a:	a90c      	add	r1, sp, #48	; 0x30
   d592c:	a804      	add	r0, sp, #16
   d592e:	f002 fce2 	bl	d82f6 <_ZNK6String8getBytesEPhjj>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5932:	462b      	mov	r3, r5
   d5934:	462a      	mov	r2, r5
   d5936:	498f      	ldr	r1, [pc, #572]	; (d5b74 <setup+0x2e4>)
   d5938:	9501      	str	r5, [sp, #4]
   d593a:	9500      	str	r5, [sp, #0]
   d593c:	a80c      	add	r0, sp, #48	; 0x30
   d593e:	f001 fb05 	bl	d6f4c <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);          // Puts the deviceID into the response topic array
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);      // Subscribe to the integration response event

  Particle.variable("HourlyCount", current.hourlyCount);                // Define my Particle variables
   d5942:	498d      	ldr	r1, [pc, #564]	; (d5b78 <setup+0x2e8>)
   d5944:	488d      	ldr	r0, [pc, #564]	; (d5b7c <setup+0x2ec>)
   d5946:	f7ff ff95 	bl	d5874 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("DailyCount", current.dailyCount);                  // Note: Don't have to be connected for any of this!!!
   d594a:	498d      	ldr	r1, [pc, #564]	; (d5b80 <setup+0x2f0>)
   d594c:	488d      	ldr	r0, [pc, #564]	; (d5b84 <setup+0x2f4>)
   d594e:	f7ff ff91 	bl	d5874 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Signal", SignalString);
   d5952:	498d      	ldr	r1, [pc, #564]	; (d5b88 <setup+0x2f8>)
   d5954:	488d      	ldr	r0, [pc, #564]	; (d5b8c <setup+0x2fc>)
   d5956:	f7ff ff91 	bl	d587c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d595a:	498d      	ldr	r1, [pc, #564]	; (d5b90 <setup+0x300>)
   d595c:	488d      	ldr	r0, [pc, #564]	; (d5b94 <setup+0x304>)
   d595e:	f7ff ff89 	bl	d5874 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Temperature",current.temperature);
   d5962:	498d      	ldr	r1, [pc, #564]	; (d5b98 <setup+0x308>)
   d5964:	488d      	ldr	r0, [pc, #564]	; (d5b9c <setup+0x30c>)
   d5966:	f7ff ff85 	bl	d5874 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Release",currentPointRelease);
   d596a:	498d      	ldr	r1, [pc, #564]	; (d5ba0 <setup+0x310>)
   d596c:	488d      	ldr	r0, [pc, #564]	; (d5ba4 <setup+0x314>)
   d596e:	f7ff ff85 	bl	d587c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("stateOfChg", sysStatus.stateOfCharge);
   d5972:	498d      	ldr	r1, [pc, #564]	; (d5ba8 <setup+0x318>)
   d5974:	488d      	ldr	r0, [pc, #564]	; (d5bac <setup+0x31c>)
   d5976:	f7ff ff7d 	bl	d5874 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("lowPowerMode",lowPowerModeStr);
   d597a:	498d      	ldr	r1, [pc, #564]	; (d5bb0 <setup+0x320>)
   d597c:	488d      	ldr	r0, [pc, #564]	; (d5bb4 <setup+0x324>)
   d597e:	f7ff ff7d 	bl	d587c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("OpenTime",sysStatus.openTime);
   d5982:	498d      	ldr	r1, [pc, #564]	; (d5bb8 <setup+0x328>)
   d5984:	488d      	ldr	r0, [pc, #564]	; (d5bbc <setup+0x32c>)
   d5986:	f7ff ff75 	bl	d5874 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("CloseTime",sysStatus.closeTime);
   d598a:	498d      	ldr	r1, [pc, #564]	; (d5bc0 <setup+0x330>)
   d598c:	488d      	ldr	r0, [pc, #564]	; (d5bc4 <setup+0x334>)
   d598e:	f7ff ff71 	bl	d5874 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Debounce",debounceStr);
   d5992:	498d      	ldr	r1, [pc, #564]	; (d5bc8 <setup+0x338>)
   d5994:	488d      	ldr	r0, [pc, #564]	; (d5bcc <setup+0x33c>)
   d5996:	f7ff ff71 	bl	d587c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Alerts",current.alertCount);
   d599a:	498d      	ldr	r1, [pc, #564]	; (d5bd0 <setup+0x340>)
   d599c:	488d      	ldr	r0, [pc, #564]	; (d5bd4 <setup+0x344>)
   d599e:	f7ff ff69 	bl	d5874 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("TimeOffset",currentOffsetStr);
   d59a2:	498d      	ldr	r1, [pc, #564]	; (d5bd8 <setup+0x348>)
   d59a4:	488d      	ldr	r0, [pc, #564]	; (d5bdc <setup+0x34c>)
   d59a6:	f7ff ff69 	bl	d587c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("BatteryContext",batteryContextStr);
   d59aa:	498d      	ldr	r1, [pc, #564]	; (d5be0 <setup+0x350>)
   d59ac:	488d      	ldr	r0, [pc, #564]	; (d5be4 <setup+0x354>)
   d59ae:	f7ff ff65 	bl	d587c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>


  Particle.function("resetFRAM", resetFRAM);                          // These are the functions exposed to the mobile app and console
   d59b2:	498d      	ldr	r1, [pc, #564]	; (d5be8 <setup+0x358>)
   d59b4:	488d      	ldr	r0, [pc, #564]	; (d5bec <setup+0x35c>)
   d59b6:	f7ff ff65 	bl	d5884 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("resetCounts",resetCounts);
   d59ba:	498d      	ldr	r1, [pc, #564]	; (d5bf0 <setup+0x360>)
   d59bc:	488d      	ldr	r0, [pc, #564]	; (d5bf4 <setup+0x364>)
   d59be:	f7ff ff61 	bl	d5884 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("HardReset",hardResetNow);
   d59c2:	498d      	ldr	r1, [pc, #564]	; (d5bf8 <setup+0x368>)
   d59c4:	488d      	ldr	r0, [pc, #564]	; (d5bfc <setup+0x36c>)
   d59c6:	f7ff ff5d 	bl	d5884 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SendNow",sendNow);
   d59ca:	498d      	ldr	r1, [pc, #564]	; (d5c00 <setup+0x370>)
   d59cc:	488d      	ldr	r0, [pc, #564]	; (d5c04 <setup+0x374>)
   d59ce:	f7ff ff59 	bl	d5884 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
   d59d2:	498d      	ldr	r1, [pc, #564]	; (d5c08 <setup+0x378>)
   d59d4:	488d      	ldr	r0, [pc, #564]	; (d5c0c <setup+0x37c>)
   d59d6:	f7ff ff55 	bl	d5884 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Solar-Mode",setSolarMode);
   d59da:	498d      	ldr	r1, [pc, #564]	; (d5c10 <setup+0x380>)
   d59dc:	488d      	ldr	r0, [pc, #564]	; (d5c14 <setup+0x384>)
   d59de:	f7ff ff51 	bl	d5884 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setverboseMode);
   d59e2:	498d      	ldr	r1, [pc, #564]	; (d5c18 <setup+0x388>)
   d59e4:	488d      	ldr	r0, [pc, #564]	; (d5c1c <setup+0x38c>)
   d59e6:	f7ff ff4d 	bl	d5884 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);
   d59ea:	498d      	ldr	r1, [pc, #564]	; (d5c20 <setup+0x390>)
   d59ec:	488d      	ldr	r0, [pc, #564]	; (d5c24 <setup+0x394>)
   d59ee:	f7ff ff49 	bl	d5884 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-DSTOffset",setDSTOffset);
   d59f2:	498d      	ldr	r1, [pc, #564]	; (d5c28 <setup+0x398>)
   d59f4:	488d      	ldr	r0, [pc, #564]	; (d5c2c <setup+0x39c>)
   d59f6:	f7ff ff45 	bl	d5884 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-OpenTime",setOpenTime);
   d59fa:	498d      	ldr	r1, [pc, #564]	; (d5c30 <setup+0x3a0>)
   d59fc:	488d      	ldr	r0, [pc, #564]	; (d5c34 <setup+0x3a4>)
   d59fe:	f7ff ff41 	bl	d5884 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Close",setCloseTime);
   d5a02:	498d      	ldr	r1, [pc, #564]	; (d5c38 <setup+0x3a8>)
   d5a04:	488d      	ldr	r0, [pc, #564]	; (d5c3c <setup+0x3ac>)
   d5a06:	f7ff ff3d 	bl	d5884 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Debounce",setDebounce);
   d5a0a:	498d      	ldr	r1, [pc, #564]	; (d5c40 <setup+0x3b0>)
   d5a0c:	488d      	ldr	r0, [pc, #564]	; (d5c44 <setup+0x3b4>)
   d5a0e:	f7ff ff39 	bl	d5884 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>

  // Load FRAM and reset variables to their correct values
  fram.begin();                                                       // Initialize the FRAM module
   d5a12:	488d      	ldr	r0, [pc, #564]	; (d5c48 <setup+0x3b8>)
   d5a14:	f000 fa50 	bl	d5eb8 <_ZN6MB85RC5beginEv>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5a18:	2301      	movs	r3, #1
   d5a1a:	f10d 020f 	add.w	r2, sp, #15
   d5a1e:	4629      	mov	r1, r5
   d5a20:	4889      	ldr	r0, [pc, #548]	; (d5c48 <setup+0x3b8>)
   d5a22:	f000 fa8b 	bl	d5f3c <_ZN6MB85RC8readDataEjPhj>

  byte tempVersion;
  fram.get(FRAM::versionAddr, tempVersion);
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d5a26:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d5a2a:	2b02      	cmp	r3, #2
   d5a2c:	d01a      	beq.n	d5a64 <setup+0x1d4>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d5a2e:	4886      	ldr	r0, [pc, #536]	; (d5c48 <setup+0x3b8>)
   d5a30:	f000 fa4c 	bl	d5ecc <_ZN6MB85RC5eraseEv>
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5a34:	2304      	movs	r3, #4
   d5a36:	4a85      	ldr	r2, [pc, #532]	; (d5c4c <setup+0x3bc>)
   d5a38:	4883      	ldr	r0, [pc, #524]	; (d5c48 <setup+0x3b8>)
   d5a3a:	4629      	mov	r1, r5
   d5a3c:	f000 fad4 	bl	d5fe8 <_ZN6MB85RC9writeDataEjPKhj>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5a40:	2301      	movs	r3, #1
   d5a42:	f10d 020f 	add.w	r2, sp, #15
   d5a46:	4629      	mov	r1, r5
   d5a48:	487f      	ldr	r0, [pc, #508]	; (d5c48 <setup+0x3b8>)
   d5a4a:	f000 fa77 	bl	d5f3c <_ZN6MB85RC8readDataEjPhj>
    fram.put(FRAM::versionAddr, FRAMversionNumber);                   // Put the right value in
    fram.get(FRAM::versionAddr, tempVersion);                         // See if this worked
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;        // Device will not work without FRAM
   d5a4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d5a52:	2b02      	cmp	r3, #2
   d5a54:	d003      	beq.n	d5a5e <setup+0x1ce>
   d5a56:	2301      	movs	r3, #1
   d5a58:	f888 3000 	strb.w	r3, [r8]
   d5a5c:	e008      	b.n	d5a70 <setup+0x1e0>
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d5a5e:	f7ff fb47 	bl	d50f0 <_Z18loadSystemDefaultsv>
   d5a62:	e005      	b.n	d5a70 <setup+0x1e0>
   d5a64:	232c      	movs	r3, #44	; 0x2c
   d5a66:	4622      	mov	r2, r4
   d5a68:	2101      	movs	r1, #1
   d5a6a:	4877      	ldr	r0, [pc, #476]	; (d5c48 <setup+0x3b8>)
   d5a6c:	f000 fa66 	bl	d5f3c <_ZN6MB85RC8readDataEjPhj>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5a70:	ad2c      	add	r5, sp, #176	; 0xb0
   d5a72:	2600      	movs	r6, #0
  }
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range
   d5a74:	f7ff fab8 	bl	d4fe8 <_Z17checkSystemValuesv>
   d5a78:	f845 6d90 	str.w	r6, [r5, #-144]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5a7c:	4632      	mov	r2, r6
   d5a7e:	4631      	mov	r1, r6
   d5a80:	4628      	mov	r0, r5
   d5a82:	f001 f809 	bl	d6a98 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5a86:	9b08      	ldr	r3, [sp, #32]

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d5a88:	2b14      	cmp	r3, #20
   d5a8a:	f000 814f 	beq.w	d5d2c <setup+0x49c>
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5a8e:	4632      	mov	r2, r6
   d5a90:	4631      	mov	r1, r6
   d5a92:	4628      	mov	r0, r5
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5a94:	9608      	str	r6, [sp, #32]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5a96:	f000 ffff 	bl	d6a98 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5a9a:	9b08      	ldr	r3, [sp, #32]
   d5a9c:	2b8c      	cmp	r3, #140	; 0x8c
   d5a9e:	f000 8145 	beq.w	d5d2c <setup+0x49c>
    sysStatus.resetCount++;
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
  }

  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec", (float)sysStatus.debounce/1000.0);
   d5aa2:	edd4 7a04 	vldr	s15, [r4, #16]
   d5aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5aaa:	ee17 0a90 	vmov	r0, s15
   d5aae:	f003 fc9f 	bl	d93f0 <__aeabi_f2d>
   d5ab2:	4b67      	ldr	r3, [pc, #412]	; (d5c50 <setup+0x3c0>)
   d5ab4:	2200      	movs	r2, #0
   d5ab6:	f003 fe19 	bl	d96ec <__aeabi_ddiv>
   d5aba:	4a66      	ldr	r2, [pc, #408]	; (d5c54 <setup+0x3c4>)
   d5abc:	e9cd 0100 	strd	r0, r1, [sp]
   d5ac0:	2108      	movs	r1, #8
   d5ac2:	4841      	ldr	r0, [pc, #260]	; (d5bc8 <setup+0x338>)
   d5ac4:	f001 fae2 	bl	d708c <snprintf>

  (sysStatus.lowPowerMode) ? strcpy(lowPowerModeStr,"True") : strcpy(lowPowerModeStr,"False");
   d5ac8:	79a3      	ldrb	r3, [r4, #6]
   d5aca:	b10b      	cbz	r3, d5ad0 <setup+0x240>
   d5acc:	4962      	ldr	r1, [pc, #392]	; (d5c58 <setup+0x3c8>)
   d5ace:	e000      	b.n	d5ad2 <setup+0x242>
   d5ad0:	4962      	ldr	r1, [pc, #392]	; (d5c5c <setup+0x3cc>)
   d5ad2:	4837      	ldr	r0, [pc, #220]	; (d5bb0 <setup+0x320>)
   d5ad4:	f004 fcb0 	bl	da438 <strcpy>

  rtc.setup();                                                        // Start the real time clock
   d5ad8:	4861      	ldr	r0, [pc, #388]	; (d5c60 <setup+0x3d0>)
   d5ada:	f000 fd31 	bl	d6540 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d5ade:	2100      	movs	r1, #0
   d5ae0:	485f      	ldr	r0, [pc, #380]	; (d5c60 <setup+0x3d0>)
   d5ae2:	f000 fe82 	bl	d67ea <_ZN8MCP7941010clearAlarmEi>

  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
   d5ae6:	ed94 0a07 	vldr	s0, [r4, #28]
   d5aea:	f002 fdaf 	bl	d864c <_ZN9TimeClass12setDSTOffsetEf>
  if (!Time.isValid()) Time.setTime(rtc.getRTCTime());
   d5aee:	f002 fe97 	bl	d8820 <_ZN9TimeClass7isValidEv>
   d5af2:	b920      	cbnz	r0, d5afe <setup+0x26e>
   d5af4:	485a      	ldr	r0, [pc, #360]	; (d5c60 <setup+0x3d0>)
   d5af6:	f000 fd13 	bl	d6520 <_ZNK8MCP7941010getRTCTimeEv>
   d5afa:	f002 fdd1 	bl	d86a0 <_ZN9TimeClass7setTimeEl>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
   d5afe:	f7fe fda3 	bl	d4648 <_Z8isDSTusav>
   d5b02:	b110      	cbz	r0, d5b0a <setup+0x27a>
   d5b04:	f002 fdbc 	bl	d8680 <_ZN9TimeClass8beginDSTEv>
   d5b08:	e001      	b.n	d5b0e <setup+0x27e>
   d5b0a:	f002 fdc3 	bl	d8694 <_ZN9TimeClass6endDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
   d5b0e:	ed94 0a06 	vldr	s0, [r4, #24]
   d5b12:	f8df 9158 	ldr.w	r9, [pc, #344]	; d5c6c <setup+0x3dc>
   d5b16:	f002 fd7d 	bl	d8614 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d5b1a:	f002 fd6d 	bl	d85f8 <_ZN9TimeClass5localEv>
   d5b1e:	4606      	mov	r6, r0
   d5b20:	f002 fe9f 	bl	d8862 <_ZN9TimeClass3nowEv>
   d5b24:	1a30      	subs	r0, r6, r0
   d5b26:	f003 fc51 	bl	d93cc <__aeabi_i2d>
   d5b2a:	a30d      	add	r3, pc, #52	; (adr r3, d5b60 <setup+0x2d0>)
   d5b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5b30:	f003 fddc 	bl	d96ec <__aeabi_ddiv>
   d5b34:	4e10      	ldr	r6, [pc, #64]	; (d5b78 <setup+0x2e8>)
   d5b36:	4a4b      	ldr	r2, [pc, #300]	; (d5c64 <setup+0x3d4>)
   d5b38:	e9cd 0100 	strd	r0, r1, [sp]
   d5b3c:	210a      	movs	r1, #10
   d5b3e:	4826      	ldr	r0, [pc, #152]	; (d5bd8 <setup+0x348>)
   d5b40:	f001 faa4 	bl	d708c <snprintf>
   d5b44:	231c      	movs	r3, #28
   d5b46:	4632      	mov	r2, r6
   d5b48:	2150      	movs	r1, #80	; 0x50
   d5b4a:	483f      	ldr	r0, [pc, #252]	; (d5c48 <setup+0x3b8>)
   d5b4c:	f000 f9f6 	bl	d5f3c <_ZN6MB85RC8readDataEjPhj>

  // Done with the System Stuff - now load the current counts
  fram.get(FRAM::currentCountsAddr,current);
  if (current.hourlyCount) currentHourlyPeriod = Time.hour(current.lastCountTime);
   d5b50:	6833      	ldr	r3, [r6, #0]
   d5b52:	2b00      	cmp	r3, #0
   d5b54:	f000 808c 	beq.w	d5c70 <setup+0x3e0>
   d5b58:	68f0      	ldr	r0, [r6, #12]
   d5b5a:	f002 fd29 	bl	d85b0 <_ZN9TimeClass4hourEl>
   d5b5e:	e089      	b.n	d5c74 <setup+0x3e4>
   d5b60:	00000000 	.word	0x00000000
   d5b64:	40ac2000 	.word	0x40ac2000
   d5b68:	2003e0f4 	.word	0x2003e0f4
   d5b6c:	2003e174 	.word	0x2003e174
   d5b70:	000d40c5 	.word	0x000d40c5
   d5b74:	000d4a1d 	.word	0x000d4a1d
   d5b78:	2003e150 	.word	0x2003e150
   d5b7c:	000dd489 	.word	0x000dd489
   d5b80:	2003e158 	.word	0x2003e158
   d5b84:	000dd495 	.word	0x000dd495
   d5b88:	2003e0fc 	.word	0x2003e0fc
   d5b8c:	000dd4a0 	.word	0x000dd4a0
   d5b90:	2003e188 	.word	0x2003e188
   d5b94:	000dd4a7 	.word	0x000dd4a7
   d5b98:	2003e160 	.word	0x2003e160
   d5b9c:	000dd4b2 	.word	0x000dd4b2
   d5ba0:	2003df60 	.word	0x2003df60
   d5ba4:	000dd4be 	.word	0x000dd4be
   d5ba8:	2003e17c 	.word	0x2003e17c
   d5bac:	000dd4c6 	.word	0x000dd4c6
   d5bb0:	2003e149 	.word	0x2003e149
   d5bb4:	000dd4d1 	.word	0x000dd4d1
   d5bb8:	2003e194 	.word	0x2003e194
   d5bbc:	000dd575 	.word	0x000dd575
   d5bc0:	2003e198 	.word	0x2003e198
   d5bc4:	000dd4de 	.word	0x000dd4de
   d5bc8:	2003df65 	.word	0x2003df65
   d5bcc:	000dd58c 	.word	0x000dd58c
   d5bd0:	2003e164 	.word	0x2003e164
   d5bd4:	000dd4e8 	.word	0x000dd4e8
   d5bd8:	2003e069 	.word	0x2003e069
   d5bdc:	000dd4ef 	.word	0x000dd4ef
   d5be0:	2003e0a9 	.word	0x2003e0a9
   d5be4:	000dd4fa 	.word	0x000dd4fa
   d5be8:	000d4155 	.word	0x000d4155
   d5bec:	000dd509 	.word	0x000dd509
   d5bf0:	000d41b5 	.word	0x000d41b5
   d5bf4:	000dd513 	.word	0x000dd513
   d5bf8:	000d4ab9 	.word	0x000d4ab9
   d5bfc:	000dd51f 	.word	0x000dd51f
   d5c00:	000d4171 	.word	0x000d4171
   d5c04:	000dd529 	.word	0x000dd529
   d5c08:	000d4f15 	.word	0x000d4f15
   d5c0c:	000dd531 	.word	0x000dd531
   d5c10:	000d4bad 	.word	0x000d4bad
   d5c14:	000dd53e 	.word	0x000dd53e
   d5c18:	000d4c59 	.word	0x000d4c59
   d5c1c:	000dd549 	.word	0x000dd549
   d5c20:	000d4d01 	.word	0x000d4d01
   d5c24:	000dd556 	.word	0x000dd556
   d5c28:	000d5751 	.word	0x000d5751
   d5c2c:	000dd563 	.word	0x000dd563
   d5c30:	000d4e35 	.word	0x000d4e35
   d5c34:	000dd571 	.word	0x000dd571
   d5c38:	000d4ea5 	.word	0x000d4ea5
   d5c3c:	000dd57e 	.word	0x000dd57e
   d5c40:	000d4b05 	.word	0x000d4b05
   d5c44:	000dd588 	.word	0x000dd588
   d5c48:	2003e074 	.word	0x2003e074
   d5c4c:	000dd1b4 	.word	0x000dd1b4
   d5c50:	408f4000 	.word	0x408f4000
   d5c54:	000dd2e6 	.word	0x000dd2e6
   d5c58:	000dd3a2 	.word	0x000dd3a2
   d5c5c:	000dd3b9 	.word	0x000dd3b9
   d5c60:	2003e084 	.word	0x2003e084
   d5c64:	000dd34a 	.word	0x000dd34a
   d5c68:	2003e0c0 	.word	0x2003e0c0
   d5c6c:	2003e0c4 	.word	0x2003e0c4
  else currentHourlyPeriod = Time.hour();                              // The local time hourly period for reporting purposes
   d5c70:	f002 fdfe 	bl	d8870 <_ZN9TimeClass4hourEv>
   d5c74:	f8c9 0000 	str.w	r0, [r9]

  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d5c78:	f7fe fbfa 	bl	d4470 <_Z14setPowerConfigv>

  if (!digitalRead(userSwitch)) loadSystemDefaults();                 // Make sure the device wakes up and connects
   d5c7c:	2004      	movs	r0, #4
   d5c7e:	f003 f83d 	bl	d8cfc <digitalRead>
   d5c82:	b908      	cbnz	r0, d5c88 <setup+0x3f8>
   d5c84:	f7ff fa34 	bl	d50f0 <_Z18loadSystemDefaultsv>

  // Here is where the code diverges based on why we are running Setup()
  // Deterimine when the last counts were taken check when starting test to determine if we reload values or start counts over
  
  if (Time.day() != Time.day(current.lastCountTime)) {    // ******  - These are debug lines
   d5c88:	f002 fe06 	bl	d8898 <_ZN9TimeClass3dayEv>
   d5c8c:	4681      	mov	r9, r0
   d5c8e:	68f0      	ldr	r0, [r6, #12]
   d5c90:	f002 fc96 	bl	d85c0 <_ZN9TimeClass3dayEl>
   d5c94:	4581      	cmp	r9, r0
   d5c96:	d010      	beq.n	d5cba <setup+0x42a>
    resetEverything();                                               // Zero the counts for the new day
   d5c98:	f7fe fc72 	bl	d4580 <_Z15resetEverythingv>
    if (sysStatus.solarPowerMode && !sysStatus.lowPowerMode) {
   d5c9c:	7963      	ldrb	r3, [r4, #5]
   d5c9e:	b163      	cbz	r3, d5cba <setup+0x42a>
   d5ca0:	4b27      	ldr	r3, [pc, #156]	; (d5d40 <setup+0x4b0>)
   d5ca2:	799b      	ldrb	r3, [r3, #6]
   d5ca4:	b94b      	cbnz	r3, d5cba <setup+0x42a>
      setLowPowerMode("1");                                           // If we are running on solar, we will reset to lowPowerMode at Midnight
   d5ca6:	4927      	ldr	r1, [pc, #156]	; (d5d44 <setup+0x4b4>)
   d5ca8:	4628      	mov	r0, r5
   d5caa:	f002 fae5 	bl	d8278 <_ZN6StringC1EPK19__FlashStringHelper>
   d5cae:	4628      	mov	r0, r5
   d5cb0:	f7ff f930 	bl	d4f14 <_Z15setLowPowerMode6String>
   d5cb4:	4628      	mov	r0, r5
   d5cb6:	f002 fa98 	bl	d81ea <_ZN6StringD1Ev>
    }
  }

  if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) {} // The park is closed - don't connect
   d5cba:	f002 fdd9 	bl	d8870 <_ZN9TimeClass4hourEv>
   d5cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5cc0:	4d1f      	ldr	r5, [pc, #124]	; (d5d40 <setup+0x4b0>)
   d5cc2:	4298      	cmp	r0, r3
   d5cc4:	da17      	bge.n	d5cf6 <setup+0x466>
   d5cc6:	f002 fdd3 	bl	d8870 <_ZN9TimeClass4hourEv>
   d5cca:	6a2b      	ldr	r3, [r5, #32]
   d5ccc:	4298      	cmp	r0, r3
   d5cce:	db12      	blt.n	d5cf6 <setup+0x466>
  else {                                                              // Park is open let's get ready for the day
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
   d5cd0:	2300      	movs	r3, #0
   d5cd2:	9300      	str	r3, [sp, #0]
   d5cd4:	2201      	movs	r2, #1
   d5cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5cda:	491b      	ldr	r1, [pc, #108]	; (d5d48 <setup+0x4b8>)
   d5cdc:	200d      	movs	r0, #13
   d5cde:	f001 ff41 	bl	d7b64 <_Z15attachInterrupttPFvvE13InterruptModeah>
    if (sysStatus.connectedStatus && !Particle.connected()) connectToParticle(); // Only going to connect if we are in connectionMode
   d5ce2:	78eb      	ldrb	r3, [r5, #3]
   d5ce4:	b113      	cbz	r3, d5cec <setup+0x45c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5ce6:	f001 f919 	bl	d6f1c <spark_cloud_flag_connected>
   d5cea:	b330      	cbz	r0, d5d3a <setup+0x4aa>
    takeMeasurements();                                               // Populates values so you can read them before the hour
   d5cec:	f7fe fd14 	bl	d4718 <_Z16takeMeasurementsv>
    stayAwake = stayAwakeLong;                                        // Keeps Electron awake after reboot - helps with recovery
   d5cf0:	4b16      	ldr	r3, [pc, #88]	; (d5d4c <setup+0x4bc>)
   d5cf2:	4a17      	ldr	r2, [pc, #92]	; (d5d50 <setup+0x4c0>)
   d5cf4:	601a      	str	r2, [r3, #0]
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d5cf6:	683b      	ldr	r3, [r7, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d5cf8:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
   d5cfc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   d5d00:	f003 031f 	and.w	r3, r3, #31
   d5d04:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d5d08:	f7fe fa09 	bl	d411e <nrf_gpio_pin_clear>
  }

  pinResetFast(ledPower);                                             // Turns off the LED on the sensor board

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d5d0c:	f898 3000 	ldrb.w	r3, [r8]
   d5d10:	b913      	cbnz	r3, d5d18 <setup+0x488>
   d5d12:	4b10      	ldr	r3, [pc, #64]	; (d5d54 <setup+0x4c4>)
   d5d14:	2202      	movs	r2, #2
   d5d16:	701a      	strb	r2, [r3, #0]

  digitalWrite(blueLED,LOW);
   d5d18:	2100      	movs	r1, #0
   d5d1a:	2007      	movs	r0, #7
   d5d1c:	f002 ffd5 	bl	d8cca <digitalWrite>

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond

  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d5d20:	a804      	add	r0, sp, #16
   d5d22:	f002 fa62 	bl	d81ea <_ZN6StringD1Ev>
  pinResetFast(ledPower);                                             // Turns off the LED on the sensor board

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code

  digitalWrite(blueLED,LOW);
}
   d5d26:	b02d      	add	sp, #180	; 0xb4
   d5d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
    sysStatus.resetCount++;
   d5d2c:	6963      	ldr	r3, [r4, #20]
   d5d2e:	3301      	adds	r3, #1
   d5d30:	6163      	str	r3, [r4, #20]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d5d32:	4b09      	ldr	r3, [pc, #36]	; (d5d58 <setup+0x4c8>)
   d5d34:	2201      	movs	r2, #1
   d5d36:	701a      	strb	r2, [r3, #0]
   d5d38:	e6b3      	b.n	d5aa2 <setup+0x212>
  }

  if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) {} // The park is closed - don't connect
  else {                                                              // Park is open let's get ready for the day
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
    if (sysStatus.connectedStatus && !Particle.connected()) connectToParticle(); // Only going to connect if we are in connectionMode
   d5d3a:	f7fe fddb 	bl	d48f4 <_Z17connectToParticlev>
   d5d3e:	e7d5      	b.n	d5cec <setup+0x45c>
   d5d40:	2003e174 	.word	0x2003e174
   d5d44:	000dd60c 	.word	0x000dd60c
   d5d48:	000d40b9 	.word	0x000d40b9
   d5d4c:	2003e0a4 	.word	0x2003e0a4
   d5d50:	00015f90 	.word	0x00015f90
   d5d54:	2003e0c0 	.word	0x2003e0c0
   d5d58:	2003e171 	.word	0x2003e171

000d5d5c <_GLOBAL__sub_I___appProductID>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5d5c:	4b32      	ldr	r3, [pc, #200]	; (d5e28 <_GLOBAL__sub_I___appProductID+0xcc>)
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d5d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d62:	2400      	movs	r4, #0
   d5d64:	601c      	str	r4, [r3, #0]
   d5d66:	4b31      	ldr	r3, [pc, #196]	; (d5e2c <_GLOBAL__sub_I___appProductID+0xd0>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5d68:	4d31      	ldr	r5, [pc, #196]	; (d5e30 <_GLOBAL__sub_I___appProductID+0xd4>)
#include "MCP79410RK.h"                             // Real Time Clock
#include "MB85RC256V-FRAM-RK.h"                     // Rickkas Particle based FRAM Library
#include "UnitTestCode.h"                           // This code will exercise the device

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5d6a:	4e32      	ldr	r6, [pc, #200]	; (d5e34 <_GLOBAL__sub_I___appProductID+0xd8>)
   d5d6c:	2701      	movs	r7, #1
   d5d6e:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5d70:	f000 fed2 	bl	d6b18 <HAL_Pin_Map>
   d5d74:	4b30      	ldr	r3, [pc, #192]	; (d5e38 <_GLOBAL__sub_I___appProductID+0xdc>)
   d5d76:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5d78:	f002 ff48 	bl	d8c0c <spark_protocol_instance>
   d5d7c:	4623      	mov	r3, r4
   d5d7e:	4622      	mov	r2, r4
   d5d80:	f642 2170 	movw	r1, #10864	; 0x2a70
   d5d84:	f002 ff4a 	bl	d8c1c <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5d88:	f002 ff40 	bl	d8c0c <spark_protocol_instance>
   d5d8c:	4622      	mov	r2, r4
   d5d8e:	4623      	mov	r3, r4
   d5d90:	2105      	movs	r1, #5
   d5d92:	f002 ff4b 	bl	d8c2c <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5d96:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5d9a:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5d9c:	602c      	str	r4, [r5, #0]
   d5d9e:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5da0:	71ac      	strb	r4, [r5, #6]
   d5da2:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5da4:	2002      	movs	r0, #2
   d5da6:	f001 f829 	bl	d6dfc <set_system_mode>
   d5daa:	4632      	mov	r2, r6
   d5dac:	4923      	ldr	r1, [pc, #140]	; (d5e3c <_GLOBAL__sub_I___appProductID+0xe0>)
   d5dae:	4628      	mov	r0, r5
   d5db0:	f003 f84e 	bl	d8e50 <__aeabi_atexit>
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5db4:	4d22      	ldr	r5, [pc, #136]	; (d5e40 <_GLOBAL__sub_I___appProductID+0xe4>)
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5db6:	4621      	mov	r1, r4
   d5db8:	4638      	mov	r0, r7
   d5dba:	f001 f837 	bl	d6e2c <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d5dbe:	4639      	mov	r1, r7
   d5dc0:	2004      	movs	r0, #4
   d5dc2:	f000 fe59 	bl	d6a78 <HAL_Feature_Set>
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5dc6:	f04f 0810 	mov.w	r8, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5dca:	1d28      	adds	r0, r5, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5dcc:	4642      	mov	r2, r8
   d5dce:	4621      	mov	r1, r4
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5dd0:	6028      	str	r0, [r5, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5dd2:	f004 f8a8 	bl	d9f26 <memset>
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d5dd6:	2302      	movs	r3, #2
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
   d5dd8:	4632      	mov	r2, r6
   d5dda:	491a      	ldr	r1, [pc, #104]	; (d5e44 <_GLOBAL__sub_I___appProductID+0xe8>)
   d5ddc:	80eb      	strh	r3, [r5, #6]
   d5dde:	4628      	mov	r0, r5
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5de0:	752f      	strb	r7, [r5, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d5de2:	f8a5 8004 	strh.w	r8, [r5, #4]
   d5de6:	f003 f833 	bl	d8e50 <__aeabi_atexit>
	/**
	 * @brief Constructor for MCP79410 objects.
	 *
	 * @param wire The I2C interface to use. Optional, default is Wire. On some devices you can use Wire1.
	 */
	MCP79410(TwoWire &wire = Wire);
   d5dea:	f002 ffe5 	bl	d8db8 <_Z19__fetch_global_Wirev>
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
   d5dee:	4d16      	ldr	r5, [pc, #88]	; (d5e48 <_GLOBAL__sub_I___appProductID+0xec>)
   d5df0:	4601      	mov	r1, r0
   d5df2:	4628      	mov	r0, r5
   d5df4:	f000 fae2 	bl	d63bc <_ZN8MCP79410C1ER7TwoWire>
   d5df8:	4632      	mov	r2, r6
   d5dfa:	4914      	ldr	r1, [pc, #80]	; (d5e4c <_GLOBAL__sub_I___appProductID+0xf0>)
   d5dfc:	4628      	mov	r0, r5
   d5dfe:	f003 f827 	bl	d8e50 <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5e02:	f002 ffd9 	bl	d8db8 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5e06:	4d12      	ldr	r5, [pc, #72]	; (d5e50 <_GLOBAL__sub_I___appProductID+0xf4>)
   d5e08:	4623      	mov	r3, r4
   d5e0a:	4601      	mov	r1, r0
   d5e0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5e10:	4628      	mov	r0, r5
   d5e12:	f000 f847 	bl	d5ea4 <_ZN6MB85RCC1ER7TwoWireji>
   d5e16:	4b0f      	ldr	r3, [pc, #60]	; (d5e54 <_GLOBAL__sub_I___appProductID+0xf8>)
   d5e18:	602b      	str	r3, [r5, #0]
   d5e1a:	4632      	mov	r2, r6
   d5e1c:	4628      	mov	r0, r5
   d5e1e:	490e      	ldr	r1, [pc, #56]	; (d5e58 <_GLOBAL__sub_I___appProductID+0xfc>)
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d5e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5e24:	f003 b814 	b.w	d8e50 <__aeabi_atexit>
   d5e28:	2003e0e4 	.word	0x2003e0e4
   d5e2c:	2003e0a0 	.word	0x2003e0a0
   d5e30:	2003e0e8 	.word	0x2003e0e8
   d5e34:	2003e064 	.word	0x2003e064
   d5e38:	2003e0f4 	.word	0x2003e0f4
   d5e3c:	000d4241 	.word	0x000d4241
   d5e40:	2003e0cc 	.word	0x2003e0cc
   d5e44:	000d413d 	.word	0x000d413d
   d5e48:	2003e084 	.word	0x2003e084
   d5e4c:	000d612f 	.word	0x000d612f
   d5e50:	2003e074 	.word	0x2003e074
   d5e54:	000dd15c 	.word	0x000dd15c
   d5e58:	000d418d 	.word	0x000d418d

000d5e5c <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5e5c:	4770      	bx	lr

000d5e5e <_ZN6MB85RCD0Ev>:

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
   d5e5e:	b510      	push	{r4, lr}
}
   d5e60:	2110      	movs	r1, #16

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
   d5e62:	4604      	mov	r4, r0
}
   d5e64:	f002 fff9 	bl	d8e5a <_ZdlPvj>
   d5e68:	4620      	mov	r0, r4
   d5e6a:	bd10      	pop	{r4, pc}

000d5e6c <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5e6c:	6803      	ldr	r3, [r0, #0]
   d5e6e:	b2c9      	uxtb	r1, r1
   d5e70:	689b      	ldr	r3, [r3, #8]
   d5e72:	4718      	bx	r3

000d5e74 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5e74:	b40e      	push	{r1, r2, r3}
   d5e76:	b500      	push	{lr}
   d5e78:	b08c      	sub	sp, #48	; 0x30
   d5e7a:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d5e7c:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5e7e:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d5e82:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5e84:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d5e88:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5e8a:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5e8c:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5e8e:	aa04      	add	r2, sp, #16
   d5e90:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5e92:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5e94:	f000 ff98 	bl	d6dc8 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d5e98:	b00c      	add	sp, #48	; 0x30
   d5e9a:	f85d eb04 	ldr.w	lr, [sp], #4
   d5e9e:	b003      	add	sp, #12
   d5ea0:	4770      	bx	lr
	...

000d5ea4 <_ZN6MB85RCC1ER7TwoWireji>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5ea4:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d5ea6:	4d03      	ldr	r5, [pc, #12]	; (d5eb4 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d5ea8:	6005      	str	r5, [r0, #0]
   d5eaa:	6041      	str	r1, [r0, #4]
   d5eac:	6082      	str	r2, [r0, #8]
   d5eae:	60c3      	str	r3, [r0, #12]
}
   d5eb0:	bd30      	pop	{r4, r5, pc}
   d5eb2:	bf00      	nop
   d5eb4:	000dd690 	.word	0x000dd690

000d5eb8 <_ZN6MB85RC5beginEv>:

MB85RC::~MB85RC() {
}

void MB85RC::begin() {
	wire.begin();
   d5eb8:	6840      	ldr	r0, [r0, #4]
   d5eba:	f001 bdfd 	b.w	d7ab8 <_ZN7TwoWire5beginEv>

000d5ebe <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5ebe:	b510      	push	{r4, lr}
   d5ec0:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5ec2:	6800      	ldr	r0, [r0, #0]
   d5ec4:	f001 fe44 	bl	d7b50 <_ZN7TwoWire6unlockEv>
   d5ec8:	4620      	mov	r0, r4
   d5eca:	bd10      	pop	{r4, pc}

000d5ecc <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ed0:	b08a      	sub	sp, #40	; 0x28
   d5ed2:	4607      	mov	r7, r0

	WITH_LOCK(wire) {
   d5ed4:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5ed6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5ed8:	f001 fe31 	bl	d7b3e <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5edc:	221e      	movs	r2, #30
   d5ede:	2100      	movs	r1, #0
   d5ee0:	a802      	add	r0, sp, #8

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
		size_t totalLen = memorySize;
   d5ee2:	68be      	ldr	r6, [r7, #8]

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5ee4:	f004 f81f 	bl	d9f26 <memset>
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
   d5ee8:	2500      	movs	r5, #0
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
   d5eea:	b1de      	cbz	r6, d5f24 <_ZN6MB85RC5eraseEv+0x58>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5eec:	683b      	ldr	r3, [r7, #0]
   d5eee:	2e1e      	cmp	r6, #30
   d5ef0:	46b0      	mov	r8, r6
   d5ef2:	bf28      	it	cs
   d5ef4:	f04f 081e 	movcs.w	r8, #30
   d5ef8:	68dc      	ldr	r4, [r3, #12]
   d5efa:	aa02      	add	r2, sp, #8
   d5efc:	4643      	mov	r3, r8
   d5efe:	4629      	mov	r1, r5
   d5f00:	4638      	mov	r0, r7
   d5f02:	47a0      	blx	r4
			if (!result) {
   d5f04:	4604      	mov	r4, r0
   d5f06:	b948      	cbnz	r0, d5f1c <_ZN6MB85RC5eraseEv+0x50>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d5f08:	462a      	mov	r2, r5
   d5f0a:	490a      	ldr	r1, [pc, #40]	; (d5f34 <_ZN6MB85RC5eraseEv+0x68>)
   d5f0c:	480a      	ldr	r0, [pc, #40]	; (d5f38 <_ZN6MB85RC5eraseEv+0x6c>)
   d5f0e:	f7ff ffb1 	bl	d5e74 <_ZNK5spark6Logger4infoEPKcz>
   d5f12:	a801      	add	r0, sp, #4
   d5f14:	f7ff ffd3 	bl	d5ebe <_ZNSt10lock_guardIR7TwoWireED1Ev>
				return false;
   d5f18:	4620      	mov	r0, r4
   d5f1a:	e007      	b.n	d5f2c <_ZN6MB85RC5eraseEv+0x60>
			}

			totalLen -= count;
   d5f1c:	ebc8 0606 	rsb	r6, r8, r6
			framAddr += count;
   d5f20:	4445      	add	r5, r8
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
   d5f22:	e7e2      	b.n	d5eea <_ZN6MB85RC5eraseEv+0x1e>
	wire.begin();
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
   d5f24:	a801      	add	r0, sp, #4
   d5f26:	f7ff ffca 	bl	d5ebe <_ZNSt10lock_guardIR7TwoWireED1Ev>
			totalLen -= count;
			framAddr += count;
		}
	}

	return true;
   d5f2a:	2001      	movs	r0, #1
}
   d5f2c:	b00a      	add	sp, #40	; 0x28
   d5f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5f32:	bf00      	nop
   d5f34:	000dd60e 	.word	0x000dd60e
   d5f38:	2003e270 	.word	0x2003e270

000d5f3c <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5f3c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5f40:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5f42:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5f44:	9001      	str	r0, [sp, #4]

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5f46:	460e      	mov	r6, r1
   d5f48:	4617      	mov	r7, r2
   d5f4a:	4698      	mov	r8, r3
      { _M_device.lock(); }
   d5f4c:	f001 fdf7 	bl	d7b3e <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {

		while(dataLen > 0) {
   d5f50:	f1b8 0f00 	cmp.w	r8, #0
   d5f54:	d101      	bne.n	d5f5a <_ZN6MB85RC8readDataEjPhj+0x1e>
   d5f56:	2401      	movs	r4, #1
   d5f58:	e03f      	b.n	d5fda <_ZN6MB85RC8readDataEjPhj+0x9e>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5f5a:	68e1      	ldr	r1, [r4, #12]
   d5f5c:	6860      	ldr	r0, [r4, #4]
   d5f5e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5f62:	f001 fde1 	bl	d7b28 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5f66:	0a31      	lsrs	r1, r6, #8
   d5f68:	6860      	ldr	r0, [r4, #4]
   d5f6a:	f7ff ff7f 	bl	d5e6c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5f6e:	4631      	mov	r1, r6
   d5f70:	6860      	ldr	r0, [r4, #4]
   d5f72:	f7ff ff7b 	bl	d5e6c <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5f76:	2100      	movs	r1, #0
   d5f78:	6860      	ldr	r0, [r4, #4]
   d5f7a:	f001 fdd8 	bl	d7b2e <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5f7e:	b108      	cbz	r0, d5f84 <_ZN6MB85RC8readDataEjPhj+0x48>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5f80:	2400      	movs	r4, #0
   d5f82:	e02a      	b.n	d5fda <_ZN6MB85RC8readDataEjPhj+0x9e>
			size_t bytesToRead = dataLen;
			if (bytesToRead > 32) {
				bytesToRead = 32;
			}

			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5f84:	68e1      	ldr	r1, [r4, #12]
   d5f86:	6860      	ldr	r0, [r4, #4]
   d5f88:	f1b8 0f20 	cmp.w	r8, #32
   d5f8c:	46c1      	mov	r9, r8
   d5f8e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5f92:	bf28      	it	cs
   d5f94:	f04f 0920 	movcs.w	r9, #32
   d5f98:	2301      	movs	r3, #1
   d5f9a:	464a      	mov	r2, r9
   d5f9c:	b2c9      	uxtb	r1, r1
   d5f9e:	f001 fdad 	bl	d7afc <_ZN7TwoWire11requestFromEhjh>

			if (Wire.available() < (int) bytesToRead) {
   d5fa2:	f002 ff09 	bl	d8db8 <_Z19__fetch_global_Wirev>
   d5fa6:	6803      	ldr	r3, [r0, #0]
   d5fa8:	691b      	ldr	r3, [r3, #16]
   d5faa:	4798      	blx	r3
   d5fac:	4548      	cmp	r0, r9
   d5fae:	dbe7      	blt.n	d5f80 <_ZN6MB85RC8readDataEjPhj+0x44>
   d5fb0:	463d      	mov	r5, r7
   d5fb2:	ebc7 0a06 	rsb	sl, r7, r6
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
				*data++ = Wire.read();    // receive a byte as character
   d5fb6:	f002 feff 	bl	d8db8 <_Z19__fetch_global_Wirev>
   d5fba:	6803      	ldr	r3, [r0, #0]
   d5fbc:	695b      	ldr	r3, [r3, #20]
   d5fbe:	4798      	blx	r3
   d5fc0:	f805 0b01 	strb.w	r0, [r5], #1
			if (Wire.available() < (int) bytesToRead) {
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d5fc4:	1bea      	subs	r2, r5, r7
   d5fc6:	ebc5 0308 	rsb	r3, r5, r8
   d5fca:	4591      	cmp	r9, r2
   d5fcc:	eb05 060a 	add.w	r6, r5, sl
   d5fd0:	443b      	add	r3, r7
   d5fd2:	d8f0      	bhi.n	d5fb6 <_ZN6MB85RC8readDataEjPhj+0x7a>
   d5fd4:	4698      	mov	r8, r3
				*data++ = Wire.read();    // receive a byte as character
   d5fd6:	462f      	mov	r7, r5
   d5fd8:	e7ba      	b.n	d5f50 <_ZN6MB85RC8readDataEjPhj+0x14>


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
   d5fda:	a801      	add	r0, sp, #4
   d5fdc:	f7ff ff6f 	bl	d5ebe <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5fe0:	4620      	mov	r0, r4
   d5fe2:	b002      	add	sp, #8
   d5fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5fe8 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5fe8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5fec:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5fee:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5ff0:	9001      	str	r0, [sp, #4]
	}
	return result;
}


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5ff2:	460d      	mov	r5, r1
   d5ff4:	4690      	mov	r8, r2
   d5ff6:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5ff8:	f001 fda1 	bl	d7b3e <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {
		while(dataLen > 0) {
   d5ffc:	b34f      	cbz	r7, d6052 <_ZN6MB85RC9writeDataEjPKhj+0x6a>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5ffe:	68e1      	ldr	r1, [r4, #12]
   d6000:	6860      	ldr	r0, [r4, #4]
   d6002:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d6006:	f001 fd8f 	bl	d7b28 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d600a:	0a29      	lsrs	r1, r5, #8
   d600c:	6860      	ldr	r0, [r4, #4]
   d600e:	f7ff ff2d 	bl	d5e6c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d6012:	4629      	mov	r1, r5
   d6014:	6860      	ldr	r0, [r4, #4]
   d6016:	f7ff ff29 	bl	d5e6c <_ZN7TwoWire5writeEj>
   d601a:	f108 091e 	add.w	r9, r8, #30
   d601e:	4646      	mov	r6, r8
   d6020:	ebc8 0a05 	rsb	sl, r8, r5

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
				wire.write(*data);
   d6024:	6860      	ldr	r0, [r4, #4]
   d6026:	f816 1b01 	ldrb.w	r1, [r6], #1
   d602a:	6803      	ldr	r3, [r0, #0]
   d602c:	689b      	ldr	r3, [r3, #8]
   d602e:	4798      	blx	r3
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6030:	45b1      	cmp	r9, r6
   d6032:	eb06 050a 	add.w	r5, r6, sl
				wire.write(*data);
				framAddr++;
				data++;
   d6036:	46b0      	mov	r8, r6
				dataLen--;
   d6038:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d603c:	d001      	beq.n	d6042 <_ZN6MB85RC9writeDataEjPKhj+0x5a>
   d603e:	2f00      	cmp	r7, #0
   d6040:	d1f0      	bne.n	d6024 <_ZN6MB85RC9writeDataEjPKhj+0x3c>
				framAddr++;
				data++;
				dataLen--;
			}

			int stat = wire.endTransmission(true);
   d6042:	2101      	movs	r1, #1
   d6044:	6860      	ldr	r0, [r4, #4]
   d6046:	f001 fd72 	bl	d7b2e <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d604a:	2800      	cmp	r0, #0
   d604c:	d0d6      	beq.n	d5ffc <_ZN6MB85RC9writeDataEjPKhj+0x14>
   d604e:	2400      	movs	r4, #0
   d6050:	e000      	b.n	d6054 <_ZN6MB85RC9writeDataEjPKhj+0x6c>
   d6052:	2401      	movs	r4, #1


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
   d6054:	a801      	add	r0, sp, #4
   d6056:	f7ff ff32 	bl	d5ebe <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d605a:	4620      	mov	r0, r4
   d605c:	b002      	add	sp, #8
   d605e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d6062 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d6062:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6066:	b08b      	sub	sp, #44	; 0x2c
   d6068:	460e      	mov	r6, r1
   d606a:	4615      	mov	r5, r2
   d606c:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d606e:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6070:	9001      	str	r0, [sp, #4]
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d6072:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d6074:	f001 fd63 	bl	d7b3e <_ZN7TwoWire4lockEv>

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
   d6078:	42ae      	cmp	r6, r5
   d607a:	d223      	bcs.n	d60c4 <_ZN6MB85RC8moveDataEjjj+0x62>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d607c:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d607e:	4425      	add	r5, r4
			while(numBytes > 0) {
   d6080:	b90c      	cbnz	r4, d6086 <_ZN6MB85RC8moveDataEjjj+0x24>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d6082:	2401      	movs	r4, #1
   d6084:	e03f      	b.n	d6106 <_ZN6MB85RC8moveDataEjjj+0xa4>
   d6086:	2c1e      	cmp	r4, #30
   d6088:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d608a:	f8d8 3000 	ldr.w	r3, [r8]
   d608e:	bf28      	it	cs
   d6090:	271e      	movcs	r7, #30
			while(numBytes > 0) {
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
   d6092:	1bf6      	subs	r6, r6, r7
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d6094:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d6098:	aa02      	add	r2, sp, #8
   d609a:	463b      	mov	r3, r7
   d609c:	4631      	mov	r1, r6
   d609e:	4640      	mov	r0, r8
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;
   d60a0:	1bed      	subs	r5, r5, r7

				result = readData(framAddrFrom, buf, count);
   d60a2:	47c8      	blx	r9
				if (!result) {
   d60a4:	b908      	cbnz	r0, d60aa <_ZN6MB85RC8moveDataEjjj+0x48>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d60a6:	2400      	movs	r4, #0
   d60a8:	e02d      	b.n	d6106 <_ZN6MB85RC8moveDataEjjj+0xa4>

				result = readData(framAddrFrom, buf, count);
				if (!result) {
					break;
				}
				result = writeData(framAddrTo, buf, count);
   d60aa:	f8d8 3000 	ldr.w	r3, [r8]
   d60ae:	aa02      	add	r2, sp, #8
   d60b0:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d60b4:	4629      	mov	r1, r5
   d60b6:	463b      	mov	r3, r7
   d60b8:	4640      	mov	r0, r8
   d60ba:	47c8      	blx	r9
				if (!result) {
   d60bc:	2800      	cmp	r0, #0
   d60be:	d0f2      	beq.n	d60a6 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}

				numBytes -= count;
   d60c0:	1be4      	subs	r4, r4, r7
	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
			framAddrTo += numBytes;
			while(numBytes > 0) {
   d60c2:	e7dd      	b.n	d6080 <_ZN6MB85RC8moveDataEjjj+0x1e>
				numBytes -= count;
			}

		}
		else
		if (framAddrFrom > framAddrTo) {
   d60c4:	d9dd      	bls.n	d6082 <_ZN6MB85RC8moveDataEjjj+0x20>
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
   d60c6:	2c00      	cmp	r4, #0
   d60c8:	d0db      	beq.n	d6082 <_ZN6MB85RC8moveDataEjjj+0x20>
   d60ca:	2c1e      	cmp	r4, #30
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				result = readData(framAddrFrom, buf, count);
   d60cc:	f8d8 3000 	ldr.w	r3, [r8]
   d60d0:	4627      	mov	r7, r4
   d60d2:	bf28      	it	cs
   d60d4:	271e      	movcs	r7, #30
   d60d6:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d60da:	aa02      	add	r2, sp, #8
   d60dc:	463b      	mov	r3, r7
   d60de:	4631      	mov	r1, r6
   d60e0:	4640      	mov	r0, r8
   d60e2:	47c8      	blx	r9
				if (!result) {
   d60e4:	2800      	cmp	r0, #0
   d60e6:	d0de      	beq.n	d60a6 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				result = writeData(framAddrTo, buf, count);
   d60e8:	f8d8 3000 	ldr.w	r3, [r8]
   d60ec:	aa02      	add	r2, sp, #8
   d60ee:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d60f2:	4629      	mov	r1, r5
   d60f4:	463b      	mov	r3, r7
   d60f6:	4640      	mov	r0, r8
   d60f8:	47c8      	blx	r9
				if (!result) {
   d60fa:	2800      	cmp	r0, #0
   d60fc:	d0d3      	beq.n	d60a6 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				framAddrFrom += count;
   d60fe:	443e      	add	r6, r7
				framAddrTo += count;
   d6100:	443d      	add	r5, r7
				numBytes -= count;
   d6102:	1be4      	subs	r4, r4, r7

		}
		else
		if (framAddrFrom > framAddrTo) {
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
   d6104:	e7df      	b.n	d60c6 <_ZN6MB85RC8moveDataEjjj+0x64>
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d6106:	a801      	add	r0, sp, #4
   d6108:	f7ff fed9 	bl	d5ebe <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d610c:	4620      	mov	r0, r4
   d610e:	b00b      	add	sp, #44	; 0x2c
   d6110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6114 <_GLOBAL__sub_I__ZN6MB85RCC2ER7TwoWireji>:
   d6114:	f000 bd00 	b.w	d6b18 <HAL_Pin_Map>

000d6118 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d6118:	2040      	movs	r0, #64	; 0x40
   d611a:	4770      	bx	lr

000d611c <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d611c:	2000      	movs	r0, #0
   d611e:	4770      	bx	lr

000d6120 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d6120:	2080      	movs	r0, #128	; 0x80
   d6122:	4770      	bx	lr

000d6124 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d6124:	20ff      	movs	r0, #255	; 0xff
   d6126:	4770      	bx	lr

000d6128 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d6128:	4770      	bx	lr

000d612a <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d612a:	4770      	bx	lr

000d612c <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d612c:	4770      	bx	lr

000d612e <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d612e:	4770      	bx	lr

000d6130 <_ZN12MCP79410TimeD0Ev>:

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d6130:	b510      	push	{r4, lr}

}
   d6132:	2114      	movs	r1, #20

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d6134:	4604      	mov	r4, r0

}
   d6136:	f002 fe90 	bl	d8e5a <_ZdlPvj>
   d613a:	4620      	mov	r0, r4
   d613c:	bd10      	pop	{r4, pc}

000d613e <_ZN12MCP79410SRAMD0Ev>:

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d613e:	b510      	push	{r4, lr}

}
   d6140:	2108      	movs	r1, #8

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d6142:	4604      	mov	r4, r0

}
   d6144:	f002 fe89 	bl	d8e5a <_ZdlPvj>
   d6148:	4620      	mov	r0, r4
   d614a:	bd10      	pop	{r4, pc}

000d614c <_ZN14MCP79410EEPROMD0Ev>:
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d614c:	b510      	push	{r4, lr}

}
   d614e:	2108      	movs	r1, #8
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d6150:	4604      	mov	r4, r0

}
   d6152:	f002 fe82 	bl	d8e5a <_ZdlPvj>
   d6156:	4620      	mov	r0, r4
   d6158:	bd10      	pop	{r4, pc}

000d615a <_ZN8MCP79410D0Ev>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d615a:	b510      	push	{r4, lr}

}
   d615c:	211c      	movs	r1, #28
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d615e:	4604      	mov	r4, r0

}
   d6160:	f002 fe7b 	bl	d8e5a <_ZdlPvj>
   d6164:	4620      	mov	r0, r4
   d6166:	bd10      	pop	{r4, pc}

000d6168 <_ZN18MCP79410MemoryBase5eraseEv>:

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d6168:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d616c:	6803      	ldr	r3, [r0, #0]
   d616e:	68db      	ldr	r3, [r3, #12]

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d6170:	4605      	mov	r5, r0
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d6172:	4798      	blx	r3
   d6174:	2210      	movs	r2, #16
   d6176:	4601      	mov	r1, r0
   d6178:	4668      	mov	r0, sp
   d617a:	f003 fed4 	bl	d9f26 <memset>

	size_t len = length();
   d617e:	682b      	ldr	r3, [r5, #0]
   d6180:	4628      	mov	r0, r5
   d6182:	689b      	ldr	r3, [r3, #8]
   d6184:	4798      	blx	r3
	size_t offset = 0;
   d6186:	2400      	movs	r4, #0
bool MCP79410MemoryBase::erase() {
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
   d6188:	4607      	mov	r7, r0
MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
	bool bResult = false;
   d618a:	4620      	mov	r0, r4
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d618c:	42bc      	cmp	r4, r7
   d618e:	d20e      	bcs.n	d61ae <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		size_t count = sizeof(buf);
		if (count > (len - offset)) {
   d6190:	1b3e      	subs	r6, r7, r4

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d6192:	2e10      	cmp	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d6194:	682b      	ldr	r3, [r5, #0]

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d6196:	bf28      	it	cs
   d6198:	2610      	movcs	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d619a:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d619e:	466a      	mov	r2, sp
   d61a0:	4633      	mov	r3, r6
   d61a2:	4621      	mov	r1, r4
   d61a4:	4628      	mov	r0, r5
   d61a6:	47c0      	blx	r8
		if (!bResult) {
   d61a8:	b108      	cbz	r0, d61ae <_ZN18MCP79410MemoryBase5eraseEv+0x46>
			break;
		}

		offset += count;
   d61aa:	4434      	add	r4, r6
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d61ac:	e7ee      	b.n	d618c <_ZN18MCP79410MemoryBase5eraseEv+0x24>

		offset += count;
	}

	return bResult;
}
   d61ae:	b004      	add	sp, #16
   d61b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d61b4 <_ZN12MCP79410Time5clearEv>:

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d61b4:	2300      	movs	r3, #0
	rawMonth = 1;
   d61b6:	2201      	movs	r2, #1

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d61b8:	7283      	strb	r3, [r0, #10]
	rawMonth = 1;
   d61ba:	72c2      	strb	r2, [r0, #11]
	rawDayOfMonth = 1;
   d61bc:	7302      	strb	r2, [r0, #12]
	rawDayOfWeek = 1;
   d61be:	7342      	strb	r2, [r0, #13]
	rawHour = 0;
   d61c0:	7383      	strb	r3, [r0, #14]
	rawMinute = 0;
   d61c2:	73c3      	strb	r3, [r0, #15]
	rawSecond = 0;
   d61c4:	7403      	strb	r3, [r0, #16]
	alarmMode = 0;
   d61c6:	7443      	strb	r3, [r0, #17]
   d61c8:	4770      	bx	lr
	...

000d61cc <_ZN12MCP79410TimeC1Ev>:
	return (stat == 0);
}



MCP79410Time::MCP79410Time() {
   d61cc:	2201      	movs	r2, #1
   d61ce:	b508      	push	{r3, lr}
   d61d0:	7142      	strb	r2, [r0, #5]
   d61d2:	2202      	movs	r2, #2
   d61d4:	7182      	strb	r2, [r0, #6]
   d61d6:	2203      	movs	r2, #3
   d61d8:	4b06      	ldr	r3, [pc, #24]	; (d61f4 <_ZN12MCP79410TimeC1Ev+0x28>)
   d61da:	71c2      	strb	r2, [r0, #7]
   d61dc:	2204      	movs	r2, #4
   d61de:	6003      	str	r3, [r0, #0]
   d61e0:	7202      	strb	r2, [r0, #8]
   d61e2:	2300      	movs	r3, #0
   d61e4:	2207      	movs	r2, #7
   d61e6:	7103      	strb	r3, [r0, #4]
   d61e8:	7242      	strb	r2, [r0, #9]
   d61ea:	7443      	strb	r3, [r0, #17]
	clear();
   d61ec:	f7ff ffe2 	bl	d61b4 <_ZN12MCP79410Time5clearEv>
}
   d61f0:	bd08      	pop	{r3, pc}
   d61f2:	bf00      	nop
   d61f4:	000dd7f0 	.word	0x000dd7f0

000d61f8 <_ZN12MCP79410Time8bcdToIntEh>:
	return String(buf);
}

// [static]
int MCP79410Time::bcdToInt(uint8_t value) {
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d61f8:	0903      	lsrs	r3, r0, #4
}
   d61fa:	220a      	movs	r2, #10
   d61fc:	f000 000f 	and.w	r0, r0, #15
   d6200:	fb02 0003 	mla	r0, r2, r3, r0
   d6204:	4770      	bx	lr

000d6206 <_ZNK12MCP79410Time7getYearEv>:
	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
}

int MCP79410Time::getYear() const {
   d6206:	b508      	push	{r3, lr}
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
   d6208:	7a80      	ldrb	r0, [r0, #10]
   d620a:	f7ff fff5 	bl	d61f8 <_ZN12MCP79410Time8bcdToIntEh>
}
   d620e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d6212:	bd08      	pop	{r3, pc}

000d6214 <_ZNK12MCP79410Time8getMonthEv>:
void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
}

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
   d6214:	7ac0      	ldrb	r0, [r0, #11]
   d6216:	f000 001f 	and.w	r0, r0, #31
   d621a:	f7ff bfed 	b.w	d61f8 <_ZN12MCP79410Time8bcdToIntEh>

000d621e <_ZNK12MCP79410Time13getDayOfMonthEv>:
	rawMonth = intToBcd(value);
}


int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
   d621e:	7b00      	ldrb	r0, [r0, #12]
   d6220:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d6224:	f7ff bfe8 	b.w	d61f8 <_ZN12MCP79410Time8bcdToIntEh>

000d6228 <_ZNK12MCP79410Time7getHourEv>:
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
}


int MCP79410Time::getHour() const {
   d6228:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d622a:	7b81      	ldrb	r1, [r0, #14]
   d622c:	064a      	lsls	r2, r1, #25
   d622e:	d50d      	bpl.n	d624c <_ZNK12MCP79410Time7getHourEv+0x24>
		// Bit 6 = 1 (12 hour format)
		int hour12 = bcdToInt(rawHour & 0x1f);
   d6230:	f001 001f 	and.w	r0, r1, #31
   d6234:	f7ff ffe0 	bl	d61f8 <_ZN12MCP79410Time8bcdToIntEh>

		if (rawHour & 0x20) {
   d6238:	068b      	lsls	r3, r1, #26
   d623a:	d503      	bpl.n	d6244 <_ZNK12MCP79410Time7getHourEv+0x1c>
			// Bit 5 = 1 (PM)
			if (hour12 == 12) {
   d623c:	280c      	cmp	r0, #12
   d623e:	d00b      	beq.n	d6258 <_ZNK12MCP79410Time7getHourEv+0x30>
				// 12 PM = 12
				return 12;
			}
			else {
				return hour12 + 12;
   d6240:	300c      	adds	r0, #12
   d6242:	bd08      	pop	{r3, pc}
			}
		}
		else {
			// Bit 5 = 0 (AM)
			if (hour12 == 12) {
   d6244:	280c      	cmp	r0, #12
   d6246:	bf08      	it	eq
   d6248:	2000      	moveq	r0, #0
   d624a:	bd08      	pop	{r3, pc}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d624c:	f001 003f 	and.w	r0, r1, #63	; 0x3f
	}
}
   d6250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d6254:	f7ff bfd0 	b.w	d61f8 <_ZN12MCP79410Time8bcdToIntEh>
	}
}
   d6258:	bd08      	pop	{r3, pc}

000d625a <_ZNK12MCP79410Time9getMinuteEv>:
}



int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
   d625a:	7bc0      	ldrb	r0, [r0, #15]
   d625c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d6260:	f7ff bfca 	b.w	d61f8 <_ZN12MCP79410Time8bcdToIntEh>

000d6264 <_ZNK12MCP79410Time9getSecondEv>:
}


int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
   d6264:	7c00      	ldrb	r0, [r0, #16]
   d6266:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d626a:	f7ff bfc5 	b.w	d61f8 <_ZN12MCP79410Time8bcdToIntEh>

000d626e <_ZNK12MCP79410Time10toUnixTimeEv>:
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d626e:	b510      	push	{r4, lr}
   d6270:	b08a      	sub	sp, #40	; 0x28
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d6272:	2224      	movs	r2, #36	; 0x24
   d6274:	2100      	movs	r1, #0
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d6276:	4604      	mov	r4, r0
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d6278:	a801      	add	r0, sp, #4
   d627a:	f003 fe54 	bl	d9f26 <memset>

	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d627e:	4620      	mov	r0, r4
   d6280:	f7ff ffc1 	bl	d6206 <_ZNK12MCP79410Time7getYearEv>
   d6284:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d6288:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d628a:	4620      	mov	r0, r4
   d628c:	f7ff ffc2 	bl	d6214 <_ZNK12MCP79410Time8getMonthEv>
   d6290:	3801      	subs	r0, #1
   d6292:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d6294:	4620      	mov	r0, r4
   d6296:	f7ff ffc2 	bl	d621e <_ZNK12MCP79410Time13getDayOfMonthEv>
   d629a:	9004      	str	r0, [sp, #16]

	tm.tm_hour = getHour();
   d629c:	4620      	mov	r0, r4
   d629e:	f7ff ffc3 	bl	d6228 <_ZNK12MCP79410Time7getHourEv>
   d62a2:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d62a4:	4620      	mov	r0, r4
   d62a6:	f7ff ffd8 	bl	d625a <_ZNK12MCP79410Time9getMinuteEv>
   d62aa:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d62ac:	4620      	mov	r0, r4
   d62ae:	f7ff ffd9 	bl	d6264 <_ZNK12MCP79410Time9getSecondEv>
   d62b2:	9001      	str	r0, [sp, #4]

	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
   d62b4:	a801      	add	r0, sp, #4
   d62b6:	f003 ff1b 	bl	da0f0 <mktime>
}
   d62ba:	b00a      	add	sp, #40	; 0x28
   d62bc:	bd10      	pop	{r4, pc}

000d62be <_ZN12MCP79410Time8intToBcdEi>:
uint8_t MCP79410Time::intToBcd(int value) {
	uint8_t result;

	result = (uint8_t) (((value / 10) % 10) << 4);

	result |= (uint8_t) (value % 10);
   d62be:	220a      	movs	r2, #10
   d62c0:	fb90 f3f2 	sdiv	r3, r0, r2
   d62c4:	fb93 f1f2 	sdiv	r1, r3, r2
   d62c8:	fb02 3111 	mls	r1, r2, r1, r3
   d62cc:	fb02 0313 	mls	r3, r2, r3, r0
   d62d0:	ea43 1001 	orr.w	r0, r3, r1, lsl #4

	return result;
}
   d62d4:	b2c0      	uxtb	r0, r0
   d62d6:	4770      	bx	lr

000d62d8 <_ZN12MCP79410Time7setYearEi>:
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
   d62d8:	2364      	movs	r3, #100	; 0x64
int MCP79410Time::getYear() const {
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
   d62da:	b510      	push	{r4, lr}
   d62dc:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d62de:	fb91 f0f3 	sdiv	r0, r1, r3
   d62e2:	fb00 1013 	mls	r0, r0, r3, r1
   d62e6:	f7ff ffea 	bl	d62be <_ZN12MCP79410Time8intToBcdEi>
   d62ea:	72a0      	strb	r0, [r4, #10]
   d62ec:	bd10      	pop	{r4, pc}

000d62ee <_ZN12MCP79410Time8setMonthEi>:

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
}

void MCP79410Time::setMonth(int value) {
   d62ee:	b510      	push	{r4, lr}
   d62f0:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d62f2:	4608      	mov	r0, r1
   d62f4:	f7ff ffe3 	bl	d62be <_ZN12MCP79410Time8intToBcdEi>
   d62f8:	72e0      	strb	r0, [r4, #11]
   d62fa:	bd10      	pop	{r4, pc}

000d62fc <_ZN12MCP79410Time13setDayOfMonthEi>:

int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
}

void MCP79410Time::setDayOfMonth(int value) {
   d62fc:	b510      	push	{r4, lr}
   d62fe:	4604      	mov	r4, r0
	rawDayOfMonth &= ~0x3f;
	rawDayOfMonth |= intToBcd(value);
   d6300:	4608      	mov	r0, r1
   d6302:	f7ff ffdc 	bl	d62be <_ZN12MCP79410Time8intToBcdEi>
   d6306:	7b23      	ldrb	r3, [r4, #12]
   d6308:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d630c:	4318      	orrs	r0, r3
   d630e:	7320      	strb	r0, [r4, #12]
   d6310:	bd10      	pop	{r4, pc}

000d6312 <_ZN12MCP79410Time12setDayOfWeekEi>:
	// rawDayOfWeek has the day of week 1 - 7 in the low bits. However, it does not enforce a particular day of week scheme;
	// it just keeps rolling it as time increments.
	return bcdToInt(rawDayOfWeek & 0x7) - 1;
}

void MCP79410Time::setDayOfWeek(int value) {
   d6312:	b510      	push	{r4, lr}
   d6314:	4604      	mov	r4, r0
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
   d6316:	1c48      	adds	r0, r1, #1
   d6318:	f7ff ffd1 	bl	d62be <_ZN12MCP79410Time8intToBcdEi>
   d631c:	7b63      	ldrb	r3, [r4, #13]
   d631e:	f023 0307 	bic.w	r3, r3, #7
   d6322:	4318      	orrs	r0, r3
   d6324:	7360      	strb	r0, [r4, #13]
   d6326:	bd10      	pop	{r4, pc}

000d6328 <_ZN12MCP79410Time7setHourEi>:
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
	}
}

void MCP79410Time::setHour(int value) {
   d6328:	b510      	push	{r4, lr}
   d632a:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d632c:	4608      	mov	r0, r1
   d632e:	f7ff ffc6 	bl	d62be <_ZN12MCP79410Time8intToBcdEi>
   d6332:	73a0      	strb	r0, [r4, #14]
   d6334:	bd10      	pop	{r4, pc}

000d6336 <_ZN12MCP79410Time9setMinuteEi>:

int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
}

void MCP79410Time::setMinute(int value) {
   d6336:	b510      	push	{r4, lr}
   d6338:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d633a:	4608      	mov	r0, r1
   d633c:	f7ff ffbf 	bl	d62be <_ZN12MCP79410Time8intToBcdEi>
   d6340:	73e0      	strb	r0, [r4, #15]
   d6342:	bd10      	pop	{r4, pc}

000d6344 <_ZN12MCP79410Time9setSecondEi>:
int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
}

void MCP79410Time::setSecond(int value) {
   d6344:	b510      	push	{r4, lr}
   d6346:	4604      	mov	r4, r0
	rawSecond &= ~0x7f;
	rawSecond |= intToBcd(value);
   d6348:	4608      	mov	r0, r1
   d634a:	f7ff ffb8 	bl	d62be <_ZN12MCP79410Time8intToBcdEi>
   d634e:	7c23      	ldrb	r3, [r4, #16]
   d6350:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d6354:	4318      	orrs	r0, r3
   d6356:	7420      	strb	r0, [r4, #16]
   d6358:	bd10      	pop	{r4, pc}

000d635a <_ZN12MCP79410Time12fromUnixTimeEl>:
	rawSecond = 0;
	alarmMode = 0;
}


void MCP79410Time::fromUnixTime(time_t time) {
   d635a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d635c:	4604      	mov	r4, r0
   d635e:	a802      	add	r0, sp, #8
   d6360:	f840 1d04 	str.w	r1, [r0, #-4]!
	struct tm *tm = gmtime(&time);
   d6364:	f003 fc2e 	bl	d9bc4 <gmtime>
   d6368:	4605      	mov	r5, r0

	// Technically tm_year is years since 1900 but we can't represent dates not in 2000 - 2099
	setYear(tm->tm_year);
   d636a:	6941      	ldr	r1, [r0, #20]
   d636c:	4620      	mov	r0, r4
   d636e:	f7ff ffb3 	bl	d62d8 <_ZN12MCP79410Time7setYearEi>

	// 0 <= tm_mon <= 11! We use the more conventional 1-12 for getMonth/setMonth
	setMonth(tm->tm_mon + 1);
   d6372:	6929      	ldr	r1, [r5, #16]
   d6374:	4620      	mov	r0, r4
   d6376:	3101      	adds	r1, #1
   d6378:	f7ff ffb9 	bl	d62ee <_ZN12MCP79410Time8setMonthEi>

	setDayOfMonth(tm->tm_mday);
   d637c:	68e9      	ldr	r1, [r5, #12]
   d637e:	4620      	mov	r0, r4
   d6380:	f7ff ffbc 	bl	d62fc <_ZN12MCP79410Time13setDayOfMonthEi>

	setDayOfWeek(tm->tm_wday);
   d6384:	69a9      	ldr	r1, [r5, #24]
   d6386:	4620      	mov	r0, r4
   d6388:	f7ff ffc3 	bl	d6312 <_ZN12MCP79410Time12setDayOfWeekEi>


	// days since Sunday – [0, 6]

	setHour(tm->tm_hour); // tm_hour is 0-23
   d638c:	68a9      	ldr	r1, [r5, #8]
   d638e:	4620      	mov	r0, r4
   d6390:	f7ff ffca 	bl	d6328 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d6394:	6869      	ldr	r1, [r5, #4]
   d6396:	4620      	mov	r0, r4
   d6398:	f7ff ffcd 	bl	d6336 <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d639c:	6829      	ldr	r1, [r5, #0]
   d639e:	293b      	cmp	r1, #59	; 0x3b
   d63a0:	bfa8      	it	ge
   d63a2:	213b      	movge	r1, #59	; 0x3b
   d63a4:	4620      	mov	r0, r4
   d63a6:	f7ff ffcd 	bl	d6344 <_ZN12MCP79410Time9setSecondEi>
}
   d63aa:	b003      	add	sp, #12
   d63ac:	bd30      	pop	{r4, r5, pc}

000d63ae <_ZN12MCP79410Time12setAlarmTimeEl>:
	clear();
	alarmMode = ALARM_DAY_OF_MONTH;
	setDayOfMonth(dayOfMonth);
}

void MCP79410Time::setAlarmTime(time_t unixTime) {
   d63ae:	b510      	push	{r4, lr}
   d63b0:	4604      	mov	r4, r0
	fromUnixTime(unixTime);
   d63b2:	f7ff ffd2 	bl	d635a <_ZN12MCP79410Time12fromUnixTimeEl>
	alarmMode = ALARM_MONTH_DAY_DOW_HMS;
   d63b6:	7a63      	ldrb	r3, [r4, #9]
   d63b8:	7463      	strb	r3, [r4, #17]
   d63ba:	bd10      	pop	{r4, pc}

000d63bc <_ZN8MCP79410C1ER7TwoWire>:

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d63bc:	4a08      	ldr	r2, [pc, #32]	; (d63e0 <_ZN8MCP79410C1ER7TwoWire+0x24>)
   d63be:	6002      	str	r2, [r0, #0]
   d63c0:	2200      	movs	r2, #0
   d63c2:	7202      	strb	r2, [r0, #8]
   d63c4:	7242      	strb	r2, [r0, #9]
   d63c6:	2201      	movs	r2, #1
   d63c8:	7282      	strb	r2, [r0, #10]
   d63ca:	4603      	mov	r3, r0
   d63cc:	2203      	movs	r2, #3
   d63ce:	72c2      	strb	r2, [r0, #11]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d63d0:	4a04      	ldr	r2, [pc, #16]	; (d63e4 <_ZN8MCP79410C1ER7TwoWire+0x28>)

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d63d2:	6041      	str	r1, [r0, #4]
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d63d4:	6118      	str	r0, [r3, #16]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d63d6:	60c2      	str	r2, [r0, #12]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d63d8:	4a03      	ldr	r2, [pc, #12]	; (d63e8 <_ZN8MCP79410C1ER7TwoWire+0x2c>)
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d63da:	6198      	str	r0, [r3, #24]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d63dc:	6142      	str	r2, [r0, #20]
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}
   d63de:	4770      	bx	lr
   d63e0:	000dd800 	.word	0x000dd800
   d63e4:	000dd6d0 	.word	0x000dd6d0
   d63e8:	000dd6ac 	.word	0x000dd6ac

000d63ec <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d63ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d63f0:	4605      	mov	r5, r0
   d63f2:	460f      	mov	r7, r1
   d63f4:	4691      	mov	r9, r2
   d63f6:	469a      	mov	sl, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d63f8:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d63fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d63fc:	429c      	cmp	r4, r3
   d63fe:	d230      	bcs.n	d6462 <_ZNK8MCP7941010deviceReadEhhPhj+0x76>
		wire.beginTransmission(i2cAddr);
   d6400:	4639      	mov	r1, r7
   d6402:	6868      	ldr	r0, [r5, #4]
   d6404:	f001 fb8c 	bl	d7b20 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6408:	eb09 0104 	add.w	r1, r9, r4
   d640c:	6868      	ldr	r0, [r5, #4]
   d640e:	f7ff fd2d 	bl	d5e6c <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d6412:	2100      	movs	r1, #0
   d6414:	6868      	ldr	r0, [r5, #4]
   d6416:	f001 fb8a 	bl	d7b2e <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d641a:	4606      	mov	r6, r0
   d641c:	b9d8      	cbnz	r0, d6456 <_ZNK8MCP7941010deviceReadEhhPhj+0x6a>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d641e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d6420:	6868      	ldr	r0, [r5, #4]
		wire.beginTransmission(i2cAddr);
		wire.write(addr + offset);
		stat = wire.endTransmission(false);
		if (stat == 0) {
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d6422:	1b1a      	subs	r2, r3, r4
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d6424:	2a20      	cmp	r2, #32
   d6426:	f04f 0301 	mov.w	r3, #1
   d642a:	bf28      	it	cs
   d642c:	2220      	movcs	r2, #32
   d642e:	4639      	mov	r1, r7
   d6430:	f001 fb64 	bl	d7afc <_ZN7TwoWire11requestFromEhjh>
   d6434:	eb0a 0804 	add.w	r8, sl, r4
   d6438:	4683      	mov	fp, r0
   d643a:	4646      	mov	r6, r8
			for(size_t ii = 0; ii < count; ii++) {
   d643c:	ebc8 0306 	rsb	r3, r8, r6
   d6440:	459b      	cmp	fp, r3
   d6442:	d906      	bls.n	d6452 <_ZNK8MCP7941010deviceReadEhhPhj+0x66>
				buf[ii + offset] = wire.read();
   d6444:	6868      	ldr	r0, [r5, #4]
   d6446:	6803      	ldr	r3, [r0, #0]
   d6448:	695b      	ldr	r3, [r3, #20]
   d644a:	4798      	blx	r3
   d644c:	f806 0b01 	strb.w	r0, [r6], #1
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
			for(size_t ii = 0; ii < count; ii++) {
   d6450:	e7f4      	b.n	d643c <_ZNK8MCP7941010deviceReadEhhPhj+0x50>
				buf[ii + offset] = wire.read();
			}
			offset += count;
   d6452:	445c      	add	r4, fp
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d6454:	e7d1      	b.n	d63fa <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
				buf[ii + offset] = wire.read();
			}
			offset += count;
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d6456:	4602      	mov	r2, r0
   d6458:	4904      	ldr	r1, [pc, #16]	; (d646c <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d645a:	4805      	ldr	r0, [pc, #20]	; (d6470 <_ZNK8MCP7941010deviceReadEhhPhj+0x84>)
   d645c:	f7ff fd0a 	bl	d5e74 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d6460:	e000      	b.n	d6464 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
   d6462:	2600      	movs	r6, #0
		}
	}
	return stat;
}
   d6464:	4630      	mov	r0, r6
   d6466:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d646a:	bf00      	nop
   d646c:	000dd74a 	.word	0x000dd74a
   d6470:	2003e1a0 	.word	0x2003e1a0

000d6474 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
	buf[6] = time.rawYear;

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
}

uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d6476:	2301      	movs	r3, #1
   d6478:	9300      	str	r3, [sp, #0]
   d647a:	460a      	mov	r2, r1
   d647c:	ab03      	add	r3, sp, #12
   d647e:	216f      	movs	r1, #111	; 0x6f
   d6480:	f7ff ffb4 	bl	d63ec <_ZNK8MCP7941010deviceReadEhhPhj>
   d6484:	b910      	cbnz	r0, d648c <_ZNK8MCP7941022deviceReadRegisterByteEh+0x18>
		// log.trace("deviceReadRegisterByte addr=%02x value=%02x", addr, buf[0]);
		return buf[0];
   d6486:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d648a:	e000      	b.n	d648e <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1a>
	}
	else {
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
   d648c:	2000      	movs	r0, #0
	}
}
   d648e:	b005      	add	sp, #20
   d6490:	f85d fb04 	ldr.w	pc, [sp], #4

000d6494 <_ZNK8MCP7941020getOscillatorRunningEv>:

bool MCP79410::getPowerFail() const {
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_PWRFAIL) != 0;
}

bool MCP79410::getOscillatorRunning() const {
   d6494:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d6496:	2103      	movs	r1, #3
   d6498:	f7ff ffec 	bl	d6474 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d649c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d64a0:	bd08      	pop	{r3, pc}

000d64a2 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>:
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d64a2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d64a4:	461e      	mov	r6, r3
   d64a6:	2b00      	cmp	r3, #0
   d64a8:	bf0c      	ite	eq
   d64aa:	2307      	moveq	r3, #7
   d64ac:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d64ae:	9300      	str	r3, [sp, #0]
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d64b0:	4614      	mov	r4, r2
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d64b2:	ab02      	add	r3, sp, #8
   d64b4:	460a      	mov	r2, r1
   d64b6:	216f      	movs	r1, #111	; 0x6f
   d64b8:	f7ff ff98 	bl	d63ec <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d64bc:	4605      	mov	r5, r0
   d64be:	b9d8      	cbnz	r0, d64f8 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			time.rawSecond = buf[0];
   d64c0:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d64c4:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d64c6:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d64ca:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d64cc:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d64d0:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d64d2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d64d6:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d64d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d64dc:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d64de:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d64e2:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d64e4:	b91e      	cbnz	r6, d64ee <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x4c>
				time.rawYear = buf[6];
   d64e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d64ea:	72a3      	strb	r3, [r4, #10]
   d64ec:	e004      	b.n	d64f8 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			}
			else {
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d64ee:	f002 f9eb 	bl	d88c8 <_ZN9TimeClass4yearEv>
   d64f2:	f7ff fee4 	bl	d62be <_ZN12MCP79410Time8intToBcdEi>
   d64f6:	72a0      	strb	r0, [r4, #10]
			time.rawYear = MCP79410Time::intToBcd(Time.year());
		}
	}

	return stat;
}
   d64f8:	4628      	mov	r0, r5
   d64fa:	b004      	add	sp, #16
   d64fc:	bd70      	pop	{r4, r5, r6, pc}

000d64fe <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
	else {
		return 0;
	}
}

bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d64fe:	b538      	push	{r3, r4, r5, lr}
   d6500:	2300      	movs	r3, #0
   d6502:	460c      	mov	r4, r1
   d6504:	460a      	mov	r2, r1
   d6506:	4619      	mov	r1, r3
   d6508:	4605      	mov	r5, r0
   d650a:	f7ff ffca 	bl	d64a2 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
	if (stat == 0) {
   d650e:	b928      	cbnz	r0, d651c <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6510:	7aa3      	ldrb	r3, [r4, #10]
   d6512:	b11b      	cbz	r3, d651c <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
   d6514:	4628      	mov	r0, r5
   d6516:	f7ff ffbd 	bl	d6494 <_ZNK8MCP7941020getOscillatorRunningEv>
   d651a:	b900      	cbnz	r0, d651e <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
			return true;
		}
		else {
			return false;
   d651c:	2000      	movs	r0, #0
		}
	}
	else {
		return false;
	}
}
   d651e:	bd38      	pop	{r3, r4, r5, pc}

000d6520 <_ZNK8MCP7941010getRTCTimeEv>:

bool MCP79410::isRTCValid() const {
	return getRTCTime() != 0;
}

time_t MCP79410::getRTCTime() const {
   d6520:	b510      	push	{r4, lr}
   d6522:	b086      	sub	sp, #24
   d6524:	4604      	mov	r4, r0
	MCP79410Time time;
   d6526:	a801      	add	r0, sp, #4
   d6528:	f7ff fe50 	bl	d61cc <_ZN12MCP79410TimeC1Ev>

	bool bResult = getRTCTime(time);
   d652c:	a901      	add	r1, sp, #4
   d652e:	4620      	mov	r0, r4
   d6530:	f7ff ffe5 	bl	d64fe <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d6534:	b110      	cbz	r0, d653c <_ZNK8MCP7941010getRTCTimeEv+0x1c>
		return time.toUnixTime();
   d6536:	a801      	add	r0, sp, #4
   d6538:	f7ff fe99 	bl	d626e <_ZNK12MCP79410Time10toUnixTimeEv>
	}
	else {
		return 0;
	}
}
   d653c:	b006      	add	sp, #24
   d653e:	bd10      	pop	{r4, pc}

000d6540 <_ZN8MCP794105setupEv>:

MCP79410::~MCP79410() {

}

void MCP79410::setup() {
   d6540:	b530      	push	{r4, r5, lr}
   d6542:	4604      	mov	r4, r0
   d6544:	b085      	sub	sp, #20
	wire.begin();
   d6546:	6840      	ldr	r0, [r0, #4]
   d6548:	f001 fab6 	bl	d7ab8 <_ZN7TwoWire5beginEv>

	if (!Time.isValid()) {
   d654c:	f002 f968 	bl	d8820 <_ZN9TimeClass7isValidEv>
   d6550:	b9c0      	cbnz	r0, d6584 <_ZN8MCP794105setupEv+0x44>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d6552:	7ae3      	ldrb	r3, [r4, #11]
   d6554:	079b      	lsls	r3, r3, #30
   d6556:	d515      	bpl.n	d6584 <_ZN8MCP794105setupEv+0x44>
			time_t rtcTime = getRTCTime();
   d6558:	4620      	mov	r0, r4
   d655a:	f7ff ffe1 	bl	d6520 <_ZNK8MCP7941010getRTCTimeEv>
			if (rtcTime != 0) {
   d655e:	4605      	mov	r5, r0
   d6560:	b180      	cbz	r0, d6584 <_ZN8MCP794105setupEv+0x44>
				Time.setTime(rtcTime);
   d6562:	f002 f89d 	bl	d86a0 <_ZN9TimeClass7setTimeEl>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d6566:	4b09      	ldr	r3, [pc, #36]	; (d658c <_ZN8MCP794105setupEv+0x4c>)
   d6568:	4909      	ldr	r1, [pc, #36]	; (d6590 <_ZN8MCP794105setupEv+0x50>)
   d656a:	681b      	ldr	r3, [r3, #0]
   d656c:	462a      	mov	r2, r5
   d656e:	4668      	mov	r0, sp
   d6570:	f002 f924 	bl	d87bc <_ZN9TimeClass6formatElPKc>
   d6574:	4807      	ldr	r0, [pc, #28]	; (d6594 <_ZN8MCP794105setupEv+0x54>)
   d6576:	9a00      	ldr	r2, [sp, #0]
   d6578:	4907      	ldr	r1, [pc, #28]	; (d6598 <_ZN8MCP794105setupEv+0x58>)
   d657a:	f7ff fc7b 	bl	d5e74 <_ZNK5spark6Logger4infoEPKcz>
   d657e:	4668      	mov	r0, sp
   d6580:	f001 fe33 	bl	d81ea <_ZN6StringD1Ev>
			}
		}
	}

	setupDone = true;
   d6584:	2301      	movs	r3, #1
   d6586:	7223      	strb	r3, [r4, #8]
}
   d6588:	b005      	add	sp, #20
   d658a:	bd30      	pop	{r4, r5, pc}
   d658c:	2003df74 	.word	0x2003df74
   d6590:	2003e4a0 	.word	0x2003e4a0
   d6594:	2003e1a0 	.word	0x2003e1a0
   d6598:	000dd764 	.word	0x000dd764

000d659c <_ZN14MCP79410EEPROM8readDataEjPhj>:

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d659c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d65a0:	eb01 0803 	add.w	r8, r1, r3

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d65a4:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d65a6:	6803      	ldr	r3, [r0, #0]
   d65a8:	689b      	ldr	r3, [r3, #8]

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d65aa:	4604      	mov	r4, r0
   d65ac:	460d      	mov	r5, r1
   d65ae:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d65b0:	4798      	blx	r3
   d65b2:	4580      	cmp	r8, r0
   d65b4:	d80a      	bhi.n	d65cc <_ZN14MCP79410EEPROM8readDataEjPhj+0x30>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d65b6:	9600      	str	r6, [sp, #0]
   d65b8:	463b      	mov	r3, r7
   d65ba:	b2ea      	uxtb	r2, r5
   d65bc:	2157      	movs	r1, #87	; 0x57
   d65be:	6860      	ldr	r0, [r4, #4]
   d65c0:	f7ff ff14 	bl	d63ec <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d65c4:	fab0 f080 	clz	r0, r0
   d65c8:	0940      	lsrs	r0, r0, #5
   d65ca:	e000      	b.n	d65ce <_ZN14MCP79410EEPROM8readDataEjPhj+0x32>

bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d65cc:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}
   d65ce:	b002      	add	sp, #8
   d65d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d65d4 <_ZN12MCP79410SRAM8readDataEjPhj>:

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d65d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d65d8:	eb01 0803 	add.w	r8, r1, r3

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d65dc:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d65de:	6803      	ldr	r3, [r0, #0]
   d65e0:	689b      	ldr	r3, [r3, #8]

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d65e2:	4605      	mov	r5, r0
   d65e4:	460c      	mov	r4, r1
   d65e6:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d65e8:	4798      	blx	r3
   d65ea:	4580      	cmp	r8, r0
   d65ec:	d80c      	bhi.n	d6608 <_ZN12MCP79410SRAM8readDataEjPhj+0x34>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d65ee:	f104 0220 	add.w	r2, r4, #32
   d65f2:	9600      	str	r6, [sp, #0]
   d65f4:	463b      	mov	r3, r7
   d65f6:	b2d2      	uxtb	r2, r2
   d65f8:	216f      	movs	r1, #111	; 0x6f
   d65fa:	6868      	ldr	r0, [r5, #4]
   d65fc:	f7ff fef6 	bl	d63ec <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d6600:	fab0 f080 	clz	r0, r0
   d6604:	0940      	lsrs	r0, r0, #5
   d6606:	e000      	b.n	d660a <_ZN12MCP79410SRAM8readDataEjPhj+0x36>

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d6608:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d660a:	b002      	add	sp, #8
   d660c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6610 <_ZN8MCP7941011deviceWriteEhhPKhj>:
		}
	}
	return stat;
}

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6614:	4607      	mov	r7, r0
   d6616:	4689      	mov	r9, r1
   d6618:	4692      	mov	sl, r2
   d661a:	469b      	mov	fp, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d661c:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d661e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6620:	429c      	cmp	r4, r3
   d6622:	d228      	bcs.n	d6676 <_ZN8MCP7941011deviceWriteEhhPKhj+0x66>
		wire.beginTransmission(i2cAddr);
   d6624:	4649      	mov	r1, r9
   d6626:	6878      	ldr	r0, [r7, #4]
   d6628:	f001 fa7a 	bl	d7b20 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d662c:	eb0a 0104 	add.w	r1, sl, r4
   d6630:	6878      	ldr	r0, [r7, #4]
   d6632:	f7ff fc1b 	bl	d5e6c <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d6636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6638:	1b1e      	subs	r6, r3, r4
   d663a:	2e1f      	cmp	r6, #31
   d663c:	eb0b 0804 	add.w	r8, fp, r4
   d6640:	bf28      	it	cs
   d6642:	261f      	movcs	r6, #31
   d6644:	4645      	mov	r5, r8
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d6646:	6878      	ldr	r0, [r7, #4]
   d6648:	f815 1b01 	ldrb.w	r1, [r5], #1
   d664c:	6802      	ldr	r2, [r0, #0]
   d664e:	6892      	ldr	r2, [r2, #8]
   d6650:	4790      	blx	r2
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d6652:	ebc8 0205 	rsb	r2, r8, r5
   d6656:	42b2      	cmp	r2, r6
   d6658:	d3f5      	bcc.n	d6646 <_ZN8MCP7941011deviceWriteEhhPKhj+0x36>
			wire.write(buf[ii + offset]);
		}

		stat = wire.endTransmission(true);
   d665a:	2101      	movs	r1, #1
   d665c:	6878      	ldr	r0, [r7, #4]
   d665e:	f001 fa66 	bl	d7b2e <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d6662:	4605      	mov	r5, r0
   d6664:	b128      	cbz	r0, d6672 <_ZN8MCP7941011deviceWriteEhhPKhj+0x62>
			log.info("deviceWrite failed stat=%d", stat);
   d6666:	4602      	mov	r2, r0
   d6668:	4905      	ldr	r1, [pc, #20]	; (d6680 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d666a:	4806      	ldr	r0, [pc, #24]	; (d6684 <_ZN8MCP7941011deviceWriteEhhPKhj+0x74>)
   d666c:	f7ff fc02 	bl	d5e74 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d6670:	e002      	b.n	d6678 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		}

		offset += count;
   d6672:	4434      	add	r4, r6
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d6674:	e7d3      	b.n	d661e <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d6676:	2500      	movs	r5, #0

		offset += count;
	}

	return stat;
}
   d6678:	4628      	mov	r0, r5
   d667a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d667e:	bf00      	nop
   d6680:	000dd779 	.word	0x000dd779
   d6684:	2003e1a0 	.word	0x2003e1a0

000d6688 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
	}

	return stat;
}

int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d6688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[7];

	buf[0] = time.rawSecond;
   d668a:	7c13      	ldrb	r3, [r2, #16]
   d668c:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d6690:	7bd3      	ldrb	r3, [r2, #15]
   d6692:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d6696:	7b93      	ldrb	r3, [r2, #14]
   d6698:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d669c:	7b53      	ldrb	r3, [r2, #13]
   d669e:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d66a2:	7b13      	ldrb	r3, [r2, #12]
   d66a4:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d66a8:	7ad3      	ldrb	r3, [r2, #11]
   d66aa:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d66ae:	7a93      	ldrb	r3, [r2, #10]
   d66b0:	f88d 300e 	strb.w	r3, [sp, #14]

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d66b4:	2307      	movs	r3, #7
   d66b6:	9300      	str	r3, [sp, #0]
   d66b8:	460a      	mov	r2, r1
   d66ba:	ab02      	add	r3, sp, #8
   d66bc:	216f      	movs	r1, #111	; 0x6f
   d66be:	f7ff ffa7 	bl	d6610 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d66c2:	b005      	add	sp, #20
   d66c4:	f85d fb04 	ldr.w	pc, [sp], #4

000d66c8 <_ZN8MCP7941010setRTCTimeEl>:
		log.info("cloud time not valid");
	}
	return bResult;
}

bool MCP79410::setRTCTime(time_t unixTime) {
   d66c8:	b510      	push	{r4, lr}
   d66ca:	b086      	sub	sp, #24
   d66cc:	4604      	mov	r4, r0
	MCP79410Time time;
   d66ce:	a801      	add	r0, sp, #4
   d66d0:	f7ff fd7c 	bl	d61cc <_ZN12MCP79410TimeC1Ev>

	time.fromUnixTime(unixTime);
   d66d4:	a801      	add	r0, sp, #4
   d66d6:	f7ff fe40 	bl	d635a <_ZN12MCP79410Time12fromUnixTimeEl>

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d66da:	f89d 3014 	ldrb.w	r3, [sp, #20]

	// Default is to enable the battery
	if (batteryEnable) {
   d66de:	7aa2      	ldrb	r2, [r4, #10]
	MCP79410Time time;

	time.fromUnixTime(unixTime);

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d66e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d66e4:	f88d 3014 	strb.w	r3, [sp, #20]
   d66e8:	f89d 3011 	ldrb.w	r3, [sp, #17]

	// Default is to enable the battery
	if (batteryEnable) {
   d66ec:	b112      	cbz	r2, d66f4 <_ZN8MCP7941010setRTCTimeEl+0x2c>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d66ee:	f043 0308 	orr.w	r3, r3, #8
   d66f2:	e001      	b.n	d66f8 <_ZN8MCP7941010setRTCTimeEl+0x30>
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d66f4:	f023 0308 	bic.w	r3, r3, #8
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d66f8:	aa01      	add	r2, sp, #4
   d66fa:	2100      	movs	r1, #0
   d66fc:	4620      	mov	r0, r4
	// Default is to enable the battery
	if (batteryEnable) {
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d66fe:	f88d 3011 	strb.w	r3, [sp, #17]
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d6702:	f7ff ffc1 	bl	d6688 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d6706:	fab0 f080 	clz	r0, r0
   d670a:	0940      	lsrs	r0, r0, #5
   d670c:	b006      	add	sp, #24
   d670e:	bd10      	pop	{r4, pc}

000d6710 <_ZN8MCP7941015setRTCFromCloudEv>:
			}
		}
	}
}

bool MCP79410::setRTCFromCloud() {
   d6710:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6712:	4606      	mov	r6, r0
	bool bResult = false;

	if (Time.isValid()) {
   d6714:	f002 f884 	bl	d8820 <_ZN9TimeClass7isValidEv>
   d6718:	4604      	mov	r4, r0
   d671a:	b1b8      	cbz	r0, d674c <_ZN8MCP7941015setRTCFromCloudEv+0x3c>
		time_t now = Time.now();
   d671c:	f002 f8a1 	bl	d8862 <_ZN9TimeClass3nowEv>
   d6720:	4605      	mov	r5, r0
		bResult = setRTCTime(now);
   d6722:	4601      	mov	r1, r0
   d6724:	4630      	mov	r0, r6
   d6726:	f7ff ffcf 	bl	d66c8 <_ZN8MCP7941010setRTCTimeEl>

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d672a:	4b0c      	ldr	r3, [pc, #48]	; (d675c <_ZN8MCP7941015setRTCFromCloudEv+0x4c>)
   d672c:	490c      	ldr	r1, [pc, #48]	; (d6760 <_ZN8MCP7941015setRTCFromCloudEv+0x50>)
   d672e:	681b      	ldr	r3, [r3, #0]
   d6730:	462a      	mov	r2, r5
bool MCP79410::setRTCFromCloud() {
	bool bResult = false;

	if (Time.isValid()) {
		time_t now = Time.now();
		bResult = setRTCTime(now);
   d6732:	4604      	mov	r4, r0

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d6734:	4668      	mov	r0, sp
   d6736:	f002 f841 	bl	d87bc <_ZN9TimeClass6formatElPKc>
   d673a:	9a00      	ldr	r2, [sp, #0]
   d673c:	4909      	ldr	r1, [pc, #36]	; (d6764 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d673e:	480a      	ldr	r0, [pc, #40]	; (d6768 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6740:	f7ff fb98 	bl	d5e74 <_ZNK5spark6Logger4infoEPKcz>
   d6744:	4668      	mov	r0, sp
   d6746:	f001 fd50 	bl	d81ea <_ZN6StringD1Ev>
   d674a:	e003      	b.n	d6754 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
	}
	else {
		log.info("cloud time not valid");
   d674c:	4907      	ldr	r1, [pc, #28]	; (d676c <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d674e:	4806      	ldr	r0, [pc, #24]	; (d6768 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6750:	f7ff fb90 	bl	d5e74 <_ZNK5spark6Logger4infoEPKcz>
	}
	return bResult;
}
   d6754:	4620      	mov	r0, r4
   d6756:	b004      	add	sp, #16
   d6758:	bd70      	pop	{r4, r5, r6, pc}
   d675a:	bf00      	nop
   d675c:	2003df74 	.word	0x2003df74
   d6760:	2003e4a0 	.word	0x2003e4a0
   d6764:	000dd794 	.word	0x000dd794
   d6768:	2003e1a0 	.word	0x2003e1a0
   d676c:	000dd7aa 	.word	0x000dd7aa

000d6770 <_ZN8MCP794104loopEv>:
	}

	setupDone = true;
}

void MCP79410::loop() {
   d6770:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d6772:	7a45      	ldrb	r5, [r0, #9]
	}

	setupDone = true;
}

void MCP79410::loop() {
   d6774:	4604      	mov	r4, r0
	if (!timeSet) {
   d6776:	b98d      	cbnz	r5, d679c <_ZN8MCP794104loopEv+0x2c>
		// Time has not been synchronized from the cloud
		if (Time.isValid()) {
   d6778:	f002 f852 	bl	d8820 <_ZN9TimeClass7isValidEv>
   d677c:	b170      	cbz	r0, d679c <_ZN8MCP794104loopEv+0x2c>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d677e:	a802      	add	r0, sp, #8
        return spark_sync_time_last(&tm, nullptr);
   d6780:	4629      	mov	r1, r5
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d6782:	f840 5d04 	str.w	r5, [r0, #-4]!
        return spark_sync_time_last(&tm, nullptr);
   d6786:	f000 fbf9 	bl	d6f7c <spark_sync_time_last>
			// Also check timeSyncedLast, because if we set Time from RTC, then Time will
			// be valid, but not synchronized yet
			unsigned long lastSync = Particle.timeSyncedLast();
			if (lastSync != 0) {
   d678a:	b138      	cbz	r0, d679c <_ZN8MCP794104loopEv+0x2c>
				// Time is valid and synchronized
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d678c:	7ae3      	ldrb	r3, [r4, #11]
   d678e:	07db      	lsls	r3, r3, #31
   d6790:	d502      	bpl.n	d6798 <_ZN8MCP794104loopEv+0x28>
					setRTCFromCloud();
   d6792:	4620      	mov	r0, r4
   d6794:	f7ff ffbc 	bl	d6710 <_ZN8MCP7941015setRTCFromCloudEv>
				}
				timeSet = true;
   d6798:	2301      	movs	r3, #1
   d679a:	7263      	strb	r3, [r4, #9]
			}
		}
	}
}
   d679c:	b003      	add	sp, #12
   d679e:	bd30      	pop	{r4, r5, pc}

000d67a0 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
	}
}

int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d67a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	// log.trace("deviceWriteRegisterByte addr=%02x value=%02x", addr, value);

	buf[0] = value;
   d67a2:	ab04      	add	r3, sp, #16
   d67a4:	f803 2d04 	strb.w	r2, [r3, #-4]!

	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d67a8:	2201      	movs	r2, #1
   d67aa:	9200      	str	r2, [sp, #0]
   d67ac:	460a      	mov	r2, r1
   d67ae:	216f      	movs	r1, #111	; 0x6f
   d67b0:	f7ff ff2e 	bl	d6610 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d67b4:	b005      	add	sp, #20
   d67b6:	f85d fb04 	ldr.w	pc, [sp], #4

000d67ba <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
		return deviceWriteRegisterByteMask(addr, ~value, 0);
	}
}


int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d67ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67bc:	4614      	mov	r4, r2
   d67be:	4605      	mov	r5, r0
   d67c0:	460e      	mov	r6, r1
   d67c2:	461f      	mov	r7, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d67c4:	f7ff fe56 	bl	d6474 <_ZNK8MCP7941022deviceReadRegisterByteEh>

	value &= andMask;
   d67c8:	4020      	ands	r0, r4
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d67ca:	ea40 0207 	orr.w	r2, r0, r7
   d67ce:	4631      	mov	r1, r6
   d67d0:	4628      	mov	r0, r5
}
   d67d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	value &= andMask;
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d67d6:	f7ff bfe3 	b.w	d67a0 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d67da <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>:

int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
   d67da:	b113      	cbz	r3, d67e2 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0x8>
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d67dc:	4613      	mov	r3, r2
   d67de:	22ff      	movs	r2, #255	; 0xff
   d67e0:	e001      	b.n	d67e6 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0xc>
	}
	else {
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d67e2:	43d2      	mvns	r2, r2
   d67e4:	b2d2      	uxtb	r2, r2
   d67e6:	f7ff bfe8 	b.w	d67ba <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>

000d67ea <_ZN8MCP7941010clearAlarmEi>:
	}
}


bool MCP79410::clearAlarm(int alarmNum) {
	if (alarmNum < 0 || alarmNum > 1) {
   d67ea:	2901      	cmp	r1, #1
		return true;
	}
}


bool MCP79410::clearAlarm(int alarmNum) {
   d67ec:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d67ee:	d80c      	bhi.n	d680a <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d67f0:	2900      	cmp	r1, #0
		// Invalid alarmNum, must be 0 or 1
		return false;
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d67f2:	f04f 0300 	mov.w	r3, #0
   d67f6:	bf0c      	ite	eq
   d67f8:	2210      	moveq	r2, #16
   d67fa:	2220      	movne	r2, #32
   d67fc:	2107      	movs	r1, #7
   d67fe:	f7ff ffec 	bl	d67da <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>
   d6802:	fab0 f080 	clz	r0, r0
   d6806:	0940      	lsrs	r0, r0, #5
   d6808:	bd08      	pop	{r3, pc}


bool MCP79410::clearAlarm(int alarmNum) {
	if (alarmNum < 0 || alarmNum > 1) {
		// Invalid alarmNum, must be 0 or 1
		return false;
   d680a:	2000      	movs	r0, #0
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}
   d680c:	bd08      	pop	{r3, pc}

000d680e <_ZN8MCP7941014clearInterruptEi>:
	 *
	 * @param offset 0 to get the base, or a constant like MCP79410::REG_ALARM_WKDAY_OFFSET (3).
	 *
	 * @return Returns either MCP79410::REG_ALARM0 or MCP79410::REG_ALARM1 plus the given offset
	 */
	uint8_t getAlarmRegister(int alarmNum, int offset = 0) { return ((alarmNum == 0) ? REG_ALARM0 : REG_ALARM1) + offset; };
   d680e:	2900      	cmp	r1, #0

	return (wkday & REG_ALARM_WKDAY_ALMIF) != 0;
}

void MCP79410::clearInterrupt(int alarmNum) {
	deviceWriteRegisterFlag(getAlarmRegister(alarmNum, REG_ALARM_WKDAY_OFFSET), REG_ALARM_WKDAY_ALMIF, false);
   d6810:	f04f 0300 	mov.w	r3, #0
   d6814:	f04f 0208 	mov.w	r2, #8
   d6818:	bf14      	ite	ne
   d681a:	2114      	movne	r1, #20
   d681c:	210d      	moveq	r1, #13
   d681e:	f7ff bfdc 	b.w	d67da <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>

000d6822 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6822:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d6826:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d682a:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d682c:	6803      	ldr	r3, [r0, #0]
   d682e:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6830:	4605      	mov	r5, r0
   d6832:	460c      	mov	r4, r1
   d6834:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d6836:	4798      	blx	r3
   d6838:	4580      	cmp	r8, r0
   d683a:	d80c      	bhi.n	d6856 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x34>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d683c:	f104 0220 	add.w	r2, r4, #32
   d6840:	9600      	str	r6, [sp, #0]
   d6842:	463b      	mov	r3, r7
   d6844:	b2d2      	uxtb	r2, r2
   d6846:	216f      	movs	r1, #111	; 0x6f
   d6848:	6868      	ldr	r0, [r5, #4]
   d684a:	f7ff fee1 	bl	d6610 <_ZN8MCP7941011deviceWriteEhhPKhj>

	return (stat == 0);
   d684e:	fab0 f080 	clz	r0, r0
   d6852:	0940      	lsrs	r0, r0, #5
   d6854:	e000      	b.n	d6858 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d6856:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d6858:	b002      	add	sp, #8
   d685a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d685e <_ZN8MCP794108setAlarmERK12MCP79410Timebi>:
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d685e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d6860:	2b01      	cmp	r3, #1
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d6862:	b085      	sub	sp, #20
   d6864:	4606      	mov	r6, r0
   d6866:	460c      	mov	r4, r1
   d6868:	4617      	mov	r7, r2
   d686a:	461d      	mov	r5, r3
	if (alarmNum < 0 || alarmNum > 1) {
   d686c:	d901      	bls.n	d6872 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d686e:	2000      	movs	r0, #0
   d6870:	e043      	b.n	d68fa <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x9c>
	}

	if (getOscillatorRunning()) {
   d6872:	f7ff fe0f 	bl	d6494 <_ZNK8MCP7941020getOscillatorRunningEv>
   d6876:	2800      	cmp	r0, #0
   d6878:	d0f9      	beq.n	d686e <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x10>
		uint8_t buf[6];

		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);
   d687a:	4629      	mov	r1, r5
   d687c:	4630      	mov	r0, r6
   d687e:	f7ff ffc6 	bl	d680e <_ZN8MCP7941014clearInterruptEi>

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d6882:	7c23      	ldrb	r3, [r4, #16]
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d6884:	7b22      	ldrb	r2, [r4, #12]
		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d6886:	f88d 3008 	strb.w	r3, [sp, #8]
		buf[1] = time.rawMinute;
   d688a:	7be3      	ldrb	r3, [r4, #15]
   d688c:	f88d 3009 	strb.w	r3, [sp, #9]
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d6890:	f88d 200c 	strb.w	r2, [sp, #12]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d6894:	7ba3      	ldrb	r3, [r4, #14]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d6896:	7ae2      	ldrb	r2, [r4, #11]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d6898:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d689c:	f88d 200d 	strb.w	r2, [sp, #13]
		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
   d68a0:	7b63      	ldrb	r3, [r4, #13]
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;

		if (polarity) {
   d68a2:	b117      	cbz	r7, d68aa <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x4c>
			// REG_ALARM_WKDAY_ALMPOL: 1 = alarm triggered, 0 = alarm did not trigger
			buf[3] |= REG_ALARM_WKDAY_ALMPOL;
   d68a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d68a8:	e001      	b.n	d68ae <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x50>
		}
		else {
			buf[3] &= ~REG_ALARM_WKDAY_ALMPOL;
   d68aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d68ae:	f88d 300b 	strb.w	r3, [sp, #11]
		}
		buf[3] |= (time.alarmMode & 0x7) << 4;
   d68b2:	7c63      	ldrb	r3, [r4, #17]
   d68b4:	f89d 200b 	ldrb.w	r2, [sp, #11]
   d68b8:	011b      	lsls	r3, r3, #4
   d68ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
   d68be:	4313      	orrs	r3, r2
   d68c0:	2d00      	cmp	r5, #0
   d68c2:	f88d 300b 	strb.w	r3, [sp, #11]

		uint8_t reg = getAlarmRegister(alarmNum);

		// log.trace("setAlarm %02x%02x%02x%02x%02x%02x starting at reg=%02x", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], reg);

		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
   d68c6:	f04f 0306 	mov.w	r3, #6
   d68ca:	9300      	str	r3, [sp, #0]
   d68cc:	bf08      	it	eq
   d68ce:	220a      	moveq	r2, #10
   d68d0:	ab02      	add	r3, sp, #8
   d68d2:	bf18      	it	ne
   d68d4:	2211      	movne	r2, #17
   d68d6:	216f      	movs	r1, #111	; 0x6f
   d68d8:	4630      	mov	r0, r6
   d68da:	f7ff fe99 	bl	d6610 <_ZN8MCP7941011deviceWriteEhhPKhj>
		if (stat == 0) {
   d68de:	4604      	mov	r4, r0
   d68e0:	b940      	cbnz	r0, d68f4 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x96>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d68e2:	2d00      	cmp	r5, #0
int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d68e4:	bf0c      	ite	eq
   d68e6:	2310      	moveq	r3, #16
   d68e8:	2320      	movne	r3, #32
   d68ea:	22ff      	movs	r2, #255	; 0xff
   d68ec:	2107      	movs	r1, #7
   d68ee:	4630      	mov	r0, r6
   d68f0:	f7ff ff63 	bl	d67ba <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
		if (stat == 0) {
			deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), true);
		}

		return (stat == 0);
   d68f4:	fab4 f084 	clz	r0, r4
   d68f8:	0940      	lsrs	r0, r0, #5
	}
	else {
		return false;
	}
}
   d68fa:	b005      	add	sp, #20
   d68fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d68fe <_ZN8MCP794108setAlarmEibi>:

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d68fe:	b5f0      	push	{r4, r5, r6, r7, lr}
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d6900:	2b01      	cmp	r3, #1
	else {
		return false;
	}
}

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d6902:	b087      	sub	sp, #28
   d6904:	4606      	mov	r6, r0
   d6906:	460c      	mov	r4, r1
   d6908:	4617      	mov	r7, r2
   d690a:	461d      	mov	r5, r3
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d690c:	d901      	bls.n	d6912 <_ZN8MCP794108setAlarmEibi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d690e:	2000      	movs	r0, #0
   d6910:	e010      	b.n	d6934 <_ZN8MCP794108setAlarmEibi+0x36>
	}

	time_t unixTime = getRTCTime();
   d6912:	f7ff fe05 	bl	d6520 <_ZNK8MCP7941010getRTCTimeEv>
	if (unixTime != 0) {
   d6916:	2800      	cmp	r0, #0
   d6918:	d0f9      	beq.n	d690e <_ZN8MCP794108setAlarmEibi+0x10>
		unixTime += secondsFromNow;
   d691a:	1901      	adds	r1, r0, r4

		// Set an alarm for month, dayOfMonth, dayOfWeek, hour, minute, second
		MCP79410Time time;
   d691c:	a801      	add	r0, sp, #4
   d691e:	f7ff fc55 	bl	d61cc <_ZN12MCP79410TimeC1Ev>
		time.setAlarmTime(unixTime);
   d6922:	a801      	add	r0, sp, #4
   d6924:	f7ff fd43 	bl	d63ae <_ZN12MCP79410Time12setAlarmTimeEl>

		return setAlarm(time, polarity, alarmNum);
   d6928:	462b      	mov	r3, r5
   d692a:	463a      	mov	r2, r7
   d692c:	a901      	add	r1, sp, #4
   d692e:	4630      	mov	r0, r6
   d6930:	f7ff ff95 	bl	d685e <_ZN8MCP794108setAlarmERK12MCP79410Timebi>
	}
	else {
		// RTC is not set or not running, cannot set an alarm
		return false;
	}
}
   d6934:	b007      	add	sp, #28
   d6936:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6938 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d6938:	b538      	push	{r3, r4, r5, lr}
   d693a:	4605      	mov	r5, r0
   d693c:	2432      	movs	r4, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d693e:	2157      	movs	r1, #87	; 0x57
   d6940:	6868      	ldr	r0, [r5, #4]
   d6942:	f001 f8ed 	bl	d7b20 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d6946:	2101      	movs	r1, #1
   d6948:	6868      	ldr	r0, [r5, #4]
   d694a:	f001 f8f0 	bl	d7b2e <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d694e:	b108      	cbz	r0, d6954 <_ZN8MCP7941013waitForEEPROMEv+0x1c>

	return stat;
}

void MCP79410::waitForEEPROM() {
	for(size_t tries = 0; tries < 50; tries++) {
   d6950:	3c01      	subs	r4, #1
   d6952:	d1f4      	bne.n	d693e <_ZN8MCP7941013waitForEEPROMEv+0x6>
   d6954:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6958 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
	}

	return stat;
}

int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d695c:	4605      	mov	r5, r0
   d695e:	18d7      	adds	r7, r2, r3
   d6960:	4614      	mov	r4, r2
	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
		wire.write(addr + offset);
   d6962:	ebc2 0801 	rsb	r8, r2, r1
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d6966:	42bc      	cmp	r4, r7
   d6968:	d01e      	beq.n	d69a8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x50>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d696a:	2157      	movs	r1, #87	; 0x57
   d696c:	6868      	ldr	r0, [r5, #4]
   d696e:	f001 f8d7 	bl	d7b20 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6972:	eb08 0104 	add.w	r1, r8, r4
   d6976:	6868      	ldr	r0, [r5, #4]
   d6978:	f7ff fa78 	bl	d5e6c <_ZN7TwoWire5writeEj>
		// if (bufLen != 1) {
		//	log.trace("deviceWriteEEPROM addr=%02x count=%u", addr + offset, count);
		// }

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d697c:	6868      	ldr	r0, [r5, #4]
   d697e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6982:	6803      	ldr	r3, [r0, #0]
   d6984:	689b      	ldr	r3, [r3, #8]
   d6986:	4798      	blx	r3
		}

		stat = wire.endTransmission(true);
   d6988:	2101      	movs	r1, #1
   d698a:	6868      	ldr	r0, [r5, #4]
   d698c:	f001 f8cf 	bl	d7b2e <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d6990:	4606      	mov	r6, r0
   d6992:	b128      	cbz	r0, d69a0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x48>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d6994:	4602      	mov	r2, r0
   d6996:	4906      	ldr	r1, [pc, #24]	; (d69b0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d6998:	4806      	ldr	r0, [pc, #24]	; (d69b4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d699a:	f7ff fa6b 	bl	d5e74 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d699e:	e004      	b.n	d69aa <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x52>
		}

		waitForEEPROM();
   d69a0:	4628      	mov	r0, r5
   d69a2:	f7ff ffc9 	bl	d6938 <_ZN8MCP7941013waitForEEPROMEv>
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d69a6:	e7de      	b.n	d6966 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d69a8:	2600      	movs	r6, #0

		offset += count;
	}

	return stat;
}
   d69aa:	4630      	mov	r0, r6
   d69ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d69b0:	000dd7bf 	.word	0x000dd7bf
   d69b4:	2003e1a0 	.word	0x2003e1a0

000d69b8 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d69b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d69bc:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d69c0:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d69c2:	6803      	ldr	r3, [r0, #0]
   d69c4:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d69c6:	4604      	mov	r4, r0
   d69c8:	460d      	mov	r5, r1
   d69ca:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d69cc:	4798      	blx	r3
   d69ce:	4580      	cmp	r8, r0
   d69d0:	d80a      	bhi.n	d69e8 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x30>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d69d2:	4633      	mov	r3, r6
   d69d4:	463a      	mov	r2, r7
   d69d6:	b2e9      	uxtb	r1, r5
   d69d8:	6860      	ldr	r0, [r4, #4]
   d69da:	f7ff ffbd 	bl	d6958 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>

	return (stat == 0);
   d69de:	fab0 f080 	clz	r0, r0
   d69e2:	0940      	lsrs	r0, r0, #5
   d69e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d69e8:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);

	return (stat == 0);
}
   d69ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d69f0 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
		if (stat == 0) {
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d69f0:	b508      	push	{r3, lr}
   d69f2:	f000 f891 	bl	d6b18 <HAL_Pin_Map>
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d69f6:	4b02      	ldr	r3, [pc, #8]	; (d6a00 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x10>)
   d69f8:	4a02      	ldr	r2, [pc, #8]	; (d6a04 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x14>)
   d69fa:	601a      	str	r2, [r3, #0]
   d69fc:	bd08      	pop	{r3, pc}
   d69fe:	bf00      	nop
   d6a00:	2003e1a0 	.word	0x2003e1a0
   d6a04:	000dd7e0 	.word	0x000dd7e0

000d6a08 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d6a08:	b508      	push	{r3, lr}
   d6a0a:	4b02      	ldr	r3, [pc, #8]	; (d6a14 <cellular_signal+0xc>)
   d6a0c:	681b      	ldr	r3, [r3, #0]
   d6a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6a10:	9301      	str	r3, [sp, #4]
   d6a12:	bd08      	pop	{r3, pc}
   d6a14:	00030274 	.word	0x00030274

000d6a18 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d6a18:	b508      	push	{r3, lr}
   d6a1a:	4b02      	ldr	r3, [pc, #8]	; (d6a24 <cellular_command+0xc>)
   d6a1c:	681b      	ldr	r3, [r3, #0]
   d6a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6a20:	9301      	str	r3, [sp, #4]
   d6a22:	bd08      	pop	{r3, pc}
   d6a24:	00030274 	.word	0x00030274

000d6a28 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6a28:	b508      	push	{r3, lr}
   d6a2a:	4b02      	ldr	r3, [pc, #8]	; (d6a34 <os_thread_is_current+0xc>)
   d6a2c:	681b      	ldr	r3, [r3, #0]
   d6a2e:	689b      	ldr	r3, [r3, #8]
   d6a30:	9301      	str	r3, [sp, #4]
   d6a32:	bd08      	pop	{r3, pc}
   d6a34:	00030248 	.word	0x00030248

000d6a38 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6a38:	b508      	push	{r3, lr}
   d6a3a:	4b02      	ldr	r3, [pc, #8]	; (d6a44 <os_thread_join+0xc>)
   d6a3c:	681b      	ldr	r3, [r3, #0]
   d6a3e:	691b      	ldr	r3, [r3, #16]
   d6a40:	9301      	str	r3, [sp, #4]
   d6a42:	bd08      	pop	{r3, pc}
   d6a44:	00030248 	.word	0x00030248

000d6a48 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6a48:	b508      	push	{r3, lr}
   d6a4a:	4b02      	ldr	r3, [pc, #8]	; (d6a54 <os_thread_cleanup+0xc>)
   d6a4c:	681b      	ldr	r3, [r3, #0]
   d6a4e:	695b      	ldr	r3, [r3, #20]
   d6a50:	9301      	str	r3, [sp, #4]
   d6a52:	bd08      	pop	{r3, pc}
   d6a54:	00030248 	.word	0x00030248

000d6a58 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6a58:	b508      	push	{r3, lr}
   d6a5a:	4b02      	ldr	r3, [pc, #8]	; (d6a64 <os_mutex_recursive_create+0xc>)
   d6a5c:	681b      	ldr	r3, [r3, #0]
   d6a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6a60:	9301      	str	r3, [sp, #4]
   d6a62:	bd08      	pop	{r3, pc}
   d6a64:	00030248 	.word	0x00030248

000d6a68 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6a68:	b508      	push	{r3, lr}
   d6a6a:	4b02      	ldr	r3, [pc, #8]	; (d6a74 <os_mutex_recursive_destroy+0xc>)
   d6a6c:	681b      	ldr	r3, [r3, #0]
   d6a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6a70:	9301      	str	r3, [sp, #4]
   d6a72:	bd08      	pop	{r3, pc}
   d6a74:	00030248 	.word	0x00030248

000d6a78 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d6a78:	b508      	push	{r3, lr}
   d6a7a:	4b02      	ldr	r3, [pc, #8]	; (d6a84 <HAL_Feature_Set+0xc>)
   d6a7c:	681b      	ldr	r3, [r3, #0]
   d6a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6a80:	9301      	str	r3, [sp, #4]
   d6a82:	bd08      	pop	{r3, pc}
   d6a84:	00030234 	.word	0x00030234

000d6a88 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d6a88:	b508      	push	{r3, lr}
   d6a8a:	4b02      	ldr	r3, [pc, #8]	; (d6a94 <HAL_Core_System_Reset_Ex+0xc>)
   d6a8c:	681b      	ldr	r3, [r3, #0]
   d6a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d6a90:	9301      	str	r3, [sp, #4]
   d6a92:	bd08      	pop	{r3, pc}
   d6a94:	00030234 	.word	0x00030234

000d6a98 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d6a98:	b508      	push	{r3, lr}
   d6a9a:	4b02      	ldr	r3, [pc, #8]	; (d6aa4 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d6a9c:	681b      	ldr	r3, [r3, #0]
   d6a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6aa0:	9301      	str	r3, [sp, #4]
   d6aa2:	bd08      	pop	{r3, pc}
   d6aa4:	00030234 	.word	0x00030234

000d6aa8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6aa8:	b508      	push	{r3, lr}
   d6aaa:	4b02      	ldr	r3, [pc, #8]	; (d6ab4 <HAL_RNG_GetRandomNumber+0xc>)
   d6aac:	681b      	ldr	r3, [r3, #0]
   d6aae:	685b      	ldr	r3, [r3, #4]
   d6ab0:	9301      	str	r3, [sp, #4]
   d6ab2:	bd08      	pop	{r3, pc}
   d6ab4:	00030218 	.word	0x00030218

000d6ab8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6ab8:	b508      	push	{r3, lr}
   d6aba:	4b02      	ldr	r3, [pc, #8]	; (d6ac4 <HAL_Delay_Microseconds+0xc>)
   d6abc:	681b      	ldr	r3, [r3, #0]
   d6abe:	68db      	ldr	r3, [r3, #12]
   d6ac0:	9301      	str	r3, [sp, #4]
   d6ac2:	bd08      	pop	{r3, pc}
   d6ac4:	00030218 	.word	0x00030218

000d6ac8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6ac8:	b508      	push	{r3, lr}
   d6aca:	4b02      	ldr	r3, [pc, #8]	; (d6ad4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6acc:	681b      	ldr	r3, [r3, #0]
   d6ace:	695b      	ldr	r3, [r3, #20]
   d6ad0:	9301      	str	r3, [sp, #4]
   d6ad2:	bd08      	pop	{r3, pc}
   d6ad4:	00030218 	.word	0x00030218

000d6ad8 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d6ad8:	b508      	push	{r3, lr}
   d6ada:	4b02      	ldr	r3, [pc, #8]	; (d6ae4 <HAL_RTC_Get_UnixTime+0xc>)
   d6adc:	681b      	ldr	r3, [r3, #0]
   d6ade:	69db      	ldr	r3, [r3, #28]
   d6ae0:	9301      	str	r3, [sp, #4]
   d6ae2:	bd08      	pop	{r3, pc}
   d6ae4:	00030218 	.word	0x00030218

000d6ae8 <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
   d6ae8:	b508      	push	{r3, lr}
   d6aea:	4b02      	ldr	r3, [pc, #8]	; (d6af4 <HAL_RTC_Set_UnixTime+0xc>)
   d6aec:	681b      	ldr	r3, [r3, #0]
   d6aee:	6a1b      	ldr	r3, [r3, #32]
   d6af0:	9301      	str	r3, [sp, #4]
   d6af2:	bd08      	pop	{r3, pc}
   d6af4:	00030218 	.word	0x00030218

000d6af8 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d6af8:	b508      	push	{r3, lr}
   d6afa:	4b02      	ldr	r3, [pc, #8]	; (d6b04 <HAL_RTC_Time_Is_Valid+0xc>)
   d6afc:	681b      	ldr	r3, [r3, #0]
   d6afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6b00:	9301      	str	r3, [sp, #4]
   d6b02:	bd08      	pop	{r3, pc}
   d6b04:	00030218 	.word	0x00030218

000d6b08 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d6b08:	b508      	push	{r3, lr}
   d6b0a:	4b02      	ldr	r3, [pc, #8]	; (d6b14 <hal_timer_millis+0xc>)
   d6b0c:	681b      	ldr	r3, [r3, #0]
   d6b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6b10:	9301      	str	r3, [sp, #4]
   d6b12:	bd08      	pop	{r3, pc}
   d6b14:	00030218 	.word	0x00030218

000d6b18 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6b18:	b508      	push	{r3, lr}
   d6b1a:	4b02      	ldr	r3, [pc, #8]	; (d6b24 <HAL_Pin_Map+0xc>)
   d6b1c:	681b      	ldr	r3, [r3, #0]
   d6b1e:	681b      	ldr	r3, [r3, #0]
   d6b20:	9301      	str	r3, [sp, #4]
   d6b22:	bd08      	pop	{r3, pc}
   d6b24:	0003022c 	.word	0x0003022c

000d6b28 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6b28:	b508      	push	{r3, lr}
   d6b2a:	4b02      	ldr	r3, [pc, #8]	; (d6b34 <HAL_Validate_Pin_Function+0xc>)
   d6b2c:	681b      	ldr	r3, [r3, #0]
   d6b2e:	685b      	ldr	r3, [r3, #4]
   d6b30:	9301      	str	r3, [sp, #4]
   d6b32:	bd08      	pop	{r3, pc}
   d6b34:	0003022c 	.word	0x0003022c

000d6b38 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6b38:	b508      	push	{r3, lr}
   d6b3a:	4b02      	ldr	r3, [pc, #8]	; (d6b44 <HAL_Pin_Mode+0xc>)
   d6b3c:	681b      	ldr	r3, [r3, #0]
   d6b3e:	689b      	ldr	r3, [r3, #8]
   d6b40:	9301      	str	r3, [sp, #4]
   d6b42:	bd08      	pop	{r3, pc}
   d6b44:	0003022c 	.word	0x0003022c

000d6b48 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6b48:	b508      	push	{r3, lr}
   d6b4a:	4b02      	ldr	r3, [pc, #8]	; (d6b54 <HAL_Get_Pin_Mode+0xc>)
   d6b4c:	681b      	ldr	r3, [r3, #0]
   d6b4e:	68db      	ldr	r3, [r3, #12]
   d6b50:	9301      	str	r3, [sp, #4]
   d6b52:	bd08      	pop	{r3, pc}
   d6b54:	0003022c 	.word	0x0003022c

000d6b58 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6b58:	b508      	push	{r3, lr}
   d6b5a:	4b02      	ldr	r3, [pc, #8]	; (d6b64 <HAL_GPIO_Write+0xc>)
   d6b5c:	681b      	ldr	r3, [r3, #0]
   d6b5e:	691b      	ldr	r3, [r3, #16]
   d6b60:	9301      	str	r3, [sp, #4]
   d6b62:	bd08      	pop	{r3, pc}
   d6b64:	0003022c 	.word	0x0003022c

000d6b68 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6b68:	b508      	push	{r3, lr}
   d6b6a:	4b02      	ldr	r3, [pc, #8]	; (d6b74 <HAL_GPIO_Read+0xc>)
   d6b6c:	681b      	ldr	r3, [r3, #0]
   d6b6e:	695b      	ldr	r3, [r3, #20]
   d6b70:	9301      	str	r3, [sp, #4]
   d6b72:	bd08      	pop	{r3, pc}
   d6b74:	0003022c 	.word	0x0003022c

000d6b78 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d6b78:	b508      	push	{r3, lr}
   d6b7a:	4b02      	ldr	r3, [pc, #8]	; (d6b84 <HAL_Interrupts_Attach+0xc>)
   d6b7c:	681b      	ldr	r3, [r3, #0]
   d6b7e:	699b      	ldr	r3, [r3, #24]
   d6b80:	9301      	str	r3, [sp, #4]
   d6b82:	bd08      	pop	{r3, pc}
   d6b84:	0003022c 	.word	0x0003022c

000d6b88 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d6b88:	b508      	push	{r3, lr}
   d6b8a:	4b02      	ldr	r3, [pc, #8]	; (d6b94 <HAL_Interrupts_Detach+0xc>)
   d6b8c:	681b      	ldr	r3, [r3, #0]
   d6b8e:	69db      	ldr	r3, [r3, #28]
   d6b90:	9301      	str	r3, [sp, #4]
   d6b92:	bd08      	pop	{r3, pc}
   d6b94:	0003022c 	.word	0x0003022c

000d6b98 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d6b98:	b508      	push	{r3, lr}
   d6b9a:	4b02      	ldr	r3, [pc, #8]	; (d6ba4 <HAL_ADC_Read+0xc>)
   d6b9c:	681b      	ldr	r3, [r3, #0]
   d6b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6ba0:	9301      	str	r3, [sp, #4]
   d6ba2:	bd08      	pop	{r3, pc}
   d6ba4:	0003022c 	.word	0x0003022c

000d6ba8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d6ba8:	b508      	push	{r3, lr}
   d6baa:	4b02      	ldr	r3, [pc, #8]	; (d6bb4 <HAL_I2C_Begin+0xc>)
   d6bac:	681b      	ldr	r3, [r3, #0]
   d6bae:	68db      	ldr	r3, [r3, #12]
   d6bb0:	9301      	str	r3, [sp, #4]
   d6bb2:	bd08      	pop	{r3, pc}
   d6bb4:	00030228 	.word	0x00030228

000d6bb8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d6bb8:	b508      	push	{r3, lr}
   d6bba:	4b02      	ldr	r3, [pc, #8]	; (d6bc4 <HAL_I2C_Begin_Transmission+0xc>)
   d6bbc:	681b      	ldr	r3, [r3, #0]
   d6bbe:	699b      	ldr	r3, [r3, #24]
   d6bc0:	9301      	str	r3, [sp, #4]
   d6bc2:	bd08      	pop	{r3, pc}
   d6bc4:	00030228 	.word	0x00030228

000d6bc8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d6bc8:	b508      	push	{r3, lr}
   d6bca:	4b02      	ldr	r3, [pc, #8]	; (d6bd4 <HAL_I2C_End_Transmission+0xc>)
   d6bcc:	681b      	ldr	r3, [r3, #0]
   d6bce:	69db      	ldr	r3, [r3, #28]
   d6bd0:	9301      	str	r3, [sp, #4]
   d6bd2:	bd08      	pop	{r3, pc}
   d6bd4:	00030228 	.word	0x00030228

000d6bd8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6bd8:	b508      	push	{r3, lr}
   d6bda:	4b02      	ldr	r3, [pc, #8]	; (d6be4 <HAL_I2C_Write_Data+0xc>)
   d6bdc:	681b      	ldr	r3, [r3, #0]
   d6bde:	6a1b      	ldr	r3, [r3, #32]
   d6be0:	9301      	str	r3, [sp, #4]
   d6be2:	bd08      	pop	{r3, pc}
   d6be4:	00030228 	.word	0x00030228

000d6be8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6be8:	b508      	push	{r3, lr}
   d6bea:	4b02      	ldr	r3, [pc, #8]	; (d6bf4 <HAL_I2C_Available_Data+0xc>)
   d6bec:	681b      	ldr	r3, [r3, #0]
   d6bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6bf0:	9301      	str	r3, [sp, #4]
   d6bf2:	bd08      	pop	{r3, pc}
   d6bf4:	00030228 	.word	0x00030228

000d6bf8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6bf8:	b508      	push	{r3, lr}
   d6bfa:	4b02      	ldr	r3, [pc, #8]	; (d6c04 <HAL_I2C_Read_Data+0xc>)
   d6bfc:	681b      	ldr	r3, [r3, #0]
   d6bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6c00:	9301      	str	r3, [sp, #4]
   d6c02:	bd08      	pop	{r3, pc}
   d6c04:	00030228 	.word	0x00030228

000d6c08 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6c08:	b508      	push	{r3, lr}
   d6c0a:	4b02      	ldr	r3, [pc, #8]	; (d6c14 <HAL_I2C_Peek_Data+0xc>)
   d6c0c:	681b      	ldr	r3, [r3, #0]
   d6c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6c10:	9301      	str	r3, [sp, #4]
   d6c12:	bd08      	pop	{r3, pc}
   d6c14:	00030228 	.word	0x00030228

000d6c18 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6c18:	b508      	push	{r3, lr}
   d6c1a:	4b02      	ldr	r3, [pc, #8]	; (d6c24 <HAL_I2C_Flush_Data+0xc>)
   d6c1c:	681b      	ldr	r3, [r3, #0]
   d6c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6c20:	9301      	str	r3, [sp, #4]
   d6c22:	bd08      	pop	{r3, pc}
   d6c24:	00030228 	.word	0x00030228

000d6c28 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6c28:	b508      	push	{r3, lr}
   d6c2a:	4b02      	ldr	r3, [pc, #8]	; (d6c34 <HAL_I2C_Is_Enabled+0xc>)
   d6c2c:	681b      	ldr	r3, [r3, #0]
   d6c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6c30:	9301      	str	r3, [sp, #4]
   d6c32:	bd08      	pop	{r3, pc}
   d6c34:	00030228 	.word	0x00030228

000d6c38 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6c38:	b508      	push	{r3, lr}
   d6c3a:	4b02      	ldr	r3, [pc, #8]	; (d6c44 <HAL_I2C_Init+0xc>)
   d6c3c:	681b      	ldr	r3, [r3, #0]
   d6c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6c40:	9301      	str	r3, [sp, #4]
   d6c42:	bd08      	pop	{r3, pc}
   d6c44:	00030228 	.word	0x00030228

000d6c48 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d6c48:	b508      	push	{r3, lr}
   d6c4a:	4b02      	ldr	r3, [pc, #8]	; (d6c54 <HAL_I2C_Acquire+0xc>)
   d6c4c:	681b      	ldr	r3, [r3, #0]
   d6c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6c50:	9301      	str	r3, [sp, #4]
   d6c52:	bd08      	pop	{r3, pc}
   d6c54:	00030228 	.word	0x00030228

000d6c58 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d6c58:	b508      	push	{r3, lr}
   d6c5a:	4b02      	ldr	r3, [pc, #8]	; (d6c64 <HAL_I2C_Release+0xc>)
   d6c5c:	681b      	ldr	r3, [r3, #0]
   d6c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6c60:	9301      	str	r3, [sp, #4]
   d6c62:	bd08      	pop	{r3, pc}
   d6c64:	00030228 	.word	0x00030228

000d6c68 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d6c68:	b508      	push	{r3, lr}
   d6c6a:	4b02      	ldr	r3, [pc, #8]	; (d6c74 <HAL_I2C_Request_Data_Ex+0xc>)
   d6c6c:	681b      	ldr	r3, [r3, #0]
   d6c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6c70:	9301      	str	r3, [sp, #4]
   d6c72:	bd08      	pop	{r3, pc}
   d6c74:	00030228 	.word	0x00030228

000d6c78 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6c78:	b508      	push	{r3, lr}
   d6c7a:	4b02      	ldr	r3, [pc, #8]	; (d6c84 <inet_inet_ntop+0xc>)
   d6c7c:	681b      	ldr	r3, [r3, #0]
   d6c7e:	695b      	ldr	r3, [r3, #20]
   d6c80:	9301      	str	r3, [sp, #4]
   d6c82:	bd08      	pop	{r3, pc}
   d6c84:	00030264 	.word	0x00030264

000d6c88 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6c88:	b508      	push	{r3, lr}
   d6c8a:	4b02      	ldr	r3, [pc, #8]	; (d6c94 <netdb_freeaddrinfo+0xc>)
   d6c8c:	681b      	ldr	r3, [r3, #0]
   d6c8e:	689b      	ldr	r3, [r3, #8]
   d6c90:	9301      	str	r3, [sp, #4]
   d6c92:	bd08      	pop	{r3, pc}
   d6c94:	00030268 	.word	0x00030268

000d6c98 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6c98:	b508      	push	{r3, lr}
   d6c9a:	4b02      	ldr	r3, [pc, #8]	; (d6ca4 <netdb_getaddrinfo+0xc>)
   d6c9c:	681b      	ldr	r3, [r3, #0]
   d6c9e:	68db      	ldr	r3, [r3, #12]
   d6ca0:	9301      	str	r3, [sp, #4]
   d6ca2:	bd08      	pop	{r3, pc}
   d6ca4:	00030268 	.word	0x00030268

000d6ca8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6ca8:	b508      	push	{r3, lr}
   d6caa:	4b02      	ldr	r3, [pc, #8]	; (d6cb4 <HAL_SPI_Init+0xc>)
   d6cac:	681b      	ldr	r3, [r3, #0]
   d6cae:	69db      	ldr	r3, [r3, #28]
   d6cb0:	9301      	str	r3, [sp, #4]
   d6cb2:	bd08      	pop	{r3, pc}
   d6cb4:	00030230 	.word	0x00030230

000d6cb8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6cb8:	b508      	push	{r3, lr}
   d6cba:	4b02      	ldr	r3, [pc, #8]	; (d6cc4 <HAL_SPI_Is_Enabled+0xc>)
   d6cbc:	681b      	ldr	r3, [r3, #0]
   d6cbe:	6a1b      	ldr	r3, [r3, #32]
   d6cc0:	9301      	str	r3, [sp, #4]
   d6cc2:	bd08      	pop	{r3, pc}
   d6cc4:	00030230 	.word	0x00030230

000d6cc8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6cc8:	b508      	push	{r3, lr}
   d6cca:	4b02      	ldr	r3, [pc, #8]	; (d6cd4 <HAL_USART_Init+0xc>)
   d6ccc:	681b      	ldr	r3, [r3, #0]
   d6cce:	681b      	ldr	r3, [r3, #0]
   d6cd0:	9301      	str	r3, [sp, #4]
   d6cd2:	bd08      	pop	{r3, pc}
   d6cd4:	0003023c 	.word	0x0003023c

000d6cd8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6cd8:	b508      	push	{r3, lr}
   d6cda:	4b02      	ldr	r3, [pc, #8]	; (d6ce4 <HAL_USART_Write_Data+0xc>)
   d6cdc:	681b      	ldr	r3, [r3, #0]
   d6cde:	68db      	ldr	r3, [r3, #12]
   d6ce0:	9301      	str	r3, [sp, #4]
   d6ce2:	bd08      	pop	{r3, pc}
   d6ce4:	0003023c 	.word	0x0003023c

000d6ce8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6ce8:	b508      	push	{r3, lr}
   d6cea:	4b02      	ldr	r3, [pc, #8]	; (d6cf4 <HAL_USART_Available_Data+0xc>)
   d6cec:	681b      	ldr	r3, [r3, #0]
   d6cee:	691b      	ldr	r3, [r3, #16]
   d6cf0:	9301      	str	r3, [sp, #4]
   d6cf2:	bd08      	pop	{r3, pc}
   d6cf4:	0003023c 	.word	0x0003023c

000d6cf8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6cf8:	b508      	push	{r3, lr}
   d6cfa:	4b02      	ldr	r3, [pc, #8]	; (d6d04 <HAL_USART_Read_Data+0xc>)
   d6cfc:	681b      	ldr	r3, [r3, #0]
   d6cfe:	695b      	ldr	r3, [r3, #20]
   d6d00:	9301      	str	r3, [sp, #4]
   d6d02:	bd08      	pop	{r3, pc}
   d6d04:	0003023c 	.word	0x0003023c

000d6d08 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6d08:	b508      	push	{r3, lr}
   d6d0a:	4b02      	ldr	r3, [pc, #8]	; (d6d14 <HAL_USART_Peek_Data+0xc>)
   d6d0c:	681b      	ldr	r3, [r3, #0]
   d6d0e:	699b      	ldr	r3, [r3, #24]
   d6d10:	9301      	str	r3, [sp, #4]
   d6d12:	bd08      	pop	{r3, pc}
   d6d14:	0003023c 	.word	0x0003023c

000d6d18 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6d18:	b508      	push	{r3, lr}
   d6d1a:	4b02      	ldr	r3, [pc, #8]	; (d6d24 <HAL_USART_Flush_Data+0xc>)
   d6d1c:	681b      	ldr	r3, [r3, #0]
   d6d1e:	69db      	ldr	r3, [r3, #28]
   d6d20:	9301      	str	r3, [sp, #4]
   d6d22:	bd08      	pop	{r3, pc}
   d6d24:	0003023c 	.word	0x0003023c

000d6d28 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6d28:	b508      	push	{r3, lr}
   d6d2a:	4b02      	ldr	r3, [pc, #8]	; (d6d34 <HAL_USART_Is_Enabled+0xc>)
   d6d2c:	681b      	ldr	r3, [r3, #0]
   d6d2e:	6a1b      	ldr	r3, [r3, #32]
   d6d30:	9301      	str	r3, [sp, #4]
   d6d32:	bd08      	pop	{r3, pc}
   d6d34:	0003023c 	.word	0x0003023c

000d6d38 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6d38:	b508      	push	{r3, lr}
   d6d3a:	4b02      	ldr	r3, [pc, #8]	; (d6d44 <HAL_USART_Available_Data_For_Write+0xc>)
   d6d3c:	681b      	ldr	r3, [r3, #0]
   d6d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6d40:	9301      	str	r3, [sp, #4]
   d6d42:	bd08      	pop	{r3, pc}
   d6d44:	0003023c 	.word	0x0003023c

000d6d48 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6d48:	b508      	push	{r3, lr}
   d6d4a:	4b02      	ldr	r3, [pc, #8]	; (d6d54 <HAL_USB_USART_Init+0xc>)
   d6d4c:	681b      	ldr	r3, [r3, #0]
   d6d4e:	681b      	ldr	r3, [r3, #0]
   d6d50:	9301      	str	r3, [sp, #4]
   d6d52:	bd08      	pop	{r3, pc}
   d6d54:	0003024c 	.word	0x0003024c

000d6d58 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6d58:	b508      	push	{r3, lr}
   d6d5a:	4b02      	ldr	r3, [pc, #8]	; (d6d64 <HAL_USB_USART_Available_Data+0xc>)
   d6d5c:	681b      	ldr	r3, [r3, #0]
   d6d5e:	691b      	ldr	r3, [r3, #16]
   d6d60:	9301      	str	r3, [sp, #4]
   d6d62:	bd08      	pop	{r3, pc}
   d6d64:	0003024c 	.word	0x0003024c

000d6d68 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6d68:	b508      	push	{r3, lr}
   d6d6a:	4b02      	ldr	r3, [pc, #8]	; (d6d74 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6d6c:	681b      	ldr	r3, [r3, #0]
   d6d6e:	695b      	ldr	r3, [r3, #20]
   d6d70:	9301      	str	r3, [sp, #4]
   d6d72:	bd08      	pop	{r3, pc}
   d6d74:	0003024c 	.word	0x0003024c

000d6d78 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d78:	b508      	push	{r3, lr}
   d6d7a:	4b02      	ldr	r3, [pc, #8]	; (d6d84 <HAL_USB_USART_Receive_Data+0xc>)
   d6d7c:	681b      	ldr	r3, [r3, #0]
   d6d7e:	699b      	ldr	r3, [r3, #24]
   d6d80:	9301      	str	r3, [sp, #4]
   d6d82:	bd08      	pop	{r3, pc}
   d6d84:	0003024c 	.word	0x0003024c

000d6d88 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d88:	b508      	push	{r3, lr}
   d6d8a:	4b02      	ldr	r3, [pc, #8]	; (d6d94 <HAL_USB_USART_Send_Data+0xc>)
   d6d8c:	681b      	ldr	r3, [r3, #0]
   d6d8e:	69db      	ldr	r3, [r3, #28]
   d6d90:	9301      	str	r3, [sp, #4]
   d6d92:	bd08      	pop	{r3, pc}
   d6d94:	0003024c 	.word	0x0003024c

000d6d98 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6d98:	b508      	push	{r3, lr}
   d6d9a:	4b02      	ldr	r3, [pc, #8]	; (d6da4 <HAL_USB_USART_Flush_Data+0xc>)
   d6d9c:	681b      	ldr	r3, [r3, #0]
   d6d9e:	6a1b      	ldr	r3, [r3, #32]
   d6da0:	9301      	str	r3, [sp, #4]
   d6da2:	bd08      	pop	{r3, pc}
   d6da4:	0003024c 	.word	0x0003024c

000d6da8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6da8:	b508      	push	{r3, lr}
   d6daa:	4b02      	ldr	r3, [pc, #8]	; (d6db4 <panic_+0xc>)
   d6dac:	681b      	ldr	r3, [r3, #0]
   d6dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6db0:	9301      	str	r3, [sp, #4]
   d6db2:	bd08      	pop	{r3, pc}
   d6db4:	00030260 	.word	0x00030260

000d6db8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6db8:	b508      	push	{r3, lr}
   d6dba:	4b02      	ldr	r3, [pc, #8]	; (d6dc4 <log_message+0xc>)
   d6dbc:	681b      	ldr	r3, [r3, #0]
   d6dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6dc0:	9301      	str	r3, [sp, #4]
   d6dc2:	bd08      	pop	{r3, pc}
   d6dc4:	00030260 	.word	0x00030260

000d6dc8 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6dc8:	b508      	push	{r3, lr}
   d6dca:	4b02      	ldr	r3, [pc, #8]	; (d6dd4 <log_message_v+0xc>)
   d6dcc:	681b      	ldr	r3, [r3, #0]
   d6dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6dd0:	9301      	str	r3, [sp, #4]
   d6dd2:	bd08      	pop	{r3, pc}
   d6dd4:	00030260 	.word	0x00030260

000d6dd8 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d6dd8:	b508      	push	{r3, lr}
   d6dda:	4b03      	ldr	r3, [pc, #12]	; (d6de8 <diag_get_source+0x10>)
   d6ddc:	681b      	ldr	r3, [r3, #0]
   d6dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d6de2:	9301      	str	r3, [sp, #4]
   d6de4:	bd08      	pop	{r3, pc}
   d6de6:	0000      	.short	0x0000
   d6de8:	00030260 	.word	0x00030260

000d6dec <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6dec:	b508      	push	{r3, lr}
   d6dee:	4b02      	ldr	r3, [pc, #8]	; (d6df8 <system_mode+0xc>)
   d6df0:	681b      	ldr	r3, [r3, #0]
   d6df2:	681b      	ldr	r3, [r3, #0]
   d6df4:	9301      	str	r3, [sp, #4]
   d6df6:	bd08      	pop	{r3, pc}
   d6df8:	00030220 	.word	0x00030220

000d6dfc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6dfc:	b508      	push	{r3, lr}
   d6dfe:	4b02      	ldr	r3, [pc, #8]	; (d6e08 <set_system_mode+0xc>)
   d6e00:	681b      	ldr	r3, [r3, #0]
   d6e02:	685b      	ldr	r3, [r3, #4]
   d6e04:	9301      	str	r3, [sp, #4]
   d6e06:	bd08      	pop	{r3, pc}
   d6e08:	00030220 	.word	0x00030220

000d6e0c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6e0c:	b508      	push	{r3, lr}
   d6e0e:	4b02      	ldr	r3, [pc, #8]	; (d6e18 <system_delay_ms+0xc>)
   d6e10:	681b      	ldr	r3, [r3, #0]
   d6e12:	695b      	ldr	r3, [r3, #20]
   d6e14:	9301      	str	r3, [sp, #4]
   d6e16:	bd08      	pop	{r3, pc}
   d6e18:	00030220 	.word	0x00030220

000d6e1c <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d6e1c:	b508      	push	{r3, lr}
   d6e1e:	4b02      	ldr	r3, [pc, #8]	; (d6e28 <system_sleep+0xc>)
   d6e20:	681b      	ldr	r3, [r3, #0]
   d6e22:	699b      	ldr	r3, [r3, #24]
   d6e24:	9301      	str	r3, [sp, #4]
   d6e26:	bd08      	pop	{r3, pc}
   d6e28:	00030220 	.word	0x00030220

000d6e2c <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6e2c:	b508      	push	{r3, lr}
   d6e2e:	4b02      	ldr	r3, [pc, #8]	; (d6e38 <system_thread_set_state+0xc>)
   d6e30:	681b      	ldr	r3, [r3, #0]
   d6e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6e34:	9301      	str	r3, [sp, #4]
   d6e36:	bd08      	pop	{r3, pc}
   d6e38:	00030220 	.word	0x00030220

000d6e3c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6e3c:	b508      	push	{r3, lr}
   d6e3e:	4b02      	ldr	r3, [pc, #8]	; (d6e48 <application_thread_current+0xc>)
   d6e40:	681b      	ldr	r3, [r3, #0]
   d6e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6e44:	9301      	str	r3, [sp, #4]
   d6e46:	bd08      	pop	{r3, pc}
   d6e48:	00030220 	.word	0x00030220

000d6e4c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6e4c:	b508      	push	{r3, lr}
   d6e4e:	4b02      	ldr	r3, [pc, #8]	; (d6e58 <application_thread_invoke+0xc>)
   d6e50:	681b      	ldr	r3, [r3, #0]
   d6e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6e54:	9301      	str	r3, [sp, #4]
   d6e56:	bd08      	pop	{r3, pc}
   d6e58:	00030220 	.word	0x00030220

000d6e5c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6e5c:	b508      	push	{r3, lr}
   d6e5e:	4b02      	ldr	r3, [pc, #8]	; (d6e68 <system_thread_get_state+0xc>)
   d6e60:	681b      	ldr	r3, [r3, #0]
   d6e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6e64:	9301      	str	r3, [sp, #4]
   d6e66:	bd08      	pop	{r3, pc}
   d6e68:	00030220 	.word	0x00030220

000d6e6c <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d6e6c:	b508      	push	{r3, lr}
   d6e6e:	4b02      	ldr	r3, [pc, #8]	; (d6e78 <system_notify_time_changed+0xc>)
   d6e70:	681b      	ldr	r3, [r3, #0]
   d6e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6e74:	9301      	str	r3, [sp, #4]
   d6e76:	bd08      	pop	{r3, pc}
   d6e78:	00030220 	.word	0x00030220

000d6e7c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6e7c:	b508      	push	{r3, lr}
   d6e7e:	4b03      	ldr	r3, [pc, #12]	; (d6e8c <system_ctrl_set_app_request_handler+0x10>)
   d6e80:	681b      	ldr	r3, [r3, #0]
   d6e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6e86:	9301      	str	r3, [sp, #4]
   d6e88:	bd08      	pop	{r3, pc}
   d6e8a:	0000      	.short	0x0000
   d6e8c:	00030220 	.word	0x00030220

000d6e90 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6e90:	b508      	push	{r3, lr}
   d6e92:	4b03      	ldr	r3, [pc, #12]	; (d6ea0 <system_ctrl_set_result+0x10>)
   d6e94:	681b      	ldr	r3, [r3, #0]
   d6e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6e9a:	9301      	str	r3, [sp, #4]
   d6e9c:	bd08      	pop	{r3, pc}
   d6e9e:	0000      	.short	0x0000
   d6ea0:	00030220 	.word	0x00030220

000d6ea4 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d6ea4:	b508      	push	{r3, lr}
   d6ea6:	4b03      	ldr	r3, [pc, #12]	; (d6eb4 <system_power_management_set_config+0x10>)
   d6ea8:	681b      	ldr	r3, [r3, #0]
   d6eaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d6eae:	9301      	str	r3, [sp, #4]
   d6eb0:	bd08      	pop	{r3, pc}
   d6eb2:	0000      	.short	0x0000
   d6eb4:	00030220 	.word	0x00030220

000d6eb8 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d6eb8:	b508      	push	{r3, lr}
   d6eba:	4b03      	ldr	r3, [pc, #12]	; (d6ec8 <system_sleep_ext+0x10>)
   d6ebc:	681b      	ldr	r3, [r3, #0]
   d6ebe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d6ec2:	9301      	str	r3, [sp, #4]
   d6ec4:	bd08      	pop	{r3, pc}
   d6ec6:	0000      	.short	0x0000
   d6ec8:	00030220 	.word	0x00030220

000d6ecc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d6ecc:	b508      	push	{r3, lr}
   d6ece:	4b02      	ldr	r3, [pc, #8]	; (d6ed8 <spark_variable+0xc>)
   d6ed0:	681b      	ldr	r3, [r3, #0]
   d6ed2:	681b      	ldr	r3, [r3, #0]
   d6ed4:	9301      	str	r3, [sp, #4]
   d6ed6:	bd08      	pop	{r3, pc}
   d6ed8:	00030244 	.word	0x00030244

000d6edc <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d6edc:	b508      	push	{r3, lr}
   d6ede:	4b02      	ldr	r3, [pc, #8]	; (d6ee8 <spark_function+0xc>)
   d6ee0:	681b      	ldr	r3, [r3, #0]
   d6ee2:	685b      	ldr	r3, [r3, #4]
   d6ee4:	9301      	str	r3, [sp, #4]
   d6ee6:	bd08      	pop	{r3, pc}
   d6ee8:	00030244 	.word	0x00030244

000d6eec <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6eec:	b508      	push	{r3, lr}
   d6eee:	4b02      	ldr	r3, [pc, #8]	; (d6ef8 <spark_process+0xc>)
   d6ef0:	681b      	ldr	r3, [r3, #0]
   d6ef2:	689b      	ldr	r3, [r3, #8]
   d6ef4:	9301      	str	r3, [sp, #4]
   d6ef6:	bd08      	pop	{r3, pc}
   d6ef8:	00030244 	.word	0x00030244

000d6efc <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d6efc:	b508      	push	{r3, lr}
   d6efe:	4b02      	ldr	r3, [pc, #8]	; (d6f08 <spark_cloud_flag_connect+0xc>)
   d6f00:	681b      	ldr	r3, [r3, #0]
   d6f02:	68db      	ldr	r3, [r3, #12]
   d6f04:	9301      	str	r3, [sp, #4]
   d6f06:	bd08      	pop	{r3, pc}
   d6f08:	00030244 	.word	0x00030244

000d6f0c <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d6f0c:	b508      	push	{r3, lr}
   d6f0e:	4b02      	ldr	r3, [pc, #8]	; (d6f18 <spark_cloud_flag_disconnect+0xc>)
   d6f10:	681b      	ldr	r3, [r3, #0]
   d6f12:	691b      	ldr	r3, [r3, #16]
   d6f14:	9301      	str	r3, [sp, #4]
   d6f16:	bd08      	pop	{r3, pc}
   d6f18:	00030244 	.word	0x00030244

000d6f1c <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6f1c:	b508      	push	{r3, lr}
   d6f1e:	4b02      	ldr	r3, [pc, #8]	; (d6f28 <spark_cloud_flag_connected+0xc>)
   d6f20:	681b      	ldr	r3, [r3, #0]
   d6f22:	695b      	ldr	r3, [r3, #20]
   d6f24:	9301      	str	r3, [sp, #4]
   d6f26:	bd08      	pop	{r3, pc}
   d6f28:	00030244 	.word	0x00030244

000d6f2c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6f2c:	b508      	push	{r3, lr}
   d6f2e:	4b02      	ldr	r3, [pc, #8]	; (d6f38 <spark_deviceID+0xc>)
   d6f30:	681b      	ldr	r3, [r3, #0]
   d6f32:	69db      	ldr	r3, [r3, #28]
   d6f34:	9301      	str	r3, [sp, #4]
   d6f36:	bd08      	pop	{r3, pc}
   d6f38:	00030244 	.word	0x00030244

000d6f3c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6f3c:	b508      	push	{r3, lr}
   d6f3e:	4b02      	ldr	r3, [pc, #8]	; (d6f48 <spark_send_event+0xc>)
   d6f40:	681b      	ldr	r3, [r3, #0]
   d6f42:	6a1b      	ldr	r3, [r3, #32]
   d6f44:	9301      	str	r3, [sp, #4]
   d6f46:	bd08      	pop	{r3, pc}
   d6f48:	00030244 	.word	0x00030244

000d6f4c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6f4c:	b508      	push	{r3, lr}
   d6f4e:	4b02      	ldr	r3, [pc, #8]	; (d6f58 <spark_subscribe+0xc>)
   d6f50:	681b      	ldr	r3, [r3, #0]
   d6f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6f54:	9301      	str	r3, [sp, #4]
   d6f56:	bd08      	pop	{r3, pc}
   d6f58:	00030244 	.word	0x00030244

000d6f5c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6f5c:	b508      	push	{r3, lr}
   d6f5e:	4b02      	ldr	r3, [pc, #8]	; (d6f68 <spark_sync_time+0xc>)
   d6f60:	681b      	ldr	r3, [r3, #0]
   d6f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6f64:	9301      	str	r3, [sp, #4]
   d6f66:	bd08      	pop	{r3, pc}
   d6f68:	00030244 	.word	0x00030244

000d6f6c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6f6c:	b508      	push	{r3, lr}
   d6f6e:	4b02      	ldr	r3, [pc, #8]	; (d6f78 <spark_sync_time_pending+0xc>)
   d6f70:	681b      	ldr	r3, [r3, #0]
   d6f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6f74:	9301      	str	r3, [sp, #4]
   d6f76:	bd08      	pop	{r3, pc}
   d6f78:	00030244 	.word	0x00030244

000d6f7c <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
   d6f7c:	b508      	push	{r3, lr}
   d6f7e:	4b02      	ldr	r3, [pc, #8]	; (d6f88 <spark_sync_time_last+0xc>)
   d6f80:	681b      	ldr	r3, [r3, #0]
   d6f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6f84:	9301      	str	r3, [sp, #4]
   d6f86:	bd08      	pop	{r3, pc}
   d6f88:	00030244 	.word	0x00030244

000d6f8c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6f8c:	b508      	push	{r3, lr}
   d6f8e:	4b02      	ldr	r3, [pc, #8]	; (d6f98 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6f90:	681b      	ldr	r3, [r3, #0]
   d6f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6f94:	9301      	str	r3, [sp, #4]
   d6f96:	bd08      	pop	{r3, pc}
   d6f98:	00030244 	.word	0x00030244

000d6f9c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6f9c:	b508      	push	{r3, lr}
   d6f9e:	4b02      	ldr	r3, [pc, #8]	; (d6fa8 <network_connect+0xc>)
   d6fa0:	681b      	ldr	r3, [r3, #0]
   d6fa2:	685b      	ldr	r3, [r3, #4]
   d6fa4:	9301      	str	r3, [sp, #4]
   d6fa6:	bd08      	pop	{r3, pc}
   d6fa8:	00030240 	.word	0x00030240

000d6fac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6fac:	b508      	push	{r3, lr}
   d6fae:	4b02      	ldr	r3, [pc, #8]	; (d6fb8 <network_connecting+0xc>)
   d6fb0:	681b      	ldr	r3, [r3, #0]
   d6fb2:	689b      	ldr	r3, [r3, #8]
   d6fb4:	9301      	str	r3, [sp, #4]
   d6fb6:	bd08      	pop	{r3, pc}
   d6fb8:	00030240 	.word	0x00030240

000d6fbc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6fbc:	b508      	push	{r3, lr}
   d6fbe:	4b02      	ldr	r3, [pc, #8]	; (d6fc8 <network_disconnect+0xc>)
   d6fc0:	681b      	ldr	r3, [r3, #0]
   d6fc2:	68db      	ldr	r3, [r3, #12]
   d6fc4:	9301      	str	r3, [sp, #4]
   d6fc6:	bd08      	pop	{r3, pc}
   d6fc8:	00030240 	.word	0x00030240

000d6fcc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6fcc:	b508      	push	{r3, lr}
   d6fce:	4b02      	ldr	r3, [pc, #8]	; (d6fd8 <network_ready+0xc>)
   d6fd0:	681b      	ldr	r3, [r3, #0]
   d6fd2:	691b      	ldr	r3, [r3, #16]
   d6fd4:	9301      	str	r3, [sp, #4]
   d6fd6:	bd08      	pop	{r3, pc}
   d6fd8:	00030240 	.word	0x00030240

000d6fdc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6fdc:	b508      	push	{r3, lr}
   d6fde:	4b02      	ldr	r3, [pc, #8]	; (d6fe8 <network_on+0xc>)
   d6fe0:	681b      	ldr	r3, [r3, #0]
   d6fe2:	695b      	ldr	r3, [r3, #20]
   d6fe4:	9301      	str	r3, [sp, #4]
   d6fe6:	bd08      	pop	{r3, pc}
   d6fe8:	00030240 	.word	0x00030240

000d6fec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6fec:	b508      	push	{r3, lr}
   d6fee:	4b02      	ldr	r3, [pc, #8]	; (d6ff8 <network_off+0xc>)
   d6ff0:	681b      	ldr	r3, [r3, #0]
   d6ff2:	699b      	ldr	r3, [r3, #24]
   d6ff4:	9301      	str	r3, [sp, #4]
   d6ff6:	bd08      	pop	{r3, pc}
   d6ff8:	00030240 	.word	0x00030240

000d6ffc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6ffc:	b508      	push	{r3, lr}
   d6ffe:	4b02      	ldr	r3, [pc, #8]	; (d7008 <network_listen+0xc>)
   d7000:	681b      	ldr	r3, [r3, #0]
   d7002:	69db      	ldr	r3, [r3, #28]
   d7004:	9301      	str	r3, [sp, #4]
   d7006:	bd08      	pop	{r3, pc}
   d7008:	00030240 	.word	0x00030240

000d700c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d700c:	b508      	push	{r3, lr}
   d700e:	4b02      	ldr	r3, [pc, #8]	; (d7018 <network_listening+0xc>)
   d7010:	681b      	ldr	r3, [r3, #0]
   d7012:	6a1b      	ldr	r3, [r3, #32]
   d7014:	9301      	str	r3, [sp, #4]
   d7016:	bd08      	pop	{r3, pc}
   d7018:	00030240 	.word	0x00030240

000d701c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d701c:	b508      	push	{r3, lr}
   d701e:	4b02      	ldr	r3, [pc, #8]	; (d7028 <network_set_listen_timeout+0xc>)
   d7020:	681b      	ldr	r3, [r3, #0]
   d7022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7024:	9301      	str	r3, [sp, #4]
   d7026:	bd08      	pop	{r3, pc}
   d7028:	00030240 	.word	0x00030240

000d702c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d702c:	b508      	push	{r3, lr}
   d702e:	4b02      	ldr	r3, [pc, #8]	; (d7038 <network_get_listen_timeout+0xc>)
   d7030:	681b      	ldr	r3, [r3, #0]
   d7032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7034:	9301      	str	r3, [sp, #4]
   d7036:	bd08      	pop	{r3, pc}
   d7038:	00030240 	.word	0x00030240

000d703c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d703c:	b508      	push	{r3, lr}
   d703e:	4b02      	ldr	r3, [pc, #8]	; (d7048 <malloc+0xc>)
   d7040:	681b      	ldr	r3, [r3, #0]
   d7042:	681b      	ldr	r3, [r3, #0]
   d7044:	9301      	str	r3, [sp, #4]
   d7046:	bd08      	pop	{r3, pc}
   d7048:	0003021c 	.word	0x0003021c

000d704c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d704c:	b508      	push	{r3, lr}
   d704e:	4b02      	ldr	r3, [pc, #8]	; (d7058 <free+0xc>)
   d7050:	681b      	ldr	r3, [r3, #0]
   d7052:	685b      	ldr	r3, [r3, #4]
   d7054:	9301      	str	r3, [sp, #4]
   d7056:	bd08      	pop	{r3, pc}
   d7058:	0003021c 	.word	0x0003021c

000d705c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d705c:	b508      	push	{r3, lr}
   d705e:	4b02      	ldr	r3, [pc, #8]	; (d7068 <realloc+0xc>)
   d7060:	681b      	ldr	r3, [r3, #0]
   d7062:	689b      	ldr	r3, [r3, #8]
   d7064:	9301      	str	r3, [sp, #4]
   d7066:	bd08      	pop	{r3, pc}
   d7068:	0003021c 	.word	0x0003021c

000d706c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d706c:	b508      	push	{r3, lr}
   d706e:	4b02      	ldr	r3, [pc, #8]	; (d7078 <siprintf+0xc>)
   d7070:	681b      	ldr	r3, [r3, #0]
   d7072:	691b      	ldr	r3, [r3, #16]
   d7074:	9301      	str	r3, [sp, #4]
   d7076:	bd08      	pop	{r3, pc}
   d7078:	0003021c 	.word	0x0003021c

000d707c <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d707c:	b508      	push	{r3, lr}
   d707e:	4b02      	ldr	r3, [pc, #8]	; (d7088 <siscanf+0xc>)
   d7080:	681b      	ldr	r3, [r3, #0]
   d7082:	699b      	ldr	r3, [r3, #24]
   d7084:	9301      	str	r3, [sp, #4]
   d7086:	bd08      	pop	{r3, pc}
   d7088:	0003021c 	.word	0x0003021c

000d708c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d708c:	b508      	push	{r3, lr}
   d708e:	4b02      	ldr	r3, [pc, #8]	; (d7098 <snprintf+0xc>)
   d7090:	681b      	ldr	r3, [r3, #0]
   d7092:	69db      	ldr	r3, [r3, #28]
   d7094:	9301      	str	r3, [sp, #4]
   d7096:	bd08      	pop	{r3, pc}
   d7098:	0003021c 	.word	0x0003021c

000d709c <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d709c:	b508      	push	{r3, lr}
   d709e:	4b02      	ldr	r3, [pc, #8]	; (d70a8 <sniprintf+0xc>)
   d70a0:	681b      	ldr	r3, [r3, #0]
   d70a2:	6a1b      	ldr	r3, [r3, #32]
   d70a4:	9301      	str	r3, [sp, #4]
   d70a6:	bd08      	pop	{r3, pc}
   d70a8:	0003021c 	.word	0x0003021c

000d70ac <abort>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d70ac:	b508      	push	{r3, lr}
   d70ae:	4b02      	ldr	r3, [pc, #8]	; (d70b8 <abort+0xc>)
   d70b0:	681b      	ldr	r3, [r3, #0]
   d70b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d70b4:	9301      	str	r3, [sp, #4]
   d70b6:	bd08      	pop	{r3, pc}
   d70b8:	0003021c 	.word	0x0003021c

000d70bc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d70bc:	b508      	push	{r3, lr}
   d70be:	4b02      	ldr	r3, [pc, #8]	; (d70c8 <_malloc_r+0xc>)
   d70c0:	681b      	ldr	r3, [r3, #0]
   d70c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d70c4:	9301      	str	r3, [sp, #4]
   d70c6:	bd08      	pop	{r3, pc}
   d70c8:	0003021c 	.word	0x0003021c

000d70cc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d70cc:	2100      	movs	r1, #0
   d70ce:	f7ff be9d 	b.w	d6e0c <system_delay_ms>

000d70d2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d70d2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d70d4:	6883      	ldr	r3, [r0, #8]
   d70d6:	4604      	mov	r4, r0
   d70d8:	b90b      	cbnz	r3, d70de <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d70da:	f001 feda 	bl	d8e92 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d70de:	68c3      	ldr	r3, [r0, #12]
   d70e0:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d70e2:	68a3      	ldr	r3, [r4, #8]
   d70e4:	b11b      	cbz	r3, d70ee <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d70e6:	2203      	movs	r2, #3
   d70e8:	4621      	mov	r1, r4
   d70ea:	4620      	mov	r0, r4
   d70ec:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d70ee:	4620      	mov	r0, r4
   d70f0:	2110      	movs	r1, #16
}
   d70f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d70f6:	f001 beb0 	b.w	d8e5a <_ZdlPvj>

000d70fa <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d70fa:	b510      	push	{r4, lr}
   d70fc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d70fe:	6800      	ldr	r0, [r0, #0]
   d7100:	b108      	cbz	r0, d7106 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7102:	f7ff fcb1 	bl	d6a68 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d7106:	4620      	mov	r0, r4
   d7108:	bd10      	pop	{r4, pc}

000d710a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d710a:	680b      	ldr	r3, [r1, #0]
   d710c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d710e:	b113      	cbz	r3, d7116 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d7110:	685a      	ldr	r2, [r3, #4]
   d7112:	3201      	adds	r2, #1
   d7114:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d7116:	4770      	bx	lr

000d7118 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7118:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d711a:	4c06      	ldr	r4, [pc, #24]	; (d7134 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d711c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d711e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7120:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7122:	f7ff fc99 	bl	d6a58 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7126:	4620      	mov	r0, r4
   d7128:	4a03      	ldr	r2, [pc, #12]	; (d7138 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d712a:	4904      	ldr	r1, [pc, #16]	; (d713c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d712c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7130:	f001 be8e 	b.w	d8e50 <__aeabi_atexit>
   d7134:	2003e1a4 	.word	0x2003e1a4
   d7138:	2003e064 	.word	0x2003e064
   d713c:	000d70fb 	.word	0x000d70fb

000d7140 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d7140:	2200      	movs	r2, #0
   d7142:	4611      	mov	r1, r2
   d7144:	6840      	ldr	r0, [r0, #4]
   d7146:	f7ff bf41 	b.w	d6fcc <network_ready>

000d714a <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d714a:	2200      	movs	r2, #0
   d714c:	4611      	mov	r1, r2
   d714e:	6840      	ldr	r0, [r0, #4]
   d7150:	f7ff bf5c 	b.w	d700c <network_listening>

000d7154 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7154:	2200      	movs	r2, #0
   d7156:	4611      	mov	r1, r2
   d7158:	6840      	ldr	r0, [r0, #4]
   d715a:	f7ff bf67 	b.w	d702c <network_get_listen_timeout>

000d715e <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d715e:	2200      	movs	r2, #0
   d7160:	6840      	ldr	r0, [r0, #4]
   d7162:	f7ff bf5b 	b.w	d701c <network_set_listen_timeout>

000d7166 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7166:	2200      	movs	r2, #0
   d7168:	f081 0101 	eor.w	r1, r1, #1
   d716c:	6840      	ldr	r0, [r0, #4]
   d716e:	f7ff bf45 	b.w	d6ffc <network_listen>

000d7172 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d7172:	2300      	movs	r3, #0
   d7174:	461a      	mov	r2, r3
   d7176:	4619      	mov	r1, r3
   d7178:	6840      	ldr	r0, [r0, #4]
   d717a:	f7ff bf37 	b.w	d6fec <network_off>

000d717e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d717e:	2300      	movs	r3, #0
   d7180:	461a      	mov	r2, r3
   d7182:	4619      	mov	r1, r3
   d7184:	6840      	ldr	r0, [r0, #4]
   d7186:	f7ff bf29 	b.w	d6fdc <network_on>

000d718a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d718a:	2200      	movs	r2, #0
   d718c:	4611      	mov	r1, r2
   d718e:	6840      	ldr	r0, [r0, #4]
   d7190:	f7ff bf0c 	b.w	d6fac <network_connecting>

000d7194 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7194:	2200      	movs	r2, #0
   d7196:	2102      	movs	r1, #2
   d7198:	6840      	ldr	r0, [r0, #4]
   d719a:	f7ff bf0f 	b.w	d6fbc <network_disconnect>

000d719e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d719e:	2300      	movs	r3, #0
   d71a0:	461a      	mov	r2, r3
   d71a2:	6840      	ldr	r0, [r0, #4]
   d71a4:	f7ff befa 	b.w	d6f9c <network_connect>

000d71a8 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d71a8:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d71aa:	4b1b      	ldr	r3, [pc, #108]	; (d7218 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d71ac:	6003      	str	r3, [r0, #0]
   d71ae:	2500      	movs	r5, #0
   d71b0:	460f      	mov	r7, r1
   d71b2:	3328      	adds	r3, #40	; 0x28
   d71b4:	2618      	movs	r6, #24
   d71b6:	b089      	sub	sp, #36	; 0x24
   d71b8:	6043      	str	r3, [r0, #4]
   d71ba:	6085      	str	r5, [r0, #8]
   d71bc:	60c5      	str	r5, [r0, #12]
   d71be:	4632      	mov	r2, r6
   d71c0:	4629      	mov	r1, r5
   d71c2:	4604      	mov	r4, r0
   d71c4:	3010      	adds	r0, #16
   d71c6:	f002 feae 	bl	d9f26 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d71ca:	462a      	mov	r2, r5
   d71cc:	4629      	mov	r1, r5
   d71ce:	6878      	ldr	r0, [r7, #4]
   d71d0:	f7ff fefc 	bl	d6fcc <network_ready>
   d71d4:	b908      	cbnz	r0, d71da <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d71d6:	60a0      	str	r0, [r4, #8]
            return sig;
   d71d8:	e01b      	b.n	d7212 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d71da:	4629      	mov	r1, r5
   d71dc:	4632      	mov	r2, r6
   d71de:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d71e0:	9500      	str	r5, [sp, #0]
   d71e2:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d71e4:	f002 fe9f 	bl	d9f26 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d71e8:	a902      	add	r1, sp, #8
   d71ea:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d71ec:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d71f0:	f7ff fc0a 	bl	d6a08 <cellular_signal>
   d71f4:	b110      	cbz	r0, d71fc <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d71f6:	2301      	movs	r3, #1
   d71f8:	60a3      	str	r3, [r4, #8]
            return sig;
   d71fa:	e00a      	b.n	d7212 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d71fc:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d71fe:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d7200:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d7202:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d7204:	b90b      	cbnz	r3, d720a <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d7206:	2302      	movs	r3, #2
   d7208:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d720a:	a902      	add	r1, sp, #8
   d720c:	4620      	mov	r0, r4
   d720e:	f000 f889 	bl	d7324 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d7212:	4620      	mov	r0, r4
   d7214:	b009      	add	sp, #36	; 0x24
   d7216:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7218:	000dd844 	.word	0x000dd844

000d721c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d721c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d721e:	4c08      	ldr	r4, [pc, #32]	; (d7240 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d7220:	2528      	movs	r5, #40	; 0x28
   d7222:	462a      	mov	r2, r5
   d7224:	2100      	movs	r1, #0
   d7226:	4620      	mov	r0, r4
   d7228:	f002 fe7d 	bl	d9f26 <memset>
        cid = -1;
   d722c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7230:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7232:	4b04      	ldr	r3, [pc, #16]	; (d7244 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d7234:	8025      	strh	r5, [r4, #0]
   d7236:	2204      	movs	r2, #4
   d7238:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d723a:	4a03      	ldr	r2, [pc, #12]	; (d7248 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d723c:	601a      	str	r2, [r3, #0]
   d723e:	bd38      	pop	{r3, r4, r5, pc}
   d7240:	2003e1b0 	.word	0x2003e1b0
   d7244:	2003e1a8 	.word	0x2003e1a8
   d7248:	000dd810 	.word	0x000dd810

000d724c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d724c:	4770      	bx	lr

000d724e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d724e:	7d00      	ldrb	r0, [r0, #20]
   d7250:	4770      	bx	lr
	...

000d7254 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d7254:	7d03      	ldrb	r3, [r0, #20]
   d7256:	b11b      	cbz	r3, d7260 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d7258:	6983      	ldr	r3, [r0, #24]
   d725a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d725e:	d102      	bne.n	d7266 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d7260:	ed9f 0a05 	vldr	s0, [pc, #20]	; d7278 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d7264:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d7266:	ee07 3a90 	vmov	s15, r3
   d726a:	ed9f 7a04 	vldr	s14, [pc, #16]	; d727c <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d726e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7272:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d7276:	4770      	bx	lr
   d7278:	00000000 	.word	0x00000000
   d727c:	42c80000 	.word	0x42c80000

000d7280 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d7280:	7d03      	ldrb	r3, [r0, #20]
   d7282:	b11b      	cbz	r3, d728c <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d7284:	6a03      	ldr	r3, [r0, #32]
   d7286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d728a:	d102      	bne.n	d7292 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d728c:	ed9f 0a05 	vldr	s0, [pc, #20]	; d72a4 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d7290:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d7292:	ee07 3a90 	vmov	s15, r3
   d7296:	ed9f 7a04 	vldr	s14, [pc, #16]	; d72a8 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d729a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d729e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d72a2:	4770      	bx	lr
   d72a4:	00000000 	.word	0x00000000
   d72a8:	42c80000 	.word	0x42c80000

000d72ac <_ZN14CellularSignalD0Ev>:
   d72ac:	b510      	push	{r4, lr}
   d72ae:	2128      	movs	r1, #40	; 0x28
   d72b0:	4604      	mov	r4, r0
   d72b2:	f001 fdd2 	bl	d8e5a <_ZdlPvj>
   d72b6:	4620      	mov	r0, r4
   d72b8:	bd10      	pop	{r4, pc}
	...

000d72bc <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d72bc:	7d03      	ldrb	r3, [r0, #20]
   d72be:	b17b      	cbz	r3, d72e0 <_ZNK14CellularSignal10getQualityEv+0x24>
   d72c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d72c2:	2b00      	cmp	r3, #0
   d72c4:	db0c      	blt.n	d72e0 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d72c6:	ee07 3a90 	vmov	s15, r3
   d72ca:	eddf 6a07 	vldr	s13, [pc, #28]	; d72e8 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d72ce:	ed9f 0a07 	vldr	s0, [pc, #28]	; d72ec <_ZNK14CellularSignal10getQualityEv+0x30>
   d72d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d72d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d72da:	ee27 0a80 	vmul.f32	s0, s15, s0
   d72de:	4770      	bx	lr
    }

    return -1.0f;
   d72e0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d72e4:	4770      	bx	lr
   d72e6:	bf00      	nop
   d72e8:	477fff00 	.word	0x477fff00
   d72ec:	42c80000 	.word	0x42c80000

000d72f0 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d72f0:	7d03      	ldrb	r3, [r0, #20]
   d72f2:	b17b      	cbz	r3, d7314 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d72f4:	69c3      	ldr	r3, [r0, #28]
   d72f6:	2b00      	cmp	r3, #0
   d72f8:	db0c      	blt.n	d7314 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d72fa:	ee07 3a90 	vmov	s15, r3
   d72fe:	eddf 6a07 	vldr	s13, [pc, #28]	; d731c <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d7302:	ed9f 0a07 	vldr	s0, [pc, #28]	; d7320 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d7306:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d730a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d730e:	ee27 0a80 	vmul.f32	s0, s15, s0
   d7312:	4770      	bx	lr
    }

    return -1.0f;
   d7314:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d7318:	4770      	bx	lr
   d731a:	bf00      	nop
   d731c:	477fff00 	.word	0x477fff00
   d7320:	42c80000 	.word	0x42c80000

000d7324 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d7324:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d7326:	460d      	mov	r5, r1
   d7328:	f100 0410 	add.w	r4, r0, #16
   d732c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d732e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7330:	e895 0003 	ldmia.w	r5, {r0, r1}
   d7334:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d7338:	2001      	movs	r0, #1
   d733a:	bd30      	pop	{r4, r5, pc}

000d733c <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d733c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7340:	4607      	mov	r7, r0
   d7342:	460c      	mov	r4, r1
{
    if (base == 0) {
   d7344:	4615      	mov	r5, r2
   d7346:	b92a      	cbnz	r2, d7354 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d7348:	6803      	ldr	r3, [r0, #0]
   d734a:	b2c9      	uxtb	r1, r1
   d734c:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d734e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d7352:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d7354:	2900      	cmp	r1, #0
   d7356:	da07      	bge.n	d7368 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d7358:	2a0a      	cmp	r2, #10
   d735a:	d105      	bne.n	d7368 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d735c:	212d      	movs	r1, #45	; 0x2d
   d735e:	f000 fee9 	bl	d8134 <_ZN5Print5printEc>
            val = -n;
   d7362:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d7364:	4606      	mov	r6, r0
            val = -n;
   d7366:	e001      	b.n	d736c <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d7368:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d736a:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d736c:	b2ea      	uxtb	r2, r5
   d736e:	4638      	mov	r0, r7
   d7370:	f000 fef9 	bl	d8166 <_ZN5Print11printNumberEmh>
    }
}
   d7374:	4430      	add	r0, r6
   d7376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d737a <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d737a:	b570      	push	{r4, r5, r6, lr}
   d737c:	460d      	mov	r5, r1
   d737e:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d7380:	220a      	movs	r2, #10
   d7382:	6881      	ldr	r1, [r0, #8]
   d7384:	4628      	mov	r0, r5
   d7386:	f7ff ffd9 	bl	d733c <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d738a:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d738c:	4604      	mov	r4, r0
    n += p.print(',');
   d738e:	4628      	mov	r0, r5
   d7390:	f000 fed0 	bl	d8134 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d7394:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d7396:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d7398:	68f1      	ldr	r1, [r6, #12]
   d739a:	4628      	mov	r0, r5
   d739c:	f7ff ffce 	bl	d733c <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d73a0:	4420      	add	r0, r4
   d73a2:	bd70      	pop	{r4, r5, r6, pc}

000d73a4 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d73a4:	f1a0 0004 	sub.w	r0, r0, #4
   d73a8:	f7ff bfe7 	b.w	d737a <_ZNK14CellularSignal7printToER5Print>

000d73ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d73ac:	4770      	bx	lr

000d73ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d73ae:	2000      	movs	r0, #0
   d73b0:	4770      	bx	lr

000d73b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d73b2:	b510      	push	{r4, lr}
   d73b4:	2110      	movs	r1, #16
   d73b6:	4604      	mov	r4, r0
   d73b8:	f001 fd4f 	bl	d8e5a <_ZdlPvj>
   d73bc:	4620      	mov	r0, r4
   d73be:	bd10      	pop	{r4, pc}

000d73c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d73c0:	b508      	push	{r3, lr}
      { delete this; }
   d73c2:	b108      	cbz	r0, d73c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d73c4:	f7ff fff5 	bl	d73b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d73c8:	bd08      	pop	{r3, pc}

000d73ca <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d73ca:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d73cc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d73ce:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d73d0:	b113      	cbz	r3, d73d8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d73d2:	2203      	movs	r2, #3
   d73d4:	4601      	mov	r1, r0
   d73d6:	4798      	blx	r3
    }
   d73d8:	4620      	mov	r0, r4
   d73da:	bd10      	pop	{r4, pc}

000d73dc <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d73dc:	2200      	movs	r2, #0
   d73de:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d73e0:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d73e2:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d73e6:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d73e8:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d73ec:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d73ee:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d73f0:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d73f2:	680c      	ldr	r4, [r1, #0]
   d73f4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d73f6:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d73f8:	bd10      	pop	{r4, pc}

000d73fa <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d73fa:	b510      	push	{r4, lr}
   d73fc:	4604      	mov	r4, r0
    free((void*)msg_);
   d73fe:	6800      	ldr	r0, [r0, #0]
   d7400:	f7ff fe24 	bl	d704c <free>
}
   d7404:	4620      	mov	r0, r4
   d7406:	bd10      	pop	{r4, pc}

000d7408 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d7408:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d740a:	68c4      	ldr	r4, [r0, #12]
   d740c:	b1f4      	cbz	r4, d744c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d740e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7410:	2b02      	cmp	r3, #2
   d7412:	d103      	bne.n	d741c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7414:	f104 000c 	add.w	r0, r4, #12
   d7418:	f7ff ffef 	bl	d73fa <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d741c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d741e:	b135      	cbz	r5, d742e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7420:	4628      	mov	r0, r5
   d7422:	f7ff ffd2 	bl	d73ca <_ZNSt14_Function_baseD1Ev>
   d7426:	2110      	movs	r1, #16
   d7428:	4628      	mov	r0, r5
   d742a:	f001 fd16 	bl	d8e5a <_ZdlPvj>
   d742e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7430:	b135      	cbz	r5, d7440 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7432:	4628      	mov	r0, r5
   d7434:	f7ff ffc9 	bl	d73ca <_ZNSt14_Function_baseD1Ev>
   d7438:	2110      	movs	r1, #16
   d743a:	4628      	mov	r0, r5
   d743c:	f001 fd0d 	bl	d8e5a <_ZdlPvj>
   d7440:	4620      	mov	r0, r4
   d7442:	2114      	movs	r1, #20
   d7444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7448:	f001 bd07 	b.w	d8e5a <_ZdlPvj>
   d744c:	bd38      	pop	{r3, r4, r5, pc}

000d744e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d744e:	b510      	push	{r4, lr}
   d7450:	b088      	sub	sp, #32
   d7452:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d7454:	4668      	mov	r0, sp
   d7456:	f000 ff0f 	bl	d8278 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d745a:	4669      	mov	r1, sp
   d745c:	a804      	add	r0, sp, #16
   d745e:	f000 ff2d 	bl	d82bc <_ZN6StringC1ERKS_>
   d7462:	a804      	add	r0, sp, #16
   d7464:	47a0      	blx	r4
   d7466:	4604      	mov	r4, r0
   d7468:	a804      	add	r0, sp, #16
   d746a:	f000 febe 	bl	d81ea <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d746e:	4668      	mov	r0, sp
   d7470:	f000 febb 	bl	d81ea <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d7474:	4620      	mov	r0, r4
   d7476:	b008      	add	sp, #32
   d7478:	bd10      	pop	{r4, pc}

000d747a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d747a:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d747c:	2410      	movs	r4, #16
   d747e:	b085      	sub	sp, #20
   d7480:	4607      	mov	r7, r0
   d7482:	460e      	mov	r6, r1
   d7484:	4615      	mov	r5, r2
   d7486:	2100      	movs	r1, #0
   d7488:	4622      	mov	r2, r4
   d748a:	4668      	mov	r0, sp
   d748c:	f002 fd4b 	bl	d9f26 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d7490:	2200      	movs	r2, #0
   d7492:	4669      	mov	r1, sp
   d7494:	4610      	mov	r0, r2
         size = sizeof(*this);
   d7496:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d749a:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d749c:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d749e:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d74a0:	f7ff fd1c 	bl	d6edc <spark_function>
}
   d74a4:	b005      	add	sp, #20
   d74a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d74a8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d74a8:	b513      	push	{r0, r1, r4, lr}
   d74aa:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d74ac:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d74b0:	2300      	movs	r3, #0
   d74b2:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d74b4:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d74b6:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d74b8:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d74ba:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d74bc:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d74be:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d74c0:	f7fd f962 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d74c4:	4620      	mov	r0, r4
   d74c6:	b002      	add	sp, #8
   d74c8:	bd10      	pop	{r4, pc}

000d74ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d74ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d74cc:	460c      	mov	r4, r1
   d74ce:	ad02      	add	r5, sp, #8
   d74d0:	f854 3b04 	ldr.w	r3, [r4], #4
   d74d4:	f845 3d08 	str.w	r3, [r5, #-8]!
   d74d8:	4606      	mov	r6, r0
   d74da:	460f      	mov	r7, r1
   d74dc:	a801      	add	r0, sp, #4
   d74de:	4621      	mov	r1, r4
   d74e0:	f7ff fe13 	bl	d710a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d74e4:	4629      	mov	r1, r5
   d74e6:	4630      	mov	r0, r6
   d74e8:	f7ff ffde 	bl	d74a8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d74ec:	a801      	add	r0, sp, #4
   d74ee:	f7fd f94b 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d74f2:	4620      	mov	r0, r4
   d74f4:	f7fd f948 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d74f8:	4638      	mov	r0, r7
   d74fa:	2108      	movs	r1, #8
   d74fc:	f001 fcad 	bl	d8e5a <_ZdlPvj>
        return p;
    }
   d7500:	4630      	mov	r0, r6
   d7502:	b003      	add	sp, #12
   d7504:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7506 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d7506:	b513      	push	{r0, r1, r4, lr}
   d7508:	460b      	mov	r3, r1
   d750a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d750c:	c803      	ldmia	r0, {r0, r1}
   d750e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7512:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7516:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d751a:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d751e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7522:	b002      	add	sp, #8
   d7524:	bd10      	pop	{r4, pc}
	...

000d7528 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7528:	b538      	push	{r3, r4, r5, lr}
   d752a:	2300      	movs	r3, #0
   d752c:	4604      	mov	r4, r0
   d752e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7530:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7532:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7534:	f7fc fdb1 	bl	d409a <_Znwj>
   d7538:	b128      	cbz	r0, d7546 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d753a:	2301      	movs	r3, #1
   d753c:	6043      	str	r3, [r0, #4]
   d753e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d7540:	4b02      	ldr	r3, [pc, #8]	; (d754c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d7542:	6003      	str	r3, [r0, #0]
   d7544:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7546:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d7548:	4620      	mov	r0, r4
   d754a:	bd38      	pop	{r3, r4, r5, pc}
   d754c:	000dd878 	.word	0x000dd878

000d7550 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7550:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7552:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7554:	b90a      	cbnz	r2, d755a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7556:	f001 fc9c 	bl	d8e92 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d755a:	68c3      	ldr	r3, [r0, #12]
    }
   d755c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7560:	4718      	bx	r3

000d7562 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7562:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7564:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7566:	f100 0110 	add.w	r1, r0, #16
   d756a:	f7ff fff1 	bl	d7550 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d756e:	bd08      	pop	{r3, pc}

000d7570 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7570:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7572:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7574:	b90a      	cbnz	r2, d757a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7576:	f001 fc8c 	bl	d8e92 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d757a:	68c3      	ldr	r3, [r0, #12]
    }
   d757c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7580:	4718      	bx	r3

000d7582 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7582:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7584:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7586:	f100 0110 	add.w	r1, r0, #16
   d758a:	f7ff fff1 	bl	d7570 <_ZNKSt8functionIFvRKbEEclES1_>
   d758e:	bd08      	pop	{r3, pc}

000d7590 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7590:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7592:	2300      	movs	r3, #0
   d7594:	6083      	str	r3, [r0, #8]
   d7596:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7598:	4604      	mov	r4, r0
   d759a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d759c:	b12b      	cbz	r3, d75aa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d759e:	2202      	movs	r2, #2
   d75a0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d75a2:	68eb      	ldr	r3, [r5, #12]
   d75a4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d75a6:	68ab      	ldr	r3, [r5, #8]
   d75a8:	60a3      	str	r3, [r4, #8]
	}
    }
   d75aa:	4620      	mov	r0, r4
   d75ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000d75b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d75b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d75b2:	b089      	sub	sp, #36	; 0x24
   d75b4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d75b6:	4668      	mov	r0, sp
   d75b8:	f7ff ff10 	bl	d73dc <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d75bc:	2300      	movs	r3, #0
   d75be:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d75c2:	f04f 0202 	mov.w	r2, #2
   d75c6:	e8d4 3f4f 	ldrexb	r3, [r4]
   d75ca:	2b00      	cmp	r3, #0
   d75cc:	d103      	bne.n	d75d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d75ce:	e8c4 2f41 	strexb	r1, r2, [r4]
   d75d2:	2900      	cmp	r1, #0
   d75d4:	d1f7      	bne.n	d75c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d75d6:	d002      	beq.n	d75de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d75d8:	f88d 3008 	strb.w	r3, [sp, #8]
   d75dc:	e063      	b.n	d76a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d75de:	f114 050c 	adds.w	r5, r4, #12
   d75e2:	d003      	beq.n	d75ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d75e4:	4669      	mov	r1, sp
   d75e6:	4628      	mov	r0, r5
   d75e8:	f7ff fef8 	bl	d73dc <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d75ec:	f3bf 8f5f 	dmb	sy
   d75f0:	2301      	movs	r3, #1
   d75f2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d75f4:	2000      	movs	r0, #0
   d75f6:	f104 0308 	add.w	r3, r4, #8
   d75fa:	f3bf 8f5f 	dmb	sy
   d75fe:	e853 6f00 	ldrex	r6, [r3]
   d7602:	e843 0200 	strex	r2, r0, [r3]
   d7606:	2a00      	cmp	r2, #0
   d7608:	d1f9      	bne.n	d75fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d760a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d760e:	2e00      	cmp	r6, #0
   d7610:	d049      	beq.n	d76a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7612:	f7ff fc13 	bl	d6e3c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7616:	b120      	cbz	r0, d7622 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7618:	4629      	mov	r1, r5
   d761a:	4630      	mov	r0, r6
   d761c:	f7ff ff98 	bl	d7550 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7620:	e03a      	b.n	d7698 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7622:	4631      	mov	r1, r6
   d7624:	a802      	add	r0, sp, #8
   d7626:	f7ff ffb3 	bl	d7590 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d762a:	68e0      	ldr	r0, [r4, #12]
   d762c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7630:	b108      	cbz	r0, d7636 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d7632:	f002 ff09 	bl	da448 <strdup>
   d7636:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7638:	2010      	movs	r0, #16
   d763a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d763e:	f7fc fd2c 	bl	d409a <_Znwj>
   d7642:	4605      	mov	r5, r0
   d7644:	b1e8      	cbz	r0, d7682 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7646:	2700      	movs	r7, #0
   d7648:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d764a:	2018      	movs	r0, #24
   d764c:	f7fc fd25 	bl	d409a <_Znwj>
   d7650:	4604      	mov	r4, r0
   d7652:	b188      	cbz	r0, d7678 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7654:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7656:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7658:	a802      	add	r0, sp, #8
   d765a:	f7ff ff54 	bl	d7506 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d765e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7660:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7662:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7664:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7666:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7668:	a906      	add	r1, sp, #24
   d766a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d766c:	60e3      	str	r3, [r4, #12]
   d766e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7672:	9205      	str	r2, [sp, #20]
   d7674:	f7ff feb2 	bl	d73dc <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7678:	4b0d      	ldr	r3, [pc, #52]	; (d76b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d767a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d767c:	4b0d      	ldr	r3, [pc, #52]	; (d76b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d767e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7680:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d7682:	a806      	add	r0, sp, #24
   d7684:	f7ff feb9 	bl	d73fa <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7688:	a802      	add	r0, sp, #8
   d768a:	f7ff fe9e 	bl	d73ca <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d768e:	2200      	movs	r2, #0
   d7690:	4629      	mov	r1, r5
   d7692:	4809      	ldr	r0, [pc, #36]	; (d76b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d7694:	f7ff fbda 	bl	d6e4c <application_thread_invoke>
   d7698:	4630      	mov	r0, r6
   d769a:	f7ff fe96 	bl	d73ca <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d769e:	2110      	movs	r1, #16
   d76a0:	4630      	mov	r0, r6
   d76a2:	f001 fbda 	bl	d8e5a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d76a6:	4668      	mov	r0, sp
   d76a8:	f7ff fea7 	bl	d73fa <_ZN8particle5ErrorD1Ev>
    }
   d76ac:	b009      	add	sp, #36	; 0x24
   d76ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d76b0:	000d7563 	.word	0x000d7563
   d76b4:	000d77d9 	.word	0x000d77d9
   d76b8:	000d70d3 	.word	0x000d70d3

000d76bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d76bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d76c0:	b08b      	sub	sp, #44	; 0x2c
   d76c2:	4606      	mov	r6, r0
   d76c4:	460f      	mov	r7, r1
   d76c6:	4690      	mov	r8, r2
   d76c8:	4699      	mov	r9, r3
   d76ca:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d76ce:	f7ff fc25 	bl	d6f1c <spark_cloud_flag_connected>
   d76d2:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d76d4:	4683      	mov	fp, r0
   d76d6:	bb30      	cbnz	r0, d7726 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d76d8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d76dc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d76de:	a905      	add	r1, sp, #20
   d76e0:	4628      	mov	r0, r5
   d76e2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d76e6:	f7ff fe79 	bl	d73dc <_ZN8particle5ErrorC1EOS0_>
   d76ea:	2014      	movs	r0, #20
   d76ec:	f7fc fcd5 	bl	d409a <_Znwj>
   d76f0:	4604      	mov	r4, r0
   d76f2:	b158      	cbz	r0, d770c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d76f4:	2302      	movs	r3, #2
   d76f6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d76f8:	2301      	movs	r3, #1
   d76fa:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d76fc:	f8c0 b004 	str.w	fp, [r0, #4]
   d7700:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d7704:	4629      	mov	r1, r5
   d7706:	300c      	adds	r0, #12
   d7708:	f7ff fe68 	bl	d73dc <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d770c:	4630      	mov	r0, r6
   d770e:	4621      	mov	r1, r4
   d7710:	f840 4b04 	str.w	r4, [r0], #4
   d7714:	f7ff ff08 	bl	d7528 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7718:	4628      	mov	r0, r5
   d771a:	f7ff fe6e 	bl	d73fa <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d771e:	a805      	add	r0, sp, #20
   d7720:	f7ff fe6b 	bl	d73fa <_ZN8particle5ErrorD1Ev>
   d7724:	e052      	b.n	d77cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7726:	2400      	movs	r4, #0
   d7728:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d772a:	2014      	movs	r0, #20
   d772c:	606c      	str	r4, [r5, #4]
   d772e:	60ac      	str	r4, [r5, #8]
   d7730:	9307      	str	r3, [sp, #28]
   d7732:	f7fc fcb2 	bl	d409a <_Znwj>
   d7736:	4601      	mov	r1, r0
   d7738:	b118      	cbz	r0, d7742 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d773a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d773c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d773e:	6044      	str	r4, [r0, #4]
   d7740:	6084      	str	r4, [r0, #8]
   d7742:	a804      	add	r0, sp, #16
   d7744:	9103      	str	r1, [sp, #12]
   d7746:	f7ff feef 	bl	d7528 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d774a:	4b22      	ldr	r3, [pc, #136]	; (d77d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d774c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d774e:	2008      	movs	r0, #8
   d7750:	f7fc fca3 	bl	d409a <_Znwj>
   d7754:	4604      	mov	r4, r0
   d7756:	b128      	cbz	r0, d7764 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7758:	9b03      	ldr	r3, [sp, #12]
   d775a:	f840 3b04 	str.w	r3, [r0], #4
   d775e:	a904      	add	r1, sp, #16
   d7760:	f7ff fcd3 	bl	d710a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7764:	9500      	str	r5, [sp, #0]
   d7766:	fa5f f38a 	uxtb.w	r3, sl
   d776a:	464a      	mov	r2, r9
   d776c:	4641      	mov	r1, r8
   d776e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d7770:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7772:	f7ff fbe3 	bl	d6f3c <spark_send_event>
   d7776:	b920      	cbnz	r0, d7782 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d7778:	9b03      	ldr	r3, [sp, #12]
   d777a:	785b      	ldrb	r3, [r3, #1]
   d777c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d7780:	b183      	cbz	r3, d77a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d7782:	9b03      	ldr	r3, [sp, #12]
   d7784:	9305      	str	r3, [sp, #20]
   d7786:	a904      	add	r1, sp, #16
   d7788:	a806      	add	r0, sp, #24
   d778a:	f7ff fcbe 	bl	d710a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d778e:	a905      	add	r1, sp, #20
   d7790:	4630      	mov	r0, r6
   d7792:	f7ff fe89 	bl	d74a8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7796:	a806      	add	r0, sp, #24
   d7798:	f7fc fff6 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d779c:	a804      	add	r0, sp, #16
   d779e:	f7fc fff3 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d77a2:	e013      	b.n	d77cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d77a4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d77a8:	a905      	add	r1, sp, #20
   d77aa:	a803      	add	r0, sp, #12
   d77ac:	9205      	str	r2, [sp, #20]
   d77ae:	f8ad 3018 	strh.w	r3, [sp, #24]
   d77b2:	f7ff fefd 	bl	d75b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d77b6:	a805      	add	r0, sp, #20
   d77b8:	f7ff fe1f 	bl	d73fa <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d77bc:	a805      	add	r0, sp, #20
   d77be:	9909      	ldr	r1, [sp, #36]	; 0x24
   d77c0:	f7ff fe83 	bl	d74ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d77c4:	a806      	add	r0, sp, #24
   d77c6:	f7fc ffdf 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d77ca:	e7da      	b.n	d7782 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d77cc:	4630      	mov	r0, r6
   d77ce:	b00b      	add	sp, #44	; 0x2c
   d77d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d77d4:	000d7949 	.word	0x000d7949

000d77d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d77d8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d77da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d77dc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d77de:	d006      	beq.n	d77ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d77e0:	2a03      	cmp	r2, #3
   d77e2:	d017      	beq.n	d7814 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d77e4:	2a01      	cmp	r2, #1
   d77e6:	d122      	bne.n	d782e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d77e8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d77ea:	6003      	str	r3, [r0, #0]
	      break;
   d77ec:	e01f      	b.n	d782e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d77ee:	2018      	movs	r0, #24
   d77f0:	680e      	ldr	r6, [r1, #0]
   d77f2:	f7fc fc52 	bl	d409a <_Znwj>
   d77f6:	4605      	mov	r5, r0
   d77f8:	b150      	cbz	r0, d7810 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d77fa:	4631      	mov	r1, r6
   d77fc:	f7ff fec8 	bl	d7590 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7800:	6930      	ldr	r0, [r6, #16]
   d7802:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7806:	b108      	cbz	r0, d780c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d7808:	f002 fe1e 	bl	da448 <strdup>
   d780c:	6128      	str	r0, [r5, #16]
   d780e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7810:	6025      	str	r5, [r4, #0]
   d7812:	e00c      	b.n	d782e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7814:	6804      	ldr	r4, [r0, #0]
   d7816:	b154      	cbz	r4, d782e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d7818:	f104 0010 	add.w	r0, r4, #16
   d781c:	f7ff fded 	bl	d73fa <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7820:	4620      	mov	r0, r4
   d7822:	f7ff fdd2 	bl	d73ca <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7826:	2118      	movs	r1, #24
   d7828:	4620      	mov	r0, r4
   d782a:	f001 fb16 	bl	d8e5a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d782e:	2000      	movs	r0, #0
   d7830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7832 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7832:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7834:	2300      	movs	r3, #0
   d7836:	6083      	str	r3, [r0, #8]
   d7838:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d783a:	4604      	mov	r4, r0
   d783c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d783e:	b12b      	cbz	r3, d784c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7840:	2202      	movs	r2, #2
   d7842:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7844:	68eb      	ldr	r3, [r5, #12]
   d7846:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7848:	68ab      	ldr	r3, [r5, #8]
   d784a:	60a3      	str	r3, [r4, #8]
	}
    }
   d784c:	4620      	mov	r0, r4
   d784e:	bd38      	pop	{r3, r4, r5, pc}

000d7850 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7850:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7852:	b570      	push	{r4, r5, r6, lr}
   d7854:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7856:	d006      	beq.n	d7866 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d7858:	2a03      	cmp	r2, #3
   d785a:	d011      	beq.n	d7880 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d785c:	2a01      	cmp	r2, #1
   d785e:	d118      	bne.n	d7892 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7860:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7862:	6003      	str	r3, [r0, #0]
	      break;
   d7864:	e015      	b.n	d7892 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7866:	2014      	movs	r0, #20
   d7868:	680e      	ldr	r6, [r1, #0]
   d786a:	f7fc fc16 	bl	d409a <_Znwj>
   d786e:	4605      	mov	r5, r0
   d7870:	b120      	cbz	r0, d787c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7872:	4631      	mov	r1, r6
   d7874:	f7ff ffdd 	bl	d7832 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7878:	7c33      	ldrb	r3, [r6, #16]
   d787a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d787c:	6025      	str	r5, [r4, #0]
   d787e:	e008      	b.n	d7892 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7880:	6804      	ldr	r4, [r0, #0]
   d7882:	b134      	cbz	r4, d7892 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7884:	4620      	mov	r0, r4
   d7886:	f7ff fda0 	bl	d73ca <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d788a:	2114      	movs	r1, #20
   d788c:	4620      	mov	r0, r4
   d788e:	f001 fae4 	bl	d8e5a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7892:	2000      	movs	r0, #0
   d7894:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7898 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d7898:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d789a:	2300      	movs	r3, #0
   d789c:	b087      	sub	sp, #28
   d789e:	460c      	mov	r4, r1
   d78a0:	f3bf 8f5f 	dmb	sy
   d78a4:	e850 6f00 	ldrex	r6, [r0]
   d78a8:	e840 3200 	strex	r2, r3, [r0]
   d78ac:	2a00      	cmp	r2, #0
   d78ae:	d1f9      	bne.n	d78a4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d78b0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d78b4:	2e00      	cmp	r6, #0
   d78b6:	d03f      	beq.n	d7938 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d78b8:	4618      	mov	r0, r3
   d78ba:	f7ff fabf 	bl	d6e3c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d78be:	4607      	mov	r7, r0
   d78c0:	b120      	cbz	r0, d78cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d78c2:	4621      	mov	r1, r4
   d78c4:	4630      	mov	r0, r6
   d78c6:	f7ff fe53 	bl	d7570 <_ZNKSt8functionIFvRKbEEclES1_>
   d78ca:	e02e      	b.n	d792a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d78cc:	4631      	mov	r1, r6
   d78ce:	a801      	add	r0, sp, #4
   d78d0:	f7ff ffaf 	bl	d7832 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d78d4:	7823      	ldrb	r3, [r4, #0]
   d78d6:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d78da:	2010      	movs	r0, #16
   d78dc:	f7fc fbdd 	bl	d409a <_Znwj>
   d78e0:	4605      	mov	r5, r0
   d78e2:	b1d0      	cbz	r0, d791a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d78e4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d78e6:	2014      	movs	r0, #20
   d78e8:	f7fc fbd7 	bl	d409a <_Znwj>
   d78ec:	4604      	mov	r4, r0
   d78ee:	b178      	cbz	r0, d7910 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d78f0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d78f2:	4601      	mov	r1, r0
   d78f4:	a801      	add	r0, sp, #4
   d78f6:	f7ff fe06 	bl	d7506 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78fa:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d78fc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d78fe:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7900:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7902:	9203      	str	r2, [sp, #12]
   d7904:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7906:	60e3      	str	r3, [r4, #12]
   d7908:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d790c:	9204      	str	r2, [sp, #16]
   d790e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7910:	4b0a      	ldr	r3, [pc, #40]	; (d793c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d7912:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7914:	4b0a      	ldr	r3, [pc, #40]	; (d7940 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7916:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7918:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d791a:	a801      	add	r0, sp, #4
   d791c:	f7ff fd55 	bl	d73ca <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7920:	2200      	movs	r2, #0
   d7922:	4629      	mov	r1, r5
   d7924:	4807      	ldr	r0, [pc, #28]	; (d7944 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d7926:	f7ff fa91 	bl	d6e4c <application_thread_invoke>
   d792a:	4630      	mov	r0, r6
   d792c:	f7ff fd4d 	bl	d73ca <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7930:	2110      	movs	r1, #16
   d7932:	4630      	mov	r0, r6
   d7934:	f001 fa91 	bl	d8e5a <_ZdlPvj>
        }
    }
   d7938:	b007      	add	sp, #28
   d793a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d793c:	000d7583 	.word	0x000d7583
   d7940:	000d7851 	.word	0x000d7851
   d7944:	000d70d3 	.word	0x000d70d3

000d7948 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7948:	b530      	push	{r4, r5, lr}
   d794a:	b085      	sub	sp, #20
   d794c:	4604      	mov	r4, r0
   d794e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7950:	4668      	mov	r0, sp
   d7952:	4611      	mov	r1, r2
   d7954:	f7ff fdb9 	bl	d74ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7958:	b17c      	cbz	r4, d797a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d795a:	b224      	sxth	r4, r4
   d795c:	4628      	mov	r0, r5
   d795e:	b10d      	cbz	r5, d7964 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d7960:	f002 fd72 	bl	da448 <strdup>
   d7964:	9002      	str	r0, [sp, #8]
   d7966:	a902      	add	r1, sp, #8
   d7968:	4668      	mov	r0, sp
   d796a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d796e:	f7ff fe1f 	bl	d75b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7972:	a802      	add	r0, sp, #8
   d7974:	f7ff fd41 	bl	d73fa <_ZN8particle5ErrorD1Ev>
   d7978:	e01d      	b.n	d79b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d797a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d797c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7980:	f04f 0201 	mov.w	r2, #1
   d7984:	e8d0 3f4f 	ldrexb	r3, [r0]
   d7988:	42a3      	cmp	r3, r4
   d798a:	d103      	bne.n	d7994 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d798c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d7990:	2900      	cmp	r1, #0
   d7992:	d1f7      	bne.n	d7984 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d7994:	d002      	beq.n	d799c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d7996:	f88d 3008 	strb.w	r3, [sp, #8]
   d799a:	e00c      	b.n	d79b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d799c:	f110 010c 	adds.w	r1, r0, #12
   d79a0:	f04f 0301 	mov.w	r3, #1
   d79a4:	bf18      	it	ne
   d79a6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d79a8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d79ac:	3004      	adds	r0, #4
   d79ae:	f800 3c03 	strb.w	r3, [r0, #-3]
   d79b2:	f7ff ff71 	bl	d7898 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d79b6:	a801      	add	r0, sp, #4
   d79b8:	f7fc fee6 	bl	d4788 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d79bc:	b005      	add	sp, #20
   d79be:	bd30      	pop	{r4, r5, pc}

000d79c0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d79c0:	2200      	movs	r2, #0
   d79c2:	4611      	mov	r1, r2
   d79c4:	6840      	ldr	r0, [r0, #4]
   d79c6:	f7ff bb21 	b.w	d700c <network_listening>

000d79ca <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d79ca:	2200      	movs	r2, #0
   d79cc:	4611      	mov	r1, r2
   d79ce:	6840      	ldr	r0, [r0, #4]
   d79d0:	f7ff bb2c 	b.w	d702c <network_get_listen_timeout>

000d79d4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d79d4:	2200      	movs	r2, #0
   d79d6:	6840      	ldr	r0, [r0, #4]
   d79d8:	f7ff bb20 	b.w	d701c <network_set_listen_timeout>

000d79dc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d79dc:	2200      	movs	r2, #0
   d79de:	f081 0101 	eor.w	r1, r1, #1
   d79e2:	6840      	ldr	r0, [r0, #4]
   d79e4:	f7ff bb0a 	b.w	d6ffc <network_listen>

000d79e8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d79e8:	2300      	movs	r3, #0
   d79ea:	461a      	mov	r2, r3
   d79ec:	4619      	mov	r1, r3
   d79ee:	6840      	ldr	r0, [r0, #4]
   d79f0:	f7ff bafc 	b.w	d6fec <network_off>

000d79f4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d79f4:	2300      	movs	r3, #0
   d79f6:	461a      	mov	r2, r3
   d79f8:	4619      	mov	r1, r3
   d79fa:	6840      	ldr	r0, [r0, #4]
   d79fc:	f7ff baee 	b.w	d6fdc <network_on>

000d7a00 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7a00:	2200      	movs	r2, #0
   d7a02:	4611      	mov	r1, r2
   d7a04:	6840      	ldr	r0, [r0, #4]
   d7a06:	f7ff bae1 	b.w	d6fcc <network_ready>

000d7a0a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7a0a:	2200      	movs	r2, #0
   d7a0c:	4611      	mov	r1, r2
   d7a0e:	6840      	ldr	r0, [r0, #4]
   d7a10:	f7ff bacc 	b.w	d6fac <network_connecting>

000d7a14 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7a14:	2200      	movs	r2, #0
   d7a16:	2102      	movs	r1, #2
   d7a18:	6840      	ldr	r0, [r0, #4]
   d7a1a:	f7ff bacf 	b.w	d6fbc <network_disconnect>

000d7a1e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7a1e:	2300      	movs	r3, #0
   d7a20:	461a      	mov	r2, r3
   d7a22:	6840      	ldr	r0, [r0, #4]
   d7a24:	f7ff baba 	b.w	d6f9c <network_connect>

000d7a28 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d7a28:	4b02      	ldr	r3, [pc, #8]	; (d7a34 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7a2a:	2203      	movs	r2, #3
   d7a2c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7a2e:	4a02      	ldr	r2, [pc, #8]	; (d7a38 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7a30:	601a      	str	r2, [r3, #0]
   d7a32:	4770      	bx	lr
   d7a34:	2003e1d8 	.word	0x2003e1d8
   d7a38:	000dd894 	.word	0x000dd894

000d7a3c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7a3c:	4770      	bx	lr

000d7a3e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a40:	4606      	mov	r6, r0
   d7a42:	4615      	mov	r5, r2
   d7a44:	460c      	mov	r4, r1
   d7a46:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7a48:	42bc      	cmp	r4, r7
   d7a4a:	d006      	beq.n	d7a5a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7a4c:	6833      	ldr	r3, [r6, #0]
   d7a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7a52:	689b      	ldr	r3, [r3, #8]
   d7a54:	4630      	mov	r0, r6
   d7a56:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7a58:	e7f6      	b.n	d7a48 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7a5a:	4628      	mov	r0, r5
   d7a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7a5e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7a5e:	2200      	movs	r2, #0
   d7a60:	7c00      	ldrb	r0, [r0, #16]
   d7a62:	f7ff b8b9 	b.w	d6bd8 <HAL_I2C_Write_Data>

000d7a66 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7a66:	2100      	movs	r1, #0
   d7a68:	7c00      	ldrb	r0, [r0, #16]
   d7a6a:	f7ff b8bd 	b.w	d6be8 <HAL_I2C_Available_Data>

000d7a6e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7a6e:	2100      	movs	r1, #0
   d7a70:	7c00      	ldrb	r0, [r0, #16]
   d7a72:	f7ff b8c1 	b.w	d6bf8 <HAL_I2C_Read_Data>

000d7a76 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7a76:	2100      	movs	r1, #0
   d7a78:	7c00      	ldrb	r0, [r0, #16]
   d7a7a:	f7ff b8c5 	b.w	d6c08 <HAL_I2C_Peek_Data>

000d7a7e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7a7e:	2100      	movs	r1, #0
   d7a80:	7c00      	ldrb	r0, [r0, #16]
   d7a82:	f7ff b8c9 	b.w	d6c18 <HAL_I2C_Flush_Data>

000d7a86 <_ZN7TwoWireD0Ev>:
   d7a86:	b510      	push	{r4, lr}
   d7a88:	2114      	movs	r1, #20
   d7a8a:	4604      	mov	r4, r0
   d7a8c:	f001 f9e5 	bl	d8e5a <_ZdlPvj>
   d7a90:	4620      	mov	r0, r4
   d7a92:	bd10      	pop	{r4, pc}

000d7a94 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7a94:	b510      	push	{r4, lr}
   d7a96:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7a98:	2300      	movs	r3, #0
   d7a9a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7a9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7aa0:	60a3      	str	r3, [r4, #8]
   d7aa2:	4b04      	ldr	r3, [pc, #16]	; (d7ab4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7aa4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7aa6:	4608      	mov	r0, r1
   d7aa8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d7aaa:	4611      	mov	r1, r2
   d7aac:	f7ff f8c4 	bl	d6c38 <HAL_I2C_Init>
}
   d7ab0:	4620      	mov	r0, r4
   d7ab2:	bd10      	pop	{r4, pc}
   d7ab4:	000dd8c8 	.word	0x000dd8c8

000d7ab8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7ab8:	2300      	movs	r3, #0
   d7aba:	461a      	mov	r2, r3
   d7abc:	4619      	mov	r1, r3
   d7abe:	7c00      	ldrb	r0, [r0, #16]
   d7ac0:	f7ff b872 	b.w	d6ba8 <HAL_I2C_Begin>

000d7ac4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7ac4:	b570      	push	{r4, r5, r6, lr}
   d7ac6:	460c      	mov	r4, r1
   d7ac8:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d7aca:	2514      	movs	r5, #20
   d7acc:	4606      	mov	r6, r0
   d7ace:	462a      	mov	r2, r5
   d7ad0:	2100      	movs	r1, #0
   d7ad2:	a801      	add	r0, sp, #4
   d7ad4:	f002 fa27 	bl	d9f26 <memset>
   d7ad8:	7823      	ldrb	r3, [r4, #0]
   d7ada:	f88d 3008 	strb.w	r3, [sp, #8]
   d7ade:	6863      	ldr	r3, [r4, #4]
   d7ae0:	9303      	str	r3, [sp, #12]
   d7ae2:	68e3      	ldr	r3, [r4, #12]
   d7ae4:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d7ae6:	2200      	movs	r2, #0
   d7ae8:	7a23      	ldrb	r3, [r4, #8]
   d7aea:	7c30      	ldrb	r0, [r6, #16]
   d7aec:	f8ad 5004 	strh.w	r5, [sp, #4]
   d7af0:	a901      	add	r1, sp, #4
   d7af2:	9305      	str	r3, [sp, #20]
   d7af4:	f7ff f8b8 	bl	d6c68 <HAL_I2C_Request_Data_Ex>
}
   d7af8:	b006      	add	sp, #24
   d7afa:	bd70      	pop	{r4, r5, r6, pc}

000d7afc <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d7afc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7afe:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7b00:	f88d 1000 	strb.w	r1, [sp]
   d7b04:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7b08:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7b0a:	bf18      	it	ne
   d7b0c:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7b0e:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d7b10:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7b12:	f88d 3008 	strb.w	r3, [sp, #8]
   d7b16:	f7ff ffd5 	bl	d7ac4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7b1a:	b005      	add	sp, #20
   d7b1c:	f85d fb04 	ldr.w	pc, [sp], #4

000d7b20 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d7b20:	2200      	movs	r2, #0
   d7b22:	7c00      	ldrb	r0, [r0, #16]
   d7b24:	f7ff b848 	b.w	d6bb8 <HAL_I2C_Begin_Transmission>

000d7b28 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d7b28:	b2c9      	uxtb	r1, r1
   d7b2a:	f7ff bff9 	b.w	d7b20 <_ZN7TwoWire17beginTransmissionEh>

000d7b2e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d7b2e:	2200      	movs	r2, #0
   d7b30:	7c00      	ldrb	r0, [r0, #16]
   d7b32:	f7ff b849 	b.w	d6bc8 <HAL_I2C_End_Transmission>

000d7b36 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7b36:	2100      	movs	r1, #0
   d7b38:	7c00      	ldrb	r0, [r0, #16]
   d7b3a:	f7ff b875 	b.w	d6c28 <HAL_I2C_Is_Enabled>

000d7b3e <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d7b3e:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d7b40:	2100      	movs	r1, #0
   d7b42:	7c00      	ldrb	r0, [r0, #16]
   d7b44:	f7ff f880 	bl	d6c48 <HAL_I2C_Acquire>
}
   d7b48:	fab0 f080 	clz	r0, r0
   d7b4c:	0940      	lsrs	r0, r0, #5
   d7b4e:	bd08      	pop	{r3, pc}

000d7b50 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d7b50:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d7b52:	2100      	movs	r1, #0
   d7b54:	7c00      	ldrb	r0, [r0, #16]
   d7b56:	f7ff f87f 	bl	d6c58 <HAL_I2C_Release>
}
   d7b5a:	fab0 f080 	clz	r0, r0
   d7b5e:	0940      	lsrs	r0, r0, #5
   d7b60:	bd08      	pop	{r3, pc}

000d7b62 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d7b62:	4700      	bx	r0

000d7b64 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7b64:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7b66:	b085      	sub	sp, #20
   d7b68:	461c      	mov	r4, r3
   d7b6a:	460e      	mov	r6, r1
   d7b6c:	4617      	mov	r7, r2
   d7b6e:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d7b70:	f7ff f80a 	bl	d6b88 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d7b74:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d7b76:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7b78:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d7b7c:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7b7e:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d7b82:	bfa5      	ittet	ge
   d7b84:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d7b88:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d7b8c:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d7b8e:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7b90:	9300      	str	r3, [sp, #0]
   d7b92:	4632      	mov	r2, r6
   d7b94:	463b      	mov	r3, r7
   d7b96:	4906      	ldr	r1, [pc, #24]	; (d7bb0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d7b98:	bfa8      	it	ge
   d7b9a:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7b9e:	4628      	mov	r0, r5
   d7ba0:	f7fe ffea 	bl	d6b78 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d7ba4:	fab0 f080 	clz	r0, r0
   d7ba8:	0940      	lsrs	r0, r0, #5
   d7baa:	b005      	add	sp, #20
   d7bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7bae:	bf00      	nop
   d7bb0:	000d7b63 	.word	0x000d7b63

000d7bb4 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   d7bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7bb6:	4606      	mov	r6, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   d7bb8:	f7fe ffe6 	bl	d6b88 <HAL_Interrupts_Detach>
   d7bbc:	4607      	mov	r7, r0
   d7bbe:	b968      	cbnz	r0, d7bdc <_Z15detachInterruptt+0x28>
        return false;
    }
    if (handlers[pin]) {
   d7bc0:	4d08      	ldr	r5, [pc, #32]	; (d7be4 <_Z15detachInterruptt+0x30>)
   d7bc2:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
   d7bc6:	b15c      	cbz	r4, d7be0 <_Z15detachInterruptt+0x2c>
   d7bc8:	4620      	mov	r0, r4
   d7bca:	f7ff fbfe 	bl	d73ca <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   d7bce:	2110      	movs	r1, #16
   d7bd0:	4620      	mov	r0, r4
   d7bd2:	f001 f942 	bl	d8e5a <_ZdlPvj>
        handlers[pin] = nullptr;
   d7bd6:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   d7bda:	e001      	b.n	d7be0 <_Z15detachInterruptt+0x2c>
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
        return false;
   d7bdc:	2000      	movs	r0, #0
   d7bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (handlers[pin]) {
        delete handlers[pin];
        handlers[pin] = nullptr;
    }
    return true;
   d7be0:	2001      	movs	r0, #1
}
   d7be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7be4:	2003e1e0 	.word	0x2003e1e0

000d7be8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7be8:	4770      	bx	lr

000d7bea <_ZN9IPAddressD0Ev>:
   d7bea:	b510      	push	{r4, lr}
   d7bec:	2118      	movs	r1, #24
   d7bee:	4604      	mov	r4, r0
   d7bf0:	f001 f933 	bl	d8e5a <_ZdlPvj>
   d7bf4:	4620      	mov	r0, r4
   d7bf6:	bd10      	pop	{r4, pc}

000d7bf8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7bfa:	7d03      	ldrb	r3, [r0, #20]
   d7bfc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7bfe:	b08d      	sub	sp, #52	; 0x34
   d7c00:	460e      	mov	r6, r1
   d7c02:	f100 0704 	add.w	r7, r0, #4
   d7c06:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7c0a:	d002      	beq.n	d7c12 <_ZNK9IPAddress7printToER5Print+0x1a>
   d7c0c:	f100 0508 	add.w	r5, r0, #8
   d7c10:	e018      	b.n	d7c44 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7c12:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7c14:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7c16:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7c1a:	232f      	movs	r3, #47	; 0x2f
   d7c1c:	462a      	mov	r2, r5
   d7c1e:	200a      	movs	r0, #10
   d7c20:	f7ff f82a 	bl	d6c78 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7c24:	4628      	mov	r0, r5
   d7c26:	f003 f93f 	bl	daea8 <strlen>
   d7c2a:	6833      	ldr	r3, [r6, #0]
   d7c2c:	4602      	mov	r2, r0
   d7c2e:	68db      	ldr	r3, [r3, #12]
   d7c30:	4629      	mov	r1, r5
   d7c32:	4630      	mov	r0, r6
   d7c34:	4798      	blx	r3
   d7c36:	e00f      	b.n	d7c58 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7c38:	b124      	cbz	r4, d7c44 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7c3a:	212e      	movs	r1, #46	; 0x2e
   d7c3c:	4630      	mov	r0, r6
   d7c3e:	f000 fa79 	bl	d8134 <_ZN5Print5printEc>
   d7c42:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7c44:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7c48:	220a      	movs	r2, #10
   d7c4a:	4630      	mov	r0, r6
   d7c4c:	f000 fa8b 	bl	d8166 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7c50:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7c52:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7c54:	d1f0      	bne.n	d7c38 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7c56:	4620      	mov	r0, r4
    }
    return n;
}
   d7c58:	b00d      	add	sp, #52	; 0x34
   d7c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7c5c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7c5c:	b510      	push	{r4, lr}
   d7c5e:	4b05      	ldr	r3, [pc, #20]	; (d7c74 <_ZN9IPAddressC1Ev+0x18>)
   d7c60:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7c62:	2211      	movs	r2, #17
   d7c64:	f840 3b04 	str.w	r3, [r0], #4
   d7c68:	2100      	movs	r1, #0
   d7c6a:	f002 f95c 	bl	d9f26 <memset>
{
    clear();
}
   d7c6e:	4620      	mov	r0, r4
   d7c70:	bd10      	pop	{r4, pc}
   d7c72:	bf00      	nop
   d7c74:	000dd8f0 	.word	0x000dd8f0

000d7c78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7c78:	4603      	mov	r3, r0
   d7c7a:	4a07      	ldr	r2, [pc, #28]	; (d7c98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7c7c:	b510      	push	{r4, lr}
   d7c7e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7c82:	f101 0210 	add.w	r2, r1, #16
   d7c86:	f851 4b04 	ldr.w	r4, [r1], #4
   d7c8a:	f843 4b04 	str.w	r4, [r3], #4
   d7c8e:	4291      	cmp	r1, r2
   d7c90:	d1f9      	bne.n	d7c86 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7c92:	780a      	ldrb	r2, [r1, #0]
   d7c94:	701a      	strb	r2, [r3, #0]
}
   d7c96:	bd10      	pop	{r4, pc}
   d7c98:	000dd8f0 	.word	0x000dd8f0

000d7c9c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7c9c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7c9e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7ca2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7ca6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7caa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d7cae:	2304      	movs	r3, #4
   d7cb0:	6041      	str	r1, [r0, #4]
   d7cb2:	7503      	strb	r3, [r0, #20]
   d7cb4:	bd10      	pop	{r4, pc}

000d7cb6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7cb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7cb8:	780d      	ldrb	r5, [r1, #0]
   d7cba:	788b      	ldrb	r3, [r1, #2]
   d7cbc:	784a      	ldrb	r2, [r1, #1]
   d7cbe:	78c9      	ldrb	r1, [r1, #3]
   d7cc0:	9100      	str	r1, [sp, #0]
   d7cc2:	4629      	mov	r1, r5
   d7cc4:	f7ff ffea 	bl	d7c9c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7cc8:	b003      	add	sp, #12
   d7cca:	bd30      	pop	{r4, r5, pc}

000d7ccc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7ccc:	4b01      	ldr	r3, [pc, #4]	; (d7cd4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7cce:	4a02      	ldr	r2, [pc, #8]	; (d7cd8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7cd0:	601a      	str	r2, [r3, #0]
   d7cd2:	4770      	bx	lr
   d7cd4:	2003e270 	.word	0x2003e270
   d7cd8:	000dd96c 	.word	0x000dd96c

000d7cdc <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7cdc:	2200      	movs	r2, #0
   d7cde:	4611      	mov	r1, r2
   d7ce0:	6840      	ldr	r0, [r0, #4]
   d7ce2:	f7ff b993 	b.w	d700c <network_listening>

000d7ce6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7ce6:	2200      	movs	r2, #0
   d7ce8:	4611      	mov	r1, r2
   d7cea:	6840      	ldr	r0, [r0, #4]
   d7cec:	f7ff b99e 	b.w	d702c <network_get_listen_timeout>

000d7cf0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7cf0:	2200      	movs	r2, #0
   d7cf2:	6840      	ldr	r0, [r0, #4]
   d7cf4:	f7ff b992 	b.w	d701c <network_set_listen_timeout>

000d7cf8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7cf8:	2200      	movs	r2, #0
   d7cfa:	f081 0101 	eor.w	r1, r1, #1
   d7cfe:	6840      	ldr	r0, [r0, #4]
   d7d00:	f7ff b97c 	b.w	d6ffc <network_listen>

000d7d04 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7d04:	2300      	movs	r3, #0
   d7d06:	461a      	mov	r2, r3
   d7d08:	2101      	movs	r1, #1
   d7d0a:	6840      	ldr	r0, [r0, #4]
   d7d0c:	f7ff b96e 	b.w	d6fec <network_off>

000d7d10 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7d10:	2300      	movs	r3, #0
   d7d12:	461a      	mov	r2, r3
   d7d14:	4619      	mov	r1, r3
   d7d16:	6840      	ldr	r0, [r0, #4]
   d7d18:	f7ff b960 	b.w	d6fdc <network_on>

000d7d1c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7d1c:	2200      	movs	r2, #0
   d7d1e:	4611      	mov	r1, r2
   d7d20:	6840      	ldr	r0, [r0, #4]
   d7d22:	f7ff b953 	b.w	d6fcc <network_ready>

000d7d26 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7d26:	2200      	movs	r2, #0
   d7d28:	4611      	mov	r1, r2
   d7d2a:	6840      	ldr	r0, [r0, #4]
   d7d2c:	f7ff b93e 	b.w	d6fac <network_connecting>

000d7d30 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7d30:	2200      	movs	r2, #0
   d7d32:	2102      	movs	r1, #2
   d7d34:	6840      	ldr	r0, [r0, #4]
   d7d36:	f7ff b941 	b.w	d6fbc <network_disconnect>

000d7d3a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7d3a:	2300      	movs	r3, #0
   d7d3c:	461a      	mov	r2, r3
   d7d3e:	6840      	ldr	r0, [r0, #4]
   d7d40:	f7ff b92c 	b.w	d6f9c <network_connect>

000d7d44 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7d44:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7d46:	4605      	mov	r5, r0
   d7d48:	b188      	cbz	r0, d7d6e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d4a:	6804      	ldr	r4, [r0, #0]
   d7d4c:	b14c      	cbz	r4, d7d62 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7d4e:	68a3      	ldr	r3, [r4, #8]
   d7d50:	b11b      	cbz	r3, d7d5a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7d52:	2203      	movs	r2, #3
   d7d54:	4621      	mov	r1, r4
   d7d56:	4620      	mov	r0, r4
   d7d58:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7d5a:	2110      	movs	r1, #16
   d7d5c:	4620      	mov	r0, r4
   d7d5e:	f001 f87c 	bl	d8e5a <_ZdlPvj>
   d7d62:	4628      	mov	r0, r5
   d7d64:	2114      	movs	r1, #20
      }
   d7d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7d6a:	f001 b876 	b.w	d8e5a <_ZdlPvj>
   d7d6e:	bd38      	pop	{r3, r4, r5, pc}

000d7d70 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7d70:	b110      	cbz	r0, d7d78 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7d72:	6803      	ldr	r3, [r0, #0]
   d7d74:	685b      	ldr	r3, [r3, #4]
   d7d76:	4718      	bx	r3
   d7d78:	4770      	bx	lr

000d7d7a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7d7a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7d7c:	6803      	ldr	r3, [r0, #0]
   d7d7e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7d80:	b1bb      	cbz	r3, d7db2 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7d82:	6858      	ldr	r0, [r3, #4]
   d7d84:	f7fe fe50 	bl	d6a28 <os_thread_is_current>
   d7d88:	b978      	cbnz	r0, d7daa <_ZN6ThreadD1Ev+0x30>
   d7d8a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7d8c:	7c5a      	ldrb	r2, [r3, #17]
   d7d8e:	b912      	cbnz	r2, d7d96 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7d90:	6858      	ldr	r0, [r3, #4]
   d7d92:	f7fe fe51 	bl	d6a38 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7d96:	6823      	ldr	r3, [r4, #0]
   d7d98:	6858      	ldr	r0, [r3, #4]
   d7d9a:	f7fe fe55 	bl	d6a48 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7d9e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7da0:	2300      	movs	r3, #0
   d7da2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7da4:	b128      	cbz	r0, d7db2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7da6:	f7ff ffcd 	bl	d7d44 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7daa:	6820      	ldr	r0, [r4, #0]
   d7dac:	b108      	cbz	r0, d7db2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7dae:	f7ff ffc9 	bl	d7d44 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7db2:	4620      	mov	r0, r4
   d7db4:	bd10      	pop	{r4, pc}

000d7db6 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7db6:	b538      	push	{r3, r4, r5, lr}
   d7db8:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7dba:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7dbe:	b108      	cbz	r0, d7dc4 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7dc0:	f7fc f96f 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7dc4:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7dc8:	b108      	cbz	r0, d7dce <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7dca:	f7fe fe4d 	bl	d6a68 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7dce:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d7dd2:	b135      	cbz	r5, d7de2 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7dd4:	4628      	mov	r0, r5
   d7dd6:	f7ff ffd0 	bl	d7d7a <_ZN6ThreadD1Ev>
   d7dda:	2104      	movs	r1, #4
   d7ddc:	4628      	mov	r0, r5
   d7dde:	f001 f83c 	bl	d8e5a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7de2:	6820      	ldr	r0, [r4, #0]
   d7de4:	b108      	cbz	r0, d7dea <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7de6:	f7ff ffc3 	bl	d7d70 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7dea:	4620      	mov	r0, r4
   d7dec:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7df0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7df0:	b510      	push	{r4, lr}
   d7df2:	4b04      	ldr	r3, [pc, #16]	; (d7e04 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7df4:	4604      	mov	r4, r0
   d7df6:	f840 3b08 	str.w	r3, [r0], #8
   d7dfa:	f7ff ffdc 	bl	d7db6 <_ZN5spark11MeshPublishD1Ev>
   d7dfe:	4620      	mov	r0, r4
   d7e00:	bd10      	pop	{r4, pc}
   d7e02:	bf00      	nop
   d7e04:	000dd9d8 	.word	0x000dd9d8

000d7e08 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7e08:	b538      	push	{r3, r4, r5, lr}
   d7e0a:	4c0e      	ldr	r4, [pc, #56]	; (d7e44 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7e0c:	4b0e      	ldr	r3, [pc, #56]	; (d7e48 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7e0e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7e10:	2500      	movs	r5, #0
   d7e12:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7e14:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7e18:	6063      	str	r3, [r4, #4]
   d7e1a:	60a5      	str	r5, [r4, #8]
   d7e1c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7e20:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7e24:	f7fe fe18 	bl	d6a58 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7e28:	4b08      	ldr	r3, [pc, #32]	; (d7e4c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7e2a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7e2e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7e32:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7e34:	4620      	mov	r0, r4
   d7e36:	4a06      	ldr	r2, [pc, #24]	; (d7e50 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7e38:	4906      	ldr	r1, [pc, #24]	; (d7e54 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7e3e:	f001 b807 	b.w	d8e50 <__aeabi_atexit>
   d7e42:	bf00      	nop
   d7e44:	2003e274 	.word	0x2003e274
   d7e48:	000dda0c 	.word	0x000dda0c
   d7e4c:	000dd9d8 	.word	0x000dd9d8
   d7e50:	2003e064 	.word	0x2003e064
   d7e54:	000d7df1 	.word	0x000d7df1

000d7e58 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7e58:	2300      	movs	r3, #0
   d7e5a:	461a      	mov	r2, r3
   d7e5c:	6840      	ldr	r0, [r0, #4]
   d7e5e:	f7ff b89d 	b.w	d6f9c <network_connect>

000d7e62 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7e62:	2200      	movs	r2, #0
   d7e64:	2102      	movs	r1, #2
   d7e66:	6840      	ldr	r0, [r0, #4]
   d7e68:	f7ff b8a8 	b.w	d6fbc <network_disconnect>

000d7e6c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7e6c:	2200      	movs	r2, #0
   d7e6e:	4611      	mov	r1, r2
   d7e70:	6840      	ldr	r0, [r0, #4]
   d7e72:	f7ff b89b 	b.w	d6fac <network_connecting>

000d7e76 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7e76:	2200      	movs	r2, #0
   d7e78:	4611      	mov	r1, r2
   d7e7a:	6840      	ldr	r0, [r0, #4]
   d7e7c:	f7ff b8a6 	b.w	d6fcc <network_ready>

000d7e80 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7e80:	2300      	movs	r3, #0
   d7e82:	461a      	mov	r2, r3
   d7e84:	4619      	mov	r1, r3
   d7e86:	6840      	ldr	r0, [r0, #4]
   d7e88:	f7ff b8a8 	b.w	d6fdc <network_on>

000d7e8c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7e8c:	2300      	movs	r3, #0
   d7e8e:	461a      	mov	r2, r3
   d7e90:	4619      	mov	r1, r3
   d7e92:	6840      	ldr	r0, [r0, #4]
   d7e94:	f7ff b8aa 	b.w	d6fec <network_off>

000d7e98 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7e98:	2200      	movs	r2, #0
   d7e9a:	f081 0101 	eor.w	r1, r1, #1
   d7e9e:	6840      	ldr	r0, [r0, #4]
   d7ea0:	f7ff b8ac 	b.w	d6ffc <network_listen>

000d7ea4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7ea4:	2200      	movs	r2, #0
   d7ea6:	6840      	ldr	r0, [r0, #4]
   d7ea8:	f7ff b8b8 	b.w	d701c <network_set_listen_timeout>

000d7eac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7eac:	2200      	movs	r2, #0
   d7eae:	4611      	mov	r1, r2
   d7eb0:	6840      	ldr	r0, [r0, #4]
   d7eb2:	f7ff b8bb 	b.w	d702c <network_get_listen_timeout>

000d7eb6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7eb6:	2200      	movs	r2, #0
   d7eb8:	4611      	mov	r1, r2
   d7eba:	6840      	ldr	r0, [r0, #4]
   d7ebc:	f7ff b8a6 	b.w	d700c <network_listening>

000d7ec0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7ec4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7ec6:	b095      	sub	sp, #84	; 0x54
   d7ec8:	4616      	mov	r6, r2
   d7eca:	460d      	mov	r5, r1
   d7ecc:	4607      	mov	r7, r0
    IPAddress addr;
   d7ece:	f7ff fec5 	bl	d7c5c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7ed2:	4621      	mov	r1, r4
   d7ed4:	2220      	movs	r2, #32
   d7ed6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7ed8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7eda:	f002 f824 	bl	d9f26 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7ede:	2340      	movs	r3, #64	; 0x40
   d7ee0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7ee2:	4621      	mov	r1, r4
   d7ee4:	466b      	mov	r3, sp
   d7ee6:	aa0c      	add	r2, sp, #48	; 0x30
   d7ee8:	4630      	mov	r0, r6
   d7eea:	f7fe fed5 	bl	d6c98 <netdb_getaddrinfo>
    if (!r) {
   d7eee:	4604      	mov	r4, r0
   d7ef0:	2800      	cmp	r0, #0
   d7ef2:	d144      	bne.n	d7f7e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7ef4:	4602      	mov	r2, r0
   d7ef6:	2101      	movs	r1, #1
   d7ef8:	6868      	ldr	r0, [r5, #4]
   d7efa:	f7ff f867 	bl	d6fcc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7efe:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7f00:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7f02:	4622      	mov	r2, r4
   d7f04:	6868      	ldr	r0, [r5, #4]
   d7f06:	f7ff f861 	bl	d6fcc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7f0a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7f0c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7f0e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7f10:	2e00      	cmp	r6, #0
   d7f12:	d034      	beq.n	d7f7e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7f14:	2900      	cmp	r1, #0
   d7f16:	d132      	bne.n	d7f7e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7f18:	6873      	ldr	r3, [r6, #4]
   d7f1a:	2b02      	cmp	r3, #2
   d7f1c:	d002      	beq.n	d7f24 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7f1e:	2b0a      	cmp	r3, #10
   d7f20:	d009      	beq.n	d7f36 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7f22:	e02a      	b.n	d7f7a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7f24:	f1b8 0f00 	cmp.w	r8, #0
   d7f28:	d027      	beq.n	d7f7a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7f2a:	6971      	ldr	r1, [r6, #20]
   d7f2c:	4638      	mov	r0, r7
   d7f2e:	3104      	adds	r1, #4
   d7f30:	f7ff fec1 	bl	d7cb6 <_ZN9IPAddressaSEPKh>
   d7f34:	e020      	b.n	d7f78 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7f36:	f1b9 0f00 	cmp.w	r9, #0
   d7f3a:	d01e      	beq.n	d7f7a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7f3c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7f3e:	2211      	movs	r2, #17
   d7f40:	a801      	add	r0, sp, #4
   d7f42:	f001 fff0 	bl	d9f26 <memset>
                    a.v = 6;
   d7f46:	2306      	movs	r3, #6
   d7f48:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7f4c:	ad01      	add	r5, sp, #4
   d7f4e:	f104 0308 	add.w	r3, r4, #8
   d7f52:	3418      	adds	r4, #24
   d7f54:	6818      	ldr	r0, [r3, #0]
   d7f56:	6859      	ldr	r1, [r3, #4]
   d7f58:	462a      	mov	r2, r5
   d7f5a:	c203      	stmia	r2!, {r0, r1}
   d7f5c:	3308      	adds	r3, #8
   d7f5e:	42a3      	cmp	r3, r4
   d7f60:	4615      	mov	r5, r2
   d7f62:	d1f7      	bne.n	d7f54 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7f64:	a901      	add	r1, sp, #4
   d7f66:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7f68:	ad07      	add	r5, sp, #28
   d7f6a:	f7ff fe85 	bl	d7c78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7f70:	1d3c      	adds	r4, r7, #4
   d7f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7f74:	682b      	ldr	r3, [r5, #0]
   d7f76:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7f78:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7f7a:	69f6      	ldr	r6, [r6, #28]
   d7f7c:	e7c8      	b.n	d7f10 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7f7e:	9800      	ldr	r0, [sp, #0]
   d7f80:	f7fe fe82 	bl	d6c88 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7f84:	4638      	mov	r0, r7
   d7f86:	b015      	add	sp, #84	; 0x54
   d7f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7f8c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7f8c:	4b02      	ldr	r3, [pc, #8]	; (d7f98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7f8e:	4a03      	ldr	r2, [pc, #12]	; (d7f9c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7f90:	601a      	str	r2, [r3, #0]
   d7f92:	2200      	movs	r2, #0
   d7f94:	605a      	str	r2, [r3, #4]
   d7f96:	4770      	bx	lr
   d7f98:	2003e448 	.word	0x2003e448
   d7f9c:	000dda0c 	.word	0x000dda0c

000d7fa0 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d7fa0:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7fa2:	f000 ff2f 	bl	d8e04 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
   d7fa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
   d7faa:	f7ff bdc8 	b.w	d7b3e <_ZN7TwoWire4lockEv>

000d7fae <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
   d7fae:	b510      	push	{r4, lr}
   d7fb0:	4604      	mov	r4, r0
    lock_(_lock)
   d7fb2:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
   d7fb4:	b109      	cbz	r1, d7fba <_ZN4PMICC1Eb+0xc>
        lock();
   d7fb6:	f7ff fff3 	bl	d7fa0 <_ZN4PMIC4lockEv>
    }
}
   d7fba:	4620      	mov	r0, r4
   d7fbc:	bd10      	pop	{r4, pc}

000d7fbe <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
   d7fbe:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7fc0:	f000 ff20 	bl	d8e04 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
   d7fc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
   d7fc8:	f7ff bdc2 	b.w	d7b50 <_ZN7TwoWire6unlockEv>

000d7fcc <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d7fcc:	b510      	push	{r4, lr}
{
    if (lock_) {
   d7fce:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d7fd0:	4604      	mov	r4, r0
{
    if (lock_) {
   d7fd2:	b10b      	cbz	r3, d7fd8 <_ZN4PMICD1Ev+0xc>
        unlock();
   d7fd4:	f7ff fff3 	bl	d7fbe <_ZN4PMIC6unlockEv>
    }
}
   d7fd8:	4620      	mov	r0, r4
   d7fda:	bd10      	pop	{r4, pc}

000d7fdc <_ZNSt10lock_guardI4PMICED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7fdc:	b510      	push	{r4, lr}
   d7fde:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d7fe0:	6800      	ldr	r0, [r0, #0]
   d7fe2:	f7ff ffec 	bl	d7fbe <_ZN4PMIC6unlockEv>
   d7fe6:	4620      	mov	r0, r4
   d7fe8:	bd10      	pop	{r4, pc}

000d7fea <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
   d7fea:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7fec:	ac02      	add	r4, sp, #8
   d7fee:	460d      	mov	r5, r1
   d7ff0:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d7ff4:	f7ff ffd4 	bl	d7fa0 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7ff8:	f000 ff04 	bl	d8e04 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d7ffc:	216b      	movs	r1, #107	; 0x6b
   d7ffe:	f7ff fd93 	bl	d7b28 <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d8002:	f000 feff 	bl	d8e04 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
   d8006:	6803      	ldr	r3, [r0, #0]
   d8008:	4629      	mov	r1, r5
   d800a:	689b      	ldr	r3, [r3, #8]
   d800c:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d800e:	f000 fef9 	bl	d8e04 <_Z20__fetch_global_Wire1v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
   d8012:	2101      	movs	r1, #1
   d8014:	f7ff fd8b 	bl	d7b2e <_ZN7TwoWire15endTransmissionEh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d8018:	f000 fef4 	bl	d8e04 <_Z20__fetch_global_Wire1v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
   d801c:	2301      	movs	r3, #1
   d801e:	461a      	mov	r2, r3
   d8020:	216b      	movs	r1, #107	; 0x6b
   d8022:	f7ff fd6b 	bl	d7afc <_ZN7TwoWire11requestFromEhjh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d8026:	f000 feed 	bl	d8e04 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
   d802a:	6803      	ldr	r3, [r0, #0]
   d802c:	695b      	ldr	r3, [r3, #20]
   d802e:	4798      	blx	r3
   d8030:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
   d8032:	4620      	mov	r0, r4
   d8034:	f7ff ffd2 	bl	d7fdc <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
   d8038:	b2e8      	uxtb	r0, r5
   d803a:	b003      	add	sp, #12
   d803c:	bd30      	pop	{r4, r5, pc}

000d803e <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
   d803e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8040:	ac02      	add	r4, sp, #8
   d8042:	4615      	mov	r5, r2
   d8044:	460e      	mov	r6, r1
   d8046:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d804a:	f7ff ffa9 	bl	d7fa0 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d804e:	f000 fed9 	bl	d8e04 <_Z20__fetch_global_Wire1v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d8052:	216b      	movs	r1, #107	; 0x6b
   d8054:	f7ff fd68 	bl	d7b28 <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d8058:	f000 fed4 	bl	d8e04 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
   d805c:	6803      	ldr	r3, [r0, #0]
   d805e:	4631      	mov	r1, r6
   d8060:	689b      	ldr	r3, [r3, #8]
   d8062:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d8064:	f000 fece 	bl	d8e04 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
   d8068:	6803      	ldr	r3, [r0, #0]
   d806a:	4629      	mov	r1, r5
   d806c:	689b      	ldr	r3, [r3, #8]
   d806e:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d8070:	f000 fec8 	bl	d8e04 <_Z20__fetch_global_Wire1v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
   d8074:	2101      	movs	r1, #1
   d8076:	f7ff fd5a 	bl	d7b2e <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
   d807a:	4620      	mov	r0, r4
   d807c:	f7ff ffae 	bl	d7fdc <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
   d8080:	b002      	add	sp, #8
   d8082:	bd70      	pop	{r4, r5, r6, pc}

000d8084 <_ZN4PMIC15disableChargingEv>:
 * Function Name  : disableCharging
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
   d8084:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8086:	ac02      	add	r4, sp, #8
   d8088:	4605      	mov	r5, r0
   d808a:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d808e:	f7ff ff87 	bl	d7fa0 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d8092:	2101      	movs	r1, #1
   d8094:	4628      	mov	r0, r5
   d8096:	f7ff ffa8 	bl	d7fea <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   d809a:	2101      	movs	r1, #1
   d809c:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   d80a0:	4628      	mov	r0, r5
   d80a2:	f7ff ffcc 	bl	d803e <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
    std::lock_guard<PMIC> l(*this);
   d80a6:	4620      	mov	r0, r4
   d80a8:	f7ff ff98 	bl	d7fdc <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
    return 1;
}
   d80ac:	2001      	movs	r0, #1
   d80ae:	b003      	add	sp, #12
   d80b0:	bd30      	pop	{r4, r5, pc}

000d80b2 <_ZN4PMIC10disableOTGEv>:
 * Function Name  : disableOTG
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
   d80b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d80b4:	ac02      	add	r4, sp, #8
   d80b6:	4605      	mov	r5, r0
   d80b8:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d80bc:	f7ff ff70 	bl	d7fa0 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d80c0:	2101      	movs	r1, #1
   d80c2:	4628      	mov	r0, r5
   d80c4:	f7ff ff91 	bl	d7fea <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   d80c8:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   d80cc:	f042 0210 	orr.w	r2, r2, #16
   d80d0:	2101      	movs	r1, #1
   d80d2:	4628      	mov	r0, r5
   d80d4:	f7ff ffb3 	bl	d803e <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
    std::lock_guard<PMIC> l(*this);
   d80d8:	4620      	mov	r0, r4
   d80da:	f7ff ff7f 	bl	d7fdc <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    DATA = DATA & 0b11001111;
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
    return 1;
}
   d80de:	2001      	movs	r0, #1
   d80e0:	b003      	add	sp, #12
   d80e2:	bd30      	pop	{r4, r5, pc}

000d80e4 <_ZN4PMIC14enableChargingEv>:
   d80e4:	f7ff bfe5 	b.w	d80b2 <_ZN4PMIC10disableOTGEv>

000d80e8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d80e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d80ea:	4606      	mov	r6, r0
   d80ec:	460d      	mov	r5, r1
   d80ee:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d80f0:	2400      	movs	r4, #0
  while (size--) {
   d80f2:	42bd      	cmp	r5, r7
   d80f4:	d00c      	beq.n	d8110 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d80f6:	6833      	ldr	r3, [r6, #0]
   d80f8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d80fc:	689b      	ldr	r3, [r3, #8]
   d80fe:	4630      	mov	r0, r6
   d8100:	4798      	blx	r3
     if (chunk>=0)
   d8102:	2800      	cmp	r0, #0
   d8104:	db01      	blt.n	d810a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d8106:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d8108:	e7f3      	b.n	d80f2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d810a:	2c00      	cmp	r4, #0
   d810c:	bf08      	it	eq
   d810e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d8110:	4620      	mov	r0, r4
   d8112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8114 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d8114:	b570      	push	{r4, r5, r6, lr}
   d8116:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d8118:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d811a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d811c:	b149      	cbz	r1, d8132 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d811e:	f002 fec3 	bl	daea8 <strlen>
   d8122:	682b      	ldr	r3, [r5, #0]
   d8124:	4602      	mov	r2, r0
   d8126:	4621      	mov	r1, r4
   d8128:	4628      	mov	r0, r5
   d812a:	68db      	ldr	r3, [r3, #12]
    }
   d812c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d8130:	4718      	bx	r3
    }
   d8132:	bd70      	pop	{r4, r5, r6, pc}

000d8134 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d8134:	6803      	ldr	r3, [r0, #0]
   d8136:	689b      	ldr	r3, [r3, #8]
   d8138:	4718      	bx	r3

000d813a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d813a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d813c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d813e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8140:	f7ff fff8 	bl	d8134 <_ZN5Print5printEc>
  n += print('\n');
   d8144:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d8146:	4604      	mov	r4, r0
  n += print('\n');
   d8148:	4628      	mov	r0, r5
   d814a:	f7ff fff3 	bl	d8134 <_ZN5Print5printEc>
  return n;
}
   d814e:	4420      	add	r0, r4
   d8150:	bd38      	pop	{r3, r4, r5, pc}

000d8152 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d8152:	b538      	push	{r3, r4, r5, lr}
   d8154:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8156:	f7ff ffdd 	bl	d8114 <_ZN5Print5writeEPKc>
   d815a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d815c:	4628      	mov	r0, r5
   d815e:	f7ff ffec 	bl	d813a <_ZN5Print7printlnEv>
  return n;
}
   d8162:	4420      	add	r0, r4
   d8164:	bd38      	pop	{r3, r4, r5, pc}

000d8166 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d8166:	b530      	push	{r4, r5, lr}
   d8168:	b08b      	sub	sp, #44	; 0x2c
   d816a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d816c:	2100      	movs	r1, #0
   d816e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8172:	2a01      	cmp	r2, #1
   d8174:	bf98      	it	ls
   d8176:	220a      	movls	r2, #10
   d8178:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d817c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d8180:	fb05 3312 	mls	r3, r5, r2, r3
   d8184:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8188:	2b09      	cmp	r3, #9
   d818a:	bf94      	ite	ls
   d818c:	3330      	addls	r3, #48	; 0x30
   d818e:	3337      	addhi	r3, #55	; 0x37
   d8190:	b2db      	uxtb	r3, r3
   d8192:	4621      	mov	r1, r4
   d8194:	f804 3901 	strb.w	r3, [r4], #-1
   d8198:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d819a:	2d00      	cmp	r5, #0
   d819c:	d1ee      	bne.n	d817c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d819e:	f7ff ffb9 	bl	d8114 <_ZN5Print5writeEPKc>
}
   d81a2:	b00b      	add	sp, #44	; 0x2c
   d81a4:	bd30      	pop	{r4, r5, pc}

000d81a6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d81a6:	b510      	push	{r4, lr}
   d81a8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d81aa:	f7ff f90e 	bl	d73ca <_ZNSt14_Function_baseD1Ev>
   d81ae:	4620      	mov	r0, r4
   d81b0:	bd10      	pop	{r4, pc}
	...

000d81b4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d81b4:	4803      	ldr	r0, [pc, #12]	; (d81c4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d81b6:	4a04      	ldr	r2, [pc, #16]	; (d81c8 <_GLOBAL__sub_I_RGB+0x14>)
   d81b8:	4904      	ldr	r1, [pc, #16]	; (d81cc <_GLOBAL__sub_I_RGB+0x18>)
   d81ba:	2300      	movs	r3, #0
   d81bc:	6083      	str	r3, [r0, #8]
   d81be:	f000 be47 	b.w	d8e50 <__aeabi_atexit>
   d81c2:	bf00      	nop
   d81c4:	2003e450 	.word	0x2003e450
   d81c8:	2003e064 	.word	0x2003e064
   d81cc:	000d81a7 	.word	0x000d81a7

000d81d0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d81d0:	b510      	push	{r4, lr}
   d81d2:	4604      	mov	r4, r0
{
    _spi = spi;
   d81d4:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d81d6:	4608      	mov	r0, r1
   d81d8:	f7fe fd66 	bl	d6ca8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d81dc:	2300      	movs	r3, #0
   d81de:	6063      	str	r3, [r4, #4]
}
   d81e0:	4620      	mov	r0, r4
   d81e2:	bd10      	pop	{r4, pc}

000d81e4 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d81e4:	7800      	ldrb	r0, [r0, #0]
   d81e6:	f7fe bd67 	b.w	d6cb8 <HAL_SPI_Is_Enabled>

000d81ea <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d81ea:	b510      	push	{r4, lr}
   d81ec:	4604      	mov	r4, r0
{
	free(buffer);
   d81ee:	6800      	ldr	r0, [r0, #0]
   d81f0:	f7fe ff2c 	bl	d704c <free>
}
   d81f4:	4620      	mov	r0, r4
   d81f6:	bd10      	pop	{r4, pc}

000d81f8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d81f8:	b510      	push	{r4, lr}
   d81fa:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d81fc:	6800      	ldr	r0, [r0, #0]
   d81fe:	b108      	cbz	r0, d8204 <_ZN6String10invalidateEv+0xc>
   d8200:	f7fe ff24 	bl	d704c <free>
	buffer = NULL;
   d8204:	2300      	movs	r3, #0
   d8206:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d8208:	60a3      	str	r3, [r4, #8]
   d820a:	6063      	str	r3, [r4, #4]
   d820c:	bd10      	pop	{r4, pc}

000d820e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d820e:	b538      	push	{r3, r4, r5, lr}
   d8210:	4604      	mov	r4, r0
   d8212:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d8214:	6800      	ldr	r0, [r0, #0]
   d8216:	3101      	adds	r1, #1
   d8218:	f7fe ff20 	bl	d705c <realloc>
	if (newbuffer) {
   d821c:	b110      	cbz	r0, d8224 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d821e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d8222:	2001      	movs	r0, #1
	}
	return 0;
}
   d8224:	bd38      	pop	{r3, r4, r5, pc}

000d8226 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8226:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8228:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d822a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d822c:	b113      	cbz	r3, d8234 <_ZN6String7reserveEj+0xe>
   d822e:	6843      	ldr	r3, [r0, #4]
   d8230:	428b      	cmp	r3, r1
   d8232:	d207      	bcs.n	d8244 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d8234:	4620      	mov	r0, r4
   d8236:	f7ff ffea 	bl	d820e <_ZN6String12changeBufferEj>
   d823a:	b120      	cbz	r0, d8246 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d823c:	68a3      	ldr	r3, [r4, #8]
   d823e:	b90b      	cbnz	r3, d8244 <_ZN6String7reserveEj+0x1e>
   d8240:	6822      	ldr	r2, [r4, #0]
   d8242:	7013      	strb	r3, [r2, #0]
   d8244:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d8246:	bd10      	pop	{r4, pc}

000d8248 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8248:	b570      	push	{r4, r5, r6, lr}
   d824a:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d824c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d824e:	4604      	mov	r4, r0
   d8250:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d8252:	f7ff ffe8 	bl	d8226 <_ZN6String7reserveEj>
   d8256:	b918      	cbnz	r0, d8260 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d8258:	4620      	mov	r0, r4
   d825a:	f7ff ffcd 	bl	d81f8 <_ZN6String10invalidateEv>
		return *this;
   d825e:	e009      	b.n	d8274 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d8260:	462a      	mov	r2, r5
   d8262:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d8264:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d8266:	6820      	ldr	r0, [r4, #0]
   d8268:	f001 fe52 	bl	d9f10 <memcpy>
	buffer[len] = 0;
   d826c:	6822      	ldr	r2, [r4, #0]
   d826e:	68a3      	ldr	r3, [r4, #8]
   d8270:	2100      	movs	r1, #0
   d8272:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d8274:	4620      	mov	r0, r4
   d8276:	bd70      	pop	{r4, r5, r6, pc}

000d8278 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8278:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d827a:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d827c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d827e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d8280:	6043      	str	r3, [r0, #4]
	len = 0;
   d8282:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8284:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d8286:	460d      	mov	r5, r1
   d8288:	b139      	cbz	r1, d829a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d828a:	4608      	mov	r0, r1
   d828c:	f002 fe0c 	bl	daea8 <strlen>
   d8290:	4629      	mov	r1, r5
   d8292:	4602      	mov	r2, r0
   d8294:	4620      	mov	r0, r4
   d8296:	f7ff ffd7 	bl	d8248 <_ZN6String4copyEPKcj>
}
   d829a:	4620      	mov	r0, r4
   d829c:	bd38      	pop	{r3, r4, r5, pc}

000d829e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d829e:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d82a0:	b510      	push	{r4, lr}
   d82a2:	460b      	mov	r3, r1
   d82a4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d82a6:	d007      	beq.n	d82b8 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d82a8:	6809      	ldr	r1, [r1, #0]
   d82aa:	b119      	cbz	r1, d82b4 <_ZN6StringaSERKS_+0x16>
   d82ac:	689a      	ldr	r2, [r3, #8]
   d82ae:	f7ff ffcb 	bl	d8248 <_ZN6String4copyEPKcj>
   d82b2:	e001      	b.n	d82b8 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d82b4:	f7ff ffa0 	bl	d81f8 <_ZN6String10invalidateEv>

	return *this;
}
   d82b8:	4620      	mov	r0, r4
   d82ba:	bd10      	pop	{r4, pc}

000d82bc <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d82bc:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d82be:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d82c0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d82c2:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d82c4:	6043      	str	r3, [r0, #4]
	len = 0;
   d82c6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d82c8:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d82ca:	f7ff ffe8 	bl	d829e <_ZN6StringaSERKS_>
}
   d82ce:	4620      	mov	r0, r4
   d82d0:	bd10      	pop	{r4, pc}

000d82d2 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d82d2:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d82d4:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d82d6:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d82d8:	b912      	cbnz	r2, d82e0 <_ZNK6String6equalsEPKc+0xe>
   d82da:	b919      	cbnz	r1, d82e4 <_ZNK6String6equalsEPKc+0x12>
   d82dc:	2001      	movs	r0, #1
   d82de:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d82e0:	b911      	cbnz	r1, d82e8 <_ZNK6String6equalsEPKc+0x16>
   d82e2:	6803      	ldr	r3, [r0, #0]
   d82e4:	7818      	ldrb	r0, [r3, #0]
   d82e6:	e002      	b.n	d82ee <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d82e8:	6800      	ldr	r0, [r0, #0]
   d82ea:	f002 f89b 	bl	da424 <strcmp>
   d82ee:	fab0 f080 	clz	r0, r0
   d82f2:	0940      	lsrs	r0, r0, #5
}
   d82f4:	bd08      	pop	{r3, pc}

000d82f6 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d82f6:	b570      	push	{r4, r5, r6, lr}
   d82f8:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d82fa:	b19a      	cbz	r2, d8324 <_ZNK6String8getBytesEPhjj+0x2e>
   d82fc:	b191      	cbz	r1, d8324 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d82fe:	6885      	ldr	r5, [r0, #8]
   d8300:	429d      	cmp	r5, r3
   d8302:	d802      	bhi.n	d830a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d8304:	2300      	movs	r3, #0
   d8306:	700b      	strb	r3, [r1, #0]
		return;
   d8308:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d830a:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d830c:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d830e:	6801      	ldr	r1, [r0, #0]
   d8310:	42ac      	cmp	r4, r5
   d8312:	bf28      	it	cs
   d8314:	462c      	movcs	r4, r5
   d8316:	4419      	add	r1, r3
   d8318:	4622      	mov	r2, r4
   d831a:	4630      	mov	r0, r6
   d831c:	f002 fde1 	bl	daee2 <strncpy>
	buf[n] = 0;
   d8320:	2300      	movs	r3, #0
   d8322:	5533      	strb	r3, [r6, r4]
   d8324:	bd70      	pop	{r4, r5, r6, pc}

000d8326 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d8326:	b510      	push	{r4, lr}
   d8328:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d832a:	6800      	ldr	r0, [r0, #0]
   d832c:	b118      	cbz	r0, d8336 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d832e:	f7fe fe8d 	bl	d704c <free>
            wakeupSource_ = nullptr;
   d8332:	2300      	movs	r3, #0
   d8334:	6023      	str	r3, [r4, #0]
   d8336:	bd10      	pop	{r4, pc}

000d8338 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d8338:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d833a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d833e:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d8340:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d8342:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d8344:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d8348:	f8c0 2006 	str.w	r2, [r0, #6]
   d834c:	889b      	ldrh	r3, [r3, #4]
   d834e:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d8350:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d8352:	f7ff ffe8 	bl	d8326 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d8356:	682b      	ldr	r3, [r5, #0]
   d8358:	b113      	cbz	r3, d8360 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d835a:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d835c:	2300      	movs	r3, #0
   d835e:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d8360:	4620      	mov	r0, r4
   d8362:	bd38      	pop	{r3, r4, r5, pc}

000d8364 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d8364:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   d8368:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d836a:	b90b      	cbnz	r3, d8370 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   d836c:	680a      	ldr	r2, [r1, #0]
   d836e:	b19a      	cbz	r2, d8398 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   d8370:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d8372:	b15c      	cbz	r4, d838c <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d8374:	88a2      	ldrh	r2, [r4, #4]
   d8376:	2a01      	cmp	r2, #1
   d8378:	d003      	beq.n	d8382 <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   d837a:	2a04      	cmp	r2, #4
   d837c:	d106      	bne.n	d838c <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d837e:	2202      	movs	r2, #2
   d8380:	e005      	b.n	d838e <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d8382:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d8384:	814c      	strh	r4, [r1, #10]
   d8386:	718a      	strb	r2, [r1, #6]
   d8388:	810b      	strh	r3, [r1, #8]
                    break;
   d838a:	e005      	b.n	d8398 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d838c:	2204      	movs	r2, #4
   d838e:	810b      	strh	r3, [r1, #8]
   d8390:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8394:	718a      	strb	r2, [r1, #6]
   d8396:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d8398:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d839c:	6003      	str	r3, [r0, #0]
   d839e:	888b      	ldrh	r3, [r1, #4]
   d83a0:	8083      	strh	r3, [r0, #4]
    }
   d83a2:	bd10      	pop	{r4, pc}

000d83a4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d83a4:	b538      	push	{r3, r4, r5, lr}
   d83a6:	460c      	mov	r4, r1
   d83a8:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d83aa:	f7ff ffbc 	bl	d8326 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (source) {
   d83ae:	b144      	cbz	r4, d83c2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d83b0:	8820      	ldrh	r0, [r4, #0]
   d83b2:	f7fe fe43 	bl	d703c <malloc>
   d83b6:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d83b8:	b128      	cbz	r0, d83c6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d83ba:	8822      	ldrh	r2, [r4, #0]
   d83bc:	4621      	mov	r1, r4
   d83be:	f001 fda7 	bl	d9f10 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d83c2:	2000      	movs	r0, #0
   d83c4:	bd38      	pop	{r3, r4, r5, pc}
        if (source) {
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
            if (wakeupSource_) {
                memcpy(wakeupSource_, source, source->size);
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
   d83c6:	4801      	ldr	r0, [pc, #4]	; (d83cc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d83c8:	bd38      	pop	{r3, r4, r5, pc}
   d83ca:	bf00      	nop
   d83cc:	fffffefc 	.word	0xfffffefc

000d83d0 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d83d0:	4601      	mov	r1, r0
   d83d2:	2200      	movs	r2, #0
   d83d4:	208c      	movs	r0, #140	; 0x8c
   d83d6:	f7fe bb57 	b.w	d6a88 <HAL_Core_System_Reset_Ex>

000d83da <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d83da:	2000      	movs	r0, #0
   d83dc:	f7ff bff8 	b.w	d83d0 <_ZN11SystemClass5resetEm>

000d83e0 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>:
void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
   d83e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d83e2:	4d30      	ldr	r5, [pc, #192]	; (d84a4 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d83e4:	7d0b      	ldrb	r3, [r1, #20]
   d83e6:	4604      	mov	r4, r0
   d83e8:	b08b      	sub	sp, #44	; 0x2c
   d83ea:	4608      	mov	r0, r1
   d83ec:	1daf      	adds	r7, r5, #6
   d83ee:	b313      	cbz	r3, d8436 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    particle::EnumFlags<SystemSleepFlag> sleepFlags() const {
        return particle::EnumFlags<SystemSleepFlag>::fromUnderlying(config_->flags);
    }

    SystemSleepMode sleepMode() const {
        return static_cast<SystemSleepMode>(config_->mode);
   d83f0:	680b      	ldr	r3, [r1, #0]
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d83f2:	791b      	ldrb	r3, [r3, #4]
   d83f4:	b1fb      	cbz	r3, d8436 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d83f6:	2200      	movs	r2, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d83f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d83fc:	a902      	add	r1, sp, #8
   d83fe:	3004      	adds	r0, #4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8400:	9202      	str	r2, [sp, #8]
   d8402:	f8ad 200c 	strh.w	r2, [sp, #12]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8406:	f88d 200e 	strb.w	r2, [sp, #14]
   d840a:	f8ad 2010 	strh.w	r2, [sp, #16]
   d840e:	f8ad 3012 	strh.w	r3, [sp, #18]
   d8412:	f7fe fd51 	bl	d6eb8 <system_sleep_ext>
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d8416:	ab0a      	add	r3, sp, #40	; 0x28
        result.setError(static_cast<system_error_t>(ret));
   d8418:	b200      	sxth	r0, r0
   d841a:	f853 2d1a 	ldr.w	r2, [r3, #-26]!
    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }

    void setError(system_error_t error, bool clear = false) {
        error_ = error;
   d841e:	f8ad 000c 	strh.w	r0, [sp, #12]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d8422:	889b      	ldrh	r3, [r3, #4]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
   d8424:	80a8      	strh	r0, [r5, #4]
        compatResult_ = result.compatResult_;
   d8426:	f8c5 2006 	str.w	r2, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
   d842a:	9902      	ldr	r1, [sp, #8]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d842c:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d842e:	4628      	mov	r0, r5
   d8430:	f7ff ffb8 	bl	d83a4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
   d8434:	e01c      	b.n	d8470 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x90>
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
   d8436:	2320      	movs	r3, #32
   d8438:	2600      	movs	r6, #0
   d843a:	9302      	str	r3, [sp, #8]
   d843c:	4b1a      	ldr	r3, [pc, #104]	; (d84a8 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc8>)
   d843e:	9300      	str	r3, [sp, #0]
   d8440:	491a      	ldr	r1, [pc, #104]	; (d84ac <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xcc>)
   d8442:	9603      	str	r6, [sp, #12]
   d8444:	4633      	mov	r3, r6
   d8446:	2032      	movs	r0, #50	; 0x32
   d8448:	aa02      	add	r2, sp, #8
   d844a:	f7fe fcb5 	bl	d6db8 <log_message>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d844e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8452:	f8ad 3012 	strh.w	r3, [sp, #18]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d8456:	a902      	add	r1, sp, #8
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d8458:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d845c:	4811      	ldr	r0, [pc, #68]	; (d84a4 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d845e:	9602      	str	r6, [sp, #8]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8460:	f88d 600e 	strb.w	r6, [sp, #14]
   d8464:	f8ad 6010 	strh.w	r6, [sp, #16]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d8468:	f8ad 300c 	strh.w	r3, [sp, #12]
   d846c:	f7ff ff64 	bl	d8338 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d8470:	a802      	add	r0, sp, #8
   d8472:	f7ff ff58 	bl	d8326 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8476:	2300      	movs	r3, #0
   d8478:	6023      	str	r3, [r4, #0]
   d847a:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d847c:	71a3      	strb	r3, [r4, #6]
   d847e:	8123      	strh	r3, [r4, #8]
   d8480:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8484:	8163      	strh	r3, [r4, #10]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
   d8486:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d848a:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d848c:	683b      	ldr	r3, [r7, #0]
   d848e:	f8c4 3006 	str.w	r3, [r4, #6]
   d8492:	88bb      	ldrh	r3, [r7, #4]
   d8494:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d8496:	6829      	ldr	r1, [r5, #0]
   d8498:	4620      	mov	r0, r4
   d849a:	f7ff ff83 	bl	d83a4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
        result.setError(static_cast<system_error_t>(ret));
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d849e:	4620      	mov	r0, r4
   d84a0:	b00b      	add	sp, #44	; 0x2c
   d84a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d84a4:	2003e460 	.word	0x2003e460
   d84a8:	000dda3f 	.word	0x000dda3f
   d84ac:	000dda38 	.word	0x000dda38

000d84b0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d84b0:	b530      	push	{r4, r5, lr}
   d84b2:	4604      	mov	r4, r0
   d84b4:	b085      	sub	sp, #20
   d84b6:	4608      	mov	r0, r1
   d84b8:	4611      	mov	r1, r2
   d84ba:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d84bc:	2300      	movs	r3, #0
   d84be:	f7fe fcad 	bl	d6e1c <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   d84c2:	4d0d      	ldr	r5, [pc, #52]	; (d84f8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d84c4:	f8ad 000c 	strh.w	r0, [sp, #12]
   d84c8:	2300      	movs	r3, #0
   d84ca:	a901      	add	r1, sp, #4
   d84cc:	9301      	str	r3, [sp, #4]
   d84ce:	f8ad 3008 	strh.w	r3, [sp, #8]
   d84d2:	f88d 300a 	strb.w	r3, [sp, #10]
   d84d6:	4628      	mov	r0, r5
   d84d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d84dc:	f8ad 300e 	strh.w	r3, [sp, #14]
   d84e0:	f7ff ff2a 	bl	d8338 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d84e4:	a801      	add	r0, sp, #4
   d84e6:	f7ff ff1e 	bl	d8326 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d84ea:	4620      	mov	r0, r4
   d84ec:	4629      	mov	r1, r5
   d84ee:	f7ff ff39 	bl	d8364 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d84f2:	4620      	mov	r0, r4
   d84f4:	b005      	add	sp, #20
   d84f6:	bd30      	pop	{r4, r5, pc}
   d84f8:	2003e460 	.word	0x2003e460

000d84fc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d84fc:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d84fe:	4c09      	ldr	r4, [pc, #36]	; (d8524 <_GLOBAL__sub_I_System+0x28>)
   d8500:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8502:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8506:	6020      	str	r0, [r4, #0]
   d8508:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d850a:	71a0      	strb	r0, [r4, #6]
   d850c:	8120      	strh	r0, [r4, #8]
   d850e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8510:	f7fe fc74 	bl	d6dfc <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d8514:	4620      	mov	r0, r4
   d8516:	4a04      	ldr	r2, [pc, #16]	; (d8528 <_GLOBAL__sub_I_System+0x2c>)
   d8518:	4904      	ldr	r1, [pc, #16]	; (d852c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d851a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d851e:	f000 bc97 	b.w	d8e50 <__aeabi_atexit>
   d8522:	bf00      	nop
   d8524:	2003e460 	.word	0x2003e460
   d8528:	2003e064 	.word	0x2003e064
   d852c:	000d4241 	.word	0x000d4241

000d8530 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d8530:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d8532:	4b14      	ldr	r3, [pc, #80]	; (d8584 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d8534:	4f14      	ldr	r7, [pc, #80]	; (d8588 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d8536:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d8538:	4b14      	ldr	r3, [pc, #80]	; (d858c <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d853a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d853c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d853e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d8540:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d8542:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d8544:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d8546:	d01b      	beq.n	d8580 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d8548:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d854a:	ad01      	add	r5, sp, #4
   d854c:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d8550:	f001 fbe2 	bl	d9d18 <localtime>
	calendar_time->tm_year += 1900;
   d8554:	6943      	ldr	r3, [r0, #20]
   d8556:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d855a:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d855c:	4604      	mov	r4, r0
   d855e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8566:	f8d4 e000 	ldr.w	lr, [r4]
   d856a:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d856e:	ad01      	add	r5, sp, #4
   d8570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8572:	4c07      	ldr	r4, [pc, #28]	; (d8590 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d8574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d857a:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d857c:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d8580:	b00b      	add	sp, #44	; 0x2c
   d8582:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8584:	2003e49c 	.word	0x2003e49c
   d8588:	2003e498 	.word	0x2003e498
   d858c:	2003e494 	.word	0x2003e494
   d8590:	2003e46c 	.word	0x2003e46c

000d8594 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d8594:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8596:	2000      	movs	r0, #0
   d8598:	f7fe fce8 	bl	d6f6c <spark_sync_time_pending>
   d859c:	b128      	cbz	r0, d85aa <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d859e:	f7fe fcbd 	bl	d6f1c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d85a2:	f080 0001 	eor.w	r0, r0, #1
   d85a6:	b2c0      	uxtb	r0, r0
   d85a8:	bd08      	pop	{r3, pc}
   d85aa:	2001      	movs	r0, #1
    }
   d85ac:	bd08      	pop	{r3, pc}
	...

000d85b0 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   d85b0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d85b2:	f7ff ffbd 	bl	d8530 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   d85b6:	4b01      	ldr	r3, [pc, #4]	; (d85bc <_ZN9TimeClass4hourEl+0xc>)
   d85b8:	6898      	ldr	r0, [r3, #8]
   d85ba:	bd08      	pop	{r3, pc}
   d85bc:	2003e46c 	.word	0x2003e46c

000d85c0 <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   d85c0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d85c2:	f7ff ffb5 	bl	d8530 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
   d85c6:	4b01      	ldr	r3, [pc, #4]	; (d85cc <_ZN9TimeClass3dayEl+0xc>)
   d85c8:	68d8      	ldr	r0, [r3, #12]
   d85ca:	bd08      	pop	{r3, pc}
   d85cc:	2003e46c 	.word	0x2003e46c

000d85d0 <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   d85d0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d85d2:	f7ff ffad 	bl	d8530 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   d85d6:	4b02      	ldr	r3, [pc, #8]	; (d85e0 <_ZN9TimeClass7weekdayEl+0x10>)
   d85d8:	6998      	ldr	r0, [r3, #24]
}
   d85da:	3001      	adds	r0, #1
   d85dc:	bd08      	pop	{r3, pc}
   d85de:	bf00      	nop
   d85e0:	2003e46c 	.word	0x2003e46c

000d85e4 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d85e4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d85e6:	f7ff ffa3 	bl	d8530 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d85ea:	4b02      	ldr	r3, [pc, #8]	; (d85f4 <_ZN9TimeClass5monthEl+0x10>)
   d85ec:	6918      	ldr	r0, [r3, #16]
}
   d85ee:	3001      	adds	r0, #1
   d85f0:	bd08      	pop	{r3, pc}
   d85f2:	bf00      	nop
   d85f4:	2003e46c 	.word	0x2003e46c

000d85f8 <_ZN9TimeClass5localEv>:
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
}

time_t TimeClass::local()
{
   d85f8:	b508      	push	{r3, lr}
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
   d85fa:	f7fe fa6d 	bl	d6ad8 <HAL_RTC_Get_UnixTime>
   d85fe:	4b03      	ldr	r3, [pc, #12]	; (d860c <_ZN9TimeClass5localEv+0x14>)
   d8600:	681b      	ldr	r3, [r3, #0]
   d8602:	4418      	add	r0, r3
   d8604:	4b02      	ldr	r3, [pc, #8]	; (d8610 <_ZN9TimeClass5localEv+0x18>)
   d8606:	681b      	ldr	r3, [r3, #0]
}
   d8608:	4418      	add	r0, r3
   d860a:	bd08      	pop	{r3, pc}
   d860c:	2003e49c 	.word	0x2003e49c
   d8610:	2003e494 	.word	0x2003e494

000d8614 <_ZN9TimeClass4zoneEf>:

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d8614:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d8618:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d861c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8620:	d40f      	bmi.n	d8642 <_ZN9TimeClass4zoneEf+0x2e>
   d8622:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d8626:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d862a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d862e:	dc08      	bgt.n	d8642 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d8630:	eddf 7a04 	vldr	s15, [pc, #16]	; d8644 <_ZN9TimeClass4zoneEf+0x30>
   d8634:	4b04      	ldr	r3, [pc, #16]	; (d8648 <_ZN9TimeClass4zoneEf+0x34>)
   d8636:	ee20 0a27 	vmul.f32	s0, s0, s15
   d863a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d863e:	ed83 0a00 	vstr	s0, [r3]
   d8642:	4770      	bx	lr
   d8644:	45610000 	.word	0x45610000
   d8648:	2003e49c 	.word	0x2003e49c

000d864c <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   d864c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d8650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8654:	d40f      	bmi.n	d8676 <_ZN9TimeClass12setDSTOffsetEf+0x2a>
   d8656:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d865a:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d865e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8662:	dc08      	bgt.n	d8676 <_ZN9TimeClass12setDSTOffsetEf+0x2a>
    {
        return;
    }
    dst_cache = offset * 3600;
   d8664:	eddf 7a04 	vldr	s15, [pc, #16]	; d8678 <_ZN9TimeClass12setDSTOffsetEf+0x2c>
   d8668:	4b04      	ldr	r3, [pc, #16]	; (d867c <_ZN9TimeClass12setDSTOffsetEf+0x30>)
   d866a:	ee20 0a27 	vmul.f32	s0, s0, s15
   d866e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d8672:	ed83 0a00 	vstr	s0, [r3]
   d8676:	4770      	bx	lr
   d8678:	45610000 	.word	0x45610000
   d867c:	2003df70 	.word	0x2003df70

000d8680 <_ZN9TimeClass8beginDSTEv>:
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   d8680:	4b02      	ldr	r3, [pc, #8]	; (d868c <_ZN9TimeClass8beginDSTEv+0xc>)
   d8682:	681a      	ldr	r2, [r3, #0]
   d8684:	4b02      	ldr	r3, [pc, #8]	; (d8690 <_ZN9TimeClass8beginDSTEv+0x10>)
   d8686:	601a      	str	r2, [r3, #0]
   d8688:	4770      	bx	lr
   d868a:	bf00      	nop
   d868c:	2003df70 	.word	0x2003df70
   d8690:	2003e494 	.word	0x2003e494

000d8694 <_ZN9TimeClass6endDSTEv>:
}

void TimeClass::endDST()
{
    dst_current_cache = 0;
   d8694:	4b01      	ldr	r3, [pc, #4]	; (d869c <_ZN9TimeClass6endDSTEv+0x8>)
   d8696:	2200      	movs	r2, #0
   d8698:	601a      	str	r2, [r3, #0]
   d869a:	4770      	bx	lr
   d869c:	2003e494 	.word	0x2003e494

000d86a0 <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d86a0:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
   d86a2:	f7fe fa21 	bl	d6ae8 <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d86a6:	2200      	movs	r2, #0
   d86a8:	4611      	mov	r1, r2
   d86aa:	4610      	mov	r0, r2
}
   d86ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d86b0:	f7fe bbdc 	b.w	d6e6c <system_notify_time_changed>

000d86b4 <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d86b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d86b6:	4b0e      	ldr	r3, [pc, #56]	; (d86f0 <_ZN9TimeClass7timeStrEl+0x3c>)
   d86b8:	681b      	ldr	r3, [r3, #0]
   d86ba:	4419      	add	r1, r3
   d86bc:	4b0d      	ldr	r3, [pc, #52]	; (d86f4 <_ZN9TimeClass7timeStrEl+0x40>)
   d86be:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d86c0:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d86c2:	a802      	add	r0, sp, #8
   d86c4:	4419      	add	r1, r3
   d86c6:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d86ca:	f001 fb25 	bl	d9d18 <localtime>
        char* ascstr = asctime(calendar_time);
   d86ce:	f001 fa2b 	bl	d9b28 <asctime>
   d86d2:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d86d4:	f002 fbe8 	bl	daea8 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d86d8:	4428      	add	r0, r5
   d86da:	2300      	movs	r3, #0
   d86dc:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d86e0:	4629      	mov	r1, r5
   d86e2:	4620      	mov	r0, r4
   d86e4:	f7ff fdc8 	bl	d8278 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d86e8:	4620      	mov	r0, r4
   d86ea:	b003      	add	sp, #12
   d86ec:	bd30      	pop	{r4, r5, pc}
   d86ee:	bf00      	nop
   d86f0:	2003e49c 	.word	0x2003e49c
   d86f4:	2003e494 	.word	0x2003e494

000d86f8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d86f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d86fc:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d86fe:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d8700:	4607      	mov	r7, r0
   d8702:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d8704:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d8706:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d8708:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d870a:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d870c:	f002 fbe9 	bl	daee2 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d8710:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d8712:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d8714:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d8718:	f002 fbc6 	bl	daea8 <strlen>
   d871c:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d871e:	b925      	cbnz	r5, d872a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
   d8720:	4924      	ldr	r1, [pc, #144]	; (d87b4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
   d8722:	a803      	add	r0, sp, #12
   d8724:	f001 fe88 	bl	da438 <strcpy>
   d8728:	e013      	b.n	d8752 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d872a:	213c      	movs	r1, #60	; 0x3c
   d872c:	fb95 f2f1 	sdiv	r2, r5, r1
   d8730:	2a00      	cmp	r2, #0
   d8732:	bfb8      	it	lt
   d8734:	4252      	neglt	r2, r2
   d8736:	fb92 f3f1 	sdiv	r3, r2, r1
   d873a:	fb01 2213 	mls	r2, r1, r3, r2
   d873e:	9200      	str	r2, [sp, #0]
   d8740:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8744:	4a1c      	ldr	r2, [pc, #112]	; (d87b8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
   d8746:	fb95 f3f3 	sdiv	r3, r5, r3
   d874a:	2110      	movs	r1, #16
   d874c:	a803      	add	r0, sp, #12
   d874e:	f7fe fc9d 	bl	d708c <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d8752:	4625      	mov	r5, r4
   d8754:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d8756:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   d875a:	45b2      	cmp	sl, r6
   d875c:	d91b      	bls.n	d8796 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d875e:	782b      	ldrb	r3, [r5, #0]
   d8760:	2b25      	cmp	r3, #37	; 0x25
   d8762:	d116      	bne.n	d8792 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
   d8764:	786b      	ldrb	r3, [r5, #1]
   d8766:	2b7a      	cmp	r3, #122	; 0x7a
   d8768:	d113      	bne.n	d8792 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
   d876a:	a803      	add	r0, sp, #12
   d876c:	f002 fb9c 	bl	daea8 <strlen>
   d8770:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d8772:	4430      	add	r0, r6
   d8774:	ebc6 020a 	rsb	r2, r6, sl
   d8778:	1ca9      	adds	r1, r5, #2
   d877a:	4420      	add	r0, r4
   d877c:	f001 fbc8 	bl	d9f10 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d8780:	4642      	mov	r2, r8
   d8782:	a903      	add	r1, sp, #12
   d8784:	4628      	mov	r0, r5
   d8786:	f001 fbc3 	bl	d9f10 <memcpy>
            len = strlen(format_str);
   d878a:	4620      	mov	r0, r4
   d878c:	f002 fb8c 	bl	daea8 <strlen>
   d8790:	4680      	mov	r8, r0
   d8792:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d8794:	e7de      	b.n	d8754 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d8796:	464b      	mov	r3, r9
   d8798:	4622      	mov	r2, r4
   d879a:	2132      	movs	r1, #50	; 0x32
   d879c:	a807      	add	r0, sp, #28
   d879e:	f001 fecf 	bl	da540 <strftime>
    return String(buf);
   d87a2:	a907      	add	r1, sp, #28
   d87a4:	4638      	mov	r0, r7
   d87a6:	f7ff fd67 	bl	d8278 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d87aa:	4638      	mov	r0, r7
   d87ac:	b024      	add	sp, #144	; 0x90
   d87ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d87b2:	bf00      	nop
   d87b4:	000de05d 	.word	0x000de05d
   d87b8:	000dda66 	.word	0x000dda66

000d87bc <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d87bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d87be:	4605      	mov	r5, r0
   d87c0:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d87c2:	461c      	mov	r4, r3
   d87c4:	b913      	cbnz	r3, d87cc <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d87c6:	4b12      	ldr	r3, [pc, #72]	; (d8810 <_ZN9TimeClass6formatElPKc+0x54>)
   d87c8:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d87ca:	b12c      	cbz	r4, d87d8 <_ZN9TimeClass6formatElPKc+0x1c>
   d87cc:	4b11      	ldr	r3, [pc, #68]	; (d8814 <_ZN9TimeClass6formatElPKc+0x58>)
   d87ce:	4620      	mov	r0, r4
   d87d0:	6819      	ldr	r1, [r3, #0]
   d87d2:	f001 fe27 	bl	da424 <strcmp>
   d87d6:	b920      	cbnz	r0, d87e2 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d87d8:	9901      	ldr	r1, [sp, #4]
   d87da:	4628      	mov	r0, r5
   d87dc:	f7ff ff6a 	bl	d86b4 <_ZN9TimeClass7timeStrEl>
   d87e0:	e013      	b.n	d880a <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d87e2:	4f0d      	ldr	r7, [pc, #52]	; (d8818 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d87e4:	9a01      	ldr	r2, [sp, #4]
   d87e6:	683b      	ldr	r3, [r7, #0]
   d87e8:	4e0c      	ldr	r6, [pc, #48]	; (d881c <_ZN9TimeClass6formatElPKc+0x60>)
   d87ea:	441a      	add	r2, r3
   d87ec:	6833      	ldr	r3, [r6, #0]
   d87ee:	a802      	add	r0, sp, #8
   d87f0:	4413      	add	r3, r2
   d87f2:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d87f6:	f001 fa8f 	bl	d9d18 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d87fa:	683a      	ldr	r2, [r7, #0]
   d87fc:	6833      	ldr	r3, [r6, #0]
   d87fe:	4601      	mov	r1, r0
   d8800:	4413      	add	r3, r2
   d8802:	4628      	mov	r0, r5
   d8804:	4622      	mov	r2, r4
   d8806:	f7ff ff77 	bl	d86f8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d880a:	4628      	mov	r0, r5
   d880c:	b003      	add	sp, #12
   d880e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8810:	2003e490 	.word	0x2003e490
   d8814:	2003df74 	.word	0x2003df74
   d8818:	2003e49c 	.word	0x2003e49c
   d881c:	2003e494 	.word	0x2003e494

000d8820 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d8820:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d8822:	2000      	movs	r0, #0
   d8824:	f7fe f968 	bl	d6af8 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d8828:	4604      	mov	r4, r0
   d882a:	b968      	cbnz	r0, d8848 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d882c:	f7fe fade 	bl	d6dec <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8830:	2801      	cmp	r0, #1
   d8832:	d10b      	bne.n	d884c <_ZN9TimeClass7isValidEv+0x2c>
   d8834:	4620      	mov	r0, r4
   d8836:	f7fe fb11 	bl	d6e5c <system_thread_get_state>
   d883a:	b938      	cbnz	r0, d884c <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d883c:	f7ff feaa 	bl	d8594 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8840:	b930      	cbnz	r0, d8850 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d8842:	f7fe fb53 	bl	d6eec <spark_process>
   d8846:	e7f9      	b.n	d883c <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d8848:	2001      	movs	r0, #1
   d884a:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d884c:	2000      	movs	r0, #0
   d884e:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d8850:	f7ff fea0 	bl	d8594 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d8854:	2000      	movs	r0, #0
   d8856:	f7fe f94f 	bl	d6af8 <HAL_RTC_Time_Is_Valid>
   d885a:	3000      	adds	r0, #0
   d885c:	bf18      	it	ne
   d885e:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d8860:	bd10      	pop	{r4, pc}

000d8862 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d8862:	b508      	push	{r3, lr}
    (void)isValid();
   d8864:	f7ff ffdc 	bl	d8820 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d8868:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d886c:	f7fe b934 	b.w	d6ad8 <HAL_RTC_Get_UnixTime>

000d8870 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d8870:	b508      	push	{r3, lr}
	return hour(now());
   d8872:	f7ff fff6 	bl	d8862 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d8876:	f7ff fe5b 	bl	d8530 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d887a:	4b01      	ldr	r3, [pc, #4]	; (d8880 <_ZN9TimeClass4hourEv+0x10>)
   d887c:	6898      	ldr	r0, [r3, #8]
   d887e:	bd08      	pop	{r3, pc}
   d8880:	2003e46c 	.word	0x2003e46c

000d8884 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d8884:	b508      	push	{r3, lr}
	return minute(now());
   d8886:	f7ff ffec 	bl	d8862 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d888a:	f7ff fe51 	bl	d8530 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d888e:	4b01      	ldr	r3, [pc, #4]	; (d8894 <_ZN9TimeClass6minuteEv+0x10>)
   d8890:	6858      	ldr	r0, [r3, #4]
   d8892:	bd08      	pop	{r3, pc}
   d8894:	2003e46c 	.word	0x2003e46c

000d8898 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   d8898:	b508      	push	{r3, lr}
	return day(now());
   d889a:	f7ff ffe2 	bl	d8862 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d889e:	f7ff fe47 	bl	d8530 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   d88a2:	4b01      	ldr	r3, [pc, #4]	; (d88a8 <_ZN9TimeClass3dayEv+0x10>)
   d88a4:	68d8      	ldr	r0, [r3, #12]
   d88a6:	bd08      	pop	{r3, pc}
   d88a8:	2003e46c 	.word	0x2003e46c

000d88ac <_ZN9TimeClass7weekdayEv>:
	return calendar_time_cache.tm_mday;
}

/* the current weekday */
int TimeClass::weekday()
{
   d88ac:	b508      	push	{r3, lr}
	return weekday(now());
   d88ae:	f7ff ffd8 	bl	d8862 <_ZN9TimeClass3nowEv>
}
   d88b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* the current weekday */
int TimeClass::weekday()
{
	return weekday(now());
   d88b6:	f7ff be8b 	b.w	d85d0 <_ZN9TimeClass7weekdayEl>

000d88ba <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   d88ba:	b508      	push	{r3, lr}
	return month(now());
   d88bc:	f7ff ffd1 	bl	d8862 <_ZN9TimeClass3nowEv>
}
   d88c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   d88c4:	f7ff be8e 	b.w	d85e4 <_ZN9TimeClass5monthEl>

000d88c8 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d88c8:	b508      	push	{r3, lr}
	return year(now());
   d88ca:	f7ff ffca 	bl	d8862 <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d88ce:	f7ff fe2f 	bl	d8530 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d88d2:	4b01      	ldr	r3, [pc, #4]	; (d88d8 <_ZN9TimeClass4yearEv+0x10>)
   d88d4:	6958      	ldr	r0, [r3, #20]
   d88d6:	bd08      	pop	{r3, pc}
   d88d8:	2003e46c 	.word	0x2003e46c

000d88dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d88dc:	4b02      	ldr	r3, [pc, #8]	; (d88e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d88de:	681a      	ldr	r2, [r3, #0]
   d88e0:	4b02      	ldr	r3, [pc, #8]	; (d88ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d88e2:	601a      	str	r2, [r3, #0]
   d88e4:	4770      	bx	lr
   d88e6:	bf00      	nop
   d88e8:	2003df74 	.word	0x2003df74
   d88ec:	2003e490 	.word	0x2003e490

000d88f0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d88f0:	4770      	bx	lr

000d88f2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d88f2:	7441      	strb	r1, [r0, #17]
   d88f4:	4770      	bx	lr

000d88f6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d88f6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d88f8:	7c00      	ldrb	r0, [r0, #16]
   d88fa:	f7fe fa1d 	bl	d6d38 <HAL_USART_Available_Data_For_Write>
}
   d88fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8902:	bd08      	pop	{r3, pc}

000d8904 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d8904:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d8906:	7c00      	ldrb	r0, [r0, #16]
   d8908:	f7fe f9ee 	bl	d6ce8 <HAL_USART_Available_Data>
}
   d890c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8910:	bd08      	pop	{r3, pc}

000d8912 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d8912:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d8914:	7c00      	ldrb	r0, [r0, #16]
   d8916:	f7fe f9f7 	bl	d6d08 <HAL_USART_Peek_Data>
}
   d891a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d891e:	bf28      	it	cs
   d8920:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d8924:	bd08      	pop	{r3, pc}

000d8926 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d8926:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d8928:	7c00      	ldrb	r0, [r0, #16]
   d892a:	f7fe f9e5 	bl	d6cf8 <HAL_USART_Read_Data>
}
   d892e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8932:	bf28      	it	cs
   d8934:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d8938:	bd08      	pop	{r3, pc}

000d893a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d893a:	7c00      	ldrb	r0, [r0, #16]
   d893c:	f7fe b9ec 	b.w	d6d18 <HAL_USART_Flush_Data>

000d8940 <_ZN11USARTSerialD0Ev>:
   d8940:	b510      	push	{r4, lr}
   d8942:	2114      	movs	r1, #20
   d8944:	4604      	mov	r4, r0
   d8946:	f000 fa88 	bl	d8e5a <_ZdlPvj>
   d894a:	4620      	mov	r0, r4
   d894c:	bd10      	pop	{r4, pc}

000d894e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d894e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8950:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d8952:	4604      	mov	r4, r0
   d8954:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8956:	b925      	cbnz	r5, d8962 <_ZN11USARTSerial5writeEh+0x14>
   d8958:	7c00      	ldrb	r0, [r0, #16]
   d895a:	f7fe f9ed 	bl	d6d38 <HAL_USART_Available_Data_For_Write>
   d895e:	2800      	cmp	r0, #0
   d8960:	dd05      	ble.n	d896e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8962:	4631      	mov	r1, r6
   d8964:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d896a:	f7fe b9b5 	b.w	d6cd8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d896e:	4628      	mov	r0, r5
   d8970:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8974 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8974:	b510      	push	{r4, lr}
   d8976:	4604      	mov	r4, r0
   d8978:	4608      	mov	r0, r1
   d897a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d897c:	2200      	movs	r2, #0
   d897e:	6062      	str	r2, [r4, #4]
   d8980:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8984:	60a2      	str	r2, [r4, #8]
   d8986:	4a05      	ldr	r2, [pc, #20]	; (d899c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8988:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d898a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d898c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d898e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d8990:	461a      	mov	r2, r3
   d8992:	f7fe f999 	bl	d6cc8 <HAL_USART_Init>
}
   d8996:	4620      	mov	r0, r4
   d8998:	bd10      	pop	{r4, pc}
   d899a:	bf00      	nop
   d899c:	000dda98 	.word	0x000dda98

000d89a0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d89a0:	7c00      	ldrb	r0, [r0, #16]
   d89a2:	f7fe b9c1 	b.w	d6d28 <HAL_USART_Is_Enabled>
	...

000d89a8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d89a8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d89aa:	4d0c      	ldr	r5, [pc, #48]	; (d89dc <_Z22__fetch_global_Serial1v+0x34>)
   d89ac:	6829      	ldr	r1, [r5, #0]
   d89ae:	f011 0401 	ands.w	r4, r1, #1
   d89b2:	d111      	bne.n	d89d8 <_Z22__fetch_global_Serial1v+0x30>
   d89b4:	4628      	mov	r0, r5
   d89b6:	f7fb fb76 	bl	d40a6 <__cxa_guard_acquire>
   d89ba:	b168      	cbz	r0, d89d8 <_Z22__fetch_global_Serial1v+0x30>
   d89bc:	4a08      	ldr	r2, [pc, #32]	; (d89e0 <_Z22__fetch_global_Serial1v+0x38>)
   d89be:	4b09      	ldr	r3, [pc, #36]	; (d89e4 <_Z22__fetch_global_Serial1v+0x3c>)
   d89c0:	4809      	ldr	r0, [pc, #36]	; (d89e8 <_Z22__fetch_global_Serial1v+0x40>)
   d89c2:	4621      	mov	r1, r4
   d89c4:	f7ff ffd6 	bl	d8974 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d89c8:	4628      	mov	r0, r5
   d89ca:	f7fb fb71 	bl	d40b0 <__cxa_guard_release>
   d89ce:	4a07      	ldr	r2, [pc, #28]	; (d89ec <_Z22__fetch_global_Serial1v+0x44>)
   d89d0:	4907      	ldr	r1, [pc, #28]	; (d89f0 <_Z22__fetch_global_Serial1v+0x48>)
   d89d2:	4805      	ldr	r0, [pc, #20]	; (d89e8 <_Z22__fetch_global_Serial1v+0x40>)
   d89d4:	f000 fa3c 	bl	d8e50 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d89d8:	4803      	ldr	r0, [pc, #12]	; (d89e8 <_Z22__fetch_global_Serial1v+0x40>)
   d89da:	bd38      	pop	{r3, r4, r5, pc}
   d89dc:	2003e53c 	.word	0x2003e53c
   d89e0:	2003e540 	.word	0x2003e540
   d89e4:	2003e4b8 	.word	0x2003e4b8
   d89e8:	2003e4a4 	.word	0x2003e4a4
   d89ec:	2003e064 	.word	0x2003e064
   d89f0:	000d88f1 	.word	0x000d88f1

000d89f4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d89f4:	7441      	strb	r1, [r0, #17]
   d89f6:	4770      	bx	lr

000d89f8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d89f8:	4770      	bx	lr

000d89fa <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d89fa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d89fc:	2100      	movs	r1, #0
   d89fe:	7c00      	ldrb	r0, [r0, #16]
   d8a00:	f7fe f9ba 	bl	d6d78 <HAL_USB_USART_Receive_Data>
}
   d8a04:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8a08:	bf28      	it	cs
   d8a0a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d8a0e:	bd08      	pop	{r3, pc}

000d8a10 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d8a10:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8a12:	2101      	movs	r1, #1
   d8a14:	7c00      	ldrb	r0, [r0, #16]
   d8a16:	f7fe f9af 	bl	d6d78 <HAL_USB_USART_Receive_Data>
}
   d8a1a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8a1e:	bf28      	it	cs
   d8a20:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d8a24:	bd08      	pop	{r3, pc}

000d8a26 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d8a26:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8a28:	7c00      	ldrb	r0, [r0, #16]
   d8a2a:	f7fe f99d 	bl	d6d68 <HAL_USB_USART_Available_Data_For_Write>
}
   d8a2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8a32:	bd08      	pop	{r3, pc}

000d8a34 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d8a34:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8a36:	7c00      	ldrb	r0, [r0, #16]
   d8a38:	f7fe f98e 	bl	d6d58 <HAL_USB_USART_Available_Data>
}
   d8a3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8a40:	bd08      	pop	{r3, pc}

000d8a42 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d8a42:	7c00      	ldrb	r0, [r0, #16]
   d8a44:	f7fe b9a8 	b.w	d6d98 <HAL_USB_USART_Flush_Data>

000d8a48 <_ZN9USBSerialD0Ev>:
   d8a48:	b510      	push	{r4, lr}
   d8a4a:	2114      	movs	r1, #20
   d8a4c:	4604      	mov	r4, r0
   d8a4e:	f000 fa04 	bl	d8e5a <_ZdlPvj>
   d8a52:	4620      	mov	r0, r4
   d8a54:	bd10      	pop	{r4, pc}

000d8a56 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8a56:	b538      	push	{r3, r4, r5, lr}
   d8a58:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8a5a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8a5c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8a5e:	f7fe f983 	bl	d6d68 <HAL_USB_USART_Available_Data_For_Write>
   d8a62:	2800      	cmp	r0, #0
   d8a64:	dc01      	bgt.n	d8a6a <_ZN9USBSerial5writeEh+0x14>
   d8a66:	7c60      	ldrb	r0, [r4, #17]
   d8a68:	b128      	cbz	r0, d8a76 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8a6a:	4629      	mov	r1, r5
   d8a6c:	7c20      	ldrb	r0, [r4, #16]
   d8a6e:	f7fe f98b 	bl	d6d88 <HAL_USB_USART_Send_Data>
   d8a72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d8a76:	bd38      	pop	{r3, r4, r5, pc}

000d8a78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8a78:	b510      	push	{r4, lr}
   d8a7a:	4604      	mov	r4, r0
   d8a7c:	2300      	movs	r3, #0
   d8a7e:	6063      	str	r3, [r4, #4]
   d8a80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8a84:	60a3      	str	r3, [r4, #8]
   d8a86:	4b05      	ldr	r3, [pc, #20]	; (d8a9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8a88:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d8a8a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8a8c:	4608      	mov	r0, r1
{
  _serial = serial;
   d8a8e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8a90:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d8a92:	4611      	mov	r1, r2
   d8a94:	f7fe f958 	bl	d6d48 <HAL_USB_USART_Init>
}
   d8a98:	4620      	mov	r0, r4
   d8a9a:	bd10      	pop	{r4, pc}
   d8a9c:	000ddac8 	.word	0x000ddac8

000d8aa0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8aa0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8aa2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8aa4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8aa6:	2100      	movs	r1, #0
   d8aa8:	f001 fa3d 	bl	d9f26 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8aac:	4620      	mov	r0, r4
   d8aae:	bd10      	pop	{r4, pc}

000d8ab0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8ab0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8ab2:	4d0e      	ldr	r5, [pc, #56]	; (d8aec <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d8ab4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8ab6:	a801      	add	r0, sp, #4
   d8ab8:	f7ff fff2 	bl	d8aa0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8abc:	6829      	ldr	r1, [r5, #0]
   d8abe:	f011 0401 	ands.w	r4, r1, #1
   d8ac2:	d110      	bne.n	d8ae6 <_Z16_fetch_usbserialv+0x36>
   d8ac4:	4628      	mov	r0, r5
   d8ac6:	f7fb faee 	bl	d40a6 <__cxa_guard_acquire>
   d8aca:	b160      	cbz	r0, d8ae6 <_Z16_fetch_usbserialv+0x36>
   d8acc:	aa01      	add	r2, sp, #4
   d8ace:	4621      	mov	r1, r4
   d8ad0:	4807      	ldr	r0, [pc, #28]	; (d8af0 <_Z16_fetch_usbserialv+0x40>)
   d8ad2:	f7ff ffd1 	bl	d8a78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8ad6:	4628      	mov	r0, r5
   d8ad8:	f7fb faea 	bl	d40b0 <__cxa_guard_release>
   d8adc:	4a05      	ldr	r2, [pc, #20]	; (d8af4 <_Z16_fetch_usbserialv+0x44>)
   d8ade:	4906      	ldr	r1, [pc, #24]	; (d8af8 <_Z16_fetch_usbserialv+0x48>)
   d8ae0:	4803      	ldr	r0, [pc, #12]	; (d8af0 <_Z16_fetch_usbserialv+0x40>)
   d8ae2:	f000 f9b5 	bl	d8e50 <__aeabi_atexit>
	return _usbserial;
}
   d8ae6:	4802      	ldr	r0, [pc, #8]	; (d8af0 <_Z16_fetch_usbserialv+0x40>)
   d8ae8:	b007      	add	sp, #28
   d8aea:	bd30      	pop	{r4, r5, pc}
   d8aec:	2003e5c4 	.word	0x2003e5c4
   d8af0:	2003e5c8 	.word	0x2003e5c8
   d8af4:	2003e064 	.word	0x2003e064
   d8af8:	000d89f9 	.word	0x000d89f9

000d8afc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d8afc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8afe:	4b0c      	ldr	r3, [pc, #48]	; (d8b30 <serialEventRun+0x34>)
   d8b00:	b133      	cbz	r3, d8b10 <serialEventRun+0x14>
   d8b02:	f7ff ffd5 	bl	d8ab0 <_Z16_fetch_usbserialv>
   d8b06:	6803      	ldr	r3, [r0, #0]
   d8b08:	691b      	ldr	r3, [r3, #16]
   d8b0a:	4798      	blx	r3
   d8b0c:	2800      	cmp	r0, #0
   d8b0e:	dc09      	bgt.n	d8b24 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d8b10:	4b08      	ldr	r3, [pc, #32]	; (d8b34 <serialEventRun+0x38>)
   d8b12:	b163      	cbz	r3, d8b2e <serialEventRun+0x32>
   d8b14:	f7ff ff48 	bl	d89a8 <_Z22__fetch_global_Serial1v>
   d8b18:	6803      	ldr	r3, [r0, #0]
   d8b1a:	691b      	ldr	r3, [r3, #16]
   d8b1c:	4798      	blx	r3
   d8b1e:	2800      	cmp	r0, #0
   d8b20:	dc03      	bgt.n	d8b2a <serialEventRun+0x2e>
   d8b22:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d8b24:	f3af 8000 	nop.w
   d8b28:	e7f2      	b.n	d8b10 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d8b2a:	f3af 8000 	nop.w
   d8b2e:	bd08      	pop	{r3, pc}
	...

000d8b38 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d8b38:	b508      	push	{r3, lr}
	serialEventRun();
   d8b3a:	f7ff ffdf 	bl	d8afc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8b3e:	f7fd ffc3 	bl	d6ac8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8b42:	4b01      	ldr	r3, [pc, #4]	; (d8b48 <_post_loop+0x10>)
   d8b44:	6018      	str	r0, [r3, #0]
   d8b46:	bd08      	pop	{r3, pc}
   d8b48:	2003e5f0 	.word	0x2003e5f0

000d8b4c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8b4c:	4802      	ldr	r0, [pc, #8]	; (d8b58 <_Z33system_initialize_user_backup_ramv+0xc>)
   d8b4e:	4a03      	ldr	r2, [pc, #12]	; (d8b5c <_Z33system_initialize_user_backup_ramv+0x10>)
   d8b50:	4903      	ldr	r1, [pc, #12]	; (d8b60 <_Z33system_initialize_user_backup_ramv+0x14>)
   d8b52:	1a12      	subs	r2, r2, r0
   d8b54:	f001 b9dc 	b.w	d9f10 <memcpy>
   d8b58:	2003f400 	.word	0x2003f400
   d8b5c:	2003f404 	.word	0x2003f404
   d8b60:	000de1e0 	.word	0x000de1e0

000d8b64 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8b64:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8b66:	2300      	movs	r3, #0
   d8b68:	9300      	str	r3, [sp, #0]
   d8b6a:	461a      	mov	r2, r3
   d8b6c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8b70:	f7fe f98e 	bl	d6e90 <system_ctrl_set_result>
}
   d8b74:	b003      	add	sp, #12
   d8b76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8b7c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d8b7c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8b7e:	8843      	ldrh	r3, [r0, #2]
   d8b80:	2b0a      	cmp	r3, #10
   d8b82:	d008      	beq.n	d8b96 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8b84:	2b50      	cmp	r3, #80	; 0x50
   d8b86:	d109      	bne.n	d8b9c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d8b88:	4b09      	ldr	r3, [pc, #36]	; (d8bb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8b8a:	681b      	ldr	r3, [r3, #0]
   d8b8c:	b13b      	cbz	r3, d8b9e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d8b8e:	b003      	add	sp, #12
   d8b90:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d8b94:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d8b96:	f7ff ffe5 	bl	d8b64 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d8b9a:	e006      	b.n	d8baa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8b9c:	2300      	movs	r3, #0
   d8b9e:	9300      	str	r3, [sp, #0]
   d8ba0:	461a      	mov	r2, r3
   d8ba2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8ba6:	f7fe f973 	bl	d6e90 <system_ctrl_set_result>
        break;
    }
}
   d8baa:	b003      	add	sp, #12
   d8bac:	f85d fb04 	ldr.w	pc, [sp], #4
   d8bb0:	2003e5dc 	.word	0x2003e5dc

000d8bb4 <module_user_init_hook>:

void module_user_init_hook()
{
   d8bb4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8bb6:	4c10      	ldr	r4, [pc, #64]	; (d8bf8 <module_user_init_hook+0x44>)
   d8bb8:	4d10      	ldr	r5, [pc, #64]	; (d8bfc <module_user_init_hook+0x48>)
   d8bba:	6823      	ldr	r3, [r4, #0]
   d8bbc:	42ab      	cmp	r3, r5
   d8bbe:	4b10      	ldr	r3, [pc, #64]	; (d8c00 <module_user_init_hook+0x4c>)
   d8bc0:	bf0c      	ite	eq
   d8bc2:	2201      	moveq	r2, #1
   d8bc4:	2200      	movne	r2, #0
   d8bc6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8bc8:	d002      	beq.n	d8bd0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d8bca:	f7ff ffbf 	bl	d8b4c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d8bce:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8bd0:	f7fd ff6a 	bl	d6aa8 <HAL_RNG_GetRandomNumber>
   d8bd4:	4604      	mov	r4, r0
    srand(seed);
   d8bd6:	f001 fbfd 	bl	da3d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8bda:	4b0a      	ldr	r3, [pc, #40]	; (d8c04 <module_user_init_hook+0x50>)
   d8bdc:	b113      	cbz	r3, d8be4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d8bde:	4620      	mov	r0, r4
   d8be0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8be4:	2100      	movs	r1, #0
   d8be6:	4807      	ldr	r0, [pc, #28]	; (d8c04 <module_user_init_hook+0x50>)
   d8be8:	f7fe f9d0 	bl	d6f8c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8bec:	2100      	movs	r1, #0
   d8bee:	4806      	ldr	r0, [pc, #24]	; (d8c08 <module_user_init_hook+0x54>)
}
   d8bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8bf4:	f7fe b942 	b.w	d6e7c <system_ctrl_set_app_request_handler>
   d8bf8:	2003f400 	.word	0x2003f400
   d8bfc:	9a271c1e 	.word	0x9a271c1e
   d8c00:	2003e5e0 	.word	0x2003e5e0
   d8c04:	00000000 	.word	0x00000000
   d8c08:	000d8b7d 	.word	0x000d8b7d

000d8c0c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d8c0c:	b508      	push	{r3, lr}
   d8c0e:	4b02      	ldr	r3, [pc, #8]	; (d8c18 <spark_protocol_instance+0xc>)
   d8c10:	681b      	ldr	r3, [r3, #0]
   d8c12:	681b      	ldr	r3, [r3, #0]
   d8c14:	9301      	str	r3, [sp, #4]
   d8c16:	bd08      	pop	{r3, pc}
   d8c18:	0003025c 	.word	0x0003025c

000d8c1c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d8c1c:	b508      	push	{r3, lr}
   d8c1e:	4b02      	ldr	r3, [pc, #8]	; (d8c28 <spark_protocol_set_product_id+0xc>)
   d8c20:	681b      	ldr	r3, [r3, #0]
   d8c22:	685b      	ldr	r3, [r3, #4]
   d8c24:	9301      	str	r3, [sp, #4]
   d8c26:	bd08      	pop	{r3, pc}
   d8c28:	0003025c 	.word	0x0003025c

000d8c2c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d8c2c:	b508      	push	{r3, lr}
   d8c2e:	4b02      	ldr	r3, [pc, #8]	; (d8c38 <spark_protocol_set_product_firmware_version+0xc>)
   d8c30:	681b      	ldr	r3, [r3, #0]
   d8c32:	689b      	ldr	r3, [r3, #8]
   d8c34:	9301      	str	r3, [sp, #4]
   d8c36:	bd08      	pop	{r3, pc}
   d8c38:	0003025c 	.word	0x0003025c

000d8c3c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8c3c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8c3e:	4e18      	ldr	r6, [pc, #96]	; (d8ca0 <pinAvailable+0x64>)
   d8c40:	6831      	ldr	r1, [r6, #0]
   d8c42:	f011 0501 	ands.w	r5, r1, #1
   d8c46:	4604      	mov	r4, r0
   d8c48:	d10a      	bne.n	d8c60 <pinAvailable+0x24>
   d8c4a:	4630      	mov	r0, r6
   d8c4c:	f7fb fa2b 	bl	d40a6 <__cxa_guard_acquire>
   d8c50:	b130      	cbz	r0, d8c60 <pinAvailable+0x24>
   d8c52:	4629      	mov	r1, r5
   d8c54:	4813      	ldr	r0, [pc, #76]	; (d8ca4 <pinAvailable+0x68>)
   d8c56:	f7ff fabb 	bl	d81d0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8c5a:	4630      	mov	r0, r6
   d8c5c:	f7fb fa28 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d8c60:	4810      	ldr	r0, [pc, #64]	; (d8ca4 <pinAvailable+0x68>)
   d8c62:	f7ff fabf 	bl	d81e4 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8c66:	b128      	cbz	r0, d8c74 <pinAvailable+0x38>
   d8c68:	f1a4 030b 	sub.w	r3, r4, #11
   d8c6c:	2b02      	cmp	r3, #2
   d8c6e:	d801      	bhi.n	d8c74 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d8c70:	2000      	movs	r0, #0
   d8c72:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8c74:	f000 f8a0 	bl	d8db8 <_Z19__fetch_global_Wirev>
   d8c78:	f7fe ff5d 	bl	d7b36 <_ZN7TwoWire9isEnabledEv>
   d8c7c:	b108      	cbz	r0, d8c82 <pinAvailable+0x46>
   d8c7e:	2c01      	cmp	r4, #1
   d8c80:	d9f6      	bls.n	d8c70 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8c82:	f7ff fe91 	bl	d89a8 <_Z22__fetch_global_Serial1v>
   d8c86:	f7ff fe8b 	bl	d89a0 <_ZN11USARTSerial9isEnabledEv>
   d8c8a:	b118      	cbz	r0, d8c94 <pinAvailable+0x58>
   d8c8c:	f1a4 0309 	sub.w	r3, r4, #9
   d8c90:	2b01      	cmp	r3, #1
   d8c92:	d9ed      	bls.n	d8c70 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8c94:	2c23      	cmp	r4, #35	; 0x23
   d8c96:	bf8c      	ite	hi
   d8c98:	2000      	movhi	r0, #0
   d8c9a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8c9c:	bd70      	pop	{r4, r5, r6, pc}
   d8c9e:	bf00      	nop
   d8ca0:	2003e5e4 	.word	0x2003e5e4
   d8ca4:	2003e5e8 	.word	0x2003e5e8

000d8ca8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8ca8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8caa:	b538      	push	{r3, r4, r5, lr}
   d8cac:	4604      	mov	r4, r0
   d8cae:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8cb0:	d80a      	bhi.n	d8cc8 <pinMode+0x20>
   d8cb2:	29ff      	cmp	r1, #255	; 0xff
   d8cb4:	d008      	beq.n	d8cc8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8cb6:	f7ff ffc1 	bl	d8c3c <pinAvailable>
   d8cba:	b128      	cbz	r0, d8cc8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8cbc:	4629      	mov	r1, r5
   d8cbe:	4620      	mov	r0, r4
}
   d8cc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8cc4:	f7fd bf38 	b.w	d6b38 <HAL_Pin_Mode>
   d8cc8:	bd38      	pop	{r3, r4, r5, pc}

000d8cca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8cca:	b538      	push	{r3, r4, r5, lr}
   d8ccc:	4604      	mov	r4, r0
   d8cce:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8cd0:	f7fd ff3a 	bl	d6b48 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8cd4:	28ff      	cmp	r0, #255	; 0xff
   d8cd6:	d010      	beq.n	d8cfa <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8cd8:	2806      	cmp	r0, #6
   d8cda:	d804      	bhi.n	d8ce6 <digitalWrite+0x1c>
   d8cdc:	234d      	movs	r3, #77	; 0x4d
   d8cde:	fa23 f000 	lsr.w	r0, r3, r0
   d8ce2:	07c3      	lsls	r3, r0, #31
   d8ce4:	d409      	bmi.n	d8cfa <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8ce6:	4620      	mov	r0, r4
   d8ce8:	f7ff ffa8 	bl	d8c3c <pinAvailable>
   d8cec:	b128      	cbz	r0, d8cfa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8cee:	4629      	mov	r1, r5
   d8cf0:	4620      	mov	r0, r4
}
   d8cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8cf6:	f7fd bf2f 	b.w	d6b58 <HAL_GPIO_Write>
   d8cfa:	bd38      	pop	{r3, r4, r5, pc}

000d8cfc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8cfc:	b510      	push	{r4, lr}
   d8cfe:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8d00:	f7fd ff22 	bl	d6b48 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d8d04:	3804      	subs	r0, #4
   d8d06:	b2c0      	uxtb	r0, r0
   d8d08:	2801      	cmp	r0, #1
   d8d0a:	d908      	bls.n	d8d1e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8d0c:	4620      	mov	r0, r4
   d8d0e:	f7ff ff95 	bl	d8c3c <pinAvailable>
   d8d12:	b120      	cbz	r0, d8d1e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8d14:	4620      	mov	r0, r4
}
   d8d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8d1a:	f7fd bf25 	b.w	d6b68 <HAL_GPIO_Read>
}
   d8d1e:	2000      	movs	r0, #0
   d8d20:	bd10      	pop	{r4, pc}

000d8d22 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8d22:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d8d24:	b510      	push	{r4, lr}
   d8d26:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8d28:	bf9c      	itt	ls
   d8d2a:	340e      	addls	r4, #14
   d8d2c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8d2e:	4620      	mov	r0, r4
   d8d30:	f7ff ff84 	bl	d8c3c <pinAvailable>
   d8d34:	b150      	cbz	r0, d8d4c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8d36:	2103      	movs	r1, #3
   d8d38:	4620      	mov	r0, r4
   d8d3a:	f7fd fef5 	bl	d6b28 <HAL_Validate_Pin_Function>
   d8d3e:	2803      	cmp	r0, #3
   d8d40:	d104      	bne.n	d8d4c <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8d42:	4620      	mov	r0, r4
}
   d8d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8d48:	f7fd bf26 	b.w	d6b98 <HAL_ADC_Read>
}
   d8d4c:	2000      	movs	r0, #0
   d8d4e:	bd10      	pop	{r4, pc}

000d8d50 <_Z17acquireWireBufferv>:
   d8d50:	b570      	push	{r4, r5, r6, lr}
   d8d52:	4604      	mov	r4, r0
   d8d54:	2514      	movs	r5, #20
   d8d56:	462a      	mov	r2, r5
   d8d58:	4e09      	ldr	r6, [pc, #36]	; (d8d80 <_Z17acquireWireBufferv+0x30>)
   d8d5a:	2100      	movs	r1, #0
   d8d5c:	f001 f8e3 	bl	d9f26 <memset>
   d8d60:	8025      	strh	r5, [r4, #0]
   d8d62:	2520      	movs	r5, #32
   d8d64:	4631      	mov	r1, r6
   d8d66:	60a5      	str	r5, [r4, #8]
   d8d68:	6125      	str	r5, [r4, #16]
   d8d6a:	4628      	mov	r0, r5
   d8d6c:	f000 f88f 	bl	d8e8e <_ZnajRKSt9nothrow_t>
   d8d70:	4631      	mov	r1, r6
   d8d72:	6060      	str	r0, [r4, #4]
   d8d74:	4628      	mov	r0, r5
   d8d76:	f000 f88a 	bl	d8e8e <_ZnajRKSt9nothrow_t>
   d8d7a:	60e0      	str	r0, [r4, #12]
   d8d7c:	4620      	mov	r0, r4
   d8d7e:	bd70      	pop	{r4, r5, r6, pc}
   d8d80:	000ddaf0 	.word	0x000ddaf0

000d8d84 <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d8d84:	b570      	push	{r4, r5, r6, lr}
   d8d86:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8d88:	2514      	movs	r5, #20
   d8d8a:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8d8c:	4e09      	ldr	r6, [pc, #36]	; (d8db4 <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8d8e:	2100      	movs	r1, #0
   d8d90:	f001 f8c9 	bl	d9f26 <memset>
   d8d94:	8025      	strh	r5, [r4, #0]
   d8d96:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8d98:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8d9a:	60a5      	str	r5, [r4, #8]
   d8d9c:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8d9e:	4628      	mov	r0, r5
   d8da0:	f000 f875 	bl	d8e8e <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8da4:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8da6:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8da8:	4628      	mov	r0, r5
   d8daa:	f000 f870 	bl	d8e8e <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d8dae:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d8db0:	4620      	mov	r0, r4
   d8db2:	bd70      	pop	{r4, r5, r6, pc}
   d8db4:	000ddaf0 	.word	0x000ddaf0

000d8db8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8db8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8dba:	4d0e      	ldr	r5, [pc, #56]	; (d8df4 <_Z19__fetch_global_Wirev+0x3c>)
   d8dbc:	6829      	ldr	r1, [r5, #0]
   d8dbe:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8dc2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8dc4:	d113      	bne.n	d8dee <_Z19__fetch_global_Wirev+0x36>
   d8dc6:	4628      	mov	r0, r5
   d8dc8:	f7fb f96d 	bl	d40a6 <__cxa_guard_acquire>
   d8dcc:	b178      	cbz	r0, d8dee <_Z19__fetch_global_Wirev+0x36>
   d8dce:	a801      	add	r0, sp, #4
   d8dd0:	f7ff ffbe 	bl	d8d50 <_Z17acquireWireBufferv>
   d8dd4:	aa01      	add	r2, sp, #4
   d8dd6:	4621      	mov	r1, r4
   d8dd8:	4807      	ldr	r0, [pc, #28]	; (d8df8 <_Z19__fetch_global_Wirev+0x40>)
   d8dda:	f7fe fe5b 	bl	d7a94 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8dde:	4628      	mov	r0, r5
   d8de0:	f7fb f966 	bl	d40b0 <__cxa_guard_release>
   d8de4:	4a05      	ldr	r2, [pc, #20]	; (d8dfc <_Z19__fetch_global_Wirev+0x44>)
   d8de6:	4906      	ldr	r1, [pc, #24]	; (d8e00 <_Z19__fetch_global_Wirev+0x48>)
   d8de8:	4803      	ldr	r0, [pc, #12]	; (d8df8 <_Z19__fetch_global_Wirev+0x40>)
   d8dea:	f000 f831 	bl	d8e50 <__aeabi_atexit>
	return wire;
}
   d8dee:	4802      	ldr	r0, [pc, #8]	; (d8df8 <_Z19__fetch_global_Wirev+0x40>)
   d8df0:	b007      	add	sp, #28
   d8df2:	bd30      	pop	{r4, r5, pc}
   d8df4:	2003e5f4 	.word	0x2003e5f4
   d8df8:	2003e60c 	.word	0x2003e60c
   d8dfc:	2003e064 	.word	0x2003e064
   d8e00:	000d7a3d 	.word	0x000d7a3d

000d8e04 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d8e04:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d8e06:	4c0e      	ldr	r4, [pc, #56]	; (d8e40 <_Z20__fetch_global_Wire1v+0x3c>)
   d8e08:	6823      	ldr	r3, [r4, #0]
   d8e0a:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d8e0c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d8e0e:	d413      	bmi.n	d8e38 <_Z20__fetch_global_Wire1v+0x34>
   d8e10:	4620      	mov	r0, r4
   d8e12:	f7fb f948 	bl	d40a6 <__cxa_guard_acquire>
   d8e16:	b178      	cbz	r0, d8e38 <_Z20__fetch_global_Wire1v+0x34>
   d8e18:	a801      	add	r0, sp, #4
   d8e1a:	f7ff ffb3 	bl	d8d84 <_Z18acquireWire1Bufferv>
   d8e1e:	aa01      	add	r2, sp, #4
   d8e20:	2101      	movs	r1, #1
   d8e22:	4808      	ldr	r0, [pc, #32]	; (d8e44 <_Z20__fetch_global_Wire1v+0x40>)
   d8e24:	f7fe fe36 	bl	d7a94 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8e28:	4620      	mov	r0, r4
   d8e2a:	f7fb f941 	bl	d40b0 <__cxa_guard_release>
   d8e2e:	4a06      	ldr	r2, [pc, #24]	; (d8e48 <_Z20__fetch_global_Wire1v+0x44>)
   d8e30:	4906      	ldr	r1, [pc, #24]	; (d8e4c <_Z20__fetch_global_Wire1v+0x48>)
   d8e32:	4804      	ldr	r0, [pc, #16]	; (d8e44 <_Z20__fetch_global_Wire1v+0x40>)
   d8e34:	f000 f80c 	bl	d8e50 <__aeabi_atexit>
	return wire;
}
   d8e38:	4802      	ldr	r0, [pc, #8]	; (d8e44 <_Z20__fetch_global_Wire1v+0x40>)
   d8e3a:	b006      	add	sp, #24
   d8e3c:	bd10      	pop	{r4, pc}
   d8e3e:	bf00      	nop
   d8e40:	2003e620 	.word	0x2003e620
   d8e44:	2003e5f8 	.word	0x2003e5f8
   d8e48:	2003e064 	.word	0x2003e064
   d8e4c:	000d7a3d 	.word	0x000d7a3d

000d8e50 <__aeabi_atexit>:
   d8e50:	460b      	mov	r3, r1
   d8e52:	4601      	mov	r1, r0
   d8e54:	4618      	mov	r0, r3
   d8e56:	f000 bea7 	b.w	d9ba8 <__cxa_atexit>

000d8e5a <_ZdlPvj>:
   d8e5a:	f7fb b920 	b.w	d409e <_ZdlPv>
	...

000d8e60 <_ZSt15get_new_handlerv>:
   d8e60:	4b02      	ldr	r3, [pc, #8]	; (d8e6c <_ZSt15get_new_handlerv+0xc>)
   d8e62:	6818      	ldr	r0, [r3, #0]
   d8e64:	f3bf 8f5f 	dmb	sy
   d8e68:	4770      	bx	lr
   d8e6a:	bf00      	nop
   d8e6c:	2003e624 	.word	0x2003e624

000d8e70 <_ZnwjRKSt9nothrow_t>:
   d8e70:	b510      	push	{r4, lr}
   d8e72:	2800      	cmp	r0, #0
   d8e74:	bf14      	ite	ne
   d8e76:	4604      	movne	r4, r0
   d8e78:	2401      	moveq	r4, #1
   d8e7a:	4620      	mov	r0, r4
   d8e7c:	f7fe f8de 	bl	d703c <malloc>
   d8e80:	b920      	cbnz	r0, d8e8c <_ZnwjRKSt9nothrow_t+0x1c>
   d8e82:	f7ff ffed 	bl	d8e60 <_ZSt15get_new_handlerv>
   d8e86:	b108      	cbz	r0, d8e8c <_ZnwjRKSt9nothrow_t+0x1c>
   d8e88:	4780      	blx	r0
   d8e8a:	e7f6      	b.n	d8e7a <_ZnwjRKSt9nothrow_t+0xa>
   d8e8c:	bd10      	pop	{r4, pc}

000d8e8e <_ZnajRKSt9nothrow_t>:
   d8e8e:	f7ff bfef 	b.w	d8e70 <_ZnwjRKSt9nothrow_t>

000d8e92 <_ZSt25__throw_bad_function_callv>:
   d8e92:	b508      	push	{r3, lr}
   d8e94:	f7fe f90a 	bl	d70ac <abort>

000d8e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8e98:	4b24      	ldr	r3, [pc, #144]	; (d8f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8e9a:	681a      	ldr	r2, [r3, #0]
   d8e9c:	07d0      	lsls	r0, r2, #31
   d8e9e:	bf5c      	itt	pl
   d8ea0:	2201      	movpl	r2, #1
   d8ea2:	601a      	strpl	r2, [r3, #0]
   d8ea4:	4b22      	ldr	r3, [pc, #136]	; (d8f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8ea6:	681a      	ldr	r2, [r3, #0]
   d8ea8:	07d1      	lsls	r1, r2, #31
   d8eaa:	bf5c      	itt	pl
   d8eac:	2201      	movpl	r2, #1
   d8eae:	601a      	strpl	r2, [r3, #0]
   d8eb0:	4b20      	ldr	r3, [pc, #128]	; (d8f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8eb2:	681a      	ldr	r2, [r3, #0]
   d8eb4:	07d2      	lsls	r2, r2, #31
   d8eb6:	bf5c      	itt	pl
   d8eb8:	2201      	movpl	r2, #1
   d8eba:	601a      	strpl	r2, [r3, #0]
   d8ebc:	4b1e      	ldr	r3, [pc, #120]	; (d8f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8ebe:	681a      	ldr	r2, [r3, #0]
   d8ec0:	07d0      	lsls	r0, r2, #31
   d8ec2:	bf5c      	itt	pl
   d8ec4:	2201      	movpl	r2, #1
   d8ec6:	601a      	strpl	r2, [r3, #0]
   d8ec8:	4b1c      	ldr	r3, [pc, #112]	; (d8f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8eca:	681a      	ldr	r2, [r3, #0]
   d8ecc:	07d1      	lsls	r1, r2, #31
   d8ece:	bf5c      	itt	pl
   d8ed0:	2201      	movpl	r2, #1
   d8ed2:	601a      	strpl	r2, [r3, #0]
   d8ed4:	4b1a      	ldr	r3, [pc, #104]	; (d8f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8ed6:	681a      	ldr	r2, [r3, #0]
   d8ed8:	07d2      	lsls	r2, r2, #31
   d8eda:	bf5c      	itt	pl
   d8edc:	2201      	movpl	r2, #1
   d8ede:	601a      	strpl	r2, [r3, #0]
   d8ee0:	4b18      	ldr	r3, [pc, #96]	; (d8f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8ee2:	681a      	ldr	r2, [r3, #0]
   d8ee4:	07d0      	lsls	r0, r2, #31
   d8ee6:	bf5c      	itt	pl
   d8ee8:	2201      	movpl	r2, #1
   d8eea:	601a      	strpl	r2, [r3, #0]
   d8eec:	4b16      	ldr	r3, [pc, #88]	; (d8f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8eee:	681a      	ldr	r2, [r3, #0]
   d8ef0:	07d1      	lsls	r1, r2, #31
   d8ef2:	bf5c      	itt	pl
   d8ef4:	2201      	movpl	r2, #1
   d8ef6:	601a      	strpl	r2, [r3, #0]
   d8ef8:	4b14      	ldr	r3, [pc, #80]	; (d8f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8efa:	681a      	ldr	r2, [r3, #0]
   d8efc:	07d2      	lsls	r2, r2, #31
   d8efe:	bf5c      	itt	pl
   d8f00:	2201      	movpl	r2, #1
   d8f02:	601a      	strpl	r2, [r3, #0]
   d8f04:	4b12      	ldr	r3, [pc, #72]	; (d8f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8f06:	681a      	ldr	r2, [r3, #0]
   d8f08:	07d0      	lsls	r0, r2, #31
   d8f0a:	bf5c      	itt	pl
   d8f0c:	2201      	movpl	r2, #1
   d8f0e:	601a      	strpl	r2, [r3, #0]
   d8f10:	4b10      	ldr	r3, [pc, #64]	; (d8f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8f12:	681a      	ldr	r2, [r3, #0]
   d8f14:	07d1      	lsls	r1, r2, #31
   d8f16:	bf5c      	itt	pl
   d8f18:	2201      	movpl	r2, #1
   d8f1a:	601a      	strpl	r2, [r3, #0]
   d8f1c:	4b0e      	ldr	r3, [pc, #56]	; (d8f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8f1e:	681a      	ldr	r2, [r3, #0]
   d8f20:	07d2      	lsls	r2, r2, #31
   d8f22:	bf5c      	itt	pl
   d8f24:	2201      	movpl	r2, #1
   d8f26:	601a      	strpl	r2, [r3, #0]
   d8f28:	4770      	bx	lr
   d8f2a:	bf00      	nop
   d8f2c:	2003e654 	.word	0x2003e654
   d8f30:	2003e650 	.word	0x2003e650
   d8f34:	2003e64c 	.word	0x2003e64c
   d8f38:	2003e648 	.word	0x2003e648
   d8f3c:	2003e644 	.word	0x2003e644
   d8f40:	2003e640 	.word	0x2003e640
   d8f44:	2003e63c 	.word	0x2003e63c
   d8f48:	2003e638 	.word	0x2003e638
   d8f4c:	2003e634 	.word	0x2003e634
   d8f50:	2003e630 	.word	0x2003e630
   d8f54:	2003e62c 	.word	0x2003e62c
   d8f58:	2003e628 	.word	0x2003e628

000d8f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8f5c:	4b18      	ldr	r3, [pc, #96]	; (d8fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8f5e:	681a      	ldr	r2, [r3, #0]
   d8f60:	07d1      	lsls	r1, r2, #31
   d8f62:	bf5c      	itt	pl
   d8f64:	2201      	movpl	r2, #1
   d8f66:	601a      	strpl	r2, [r3, #0]
   d8f68:	4b16      	ldr	r3, [pc, #88]	; (d8fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8f6a:	681a      	ldr	r2, [r3, #0]
   d8f6c:	07d2      	lsls	r2, r2, #31
   d8f6e:	bf5c      	itt	pl
   d8f70:	2201      	movpl	r2, #1
   d8f72:	601a      	strpl	r2, [r3, #0]
   d8f74:	4b14      	ldr	r3, [pc, #80]	; (d8fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8f76:	681a      	ldr	r2, [r3, #0]
   d8f78:	07d0      	lsls	r0, r2, #31
   d8f7a:	bf5c      	itt	pl
   d8f7c:	2201      	movpl	r2, #1
   d8f7e:	601a      	strpl	r2, [r3, #0]
   d8f80:	4b12      	ldr	r3, [pc, #72]	; (d8fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8f82:	681a      	ldr	r2, [r3, #0]
   d8f84:	07d1      	lsls	r1, r2, #31
   d8f86:	bf5c      	itt	pl
   d8f88:	2201      	movpl	r2, #1
   d8f8a:	601a      	strpl	r2, [r3, #0]
   d8f8c:	4b10      	ldr	r3, [pc, #64]	; (d8fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8f8e:	681a      	ldr	r2, [r3, #0]
   d8f90:	07d2      	lsls	r2, r2, #31
   d8f92:	bf5c      	itt	pl
   d8f94:	2201      	movpl	r2, #1
   d8f96:	601a      	strpl	r2, [r3, #0]
   d8f98:	4b0e      	ldr	r3, [pc, #56]	; (d8fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8f9a:	681a      	ldr	r2, [r3, #0]
   d8f9c:	07d0      	lsls	r0, r2, #31
   d8f9e:	bf5c      	itt	pl
   d8fa0:	2201      	movpl	r2, #1
   d8fa2:	601a      	strpl	r2, [r3, #0]
   d8fa4:	4b0c      	ldr	r3, [pc, #48]	; (d8fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8fa6:	681a      	ldr	r2, [r3, #0]
   d8fa8:	07d1      	lsls	r1, r2, #31
   d8faa:	bf5c      	itt	pl
   d8fac:	2201      	movpl	r2, #1
   d8fae:	601a      	strpl	r2, [r3, #0]
   d8fb0:	4b0a      	ldr	r3, [pc, #40]	; (d8fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8fb2:	681a      	ldr	r2, [r3, #0]
   d8fb4:	07d2      	lsls	r2, r2, #31
   d8fb6:	bf5c      	itt	pl
   d8fb8:	2201      	movpl	r2, #1
   d8fba:	601a      	strpl	r2, [r3, #0]
   d8fbc:	4770      	bx	lr
   d8fbe:	bf00      	nop
   d8fc0:	2003e674 	.word	0x2003e674
   d8fc4:	2003e670 	.word	0x2003e670
   d8fc8:	2003e66c 	.word	0x2003e66c
   d8fcc:	2003e668 	.word	0x2003e668
   d8fd0:	2003e664 	.word	0x2003e664
   d8fd4:	2003e660 	.word	0x2003e660
   d8fd8:	2003e65c 	.word	0x2003e65c
   d8fdc:	2003e658 	.word	0x2003e658

000d8fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8fe0:	4b18      	ldr	r3, [pc, #96]	; (d9044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8fe2:	681a      	ldr	r2, [r3, #0]
   d8fe4:	07d1      	lsls	r1, r2, #31
   d8fe6:	bf5c      	itt	pl
   d8fe8:	2201      	movpl	r2, #1
   d8fea:	601a      	strpl	r2, [r3, #0]
   d8fec:	4b16      	ldr	r3, [pc, #88]	; (d9048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8fee:	681a      	ldr	r2, [r3, #0]
   d8ff0:	07d2      	lsls	r2, r2, #31
   d8ff2:	bf5c      	itt	pl
   d8ff4:	2201      	movpl	r2, #1
   d8ff6:	601a      	strpl	r2, [r3, #0]
   d8ff8:	4b14      	ldr	r3, [pc, #80]	; (d904c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8ffa:	681a      	ldr	r2, [r3, #0]
   d8ffc:	07d0      	lsls	r0, r2, #31
   d8ffe:	bf5c      	itt	pl
   d9000:	2201      	movpl	r2, #1
   d9002:	601a      	strpl	r2, [r3, #0]
   d9004:	4b12      	ldr	r3, [pc, #72]	; (d9050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d9006:	681a      	ldr	r2, [r3, #0]
   d9008:	07d1      	lsls	r1, r2, #31
   d900a:	bf5c      	itt	pl
   d900c:	2201      	movpl	r2, #1
   d900e:	601a      	strpl	r2, [r3, #0]
   d9010:	4b10      	ldr	r3, [pc, #64]	; (d9054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9012:	681a      	ldr	r2, [r3, #0]
   d9014:	07d2      	lsls	r2, r2, #31
   d9016:	bf5c      	itt	pl
   d9018:	2201      	movpl	r2, #1
   d901a:	601a      	strpl	r2, [r3, #0]
   d901c:	4b0e      	ldr	r3, [pc, #56]	; (d9058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d901e:	681a      	ldr	r2, [r3, #0]
   d9020:	07d0      	lsls	r0, r2, #31
   d9022:	bf5c      	itt	pl
   d9024:	2201      	movpl	r2, #1
   d9026:	601a      	strpl	r2, [r3, #0]
   d9028:	4b0c      	ldr	r3, [pc, #48]	; (d905c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d902a:	681a      	ldr	r2, [r3, #0]
   d902c:	07d1      	lsls	r1, r2, #31
   d902e:	bf5c      	itt	pl
   d9030:	2201      	movpl	r2, #1
   d9032:	601a      	strpl	r2, [r3, #0]
   d9034:	4b0a      	ldr	r3, [pc, #40]	; (d9060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d9036:	681a      	ldr	r2, [r3, #0]
   d9038:	07d2      	lsls	r2, r2, #31
   d903a:	bf5c      	itt	pl
   d903c:	2201      	movpl	r2, #1
   d903e:	601a      	strpl	r2, [r3, #0]
   d9040:	4770      	bx	lr
   d9042:	bf00      	nop
   d9044:	2003e694 	.word	0x2003e694
   d9048:	2003e690 	.word	0x2003e690
   d904c:	2003e68c 	.word	0x2003e68c
   d9050:	2003e688 	.word	0x2003e688
   d9054:	2003e684 	.word	0x2003e684
   d9058:	2003e680 	.word	0x2003e680
   d905c:	2003e67c 	.word	0x2003e67c
   d9060:	2003e678 	.word	0x2003e678

000d9064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d9064:	4b24      	ldr	r3, [pc, #144]	; (d90f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d9066:	681a      	ldr	r2, [r3, #0]
   d9068:	07d0      	lsls	r0, r2, #31
   d906a:	bf5c      	itt	pl
   d906c:	2201      	movpl	r2, #1
   d906e:	601a      	strpl	r2, [r3, #0]
   d9070:	4b22      	ldr	r3, [pc, #136]	; (d90fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d9072:	681a      	ldr	r2, [r3, #0]
   d9074:	07d1      	lsls	r1, r2, #31
   d9076:	bf5c      	itt	pl
   d9078:	2201      	movpl	r2, #1
   d907a:	601a      	strpl	r2, [r3, #0]
   d907c:	4b20      	ldr	r3, [pc, #128]	; (d9100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d907e:	681a      	ldr	r2, [r3, #0]
   d9080:	07d2      	lsls	r2, r2, #31
   d9082:	bf5c      	itt	pl
   d9084:	2201      	movpl	r2, #1
   d9086:	601a      	strpl	r2, [r3, #0]
   d9088:	4b1e      	ldr	r3, [pc, #120]	; (d9104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d908a:	681a      	ldr	r2, [r3, #0]
   d908c:	07d0      	lsls	r0, r2, #31
   d908e:	bf5c      	itt	pl
   d9090:	2201      	movpl	r2, #1
   d9092:	601a      	strpl	r2, [r3, #0]
   d9094:	4b1c      	ldr	r3, [pc, #112]	; (d9108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d9096:	681a      	ldr	r2, [r3, #0]
   d9098:	07d1      	lsls	r1, r2, #31
   d909a:	bf5c      	itt	pl
   d909c:	2201      	movpl	r2, #1
   d909e:	601a      	strpl	r2, [r3, #0]
   d90a0:	4b1a      	ldr	r3, [pc, #104]	; (d910c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d90a2:	681a      	ldr	r2, [r3, #0]
   d90a4:	07d2      	lsls	r2, r2, #31
   d90a6:	bf5c      	itt	pl
   d90a8:	2201      	movpl	r2, #1
   d90aa:	601a      	strpl	r2, [r3, #0]
   d90ac:	4b18      	ldr	r3, [pc, #96]	; (d9110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d90ae:	681a      	ldr	r2, [r3, #0]
   d90b0:	07d0      	lsls	r0, r2, #31
   d90b2:	bf5c      	itt	pl
   d90b4:	2201      	movpl	r2, #1
   d90b6:	601a      	strpl	r2, [r3, #0]
   d90b8:	4b16      	ldr	r3, [pc, #88]	; (d9114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d90ba:	681a      	ldr	r2, [r3, #0]
   d90bc:	07d1      	lsls	r1, r2, #31
   d90be:	bf5c      	itt	pl
   d90c0:	2201      	movpl	r2, #1
   d90c2:	601a      	strpl	r2, [r3, #0]
   d90c4:	4b14      	ldr	r3, [pc, #80]	; (d9118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d90c6:	681a      	ldr	r2, [r3, #0]
   d90c8:	07d2      	lsls	r2, r2, #31
   d90ca:	bf5c      	itt	pl
   d90cc:	2201      	movpl	r2, #1
   d90ce:	601a      	strpl	r2, [r3, #0]
   d90d0:	4b12      	ldr	r3, [pc, #72]	; (d911c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d90d2:	681a      	ldr	r2, [r3, #0]
   d90d4:	07d0      	lsls	r0, r2, #31
   d90d6:	bf5c      	itt	pl
   d90d8:	2201      	movpl	r2, #1
   d90da:	601a      	strpl	r2, [r3, #0]
   d90dc:	4b10      	ldr	r3, [pc, #64]	; (d9120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d90de:	681a      	ldr	r2, [r3, #0]
   d90e0:	07d1      	lsls	r1, r2, #31
   d90e2:	bf5c      	itt	pl
   d90e4:	2201      	movpl	r2, #1
   d90e6:	601a      	strpl	r2, [r3, #0]
   d90e8:	4b0e      	ldr	r3, [pc, #56]	; (d9124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d90ea:	681a      	ldr	r2, [r3, #0]
   d90ec:	07d2      	lsls	r2, r2, #31
   d90ee:	bf5c      	itt	pl
   d90f0:	2201      	movpl	r2, #1
   d90f2:	601a      	strpl	r2, [r3, #0]
   d90f4:	4770      	bx	lr
   d90f6:	bf00      	nop
   d90f8:	2003e6c4 	.word	0x2003e6c4
   d90fc:	2003e6c0 	.word	0x2003e6c0
   d9100:	2003e6bc 	.word	0x2003e6bc
   d9104:	2003e6b8 	.word	0x2003e6b8
   d9108:	2003e6b4 	.word	0x2003e6b4
   d910c:	2003e6b0 	.word	0x2003e6b0
   d9110:	2003e6ac 	.word	0x2003e6ac
   d9114:	2003e6a8 	.word	0x2003e6a8
   d9118:	2003e6a4 	.word	0x2003e6a4
   d911c:	2003e6a0 	.word	0x2003e6a0
   d9120:	2003e69c 	.word	0x2003e69c
   d9124:	2003e698 	.word	0x2003e698

000d9128 <__aeabi_drsub>:
   d9128:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d912c:	e002      	b.n	d9134 <__adddf3>
   d912e:	bf00      	nop

000d9130 <__aeabi_dsub>:
   d9130:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9134 <__adddf3>:
   d9134:	b530      	push	{r4, r5, lr}
   d9136:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d913a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d913e:	ea94 0f05 	teq	r4, r5
   d9142:	bf08      	it	eq
   d9144:	ea90 0f02 	teqeq	r0, r2
   d9148:	bf1f      	itttt	ne
   d914a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d914e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9152:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9156:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d915a:	f000 80e2 	beq.w	d9322 <__adddf3+0x1ee>
   d915e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9162:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d9166:	bfb8      	it	lt
   d9168:	426d      	neglt	r5, r5
   d916a:	dd0c      	ble.n	d9186 <__adddf3+0x52>
   d916c:	442c      	add	r4, r5
   d916e:	ea80 0202 	eor.w	r2, r0, r2
   d9172:	ea81 0303 	eor.w	r3, r1, r3
   d9176:	ea82 0000 	eor.w	r0, r2, r0
   d917a:	ea83 0101 	eor.w	r1, r3, r1
   d917e:	ea80 0202 	eor.w	r2, r0, r2
   d9182:	ea81 0303 	eor.w	r3, r1, r3
   d9186:	2d36      	cmp	r5, #54	; 0x36
   d9188:	bf88      	it	hi
   d918a:	bd30      	pophi	{r4, r5, pc}
   d918c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9190:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9194:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9198:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d919c:	d002      	beq.n	d91a4 <__adddf3+0x70>
   d919e:	4240      	negs	r0, r0
   d91a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d91a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d91a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d91ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d91b0:	d002      	beq.n	d91b8 <__adddf3+0x84>
   d91b2:	4252      	negs	r2, r2
   d91b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d91b8:	ea94 0f05 	teq	r4, r5
   d91bc:	f000 80a7 	beq.w	d930e <__adddf3+0x1da>
   d91c0:	f1a4 0401 	sub.w	r4, r4, #1
   d91c4:	f1d5 0e20 	rsbs	lr, r5, #32
   d91c8:	db0d      	blt.n	d91e6 <__adddf3+0xb2>
   d91ca:	fa02 fc0e 	lsl.w	ip, r2, lr
   d91ce:	fa22 f205 	lsr.w	r2, r2, r5
   d91d2:	1880      	adds	r0, r0, r2
   d91d4:	f141 0100 	adc.w	r1, r1, #0
   d91d8:	fa03 f20e 	lsl.w	r2, r3, lr
   d91dc:	1880      	adds	r0, r0, r2
   d91de:	fa43 f305 	asr.w	r3, r3, r5
   d91e2:	4159      	adcs	r1, r3
   d91e4:	e00e      	b.n	d9204 <__adddf3+0xd0>
   d91e6:	f1a5 0520 	sub.w	r5, r5, #32
   d91ea:	f10e 0e20 	add.w	lr, lr, #32
   d91ee:	2a01      	cmp	r2, #1
   d91f0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d91f4:	bf28      	it	cs
   d91f6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d91fa:	fa43 f305 	asr.w	r3, r3, r5
   d91fe:	18c0      	adds	r0, r0, r3
   d9200:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9204:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9208:	d507      	bpl.n	d921a <__adddf3+0xe6>
   d920a:	f04f 0e00 	mov.w	lr, #0
   d920e:	f1dc 0c00 	rsbs	ip, ip, #0
   d9212:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9216:	eb6e 0101 	sbc.w	r1, lr, r1
   d921a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d921e:	d31b      	bcc.n	d9258 <__adddf3+0x124>
   d9220:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9224:	d30c      	bcc.n	d9240 <__adddf3+0x10c>
   d9226:	0849      	lsrs	r1, r1, #1
   d9228:	ea5f 0030 	movs.w	r0, r0, rrx
   d922c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9230:	f104 0401 	add.w	r4, r4, #1
   d9234:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9238:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d923c:	f080 809a 	bcs.w	d9374 <__adddf3+0x240>
   d9240:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9244:	bf08      	it	eq
   d9246:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d924a:	f150 0000 	adcs.w	r0, r0, #0
   d924e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9252:	ea41 0105 	orr.w	r1, r1, r5
   d9256:	bd30      	pop	{r4, r5, pc}
   d9258:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d925c:	4140      	adcs	r0, r0
   d925e:	eb41 0101 	adc.w	r1, r1, r1
   d9262:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9266:	f1a4 0401 	sub.w	r4, r4, #1
   d926a:	d1e9      	bne.n	d9240 <__adddf3+0x10c>
   d926c:	f091 0f00 	teq	r1, #0
   d9270:	bf04      	itt	eq
   d9272:	4601      	moveq	r1, r0
   d9274:	2000      	moveq	r0, #0
   d9276:	fab1 f381 	clz	r3, r1
   d927a:	bf08      	it	eq
   d927c:	3320      	addeq	r3, #32
   d927e:	f1a3 030b 	sub.w	r3, r3, #11
   d9282:	f1b3 0220 	subs.w	r2, r3, #32
   d9286:	da0c      	bge.n	d92a2 <__adddf3+0x16e>
   d9288:	320c      	adds	r2, #12
   d928a:	dd08      	ble.n	d929e <__adddf3+0x16a>
   d928c:	f102 0c14 	add.w	ip, r2, #20
   d9290:	f1c2 020c 	rsb	r2, r2, #12
   d9294:	fa01 f00c 	lsl.w	r0, r1, ip
   d9298:	fa21 f102 	lsr.w	r1, r1, r2
   d929c:	e00c      	b.n	d92b8 <__adddf3+0x184>
   d929e:	f102 0214 	add.w	r2, r2, #20
   d92a2:	bfd8      	it	le
   d92a4:	f1c2 0c20 	rsble	ip, r2, #32
   d92a8:	fa01 f102 	lsl.w	r1, r1, r2
   d92ac:	fa20 fc0c 	lsr.w	ip, r0, ip
   d92b0:	bfdc      	itt	le
   d92b2:	ea41 010c 	orrle.w	r1, r1, ip
   d92b6:	4090      	lslle	r0, r2
   d92b8:	1ae4      	subs	r4, r4, r3
   d92ba:	bfa2      	ittt	ge
   d92bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d92c0:	4329      	orrge	r1, r5
   d92c2:	bd30      	popge	{r4, r5, pc}
   d92c4:	ea6f 0404 	mvn.w	r4, r4
   d92c8:	3c1f      	subs	r4, #31
   d92ca:	da1c      	bge.n	d9306 <__adddf3+0x1d2>
   d92cc:	340c      	adds	r4, #12
   d92ce:	dc0e      	bgt.n	d92ee <__adddf3+0x1ba>
   d92d0:	f104 0414 	add.w	r4, r4, #20
   d92d4:	f1c4 0220 	rsb	r2, r4, #32
   d92d8:	fa20 f004 	lsr.w	r0, r0, r4
   d92dc:	fa01 f302 	lsl.w	r3, r1, r2
   d92e0:	ea40 0003 	orr.w	r0, r0, r3
   d92e4:	fa21 f304 	lsr.w	r3, r1, r4
   d92e8:	ea45 0103 	orr.w	r1, r5, r3
   d92ec:	bd30      	pop	{r4, r5, pc}
   d92ee:	f1c4 040c 	rsb	r4, r4, #12
   d92f2:	f1c4 0220 	rsb	r2, r4, #32
   d92f6:	fa20 f002 	lsr.w	r0, r0, r2
   d92fa:	fa01 f304 	lsl.w	r3, r1, r4
   d92fe:	ea40 0003 	orr.w	r0, r0, r3
   d9302:	4629      	mov	r1, r5
   d9304:	bd30      	pop	{r4, r5, pc}
   d9306:	fa21 f004 	lsr.w	r0, r1, r4
   d930a:	4629      	mov	r1, r5
   d930c:	bd30      	pop	{r4, r5, pc}
   d930e:	f094 0f00 	teq	r4, #0
   d9312:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9316:	bf06      	itte	eq
   d9318:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d931c:	3401      	addeq	r4, #1
   d931e:	3d01      	subne	r5, #1
   d9320:	e74e      	b.n	d91c0 <__adddf3+0x8c>
   d9322:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9326:	bf18      	it	ne
   d9328:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d932c:	d029      	beq.n	d9382 <__adddf3+0x24e>
   d932e:	ea94 0f05 	teq	r4, r5
   d9332:	bf08      	it	eq
   d9334:	ea90 0f02 	teqeq	r0, r2
   d9338:	d005      	beq.n	d9346 <__adddf3+0x212>
   d933a:	ea54 0c00 	orrs.w	ip, r4, r0
   d933e:	bf04      	itt	eq
   d9340:	4619      	moveq	r1, r3
   d9342:	4610      	moveq	r0, r2
   d9344:	bd30      	pop	{r4, r5, pc}
   d9346:	ea91 0f03 	teq	r1, r3
   d934a:	bf1e      	ittt	ne
   d934c:	2100      	movne	r1, #0
   d934e:	2000      	movne	r0, #0
   d9350:	bd30      	popne	{r4, r5, pc}
   d9352:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9356:	d105      	bne.n	d9364 <__adddf3+0x230>
   d9358:	0040      	lsls	r0, r0, #1
   d935a:	4149      	adcs	r1, r1
   d935c:	bf28      	it	cs
   d935e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9362:	bd30      	pop	{r4, r5, pc}
   d9364:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9368:	bf3c      	itt	cc
   d936a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d936e:	bd30      	popcc	{r4, r5, pc}
   d9370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9374:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9378:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d937c:	f04f 0000 	mov.w	r0, #0
   d9380:	bd30      	pop	{r4, r5, pc}
   d9382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9386:	bf1a      	itte	ne
   d9388:	4619      	movne	r1, r3
   d938a:	4610      	movne	r0, r2
   d938c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9390:	bf1c      	itt	ne
   d9392:	460b      	movne	r3, r1
   d9394:	4602      	movne	r2, r0
   d9396:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d939a:	bf06      	itte	eq
   d939c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d93a0:	ea91 0f03 	teqeq	r1, r3
   d93a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d93a8:	bd30      	pop	{r4, r5, pc}
   d93aa:	bf00      	nop

000d93ac <__aeabi_ui2d>:
   d93ac:	f090 0f00 	teq	r0, #0
   d93b0:	bf04      	itt	eq
   d93b2:	2100      	moveq	r1, #0
   d93b4:	4770      	bxeq	lr
   d93b6:	b530      	push	{r4, r5, lr}
   d93b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d93bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d93c0:	f04f 0500 	mov.w	r5, #0
   d93c4:	f04f 0100 	mov.w	r1, #0
   d93c8:	e750      	b.n	d926c <__adddf3+0x138>
   d93ca:	bf00      	nop

000d93cc <__aeabi_i2d>:
   d93cc:	f090 0f00 	teq	r0, #0
   d93d0:	bf04      	itt	eq
   d93d2:	2100      	moveq	r1, #0
   d93d4:	4770      	bxeq	lr
   d93d6:	b530      	push	{r4, r5, lr}
   d93d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d93dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d93e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d93e4:	bf48      	it	mi
   d93e6:	4240      	negmi	r0, r0
   d93e8:	f04f 0100 	mov.w	r1, #0
   d93ec:	e73e      	b.n	d926c <__adddf3+0x138>
   d93ee:	bf00      	nop

000d93f0 <__aeabi_f2d>:
   d93f0:	0042      	lsls	r2, r0, #1
   d93f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d93f6:	ea4f 0131 	mov.w	r1, r1, rrx
   d93fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d93fe:	bf1f      	itttt	ne
   d9400:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9404:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9408:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d940c:	4770      	bxne	lr
   d940e:	f092 0f00 	teq	r2, #0
   d9412:	bf14      	ite	ne
   d9414:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9418:	4770      	bxeq	lr
   d941a:	b530      	push	{r4, r5, lr}
   d941c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9424:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9428:	e720      	b.n	d926c <__adddf3+0x138>
   d942a:	bf00      	nop

000d942c <__aeabi_ul2d>:
   d942c:	ea50 0201 	orrs.w	r2, r0, r1
   d9430:	bf08      	it	eq
   d9432:	4770      	bxeq	lr
   d9434:	b530      	push	{r4, r5, lr}
   d9436:	f04f 0500 	mov.w	r5, #0
   d943a:	e00a      	b.n	d9452 <__aeabi_l2d+0x16>

000d943c <__aeabi_l2d>:
   d943c:	ea50 0201 	orrs.w	r2, r0, r1
   d9440:	bf08      	it	eq
   d9442:	4770      	bxeq	lr
   d9444:	b530      	push	{r4, r5, lr}
   d9446:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d944a:	d502      	bpl.n	d9452 <__aeabi_l2d+0x16>
   d944c:	4240      	negs	r0, r0
   d944e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9452:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9456:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d945a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d945e:	f43f aedc 	beq.w	d921a <__adddf3+0xe6>
   d9462:	f04f 0203 	mov.w	r2, #3
   d9466:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d946a:	bf18      	it	ne
   d946c:	3203      	addne	r2, #3
   d946e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9472:	bf18      	it	ne
   d9474:	3203      	addne	r2, #3
   d9476:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d947a:	f1c2 0320 	rsb	r3, r2, #32
   d947e:	fa00 fc03 	lsl.w	ip, r0, r3
   d9482:	fa20 f002 	lsr.w	r0, r0, r2
   d9486:	fa01 fe03 	lsl.w	lr, r1, r3
   d948a:	ea40 000e 	orr.w	r0, r0, lr
   d948e:	fa21 f102 	lsr.w	r1, r1, r2
   d9492:	4414      	add	r4, r2
   d9494:	e6c1      	b.n	d921a <__adddf3+0xe6>
   d9496:	bf00      	nop

000d9498 <__aeabi_dmul>:
   d9498:	b570      	push	{r4, r5, r6, lr}
   d949a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d949e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d94a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d94a6:	bf1d      	ittte	ne
   d94a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d94ac:	ea94 0f0c 	teqne	r4, ip
   d94b0:	ea95 0f0c 	teqne	r5, ip
   d94b4:	f000 f8de 	bleq	d9674 <__aeabi_dmul+0x1dc>
   d94b8:	442c      	add	r4, r5
   d94ba:	ea81 0603 	eor.w	r6, r1, r3
   d94be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d94c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d94c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d94ca:	bf18      	it	ne
   d94cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d94d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d94d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d94d8:	d038      	beq.n	d954c <__aeabi_dmul+0xb4>
   d94da:	fba0 ce02 	umull	ip, lr, r0, r2
   d94de:	f04f 0500 	mov.w	r5, #0
   d94e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d94e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d94ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   d94ee:	f04f 0600 	mov.w	r6, #0
   d94f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d94f6:	f09c 0f00 	teq	ip, #0
   d94fa:	bf18      	it	ne
   d94fc:	f04e 0e01 	orrne.w	lr, lr, #1
   d9500:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9504:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9508:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d950c:	d204      	bcs.n	d9518 <__aeabi_dmul+0x80>
   d950e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9512:	416d      	adcs	r5, r5
   d9514:	eb46 0606 	adc.w	r6, r6, r6
   d9518:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d951c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9520:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9524:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9528:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d952c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9530:	bf88      	it	hi
   d9532:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9536:	d81e      	bhi.n	d9576 <__aeabi_dmul+0xde>
   d9538:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d953c:	bf08      	it	eq
   d953e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9542:	f150 0000 	adcs.w	r0, r0, #0
   d9546:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d954a:	bd70      	pop	{r4, r5, r6, pc}
   d954c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9550:	ea46 0101 	orr.w	r1, r6, r1
   d9554:	ea40 0002 	orr.w	r0, r0, r2
   d9558:	ea81 0103 	eor.w	r1, r1, r3
   d955c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9560:	bfc2      	ittt	gt
   d9562:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9566:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d956a:	bd70      	popgt	{r4, r5, r6, pc}
   d956c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9570:	f04f 0e00 	mov.w	lr, #0
   d9574:	3c01      	subs	r4, #1
   d9576:	f300 80ab 	bgt.w	d96d0 <__aeabi_dmul+0x238>
   d957a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d957e:	bfde      	ittt	le
   d9580:	2000      	movle	r0, #0
   d9582:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9586:	bd70      	pople	{r4, r5, r6, pc}
   d9588:	f1c4 0400 	rsb	r4, r4, #0
   d958c:	3c20      	subs	r4, #32
   d958e:	da35      	bge.n	d95fc <__aeabi_dmul+0x164>
   d9590:	340c      	adds	r4, #12
   d9592:	dc1b      	bgt.n	d95cc <__aeabi_dmul+0x134>
   d9594:	f104 0414 	add.w	r4, r4, #20
   d9598:	f1c4 0520 	rsb	r5, r4, #32
   d959c:	fa00 f305 	lsl.w	r3, r0, r5
   d95a0:	fa20 f004 	lsr.w	r0, r0, r4
   d95a4:	fa01 f205 	lsl.w	r2, r1, r5
   d95a8:	ea40 0002 	orr.w	r0, r0, r2
   d95ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d95b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d95b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d95b8:	fa21 f604 	lsr.w	r6, r1, r4
   d95bc:	eb42 0106 	adc.w	r1, r2, r6
   d95c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d95c4:	bf08      	it	eq
   d95c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d95ca:	bd70      	pop	{r4, r5, r6, pc}
   d95cc:	f1c4 040c 	rsb	r4, r4, #12
   d95d0:	f1c4 0520 	rsb	r5, r4, #32
   d95d4:	fa00 f304 	lsl.w	r3, r0, r4
   d95d8:	fa20 f005 	lsr.w	r0, r0, r5
   d95dc:	fa01 f204 	lsl.w	r2, r1, r4
   d95e0:	ea40 0002 	orr.w	r0, r0, r2
   d95e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d95e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d95ec:	f141 0100 	adc.w	r1, r1, #0
   d95f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d95f4:	bf08      	it	eq
   d95f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d95fa:	bd70      	pop	{r4, r5, r6, pc}
   d95fc:	f1c4 0520 	rsb	r5, r4, #32
   d9600:	fa00 f205 	lsl.w	r2, r0, r5
   d9604:	ea4e 0e02 	orr.w	lr, lr, r2
   d9608:	fa20 f304 	lsr.w	r3, r0, r4
   d960c:	fa01 f205 	lsl.w	r2, r1, r5
   d9610:	ea43 0302 	orr.w	r3, r3, r2
   d9614:	fa21 f004 	lsr.w	r0, r1, r4
   d9618:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d961c:	fa21 f204 	lsr.w	r2, r1, r4
   d9620:	ea20 0002 	bic.w	r0, r0, r2
   d9624:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d962c:	bf08      	it	eq
   d962e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9632:	bd70      	pop	{r4, r5, r6, pc}
   d9634:	f094 0f00 	teq	r4, #0
   d9638:	d10f      	bne.n	d965a <__aeabi_dmul+0x1c2>
   d963a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d963e:	0040      	lsls	r0, r0, #1
   d9640:	eb41 0101 	adc.w	r1, r1, r1
   d9644:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9648:	bf08      	it	eq
   d964a:	3c01      	subeq	r4, #1
   d964c:	d0f7      	beq.n	d963e <__aeabi_dmul+0x1a6>
   d964e:	ea41 0106 	orr.w	r1, r1, r6
   d9652:	f095 0f00 	teq	r5, #0
   d9656:	bf18      	it	ne
   d9658:	4770      	bxne	lr
   d965a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d965e:	0052      	lsls	r2, r2, #1
   d9660:	eb43 0303 	adc.w	r3, r3, r3
   d9664:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9668:	bf08      	it	eq
   d966a:	3d01      	subeq	r5, #1
   d966c:	d0f7      	beq.n	d965e <__aeabi_dmul+0x1c6>
   d966e:	ea43 0306 	orr.w	r3, r3, r6
   d9672:	4770      	bx	lr
   d9674:	ea94 0f0c 	teq	r4, ip
   d9678:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d967c:	bf18      	it	ne
   d967e:	ea95 0f0c 	teqne	r5, ip
   d9682:	d00c      	beq.n	d969e <__aeabi_dmul+0x206>
   d9684:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9688:	bf18      	it	ne
   d968a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d968e:	d1d1      	bne.n	d9634 <__aeabi_dmul+0x19c>
   d9690:	ea81 0103 	eor.w	r1, r1, r3
   d9694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9698:	f04f 0000 	mov.w	r0, #0
   d969c:	bd70      	pop	{r4, r5, r6, pc}
   d969e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d96a2:	bf06      	itte	eq
   d96a4:	4610      	moveq	r0, r2
   d96a6:	4619      	moveq	r1, r3
   d96a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d96ac:	d019      	beq.n	d96e2 <__aeabi_dmul+0x24a>
   d96ae:	ea94 0f0c 	teq	r4, ip
   d96b2:	d102      	bne.n	d96ba <__aeabi_dmul+0x222>
   d96b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d96b8:	d113      	bne.n	d96e2 <__aeabi_dmul+0x24a>
   d96ba:	ea95 0f0c 	teq	r5, ip
   d96be:	d105      	bne.n	d96cc <__aeabi_dmul+0x234>
   d96c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d96c4:	bf1c      	itt	ne
   d96c6:	4610      	movne	r0, r2
   d96c8:	4619      	movne	r1, r3
   d96ca:	d10a      	bne.n	d96e2 <__aeabi_dmul+0x24a>
   d96cc:	ea81 0103 	eor.w	r1, r1, r3
   d96d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d96d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d96d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d96dc:	f04f 0000 	mov.w	r0, #0
   d96e0:	bd70      	pop	{r4, r5, r6, pc}
   d96e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d96e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d96ea:	bd70      	pop	{r4, r5, r6, pc}

000d96ec <__aeabi_ddiv>:
   d96ec:	b570      	push	{r4, r5, r6, lr}
   d96ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d96f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d96f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d96fa:	bf1d      	ittte	ne
   d96fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9700:	ea94 0f0c 	teqne	r4, ip
   d9704:	ea95 0f0c 	teqne	r5, ip
   d9708:	f000 f8a7 	bleq	d985a <__aeabi_ddiv+0x16e>
   d970c:	eba4 0405 	sub.w	r4, r4, r5
   d9710:	ea81 0e03 	eor.w	lr, r1, r3
   d9714:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9718:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d971c:	f000 8088 	beq.w	d9830 <__aeabi_ddiv+0x144>
   d9720:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9724:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9728:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d972c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9730:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9734:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9738:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d973c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9740:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9744:	429d      	cmp	r5, r3
   d9746:	bf08      	it	eq
   d9748:	4296      	cmpeq	r6, r2
   d974a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d974e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9752:	d202      	bcs.n	d975a <__aeabi_ddiv+0x6e>
   d9754:	085b      	lsrs	r3, r3, #1
   d9756:	ea4f 0232 	mov.w	r2, r2, rrx
   d975a:	1ab6      	subs	r6, r6, r2
   d975c:	eb65 0503 	sbc.w	r5, r5, r3
   d9760:	085b      	lsrs	r3, r3, #1
   d9762:	ea4f 0232 	mov.w	r2, r2, rrx
   d9766:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d976a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d976e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9772:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9776:	bf22      	ittt	cs
   d9778:	1ab6      	subcs	r6, r6, r2
   d977a:	4675      	movcs	r5, lr
   d977c:	ea40 000c 	orrcs.w	r0, r0, ip
   d9780:	085b      	lsrs	r3, r3, #1
   d9782:	ea4f 0232 	mov.w	r2, r2, rrx
   d9786:	ebb6 0e02 	subs.w	lr, r6, r2
   d978a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d978e:	bf22      	ittt	cs
   d9790:	1ab6      	subcs	r6, r6, r2
   d9792:	4675      	movcs	r5, lr
   d9794:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9798:	085b      	lsrs	r3, r3, #1
   d979a:	ea4f 0232 	mov.w	r2, r2, rrx
   d979e:	ebb6 0e02 	subs.w	lr, r6, r2
   d97a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d97a6:	bf22      	ittt	cs
   d97a8:	1ab6      	subcs	r6, r6, r2
   d97aa:	4675      	movcs	r5, lr
   d97ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d97b0:	085b      	lsrs	r3, r3, #1
   d97b2:	ea4f 0232 	mov.w	r2, r2, rrx
   d97b6:	ebb6 0e02 	subs.w	lr, r6, r2
   d97ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d97be:	bf22      	ittt	cs
   d97c0:	1ab6      	subcs	r6, r6, r2
   d97c2:	4675      	movcs	r5, lr
   d97c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d97c8:	ea55 0e06 	orrs.w	lr, r5, r6
   d97cc:	d018      	beq.n	d9800 <__aeabi_ddiv+0x114>
   d97ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d97d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d97d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d97da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d97de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d97e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d97e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d97ea:	d1c0      	bne.n	d976e <__aeabi_ddiv+0x82>
   d97ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d97f0:	d10b      	bne.n	d980a <__aeabi_ddiv+0x11e>
   d97f2:	ea41 0100 	orr.w	r1, r1, r0
   d97f6:	f04f 0000 	mov.w	r0, #0
   d97fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d97fe:	e7b6      	b.n	d976e <__aeabi_ddiv+0x82>
   d9800:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9804:	bf04      	itt	eq
   d9806:	4301      	orreq	r1, r0
   d9808:	2000      	moveq	r0, #0
   d980a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d980e:	bf88      	it	hi
   d9810:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9814:	f63f aeaf 	bhi.w	d9576 <__aeabi_dmul+0xde>
   d9818:	ebb5 0c03 	subs.w	ip, r5, r3
   d981c:	bf04      	itt	eq
   d981e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9822:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9826:	f150 0000 	adcs.w	r0, r0, #0
   d982a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d982e:	bd70      	pop	{r4, r5, r6, pc}
   d9830:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9834:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9838:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d983c:	bfc2      	ittt	gt
   d983e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9842:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9846:	bd70      	popgt	{r4, r5, r6, pc}
   d9848:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d984c:	f04f 0e00 	mov.w	lr, #0
   d9850:	3c01      	subs	r4, #1
   d9852:	e690      	b.n	d9576 <__aeabi_dmul+0xde>
   d9854:	ea45 0e06 	orr.w	lr, r5, r6
   d9858:	e68d      	b.n	d9576 <__aeabi_dmul+0xde>
   d985a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d985e:	ea94 0f0c 	teq	r4, ip
   d9862:	bf08      	it	eq
   d9864:	ea95 0f0c 	teqeq	r5, ip
   d9868:	f43f af3b 	beq.w	d96e2 <__aeabi_dmul+0x24a>
   d986c:	ea94 0f0c 	teq	r4, ip
   d9870:	d10a      	bne.n	d9888 <__aeabi_ddiv+0x19c>
   d9872:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9876:	f47f af34 	bne.w	d96e2 <__aeabi_dmul+0x24a>
   d987a:	ea95 0f0c 	teq	r5, ip
   d987e:	f47f af25 	bne.w	d96cc <__aeabi_dmul+0x234>
   d9882:	4610      	mov	r0, r2
   d9884:	4619      	mov	r1, r3
   d9886:	e72c      	b.n	d96e2 <__aeabi_dmul+0x24a>
   d9888:	ea95 0f0c 	teq	r5, ip
   d988c:	d106      	bne.n	d989c <__aeabi_ddiv+0x1b0>
   d988e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9892:	f43f aefd 	beq.w	d9690 <__aeabi_dmul+0x1f8>
   d9896:	4610      	mov	r0, r2
   d9898:	4619      	mov	r1, r3
   d989a:	e722      	b.n	d96e2 <__aeabi_dmul+0x24a>
   d989c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d98a0:	bf18      	it	ne
   d98a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d98a6:	f47f aec5 	bne.w	d9634 <__aeabi_dmul+0x19c>
   d98aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d98ae:	f47f af0d 	bne.w	d96cc <__aeabi_dmul+0x234>
   d98b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d98b6:	f47f aeeb 	bne.w	d9690 <__aeabi_dmul+0x1f8>
   d98ba:	e712      	b.n	d96e2 <__aeabi_dmul+0x24a>

000d98bc <__gedf2>:
   d98bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d98c0:	e006      	b.n	d98d0 <__cmpdf2+0x4>
   d98c2:	bf00      	nop

000d98c4 <__ledf2>:
   d98c4:	f04f 0c01 	mov.w	ip, #1
   d98c8:	e002      	b.n	d98d0 <__cmpdf2+0x4>
   d98ca:	bf00      	nop

000d98cc <__cmpdf2>:
   d98cc:	f04f 0c01 	mov.w	ip, #1
   d98d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d98d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d98d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d98dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d98e0:	bf18      	it	ne
   d98e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d98e6:	d01b      	beq.n	d9920 <__cmpdf2+0x54>
   d98e8:	b001      	add	sp, #4
   d98ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d98ee:	bf0c      	ite	eq
   d98f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d98f4:	ea91 0f03 	teqne	r1, r3
   d98f8:	bf02      	ittt	eq
   d98fa:	ea90 0f02 	teqeq	r0, r2
   d98fe:	2000      	moveq	r0, #0
   d9900:	4770      	bxeq	lr
   d9902:	f110 0f00 	cmn.w	r0, #0
   d9906:	ea91 0f03 	teq	r1, r3
   d990a:	bf58      	it	pl
   d990c:	4299      	cmppl	r1, r3
   d990e:	bf08      	it	eq
   d9910:	4290      	cmpeq	r0, r2
   d9912:	bf2c      	ite	cs
   d9914:	17d8      	asrcs	r0, r3, #31
   d9916:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d991a:	f040 0001 	orr.w	r0, r0, #1
   d991e:	4770      	bx	lr
   d9920:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9928:	d102      	bne.n	d9930 <__cmpdf2+0x64>
   d992a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d992e:	d107      	bne.n	d9940 <__cmpdf2+0x74>
   d9930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9934:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9938:	d1d6      	bne.n	d98e8 <__cmpdf2+0x1c>
   d993a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d993e:	d0d3      	beq.n	d98e8 <__cmpdf2+0x1c>
   d9940:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9944:	4770      	bx	lr
   d9946:	bf00      	nop

000d9948 <__aeabi_cdrcmple>:
   d9948:	4684      	mov	ip, r0
   d994a:	4610      	mov	r0, r2
   d994c:	4662      	mov	r2, ip
   d994e:	468c      	mov	ip, r1
   d9950:	4619      	mov	r1, r3
   d9952:	4663      	mov	r3, ip
   d9954:	e000      	b.n	d9958 <__aeabi_cdcmpeq>
   d9956:	bf00      	nop

000d9958 <__aeabi_cdcmpeq>:
   d9958:	b501      	push	{r0, lr}
   d995a:	f7ff ffb7 	bl	d98cc <__cmpdf2>
   d995e:	2800      	cmp	r0, #0
   d9960:	bf48      	it	mi
   d9962:	f110 0f00 	cmnmi.w	r0, #0
   d9966:	bd01      	pop	{r0, pc}

000d9968 <__aeabi_dcmpeq>:
   d9968:	f84d ed08 	str.w	lr, [sp, #-8]!
   d996c:	f7ff fff4 	bl	d9958 <__aeabi_cdcmpeq>
   d9970:	bf0c      	ite	eq
   d9972:	2001      	moveq	r0, #1
   d9974:	2000      	movne	r0, #0
   d9976:	f85d fb08 	ldr.w	pc, [sp], #8
   d997a:	bf00      	nop

000d997c <__aeabi_dcmplt>:
   d997c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9980:	f7ff ffea 	bl	d9958 <__aeabi_cdcmpeq>
   d9984:	bf34      	ite	cc
   d9986:	2001      	movcc	r0, #1
   d9988:	2000      	movcs	r0, #0
   d998a:	f85d fb08 	ldr.w	pc, [sp], #8
   d998e:	bf00      	nop

000d9990 <__aeabi_dcmple>:
   d9990:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9994:	f7ff ffe0 	bl	d9958 <__aeabi_cdcmpeq>
   d9998:	bf94      	ite	ls
   d999a:	2001      	movls	r0, #1
   d999c:	2000      	movhi	r0, #0
   d999e:	f85d fb08 	ldr.w	pc, [sp], #8
   d99a2:	bf00      	nop

000d99a4 <__aeabi_dcmpge>:
   d99a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d99a8:	f7ff ffce 	bl	d9948 <__aeabi_cdrcmple>
   d99ac:	bf94      	ite	ls
   d99ae:	2001      	movls	r0, #1
   d99b0:	2000      	movhi	r0, #0
   d99b2:	f85d fb08 	ldr.w	pc, [sp], #8
   d99b6:	bf00      	nop

000d99b8 <__aeabi_dcmpgt>:
   d99b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d99bc:	f7ff ffc4 	bl	d9948 <__aeabi_cdrcmple>
   d99c0:	bf34      	ite	cc
   d99c2:	2001      	movcc	r0, #1
   d99c4:	2000      	movcs	r0, #0
   d99c6:	f85d fb08 	ldr.w	pc, [sp], #8
   d99ca:	bf00      	nop

000d99cc <__aeabi_dcmpun>:
   d99cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d99d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d99d4:	d102      	bne.n	d99dc <__aeabi_dcmpun+0x10>
   d99d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d99da:	d10a      	bne.n	d99f2 <__aeabi_dcmpun+0x26>
   d99dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d99e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d99e4:	d102      	bne.n	d99ec <__aeabi_dcmpun+0x20>
   d99e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d99ea:	d102      	bne.n	d99f2 <__aeabi_dcmpun+0x26>
   d99ec:	f04f 0000 	mov.w	r0, #0
   d99f0:	4770      	bx	lr
   d99f2:	f04f 0001 	mov.w	r0, #1
   d99f6:	4770      	bx	lr

000d99f8 <__aeabi_d2iz>:
   d99f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d99fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9a00:	d215      	bcs.n	d9a2e <__aeabi_d2iz+0x36>
   d9a02:	d511      	bpl.n	d9a28 <__aeabi_d2iz+0x30>
   d9a04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9a08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9a0c:	d912      	bls.n	d9a34 <__aeabi_d2iz+0x3c>
   d9a0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9a12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9a16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9a1e:	fa23 f002 	lsr.w	r0, r3, r2
   d9a22:	bf18      	it	ne
   d9a24:	4240      	negne	r0, r0
   d9a26:	4770      	bx	lr
   d9a28:	f04f 0000 	mov.w	r0, #0
   d9a2c:	4770      	bx	lr
   d9a2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9a32:	d105      	bne.n	d9a40 <__aeabi_d2iz+0x48>
   d9a34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9a38:	bf08      	it	eq
   d9a3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9a3e:	4770      	bx	lr
   d9a40:	f04f 0000 	mov.w	r0, #0
   d9a44:	4770      	bx	lr
   d9a46:	bf00      	nop

000d9a48 <__aeabi_d2uiz>:
   d9a48:	004a      	lsls	r2, r1, #1
   d9a4a:	d211      	bcs.n	d9a70 <__aeabi_d2uiz+0x28>
   d9a4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9a50:	d211      	bcs.n	d9a76 <__aeabi_d2uiz+0x2e>
   d9a52:	d50d      	bpl.n	d9a70 <__aeabi_d2uiz+0x28>
   d9a54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9a58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9a5c:	d40e      	bmi.n	d9a7c <__aeabi_d2uiz+0x34>
   d9a5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9a66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9a6a:	fa23 f002 	lsr.w	r0, r3, r2
   d9a6e:	4770      	bx	lr
   d9a70:	f04f 0000 	mov.w	r0, #0
   d9a74:	4770      	bx	lr
   d9a76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9a7a:	d102      	bne.n	d9a82 <__aeabi_d2uiz+0x3a>
   d9a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9a80:	4770      	bx	lr
   d9a82:	f04f 0000 	mov.w	r0, #0
   d9a86:	4770      	bx	lr

000d9a88 <__aeabi_d2f>:
   d9a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9a90:	bf24      	itt	cs
   d9a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9a9a:	d90d      	bls.n	d9ab8 <__aeabi_d2f+0x30>
   d9a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9ab0:	bf08      	it	eq
   d9ab2:	f020 0001 	biceq.w	r0, r0, #1
   d9ab6:	4770      	bx	lr
   d9ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9abc:	d121      	bne.n	d9b02 <__aeabi_d2f+0x7a>
   d9abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9ac2:	bfbc      	itt	lt
   d9ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9ac8:	4770      	bxlt	lr
   d9aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9ad2:	f1c2 0218 	rsb	r2, r2, #24
   d9ad6:	f1c2 0c20 	rsb	ip, r2, #32
   d9ada:	fa10 f30c 	lsls.w	r3, r0, ip
   d9ade:	fa20 f002 	lsr.w	r0, r0, r2
   d9ae2:	bf18      	it	ne
   d9ae4:	f040 0001 	orrne.w	r0, r0, #1
   d9ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9af0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9af4:	ea40 000c 	orr.w	r0, r0, ip
   d9af8:	fa23 f302 	lsr.w	r3, r3, r2
   d9afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9b00:	e7cc      	b.n	d9a9c <__aeabi_d2f+0x14>
   d9b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9b06:	d107      	bne.n	d9b18 <__aeabi_d2f+0x90>
   d9b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9b0c:	bf1e      	ittt	ne
   d9b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9b16:	4770      	bxne	lr
   d9b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9b24:	4770      	bx	lr
   d9b26:	bf00      	nop

000d9b28 <asctime>:
   d9b28:	4b09      	ldr	r3, [pc, #36]	; (d9b50 <asctime+0x28>)
   d9b2a:	b570      	push	{r4, r5, r6, lr}
   d9b2c:	681c      	ldr	r4, [r3, #0]
   d9b2e:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d9b30:	4606      	mov	r6, r0
   d9b32:	b93d      	cbnz	r5, d9b44 <asctime+0x1c>
   d9b34:	201a      	movs	r0, #26
   d9b36:	f7fd fa81 	bl	d703c <malloc>
   d9b3a:	221a      	movs	r2, #26
   d9b3c:	6420      	str	r0, [r4, #64]	; 0x40
   d9b3e:	4629      	mov	r1, r5
   d9b40:	f000 f9f1 	bl	d9f26 <memset>
   d9b44:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d9b46:	4630      	mov	r0, r6
   d9b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d9b4c:	f000 b802 	b.w	d9b54 <asctime_r>
   d9b50:	2003dfdc 	.word	0x2003dfdc

000d9b54 <asctime_r>:
   d9b54:	b510      	push	{r4, lr}
   d9b56:	460c      	mov	r4, r1
   d9b58:	6941      	ldr	r1, [r0, #20]
   d9b5a:	6903      	ldr	r3, [r0, #16]
   d9b5c:	6982      	ldr	r2, [r0, #24]
   d9b5e:	b086      	sub	sp, #24
   d9b60:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d9b64:	9104      	str	r1, [sp, #16]
   d9b66:	6801      	ldr	r1, [r0, #0]
   d9b68:	9103      	str	r1, [sp, #12]
   d9b6a:	6841      	ldr	r1, [r0, #4]
   d9b6c:	9102      	str	r1, [sp, #8]
   d9b6e:	6881      	ldr	r1, [r0, #8]
   d9b70:	9101      	str	r1, [sp, #4]
   d9b72:	68c1      	ldr	r1, [r0, #12]
   d9b74:	9100      	str	r1, [sp, #0]
   d9b76:	4907      	ldr	r1, [pc, #28]	; (d9b94 <asctime_r+0x40>)
   d9b78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d9b7c:	440b      	add	r3, r1
   d9b7e:	4906      	ldr	r1, [pc, #24]	; (d9b98 <asctime_r+0x44>)
   d9b80:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d9b84:	440a      	add	r2, r1
   d9b86:	4620      	mov	r0, r4
   d9b88:	4904      	ldr	r1, [pc, #16]	; (d9b9c <asctime_r+0x48>)
   d9b8a:	f7fd fa6f 	bl	d706c <siprintf>
   d9b8e:	4620      	mov	r0, r4
   d9b90:	b006      	add	sp, #24
   d9b92:	bd10      	pop	{r4, pc}
   d9b94:	000ddb06 	.word	0x000ddb06
   d9b98:	000ddaf1 	.word	0x000ddaf1
   d9b9c:	000ddb2a 	.word	0x000ddb2a

000d9ba0 <atoi>:
   d9ba0:	220a      	movs	r2, #10
   d9ba2:	2100      	movs	r1, #0
   d9ba4:	f002 b872 	b.w	dbc8c <strtol>

000d9ba8 <__cxa_atexit>:
   d9ba8:	b510      	push	{r4, lr}
   d9baa:	4c05      	ldr	r4, [pc, #20]	; (d9bc0 <__cxa_atexit+0x18>)
   d9bac:	4613      	mov	r3, r2
   d9bae:	b12c      	cbz	r4, d9bbc <__cxa_atexit+0x14>
   d9bb0:	460a      	mov	r2, r1
   d9bb2:	4601      	mov	r1, r0
   d9bb4:	2002      	movs	r0, #2
   d9bb6:	f3af 8000 	nop.w
   d9bba:	bd10      	pop	{r4, pc}
   d9bbc:	4620      	mov	r0, r4
   d9bbe:	bd10      	pop	{r4, pc}
   d9bc0:	00000000 	.word	0x00000000

000d9bc4 <gmtime>:
   d9bc4:	b538      	push	{r3, r4, r5, lr}
   d9bc6:	4b07      	ldr	r3, [pc, #28]	; (d9be4 <gmtime+0x20>)
   d9bc8:	681c      	ldr	r4, [r3, #0]
   d9bca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9bcc:	4605      	mov	r5, r0
   d9bce:	b91b      	cbnz	r3, d9bd8 <gmtime+0x14>
   d9bd0:	2024      	movs	r0, #36	; 0x24
   d9bd2:	f7fd fa33 	bl	d703c <malloc>
   d9bd6:	63e0      	str	r0, [r4, #60]	; 0x3c
   d9bd8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d9bda:	4628      	mov	r0, r5
   d9bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9be0:	f000 b802 	b.w	d9be8 <gmtime_r>
   d9be4:	2003dfdc 	.word	0x2003dfdc

000d9be8 <gmtime_r>:
   d9be8:	6802      	ldr	r2, [r0, #0]
   d9bea:	4b47      	ldr	r3, [pc, #284]	; (d9d08 <gmtime_r+0x120>)
   d9bec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9bee:	fb92 f4f3 	sdiv	r4, r2, r3
   d9bf2:	fb03 2214 	mls	r2, r3, r4, r2
   d9bf6:	2a00      	cmp	r2, #0
   d9bf8:	bfbc      	itt	lt
   d9bfa:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d9bfe:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d9c02:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d9c06:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d9c0a:	fb92 f3f0 	sdiv	r3, r2, r0
   d9c0e:	fb00 2213 	mls	r2, r0, r3, r2
   d9c12:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d9c16:	bfac      	ite	ge
   d9c18:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d9c1c:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d9c20:	608b      	str	r3, [r1, #8]
   d9c22:	fb92 f3f0 	sdiv	r3, r2, r0
   d9c26:	fb00 2213 	mls	r2, r0, r3, r2
   d9c2a:	604b      	str	r3, [r1, #4]
   d9c2c:	600a      	str	r2, [r1, #0]
   d9c2e:	2307      	movs	r3, #7
   d9c30:	1ce2      	adds	r2, r4, #3
   d9c32:	fb92 f3f3 	sdiv	r3, r2, r3
   d9c36:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d9c3a:	1ad3      	subs	r3, r2, r3
   d9c3c:	618b      	str	r3, [r1, #24]
   d9c3e:	4b33      	ldr	r3, [pc, #204]	; (d9d0c <gmtime_r+0x124>)
   d9c40:	4d33      	ldr	r5, [pc, #204]	; (d9d10 <gmtime_r+0x128>)
   d9c42:	fb94 f5f5 	sdiv	r5, r4, r5
   d9c46:	fb03 4405 	mla	r4, r3, r5, r4
   d9c4a:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d9c4e:	fbb4 f2f2 	udiv	r2, r4, r2
   d9c52:	4422      	add	r2, r4
   d9c54:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d9c58:	fbb4 f3f7 	udiv	r3, r4, r7
   d9c5c:	1ad2      	subs	r2, r2, r3
   d9c5e:	482d      	ldr	r0, [pc, #180]	; (d9d14 <gmtime_r+0x12c>)
   d9c60:	fbb4 f0f0 	udiv	r0, r4, r0
   d9c64:	f648 6694 	movw	r6, #36500	; 0x8e94
   d9c68:	1a13      	subs	r3, r2, r0
   d9c6a:	fbb3 f6f6 	udiv	r6, r3, r6
   d9c6e:	4434      	add	r4, r6
   d9c70:	f240 126d 	movw	r2, #365	; 0x16d
   d9c74:	fbb3 f0f2 	udiv	r0, r3, r2
   d9c78:	fbb3 f3f7 	udiv	r3, r3, r7
   d9c7c:	1ae3      	subs	r3, r4, r3
   d9c7e:	fb02 3310 	mls	r3, r2, r0, r3
   d9c82:	2499      	movs	r4, #153	; 0x99
   d9c84:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d9c88:	3202      	adds	r2, #2
   d9c8a:	fbb2 f2f4 	udiv	r2, r2, r4
   d9c8e:	2a0a      	cmp	r2, #10
   d9c90:	fb04 f402 	mul.w	r4, r4, r2
   d9c94:	f104 0602 	add.w	r6, r4, #2
   d9c98:	f04f 0405 	mov.w	r4, #5
   d9c9c:	fbb6 f4f4 	udiv	r4, r6, r4
   d9ca0:	bf34      	ite	cc
   d9ca2:	2602      	movcc	r6, #2
   d9ca4:	f06f 0609 	mvncs.w	r6, #9
   d9ca8:	4416      	add	r6, r2
   d9caa:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9cae:	fb02 0505 	mla	r5, r2, r5, r0
   d9cb2:	1c5f      	adds	r7, r3, #1
   d9cb4:	2e01      	cmp	r6, #1
   d9cb6:	bf98      	it	ls
   d9cb8:	3501      	addls	r5, #1
   d9cba:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d9cbe:	eba7 0704 	sub.w	r7, r7, r4
   d9cc2:	d302      	bcc.n	d9cca <gmtime_r+0xe2>
   d9cc4:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d9cc8:	e014      	b.n	d9cf4 <gmtime_r+0x10c>
   d9cca:	0782      	lsls	r2, r0, #30
   d9ccc:	d105      	bne.n	d9cda <gmtime_r+0xf2>
   d9cce:	2464      	movs	r4, #100	; 0x64
   d9cd0:	fbb0 f2f4 	udiv	r2, r0, r4
   d9cd4:	fb04 0212 	mls	r2, r4, r2, r0
   d9cd8:	b94a      	cbnz	r2, d9cee <gmtime_r+0x106>
   d9cda:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9cde:	fbb0 f4f2 	udiv	r4, r0, r2
   d9ce2:	fb02 0014 	mls	r0, r2, r4, r0
   d9ce6:	fab0 f280 	clz	r2, r0
   d9cea:	0952      	lsrs	r2, r2, #5
   d9cec:	e000      	b.n	d9cf0 <gmtime_r+0x108>
   d9cee:	2201      	movs	r2, #1
   d9cf0:	333b      	adds	r3, #59	; 0x3b
   d9cf2:	441a      	add	r2, r3
   d9cf4:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d9cf8:	2300      	movs	r3, #0
   d9cfa:	61ca      	str	r2, [r1, #28]
   d9cfc:	614d      	str	r5, [r1, #20]
   d9cfe:	610e      	str	r6, [r1, #16]
   d9d00:	60cf      	str	r7, [r1, #12]
   d9d02:	620b      	str	r3, [r1, #32]
   d9d04:	4608      	mov	r0, r1
   d9d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9d08:	00015180 	.word	0x00015180
   d9d0c:	fffdc54f 	.word	0xfffdc54f
   d9d10:	00023ab1 	.word	0x00023ab1
   d9d14:	00023ab0 	.word	0x00023ab0

000d9d18 <localtime>:
   d9d18:	b538      	push	{r3, r4, r5, lr}
   d9d1a:	4b07      	ldr	r3, [pc, #28]	; (d9d38 <localtime+0x20>)
   d9d1c:	681c      	ldr	r4, [r3, #0]
   d9d1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9d20:	4605      	mov	r5, r0
   d9d22:	b91b      	cbnz	r3, d9d2c <localtime+0x14>
   d9d24:	2024      	movs	r0, #36	; 0x24
   d9d26:	f7fd f989 	bl	d703c <malloc>
   d9d2a:	63e0      	str	r0, [r4, #60]	; 0x3c
   d9d2c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d9d2e:	4628      	mov	r0, r5
   d9d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9d34:	f000 b802 	b.w	d9d3c <localtime_r>
   d9d38:	2003dfdc 	.word	0x2003dfdc

000d9d3c <localtime_r>:
   d9d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9d40:	460c      	mov	r4, r1
   d9d42:	4680      	mov	r8, r0
   d9d44:	f002 fdee 	bl	dc924 <__gettzinfo>
   d9d48:	4621      	mov	r1, r4
   d9d4a:	4607      	mov	r7, r0
   d9d4c:	4640      	mov	r0, r8
   d9d4e:	f7ff ff4b 	bl	d9be8 <gmtime_r>
   d9d52:	6946      	ldr	r6, [r0, #20]
   d9d54:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d9d58:	07b3      	lsls	r3, r6, #30
   d9d5a:	4604      	mov	r4, r0
   d9d5c:	d105      	bne.n	d9d6a <localtime_r+0x2e>
   d9d5e:	2264      	movs	r2, #100	; 0x64
   d9d60:	fb96 f3f2 	sdiv	r3, r6, r2
   d9d64:	fb02 6313 	mls	r3, r2, r3, r6
   d9d68:	b94b      	cbnz	r3, d9d7e <localtime_r+0x42>
   d9d6a:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d9d6e:	fb96 f3f5 	sdiv	r3, r6, r5
   d9d72:	fb05 6513 	mls	r5, r5, r3, r6
   d9d76:	fab5 f385 	clz	r3, r5
   d9d7a:	095b      	lsrs	r3, r3, #5
   d9d7c:	e000      	b.n	d9d80 <localtime_r+0x44>
   d9d7e:	2301      	movs	r3, #1
   d9d80:	4a5f      	ldr	r2, [pc, #380]	; (d9f00 <localtime_r+0x1c4>)
   d9d82:	2530      	movs	r5, #48	; 0x30
   d9d84:	fb05 2503 	mla	r5, r5, r3, r2
   d9d88:	f002 f8ca 	bl	dbf20 <__tz_lock>
   d9d8c:	f002 f8ca 	bl	dbf24 <_tzset_unlocked>
   d9d90:	4b5c      	ldr	r3, [pc, #368]	; (d9f04 <localtime_r+0x1c8>)
   d9d92:	681b      	ldr	r3, [r3, #0]
   d9d94:	b1f3      	cbz	r3, d9dd4 <localtime_r+0x98>
   d9d96:	687b      	ldr	r3, [r7, #4]
   d9d98:	429e      	cmp	r6, r3
   d9d9a:	d105      	bne.n	d9da8 <localtime_r+0x6c>
   d9d9c:	6839      	ldr	r1, [r7, #0]
   d9d9e:	f8d8 3000 	ldr.w	r3, [r8]
   d9da2:	69fa      	ldr	r2, [r7, #28]
   d9da4:	b941      	cbnz	r1, d9db8 <localtime_r+0x7c>
   d9da6:	e00a      	b.n	d9dbe <localtime_r+0x82>
   d9da8:	4630      	mov	r0, r6
   d9daa:	f002 f811 	bl	dbdd0 <__tzcalc_limits>
   d9dae:	2800      	cmp	r0, #0
   d9db0:	d1f4      	bne.n	d9d9c <localtime_r+0x60>
   d9db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9db6:	e00d      	b.n	d9dd4 <localtime_r+0x98>
   d9db8:	4293      	cmp	r3, r2
   d9dba:	db08      	blt.n	d9dce <localtime_r+0x92>
   d9dbc:	e001      	b.n	d9dc2 <localtime_r+0x86>
   d9dbe:	4293      	cmp	r3, r2
   d9dc0:	da07      	bge.n	d9dd2 <localtime_r+0x96>
   d9dc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d9dc4:	4293      	cmp	r3, r2
   d9dc6:	bfac      	ite	ge
   d9dc8:	2300      	movge	r3, #0
   d9dca:	2301      	movlt	r3, #1
   d9dcc:	e002      	b.n	d9dd4 <localtime_r+0x98>
   d9dce:	2300      	movs	r3, #0
   d9dd0:	e000      	b.n	d9dd4 <localtime_r+0x98>
   d9dd2:	2301      	movs	r3, #1
   d9dd4:	6223      	str	r3, [r4, #32]
   d9dd6:	6a23      	ldr	r3, [r4, #32]
   d9dd8:	2b01      	cmp	r3, #1
   d9dda:	bf0c      	ite	eq
   d9ddc:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d9dde:	6a39      	ldrne	r1, [r7, #32]
   d9de0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9de4:	203c      	movs	r0, #60	; 0x3c
   d9de6:	fb91 f6f3 	sdiv	r6, r1, r3
   d9dea:	fb03 1316 	mls	r3, r3, r6, r1
   d9dee:	6861      	ldr	r1, [r4, #4]
   d9df0:	fb93 f2f0 	sdiv	r2, r3, r0
   d9df4:	fb00 3012 	mls	r0, r0, r2, r3
   d9df8:	6823      	ldr	r3, [r4, #0]
   d9dfa:	1a89      	subs	r1, r1, r2
   d9dfc:	68a2      	ldr	r2, [r4, #8]
   d9dfe:	6061      	str	r1, [r4, #4]
   d9e00:	1a1b      	subs	r3, r3, r0
   d9e02:	1b92      	subs	r2, r2, r6
   d9e04:	2b3b      	cmp	r3, #59	; 0x3b
   d9e06:	6023      	str	r3, [r4, #0]
   d9e08:	60a2      	str	r2, [r4, #8]
   d9e0a:	dd03      	ble.n	d9e14 <localtime_r+0xd8>
   d9e0c:	3101      	adds	r1, #1
   d9e0e:	6061      	str	r1, [r4, #4]
   d9e10:	3b3c      	subs	r3, #60	; 0x3c
   d9e12:	e004      	b.n	d9e1e <localtime_r+0xe2>
   d9e14:	2b00      	cmp	r3, #0
   d9e16:	da03      	bge.n	d9e20 <localtime_r+0xe4>
   d9e18:	3901      	subs	r1, #1
   d9e1a:	6061      	str	r1, [r4, #4]
   d9e1c:	333c      	adds	r3, #60	; 0x3c
   d9e1e:	6023      	str	r3, [r4, #0]
   d9e20:	6863      	ldr	r3, [r4, #4]
   d9e22:	2b3b      	cmp	r3, #59	; 0x3b
   d9e24:	dd03      	ble.n	d9e2e <localtime_r+0xf2>
   d9e26:	3201      	adds	r2, #1
   d9e28:	60a2      	str	r2, [r4, #8]
   d9e2a:	3b3c      	subs	r3, #60	; 0x3c
   d9e2c:	e004      	b.n	d9e38 <localtime_r+0xfc>
   d9e2e:	2b00      	cmp	r3, #0
   d9e30:	da03      	bge.n	d9e3a <localtime_r+0xfe>
   d9e32:	3a01      	subs	r2, #1
   d9e34:	60a2      	str	r2, [r4, #8]
   d9e36:	333c      	adds	r3, #60	; 0x3c
   d9e38:	6063      	str	r3, [r4, #4]
   d9e3a:	68a3      	ldr	r3, [r4, #8]
   d9e3c:	2b17      	cmp	r3, #23
   d9e3e:	dd22      	ble.n	d9e86 <localtime_r+0x14a>
   d9e40:	69e2      	ldr	r2, [r4, #28]
   d9e42:	3201      	adds	r2, #1
   d9e44:	61e2      	str	r2, [r4, #28]
   d9e46:	69a2      	ldr	r2, [r4, #24]
   d9e48:	3201      	adds	r2, #1
   d9e4a:	2a06      	cmp	r2, #6
   d9e4c:	bfc8      	it	gt
   d9e4e:	2200      	movgt	r2, #0
   d9e50:	61a2      	str	r2, [r4, #24]
   d9e52:	68e2      	ldr	r2, [r4, #12]
   d9e54:	3b18      	subs	r3, #24
   d9e56:	3201      	adds	r2, #1
   d9e58:	60a3      	str	r3, [r4, #8]
   d9e5a:	6923      	ldr	r3, [r4, #16]
   d9e5c:	60e2      	str	r2, [r4, #12]
   d9e5e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d9e62:	428a      	cmp	r2, r1
   d9e64:	dd46      	ble.n	d9ef4 <localtime_r+0x1b8>
   d9e66:	3301      	adds	r3, #1
   d9e68:	2b0c      	cmp	r3, #12
   d9e6a:	bf0c      	ite	eq
   d9e6c:	6963      	ldreq	r3, [r4, #20]
   d9e6e:	6123      	strne	r3, [r4, #16]
   d9e70:	eba2 0201 	sub.w	r2, r2, r1
   d9e74:	60e2      	str	r2, [r4, #12]
   d9e76:	bf01      	itttt	eq
   d9e78:	3301      	addeq	r3, #1
   d9e7a:	2200      	moveq	r2, #0
   d9e7c:	6122      	streq	r2, [r4, #16]
   d9e7e:	6163      	streq	r3, [r4, #20]
   d9e80:	bf08      	it	eq
   d9e82:	61e2      	streq	r2, [r4, #28]
   d9e84:	e036      	b.n	d9ef4 <localtime_r+0x1b8>
   d9e86:	2b00      	cmp	r3, #0
   d9e88:	da34      	bge.n	d9ef4 <localtime_r+0x1b8>
   d9e8a:	69e2      	ldr	r2, [r4, #28]
   d9e8c:	3a01      	subs	r2, #1
   d9e8e:	61e2      	str	r2, [r4, #28]
   d9e90:	69a2      	ldr	r2, [r4, #24]
   d9e92:	3a01      	subs	r2, #1
   d9e94:	bf48      	it	mi
   d9e96:	2206      	movmi	r2, #6
   d9e98:	61a2      	str	r2, [r4, #24]
   d9e9a:	68e2      	ldr	r2, [r4, #12]
   d9e9c:	3318      	adds	r3, #24
   d9e9e:	3a01      	subs	r2, #1
   d9ea0:	60e2      	str	r2, [r4, #12]
   d9ea2:	60a3      	str	r3, [r4, #8]
   d9ea4:	bb32      	cbnz	r2, d9ef4 <localtime_r+0x1b8>
   d9ea6:	6923      	ldr	r3, [r4, #16]
   d9ea8:	3b01      	subs	r3, #1
   d9eaa:	d401      	bmi.n	d9eb0 <localtime_r+0x174>
   d9eac:	6123      	str	r3, [r4, #16]
   d9eae:	e01d      	b.n	d9eec <localtime_r+0x1b0>
   d9eb0:	230b      	movs	r3, #11
   d9eb2:	6123      	str	r3, [r4, #16]
   d9eb4:	6963      	ldr	r3, [r4, #20]
   d9eb6:	1e5a      	subs	r2, r3, #1
   d9eb8:	f012 0f03 	tst.w	r2, #3
   d9ebc:	6162      	str	r2, [r4, #20]
   d9ebe:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d9ec2:	d105      	bne.n	d9ed0 <localtime_r+0x194>
   d9ec4:	2164      	movs	r1, #100	; 0x64
   d9ec6:	fb93 f2f1 	sdiv	r2, r3, r1
   d9eca:	fb01 3212 	mls	r2, r1, r2, r3
   d9ece:	b94a      	cbnz	r2, d9ee4 <localtime_r+0x1a8>
   d9ed0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d9ed4:	fb93 f2f1 	sdiv	r2, r3, r1
   d9ed8:	fb01 3312 	mls	r3, r1, r2, r3
   d9edc:	fab3 f383 	clz	r3, r3
   d9ee0:	095b      	lsrs	r3, r3, #5
   d9ee2:	e000      	b.n	d9ee6 <localtime_r+0x1aa>
   d9ee4:	2301      	movs	r3, #1
   d9ee6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d9eea:	61e3      	str	r3, [r4, #28]
   d9eec:	6923      	ldr	r3, [r4, #16]
   d9eee:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d9ef2:	60e3      	str	r3, [r4, #12]
   d9ef4:	f002 f815 	bl	dbf22 <__tz_unlock>
   d9ef8:	4620      	mov	r0, r4
   d9efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9efe:	bf00      	nop
   d9f00:	000ddd14 	.word	0x000ddd14
   d9f04:	2003e7e4 	.word	0x2003e7e4

000d9f08 <_localeconv_r>:
   d9f08:	4800      	ldr	r0, [pc, #0]	; (d9f0c <_localeconv_r+0x4>)
   d9f0a:	4770      	bx	lr
   d9f0c:	2003dfe0 	.word	0x2003dfe0

000d9f10 <memcpy>:
   d9f10:	b510      	push	{r4, lr}
   d9f12:	1e43      	subs	r3, r0, #1
   d9f14:	440a      	add	r2, r1
   d9f16:	4291      	cmp	r1, r2
   d9f18:	d004      	beq.n	d9f24 <memcpy+0x14>
   d9f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9f1e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9f22:	e7f8      	b.n	d9f16 <memcpy+0x6>
   d9f24:	bd10      	pop	{r4, pc}

000d9f26 <memset>:
   d9f26:	4402      	add	r2, r0
   d9f28:	4603      	mov	r3, r0
   d9f2a:	4293      	cmp	r3, r2
   d9f2c:	d002      	beq.n	d9f34 <memset+0xe>
   d9f2e:	f803 1b01 	strb.w	r1, [r3], #1
   d9f32:	e7fa      	b.n	d9f2a <memset+0x4>
   d9f34:	4770      	bx	lr
	...

000d9f38 <validate_structure>:
   d9f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d9f3a:	6801      	ldr	r1, [r0, #0]
   d9f3c:	293b      	cmp	r1, #59	; 0x3b
   d9f3e:	4604      	mov	r4, r0
   d9f40:	d911      	bls.n	d9f66 <validate_structure+0x2e>
   d9f42:	223c      	movs	r2, #60	; 0x3c
   d9f44:	4668      	mov	r0, sp
   d9f46:	f002 f977 	bl	dc238 <div>
   d9f4a:	9a01      	ldr	r2, [sp, #4]
   d9f4c:	6863      	ldr	r3, [r4, #4]
   d9f4e:	9900      	ldr	r1, [sp, #0]
   d9f50:	2a00      	cmp	r2, #0
   d9f52:	440b      	add	r3, r1
   d9f54:	6063      	str	r3, [r4, #4]
   d9f56:	bfbb      	ittet	lt
   d9f58:	323c      	addlt	r2, #60	; 0x3c
   d9f5a:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d9f5e:	6022      	strge	r2, [r4, #0]
   d9f60:	6022      	strlt	r2, [r4, #0]
   d9f62:	bfb8      	it	lt
   d9f64:	6063      	strlt	r3, [r4, #4]
   d9f66:	6861      	ldr	r1, [r4, #4]
   d9f68:	293b      	cmp	r1, #59	; 0x3b
   d9f6a:	d911      	bls.n	d9f90 <validate_structure+0x58>
   d9f6c:	223c      	movs	r2, #60	; 0x3c
   d9f6e:	4668      	mov	r0, sp
   d9f70:	f002 f962 	bl	dc238 <div>
   d9f74:	9a01      	ldr	r2, [sp, #4]
   d9f76:	68a1      	ldr	r1, [r4, #8]
   d9f78:	9b00      	ldr	r3, [sp, #0]
   d9f7a:	2a00      	cmp	r2, #0
   d9f7c:	440b      	add	r3, r1
   d9f7e:	60a3      	str	r3, [r4, #8]
   d9f80:	bfbb      	ittet	lt
   d9f82:	323c      	addlt	r2, #60	; 0x3c
   d9f84:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d9f88:	6062      	strge	r2, [r4, #4]
   d9f8a:	6062      	strlt	r2, [r4, #4]
   d9f8c:	bfb8      	it	lt
   d9f8e:	60a3      	strlt	r3, [r4, #8]
   d9f90:	68a1      	ldr	r1, [r4, #8]
   d9f92:	2917      	cmp	r1, #23
   d9f94:	d911      	bls.n	d9fba <validate_structure+0x82>
   d9f96:	2218      	movs	r2, #24
   d9f98:	4668      	mov	r0, sp
   d9f9a:	f002 f94d 	bl	dc238 <div>
   d9f9e:	9a01      	ldr	r2, [sp, #4]
   d9fa0:	68e1      	ldr	r1, [r4, #12]
   d9fa2:	9b00      	ldr	r3, [sp, #0]
   d9fa4:	2a00      	cmp	r2, #0
   d9fa6:	440b      	add	r3, r1
   d9fa8:	60e3      	str	r3, [r4, #12]
   d9faa:	bfbb      	ittet	lt
   d9fac:	3218      	addlt	r2, #24
   d9fae:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d9fb2:	60a2      	strge	r2, [r4, #8]
   d9fb4:	60a2      	strlt	r2, [r4, #8]
   d9fb6:	bfb8      	it	lt
   d9fb8:	60e3      	strlt	r3, [r4, #12]
   d9fba:	6921      	ldr	r1, [r4, #16]
   d9fbc:	290b      	cmp	r1, #11
   d9fbe:	d911      	bls.n	d9fe4 <validate_structure+0xac>
   d9fc0:	220c      	movs	r2, #12
   d9fc2:	4668      	mov	r0, sp
   d9fc4:	f002 f938 	bl	dc238 <div>
   d9fc8:	9a01      	ldr	r2, [sp, #4]
   d9fca:	6961      	ldr	r1, [r4, #20]
   d9fcc:	9b00      	ldr	r3, [sp, #0]
   d9fce:	2a00      	cmp	r2, #0
   d9fd0:	440b      	add	r3, r1
   d9fd2:	6163      	str	r3, [r4, #20]
   d9fd4:	bfbb      	ittet	lt
   d9fd6:	320c      	addlt	r2, #12
   d9fd8:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d9fdc:	6122      	strge	r2, [r4, #16]
   d9fde:	6122      	strlt	r2, [r4, #16]
   d9fe0:	bfb8      	it	lt
   d9fe2:	6163      	strlt	r3, [r4, #20]
   d9fe4:	6963      	ldr	r3, [r4, #20]
   d9fe6:	0799      	lsls	r1, r3, #30
   d9fe8:	d112      	bne.n	da010 <validate_structure+0xd8>
   d9fea:	2164      	movs	r1, #100	; 0x64
   d9fec:	fb93 f2f1 	sdiv	r2, r3, r1
   d9ff0:	fb01 3212 	mls	r2, r1, r2, r3
   d9ff4:	b972      	cbnz	r2, da014 <validate_structure+0xdc>
   d9ff6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d9ffa:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d9ffe:	fb93 f2f1 	sdiv	r2, r3, r1
   da002:	fb01 3312 	mls	r3, r1, r2, r3
   da006:	2b00      	cmp	r3, #0
   da008:	bf14      	ite	ne
   da00a:	231c      	movne	r3, #28
   da00c:	231d      	moveq	r3, #29
   da00e:	e002      	b.n	da016 <validate_structure+0xde>
   da010:	231c      	movs	r3, #28
   da012:	e000      	b.n	da016 <validate_structure+0xde>
   da014:	231d      	movs	r3, #29
   da016:	68e2      	ldr	r2, [r4, #12]
   da018:	2a00      	cmp	r2, #0
   da01a:	dd06      	ble.n	da02a <validate_structure+0xf2>
   da01c:	4f33      	ldr	r7, [pc, #204]	; (da0ec <validate_structure+0x1b4>)
   da01e:	f04f 0e00 	mov.w	lr, #0
   da022:	2564      	movs	r5, #100	; 0x64
   da024:	f44f 76c8 	mov.w	r6, #400	; 0x190
   da028:	e039      	b.n	da09e <validate_structure+0x166>
   da02a:	4f30      	ldr	r7, [pc, #192]	; (da0ec <validate_structure+0x1b4>)
   da02c:	260b      	movs	r6, #11
   da02e:	2064      	movs	r0, #100	; 0x64
   da030:	f44f 75c8 	mov.w	r5, #400	; 0x190
   da034:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   da038:	f1be 0f00 	cmp.w	lr, #0
   da03c:	dc53      	bgt.n	da0e6 <validate_structure+0x1ae>
   da03e:	6921      	ldr	r1, [r4, #16]
   da040:	3901      	subs	r1, #1
   da042:	6121      	str	r1, [r4, #16]
   da044:	3101      	adds	r1, #1
   da046:	d118      	bne.n	da07a <validate_structure+0x142>
   da048:	6963      	ldr	r3, [r4, #20]
   da04a:	6126      	str	r6, [r4, #16]
   da04c:	1e59      	subs	r1, r3, #1
   da04e:	078a      	lsls	r2, r1, #30
   da050:	6161      	str	r1, [r4, #20]
   da052:	d10f      	bne.n	da074 <validate_structure+0x13c>
   da054:	fb91 f2f0 	sdiv	r2, r1, r0
   da058:	fb00 1112 	mls	r1, r0, r2, r1
   da05c:	b961      	cbnz	r1, da078 <validate_structure+0x140>
   da05e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   da062:	fb93 f2f5 	sdiv	r2, r3, r5
   da066:	fb05 3312 	mls	r3, r5, r2, r3
   da06a:	2b00      	cmp	r3, #0
   da06c:	bf14      	ite	ne
   da06e:	231c      	movne	r3, #28
   da070:	231d      	moveq	r3, #29
   da072:	e002      	b.n	da07a <validate_structure+0x142>
   da074:	231c      	movs	r3, #28
   da076:	e000      	b.n	da07a <validate_structure+0x142>
   da078:	231d      	movs	r3, #29
   da07a:	6922      	ldr	r2, [r4, #16]
   da07c:	2a01      	cmp	r2, #1
   da07e:	bf14      	ite	ne
   da080:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   da084:	461a      	moveq	r2, r3
   da086:	4472      	add	r2, lr
   da088:	60e2      	str	r2, [r4, #12]
   da08a:	e7d3      	b.n	da034 <validate_structure+0xfc>
   da08c:	428b      	cmp	r3, r1
   da08e:	da2a      	bge.n	da0e6 <validate_structure+0x1ae>
   da090:	4618      	mov	r0, r3
   da092:	3201      	adds	r2, #1
   da094:	1a09      	subs	r1, r1, r0
   da096:	2a0c      	cmp	r2, #12
   da098:	60e1      	str	r1, [r4, #12]
   da09a:	6122      	str	r2, [r4, #16]
   da09c:	d008      	beq.n	da0b0 <validate_structure+0x178>
   da09e:	6922      	ldr	r2, [r4, #16]
   da0a0:	68e1      	ldr	r1, [r4, #12]
   da0a2:	2a01      	cmp	r2, #1
   da0a4:	d0f2      	beq.n	da08c <validate_structure+0x154>
   da0a6:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   da0aa:	4281      	cmp	r1, r0
   da0ac:	dcf1      	bgt.n	da092 <validate_structure+0x15a>
   da0ae:	e01a      	b.n	da0e6 <validate_structure+0x1ae>
   da0b0:	6963      	ldr	r3, [r4, #20]
   da0b2:	f8c4 e010 	str.w	lr, [r4, #16]
   da0b6:	1c5a      	adds	r2, r3, #1
   da0b8:	0791      	lsls	r1, r2, #30
   da0ba:	6162      	str	r2, [r4, #20]
   da0bc:	d10f      	bne.n	da0de <validate_structure+0x1a6>
   da0be:	fb92 f1f5 	sdiv	r1, r2, r5
   da0c2:	fb05 2211 	mls	r2, r5, r1, r2
   da0c6:	b962      	cbnz	r2, da0e2 <validate_structure+0x1aa>
   da0c8:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   da0cc:	fb93 f2f6 	sdiv	r2, r3, r6
   da0d0:	fb06 3312 	mls	r3, r6, r2, r3
   da0d4:	2b00      	cmp	r3, #0
   da0d6:	bf14      	ite	ne
   da0d8:	231c      	movne	r3, #28
   da0da:	231d      	moveq	r3, #29
   da0dc:	e7df      	b.n	da09e <validate_structure+0x166>
   da0de:	231c      	movs	r3, #28
   da0e0:	e7dd      	b.n	da09e <validate_structure+0x166>
   da0e2:	231d      	movs	r3, #29
   da0e4:	e7db      	b.n	da09e <validate_structure+0x166>
   da0e6:	b003      	add	sp, #12
   da0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da0ea:	bf00      	nop
   da0ec:	000ddce4 	.word	0x000ddce4

000da0f0 <mktime>:
   da0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da0f4:	4605      	mov	r5, r0
   da0f6:	f002 fc15 	bl	dc924 <__gettzinfo>
   da0fa:	4681      	mov	r9, r0
   da0fc:	4628      	mov	r0, r5
   da0fe:	f7ff ff1b 	bl	d9f38 <validate_structure>
   da102:	e895 000c 	ldmia.w	r5, {r2, r3}
   da106:	213c      	movs	r1, #60	; 0x3c
   da108:	fb01 2303 	mla	r3, r1, r3, r2
   da10c:	68aa      	ldr	r2, [r5, #8]
   da10e:	68ec      	ldr	r4, [r5, #12]
   da110:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   da114:	fb08 3102 	mla	r1, r8, r2, r3
   da118:	692b      	ldr	r3, [r5, #16]
   da11a:	4aab      	ldr	r2, [pc, #684]	; (da3c8 <mktime+0x2d8>)
   da11c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   da120:	3c01      	subs	r4, #1
   da122:	2b01      	cmp	r3, #1
   da124:	4414      	add	r4, r2
   da126:	696b      	ldr	r3, [r5, #20]
   da128:	dd11      	ble.n	da14e <mktime+0x5e>
   da12a:	079e      	lsls	r6, r3, #30
   da12c:	d10f      	bne.n	da14e <mktime+0x5e>
   da12e:	2064      	movs	r0, #100	; 0x64
   da130:	fb93 f2f0 	sdiv	r2, r3, r0
   da134:	fb00 3212 	mls	r2, r0, r2, r3
   da138:	b942      	cbnz	r2, da14c <mktime+0x5c>
   da13a:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   da13e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da142:	fb96 f0f2 	sdiv	r0, r6, r2
   da146:	fb02 6210 	mls	r2, r2, r0, r6
   da14a:	b902      	cbnz	r2, da14e <mktime+0x5e>
   da14c:	3401      	adds	r4, #1
   da14e:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   da152:	3210      	adds	r2, #16
   da154:	f644 6020 	movw	r0, #20000	; 0x4e20
   da158:	4282      	cmp	r2, r0
   da15a:	61ec      	str	r4, [r5, #28]
   da15c:	461f      	mov	r7, r3
   da15e:	f200 812e 	bhi.w	da3be <mktime+0x2ce>
   da162:	2b46      	cmp	r3, #70	; 0x46
   da164:	dd22      	ble.n	da1ac <mktime+0xbc>
   da166:	2246      	movs	r2, #70	; 0x46
   da168:	f240 1c6d 	movw	ip, #365	; 0x16d
   da16c:	2664      	movs	r6, #100	; 0x64
   da16e:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   da172:	0790      	lsls	r0, r2, #30
   da174:	d110      	bne.n	da198 <mktime+0xa8>
   da176:	fb92 f0f6 	sdiv	r0, r2, r6
   da17a:	fb06 2010 	mls	r0, r6, r0, r2
   da17e:	b970      	cbnz	r0, da19e <mktime+0xae>
   da180:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   da184:	fb98 f0fe 	sdiv	r0, r8, lr
   da188:	fb0e 8010 	mls	r0, lr, r0, r8
   da18c:	2800      	cmp	r0, #0
   da18e:	bf14      	ite	ne
   da190:	4660      	movne	r0, ip
   da192:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   da196:	e004      	b.n	da1a2 <mktime+0xb2>
   da198:	f240 106d 	movw	r0, #365	; 0x16d
   da19c:	e001      	b.n	da1a2 <mktime+0xb2>
   da19e:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   da1a2:	3201      	adds	r2, #1
   da1a4:	4293      	cmp	r3, r2
   da1a6:	4404      	add	r4, r0
   da1a8:	d1e3      	bne.n	da172 <mktime+0x82>
   da1aa:	e044      	b.n	da236 <mktime+0x146>
   da1ac:	d043      	beq.n	da236 <mktime+0x146>
   da1ae:	2245      	movs	r2, #69	; 0x45
   da1b0:	f240 1e6d 	movw	lr, #365	; 0x16d
   da1b4:	2664      	movs	r6, #100	; 0x64
   da1b6:	f44f 77c8 	mov.w	r7, #400	; 0x190
   da1ba:	429a      	cmp	r2, r3
   da1bc:	dd1a      	ble.n	da1f4 <mktime+0x104>
   da1be:	0790      	lsls	r0, r2, #30
   da1c0:	d110      	bne.n	da1e4 <mktime+0xf4>
   da1c2:	fb92 f0f6 	sdiv	r0, r2, r6
   da1c6:	fb06 2010 	mls	r0, r6, r0, r2
   da1ca:	b970      	cbnz	r0, da1ea <mktime+0xfa>
   da1cc:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   da1d0:	fb9c f0f7 	sdiv	r0, ip, r7
   da1d4:	fb07 c010 	mls	r0, r7, r0, ip
   da1d8:	2800      	cmp	r0, #0
   da1da:	bf14      	ite	ne
   da1dc:	4670      	movne	r0, lr
   da1de:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   da1e2:	e004      	b.n	da1ee <mktime+0xfe>
   da1e4:	f240 106d 	movw	r0, #365	; 0x16d
   da1e8:	e001      	b.n	da1ee <mktime+0xfe>
   da1ea:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   da1ee:	1a24      	subs	r4, r4, r0
   da1f0:	3a01      	subs	r2, #1
   da1f2:	e7e2      	b.n	da1ba <mktime+0xca>
   da1f4:	2b45      	cmp	r3, #69	; 0x45
   da1f6:	bfa8      	it	ge
   da1f8:	2345      	movge	r3, #69	; 0x45
   da1fa:	079e      	lsls	r6, r3, #30
   da1fc:	461f      	mov	r7, r3
   da1fe:	d114      	bne.n	da22a <mktime+0x13a>
   da200:	2264      	movs	r2, #100	; 0x64
   da202:	fb93 f3f2 	sdiv	r3, r3, r2
   da206:	fb02 7313 	mls	r3, r2, r3, r7
   da20a:	b98b      	cbnz	r3, da230 <mktime+0x140>
   da20c:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   da210:	f44f 73c8 	mov.w	r3, #400	; 0x190
   da214:	fb90 f2f3 	sdiv	r2, r0, r3
   da218:	fb03 0312 	mls	r3, r3, r2, r0
   da21c:	2b00      	cmp	r3, #0
   da21e:	f240 136d 	movw	r3, #365	; 0x16d
   da222:	bf08      	it	eq
   da224:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   da228:	e004      	b.n	da234 <mktime+0x144>
   da22a:	f240 136d 	movw	r3, #365	; 0x16d
   da22e:	e001      	b.n	da234 <mktime+0x144>
   da230:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   da234:	1ae4      	subs	r4, r4, r3
   da236:	4865      	ldr	r0, [pc, #404]	; (da3cc <mktime+0x2dc>)
   da238:	fb00 1804 	mla	r8, r0, r4, r1
   da23c:	f001 fe70 	bl	dbf20 <__tz_lock>
   da240:	f001 fe70 	bl	dbf24 <_tzset_unlocked>
   da244:	4b62      	ldr	r3, [pc, #392]	; (da3d0 <mktime+0x2e0>)
   da246:	681e      	ldr	r6, [r3, #0]
   da248:	2e00      	cmp	r6, #0
   da24a:	f000 80a4 	beq.w	da396 <mktime+0x2a6>
   da24e:	6a2b      	ldr	r3, [r5, #32]
   da250:	6968      	ldr	r0, [r5, #20]
   da252:	2b01      	cmp	r3, #1
   da254:	bfa8      	it	ge
   da256:	2301      	movge	r3, #1
   da258:	469a      	mov	sl, r3
   da25a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   da25e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da262:	4298      	cmp	r0, r3
   da264:	d10d      	bne.n	da282 <mktime+0x192>
   da266:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   da26a:	f8d9 3020 	ldr.w	r3, [r9, #32]
   da26e:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   da272:	f8d9 101c 	ldr.w	r1, [r9, #28]
   da276:	1ad6      	subs	r6, r2, r3
   da278:	45b0      	cmp	r8, r6
   da27a:	eba1 0100 	sub.w	r1, r1, r0
   da27e:	da05      	bge.n	da28c <mktime+0x19c>
   da280:	e007      	b.n	da292 <mktime+0x1a2>
   da282:	f001 fda5 	bl	dbdd0 <__tzcalc_limits>
   da286:	2800      	cmp	r0, #0
   da288:	d1ed      	bne.n	da266 <mktime+0x176>
   da28a:	e076      	b.n	da37a <mktime+0x28a>
   da28c:	1a12      	subs	r2, r2, r0
   da28e:	4590      	cmp	r8, r2
   da290:	db73      	blt.n	da37a <mktime+0x28a>
   da292:	f8d9 2000 	ldr.w	r2, [r9]
   da296:	b112      	cbz	r2, da29e <mktime+0x1ae>
   da298:	4588      	cmp	r8, r1
   da29a:	db77      	blt.n	da38c <mktime+0x29c>
   da29c:	e001      	b.n	da2a2 <mktime+0x1b2>
   da29e:	4588      	cmp	r8, r1
   da2a0:	da07      	bge.n	da2b2 <mktime+0x1c2>
   da2a2:	45b0      	cmp	r8, r6
   da2a4:	bfac      	ite	ge
   da2a6:	2600      	movge	r6, #0
   da2a8:	2601      	movlt	r6, #1
   da2aa:	f1ba 0f00 	cmp.w	sl, #0
   da2ae:	da04      	bge.n	da2ba <mktime+0x1ca>
   da2b0:	e064      	b.n	da37c <mktime+0x28c>
   da2b2:	f1ba 0f00 	cmp.w	sl, #0
   da2b6:	db63      	blt.n	da380 <mktime+0x290>
   da2b8:	2601      	movs	r6, #1
   da2ba:	ea8a 0a06 	eor.w	sl, sl, r6
   da2be:	f1ba 0f01 	cmp.w	sl, #1
   da2c2:	d15b      	bne.n	da37c <mktime+0x28c>
   da2c4:	1a1b      	subs	r3, r3, r0
   da2c6:	b906      	cbnz	r6, da2ca <mktime+0x1da>
   da2c8:	425b      	negs	r3, r3
   da2ca:	682a      	ldr	r2, [r5, #0]
   da2cc:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   da2d0:	441a      	add	r2, r3
   da2d2:	602a      	str	r2, [r5, #0]
   da2d4:	4628      	mov	r0, r5
   da2d6:	4498      	add	r8, r3
   da2d8:	f7ff fe2e 	bl	d9f38 <validate_structure>
   da2dc:	68eb      	ldr	r3, [r5, #12]
   da2de:	ebb3 030a 	subs.w	r3, r3, sl
   da2e2:	d04b      	beq.n	da37c <mktime+0x28c>
   da2e4:	2b01      	cmp	r3, #1
   da2e6:	dc03      	bgt.n	da2f0 <mktime+0x200>
   da2e8:	1c98      	adds	r0, r3, #2
   da2ea:	bfd8      	it	le
   da2ec:	2301      	movle	r3, #1
   da2ee:	e001      	b.n	da2f4 <mktime+0x204>
   da2f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   da2f4:	69ea      	ldr	r2, [r5, #28]
   da2f6:	441c      	add	r4, r3
   da2f8:	189b      	adds	r3, r3, r2
   da2fa:	d51d      	bpl.n	da338 <mktime+0x248>
   da2fc:	1e7b      	subs	r3, r7, #1
   da2fe:	0799      	lsls	r1, r3, #30
   da300:	d114      	bne.n	da32c <mktime+0x23c>
   da302:	2164      	movs	r1, #100	; 0x64
   da304:	fb93 f2f1 	sdiv	r2, r3, r1
   da308:	fb01 3312 	mls	r3, r1, r2, r3
   da30c:	b98b      	cbnz	r3, da332 <mktime+0x242>
   da30e:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   da312:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da316:	fb97 f3f2 	sdiv	r3, r7, r2
   da31a:	fb02 7713 	mls	r7, r2, r3, r7
   da31e:	2f00      	cmp	r7, #0
   da320:	f240 136d 	movw	r3, #365	; 0x16d
   da324:	bf18      	it	ne
   da326:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   da32a:	e024      	b.n	da376 <mktime+0x286>
   da32c:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   da330:	e021      	b.n	da376 <mktime+0x286>
   da332:	f240 136d 	movw	r3, #365	; 0x16d
   da336:	e01e      	b.n	da376 <mktime+0x286>
   da338:	07ba      	lsls	r2, r7, #30
   da33a:	d114      	bne.n	da366 <mktime+0x276>
   da33c:	2164      	movs	r1, #100	; 0x64
   da33e:	fb97 f2f1 	sdiv	r2, r7, r1
   da342:	fb01 7212 	mls	r2, r1, r2, r7
   da346:	b98a      	cbnz	r2, da36c <mktime+0x27c>
   da348:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   da34c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   da350:	fb97 f2f1 	sdiv	r2, r7, r1
   da354:	fb01 7712 	mls	r7, r1, r2, r7
   da358:	2f00      	cmp	r7, #0
   da35a:	f240 126d 	movw	r2, #365	; 0x16d
   da35e:	bf08      	it	eq
   da360:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   da364:	e004      	b.n	da370 <mktime+0x280>
   da366:	f240 126d 	movw	r2, #365	; 0x16d
   da36a:	e001      	b.n	da370 <mktime+0x280>
   da36c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   da370:	429a      	cmp	r2, r3
   da372:	bfd8      	it	le
   da374:	1a9b      	suble	r3, r3, r2
   da376:	61eb      	str	r3, [r5, #28]
   da378:	e000      	b.n	da37c <mktime+0x28c>
   da37a:	4656      	mov	r6, sl
   da37c:	2e01      	cmp	r6, #1
   da37e:	d10a      	bne.n	da396 <mktime+0x2a6>
   da380:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   da384:	2601      	movs	r6, #1
   da386:	eb08 0700 	add.w	r7, r8, r0
   da38a:	e008      	b.n	da39e <mktime+0x2ae>
   da38c:	f1ba 0f00 	cmp.w	sl, #0
   da390:	f04f 0600 	mov.w	r6, #0
   da394:	da91      	bge.n	da2ba <mktime+0x1ca>
   da396:	f8d9 0020 	ldr.w	r0, [r9, #32]
   da39a:	eb08 0700 	add.w	r7, r8, r0
   da39e:	f001 fdc0 	bl	dbf22 <__tz_unlock>
   da3a2:	3404      	adds	r4, #4
   da3a4:	2307      	movs	r3, #7
   da3a6:	fb94 f3f3 	sdiv	r3, r4, r3
   da3aa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   da3ae:	1ae4      	subs	r4, r4, r3
   da3b0:	bf48      	it	mi
   da3b2:	3407      	addmi	r4, #7
   da3b4:	622e      	str	r6, [r5, #32]
   da3b6:	61ac      	str	r4, [r5, #24]
   da3b8:	4638      	mov	r0, r7
   da3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da3be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da3c6:	bf00      	nop
   da3c8:	000ddcb4 	.word	0x000ddcb4
   da3cc:	00015180 	.word	0x00015180
   da3d0:	2003e7e4 	.word	0x2003e7e4

000da3d4 <srand>:
   da3d4:	b538      	push	{r3, r4, r5, lr}
   da3d6:	4b12      	ldr	r3, [pc, #72]	; (da420 <srand+0x4c>)
   da3d8:	681c      	ldr	r4, [r3, #0]
   da3da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   da3dc:	4605      	mov	r5, r0
   da3de:	b9d3      	cbnz	r3, da416 <srand+0x42>
   da3e0:	2018      	movs	r0, #24
   da3e2:	f7fc fe2b 	bl	d703c <malloc>
   da3e6:	f243 330e 	movw	r3, #13070	; 0x330e
   da3ea:	63a0      	str	r0, [r4, #56]	; 0x38
   da3ec:	8003      	strh	r3, [r0, #0]
   da3ee:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   da3f2:	8043      	strh	r3, [r0, #2]
   da3f4:	f241 2334 	movw	r3, #4660	; 0x1234
   da3f8:	8083      	strh	r3, [r0, #4]
   da3fa:	f24e 636d 	movw	r3, #58989	; 0xe66d
   da3fe:	80c3      	strh	r3, [r0, #6]
   da400:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   da404:	8103      	strh	r3, [r0, #8]
   da406:	2305      	movs	r3, #5
   da408:	8143      	strh	r3, [r0, #10]
   da40a:	230b      	movs	r3, #11
   da40c:	8183      	strh	r3, [r0, #12]
   da40e:	2201      	movs	r2, #1
   da410:	2300      	movs	r3, #0
   da412:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da416:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   da418:	2200      	movs	r2, #0
   da41a:	611d      	str	r5, [r3, #16]
   da41c:	615a      	str	r2, [r3, #20]
   da41e:	bd38      	pop	{r3, r4, r5, pc}
   da420:	2003dfdc 	.word	0x2003dfdc

000da424 <strcmp>:
   da424:	f810 2b01 	ldrb.w	r2, [r0], #1
   da428:	f811 3b01 	ldrb.w	r3, [r1], #1
   da42c:	2a01      	cmp	r2, #1
   da42e:	bf28      	it	cs
   da430:	429a      	cmpcs	r2, r3
   da432:	d0f7      	beq.n	da424 <strcmp>
   da434:	1ad0      	subs	r0, r2, r3
   da436:	4770      	bx	lr

000da438 <strcpy>:
   da438:	4603      	mov	r3, r0
   da43a:	f811 2b01 	ldrb.w	r2, [r1], #1
   da43e:	f803 2b01 	strb.w	r2, [r3], #1
   da442:	2a00      	cmp	r2, #0
   da444:	d1f9      	bne.n	da43a <strcpy+0x2>
   da446:	4770      	bx	lr

000da448 <strdup>:
   da448:	4b02      	ldr	r3, [pc, #8]	; (da454 <strdup+0xc>)
   da44a:	4601      	mov	r1, r0
   da44c:	6818      	ldr	r0, [r3, #0]
   da44e:	f000 b803 	b.w	da458 <_strdup_r>
   da452:	bf00      	nop
   da454:	2003dfdc 	.word	0x2003dfdc

000da458 <_strdup_r>:
   da458:	b570      	push	{r4, r5, r6, lr}
   da45a:	4606      	mov	r6, r0
   da45c:	4608      	mov	r0, r1
   da45e:	460c      	mov	r4, r1
   da460:	f000 fd22 	bl	daea8 <strlen>
   da464:	1c45      	adds	r5, r0, #1
   da466:	4629      	mov	r1, r5
   da468:	4630      	mov	r0, r6
   da46a:	f7fc fe27 	bl	d70bc <_malloc_r>
   da46e:	4606      	mov	r6, r0
   da470:	b118      	cbz	r0, da47a <_strdup_r+0x22>
   da472:	462a      	mov	r2, r5
   da474:	4621      	mov	r1, r4
   da476:	f7ff fd4b 	bl	d9f10 <memcpy>
   da47a:	4630      	mov	r0, r6
   da47c:	bd70      	pop	{r4, r5, r6, pc}

000da47e <iso_year_adjust>:
   da47e:	6941      	ldr	r1, [r0, #20]
   da480:	078b      	lsls	r3, r1, #30
   da482:	b510      	push	{r4, lr}
   da484:	d10c      	bne.n	da4a0 <iso_year_adjust+0x22>
   da486:	2900      	cmp	r1, #0
   da488:	f240 736c 	movw	r3, #1900	; 0x76c
   da48c:	bfa8      	it	ge
   da48e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   da492:	440b      	add	r3, r1
   da494:	2464      	movs	r4, #100	; 0x64
   da496:	fb93 f2f4 	sdiv	r2, r3, r4
   da49a:	fb04 3312 	mls	r3, r4, r2, r3
   da49e:	b983      	cbnz	r3, da4c2 <iso_year_adjust+0x44>
   da4a0:	2900      	cmp	r1, #0
   da4a2:	f240 736c 	movw	r3, #1900	; 0x76c
   da4a6:	bfa8      	it	ge
   da4a8:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   da4ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da4b0:	440b      	add	r3, r1
   da4b2:	fb93 f1f2 	sdiv	r1, r3, r2
   da4b6:	fb02 3311 	mls	r3, r2, r1, r3
   da4ba:	fab3 f283 	clz	r2, r3
   da4be:	0952      	lsrs	r2, r2, #5
   da4c0:	e000      	b.n	da4c4 <iso_year_adjust+0x46>
   da4c2:	2201      	movs	r2, #1
   da4c4:	6983      	ldr	r3, [r0, #24]
   da4c6:	69c1      	ldr	r1, [r0, #28]
   da4c8:	005b      	lsls	r3, r3, #1
   da4ca:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   da4ce:	4413      	add	r3, r2
   da4d0:	2b21      	cmp	r3, #33	; 0x21
   da4d2:	dc0e      	bgt.n	da4f2 <iso_year_adjust+0x74>
   da4d4:	2b20      	cmp	r3, #32
   da4d6:	da2f      	bge.n	da538 <iso_year_adjust+0xba>
   da4d8:	2b0d      	cmp	r3, #13
   da4da:	dc02      	bgt.n	da4e2 <iso_year_adjust+0x64>
   da4dc:	2b0a      	cmp	r3, #10
   da4de:	db05      	blt.n	da4ec <iso_year_adjust+0x6e>
   da4e0:	e02a      	b.n	da538 <iso_year_adjust+0xba>
   da4e2:	2b10      	cmp	r3, #16
   da4e4:	db26      	blt.n	da534 <iso_year_adjust+0xb6>
   da4e6:	2b11      	cmp	r3, #17
   da4e8:	dd26      	ble.n	da538 <iso_year_adjust+0xba>
   da4ea:	3b1c      	subs	r3, #28
   da4ec:	2b01      	cmp	r3, #1
   da4ee:	d923      	bls.n	da538 <iso_year_adjust+0xba>
   da4f0:	e020      	b.n	da534 <iso_year_adjust+0xb6>
   da4f2:	f241 62c6 	movw	r2, #5830	; 0x16c6
   da4f6:	4293      	cmp	r3, r2
   da4f8:	dc0e      	bgt.n	da518 <iso_year_adjust+0x9a>
   da4fa:	f241 62c2 	movw	r2, #5826	; 0x16c2
   da4fe:	4293      	cmp	r3, r2
   da500:	da16      	bge.n	da530 <iso_year_adjust+0xb2>
   da502:	f241 62a2 	movw	r2, #5794	; 0x16a2
   da506:	4293      	cmp	r3, r2
   da508:	d012      	beq.n	da530 <iso_year_adjust+0xb2>
   da50a:	db13      	blt.n	da534 <iso_year_adjust+0xb6>
   da50c:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   da510:	3b12      	subs	r3, #18
   da512:	2b02      	cmp	r3, #2
   da514:	d90c      	bls.n	da530 <iso_year_adjust+0xb2>
   da516:	e00d      	b.n	da534 <iso_year_adjust+0xb6>
   da518:	f241 62d5 	movw	r2, #5845	; 0x16d5
   da51c:	4293      	cmp	r3, r2
   da51e:	d007      	beq.n	da530 <iso_year_adjust+0xb2>
   da520:	f241 62d7 	movw	r2, #5847	; 0x16d7
   da524:	4293      	cmp	r3, r2
   da526:	d003      	beq.n	da530 <iso_year_adjust+0xb2>
   da528:	f241 62d3 	movw	r2, #5843	; 0x16d3
   da52c:	4293      	cmp	r3, r2
   da52e:	d101      	bne.n	da534 <iso_year_adjust+0xb6>
   da530:	2001      	movs	r0, #1
   da532:	bd10      	pop	{r4, pc}
   da534:	2000      	movs	r0, #0
   da536:	bd10      	pop	{r4, pc}
   da538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da53c:	bd10      	pop	{r4, pc}
	...

000da540 <strftime>:
   da540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da544:	b093      	sub	sp, #76	; 0x4c
   da546:	460e      	mov	r6, r1
   da548:	461d      	mov	r5, r3
   da54a:	4607      	mov	r7, r0
   da54c:	4691      	mov	r9, r2
   da54e:	f001 fc2f 	bl	dbdb0 <__get_current_time_locale>
   da552:	2300      	movs	r3, #0
   da554:	9306      	str	r3, [sp, #24]
   da556:	461c      	mov	r4, r3
   da558:	1e73      	subs	r3, r6, #1
   da55a:	9003      	str	r0, [sp, #12]
   da55c:	9302      	str	r3, [sp, #8]
   da55e:	f899 3000 	ldrb.w	r3, [r9]
   da562:	2b00      	cmp	r3, #0
   da564:	f000 8492 	beq.w	dae8c <strftime+0x94c>
   da568:	2b25      	cmp	r3, #37	; 0x25
   da56a:	d008      	beq.n	da57e <strftime+0x3e>
   da56c:	9a02      	ldr	r2, [sp, #8]
   da56e:	4294      	cmp	r4, r2
   da570:	f080 8490 	bcs.w	dae94 <strftime+0x954>
   da574:	553b      	strb	r3, [r7, r4]
   da576:	f109 0901 	add.w	r9, r9, #1
   da57a:	3401      	adds	r4, #1
   da57c:	e7ef      	b.n	da55e <strftime+0x1e>
   da57e:	f899 a001 	ldrb.w	sl, [r9, #1]
   da582:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   da586:	d007      	beq.n	da598 <strftime+0x58>
   da588:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   da58c:	d004      	beq.n	da598 <strftime+0x58>
   da58e:	f109 0901 	add.w	r9, r9, #1
   da592:	f04f 0a00 	mov.w	sl, #0
   da596:	e001      	b.n	da59c <strftime+0x5c>
   da598:	f109 0902 	add.w	r9, r9, #2
   da59c:	f899 3000 	ldrb.w	r3, [r9]
   da5a0:	3b31      	subs	r3, #49	; 0x31
   da5a2:	2b08      	cmp	r3, #8
   da5a4:	d808      	bhi.n	da5b8 <strftime+0x78>
   da5a6:	4648      	mov	r0, r9
   da5a8:	220a      	movs	r2, #10
   da5aa:	a90a      	add	r1, sp, #40	; 0x28
   da5ac:	f001 fbf6 	bl	dbd9c <strtoul>
   da5b0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   da5b4:	4680      	mov	r8, r0
   da5b6:	e001      	b.n	da5bc <strftime+0x7c>
   da5b8:	f04f 0800 	mov.w	r8, #0
   da5bc:	f899 3000 	ldrb.w	r3, [r9]
   da5c0:	2b45      	cmp	r3, #69	; 0x45
   da5c2:	d001      	beq.n	da5c8 <strftime+0x88>
   da5c4:	2b4f      	cmp	r3, #79	; 0x4f
   da5c6:	d101      	bne.n	da5cc <strftime+0x8c>
   da5c8:	f109 0901 	add.w	r9, r9, #1
   da5cc:	f899 0000 	ldrb.w	r0, [r9]
   da5d0:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   da5d4:	2b55      	cmp	r3, #85	; 0x55
   da5d6:	f200 845d 	bhi.w	dae94 <strftime+0x954>
   da5da:	e8df f013 	tbh	[pc, r3, lsl #1]
   da5de:	044a      	.short	0x044a
   da5e0:	045b045b 	.word	0x045b045b
   da5e4:	045b045b 	.word	0x045b045b
   da5e8:	045b045b 	.word	0x045b045b
   da5ec:	045b045b 	.word	0x045b045b
   da5f0:	045b045b 	.word	0x045b045b
   da5f4:	045b045b 	.word	0x045b045b
   da5f8:	045b045b 	.word	0x045b045b
   da5fc:	045b045b 	.word	0x045b045b
   da600:	045b045b 	.word	0x045b045b
   da604:	045b045b 	.word	0x045b045b
   da608:	045b045b 	.word	0x045b045b
   da60c:	045b045b 	.word	0x045b045b
   da610:	045b045b 	.word	0x045b045b
   da614:	006f045b 	.word	0x006f045b
   da618:	00d400a1 	.word	0x00d400a1
   da61c:	045b011a 	.word	0x045b011a
   da620:	01a0013f 	.word	0x01a0013f
   da624:	022d0226 	.word	0x022d0226
   da628:	045b045b 	.word	0x045b045b
   da62c:	0260045b 	.word	0x0260045b
   da630:	045b045b 	.word	0x045b045b
   da634:	045b0268 	.word	0x045b0268
   da638:	031d0297 	.word	0x031d0297
   da63c:	033b0325 	.word	0x033b0325
   da640:	03860343 	.word	0x03860343
   da644:	03a000c6 	.word	0x03a000c6
   da648:	045b041f 	.word	0x045b041f
   da64c:	045b045b 	.word	0x045b045b
   da650:	045b045b 	.word	0x045b045b
   da654:	0056045b 	.word	0x0056045b
   da658:	00ba0089 	.word	0x00ba0089
   da65c:	010c010c 	.word	0x010c010c
   da660:	0171045b 	.word	0x0171045b
   da664:	045b0089 	.word	0x045b0089
   da668:	0226023d 	.word	0x0226023d
   da66c:	025d022d 	.word	0x025d022d
   da670:	045b0262 	.word	0x045b0262
   da674:	045b0268 	.word	0x045b0268
   da678:	029c00be 	.word	0x029c00be
   da67c:	032e031f 	.word	0x032e031f
   da680:	037f045b 	.word	0x037f045b
   da684:	039200c2 	.word	0x039200c2
   da688:	03e7      	.short	0x03e7
   da68a:	69ab      	ldr	r3, [r5, #24]
   da68c:	9a03      	ldr	r2, [sp, #12]
   da68e:	3318      	adds	r3, #24
   da690:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   da694:	4640      	mov	r0, r8
   da696:	f000 fc07 	bl	daea8 <strlen>
   da69a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da69e:	193b      	adds	r3, r7, r4
   da6a0:	4420      	add	r0, r4
   da6a2:	4284      	cmp	r4, r0
   da6a4:	f000 83eb 	beq.w	dae7e <strftime+0x93e>
   da6a8:	9a02      	ldr	r2, [sp, #8]
   da6aa:	4294      	cmp	r4, r2
   da6ac:	f080 83f2 	bcs.w	dae94 <strftime+0x954>
   da6b0:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da6b4:	f803 2b01 	strb.w	r2, [r3], #1
   da6b8:	3401      	adds	r4, #1
   da6ba:	e7f2      	b.n	da6a2 <strftime+0x162>
   da6bc:	69ab      	ldr	r3, [r5, #24]
   da6be:	9a03      	ldr	r2, [sp, #12]
   da6c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   da6c4:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   da6c8:	4640      	mov	r0, r8
   da6ca:	f000 fbed 	bl	daea8 <strlen>
   da6ce:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da6d2:	193b      	adds	r3, r7, r4
   da6d4:	4420      	add	r0, r4
   da6d6:	4284      	cmp	r4, r0
   da6d8:	f000 83d1 	beq.w	dae7e <strftime+0x93e>
   da6dc:	9a02      	ldr	r2, [sp, #8]
   da6de:	4294      	cmp	r4, r2
   da6e0:	f080 83d8 	bcs.w	dae94 <strftime+0x954>
   da6e4:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da6e8:	f803 2b01 	strb.w	r2, [r3], #1
   da6ec:	3401      	adds	r4, #1
   da6ee:	e7f2      	b.n	da6d6 <strftime+0x196>
   da6f0:	692b      	ldr	r3, [r5, #16]
   da6f2:	9a03      	ldr	r2, [sp, #12]
   da6f4:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   da6f8:	4640      	mov	r0, r8
   da6fa:	f000 fbd5 	bl	daea8 <strlen>
   da6fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da702:	193b      	adds	r3, r7, r4
   da704:	4420      	add	r0, r4
   da706:	4284      	cmp	r4, r0
   da708:	f000 83b9 	beq.w	dae7e <strftime+0x93e>
   da70c:	9a02      	ldr	r2, [sp, #8]
   da70e:	4294      	cmp	r4, r2
   da710:	f080 83c0 	bcs.w	dae94 <strftime+0x954>
   da714:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da718:	f803 2b01 	strb.w	r2, [r3], #1
   da71c:	3401      	adds	r4, #1
   da71e:	e7f2      	b.n	da706 <strftime+0x1c6>
   da720:	692b      	ldr	r3, [r5, #16]
   da722:	9a03      	ldr	r2, [sp, #12]
   da724:	330c      	adds	r3, #12
   da726:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   da72a:	4640      	mov	r0, r8
   da72c:	f000 fbbc 	bl	daea8 <strlen>
   da730:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da734:	193b      	adds	r3, r7, r4
   da736:	4420      	add	r0, r4
   da738:	4284      	cmp	r4, r0
   da73a:	f000 83a0 	beq.w	dae7e <strftime+0x93e>
   da73e:	9a02      	ldr	r2, [sp, #8]
   da740:	4294      	cmp	r4, r2
   da742:	f080 83a7 	bcs.w	dae94 <strftime+0x954>
   da746:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da74a:	f803 2b01 	strb.w	r2, [r3], #1
   da74e:	3401      	adds	r4, #1
   da750:	e7f2      	b.n	da738 <strftime+0x1f8>
   da752:	9b03      	ldr	r3, [sp, #12]
   da754:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   da758:	e00a      	b.n	da770 <strftime+0x230>
   da75a:	9b03      	ldr	r3, [sp, #12]
   da75c:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   da760:	e006      	b.n	da770 <strftime+0x230>
   da762:	9b03      	ldr	r3, [sp, #12]
   da764:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   da768:	e002      	b.n	da770 <strftime+0x230>
   da76a:	9b03      	ldr	r3, [sp, #12]
   da76c:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   da770:	4640      	mov	r0, r8
   da772:	f000 fb99 	bl	daea8 <strlen>
   da776:	f898 3000 	ldrb.w	r3, [r8]
   da77a:	2b00      	cmp	r3, #0
   da77c:	f000 837f 	beq.w	dae7e <strftime+0x93e>
   da780:	462b      	mov	r3, r5
   da782:	4642      	mov	r2, r8
   da784:	e093      	b.n	da8ae <strftime+0x36e>
   da786:	49b6      	ldr	r1, [pc, #728]	; (daa60 <strftime+0x520>)
   da788:	f8d5 b014 	ldr.w	fp, [r5, #20]
   da78c:	458b      	cmp	fp, r1
   da78e:	bfac      	ite	ge
   da790:	2100      	movge	r1, #0
   da792:	2101      	movlt	r1, #1
   da794:	f1bb 0f00 	cmp.w	fp, #0
   da798:	db04      	blt.n	da7a4 <strftime+0x264>
   da79a:	2064      	movs	r0, #100	; 0x64
   da79c:	fb9b f0f0 	sdiv	r0, fp, r0
   da7a0:	3013      	adds	r0, #19
   da7a2:	e008      	b.n	da7b6 <strftime+0x276>
   da7a4:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   da7a8:	9107      	str	r1, [sp, #28]
   da7aa:	f001 fd41 	bl	dc230 <abs>
   da7ae:	9907      	ldr	r1, [sp, #28]
   da7b0:	2364      	movs	r3, #100	; 0x64
   da7b2:	fb90 f0f3 	sdiv	r0, r0, r3
   da7b6:	f1ba 0f00 	cmp.w	sl, #0
   da7ba:	d008      	beq.n	da7ce <strftime+0x28e>
   da7bc:	2863      	cmp	r0, #99	; 0x63
   da7be:	dd09      	ble.n	da7d4 <strftime+0x294>
   da7c0:	4ba8      	ldr	r3, [pc, #672]	; (daa64 <strftime+0x524>)
   da7c2:	4aa9      	ldr	r2, [pc, #676]	; (daa68 <strftime+0x528>)
   da7c4:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   da7c8:	bf18      	it	ne
   da7ca:	4613      	movne	r3, r2
   da7cc:	e003      	b.n	da7d6 <strftime+0x296>
   da7ce:	4ba6      	ldr	r3, [pc, #664]	; (daa68 <strftime+0x528>)
   da7d0:	4aa6      	ldr	r2, [pc, #664]	; (daa6c <strftime+0x52c>)
   da7d2:	e001      	b.n	da7d8 <strftime+0x298>
   da7d4:	4ba4      	ldr	r3, [pc, #656]	; (daa68 <strftime+0x528>)
   da7d6:	4aa6      	ldr	r2, [pc, #664]	; (daa70 <strftime+0x530>)
   da7d8:	9001      	str	r0, [sp, #4]
   da7da:	f1b8 0f01 	cmp.w	r8, #1
   da7de:	bf98      	it	ls
   da7e0:	f04f 0802 	movls.w	r8, #2
   da7e4:	ebc1 0108 	rsb	r1, r1, r8
   da7e8:	9100      	str	r1, [sp, #0]
   da7ea:	489d      	ldr	r0, [pc, #628]	; (daa60 <strftime+0x520>)
   da7ec:	49a1      	ldr	r1, [pc, #644]	; (daa74 <strftime+0x534>)
   da7ee:	4583      	cmp	fp, r0
   da7f0:	bfb8      	it	lt
   da7f2:	460b      	movlt	r3, r1
   da7f4:	e21e      	b.n	dac34 <strftime+0x6f4>
   da7f6:	4aa0      	ldr	r2, [pc, #640]	; (daa78 <strftime+0x538>)
   da7f8:	49a0      	ldr	r1, [pc, #640]	; (daa7c <strftime+0x53c>)
   da7fa:	68eb      	ldr	r3, [r5, #12]
   da7fc:	2864      	cmp	r0, #100	; 0x64
   da7fe:	bf08      	it	eq
   da800:	460a      	moveq	r2, r1
   da802:	1b31      	subs	r1, r6, r4
   da804:	1938      	adds	r0, r7, r4
   da806:	f7fc fc49 	bl	d709c <sniprintf>
   da80a:	2800      	cmp	r0, #0
   da80c:	f280 8302 	bge.w	dae14 <strftime+0x8d4>
   da810:	e340      	b.n	dae94 <strftime+0x954>
   da812:	6968      	ldr	r0, [r5, #20]
   da814:	692b      	ldr	r3, [r5, #16]
   da816:	2800      	cmp	r0, #0
   da818:	f103 0b01 	add.w	fp, r3, #1
   da81c:	eb07 0804 	add.w	r8, r7, r4
   da820:	ebc4 0a06 	rsb	sl, r4, r6
   da824:	68eb      	ldr	r3, [r5, #12]
   da826:	db05      	blt.n	da834 <strftime+0x2f4>
   da828:	2264      	movs	r2, #100	; 0x64
   da82a:	fb90 f1f2 	sdiv	r1, r0, r2
   da82e:	fb02 0011 	mls	r0, r2, r1, r0
   da832:	e00a      	b.n	da84a <strftime+0x30a>
   da834:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da838:	9307      	str	r3, [sp, #28]
   da83a:	f001 fcf9 	bl	dc230 <abs>
   da83e:	2264      	movs	r2, #100	; 0x64
   da840:	9b07      	ldr	r3, [sp, #28]
   da842:	fb90 f1f2 	sdiv	r1, r0, r2
   da846:	fb01 0012 	mls	r0, r1, r2, r0
   da84a:	4a8d      	ldr	r2, [pc, #564]	; (daa80 <strftime+0x540>)
   da84c:	9001      	str	r0, [sp, #4]
   da84e:	9300      	str	r3, [sp, #0]
   da850:	4651      	mov	r1, sl
   da852:	465b      	mov	r3, fp
   da854:	4640      	mov	r0, r8
   da856:	f7fc fc21 	bl	d709c <sniprintf>
   da85a:	e7d6      	b.n	da80a <strftime+0x2ca>
   da85c:	2325      	movs	r3, #37	; 0x25
   da85e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   da862:	f1ba 0f00 	cmp.w	sl, #0
   da866:	d007      	beq.n	da878 <strftime+0x338>
   da868:	f1b8 0f05 	cmp.w	r8, #5
   da86c:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   da870:	bf98      	it	ls
   da872:	f04f 0806 	movls.w	r8, #6
   da876:	e004      	b.n	da882 <strftime+0x342>
   da878:	232b      	movs	r3, #43	; 0x2b
   da87a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   da87e:	f04f 080a 	mov.w	r8, #10
   da882:	f1b8 0306 	subs.w	r3, r8, #6
   da886:	d102      	bne.n	da88e <strftime+0x34e>
   da888:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   da88c:	e00a      	b.n	da8a4 <strftime+0x364>
   da88e:	4a7d      	ldr	r2, [pc, #500]	; (daa84 <strftime+0x544>)
   da890:	211e      	movs	r1, #30
   da892:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   da896:	f7fc fc01 	bl	d709c <sniprintf>
   da89a:	2800      	cmp	r0, #0
   da89c:	ddf4      	ble.n	da888 <strftime+0x348>
   da89e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   da8a2:	4418      	add	r0, r3
   da8a4:	4978      	ldr	r1, [pc, #480]	; (daa88 <strftime+0x548>)
   da8a6:	f7ff fdc7 	bl	da438 <strcpy>
   da8aa:	462b      	mov	r3, r5
   da8ac:	aa0a      	add	r2, sp, #40	; 0x28
   da8ae:	1b31      	subs	r1, r6, r4
   da8b0:	1938      	adds	r0, r7, r4
   da8b2:	f7ff fe45 	bl	da540 <strftime>
   da8b6:	2800      	cmp	r0, #0
   da8b8:	f340 82ec 	ble.w	dae94 <strftime+0x954>
   da8bc:	4404      	add	r4, r0
   da8be:	e2de      	b.n	dae7e <strftime+0x93e>
   da8c0:	4628      	mov	r0, r5
   da8c2:	f7ff fddc 	bl	da47e <iso_year_adjust>
   da8c6:	4680      	mov	r8, r0
   da8c8:	6968      	ldr	r0, [r5, #20]
   da8ca:	2800      	cmp	r0, #0
   da8cc:	db05      	blt.n	da8da <strftime+0x39a>
   da8ce:	2264      	movs	r2, #100	; 0x64
   da8d0:	fb90 f1f2 	sdiv	r1, r0, r2
   da8d4:	fb02 0011 	mls	r0, r2, r1, r0
   da8d8:	e008      	b.n	da8ec <strftime+0x3ac>
   da8da:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da8de:	f001 fca7 	bl	dc230 <abs>
   da8e2:	2264      	movs	r2, #100	; 0x64
   da8e4:	fb90 f3f2 	sdiv	r3, r0, r2
   da8e8:	fb03 0012 	mls	r0, r3, r2, r0
   da8ec:	f1b8 0f00 	cmp.w	r8, #0
   da8f0:	da06      	bge.n	da900 <strftime+0x3c0>
   da8f2:	696a      	ldr	r2, [r5, #20]
   da8f4:	4b65      	ldr	r3, [pc, #404]	; (daa8c <strftime+0x54c>)
   da8f6:	429a      	cmp	r2, r3
   da8f8:	bfb8      	it	lt
   da8fa:	f04f 0801 	movlt.w	r8, #1
   da8fe:	e006      	b.n	da90e <strftime+0x3ce>
   da900:	d005      	beq.n	da90e <strftime+0x3ce>
   da902:	696a      	ldr	r2, [r5, #20]
   da904:	4b56      	ldr	r3, [pc, #344]	; (daa60 <strftime+0x520>)
   da906:	429a      	cmp	r2, r3
   da908:	bfb8      	it	lt
   da90a:	f04f 38ff 	movlt.w	r8, #4294967295	; 0xffffffff
   da90e:	2364      	movs	r3, #100	; 0x64
   da910:	4440      	add	r0, r8
   da912:	fb90 f2f3 	sdiv	r2, r0, r3
   da916:	fb03 0012 	mls	r0, r3, r2, r0
   da91a:	4418      	add	r0, r3
   da91c:	e1f9      	b.n	dad12 <strftime+0x7d2>
   da91e:	4b50      	ldr	r3, [pc, #320]	; (daa60 <strftime+0x520>)
   da920:	6969      	ldr	r1, [r5, #20]
   da922:	9108      	str	r1, [sp, #32]
   da924:	4299      	cmp	r1, r3
   da926:	bfac      	ite	ge
   da928:	2300      	movge	r3, #0
   da92a:	2301      	movlt	r3, #1
   da92c:	4628      	mov	r0, r5
   da92e:	9307      	str	r3, [sp, #28]
   da930:	f7ff fda5 	bl	da47e <iso_year_adjust>
   da934:	9908      	ldr	r1, [sp, #32]
   da936:	2900      	cmp	r1, #0
   da938:	4683      	mov	fp, r0
   da93a:	db04      	blt.n	da946 <strftime+0x406>
   da93c:	2364      	movs	r3, #100	; 0x64
   da93e:	fb91 f3f3 	sdiv	r3, r1, r3
   da942:	3313      	adds	r3, #19
   da944:	e008      	b.n	da958 <strftime+0x418>
   da946:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   da94a:	9108      	str	r1, [sp, #32]
   da94c:	f001 fc70 	bl	dc230 <abs>
   da950:	9908      	ldr	r1, [sp, #32]
   da952:	2364      	movs	r3, #100	; 0x64
   da954:	fb90 f3f3 	sdiv	r3, r0, r3
   da958:	6968      	ldr	r0, [r5, #20]
   da95a:	2800      	cmp	r0, #0
   da95c:	db06      	blt.n	da96c <strftime+0x42c>
   da95e:	f04f 0e64 	mov.w	lr, #100	; 0x64
   da962:	fb90 fcfe 	sdiv	ip, r0, lr
   da966:	fb0e 001c 	mls	r0, lr, ip, r0
   da96a:	e00d      	b.n	da988 <strftime+0x448>
   da96c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da970:	9109      	str	r1, [sp, #36]	; 0x24
   da972:	9308      	str	r3, [sp, #32]
   da974:	f001 fc5c 	bl	dc230 <abs>
   da978:	f04f 0e64 	mov.w	lr, #100	; 0x64
   da97c:	9909      	ldr	r1, [sp, #36]	; 0x24
   da97e:	9b08      	ldr	r3, [sp, #32]
   da980:	fb90 fcfe 	sdiv	ip, r0, lr
   da984:	fb0c 001e 	mls	r0, ip, lr, r0
   da988:	f1bb 0f00 	cmp.w	fp, #0
   da98c:	da08      	bge.n	da9a0 <strftime+0x460>
   da98e:	6969      	ldr	r1, [r5, #20]
   da990:	4a3e      	ldr	r2, [pc, #248]	; (daa8c <strftime+0x54c>)
   da992:	4291      	cmp	r1, r2
   da994:	da0a      	bge.n	da9ac <strftime+0x46c>
   da996:	f04f 0b01 	mov.w	fp, #1
   da99a:	f8cd b01c 	str.w	fp, [sp, #28]
   da99e:	e005      	b.n	da9ac <strftime+0x46c>
   da9a0:	d004      	beq.n	da9ac <strftime+0x46c>
   da9a2:	4a2f      	ldr	r2, [pc, #188]	; (daa60 <strftime+0x520>)
   da9a4:	4291      	cmp	r1, r2
   da9a6:	bfb8      	it	lt
   da9a8:	f04f 3bff 	movlt.w	fp, #4294967295	; 0xffffffff
   da9ac:	eb0b 0200 	add.w	r2, fp, r0
   da9b0:	1c50      	adds	r0, r2, #1
   da9b2:	d102      	bne.n	da9ba <strftime+0x47a>
   da9b4:	3b01      	subs	r3, #1
   da9b6:	2263      	movs	r2, #99	; 0x63
   da9b8:	e003      	b.n	da9c2 <strftime+0x482>
   da9ba:	2a64      	cmp	r2, #100	; 0x64
   da9bc:	bf04      	itt	eq
   da9be:	3301      	addeq	r3, #1
   da9c0:	2200      	moveq	r2, #0
   da9c2:	2064      	movs	r0, #100	; 0x64
   da9c4:	fb00 2303 	mla	r3, r0, r3, r2
   da9c8:	9a07      	ldr	r2, [sp, #28]
   da9ca:	b142      	cbz	r2, da9de <strftime+0x49e>
   da9cc:	222d      	movs	r2, #45	; 0x2d
   da9ce:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   da9d2:	f1b8 0f00 	cmp.w	r8, #0
   da9d6:	d013      	beq.n	daa00 <strftime+0x4c0>
   da9d8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da9dc:	e010      	b.n	daa00 <strftime+0x4c0>
   da9de:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   da9e2:	d110      	bne.n	daa06 <strftime+0x4c6>
   da9e4:	f242 720f 	movw	r2, #9999	; 0x270f
   da9e8:	4293      	cmp	r3, r2
   da9ea:	d90c      	bls.n	daa06 <strftime+0x4c6>
   da9ec:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   da9f0:	f1b8 0f00 	cmp.w	r8, #0
   da9f4:	d1f0      	bne.n	da9d8 <strftime+0x498>
   da9f6:	aa12      	add	r2, sp, #72	; 0x48
   da9f8:	2125      	movs	r1, #37	; 0x25
   da9fa:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   da9fe:	e00a      	b.n	daa16 <strftime+0x4d6>
   daa00:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   daa04:	e000      	b.n	daa08 <strftime+0x4c8>
   daa06:	aa0a      	add	r2, sp, #40	; 0x28
   daa08:	2125      	movs	r1, #37	; 0x25
   daa0a:	7011      	strb	r1, [r2, #0]
   daa0c:	f1ba 0f00 	cmp.w	sl, #0
   daa10:	d101      	bne.n	daa16 <strftime+0x4d6>
   daa12:	1c50      	adds	r0, r2, #1
   daa14:	e002      	b.n	daa1c <strftime+0x4dc>
   daa16:	2130      	movs	r1, #48	; 0x30
   daa18:	1c90      	adds	r0, r2, #2
   daa1a:	7051      	strb	r1, [r2, #1]
   daa1c:	491c      	ldr	r1, [pc, #112]	; (daa90 <strftime+0x550>)
   daa1e:	9307      	str	r3, [sp, #28]
   daa20:	f7ff fd0a 	bl	da438 <strcpy>
   daa24:	9b07      	ldr	r3, [sp, #28]
   daa26:	9300      	str	r3, [sp, #0]
   daa28:	e1ad      	b.n	dad86 <strftime+0x846>
   daa2a:	4a14      	ldr	r2, [pc, #80]	; (daa7c <strftime+0x53c>)
   daa2c:	4912      	ldr	r1, [pc, #72]	; (daa78 <strftime+0x538>)
   daa2e:	68ab      	ldr	r3, [r5, #8]
   daa30:	286b      	cmp	r0, #107	; 0x6b
   daa32:	bf08      	it	eq
   daa34:	460a      	moveq	r2, r1
   daa36:	e6e4      	b.n	da802 <strftime+0x2c2>
   daa38:	68a9      	ldr	r1, [r5, #8]
   daa3a:	230c      	movs	r3, #12
   daa3c:	b131      	cbz	r1, daa4c <strftime+0x50c>
   daa3e:	4299      	cmp	r1, r3
   daa40:	bf0e      	itee	eq
   daa42:	460b      	moveq	r3, r1
   daa44:	fb91 f2f3 	sdivne	r2, r1, r3
   daa48:	fb03 1312 	mlsne	r3, r3, r2, r1
   daa4c:	4a0a      	ldr	r2, [pc, #40]	; (daa78 <strftime+0x538>)
   daa4e:	490b      	ldr	r1, [pc, #44]	; (daa7c <strftime+0x53c>)
   daa50:	2849      	cmp	r0, #73	; 0x49
   daa52:	bf08      	it	eq
   daa54:	460a      	moveq	r2, r1
   daa56:	e6d4      	b.n	da802 <strftime+0x2c2>
   daa58:	69eb      	ldr	r3, [r5, #28]
   daa5a:	4a0e      	ldr	r2, [pc, #56]	; (daa94 <strftime+0x554>)
   daa5c:	3301      	adds	r3, #1
   daa5e:	e6d0      	b.n	da802 <strftime+0x2c2>
   daa60:	fffff894 	.word	0xfffff894
   daa64:	000ddd83 	.word	0x000ddd83
   daa68:	000dd1dd 	.word	0x000dd1dd
   daa6c:	000ddd74 	.word	0x000ddd74
   daa70:	000ddd7b 	.word	0x000ddd7b
   daa74:	000ddd85 	.word	0x000ddd85
   daa78:	000ddd87 	.word	0x000ddd87
   daa7c:	000ddd95 	.word	0x000ddd95
   daa80:	000ddd8b 	.word	0x000ddd8b
   daa84:	000ddd9a 	.word	0x000ddd9a
   daa88:	000ddd9e 	.word	0x000ddd9e
   daa8c:	fffff895 	.word	0xfffff895
   daa90:	000ddda6 	.word	0x000ddda6
   daa94:	000dddaa 	.word	0x000dddaa
   daa98:	692b      	ldr	r3, [r5, #16]
   daa9a:	3301      	adds	r3, #1
   daa9c:	e13d      	b.n	dad1a <strftime+0x7da>
   daa9e:	686b      	ldr	r3, [r5, #4]
   daaa0:	e13b      	b.n	dad1a <strftime+0x7da>
   daaa2:	9b02      	ldr	r3, [sp, #8]
   daaa4:	429c      	cmp	r4, r3
   daaa6:	f080 81f5 	bcs.w	dae94 <strftime+0x954>
   daaaa:	230a      	movs	r3, #10
   daaac:	e1e5      	b.n	dae7a <strftime+0x93a>
   daaae:	68ab      	ldr	r3, [r5, #8]
   daab0:	9a03      	ldr	r2, [sp, #12]
   daab2:	2b0b      	cmp	r3, #11
   daab4:	bfcc      	ite	gt
   daab6:	23a4      	movgt	r3, #164	; 0xa4
   daab8:	23a0      	movle	r3, #160	; 0xa0
   daaba:	4413      	add	r3, r2
   daabc:	f8d3 8004 	ldr.w	r8, [r3, #4]
   daac0:	4640      	mov	r0, r8
   daac2:	f000 f9f1 	bl	daea8 <strlen>
   daac6:	4bb2      	ldr	r3, [pc, #712]	; (dad90 <strftime+0x850>)
   daac8:	f8d3 e000 	ldr.w	lr, [r3]
   daacc:	1939      	adds	r1, r7, r4
   daace:	4642      	mov	r2, r8
   daad0:	4420      	add	r0, r4
   daad2:	4284      	cmp	r4, r0
   daad4:	f000 81d3 	beq.w	dae7e <strftime+0x93e>
   daad8:	9b02      	ldr	r3, [sp, #8]
   daada:	429c      	cmp	r4, r3
   daadc:	f080 81da 	bcs.w	dae94 <strftime+0x954>
   daae0:	f899 3000 	ldrb.w	r3, [r9]
   daae4:	2b50      	cmp	r3, #80	; 0x50
   daae6:	f104 0401 	add.w	r4, r4, #1
   daaea:	7813      	ldrb	r3, [r2, #0]
   daaec:	d10a      	bne.n	dab04 <strftime+0x5c4>
   daaee:	eb0e 0c03 	add.w	ip, lr, r3
   daaf2:	f89c c001 	ldrb.w	ip, [ip, #1]
   daaf6:	f00c 0c03 	and.w	ip, ip, #3
   daafa:	f1bc 0f01 	cmp.w	ip, #1
   daafe:	bf08      	it	eq
   dab00:	3320      	addeq	r3, #32
   dab02:	b2db      	uxtb	r3, r3
   dab04:	f801 3b01 	strb.w	r3, [r1], #1
   dab08:	3201      	adds	r2, #1
   dab0a:	e7e2      	b.n	daad2 <strftime+0x592>
   dab0c:	686b      	ldr	r3, [r5, #4]
   dab0e:	9300      	str	r3, [sp, #0]
   dab10:	4aa0      	ldr	r2, [pc, #640]	; (dad94 <strftime+0x854>)
   dab12:	68ab      	ldr	r3, [r5, #8]
   dab14:	e139      	b.n	dad8a <strftime+0x84a>
   dab16:	6a2b      	ldr	r3, [r5, #32]
   dab18:	2b00      	cmp	r3, #0
   dab1a:	db17      	blt.n	dab4c <strftime+0x60c>
   dab1c:	f001 fa00 	bl	dbf20 <__tz_lock>
   dab20:	9b06      	ldr	r3, [sp, #24]
   dab22:	b91b      	cbnz	r3, dab2c <strftime+0x5ec>
   dab24:	f001 f9fe 	bl	dbf24 <_tzset_unlocked>
   dab28:	2301      	movs	r3, #1
   dab2a:	9306      	str	r3, [sp, #24]
   dab2c:	f001 fefa 	bl	dc924 <__gettzinfo>
   dab30:	6a2b      	ldr	r3, [r5, #32]
   dab32:	2b00      	cmp	r3, #0
   dab34:	bfd4      	ite	le
   dab36:	2300      	movle	r3, #0
   dab38:	2301      	movgt	r3, #1
   dab3a:	221c      	movs	r2, #28
   dab3c:	fb02 0003 	mla	r0, r2, r3, r0
   dab40:	6a03      	ldr	r3, [r0, #32]
   dab42:	f1c3 0800 	rsb	r8, r3, #0
   dab46:	f001 f9ec 	bl	dbf22 <__tz_unlock>
   dab4a:	e001      	b.n	dab50 <strftime+0x610>
   dab4c:	f04f 0800 	mov.w	r8, #0
   dab50:	f8d5 e014 	ldr.w	lr, [r5, #20]
   dab54:	4670      	mov	r0, lr
   dab56:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   dab5a:	ea4f 71e0 	mov.w	r1, r0, asr #31
   dab5e:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   dab62:	2a00      	cmp	r2, #0
   dab64:	f173 0b00 	sbcs.w	fp, r3, #0
   dab68:	ebc4 0c06 	rsb	ip, r4, r6
   dab6c:	eb07 0a04 	add.w	sl, r7, r4
   dab70:	da03      	bge.n	dab7a <strftime+0x63a>
   dab72:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   dab76:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   dab7a:	0891      	lsrs	r1, r2, #2
   dab7c:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   dab80:	109b      	asrs	r3, r3, #2
   dab82:	9104      	str	r1, [sp, #16]
   dab84:	9305      	str	r3, [sp, #20]
   dab86:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   dab8a:	2364      	movs	r3, #100	; 0x64
   dab8c:	fb91 f1f3 	sdiv	r1, r1, r3
   dab90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   dab94:	1a52      	subs	r2, r2, r1
   dab96:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   dab9a:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   dab9e:	f44f 71c8 	mov.w	r1, #400	; 0x190
   daba2:	fb90 f1f1 	sdiv	r1, r0, r1
   daba6:	1852      	adds	r2, r2, r1
   daba8:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dabac:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   dabb0:	f240 116d 	movw	r1, #365	; 0x16d
   dabb4:	fb01 fe0e 	mul.w	lr, r1, lr
   dabb8:	69e9      	ldr	r1, [r5, #28]
   dabba:	eb12 020e 	adds.w	r2, r2, lr
   dabbe:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   dabc2:	1852      	adds	r2, r2, r1
   dabc4:	f04f 0e18 	mov.w	lr, #24
   dabc8:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dabcc:	fba2 010e 	umull	r0, r1, r2, lr
   dabd0:	fb0e 1103 	mla	r1, lr, r3, r1
   dabd4:	68ab      	ldr	r3, [r5, #8]
   dabd6:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   dabda:	18c0      	adds	r0, r0, r3
   dabdc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dabe0:	fba0 230e 	umull	r2, r3, r0, lr
   dabe4:	fb0e 3301 	mla	r3, lr, r1, r3
   dabe8:	6869      	ldr	r1, [r5, #4]
   dabea:	1852      	adds	r2, r2, r1
   dabec:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dabf0:	fba2 010e 	umull	r0, r1, r2, lr
   dabf4:	fb0e 1103 	mla	r1, lr, r3, r1
   dabf8:	682b      	ldr	r3, [r5, #0]
   dabfa:	4a67      	ldr	r2, [pc, #412]	; (dad98 <strftime+0x858>)
   dabfc:	18c0      	adds	r0, r0, r3
   dabfe:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dac02:	ebb0 0008 	subs.w	r0, r0, r8
   dac06:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   dac0a:	e9cd 0100 	strd	r0, r1, [sp]
   dac0e:	4661      	mov	r1, ip
   dac10:	4650      	mov	r0, sl
   dac12:	f7fc fa43 	bl	d709c <sniprintf>
   dac16:	e5f8      	b.n	da80a <strftime+0x2ca>
   dac18:	682b      	ldr	r3, [r5, #0]
   dac1a:	e07e      	b.n	dad1a <strftime+0x7da>
   dac1c:	9b02      	ldr	r3, [sp, #8]
   dac1e:	429c      	cmp	r4, r3
   dac20:	f080 8138 	bcs.w	dae94 <strftime+0x954>
   dac24:	2309      	movs	r3, #9
   dac26:	e128      	b.n	dae7a <strftime+0x93a>
   dac28:	682b      	ldr	r3, [r5, #0]
   dac2a:	9301      	str	r3, [sp, #4]
   dac2c:	686b      	ldr	r3, [r5, #4]
   dac2e:	9300      	str	r3, [sp, #0]
   dac30:	4a5a      	ldr	r2, [pc, #360]	; (dad9c <strftime+0x85c>)
   dac32:	68ab      	ldr	r3, [r5, #8]
   dac34:	1b31      	subs	r1, r6, r4
   dac36:	1938      	adds	r0, r7, r4
   dac38:	e60d      	b.n	da856 <strftime+0x316>
   dac3a:	9b02      	ldr	r3, [sp, #8]
   dac3c:	429c      	cmp	r4, r3
   dac3e:	f080 8129 	bcs.w	dae94 <strftime+0x954>
   dac42:	69ab      	ldr	r3, [r5, #24]
   dac44:	1c62      	adds	r2, r4, #1
   dac46:	b90b      	cbnz	r3, dac4c <strftime+0x70c>
   dac48:	2337      	movs	r3, #55	; 0x37
   dac4a:	e000      	b.n	dac4e <strftime+0x70e>
   dac4c:	3330      	adds	r3, #48	; 0x30
   dac4e:	553b      	strb	r3, [r7, r4]
   dac50:	4614      	mov	r4, r2
   dac52:	e114      	b.n	dae7e <strftime+0x93e>
   dac54:	69eb      	ldr	r3, [r5, #28]
   dac56:	69aa      	ldr	r2, [r5, #24]
   dac58:	3307      	adds	r3, #7
   dac5a:	1a9b      	subs	r3, r3, r2
   dac5c:	2207      	movs	r2, #7
   dac5e:	fb93 f3f2 	sdiv	r3, r3, r2
   dac62:	e05a      	b.n	dad1a <strftime+0x7da>
   dac64:	4628      	mov	r0, r5
   dac66:	f7ff fc0a 	bl	da47e <iso_year_adjust>
   dac6a:	69aa      	ldr	r2, [r5, #24]
   dac6c:	b10a      	cbz	r2, dac72 <strftime+0x732>
   dac6e:	1e53      	subs	r3, r2, #1
   dac70:	e000      	b.n	dac74 <strftime+0x734>
   dac72:	2306      	movs	r3, #6
   dac74:	2800      	cmp	r0, #0
   dac76:	dc2f      	bgt.n	dacd8 <strftime+0x798>
   dac78:	69ea      	ldr	r2, [r5, #28]
   dac7a:	d101      	bne.n	dac80 <strftime+0x740>
   dac7c:	320a      	adds	r2, #10
   dac7e:	e03b      	b.n	dacf8 <strftime+0x7b8>
   dac80:	1a9a      	subs	r2, r3, r2
   dac82:	696b      	ldr	r3, [r5, #20]
   dac84:	f240 716b 	movw	r1, #1899	; 0x76b
   dac88:	2b00      	cmp	r3, #0
   dac8a:	bfb4      	ite	lt
   dac8c:	4608      	movlt	r0, r1
   dac8e:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   dac92:	4418      	add	r0, r3
   dac94:	0781      	lsls	r1, r0, #30
   dac96:	d107      	bne.n	daca8 <strftime+0x768>
   dac98:	4601      	mov	r1, r0
   dac9a:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dac9e:	fb90 f0fe 	sdiv	r0, r0, lr
   daca2:	fb0e 1110 	mls	r1, lr, r0, r1
   daca6:	b981      	cbnz	r1, dacca <strftime+0x78a>
   daca8:	2b00      	cmp	r3, #0
   dacaa:	f240 716b 	movw	r1, #1899	; 0x76b
   dacae:	bfa8      	it	ge
   dacb0:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   dacb4:	4419      	add	r1, r3
   dacb6:	f44f 73c8 	mov.w	r3, #400	; 0x190
   dacba:	fb91 f0f3 	sdiv	r0, r1, r3
   dacbe:	fb03 1110 	mls	r1, r3, r0, r1
   dacc2:	fab1 f181 	clz	r1, r1
   dacc6:	0949      	lsrs	r1, r1, #5
   dacc8:	e000      	b.n	daccc <strftime+0x78c>
   dacca:	2101      	movs	r1, #1
   daccc:	1a52      	subs	r2, r2, r1
   dacce:	2a05      	cmp	r2, #5
   dacd0:	bfb4      	ite	lt
   dacd2:	2335      	movlt	r3, #53	; 0x35
   dacd4:	2334      	movge	r3, #52	; 0x34
   dacd6:	e020      	b.n	dad1a <strftime+0x7da>
   dacd8:	2301      	movs	r3, #1
   dacda:	e01e      	b.n	dad1a <strftime+0x7da>
   dacdc:	9b02      	ldr	r3, [sp, #8]
   dacde:	429c      	cmp	r4, r3
   dace0:	f080 80d8 	bcs.w	dae94 <strftime+0x954>
   dace4:	69ab      	ldr	r3, [r5, #24]
   dace6:	3330      	adds	r3, #48	; 0x30
   dace8:	e0c7      	b.n	dae7a <strftime+0x93a>
   dacea:	69aa      	ldr	r2, [r5, #24]
   dacec:	b10a      	cbz	r2, dacf2 <strftime+0x7b2>
   dacee:	1e53      	subs	r3, r2, #1
   dacf0:	e000      	b.n	dacf4 <strftime+0x7b4>
   dacf2:	2306      	movs	r3, #6
   dacf4:	69ea      	ldr	r2, [r5, #28]
   dacf6:	3207      	adds	r2, #7
   dacf8:	1ad2      	subs	r2, r2, r3
   dacfa:	2307      	movs	r3, #7
   dacfc:	fb92 f3f3 	sdiv	r3, r2, r3
   dad00:	e00b      	b.n	dad1a <strftime+0x7da>
   dad02:	6968      	ldr	r0, [r5, #20]
   dad04:	2800      	cmp	r0, #0
   dad06:	da03      	bge.n	dad10 <strftime+0x7d0>
   dad08:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dad0c:	f001 fa90 	bl	dc230 <abs>
   dad10:	2364      	movs	r3, #100	; 0x64
   dad12:	fb90 f2f3 	sdiv	r2, r0, r3
   dad16:	fb02 0313 	mls	r3, r2, r3, r0
   dad1a:	4a21      	ldr	r2, [pc, #132]	; (dada0 <strftime+0x860>)
   dad1c:	e571      	b.n	da802 <strftime+0x2c2>
   dad1e:	696b      	ldr	r3, [r5, #20]
   dad20:	4a20      	ldr	r2, [pc, #128]	; (dada4 <strftime+0x864>)
   dad22:	4293      	cmp	r3, r2
   dad24:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   dad28:	da05      	bge.n	dad36 <strftime+0x7f6>
   dad2a:	232d      	movs	r3, #45	; 0x2d
   dad2c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dad30:	f1cb 0b00 	rsb	fp, fp, #0
   dad34:	e008      	b.n	dad48 <strftime+0x808>
   dad36:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dad3a:	d10d      	bne.n	dad58 <strftime+0x818>
   dad3c:	f242 730f 	movw	r3, #9999	; 0x270f
   dad40:	459b      	cmp	fp, r3
   dad42:	d911      	bls.n	dad68 <strftime+0x828>
   dad44:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dad48:	f1b8 0f00 	cmp.w	r8, #0
   dad4c:	d001      	beq.n	dad52 <strftime+0x812>
   dad4e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dad52:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   dad56:	e000      	b.n	dad5a <strftime+0x81a>
   dad58:	ab0a      	add	r3, sp, #40	; 0x28
   dad5a:	2225      	movs	r2, #37	; 0x25
   dad5c:	701a      	strb	r2, [r3, #0]
   dad5e:	f1ba 0f00 	cmp.w	sl, #0
   dad62:	d108      	bne.n	dad76 <strftime+0x836>
   dad64:	1c58      	adds	r0, r3, #1
   dad66:	e009      	b.n	dad7c <strftime+0x83c>
   dad68:	f1b8 0f00 	cmp.w	r8, #0
   dad6c:	d1f4      	bne.n	dad58 <strftime+0x818>
   dad6e:	2325      	movs	r3, #37	; 0x25
   dad70:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dad74:	ab0a      	add	r3, sp, #40	; 0x28
   dad76:	2230      	movs	r2, #48	; 0x30
   dad78:	1c98      	adds	r0, r3, #2
   dad7a:	705a      	strb	r2, [r3, #1]
   dad7c:	490a      	ldr	r1, [pc, #40]	; (dada8 <strftime+0x868>)
   dad7e:	f7ff fb5b 	bl	da438 <strcpy>
   dad82:	f8cd b000 	str.w	fp, [sp]
   dad86:	4643      	mov	r3, r8
   dad88:	aa0a      	add	r2, sp, #40	; 0x28
   dad8a:	1b31      	subs	r1, r6, r4
   dad8c:	1938      	adds	r0, r7, r4
   dad8e:	e03e      	b.n	dae0e <strftime+0x8ce>
   dad90:	2003df78 	.word	0x2003df78
   dad94:	000dddb9 	.word	0x000dddb9
   dad98:	000dddaf 	.word	0x000dddaf
   dad9c:	000dddb4 	.word	0x000dddb4
   dada0:	000ddd95 	.word	0x000ddd95
   dada4:	fffff894 	.word	0xfffff894
   dada8:	000ddda6 	.word	0x000ddda6
   dadac:	6a2b      	ldr	r3, [r5, #32]
   dadae:	2b00      	cmp	r3, #0
   dadb0:	db65      	blt.n	dae7e <strftime+0x93e>
   dadb2:	f001 f8b5 	bl	dbf20 <__tz_lock>
   dadb6:	9b06      	ldr	r3, [sp, #24]
   dadb8:	b91b      	cbnz	r3, dadc2 <strftime+0x882>
   dadba:	f001 f8b3 	bl	dbf24 <_tzset_unlocked>
   dadbe:	2301      	movs	r3, #1
   dadc0:	9306      	str	r3, [sp, #24]
   dadc2:	f001 fdaf 	bl	dc924 <__gettzinfo>
   dadc6:	6a2b      	ldr	r3, [r5, #32]
   dadc8:	2b00      	cmp	r3, #0
   dadca:	bfd4      	ite	le
   dadcc:	2300      	movle	r3, #0
   dadce:	2301      	movgt	r3, #1
   dadd0:	221c      	movs	r2, #28
   dadd2:	fb02 0003 	mla	r0, r2, r3, r0
   dadd6:	eb07 0a04 	add.w	sl, r7, r4
   dadda:	6a03      	ldr	r3, [r0, #32]
   daddc:	f1c3 0800 	rsb	r8, r3, #0
   dade0:	f001 f89f 	bl	dbf22 <__tz_unlock>
   dade4:	233c      	movs	r3, #60	; 0x3c
   dade6:	fb98 f0f3 	sdiv	r0, r8, r3
   dadea:	9307      	str	r3, [sp, #28]
   dadec:	f001 fd9e 	bl	dc92c <labs>
   dadf0:	9b07      	ldr	r3, [sp, #28]
   dadf2:	fb90 f2f3 	sdiv	r2, r0, r3
   dadf6:	ebc4 0b06 	rsb	fp, r4, r6
   dadfa:	fb02 0013 	mls	r0, r2, r3, r0
   dadfe:	4a28      	ldr	r2, [pc, #160]	; (daea0 <strftime+0x960>)
   dae00:	9000      	str	r0, [sp, #0]
   dae02:	4659      	mov	r1, fp
   dae04:	4650      	mov	r0, sl
   dae06:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dae0a:	fb98 f3f3 	sdiv	r3, r8, r3
   dae0e:	f7fc f945 	bl	d709c <sniprintf>
   dae12:	e4fa      	b.n	da80a <strftime+0x2ca>
   dae14:	4404      	add	r4, r0
   dae16:	42a6      	cmp	r6, r4
   dae18:	d831      	bhi.n	dae7e <strftime+0x93e>
   dae1a:	e03b      	b.n	dae94 <strftime+0x954>
   dae1c:	6a2b      	ldr	r3, [r5, #32]
   dae1e:	2b00      	cmp	r3, #0
   dae20:	db2d      	blt.n	dae7e <strftime+0x93e>
   dae22:	f001 f87d 	bl	dbf20 <__tz_lock>
   dae26:	9b06      	ldr	r3, [sp, #24]
   dae28:	b91b      	cbnz	r3, dae32 <strftime+0x8f2>
   dae2a:	f001 f87b 	bl	dbf24 <_tzset_unlocked>
   dae2e:	2301      	movs	r3, #1
   dae30:	9306      	str	r3, [sp, #24]
   dae32:	6a2b      	ldr	r3, [r5, #32]
   dae34:	4a1b      	ldr	r2, [pc, #108]	; (daea4 <strftime+0x964>)
   dae36:	2b00      	cmp	r3, #0
   dae38:	bfd4      	ite	le
   dae3a:	2300      	movle	r3, #0
   dae3c:	2301      	movgt	r3, #1
   dae3e:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dae42:	4640      	mov	r0, r8
   dae44:	f000 f830 	bl	daea8 <strlen>
   dae48:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dae4c:	193b      	adds	r3, r7, r4
   dae4e:	4420      	add	r0, r4
   dae50:	4284      	cmp	r4, r0
   dae52:	d00b      	beq.n	dae6c <strftime+0x92c>
   dae54:	9a02      	ldr	r2, [sp, #8]
   dae56:	4294      	cmp	r4, r2
   dae58:	d205      	bcs.n	dae66 <strftime+0x926>
   dae5a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dae5e:	f803 2b01 	strb.w	r2, [r3], #1
   dae62:	3401      	adds	r4, #1
   dae64:	e7f4      	b.n	dae50 <strftime+0x910>
   dae66:	f001 f85c 	bl	dbf22 <__tz_unlock>
   dae6a:	e013      	b.n	dae94 <strftime+0x954>
   dae6c:	f001 f859 	bl	dbf22 <__tz_unlock>
   dae70:	e005      	b.n	dae7e <strftime+0x93e>
   dae72:	9b02      	ldr	r3, [sp, #8]
   dae74:	429c      	cmp	r4, r3
   dae76:	d20d      	bcs.n	dae94 <strftime+0x954>
   dae78:	2325      	movs	r3, #37	; 0x25
   dae7a:	553b      	strb	r3, [r7, r4]
   dae7c:	3401      	adds	r4, #1
   dae7e:	f899 3000 	ldrb.w	r3, [r9]
   dae82:	b11b      	cbz	r3, dae8c <strftime+0x94c>
   dae84:	f109 0901 	add.w	r9, r9, #1
   dae88:	f7ff bb69 	b.w	da55e <strftime+0x1e>
   dae8c:	b126      	cbz	r6, dae98 <strftime+0x958>
   dae8e:	2300      	movs	r3, #0
   dae90:	553b      	strb	r3, [r7, r4]
   dae92:	e001      	b.n	dae98 <strftime+0x958>
   dae94:	2000      	movs	r0, #0
   dae96:	e000      	b.n	dae9a <strftime+0x95a>
   dae98:	4620      	mov	r0, r4
   dae9a:	b013      	add	sp, #76	; 0x4c
   dae9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daea0:	000dddc3 	.word	0x000dddc3
   daea4:	2003e018 	.word	0x2003e018

000daea8 <strlen>:
   daea8:	4603      	mov	r3, r0
   daeaa:	f813 2b01 	ldrb.w	r2, [r3], #1
   daeae:	2a00      	cmp	r2, #0
   daeb0:	d1fb      	bne.n	daeaa <strlen+0x2>
   daeb2:	1a18      	subs	r0, r3, r0
   daeb4:	3801      	subs	r0, #1
   daeb6:	4770      	bx	lr

000daeb8 <strncmp>:
   daeb8:	b530      	push	{r4, r5, lr}
   daeba:	b182      	cbz	r2, daede <strncmp+0x26>
   daebc:	1e45      	subs	r5, r0, #1
   daebe:	3901      	subs	r1, #1
   daec0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   daec4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   daec8:	42a3      	cmp	r3, r4
   daeca:	d106      	bne.n	daeda <strncmp+0x22>
   daecc:	43ec      	mvns	r4, r5
   daece:	4414      	add	r4, r2
   daed0:	42e0      	cmn	r0, r4
   daed2:	d001      	beq.n	daed8 <strncmp+0x20>
   daed4:	2b00      	cmp	r3, #0
   daed6:	d1f3      	bne.n	daec0 <strncmp+0x8>
   daed8:	461c      	mov	r4, r3
   daeda:	1b18      	subs	r0, r3, r4
   daedc:	bd30      	pop	{r4, r5, pc}
   daede:	4610      	mov	r0, r2
   daee0:	bd30      	pop	{r4, r5, pc}

000daee2 <strncpy>:
   daee2:	b510      	push	{r4, lr}
   daee4:	4603      	mov	r3, r0
   daee6:	b142      	cbz	r2, daefa <strncpy+0x18>
   daee8:	f811 4b01 	ldrb.w	r4, [r1], #1
   daeec:	f803 4b01 	strb.w	r4, [r3], #1
   daef0:	3a01      	subs	r2, #1
   daef2:	2c00      	cmp	r4, #0
   daef4:	d1f7      	bne.n	daee6 <strncpy+0x4>
   daef6:	441a      	add	r2, r3
   daef8:	e000      	b.n	daefc <strncpy+0x1a>
   daefa:	bd10      	pop	{r4, pc}
   daefc:	4293      	cmp	r3, r2
   daefe:	d002      	beq.n	daf06 <strncpy+0x24>
   daf00:	f803 4b01 	strb.w	r4, [r3], #1
   daf04:	e7fa      	b.n	daefc <strncpy+0x1a>
   daf06:	bd10      	pop	{r4, pc}

000daf08 <sulp>:
   daf08:	b570      	push	{r4, r5, r6, lr}
   daf0a:	4604      	mov	r4, r0
   daf0c:	460d      	mov	r5, r1
   daf0e:	ec45 4b10 	vmov	d0, r4, r5
   daf12:	4616      	mov	r6, r2
   daf14:	f001 ffd4 	bl	dcec0 <__ulp>
   daf18:	ec51 0b10 	vmov	r0, r1, d0
   daf1c:	b17e      	cbz	r6, daf3e <sulp+0x36>
   daf1e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   daf22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   daf26:	2b00      	cmp	r3, #0
   daf28:	dd09      	ble.n	daf3e <sulp+0x36>
   daf2a:	051b      	lsls	r3, r3, #20
   daf2c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   daf30:	2400      	movs	r4, #0
   daf32:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   daf36:	4622      	mov	r2, r4
   daf38:	462b      	mov	r3, r5
   daf3a:	f7fe faad 	bl	d9498 <__aeabi_dmul>
   daf3e:	bd70      	pop	{r4, r5, r6, pc}

000daf40 <_strtod_r>:
   daf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daf44:	b09d      	sub	sp, #116	; 0x74
   daf46:	2300      	movs	r3, #0
   daf48:	9002      	str	r0, [sp, #8]
   daf4a:	460c      	mov	r4, r1
   daf4c:	9213      	str	r2, [sp, #76]	; 0x4c
   daf4e:	9318      	str	r3, [sp, #96]	; 0x60
   daf50:	f04f 0a00 	mov.w	sl, #0
   daf54:	f04f 0b00 	mov.w	fp, #0
   daf58:	9117      	str	r1, [sp, #92]	; 0x5c
   daf5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   daf5c:	781a      	ldrb	r2, [r3, #0]
   daf5e:	2a0d      	cmp	r2, #13
   daf60:	d805      	bhi.n	daf6e <_strtod_r+0x2e>
   daf62:	2a09      	cmp	r2, #9
   daf64:	d213      	bcs.n	daf8e <_strtod_r+0x4e>
   daf66:	2a00      	cmp	r2, #0
   daf68:	f000 81ac 	beq.w	db2c4 <_strtod_r+0x384>
   daf6c:	e012      	b.n	daf94 <_strtod_r+0x54>
   daf6e:	2a2b      	cmp	r2, #43	; 0x2b
   daf70:	d004      	beq.n	daf7c <_strtod_r+0x3c>
   daf72:	2a2d      	cmp	r2, #45	; 0x2d
   daf74:	d004      	beq.n	daf80 <_strtod_r+0x40>
   daf76:	2a20      	cmp	r2, #32
   daf78:	d10c      	bne.n	daf94 <_strtod_r+0x54>
   daf7a:	e008      	b.n	daf8e <_strtod_r+0x4e>
   daf7c:	2200      	movs	r2, #0
   daf7e:	e000      	b.n	daf82 <_strtod_r+0x42>
   daf80:	2201      	movs	r2, #1
   daf82:	920c      	str	r2, [sp, #48]	; 0x30
   daf84:	1c5a      	adds	r2, r3, #1
   daf86:	9217      	str	r2, [sp, #92]	; 0x5c
   daf88:	785b      	ldrb	r3, [r3, #1]
   daf8a:	b92b      	cbnz	r3, daf98 <_strtod_r+0x58>
   daf8c:	e19a      	b.n	db2c4 <_strtod_r+0x384>
   daf8e:	3301      	adds	r3, #1
   daf90:	9317      	str	r3, [sp, #92]	; 0x5c
   daf92:	e7e2      	b.n	daf5a <_strtod_r+0x1a>
   daf94:	2300      	movs	r3, #0
   daf96:	930c      	str	r3, [sp, #48]	; 0x30
   daf98:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   daf9a:	782b      	ldrb	r3, [r5, #0]
   daf9c:	2b30      	cmp	r3, #48	; 0x30
   daf9e:	d15c      	bne.n	db05a <_strtod_r+0x11a>
   dafa0:	786b      	ldrb	r3, [r5, #1]
   dafa2:	2b58      	cmp	r3, #88	; 0x58
   dafa4:	d001      	beq.n	dafaa <_strtod_r+0x6a>
   dafa6:	2b78      	cmp	r3, #120	; 0x78
   dafa8:	d14c      	bne.n	db044 <_strtod_r+0x104>
   dafaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dafac:	9301      	str	r3, [sp, #4]
   dafae:	ab18      	add	r3, sp, #96	; 0x60
   dafb0:	9300      	str	r3, [sp, #0]
   dafb2:	4aa9      	ldr	r2, [pc, #676]	; (db258 <_strtod_r+0x318>)
   dafb4:	9802      	ldr	r0, [sp, #8]
   dafb6:	ab19      	add	r3, sp, #100	; 0x64
   dafb8:	a917      	add	r1, sp, #92	; 0x5c
   dafba:	f001 f99c 	bl	dc2f6 <__gethex>
   dafbe:	f010 0607 	ands.w	r6, r0, #7
   dafc2:	4604      	mov	r4, r0
   dafc4:	f000 8587 	beq.w	dbad6 <_strtod_r+0xb96>
   dafc8:	2e06      	cmp	r6, #6
   dafca:	d105      	bne.n	dafd8 <_strtod_r+0x98>
   dafcc:	3501      	adds	r5, #1
   dafce:	2300      	movs	r3, #0
   dafd0:	9517      	str	r5, [sp, #92]	; 0x5c
   dafd2:	930c      	str	r3, [sp, #48]	; 0x30
   dafd4:	f000 bd7f 	b.w	dbad6 <_strtod_r+0xb96>
   dafd8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dafda:	b13a      	cbz	r2, dafec <_strtod_r+0xac>
   dafdc:	2135      	movs	r1, #53	; 0x35
   dafde:	a81a      	add	r0, sp, #104	; 0x68
   dafe0:	f002 f85b 	bl	dd09a <__copybits>
   dafe4:	9918      	ldr	r1, [sp, #96]	; 0x60
   dafe6:	9802      	ldr	r0, [sp, #8]
   dafe8:	f001 fcd9 	bl	dc99e <_Bfree>
   dafec:	2e06      	cmp	r6, #6
   dafee:	d822      	bhi.n	db036 <_strtod_r+0xf6>
   daff0:	e8df f006 	tbb	[pc, r6]
   daff4:	18080d04 	.word	0x18080d04
   daff8:	0d1d      	.short	0x0d1d
   daffa:	04          	.byte	0x04
   daffb:	00          	.byte	0x00
   daffc:	f04f 0b00 	mov.w	fp, #0
   db000:	46da      	mov	sl, fp
   db002:	e018      	b.n	db036 <_strtod_r+0xf6>
   db004:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   db008:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   db00c:	e013      	b.n	db036 <_strtod_r+0xf6>
   db00e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   db010:	9a19      	ldr	r2, [sp, #100]	; 0x64
   db012:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   db016:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   db01a:	f202 4233 	addw	r2, r2, #1075	; 0x433
   db01e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   db022:	e008      	b.n	db036 <_strtod_r+0xf6>
   db024:	f8df b234 	ldr.w	fp, [pc, #564]	; db25c <_strtod_r+0x31c>
   db028:	f04f 0a00 	mov.w	sl, #0
   db02c:	e003      	b.n	db036 <_strtod_r+0xf6>
   db02e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   db032:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db036:	0721      	lsls	r1, r4, #28
   db038:	f140 854d 	bpl.w	dbad6 <_strtod_r+0xb96>
   db03c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   db040:	f000 bd49 	b.w	dbad6 <_strtod_r+0xb96>
   db044:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db046:	1c5a      	adds	r2, r3, #1
   db048:	9217      	str	r2, [sp, #92]	; 0x5c
   db04a:	785b      	ldrb	r3, [r3, #1]
   db04c:	2b30      	cmp	r3, #48	; 0x30
   db04e:	d0f9      	beq.n	db044 <_strtod_r+0x104>
   db050:	2b00      	cmp	r3, #0
   db052:	f000 8540 	beq.w	dbad6 <_strtod_r+0xb96>
   db056:	2301      	movs	r3, #1
   db058:	e000      	b.n	db05c <_strtod_r+0x11c>
   db05a:	2300      	movs	r3, #0
   db05c:	f04f 0800 	mov.w	r8, #0
   db060:	9306      	str	r3, [sp, #24]
   db062:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db064:	9307      	str	r3, [sp, #28]
   db066:	f8cd 8014 	str.w	r8, [sp, #20]
   db06a:	f8cd 8010 	str.w	r8, [sp, #16]
   db06e:	220a      	movs	r2, #10
   db070:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   db072:	782e      	ldrb	r6, [r5, #0]
   db074:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   db078:	b2d9      	uxtb	r1, r3
   db07a:	2909      	cmp	r1, #9
   db07c:	d80e      	bhi.n	db09c <_strtod_r+0x15c>
   db07e:	9904      	ldr	r1, [sp, #16]
   db080:	2908      	cmp	r1, #8
   db082:	bfdd      	ittte	le
   db084:	9905      	ldrle	r1, [sp, #20]
   db086:	fb02 3301 	mlale	r3, r2, r1, r3
   db08a:	9305      	strle	r3, [sp, #20]
   db08c:	fb02 3808 	mlagt	r8, r2, r8, r3
   db090:	9b04      	ldr	r3, [sp, #16]
   db092:	3501      	adds	r5, #1
   db094:	3301      	adds	r3, #1
   db096:	9304      	str	r3, [sp, #16]
   db098:	9517      	str	r5, [sp, #92]	; 0x5c
   db09a:	e7e9      	b.n	db070 <_strtod_r+0x130>
   db09c:	9802      	ldr	r0, [sp, #8]
   db09e:	f7fe ff33 	bl	d9f08 <_localeconv_r>
   db0a2:	6807      	ldr	r7, [r0, #0]
   db0a4:	9802      	ldr	r0, [sp, #8]
   db0a6:	f7fe ff2f 	bl	d9f08 <_localeconv_r>
   db0aa:	6800      	ldr	r0, [r0, #0]
   db0ac:	f7ff fefc 	bl	daea8 <strlen>
   db0b0:	4639      	mov	r1, r7
   db0b2:	4602      	mov	r2, r0
   db0b4:	4628      	mov	r0, r5
   db0b6:	f7ff feff 	bl	daeb8 <strncmp>
   db0ba:	4607      	mov	r7, r0
   db0bc:	b128      	cbz	r0, db0ca <_strtod_r+0x18a>
   db0be:	2000      	movs	r0, #0
   db0c0:	4633      	mov	r3, r6
   db0c2:	9d04      	ldr	r5, [sp, #16]
   db0c4:	4602      	mov	r2, r0
   db0c6:	4601      	mov	r1, r0
   db0c8:	e057      	b.n	db17a <_strtod_r+0x23a>
   db0ca:	9802      	ldr	r0, [sp, #8]
   db0cc:	f7fe ff1c 	bl	d9f08 <_localeconv_r>
   db0d0:	6800      	ldr	r0, [r0, #0]
   db0d2:	f7ff fee9 	bl	daea8 <strlen>
   db0d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db0d8:	181a      	adds	r2, r3, r0
   db0da:	9217      	str	r2, [sp, #92]	; 0x5c
   db0dc:	9a04      	ldr	r2, [sp, #16]
   db0de:	5c1b      	ldrb	r3, [r3, r0]
   db0e0:	2a00      	cmp	r2, #0
   db0e2:	d142      	bne.n	db16a <_strtod_r+0x22a>
   db0e4:	4610      	mov	r0, r2
   db0e6:	2b30      	cmp	r3, #48	; 0x30
   db0e8:	d105      	bne.n	db0f6 <_strtod_r+0x1b6>
   db0ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db0ec:	1c5a      	adds	r2, r3, #1
   db0ee:	9217      	str	r2, [sp, #92]	; 0x5c
   db0f0:	3001      	adds	r0, #1
   db0f2:	785b      	ldrb	r3, [r3, #1]
   db0f4:	e7f7      	b.n	db0e6 <_strtod_r+0x1a6>
   db0f6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   db0fa:	2a08      	cmp	r2, #8
   db0fc:	d843      	bhi.n	db186 <_strtod_r+0x246>
   db0fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   db100:	9207      	str	r2, [sp, #28]
   db102:	4602      	mov	r2, r0
   db104:	2000      	movs	r0, #0
   db106:	4605      	mov	r5, r0
   db108:	3b30      	subs	r3, #48	; 0x30
   db10a:	f100 0101 	add.w	r1, r0, #1
   db10e:	d026      	beq.n	db15e <_strtod_r+0x21e>
   db110:	440a      	add	r2, r1
   db112:	eb05 0c00 	add.w	ip, r5, r0
   db116:	4629      	mov	r1, r5
   db118:	260a      	movs	r6, #10
   db11a:	4561      	cmp	r1, ip
   db11c:	d00e      	beq.n	db13c <_strtod_r+0x1fc>
   db11e:	3101      	adds	r1, #1
   db120:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   db124:	f1be 0f08 	cmp.w	lr, #8
   db128:	dc03      	bgt.n	db132 <_strtod_r+0x1f2>
   db12a:	9f05      	ldr	r7, [sp, #20]
   db12c:	4377      	muls	r7, r6
   db12e:	9705      	str	r7, [sp, #20]
   db130:	e7f3      	b.n	db11a <_strtod_r+0x1da>
   db132:	2910      	cmp	r1, #16
   db134:	bfd8      	it	le
   db136:	fb06 f808 	mulle.w	r8, r6, r8
   db13a:	e7ee      	b.n	db11a <_strtod_r+0x1da>
   db13c:	4428      	add	r0, r5
   db13e:	2808      	cmp	r0, #8
   db140:	f100 0501 	add.w	r5, r0, #1
   db144:	dc05      	bgt.n	db152 <_strtod_r+0x212>
   db146:	9805      	ldr	r0, [sp, #20]
   db148:	210a      	movs	r1, #10
   db14a:	fb01 3300 	mla	r3, r1, r0, r3
   db14e:	9305      	str	r3, [sp, #20]
   db150:	e004      	b.n	db15c <_strtod_r+0x21c>
   db152:	2d10      	cmp	r5, #16
   db154:	bfdc      	itt	le
   db156:	210a      	movle	r1, #10
   db158:	fb01 3808 	mlale	r8, r1, r8, r3
   db15c:	2100      	movs	r1, #0
   db15e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db160:	1c58      	adds	r0, r3, #1
   db162:	9017      	str	r0, [sp, #92]	; 0x5c
   db164:	785b      	ldrb	r3, [r3, #1]
   db166:	4608      	mov	r0, r1
   db168:	e002      	b.n	db170 <_strtod_r+0x230>
   db16a:	9d04      	ldr	r5, [sp, #16]
   db16c:	4638      	mov	r0, r7
   db16e:	463a      	mov	r2, r7
   db170:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   db174:	2909      	cmp	r1, #9
   db176:	d9c7      	bls.n	db108 <_strtod_r+0x1c8>
   db178:	2101      	movs	r1, #1
   db17a:	2b65      	cmp	r3, #101	; 0x65
   db17c:	d001      	beq.n	db182 <_strtod_r+0x242>
   db17e:	2b45      	cmp	r3, #69	; 0x45
   db180:	d151      	bne.n	db226 <_strtod_r+0x2e6>
   db182:	b96d      	cbnz	r5, db1a0 <_strtod_r+0x260>
   db184:	e004      	b.n	db190 <_strtod_r+0x250>
   db186:	2b65      	cmp	r3, #101	; 0x65
   db188:	f040 84b3 	bne.w	dbaf2 <_strtod_r+0xbb2>
   db18c:	2200      	movs	r2, #0
   db18e:	2101      	movs	r1, #1
   db190:	b928      	cbnz	r0, db19e <_strtod_r+0x25e>
   db192:	9b06      	ldr	r3, [sp, #24]
   db194:	2b00      	cmp	r3, #0
   db196:	f000 8095 	beq.w	db2c4 <_strtod_r+0x384>
   db19a:	4605      	mov	r5, r0
   db19c:	e000      	b.n	db1a0 <_strtod_r+0x260>
   db19e:	2500      	movs	r5, #0
   db1a0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   db1a2:	1c63      	adds	r3, r4, #1
   db1a4:	9317      	str	r3, [sp, #92]	; 0x5c
   db1a6:	7863      	ldrb	r3, [r4, #1]
   db1a8:	2b2b      	cmp	r3, #43	; 0x2b
   db1aa:	d006      	beq.n	db1ba <_strtod_r+0x27a>
   db1ac:	2b2d      	cmp	r3, #45	; 0x2d
   db1ae:	d002      	beq.n	db1b6 <_strtod_r+0x276>
   db1b0:	2600      	movs	r6, #0
   db1b2:	9603      	str	r6, [sp, #12]
   db1b4:	e006      	b.n	db1c4 <_strtod_r+0x284>
   db1b6:	2301      	movs	r3, #1
   db1b8:	e000      	b.n	db1bc <_strtod_r+0x27c>
   db1ba:	2300      	movs	r3, #0
   db1bc:	9303      	str	r3, [sp, #12]
   db1be:	1ca3      	adds	r3, r4, #2
   db1c0:	9317      	str	r3, [sp, #92]	; 0x5c
   db1c2:	78a3      	ldrb	r3, [r4, #2]
   db1c4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   db1c8:	2e09      	cmp	r6, #9
   db1ca:	d82b      	bhi.n	db224 <_strtod_r+0x2e4>
   db1cc:	2b30      	cmp	r3, #48	; 0x30
   db1ce:	d104      	bne.n	db1da <_strtod_r+0x29a>
   db1d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db1d2:	1c5e      	adds	r6, r3, #1
   db1d4:	9617      	str	r6, [sp, #92]	; 0x5c
   db1d6:	785b      	ldrb	r3, [r3, #1]
   db1d8:	e7f8      	b.n	db1cc <_strtod_r+0x28c>
   db1da:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   db1de:	2e08      	cmp	r6, #8
   db1e0:	d821      	bhi.n	db226 <_strtod_r+0x2e6>
   db1e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   db1e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db1e8:	f04f 0c0a 	mov.w	ip, #10
   db1ec:	461f      	mov	r7, r3
   db1ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db1f0:	1c5e      	adds	r6, r3, #1
   db1f2:	9617      	str	r6, [sp, #92]	; 0x5c
   db1f4:	785b      	ldrb	r3, [r3, #1]
   db1f6:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   db1fa:	f1b9 0f09 	cmp.w	r9, #9
   db1fe:	d804      	bhi.n	db20a <_strtod_r+0x2ca>
   db200:	fb0c 3e0e 	mla	lr, ip, lr, r3
   db204:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   db208:	e7f1      	b.n	db1ee <_strtod_r+0x2ae>
   db20a:	1bf6      	subs	r6, r6, r7
   db20c:	2e08      	cmp	r6, #8
   db20e:	f644 691f 	movw	r9, #19999	; 0x4e1f
   db212:	dc02      	bgt.n	db21a <_strtod_r+0x2da>
   db214:	45f1      	cmp	r9, lr
   db216:	bfa8      	it	ge
   db218:	46f1      	movge	r9, lr
   db21a:	9e03      	ldr	r6, [sp, #12]
   db21c:	b12e      	cbz	r6, db22a <_strtod_r+0x2ea>
   db21e:	f1c9 0900 	rsb	r9, r9, #0
   db222:	e002      	b.n	db22a <_strtod_r+0x2ea>
   db224:	9417      	str	r4, [sp, #92]	; 0x5c
   db226:	f04f 0900 	mov.w	r9, #0
   db22a:	2d00      	cmp	r5, #0
   db22c:	d153      	bne.n	db2d6 <_strtod_r+0x396>
   db22e:	2800      	cmp	r0, #0
   db230:	f040 8451 	bne.w	dbad6 <_strtod_r+0xb96>
   db234:	9a06      	ldr	r2, [sp, #24]
   db236:	2a00      	cmp	r2, #0
   db238:	f040 844d 	bne.w	dbad6 <_strtod_r+0xb96>
   db23c:	2900      	cmp	r1, #0
   db23e:	d141      	bne.n	db2c4 <_strtod_r+0x384>
   db240:	2b4e      	cmp	r3, #78	; 0x4e
   db242:	d020      	beq.n	db286 <_strtod_r+0x346>
   db244:	dc02      	bgt.n	db24c <_strtod_r+0x30c>
   db246:	2b49      	cmp	r3, #73	; 0x49
   db248:	d00a      	beq.n	db260 <_strtod_r+0x320>
   db24a:	e03b      	b.n	db2c4 <_strtod_r+0x384>
   db24c:	2b69      	cmp	r3, #105	; 0x69
   db24e:	d007      	beq.n	db260 <_strtod_r+0x320>
   db250:	2b6e      	cmp	r3, #110	; 0x6e
   db252:	d018      	beq.n	db286 <_strtod_r+0x346>
   db254:	e036      	b.n	db2c4 <_strtod_r+0x384>
   db256:	bf00      	nop
   db258:	000dddd0 	.word	0x000dddd0
   db25c:	7ff00000 	.word	0x7ff00000
   db260:	49a8      	ldr	r1, [pc, #672]	; (db504 <_strtod_r+0x5c4>)
   db262:	a817      	add	r0, sp, #92	; 0x5c
   db264:	f001 fa78 	bl	dc758 <__match>
   db268:	b360      	cbz	r0, db2c4 <_strtod_r+0x384>
   db26a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db26c:	49a6      	ldr	r1, [pc, #664]	; (db508 <_strtod_r+0x5c8>)
   db26e:	3b01      	subs	r3, #1
   db270:	a817      	add	r0, sp, #92	; 0x5c
   db272:	9317      	str	r3, [sp, #92]	; 0x5c
   db274:	f001 fa70 	bl	dc758 <__match>
   db278:	b910      	cbnz	r0, db280 <_strtod_r+0x340>
   db27a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db27c:	3301      	adds	r3, #1
   db27e:	9317      	str	r3, [sp, #92]	; 0x5c
   db280:	f8df b2a0 	ldr.w	fp, [pc, #672]	; db524 <_strtod_r+0x5e4>
   db284:	e01a      	b.n	db2bc <_strtod_r+0x37c>
   db286:	49a1      	ldr	r1, [pc, #644]	; (db50c <_strtod_r+0x5cc>)
   db288:	a817      	add	r0, sp, #92	; 0x5c
   db28a:	f001 fa65 	bl	dc758 <__match>
   db28e:	b1c8      	cbz	r0, db2c4 <_strtod_r+0x384>
   db290:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db292:	781b      	ldrb	r3, [r3, #0]
   db294:	2b28      	cmp	r3, #40	; 0x28
   db296:	d10f      	bne.n	db2b8 <_strtod_r+0x378>
   db298:	aa1a      	add	r2, sp, #104	; 0x68
   db29a:	499d      	ldr	r1, [pc, #628]	; (db510 <_strtod_r+0x5d0>)
   db29c:	a817      	add	r0, sp, #92	; 0x5c
   db29e:	f001 fa6e 	bl	dc77e <__hexnan>
   db2a2:	2805      	cmp	r0, #5
   db2a4:	d108      	bne.n	db2b8 <_strtod_r+0x378>
   db2a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   db2a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   db2ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   db2b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   db2b4:	f000 bc0f 	b.w	dbad6 <_strtod_r+0xb96>
   db2b8:	f8df b26c 	ldr.w	fp, [pc, #620]	; db528 <_strtod_r+0x5e8>
   db2bc:	f04f 0a00 	mov.w	sl, #0
   db2c0:	f000 bc09 	b.w	dbad6 <_strtod_r+0xb96>
   db2c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   db2c6:	9417      	str	r4, [sp, #92]	; 0x5c
   db2c8:	2b00      	cmp	r3, #0
   db2ca:	f000 840f 	beq.w	dbaec <_strtod_r+0xbac>
   db2ce:	2300      	movs	r3, #0
   db2d0:	930c      	str	r3, [sp, #48]	; 0x30
   db2d2:	f000 bc02 	b.w	dbada <_strtod_r+0xb9a>
   db2d6:	9b04      	ldr	r3, [sp, #16]
   db2d8:	9805      	ldr	r0, [sp, #20]
   db2da:	2b00      	cmp	r3, #0
   db2dc:	bf08      	it	eq
   db2de:	462b      	moveq	r3, r5
   db2e0:	2d10      	cmp	r5, #16
   db2e2:	462c      	mov	r4, r5
   db2e4:	ebc2 0909 	rsb	r9, r2, r9
   db2e8:	bfa8      	it	ge
   db2ea:	2410      	movge	r4, #16
   db2ec:	9304      	str	r3, [sp, #16]
   db2ee:	f7fe f85d 	bl	d93ac <__aeabi_ui2d>
   db2f2:	2c09      	cmp	r4, #9
   db2f4:	4682      	mov	sl, r0
   db2f6:	468b      	mov	fp, r1
   db2f8:	dd13      	ble.n	db322 <_strtod_r+0x3e2>
   db2fa:	4b86      	ldr	r3, [pc, #536]	; (db514 <_strtod_r+0x5d4>)
   db2fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   db300:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   db304:	f7fe f8c8 	bl	d9498 <__aeabi_dmul>
   db308:	4606      	mov	r6, r0
   db30a:	4640      	mov	r0, r8
   db30c:	460f      	mov	r7, r1
   db30e:	f7fe f84d 	bl	d93ac <__aeabi_ui2d>
   db312:	4602      	mov	r2, r0
   db314:	460b      	mov	r3, r1
   db316:	4630      	mov	r0, r6
   db318:	4639      	mov	r1, r7
   db31a:	f7fd ff0b 	bl	d9134 <__adddf3>
   db31e:	4682      	mov	sl, r0
   db320:	468b      	mov	fp, r1
   db322:	2d0f      	cmp	r5, #15
   db324:	dc36      	bgt.n	db394 <_strtod_r+0x454>
   db326:	f1b9 0f00 	cmp.w	r9, #0
   db32a:	f000 83d4 	beq.w	dbad6 <_strtod_r+0xb96>
   db32e:	dd24      	ble.n	db37a <_strtod_r+0x43a>
   db330:	f1b9 0f16 	cmp.w	r9, #22
   db334:	dc07      	bgt.n	db346 <_strtod_r+0x406>
   db336:	4d77      	ldr	r5, [pc, #476]	; (db514 <_strtod_r+0x5d4>)
   db338:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   db33c:	4652      	mov	r2, sl
   db33e:	465b      	mov	r3, fp
   db340:	e9d9 0100 	ldrd	r0, r1, [r9]
   db344:	e014      	b.n	db370 <_strtod_r+0x430>
   db346:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   db34a:	4599      	cmp	r9, r3
   db34c:	dc22      	bgt.n	db394 <_strtod_r+0x454>
   db34e:	4c71      	ldr	r4, [pc, #452]	; (db514 <_strtod_r+0x5d4>)
   db350:	f1c5 050f 	rsb	r5, r5, #15
   db354:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   db358:	ebc5 0509 	rsb	r5, r5, r9
   db35c:	4652      	mov	r2, sl
   db35e:	465b      	mov	r3, fp
   db360:	e9d1 0100 	ldrd	r0, r1, [r1]
   db364:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   db368:	f7fe f896 	bl	d9498 <__aeabi_dmul>
   db36c:	e9d4 2300 	ldrd	r2, r3, [r4]
   db370:	f7fe f892 	bl	d9498 <__aeabi_dmul>
   db374:	4682      	mov	sl, r0
   db376:	468b      	mov	fp, r1
   db378:	e3ad      	b.n	dbad6 <_strtod_r+0xb96>
   db37a:	f119 0f16 	cmn.w	r9, #22
   db37e:	db09      	blt.n	db394 <_strtod_r+0x454>
   db380:	4d64      	ldr	r5, [pc, #400]	; (db514 <_strtod_r+0x5d4>)
   db382:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   db386:	e9d9 2300 	ldrd	r2, r3, [r9]
   db38a:	4650      	mov	r0, sl
   db38c:	4659      	mov	r1, fp
   db38e:	f7fe f9ad 	bl	d96ec <__aeabi_ddiv>
   db392:	e7ef      	b.n	db374 <_strtod_r+0x434>
   db394:	1b2c      	subs	r4, r5, r4
   db396:	444c      	add	r4, r9
   db398:	2c00      	cmp	r4, #0
   db39a:	dd57      	ble.n	db44c <_strtod_r+0x50c>
   db39c:	f014 010f 	ands.w	r1, r4, #15
   db3a0:	d00a      	beq.n	db3b8 <_strtod_r+0x478>
   db3a2:	4b5c      	ldr	r3, [pc, #368]	; (db514 <_strtod_r+0x5d4>)
   db3a4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   db3a8:	4652      	mov	r2, sl
   db3aa:	465b      	mov	r3, fp
   db3ac:	e9d1 0100 	ldrd	r0, r1, [r1]
   db3b0:	f7fe f872 	bl	d9498 <__aeabi_dmul>
   db3b4:	4682      	mov	sl, r0
   db3b6:	468b      	mov	fp, r1
   db3b8:	f034 040f 	bics.w	r4, r4, #15
   db3bc:	f000 80b8 	beq.w	db530 <_strtod_r+0x5f0>
   db3c0:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   db3c4:	dd0b      	ble.n	db3de <_strtod_r+0x49e>
   db3c6:	2400      	movs	r4, #0
   db3c8:	4625      	mov	r5, r4
   db3ca:	9405      	str	r4, [sp, #20]
   db3cc:	9404      	str	r4, [sp, #16]
   db3ce:	9a02      	ldr	r2, [sp, #8]
   db3d0:	f8df b150 	ldr.w	fp, [pc, #336]	; db524 <_strtod_r+0x5e4>
   db3d4:	2322      	movs	r3, #34	; 0x22
   db3d6:	6013      	str	r3, [r2, #0]
   db3d8:	f04f 0a00 	mov.w	sl, #0
   db3dc:	e187      	b.n	db6ee <_strtod_r+0x7ae>
   db3de:	4e4e      	ldr	r6, [pc, #312]	; (db518 <_strtod_r+0x5d8>)
   db3e0:	2300      	movs	r3, #0
   db3e2:	1124      	asrs	r4, r4, #4
   db3e4:	4650      	mov	r0, sl
   db3e6:	4659      	mov	r1, fp
   db3e8:	4698      	mov	r8, r3
   db3ea:	4637      	mov	r7, r6
   db3ec:	2c01      	cmp	r4, #1
   db3ee:	dd0b      	ble.n	db408 <_strtod_r+0x4c8>
   db3f0:	07e2      	lsls	r2, r4, #31
   db3f2:	d504      	bpl.n	db3fe <_strtod_r+0x4be>
   db3f4:	e9d6 2300 	ldrd	r2, r3, [r6]
   db3f8:	f7fe f84e 	bl	d9498 <__aeabi_dmul>
   db3fc:	2301      	movs	r3, #1
   db3fe:	f108 0801 	add.w	r8, r8, #1
   db402:	1064      	asrs	r4, r4, #1
   db404:	3608      	adds	r6, #8
   db406:	e7f1      	b.n	db3ec <_strtod_r+0x4ac>
   db408:	b10b      	cbz	r3, db40e <_strtod_r+0x4ce>
   db40a:	4682      	mov	sl, r0
   db40c:	468b      	mov	fp, r1
   db40e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   db412:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   db416:	4652      	mov	r2, sl
   db418:	465b      	mov	r3, fp
   db41a:	e9d7 0100 	ldrd	r0, r1, [r7]
   db41e:	f7fe f83b 	bl	d9498 <__aeabi_dmul>
   db422:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db426:	468b      	mov	fp, r1
   db428:	460a      	mov	r2, r1
   db42a:	0d1b      	lsrs	r3, r3, #20
   db42c:	493b      	ldr	r1, [pc, #236]	; (db51c <_strtod_r+0x5dc>)
   db42e:	051b      	lsls	r3, r3, #20
   db430:	428b      	cmp	r3, r1
   db432:	4682      	mov	sl, r0
   db434:	d8c7      	bhi.n	db3c6 <_strtod_r+0x486>
   db436:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   db43a:	428b      	cmp	r3, r1
   db43c:	bf86      	itte	hi
   db43e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; db52c <_strtod_r+0x5ec>
   db442:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   db446:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   db44a:	e071      	b.n	db530 <_strtod_r+0x5f0>
   db44c:	d070      	beq.n	db530 <_strtod_r+0x5f0>
   db44e:	4264      	negs	r4, r4
   db450:	f014 020f 	ands.w	r2, r4, #15
   db454:	d00a      	beq.n	db46c <_strtod_r+0x52c>
   db456:	4b2f      	ldr	r3, [pc, #188]	; (db514 <_strtod_r+0x5d4>)
   db458:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   db45c:	4650      	mov	r0, sl
   db45e:	4659      	mov	r1, fp
   db460:	e9d3 2300 	ldrd	r2, r3, [r3]
   db464:	f7fe f942 	bl	d96ec <__aeabi_ddiv>
   db468:	4682      	mov	sl, r0
   db46a:	468b      	mov	fp, r1
   db46c:	1124      	asrs	r4, r4, #4
   db46e:	d05f      	beq.n	db530 <_strtod_r+0x5f0>
   db470:	2c1f      	cmp	r4, #31
   db472:	dd04      	ble.n	db47e <_strtod_r+0x53e>
   db474:	2400      	movs	r4, #0
   db476:	4625      	mov	r5, r4
   db478:	9405      	str	r4, [sp, #20]
   db47a:	9404      	str	r4, [sp, #16]
   db47c:	e130      	b.n	db6e0 <_strtod_r+0x7a0>
   db47e:	f014 0f10 	tst.w	r4, #16
   db482:	bf0c      	ite	eq
   db484:	2300      	moveq	r3, #0
   db486:	236a      	movne	r3, #106	; 0x6a
   db488:	4e25      	ldr	r6, [pc, #148]	; (db520 <_strtod_r+0x5e0>)
   db48a:	9303      	str	r3, [sp, #12]
   db48c:	4650      	mov	r0, sl
   db48e:	4659      	mov	r1, fp
   db490:	2300      	movs	r3, #0
   db492:	2c00      	cmp	r4, #0
   db494:	dd09      	ble.n	db4aa <_strtod_r+0x56a>
   db496:	07e2      	lsls	r2, r4, #31
   db498:	d504      	bpl.n	db4a4 <_strtod_r+0x564>
   db49a:	e9d6 2300 	ldrd	r2, r3, [r6]
   db49e:	f7fd fffb 	bl	d9498 <__aeabi_dmul>
   db4a2:	2301      	movs	r3, #1
   db4a4:	1064      	asrs	r4, r4, #1
   db4a6:	3608      	adds	r6, #8
   db4a8:	e7f3      	b.n	db492 <_strtod_r+0x552>
   db4aa:	b10b      	cbz	r3, db4b0 <_strtod_r+0x570>
   db4ac:	4682      	mov	sl, r0
   db4ae:	468b      	mov	fp, r1
   db4b0:	9b03      	ldr	r3, [sp, #12]
   db4b2:	b1eb      	cbz	r3, db4f0 <_strtod_r+0x5b0>
   db4b4:	f3cb 530a 	ubfx	r3, fp, #20, #11
   db4b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db4bc:	2b00      	cmp	r3, #0
   db4be:	4659      	mov	r1, fp
   db4c0:	dd16      	ble.n	db4f0 <_strtod_r+0x5b0>
   db4c2:	2b1f      	cmp	r3, #31
   db4c4:	dd0e      	ble.n	db4e4 <_strtod_r+0x5a4>
   db4c6:	2b34      	cmp	r3, #52	; 0x34
   db4c8:	bfde      	ittt	le
   db4ca:	3b20      	suble	r3, #32
   db4cc:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   db4d0:	fa02 f303 	lslle.w	r3, r2, r3
   db4d4:	f04f 0a00 	mov.w	sl, #0
   db4d8:	bfcc      	ite	gt
   db4da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   db4de:	ea03 0b01 	andle.w	fp, r3, r1
   db4e2:	e005      	b.n	db4f0 <_strtod_r+0x5b0>
   db4e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db4e8:	fa02 f303 	lsl.w	r3, r2, r3
   db4ec:	ea03 0a0a 	and.w	sl, r3, sl
   db4f0:	2200      	movs	r2, #0
   db4f2:	2300      	movs	r3, #0
   db4f4:	4650      	mov	r0, sl
   db4f6:	4659      	mov	r1, fp
   db4f8:	f7fe fa36 	bl	d9968 <__aeabi_dcmpeq>
   db4fc:	2800      	cmp	r0, #0
   db4fe:	d1b9      	bne.n	db474 <_strtod_r+0x534>
   db500:	e018      	b.n	db534 <_strtod_r+0x5f4>
   db502:	bf00      	nop
   db504:	000dddf8 	.word	0x000dddf8
   db508:	000dddfb 	.word	0x000dddfb
   db50c:	000dde39 	.word	0x000dde39
   db510:	000ddde4 	.word	0x000ddde4
   db514:	000de098 	.word	0x000de098
   db518:	000de160 	.word	0x000de160
   db51c:	7ca00000 	.word	0x7ca00000
   db520:	000dde08 	.word	0x000dde08
   db524:	7ff00000 	.word	0x7ff00000
   db528:	fff80000 	.word	0xfff80000
   db52c:	7fefffff 	.word	0x7fefffff
   db530:	2300      	movs	r3, #0
   db532:	9303      	str	r3, [sp, #12]
   db534:	9b05      	ldr	r3, [sp, #20]
   db536:	9300      	str	r3, [sp, #0]
   db538:	9a04      	ldr	r2, [sp, #16]
   db53a:	9907      	ldr	r1, [sp, #28]
   db53c:	9802      	ldr	r0, [sp, #8]
   db53e:	462b      	mov	r3, r5
   db540:	f001 fa7f 	bl	dca42 <__s2b>
   db544:	9005      	str	r0, [sp, #20]
   db546:	2800      	cmp	r0, #0
   db548:	f43f af3d 	beq.w	db3c6 <_strtod_r+0x486>
   db54c:	f1b9 0f00 	cmp.w	r9, #0
   db550:	f1c9 0300 	rsb	r3, r9, #0
   db554:	bfa8      	it	ge
   db556:	2300      	movge	r3, #0
   db558:	930d      	str	r3, [sp, #52]	; 0x34
   db55a:	2400      	movs	r4, #0
   db55c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   db560:	9312      	str	r3, [sp, #72]	; 0x48
   db562:	4625      	mov	r5, r4
   db564:	9b05      	ldr	r3, [sp, #20]
   db566:	9802      	ldr	r0, [sp, #8]
   db568:	6859      	ldr	r1, [r3, #4]
   db56a:	f001 f9e3 	bl	dc934 <_Balloc>
   db56e:	9004      	str	r0, [sp, #16]
   db570:	2800      	cmp	r0, #0
   db572:	f43f af2c 	beq.w	db3ce <_strtod_r+0x48e>
   db576:	9b05      	ldr	r3, [sp, #20]
   db578:	691a      	ldr	r2, [r3, #16]
   db57a:	3202      	adds	r2, #2
   db57c:	f103 010c 	add.w	r1, r3, #12
   db580:	0092      	lsls	r2, r2, #2
   db582:	300c      	adds	r0, #12
   db584:	f7fe fcc4 	bl	d9f10 <memcpy>
   db588:	aa1a      	add	r2, sp, #104	; 0x68
   db58a:	a919      	add	r1, sp, #100	; 0x64
   db58c:	ec4b ab10 	vmov	d0, sl, fp
   db590:	9802      	ldr	r0, [sp, #8]
   db592:	e9cd ab08 	strd	sl, fp, [sp, #32]
   db596:	f001 fd08 	bl	dcfaa <__d2b>
   db59a:	9018      	str	r0, [sp, #96]	; 0x60
   db59c:	2800      	cmp	r0, #0
   db59e:	f43f af16 	beq.w	db3ce <_strtod_r+0x48e>
   db5a2:	2101      	movs	r1, #1
   db5a4:	9802      	ldr	r0, [sp, #8]
   db5a6:	f001 fad7 	bl	dcb58 <__i2b>
   db5aa:	4605      	mov	r5, r0
   db5ac:	2800      	cmp	r0, #0
   db5ae:	f43f af0e 	beq.w	db3ce <_strtod_r+0x48e>
   db5b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   db5b4:	9903      	ldr	r1, [sp, #12]
   db5b6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   db5b8:	2b00      	cmp	r3, #0
   db5ba:	bfad      	iteet	ge
   db5bc:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   db5be:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   db5c0:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   db5c4:	eb02 0803 	addge.w	r8, r2, r3
   db5c8:	bfb8      	it	lt
   db5ca:	1ad2      	sublt	r2, r2, r3
   db5cc:	eba3 0301 	sub.w	r3, r3, r1
   db5d0:	4433      	add	r3, r6
   db5d2:	49b5      	ldr	r1, [pc, #724]	; (db8a8 <_strtod_r+0x968>)
   db5d4:	bfa8      	it	ge
   db5d6:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   db5d8:	3b01      	subs	r3, #1
   db5da:	428b      	cmp	r3, r1
   db5dc:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   db5e0:	f280 808a 	bge.w	db6f8 <_strtod_r+0x7b8>
   db5e4:	1ac9      	subs	r1, r1, r3
   db5e6:	291f      	cmp	r1, #31
   db5e8:	bfc8      	it	gt
   db5ea:	4fb0      	ldrgt	r7, [pc, #704]	; (db8ac <_strtod_r+0x96c>)
   db5ec:	f04f 0901 	mov.w	r9, #1
   db5f0:	bfd4      	ite	le
   db5f2:	fa09 f301 	lslle.w	r3, r9, r1
   db5f6:	1aff      	subgt	r7, r7, r3
   db5f8:	eba6 0601 	sub.w	r6, r6, r1
   db5fc:	bfd9      	ittee	le
   db5fe:	9306      	strle	r3, [sp, #24]
   db600:	2700      	movle	r7, #0
   db602:	fa09 f707 	lslgt.w	r7, r9, r7
   db606:	f8cd 9018 	strgt.w	r9, [sp, #24]
   db60a:	eb08 0906 	add.w	r9, r8, r6
   db60e:	9b03      	ldr	r3, [sp, #12]
   db610:	45c8      	cmp	r8, r9
   db612:	4416      	add	r6, r2
   db614:	441e      	add	r6, r3
   db616:	4643      	mov	r3, r8
   db618:	bfa8      	it	ge
   db61a:	464b      	movge	r3, r9
   db61c:	42b3      	cmp	r3, r6
   db61e:	bfa8      	it	ge
   db620:	4633      	movge	r3, r6
   db622:	2b00      	cmp	r3, #0
   db624:	bfc2      	ittt	gt
   db626:	ebc3 0909 	rsbgt	r9, r3, r9
   db62a:	1af6      	subgt	r6, r6, r3
   db62c:	ebc3 0808 	rsbgt	r8, r3, r8
   db630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   db632:	2b00      	cmp	r3, #0
   db634:	d164      	bne.n	db700 <_strtod_r+0x7c0>
   db636:	f1b9 0f00 	cmp.w	r9, #0
   db63a:	dc7a      	bgt.n	db732 <_strtod_r+0x7f2>
   db63c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   db63e:	2b00      	cmp	r3, #0
   db640:	f040 8081 	bne.w	db746 <_strtod_r+0x806>
   db644:	2e00      	cmp	r6, #0
   db646:	f300 8088 	bgt.w	db75a <_strtod_r+0x81a>
   db64a:	f1b8 0f00 	cmp.w	r8, #0
   db64e:	f300 808e 	bgt.w	db76e <_strtod_r+0x82e>
   db652:	9a04      	ldr	r2, [sp, #16]
   db654:	9918      	ldr	r1, [sp, #96]	; 0x60
   db656:	9802      	ldr	r0, [sp, #8]
   db658:	f001 fbd3 	bl	dce02 <__mdiff>
   db65c:	4604      	mov	r4, r0
   db65e:	2800      	cmp	r0, #0
   db660:	f43f aeb5 	beq.w	db3ce <_strtod_r+0x48e>
   db664:	68c3      	ldr	r3, [r0, #12]
   db666:	9307      	str	r3, [sp, #28]
   db668:	2300      	movs	r3, #0
   db66a:	60c3      	str	r3, [r0, #12]
   db66c:	4629      	mov	r1, r5
   db66e:	f001 fbac 	bl	dcdca <__mcmp>
   db672:	2800      	cmp	r0, #0
   db674:	f280 8089 	bge.w	db78a <_strtod_r+0x84a>
   db678:	9b07      	ldr	r3, [sp, #28]
   db67a:	2b00      	cmp	r3, #0
   db67c:	f040 8204 	bne.w	dba88 <_strtod_r+0xb48>
   db680:	f1ba 0f00 	cmp.w	sl, #0
   db684:	f040 8200 	bne.w	dba88 <_strtod_r+0xb48>
   db688:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db68c:	2b00      	cmp	r3, #0
   db68e:	f040 81fb 	bne.w	dba88 <_strtod_r+0xb48>
   db692:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db696:	0d1b      	lsrs	r3, r3, #20
   db698:	051b      	lsls	r3, r3, #20
   db69a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db69e:	f240 81f3 	bls.w	dba88 <_strtod_r+0xb48>
   db6a2:	6963      	ldr	r3, [r4, #20]
   db6a4:	2b00      	cmp	r3, #0
   db6a6:	d06c      	beq.n	db782 <_strtod_r+0x842>
   db6a8:	4621      	mov	r1, r4
   db6aa:	2201      	movs	r2, #1
   db6ac:	9802      	ldr	r0, [sp, #8]
   db6ae:	f001 fb3b 	bl	dcd28 <__lshift>
   db6b2:	4629      	mov	r1, r5
   db6b4:	4604      	mov	r4, r0
   db6b6:	f001 fb88 	bl	dcdca <__mcmp>
   db6ba:	2800      	cmp	r0, #0
   db6bc:	f340 81e4 	ble.w	dba88 <_strtod_r+0xb48>
   db6c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db6c4:	9a03      	ldr	r2, [sp, #12]
   db6c6:	0d1b      	lsrs	r3, r3, #20
   db6c8:	051b      	lsls	r3, r3, #20
   db6ca:	2a00      	cmp	r2, #0
   db6cc:	f000 808c 	beq.w	db7e8 <_strtod_r+0x8a8>
   db6d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db6d4:	f300 8088 	bgt.w	db7e8 <_strtod_r+0x8a8>
   db6d8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   db6dc:	f300 81d6 	bgt.w	dba8c <_strtod_r+0xb4c>
   db6e0:	9a02      	ldr	r2, [sp, #8]
   db6e2:	2322      	movs	r3, #34	; 0x22
   db6e4:	f04f 0a00 	mov.w	sl, #0
   db6e8:	f04f 0b00 	mov.w	fp, #0
   db6ec:	6013      	str	r3, [r2, #0]
   db6ee:	9b05      	ldr	r3, [sp, #20]
   db6f0:	2b00      	cmp	r3, #0
   db6f2:	f040 81dc 	bne.w	dbaae <_strtod_r+0xb6e>
   db6f6:	e1ee      	b.n	dbad6 <_strtod_r+0xb96>
   db6f8:	2301      	movs	r3, #1
   db6fa:	2700      	movs	r7, #0
   db6fc:	9306      	str	r3, [sp, #24]
   db6fe:	e784      	b.n	db60a <_strtod_r+0x6ca>
   db700:	4629      	mov	r1, r5
   db702:	461a      	mov	r2, r3
   db704:	9802      	ldr	r0, [sp, #8]
   db706:	f001 fac1 	bl	dcc8c <__pow5mult>
   db70a:	4605      	mov	r5, r0
   db70c:	2800      	cmp	r0, #0
   db70e:	f43f ae5e 	beq.w	db3ce <_strtod_r+0x48e>
   db712:	4601      	mov	r1, r0
   db714:	9a18      	ldr	r2, [sp, #96]	; 0x60
   db716:	9802      	ldr	r0, [sp, #8]
   db718:	f001 fa27 	bl	dcb6a <__multiply>
   db71c:	9007      	str	r0, [sp, #28]
   db71e:	2800      	cmp	r0, #0
   db720:	f43f ae55 	beq.w	db3ce <_strtod_r+0x48e>
   db724:	9918      	ldr	r1, [sp, #96]	; 0x60
   db726:	9802      	ldr	r0, [sp, #8]
   db728:	f001 f939 	bl	dc99e <_Bfree>
   db72c:	9b07      	ldr	r3, [sp, #28]
   db72e:	9318      	str	r3, [sp, #96]	; 0x60
   db730:	e781      	b.n	db636 <_strtod_r+0x6f6>
   db732:	464a      	mov	r2, r9
   db734:	9918      	ldr	r1, [sp, #96]	; 0x60
   db736:	9802      	ldr	r0, [sp, #8]
   db738:	f001 faf6 	bl	dcd28 <__lshift>
   db73c:	9018      	str	r0, [sp, #96]	; 0x60
   db73e:	2800      	cmp	r0, #0
   db740:	f47f af7c 	bne.w	db63c <_strtod_r+0x6fc>
   db744:	e643      	b.n	db3ce <_strtod_r+0x48e>
   db746:	9a12      	ldr	r2, [sp, #72]	; 0x48
   db748:	9904      	ldr	r1, [sp, #16]
   db74a:	9802      	ldr	r0, [sp, #8]
   db74c:	f001 fa9e 	bl	dcc8c <__pow5mult>
   db750:	9004      	str	r0, [sp, #16]
   db752:	2800      	cmp	r0, #0
   db754:	f47f af76 	bne.w	db644 <_strtod_r+0x704>
   db758:	e639      	b.n	db3ce <_strtod_r+0x48e>
   db75a:	4632      	mov	r2, r6
   db75c:	9904      	ldr	r1, [sp, #16]
   db75e:	9802      	ldr	r0, [sp, #8]
   db760:	f001 fae2 	bl	dcd28 <__lshift>
   db764:	9004      	str	r0, [sp, #16]
   db766:	2800      	cmp	r0, #0
   db768:	f47f af6f 	bne.w	db64a <_strtod_r+0x70a>
   db76c:	e62f      	b.n	db3ce <_strtod_r+0x48e>
   db76e:	4629      	mov	r1, r5
   db770:	4642      	mov	r2, r8
   db772:	9802      	ldr	r0, [sp, #8]
   db774:	f001 fad8 	bl	dcd28 <__lshift>
   db778:	4605      	mov	r5, r0
   db77a:	2800      	cmp	r0, #0
   db77c:	f47f af69 	bne.w	db652 <_strtod_r+0x712>
   db780:	e625      	b.n	db3ce <_strtod_r+0x48e>
   db782:	6923      	ldr	r3, [r4, #16]
   db784:	2b01      	cmp	r3, #1
   db786:	dc8f      	bgt.n	db6a8 <_strtod_r+0x768>
   db788:	e17e      	b.n	dba88 <_strtod_r+0xb48>
   db78a:	d161      	bne.n	db850 <_strtod_r+0x910>
   db78c:	9a07      	ldr	r2, [sp, #28]
   db78e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db792:	b322      	cbz	r2, db7de <_strtod_r+0x89e>
   db794:	4946      	ldr	r1, [pc, #280]	; (db8b0 <_strtod_r+0x970>)
   db796:	428b      	cmp	r3, r1
   db798:	465a      	mov	r2, fp
   db79a:	d12e      	bne.n	db7fa <_strtod_r+0x8ba>
   db79c:	9b03      	ldr	r3, [sp, #12]
   db79e:	4651      	mov	r1, sl
   db7a0:	b163      	cbz	r3, db7bc <_strtod_r+0x87c>
   db7a2:	4b44      	ldr	r3, [pc, #272]	; (db8b4 <_strtod_r+0x974>)
   db7a4:	4013      	ands	r3, r2
   db7a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   db7aa:	d807      	bhi.n	db7bc <_strtod_r+0x87c>
   db7ac:	0d1b      	lsrs	r3, r3, #20
   db7ae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db7b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db7b6:	fa00 f303 	lsl.w	r3, r0, r3
   db7ba:	e001      	b.n	db7c0 <_strtod_r+0x880>
   db7bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db7c0:	428b      	cmp	r3, r1
   db7c2:	d11a      	bne.n	db7fa <_strtod_r+0x8ba>
   db7c4:	493c      	ldr	r1, [pc, #240]	; (db8b8 <_strtod_r+0x978>)
   db7c6:	428a      	cmp	r2, r1
   db7c8:	d102      	bne.n	db7d0 <_strtod_r+0x890>
   db7ca:	3301      	adds	r3, #1
   db7cc:	f43f adff 	beq.w	db3ce <_strtod_r+0x48e>
   db7d0:	4b38      	ldr	r3, [pc, #224]	; (db8b4 <_strtod_r+0x974>)
   db7d2:	4013      	ands	r3, r2
   db7d4:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   db7d8:	f04f 0a00 	mov.w	sl, #0
   db7dc:	e154      	b.n	dba88 <_strtod_r+0xb48>
   db7de:	b963      	cbnz	r3, db7fa <_strtod_r+0x8ba>
   db7e0:	f1ba 0f00 	cmp.w	sl, #0
   db7e4:	d109      	bne.n	db7fa <_strtod_r+0x8ba>
   db7e6:	e76b      	b.n	db6c0 <_strtod_r+0x780>
   db7e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   db7ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   db7f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   db7f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db7f8:	e146      	b.n	dba88 <_strtod_r+0xb48>
   db7fa:	b117      	cbz	r7, db802 <_strtod_r+0x8c2>
   db7fc:	ea17 0f0b 	tst.w	r7, fp
   db800:	e002      	b.n	db808 <_strtod_r+0x8c8>
   db802:	9b06      	ldr	r3, [sp, #24]
   db804:	ea13 0f0a 	tst.w	r3, sl
   db808:	f000 813e 	beq.w	dba88 <_strtod_r+0xb48>
   db80c:	9b07      	ldr	r3, [sp, #28]
   db80e:	9a03      	ldr	r2, [sp, #12]
   db810:	4650      	mov	r0, sl
   db812:	4659      	mov	r1, fp
   db814:	b153      	cbz	r3, db82c <_strtod_r+0x8ec>
   db816:	f7ff fb77 	bl	daf08 <sulp>
   db81a:	4602      	mov	r2, r0
   db81c:	460b      	mov	r3, r1
   db81e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   db822:	f7fd fc87 	bl	d9134 <__adddf3>
   db826:	4682      	mov	sl, r0
   db828:	468b      	mov	fp, r1
   db82a:	e12d      	b.n	dba88 <_strtod_r+0xb48>
   db82c:	f7ff fb6c 	bl	daf08 <sulp>
   db830:	4602      	mov	r2, r0
   db832:	460b      	mov	r3, r1
   db834:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   db838:	f7fd fc7a 	bl	d9130 <__aeabi_dsub>
   db83c:	2200      	movs	r2, #0
   db83e:	2300      	movs	r3, #0
   db840:	4682      	mov	sl, r0
   db842:	468b      	mov	fp, r1
   db844:	f7fe f890 	bl	d9968 <__aeabi_dcmpeq>
   db848:	2800      	cmp	r0, #0
   db84a:	f47f af49 	bne.w	db6e0 <_strtod_r+0x7a0>
   db84e:	e11b      	b.n	dba88 <_strtod_r+0xb48>
   db850:	4629      	mov	r1, r5
   db852:	4620      	mov	r0, r4
   db854:	f001 fbf7 	bl	dd046 <__ratio>
   db858:	ec57 6b10 	vmov	r6, r7, d0
   db85c:	2200      	movs	r2, #0
   db85e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   db862:	ee10 0a10 	vmov	r0, s0
   db866:	4639      	mov	r1, r7
   db868:	f7fe f892 	bl	d9990 <__aeabi_dcmple>
   db86c:	2800      	cmp	r0, #0
   db86e:	d042      	beq.n	db8f6 <_strtod_r+0x9b6>
   db870:	9b07      	ldr	r3, [sp, #28]
   db872:	b123      	cbz	r3, db87e <_strtod_r+0x93e>
   db874:	f04f 0800 	mov.w	r8, #0
   db878:	f8df 9040 	ldr.w	r9, [pc, #64]	; db8bc <_strtod_r+0x97c>
   db87c:	e011      	b.n	db8a2 <_strtod_r+0x962>
   db87e:	f1ba 0f00 	cmp.w	sl, #0
   db882:	d103      	bne.n	db88c <_strtod_r+0x94c>
   db884:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db888:	b93b      	cbnz	r3, db89a <_strtod_r+0x95a>
   db88a:	e01b      	b.n	db8c4 <_strtod_r+0x984>
   db88c:	f1ba 0f01 	cmp.w	sl, #1
   db890:	d103      	bne.n	db89a <_strtod_r+0x95a>
   db892:	f1bb 0f00 	cmp.w	fp, #0
   db896:	f43f af23 	beq.w	db6e0 <_strtod_r+0x7a0>
   db89a:	f8df 9024 	ldr.w	r9, [pc, #36]	; db8c0 <_strtod_r+0x980>
   db89e:	f04f 0800 	mov.w	r8, #0
   db8a2:	2600      	movs	r6, #0
   db8a4:	4f05      	ldr	r7, [pc, #20]	; (db8bc <_strtod_r+0x97c>)
   db8a6:	e039      	b.n	db91c <_strtod_r+0x9dc>
   db8a8:	fffffc02 	.word	0xfffffc02
   db8ac:	fffffbe2 	.word	0xfffffbe2
   db8b0:	000fffff 	.word	0x000fffff
   db8b4:	7ff00000 	.word	0x7ff00000
   db8b8:	7fefffff 	.word	0x7fefffff
   db8bc:	3ff00000 	.word	0x3ff00000
   db8c0:	bff00000 	.word	0xbff00000
   db8c4:	2200      	movs	r2, #0
   db8c6:	4b98      	ldr	r3, [pc, #608]	; (dbb28 <_strtod_r+0xbe8>)
   db8c8:	4630      	mov	r0, r6
   db8ca:	4639      	mov	r1, r7
   db8cc:	f7fe f856 	bl	d997c <__aeabi_dcmplt>
   db8d0:	b940      	cbnz	r0, db8e4 <_strtod_r+0x9a4>
   db8d2:	4630      	mov	r0, r6
   db8d4:	4639      	mov	r1, r7
   db8d6:	2200      	movs	r2, #0
   db8d8:	4b94      	ldr	r3, [pc, #592]	; (dbb2c <_strtod_r+0xbec>)
   db8da:	f7fd fddd 	bl	d9498 <__aeabi_dmul>
   db8de:	4606      	mov	r6, r0
   db8e0:	460f      	mov	r7, r1
   db8e2:	e001      	b.n	db8e8 <_strtod_r+0x9a8>
   db8e4:	4f91      	ldr	r7, [pc, #580]	; (dbb2c <_strtod_r+0xbec>)
   db8e6:	2600      	movs	r6, #0
   db8e8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   db8ec:	9614      	str	r6, [sp, #80]	; 0x50
   db8ee:	9315      	str	r3, [sp, #84]	; 0x54
   db8f0:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   db8f4:	e012      	b.n	db91c <_strtod_r+0x9dc>
   db8f6:	4b8d      	ldr	r3, [pc, #564]	; (dbb2c <_strtod_r+0xbec>)
   db8f8:	4630      	mov	r0, r6
   db8fa:	4639      	mov	r1, r7
   db8fc:	2200      	movs	r2, #0
   db8fe:	f7fd fdcb 	bl	d9498 <__aeabi_dmul>
   db902:	9b07      	ldr	r3, [sp, #28]
   db904:	4606      	mov	r6, r0
   db906:	460f      	mov	r7, r1
   db908:	b923      	cbnz	r3, db914 <_strtod_r+0x9d4>
   db90a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db90e:	900e      	str	r0, [sp, #56]	; 0x38
   db910:	930f      	str	r3, [sp, #60]	; 0x3c
   db912:	e001      	b.n	db918 <_strtod_r+0x9d8>
   db914:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   db918:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   db91c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db920:	0d1b      	lsrs	r3, r3, #20
   db922:	051b      	lsls	r3, r3, #20
   db924:	9306      	str	r3, [sp, #24]
   db926:	9a06      	ldr	r2, [sp, #24]
   db928:	4b81      	ldr	r3, [pc, #516]	; (dbb30 <_strtod_r+0xbf0>)
   db92a:	429a      	cmp	r2, r3
   db92c:	d12b      	bne.n	db986 <_strtod_r+0xa46>
   db92e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   db932:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   db936:	ec4b ab10 	vmov	d0, sl, fp
   db93a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   db93e:	f001 fabf 	bl	dcec0 <__ulp>
   db942:	4640      	mov	r0, r8
   db944:	ec53 2b10 	vmov	r2, r3, d0
   db948:	4649      	mov	r1, r9
   db94a:	f7fd fda5 	bl	d9498 <__aeabi_dmul>
   db94e:	4652      	mov	r2, sl
   db950:	465b      	mov	r3, fp
   db952:	f7fd fbef 	bl	d9134 <__adddf3>
   db956:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db95a:	0d1b      	lsrs	r3, r3, #20
   db95c:	4a75      	ldr	r2, [pc, #468]	; (dbb34 <_strtod_r+0xbf4>)
   db95e:	051b      	lsls	r3, r3, #20
   db960:	4293      	cmp	r3, r2
   db962:	4682      	mov	sl, r0
   db964:	d90c      	bls.n	db980 <_strtod_r+0xa40>
   db966:	4b74      	ldr	r3, [pc, #464]	; (dbb38 <_strtod_r+0xbf8>)
   db968:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   db96a:	429a      	cmp	r2, r3
   db96c:	d103      	bne.n	db976 <_strtod_r+0xa36>
   db96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db970:	3301      	adds	r3, #1
   db972:	f43f ad2c 	beq.w	db3ce <_strtod_r+0x48e>
   db976:	f8df b1c0 	ldr.w	fp, [pc, #448]	; dbb38 <_strtod_r+0xbf8>
   db97a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db97e:	e072      	b.n	dba66 <_strtod_r+0xb26>
   db980:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   db984:	e038      	b.n	db9f8 <_strtod_r+0xab8>
   db986:	9b03      	ldr	r3, [sp, #12]
   db988:	b333      	cbz	r3, db9d8 <_strtod_r+0xa98>
   db98a:	9b06      	ldr	r3, [sp, #24]
   db98c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   db990:	d822      	bhi.n	db9d8 <_strtod_r+0xa98>
   db992:	a35d      	add	r3, pc, #372	; (adr r3, dbb08 <_strtod_r+0xbc8>)
   db994:	e9d3 2300 	ldrd	r2, r3, [r3]
   db998:	4630      	mov	r0, r6
   db99a:	4639      	mov	r1, r7
   db99c:	f7fd fff8 	bl	d9990 <__aeabi_dcmple>
   db9a0:	b1a8      	cbz	r0, db9ce <_strtod_r+0xa8e>
   db9a2:	4639      	mov	r1, r7
   db9a4:	4630      	mov	r0, r6
   db9a6:	f7fe f84f 	bl	d9a48 <__aeabi_d2uiz>
   db9aa:	2800      	cmp	r0, #0
   db9ac:	bf08      	it	eq
   db9ae:	2001      	moveq	r0, #1
   db9b0:	f7fd fcfc 	bl	d93ac <__aeabi_ui2d>
   db9b4:	9b07      	ldr	r3, [sp, #28]
   db9b6:	4606      	mov	r6, r0
   db9b8:	460f      	mov	r7, r1
   db9ba:	b923      	cbnz	r3, db9c6 <_strtod_r+0xa86>
   db9bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db9c0:	9010      	str	r0, [sp, #64]	; 0x40
   db9c2:	9311      	str	r3, [sp, #68]	; 0x44
   db9c4:	e001      	b.n	db9ca <_strtod_r+0xa8a>
   db9c6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   db9ca:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   db9ce:	9a06      	ldr	r2, [sp, #24]
   db9d0:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   db9d4:	ebc2 0903 	rsb	r9, r2, r3
   db9d8:	ed9d 0b08 	vldr	d0, [sp, #32]
   db9dc:	f001 fa70 	bl	dcec0 <__ulp>
   db9e0:	4640      	mov	r0, r8
   db9e2:	ec53 2b10 	vmov	r2, r3, d0
   db9e6:	4649      	mov	r1, r9
   db9e8:	f7fd fd56 	bl	d9498 <__aeabi_dmul>
   db9ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   db9f0:	f7fd fba0 	bl	d9134 <__adddf3>
   db9f4:	4682      	mov	sl, r0
   db9f6:	468b      	mov	fp, r1
   db9f8:	9b03      	ldr	r3, [sp, #12]
   db9fa:	bba3      	cbnz	r3, dba66 <_strtod_r+0xb26>
   db9fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dba00:	0d1b      	lsrs	r3, r3, #20
   dba02:	9a06      	ldr	r2, [sp, #24]
   dba04:	051b      	lsls	r3, r3, #20
   dba06:	429a      	cmp	r2, r3
   dba08:	46d8      	mov	r8, fp
   dba0a:	d12c      	bne.n	dba66 <_strtod_r+0xb26>
   dba0c:	4639      	mov	r1, r7
   dba0e:	4630      	mov	r0, r6
   dba10:	f7fd fff2 	bl	d99f8 <__aeabi_d2iz>
   dba14:	f7fd fcda 	bl	d93cc <__aeabi_i2d>
   dba18:	460b      	mov	r3, r1
   dba1a:	4602      	mov	r2, r0
   dba1c:	4639      	mov	r1, r7
   dba1e:	4630      	mov	r0, r6
   dba20:	f7fd fb86 	bl	d9130 <__aeabi_dsub>
   dba24:	9b07      	ldr	r3, [sp, #28]
   dba26:	4606      	mov	r6, r0
   dba28:	460f      	mov	r7, r1
   dba2a:	b92b      	cbnz	r3, dba38 <_strtod_r+0xaf8>
   dba2c:	f1ba 0f00 	cmp.w	sl, #0
   dba30:	d102      	bne.n	dba38 <_strtod_r+0xaf8>
   dba32:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dba36:	b183      	cbz	r3, dba5a <_strtod_r+0xb1a>
   dba38:	a335      	add	r3, pc, #212	; (adr r3, dbb10 <_strtod_r+0xbd0>)
   dba3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dba3e:	4630      	mov	r0, r6
   dba40:	4639      	mov	r1, r7
   dba42:	f7fd ff9b 	bl	d997c <__aeabi_dcmplt>
   dba46:	2800      	cmp	r0, #0
   dba48:	d131      	bne.n	dbaae <_strtod_r+0xb6e>
   dba4a:	a333      	add	r3, pc, #204	; (adr r3, dbb18 <_strtod_r+0xbd8>)
   dba4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dba50:	4630      	mov	r0, r6
   dba52:	4639      	mov	r1, r7
   dba54:	f7fd ffb0 	bl	d99b8 <__aeabi_dcmpgt>
   dba58:	e004      	b.n	dba64 <_strtod_r+0xb24>
   dba5a:	a331      	add	r3, pc, #196	; (adr r3, dbb20 <_strtod_r+0xbe0>)
   dba5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dba60:	f7fd ff8c 	bl	d997c <__aeabi_dcmplt>
   dba64:	bb18      	cbnz	r0, dbaae <_strtod_r+0xb6e>
   dba66:	9918      	ldr	r1, [sp, #96]	; 0x60
   dba68:	9802      	ldr	r0, [sp, #8]
   dba6a:	f000 ff98 	bl	dc99e <_Bfree>
   dba6e:	9904      	ldr	r1, [sp, #16]
   dba70:	9802      	ldr	r0, [sp, #8]
   dba72:	f000 ff94 	bl	dc99e <_Bfree>
   dba76:	4629      	mov	r1, r5
   dba78:	9802      	ldr	r0, [sp, #8]
   dba7a:	f000 ff90 	bl	dc99e <_Bfree>
   dba7e:	4621      	mov	r1, r4
   dba80:	9802      	ldr	r0, [sp, #8]
   dba82:	f000 ff8c 	bl	dc99e <_Bfree>
   dba86:	e56d      	b.n	db564 <_strtod_r+0x624>
   dba88:	9b03      	ldr	r3, [sp, #12]
   dba8a:	b183      	cbz	r3, dbaae <_strtod_r+0xb6e>
   dba8c:	4b2b      	ldr	r3, [pc, #172]	; (dbb3c <_strtod_r+0xbfc>)
   dba8e:	930b      	str	r3, [sp, #44]	; 0x2c
   dba90:	2300      	movs	r3, #0
   dba92:	930a      	str	r3, [sp, #40]	; 0x28
   dba94:	4650      	mov	r0, sl
   dba96:	4659      	mov	r1, fp
   dba98:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dba9c:	f7fd fcfc 	bl	d9498 <__aeabi_dmul>
   dbaa0:	4682      	mov	sl, r0
   dbaa2:	468b      	mov	fp, r1
   dbaa4:	b919      	cbnz	r1, dbaae <_strtod_r+0xb6e>
   dbaa6:	b910      	cbnz	r0, dbaae <_strtod_r+0xb6e>
   dbaa8:	9a02      	ldr	r2, [sp, #8]
   dbaaa:	2322      	movs	r3, #34	; 0x22
   dbaac:	6013      	str	r3, [r2, #0]
   dbaae:	9918      	ldr	r1, [sp, #96]	; 0x60
   dbab0:	9802      	ldr	r0, [sp, #8]
   dbab2:	f000 ff74 	bl	dc99e <_Bfree>
   dbab6:	9904      	ldr	r1, [sp, #16]
   dbab8:	9802      	ldr	r0, [sp, #8]
   dbaba:	f000 ff70 	bl	dc99e <_Bfree>
   dbabe:	4629      	mov	r1, r5
   dbac0:	9802      	ldr	r0, [sp, #8]
   dbac2:	f000 ff6c 	bl	dc99e <_Bfree>
   dbac6:	9905      	ldr	r1, [sp, #20]
   dbac8:	9802      	ldr	r0, [sp, #8]
   dbaca:	f000 ff68 	bl	dc99e <_Bfree>
   dbace:	4621      	mov	r1, r4
   dbad0:	9802      	ldr	r0, [sp, #8]
   dbad2:	f000 ff64 	bl	dc99e <_Bfree>
   dbad6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   dbad8:	b113      	cbz	r3, dbae0 <_strtod_r+0xba0>
   dbada:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   dbadc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dbade:	6013      	str	r3, [r2, #0]
   dbae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dbae2:	b11b      	cbz	r3, dbaec <_strtod_r+0xbac>
   dbae4:	4652      	mov	r2, sl
   dbae6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   dbaea:	e007      	b.n	dbafc <_strtod_r+0xbbc>
   dbaec:	4652      	mov	r2, sl
   dbaee:	465b      	mov	r3, fp
   dbaf0:	e004      	b.n	dbafc <_strtod_r+0xbbc>
   dbaf2:	2500      	movs	r5, #0
   dbaf4:	462a      	mov	r2, r5
   dbaf6:	2101      	movs	r1, #1
   dbaf8:	f7ff bb41 	b.w	db17e <_strtod_r+0x23e>
   dbafc:	ec43 2b10 	vmov	d0, r2, r3
   dbb00:	b01d      	add	sp, #116	; 0x74
   dbb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbb06:	bf00      	nop
   dbb08:	ffc00000 	.word	0xffc00000
   dbb0c:	41dfffff 	.word	0x41dfffff
   dbb10:	94a03595 	.word	0x94a03595
   dbb14:	3fdfffff 	.word	0x3fdfffff
   dbb18:	35afe535 	.word	0x35afe535
   dbb1c:	3fe00000 	.word	0x3fe00000
   dbb20:	94a03595 	.word	0x94a03595
   dbb24:	3fcfffff 	.word	0x3fcfffff
   dbb28:	3ff00000 	.word	0x3ff00000
   dbb2c:	3fe00000 	.word	0x3fe00000
   dbb30:	7fe00000 	.word	0x7fe00000
   dbb34:	7c9fffff 	.word	0x7c9fffff
   dbb38:	7fefffff 	.word	0x7fefffff
   dbb3c:	39500000 	.word	0x39500000

000dbb40 <strtof>:
   dbb40:	b538      	push	{r3, r4, r5, lr}
   dbb42:	4b0e      	ldr	r3, [pc, #56]	; (dbb7c <strtof+0x3c>)
   dbb44:	460a      	mov	r2, r1
   dbb46:	4601      	mov	r1, r0
   dbb48:	6818      	ldr	r0, [r3, #0]
   dbb4a:	f7ff f9f9 	bl	daf40 <_strtod_r>
   dbb4e:	ec55 4b10 	vmov	r4, r5, d0
   dbb52:	ee10 2a10 	vmov	r2, s0
   dbb56:	462b      	mov	r3, r5
   dbb58:	ee10 0a10 	vmov	r0, s0
   dbb5c:	4629      	mov	r1, r5
   dbb5e:	f7fd ff35 	bl	d99cc <__aeabi_dcmpun>
   dbb62:	b120      	cbz	r0, dbb6e <strtof+0x2e>
   dbb64:	2000      	movs	r0, #0
   dbb66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dbb6a:	f001 bae1 	b.w	dd130 <nanf>
   dbb6e:	4620      	mov	r0, r4
   dbb70:	4629      	mov	r1, r5
   dbb72:	f7fd ff89 	bl	d9a88 <__aeabi_d2f>
   dbb76:	ee00 0a10 	vmov	s0, r0
   dbb7a:	bd38      	pop	{r3, r4, r5, pc}
   dbb7c:	2003dfdc 	.word	0x2003dfdc

000dbb80 <_strtol_r>:
   dbb80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbb84:	4680      	mov	r8, r0
   dbb86:	4840      	ldr	r0, [pc, #256]	; (dbc88 <_strtol_r+0x108>)
   dbb88:	f8d0 9000 	ldr.w	r9, [r0]
   dbb8c:	460f      	mov	r7, r1
   dbb8e:	463d      	mov	r5, r7
   dbb90:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbb94:	eb09 0004 	add.w	r0, r9, r4
   dbb98:	7840      	ldrb	r0, [r0, #1]
   dbb9a:	f000 0008 	and.w	r0, r0, #8
   dbb9e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   dbba2:	b108      	cbz	r0, dbba8 <_strtol_r+0x28>
   dbba4:	462f      	mov	r7, r5
   dbba6:	e7f2      	b.n	dbb8e <_strtol_r+0xe>
   dbba8:	2c2d      	cmp	r4, #45	; 0x2d
   dbbaa:	d103      	bne.n	dbbb4 <_strtol_r+0x34>
   dbbac:	1cbd      	adds	r5, r7, #2
   dbbae:	787c      	ldrb	r4, [r7, #1]
   dbbb0:	2601      	movs	r6, #1
   dbbb2:	e003      	b.n	dbbbc <_strtol_r+0x3c>
   dbbb4:	2c2b      	cmp	r4, #43	; 0x2b
   dbbb6:	bf04      	itt	eq
   dbbb8:	787c      	ldrbeq	r4, [r7, #1]
   dbbba:	1cbd      	addeq	r5, r7, #2
   dbbbc:	b113      	cbz	r3, dbbc4 <_strtol_r+0x44>
   dbbbe:	2b10      	cmp	r3, #16
   dbbc0:	d10a      	bne.n	dbbd8 <_strtol_r+0x58>
   dbbc2:	e05b      	b.n	dbc7c <_strtol_r+0xfc>
   dbbc4:	2c30      	cmp	r4, #48	; 0x30
   dbbc6:	d157      	bne.n	dbc78 <_strtol_r+0xf8>
   dbbc8:	7828      	ldrb	r0, [r5, #0]
   dbbca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dbbce:	2858      	cmp	r0, #88	; 0x58
   dbbd0:	d14d      	bne.n	dbc6e <_strtol_r+0xee>
   dbbd2:	786c      	ldrb	r4, [r5, #1]
   dbbd4:	2310      	movs	r3, #16
   dbbd6:	3502      	adds	r5, #2
   dbbd8:	2e00      	cmp	r6, #0
   dbbda:	bf14      	ite	ne
   dbbdc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   dbbe0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   dbbe4:	2700      	movs	r7, #0
   dbbe6:	fbbc faf3 	udiv	sl, ip, r3
   dbbea:	4638      	mov	r0, r7
   dbbec:	fb03 cc1a 	mls	ip, r3, sl, ip
   dbbf0:	eb09 0e04 	add.w	lr, r9, r4
   dbbf4:	f89e e001 	ldrb.w	lr, [lr, #1]
   dbbf8:	f01e 0f04 	tst.w	lr, #4
   dbbfc:	d001      	beq.n	dbc02 <_strtol_r+0x82>
   dbbfe:	3c30      	subs	r4, #48	; 0x30
   dbc00:	e00b      	b.n	dbc1a <_strtol_r+0x9a>
   dbc02:	f01e 0e03 	ands.w	lr, lr, #3
   dbc06:	d01b      	beq.n	dbc40 <_strtol_r+0xc0>
   dbc08:	f1be 0f01 	cmp.w	lr, #1
   dbc0c:	bf0c      	ite	eq
   dbc0e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dbc12:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dbc16:	ebce 0404 	rsb	r4, lr, r4
   dbc1a:	42a3      	cmp	r3, r4
   dbc1c:	dd10      	ble.n	dbc40 <_strtol_r+0xc0>
   dbc1e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   dbc22:	d00a      	beq.n	dbc3a <_strtol_r+0xba>
   dbc24:	4550      	cmp	r0, sl
   dbc26:	d806      	bhi.n	dbc36 <_strtol_r+0xb6>
   dbc28:	d101      	bne.n	dbc2e <_strtol_r+0xae>
   dbc2a:	4564      	cmp	r4, ip
   dbc2c:	dc03      	bgt.n	dbc36 <_strtol_r+0xb6>
   dbc2e:	fb03 4000 	mla	r0, r3, r0, r4
   dbc32:	2701      	movs	r7, #1
   dbc34:	e001      	b.n	dbc3a <_strtol_r+0xba>
   dbc36:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dbc3a:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbc3e:	e7d7      	b.n	dbbf0 <_strtol_r+0x70>
   dbc40:	1c7b      	adds	r3, r7, #1
   dbc42:	d10c      	bne.n	dbc5e <_strtol_r+0xde>
   dbc44:	2e00      	cmp	r6, #0
   dbc46:	f04f 0322 	mov.w	r3, #34	; 0x22
   dbc4a:	bf14      	ite	ne
   dbc4c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   dbc50:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dbc54:	f8c8 3000 	str.w	r3, [r8]
   dbc58:	b92a      	cbnz	r2, dbc66 <_strtol_r+0xe6>
   dbc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbc5e:	b106      	cbz	r6, dbc62 <_strtol_r+0xe2>
   dbc60:	4240      	negs	r0, r0
   dbc62:	b172      	cbz	r2, dbc82 <_strtol_r+0x102>
   dbc64:	b107      	cbz	r7, dbc68 <_strtol_r+0xe8>
   dbc66:	1e69      	subs	r1, r5, #1
   dbc68:	6011      	str	r1, [r2, #0]
   dbc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbc6e:	2430      	movs	r4, #48	; 0x30
   dbc70:	2b00      	cmp	r3, #0
   dbc72:	d1b1      	bne.n	dbbd8 <_strtol_r+0x58>
   dbc74:	2308      	movs	r3, #8
   dbc76:	e7af      	b.n	dbbd8 <_strtol_r+0x58>
   dbc78:	230a      	movs	r3, #10
   dbc7a:	e7ad      	b.n	dbbd8 <_strtol_r+0x58>
   dbc7c:	2c30      	cmp	r4, #48	; 0x30
   dbc7e:	d0a3      	beq.n	dbbc8 <_strtol_r+0x48>
   dbc80:	e7aa      	b.n	dbbd8 <_strtol_r+0x58>
   dbc82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbc86:	bf00      	nop
   dbc88:	2003df78 	.word	0x2003df78

000dbc8c <strtol>:
   dbc8c:	4613      	mov	r3, r2
   dbc8e:	460a      	mov	r2, r1
   dbc90:	4601      	mov	r1, r0
   dbc92:	4802      	ldr	r0, [pc, #8]	; (dbc9c <strtol+0x10>)
   dbc94:	6800      	ldr	r0, [r0, #0]
   dbc96:	f7ff bf73 	b.w	dbb80 <_strtol_r>
   dbc9a:	bf00      	nop
   dbc9c:	2003dfdc 	.word	0x2003dfdc

000dbca0 <_strtoul_r>:
   dbca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbca4:	4680      	mov	r8, r0
   dbca6:	483c      	ldr	r0, [pc, #240]	; (dbd98 <_strtoul_r+0xf8>)
   dbca8:	f8d0 9000 	ldr.w	r9, [r0]
   dbcac:	460e      	mov	r6, r1
   dbcae:	4635      	mov	r5, r6
   dbcb0:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbcb4:	eb09 0004 	add.w	r0, r9, r4
   dbcb8:	7840      	ldrb	r0, [r0, #1]
   dbcba:	f000 0008 	and.w	r0, r0, #8
   dbcbe:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dbcc2:	b108      	cbz	r0, dbcc8 <_strtoul_r+0x28>
   dbcc4:	462e      	mov	r6, r5
   dbcc6:	e7f2      	b.n	dbcae <_strtoul_r+0xe>
   dbcc8:	2c2d      	cmp	r4, #45	; 0x2d
   dbcca:	d103      	bne.n	dbcd4 <_strtoul_r+0x34>
   dbccc:	1cb5      	adds	r5, r6, #2
   dbcce:	7874      	ldrb	r4, [r6, #1]
   dbcd0:	2701      	movs	r7, #1
   dbcd2:	e003      	b.n	dbcdc <_strtoul_r+0x3c>
   dbcd4:	2c2b      	cmp	r4, #43	; 0x2b
   dbcd6:	bf04      	itt	eq
   dbcd8:	7874      	ldrbeq	r4, [r6, #1]
   dbcda:	1cb5      	addeq	r5, r6, #2
   dbcdc:	b113      	cbz	r3, dbce4 <_strtoul_r+0x44>
   dbcde:	2b10      	cmp	r3, #16
   dbce0:	d10a      	bne.n	dbcf8 <_strtoul_r+0x58>
   dbce2:	e053      	b.n	dbd8c <_strtoul_r+0xec>
   dbce4:	2c30      	cmp	r4, #48	; 0x30
   dbce6:	d14f      	bne.n	dbd88 <_strtoul_r+0xe8>
   dbce8:	7828      	ldrb	r0, [r5, #0]
   dbcea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dbcee:	2858      	cmp	r0, #88	; 0x58
   dbcf0:	d145      	bne.n	dbd7e <_strtoul_r+0xde>
   dbcf2:	786c      	ldrb	r4, [r5, #1]
   dbcf4:	2310      	movs	r3, #16
   dbcf6:	3502      	adds	r5, #2
   dbcf8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dbcfc:	2600      	movs	r6, #0
   dbcfe:	fbbc fcf3 	udiv	ip, ip, r3
   dbd02:	fb03 fa0c 	mul.w	sl, r3, ip
   dbd06:	ea6f 0a0a 	mvn.w	sl, sl
   dbd0a:	4630      	mov	r0, r6
   dbd0c:	eb09 0e04 	add.w	lr, r9, r4
   dbd10:	f89e e001 	ldrb.w	lr, [lr, #1]
   dbd14:	f01e 0f04 	tst.w	lr, #4
   dbd18:	d001      	beq.n	dbd1e <_strtoul_r+0x7e>
   dbd1a:	3c30      	subs	r4, #48	; 0x30
   dbd1c:	e00b      	b.n	dbd36 <_strtoul_r+0x96>
   dbd1e:	f01e 0e03 	ands.w	lr, lr, #3
   dbd22:	d01a      	beq.n	dbd5a <_strtoul_r+0xba>
   dbd24:	f1be 0f01 	cmp.w	lr, #1
   dbd28:	bf0c      	ite	eq
   dbd2a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dbd2e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dbd32:	ebce 0404 	rsb	r4, lr, r4
   dbd36:	42a3      	cmp	r3, r4
   dbd38:	dd0f      	ble.n	dbd5a <_strtoul_r+0xba>
   dbd3a:	2e00      	cmp	r6, #0
   dbd3c:	db08      	blt.n	dbd50 <_strtoul_r+0xb0>
   dbd3e:	4560      	cmp	r0, ip
   dbd40:	d806      	bhi.n	dbd50 <_strtoul_r+0xb0>
   dbd42:	d101      	bne.n	dbd48 <_strtoul_r+0xa8>
   dbd44:	4554      	cmp	r4, sl
   dbd46:	dc03      	bgt.n	dbd50 <_strtoul_r+0xb0>
   dbd48:	fb03 4000 	mla	r0, r3, r0, r4
   dbd4c:	2601      	movs	r6, #1
   dbd4e:	e001      	b.n	dbd54 <_strtoul_r+0xb4>
   dbd50:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dbd54:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbd58:	e7d8      	b.n	dbd0c <_strtoul_r+0x6c>
   dbd5a:	2e00      	cmp	r6, #0
   dbd5c:	da07      	bge.n	dbd6e <_strtoul_r+0xce>
   dbd5e:	2322      	movs	r3, #34	; 0x22
   dbd60:	f8c8 3000 	str.w	r3, [r8]
   dbd64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dbd68:	b92a      	cbnz	r2, dbd76 <_strtoul_r+0xd6>
   dbd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbd6e:	b107      	cbz	r7, dbd72 <_strtoul_r+0xd2>
   dbd70:	4240      	negs	r0, r0
   dbd72:	b172      	cbz	r2, dbd92 <_strtoul_r+0xf2>
   dbd74:	b106      	cbz	r6, dbd78 <_strtoul_r+0xd8>
   dbd76:	1e69      	subs	r1, r5, #1
   dbd78:	6011      	str	r1, [r2, #0]
   dbd7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbd7e:	2430      	movs	r4, #48	; 0x30
   dbd80:	2b00      	cmp	r3, #0
   dbd82:	d1b9      	bne.n	dbcf8 <_strtoul_r+0x58>
   dbd84:	2308      	movs	r3, #8
   dbd86:	e7b7      	b.n	dbcf8 <_strtoul_r+0x58>
   dbd88:	230a      	movs	r3, #10
   dbd8a:	e7b5      	b.n	dbcf8 <_strtoul_r+0x58>
   dbd8c:	2c30      	cmp	r4, #48	; 0x30
   dbd8e:	d0ab      	beq.n	dbce8 <_strtoul_r+0x48>
   dbd90:	e7b2      	b.n	dbcf8 <_strtoul_r+0x58>
   dbd92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbd96:	bf00      	nop
   dbd98:	2003df78 	.word	0x2003df78

000dbd9c <strtoul>:
   dbd9c:	4613      	mov	r3, r2
   dbd9e:	460a      	mov	r2, r1
   dbda0:	4601      	mov	r1, r0
   dbda2:	4802      	ldr	r0, [pc, #8]	; (dbdac <strtoul+0x10>)
   dbda4:	6800      	ldr	r0, [r0, #0]
   dbda6:	f7ff bf7b 	b.w	dbca0 <_strtoul_r>
   dbdaa:	bf00      	nop
   dbdac:	2003dfdc 	.word	0x2003dfdc

000dbdb0 <__get_current_time_locale>:
   dbdb0:	4b04      	ldr	r3, [pc, #16]	; (dbdc4 <__get_current_time_locale+0x14>)
   dbdb2:	4a05      	ldr	r2, [pc, #20]	; (dbdc8 <__get_current_time_locale+0x18>)
   dbdb4:	6818      	ldr	r0, [r3, #0]
   dbdb6:	4b05      	ldr	r3, [pc, #20]	; (dbdcc <__get_current_time_locale+0x1c>)
   dbdb8:	2800      	cmp	r0, #0
   dbdba:	bf14      	ite	ne
   dbdbc:	4610      	movne	r0, r2
   dbdbe:	4618      	moveq	r0, r3
   dbdc0:	4770      	bx	lr
   dbdc2:	bf00      	nop
   dbdc4:	2003e6c8 	.word	0x2003e6c8
   dbdc8:	2003e6cc 	.word	0x2003e6cc
   dbdcc:	000ddf60 	.word	0x000ddf60

000dbdd0 <__tzcalc_limits>:
   dbdd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbdd4:	4604      	mov	r4, r0
   dbdd6:	f000 fda5 	bl	dc924 <__gettzinfo>
   dbdda:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dbdde:	429c      	cmp	r4, r3
   dbde0:	f340 8096 	ble.w	dbf10 <__tzcalc_limits+0x140>
   dbde4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dbde8:	18e3      	adds	r3, r4, r3
   dbdea:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   dbdee:	109b      	asrs	r3, r3, #2
   dbdf0:	f240 156d 	movw	r5, #365	; 0x16d
   dbdf4:	fb05 3502 	mla	r5, r5, r2, r3
   dbdf8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   dbdfc:	f06f 0363 	mvn.w	r3, #99	; 0x63
   dbe00:	fb92 f3f3 	sdiv	r3, r2, r3
   dbe04:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dbe08:	442b      	add	r3, r5
   dbe0a:	18a5      	adds	r5, r4, r2
   dbe0c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dbe10:	fb95 f5f2 	sdiv	r5, r5, r2
   dbe14:	441d      	add	r5, r3
   dbe16:	2364      	movs	r3, #100	; 0x64
   dbe18:	fb94 f7f2 	sdiv	r7, r4, r2
   dbe1c:	fb94 f6f3 	sdiv	r6, r4, r3
   dbe20:	fb02 4717 	mls	r7, r2, r7, r4
   dbe24:	fb03 4616 	mls	r6, r3, r6, r4
   dbe28:	f100 0338 	add.w	r3, r0, #56	; 0x38
   dbe2c:	fab7 fe87 	clz	lr, r7
   dbe30:	9301      	str	r3, [sp, #4]
   dbe32:	f004 0303 	and.w	r3, r4, #3
   dbe36:	6044      	str	r4, [r0, #4]
   dbe38:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   dbe3c:	4601      	mov	r1, r0
   dbe3e:	9300      	str	r3, [sp, #0]
   dbe40:	f04f 0c07 	mov.w	ip, #7
   dbe44:	7a0b      	ldrb	r3, [r1, #8]
   dbe46:	2b4a      	cmp	r3, #74	; 0x4a
   dbe48:	d10e      	bne.n	dbe68 <__tzcalc_limits+0x98>
   dbe4a:	694b      	ldr	r3, [r1, #20]
   dbe4c:	9a00      	ldr	r2, [sp, #0]
   dbe4e:	18ec      	adds	r4, r5, r3
   dbe50:	b902      	cbnz	r2, dbe54 <__tzcalc_limits+0x84>
   dbe52:	b906      	cbnz	r6, dbe56 <__tzcalc_limits+0x86>
   dbe54:	b927      	cbnz	r7, dbe60 <__tzcalc_limits+0x90>
   dbe56:	2b3b      	cmp	r3, #59	; 0x3b
   dbe58:	bfd4      	ite	le
   dbe5a:	2300      	movle	r3, #0
   dbe5c:	2301      	movgt	r3, #1
   dbe5e:	e000      	b.n	dbe62 <__tzcalc_limits+0x92>
   dbe60:	2300      	movs	r3, #0
   dbe62:	4423      	add	r3, r4
   dbe64:	3b01      	subs	r3, #1
   dbe66:	e03f      	b.n	dbee8 <__tzcalc_limits+0x118>
   dbe68:	2b44      	cmp	r3, #68	; 0x44
   dbe6a:	d102      	bne.n	dbe72 <__tzcalc_limits+0xa2>
   dbe6c:	694b      	ldr	r3, [r1, #20]
   dbe6e:	442b      	add	r3, r5
   dbe70:	e03a      	b.n	dbee8 <__tzcalc_limits+0x118>
   dbe72:	9b00      	ldr	r3, [sp, #0]
   dbe74:	b92b      	cbnz	r3, dbe82 <__tzcalc_limits+0xb2>
   dbe76:	2e00      	cmp	r6, #0
   dbe78:	bf0c      	ite	eq
   dbe7a:	46f0      	moveq	r8, lr
   dbe7c:	f04f 0801 	movne.w	r8, #1
   dbe80:	e000      	b.n	dbe84 <__tzcalc_limits+0xb4>
   dbe82:	46f0      	mov	r8, lr
   dbe84:	4b24      	ldr	r3, [pc, #144]	; (dbf18 <__tzcalc_limits+0x148>)
   dbe86:	68cc      	ldr	r4, [r1, #12]
   dbe88:	2230      	movs	r2, #48	; 0x30
   dbe8a:	fb02 3808 	mla	r8, r2, r8, r3
   dbe8e:	f1a8 0a04 	sub.w	sl, r8, #4
   dbe92:	46a9      	mov	r9, r5
   dbe94:	2301      	movs	r3, #1
   dbe96:	42a3      	cmp	r3, r4
   dbe98:	da04      	bge.n	dbea4 <__tzcalc_limits+0xd4>
   dbe9a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dbe9e:	3301      	adds	r3, #1
   dbea0:	44d9      	add	r9, fp
   dbea2:	e7f8      	b.n	dbe96 <__tzcalc_limits+0xc6>
   dbea4:	f109 0304 	add.w	r3, r9, #4
   dbea8:	fb93 fbfc 	sdiv	fp, r3, ip
   dbeac:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dbeb0:	2c01      	cmp	r4, #1
   dbeb2:	ebca 0a03 	rsb	sl, sl, r3
   dbeb6:	694b      	ldr	r3, [r1, #20]
   dbeb8:	bfb8      	it	lt
   dbeba:	2401      	movlt	r4, #1
   dbebc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dbec0:	ebb3 0a0a 	subs.w	sl, r3, sl
   dbec4:	690b      	ldr	r3, [r1, #16]
   dbec6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   dbeca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   dbece:	bf48      	it	mi
   dbed0:	f10a 0a07 	addmi.w	sl, sl, #7
   dbed4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dbed8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dbedc:	4453      	add	r3, sl
   dbede:	42a3      	cmp	r3, r4
   dbee0:	db01      	blt.n	dbee6 <__tzcalc_limits+0x116>
   dbee2:	3b07      	subs	r3, #7
   dbee4:	e7fb      	b.n	dbede <__tzcalc_limits+0x10e>
   dbee6:	444b      	add	r3, r9
   dbee8:	698c      	ldr	r4, [r1, #24]
   dbeea:	4a0c      	ldr	r2, [pc, #48]	; (dbf1c <__tzcalc_limits+0x14c>)
   dbeec:	fb02 4303 	mla	r3, r2, r3, r4
   dbef0:	6a0c      	ldr	r4, [r1, #32]
   dbef2:	4423      	add	r3, r4
   dbef4:	f841 3f1c 	str.w	r3, [r1, #28]!
   dbef8:	9b01      	ldr	r3, [sp, #4]
   dbefa:	4299      	cmp	r1, r3
   dbefc:	d1a2      	bne.n	dbe44 <__tzcalc_limits+0x74>
   dbefe:	69c3      	ldr	r3, [r0, #28]
   dbf00:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dbf02:	4293      	cmp	r3, r2
   dbf04:	bfac      	ite	ge
   dbf06:	2300      	movge	r3, #0
   dbf08:	2301      	movlt	r3, #1
   dbf0a:	6003      	str	r3, [r0, #0]
   dbf0c:	2001      	movs	r0, #1
   dbf0e:	e000      	b.n	dbf12 <__tzcalc_limits+0x142>
   dbf10:	2000      	movs	r0, #0
   dbf12:	b003      	add	sp, #12
   dbf14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbf18:	000ddd14 	.word	0x000ddd14
   dbf1c:	00015180 	.word	0x00015180

000dbf20 <__tz_lock>:
   dbf20:	4770      	bx	lr

000dbf22 <__tz_unlock>:
   dbf22:	4770      	bx	lr

000dbf24 <_tzset_unlocked>:
   dbf24:	4b01      	ldr	r3, [pc, #4]	; (dbf2c <_tzset_unlocked+0x8>)
   dbf26:	6818      	ldr	r0, [r3, #0]
   dbf28:	f000 b802 	b.w	dbf30 <_tzset_unlocked_r>
   dbf2c:	2003dfdc 	.word	0x2003dfdc

000dbf30 <_tzset_unlocked_r>:
   dbf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbf34:	b08d      	sub	sp, #52	; 0x34
   dbf36:	4607      	mov	r7, r0
   dbf38:	f000 fcf4 	bl	dc924 <__gettzinfo>
   dbf3c:	49b0      	ldr	r1, [pc, #704]	; (dc200 <_tzset_unlocked_r+0x2d0>)
   dbf3e:	4eb1      	ldr	r6, [pc, #708]	; (dc204 <_tzset_unlocked_r+0x2d4>)
   dbf40:	4604      	mov	r4, r0
   dbf42:	4638      	mov	r0, r7
   dbf44:	f000 fce6 	bl	dc914 <_getenv_r>
   dbf48:	4605      	mov	r5, r0
   dbf4a:	b960      	cbnz	r0, dbf66 <_tzset_unlocked_r+0x36>
   dbf4c:	4bae      	ldr	r3, [pc, #696]	; (dc208 <_tzset_unlocked_r+0x2d8>)
   dbf4e:	4aaf      	ldr	r2, [pc, #700]	; (dc20c <_tzset_unlocked_r+0x2dc>)
   dbf50:	6018      	str	r0, [r3, #0]
   dbf52:	4baf      	ldr	r3, [pc, #700]	; (dc210 <_tzset_unlocked_r+0x2e0>)
   dbf54:	6018      	str	r0, [r3, #0]
   dbf56:	4baf      	ldr	r3, [pc, #700]	; (dc214 <_tzset_unlocked_r+0x2e4>)
   dbf58:	6830      	ldr	r0, [r6, #0]
   dbf5a:	601a      	str	r2, [r3, #0]
   dbf5c:	605a      	str	r2, [r3, #4]
   dbf5e:	f7fb f875 	bl	d704c <free>
   dbf62:	6035      	str	r5, [r6, #0]
   dbf64:	e148      	b.n	dc1f8 <_tzset_unlocked_r+0x2c8>
   dbf66:	6831      	ldr	r1, [r6, #0]
   dbf68:	b979      	cbnz	r1, dbf8a <_tzset_unlocked_r+0x5a>
   dbf6a:	6830      	ldr	r0, [r6, #0]
   dbf6c:	f7fb f86e 	bl	d704c <free>
   dbf70:	4628      	mov	r0, r5
   dbf72:	f7fe ff99 	bl	daea8 <strlen>
   dbf76:	1c41      	adds	r1, r0, #1
   dbf78:	4638      	mov	r0, r7
   dbf7a:	f7fb f89f 	bl	d70bc <_malloc_r>
   dbf7e:	6030      	str	r0, [r6, #0]
   dbf80:	b148      	cbz	r0, dbf96 <_tzset_unlocked_r+0x66>
   dbf82:	4629      	mov	r1, r5
   dbf84:	f7fe fa58 	bl	da438 <strcpy>
   dbf88:	e005      	b.n	dbf96 <_tzset_unlocked_r+0x66>
   dbf8a:	f7fe fa4b 	bl	da424 <strcmp>
   dbf8e:	2800      	cmp	r0, #0
   dbf90:	f000 8132 	beq.w	dc1f8 <_tzset_unlocked_r+0x2c8>
   dbf94:	e7e9      	b.n	dbf6a <_tzset_unlocked_r+0x3a>
   dbf96:	782b      	ldrb	r3, [r5, #0]
   dbf98:	4a9f      	ldr	r2, [pc, #636]	; (dc218 <_tzset_unlocked_r+0x2e8>)
   dbf9a:	49a0      	ldr	r1, [pc, #640]	; (dc21c <_tzset_unlocked_r+0x2ec>)
   dbf9c:	2b3a      	cmp	r3, #58	; 0x3a
   dbf9e:	bf08      	it	eq
   dbfa0:	3501      	addeq	r5, #1
   dbfa2:	ae0a      	add	r6, sp, #40	; 0x28
   dbfa4:	4633      	mov	r3, r6
   dbfa6:	4628      	mov	r0, r5
   dbfa8:	f7fb f868 	bl	d707c <siscanf>
   dbfac:	2800      	cmp	r0, #0
   dbfae:	f340 8123 	ble.w	dc1f8 <_tzset_unlocked_r+0x2c8>
   dbfb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbfb4:	18ef      	adds	r7, r5, r3
   dbfb6:	5ceb      	ldrb	r3, [r5, r3]
   dbfb8:	2b2d      	cmp	r3, #45	; 0x2d
   dbfba:	d103      	bne.n	dbfc4 <_tzset_unlocked_r+0x94>
   dbfbc:	3701      	adds	r7, #1
   dbfbe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   dbfc2:	e003      	b.n	dbfcc <_tzset_unlocked_r+0x9c>
   dbfc4:	2b2b      	cmp	r3, #43	; 0x2b
   dbfc6:	bf08      	it	eq
   dbfc8:	3701      	addeq	r7, #1
   dbfca:	2501      	movs	r5, #1
   dbfcc:	f10d 0a20 	add.w	sl, sp, #32
   dbfd0:	f10d 0b1e 	add.w	fp, sp, #30
   dbfd4:	f04f 0800 	mov.w	r8, #0
   dbfd8:	9603      	str	r6, [sp, #12]
   dbfda:	f8cd a008 	str.w	sl, [sp, #8]
   dbfde:	9601      	str	r6, [sp, #4]
   dbfe0:	f8cd b000 	str.w	fp, [sp]
   dbfe4:	4633      	mov	r3, r6
   dbfe6:	aa07      	add	r2, sp, #28
   dbfe8:	498d      	ldr	r1, [pc, #564]	; (dc220 <_tzset_unlocked_r+0x2f0>)
   dbfea:	f8ad 801e 	strh.w	r8, [sp, #30]
   dbfee:	4638      	mov	r0, r7
   dbff0:	f8ad 8020 	strh.w	r8, [sp, #32]
   dbff4:	f7fb f842 	bl	d707c <siscanf>
   dbff8:	4540      	cmp	r0, r8
   dbffa:	f340 80fd 	ble.w	dc1f8 <_tzset_unlocked_r+0x2c8>
   dbffe:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc002:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc006:	f8df 9224 	ldr.w	r9, [pc, #548]	; dc22c <_tzset_unlocked_r+0x2fc>
   dc00a:	213c      	movs	r1, #60	; 0x3c
   dc00c:	fb01 3302 	mla	r3, r1, r2, r3
   dc010:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc014:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc018:	fb01 3302 	mla	r3, r1, r2, r3
   dc01c:	435d      	muls	r5, r3
   dc01e:	6225      	str	r5, [r4, #32]
   dc020:	4d7c      	ldr	r5, [pc, #496]	; (dc214 <_tzset_unlocked_r+0x2e4>)
   dc022:	4b7d      	ldr	r3, [pc, #500]	; (dc218 <_tzset_unlocked_r+0x2e8>)
   dc024:	602b      	str	r3, [r5, #0]
   dc026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc028:	497c      	ldr	r1, [pc, #496]	; (dc21c <_tzset_unlocked_r+0x2ec>)
   dc02a:	441f      	add	r7, r3
   dc02c:	464a      	mov	r2, r9
   dc02e:	4633      	mov	r3, r6
   dc030:	4638      	mov	r0, r7
   dc032:	f7fb f823 	bl	d707c <siscanf>
   dc036:	4540      	cmp	r0, r8
   dc038:	dc08      	bgt.n	dc04c <_tzset_unlocked_r+0x11c>
   dc03a:	682b      	ldr	r3, [r5, #0]
   dc03c:	606b      	str	r3, [r5, #4]
   dc03e:	4b72      	ldr	r3, [pc, #456]	; (dc208 <_tzset_unlocked_r+0x2d8>)
   dc040:	6a22      	ldr	r2, [r4, #32]
   dc042:	601a      	str	r2, [r3, #0]
   dc044:	4b72      	ldr	r3, [pc, #456]	; (dc210 <_tzset_unlocked_r+0x2e0>)
   dc046:	f8c3 8000 	str.w	r8, [r3]
   dc04a:	e0d5      	b.n	dc1f8 <_tzset_unlocked_r+0x2c8>
   dc04c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc04e:	f8c5 9004 	str.w	r9, [r5, #4]
   dc052:	18fd      	adds	r5, r7, r3
   dc054:	5cfb      	ldrb	r3, [r7, r3]
   dc056:	2b2d      	cmp	r3, #45	; 0x2d
   dc058:	d103      	bne.n	dc062 <_tzset_unlocked_r+0x132>
   dc05a:	3501      	adds	r5, #1
   dc05c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dc060:	e003      	b.n	dc06a <_tzset_unlocked_r+0x13a>
   dc062:	2b2b      	cmp	r3, #43	; 0x2b
   dc064:	bf08      	it	eq
   dc066:	3501      	addeq	r5, #1
   dc068:	2701      	movs	r7, #1
   dc06a:	2300      	movs	r3, #0
   dc06c:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc070:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc074:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc078:	930a      	str	r3, [sp, #40]	; 0x28
   dc07a:	9603      	str	r6, [sp, #12]
   dc07c:	f8cd a008 	str.w	sl, [sp, #8]
   dc080:	9601      	str	r6, [sp, #4]
   dc082:	f8cd b000 	str.w	fp, [sp]
   dc086:	4633      	mov	r3, r6
   dc088:	aa07      	add	r2, sp, #28
   dc08a:	4965      	ldr	r1, [pc, #404]	; (dc220 <_tzset_unlocked_r+0x2f0>)
   dc08c:	4628      	mov	r0, r5
   dc08e:	f7fa fff5 	bl	d707c <siscanf>
   dc092:	2800      	cmp	r0, #0
   dc094:	dc04      	bgt.n	dc0a0 <_tzset_unlocked_r+0x170>
   dc096:	6a23      	ldr	r3, [r4, #32]
   dc098:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dc09c:	63e3      	str	r3, [r4, #60]	; 0x3c
   dc09e:	e00e      	b.n	dc0be <_tzset_unlocked_r+0x18e>
   dc0a0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc0a4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc0a8:	213c      	movs	r1, #60	; 0x3c
   dc0aa:	fb01 3302 	mla	r3, r1, r2, r3
   dc0ae:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc0b2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc0b6:	fb01 3302 	mla	r3, r1, r2, r3
   dc0ba:	435f      	muls	r7, r3
   dc0bc:	63e7      	str	r7, [r4, #60]	; 0x3c
   dc0be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc0c0:	4627      	mov	r7, r4
   dc0c2:	441d      	add	r5, r3
   dc0c4:	f04f 0900 	mov.w	r9, #0
   dc0c8:	782b      	ldrb	r3, [r5, #0]
   dc0ca:	2b2c      	cmp	r3, #44	; 0x2c
   dc0cc:	bf08      	it	eq
   dc0ce:	3501      	addeq	r5, #1
   dc0d0:	f895 8000 	ldrb.w	r8, [r5]
   dc0d4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dc0d8:	d126      	bne.n	dc128 <_tzset_unlocked_r+0x1f8>
   dc0da:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dc0de:	9302      	str	r3, [sp, #8]
   dc0e0:	ab09      	add	r3, sp, #36	; 0x24
   dc0e2:	9300      	str	r3, [sp, #0]
   dc0e4:	9603      	str	r6, [sp, #12]
   dc0e6:	9601      	str	r6, [sp, #4]
   dc0e8:	4633      	mov	r3, r6
   dc0ea:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dc0ee:	494d      	ldr	r1, [pc, #308]	; (dc224 <_tzset_unlocked_r+0x2f4>)
   dc0f0:	4628      	mov	r0, r5
   dc0f2:	f7fa ffc3 	bl	d707c <siscanf>
   dc0f6:	2803      	cmp	r0, #3
   dc0f8:	d17e      	bne.n	dc1f8 <_tzset_unlocked_r+0x2c8>
   dc0fa:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dc0fe:	1e4b      	subs	r3, r1, #1
   dc100:	2b0b      	cmp	r3, #11
   dc102:	d879      	bhi.n	dc1f8 <_tzset_unlocked_r+0x2c8>
   dc104:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dc108:	1e53      	subs	r3, r2, #1
   dc10a:	2b04      	cmp	r3, #4
   dc10c:	d874      	bhi.n	dc1f8 <_tzset_unlocked_r+0x2c8>
   dc10e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dc112:	2b06      	cmp	r3, #6
   dc114:	d870      	bhi.n	dc1f8 <_tzset_unlocked_r+0x2c8>
   dc116:	f887 8008 	strb.w	r8, [r7, #8]
   dc11a:	60f9      	str	r1, [r7, #12]
   dc11c:	613a      	str	r2, [r7, #16]
   dc11e:	617b      	str	r3, [r7, #20]
   dc120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc122:	eb05 0803 	add.w	r8, r5, r3
   dc126:	e02a      	b.n	dc17e <_tzset_unlocked_r+0x24e>
   dc128:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dc12c:	bf06      	itte	eq
   dc12e:	3501      	addeq	r5, #1
   dc130:	4643      	moveq	r3, r8
   dc132:	2344      	movne	r3, #68	; 0x44
   dc134:	220a      	movs	r2, #10
   dc136:	a90b      	add	r1, sp, #44	; 0x2c
   dc138:	4628      	mov	r0, r5
   dc13a:	9305      	str	r3, [sp, #20]
   dc13c:	f7ff fe2e 	bl	dbd9c <strtoul>
   dc140:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dc144:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dc148:	4545      	cmp	r5, r8
   dc14a:	9b05      	ldr	r3, [sp, #20]
   dc14c:	d114      	bne.n	dc178 <_tzset_unlocked_r+0x248>
   dc14e:	234d      	movs	r3, #77	; 0x4d
   dc150:	f1b9 0f00 	cmp.w	r9, #0
   dc154:	d107      	bne.n	dc166 <_tzset_unlocked_r+0x236>
   dc156:	7223      	strb	r3, [r4, #8]
   dc158:	2303      	movs	r3, #3
   dc15a:	60e3      	str	r3, [r4, #12]
   dc15c:	2302      	movs	r3, #2
   dc15e:	6123      	str	r3, [r4, #16]
   dc160:	f8c4 9014 	str.w	r9, [r4, #20]
   dc164:	e00b      	b.n	dc17e <_tzset_unlocked_r+0x24e>
   dc166:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dc16a:	230b      	movs	r3, #11
   dc16c:	62a3      	str	r3, [r4, #40]	; 0x28
   dc16e:	2301      	movs	r3, #1
   dc170:	62e3      	str	r3, [r4, #44]	; 0x2c
   dc172:	2300      	movs	r3, #0
   dc174:	6323      	str	r3, [r4, #48]	; 0x30
   dc176:	e002      	b.n	dc17e <_tzset_unlocked_r+0x24e>
   dc178:	b280      	uxth	r0, r0
   dc17a:	723b      	strb	r3, [r7, #8]
   dc17c:	6178      	str	r0, [r7, #20]
   dc17e:	2302      	movs	r3, #2
   dc180:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc184:	2300      	movs	r3, #0
   dc186:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc18a:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc18e:	930a      	str	r3, [sp, #40]	; 0x28
   dc190:	f898 3000 	ldrb.w	r3, [r8]
   dc194:	2b2f      	cmp	r3, #47	; 0x2f
   dc196:	d10b      	bne.n	dc1b0 <_tzset_unlocked_r+0x280>
   dc198:	9603      	str	r6, [sp, #12]
   dc19a:	f8cd a008 	str.w	sl, [sp, #8]
   dc19e:	9601      	str	r6, [sp, #4]
   dc1a0:	f8cd b000 	str.w	fp, [sp]
   dc1a4:	4633      	mov	r3, r6
   dc1a6:	aa07      	add	r2, sp, #28
   dc1a8:	491f      	ldr	r1, [pc, #124]	; (dc228 <_tzset_unlocked_r+0x2f8>)
   dc1aa:	4640      	mov	r0, r8
   dc1ac:	f7fa ff66 	bl	d707c <siscanf>
   dc1b0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc1b4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc1b8:	213c      	movs	r1, #60	; 0x3c
   dc1ba:	fb01 3302 	mla	r3, r1, r2, r3
   dc1be:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc1c2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc1c6:	fb01 3302 	mla	r3, r1, r2, r3
   dc1ca:	61bb      	str	r3, [r7, #24]
   dc1cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dc1ce:	f109 0901 	add.w	r9, r9, #1
   dc1d2:	f1b9 0f02 	cmp.w	r9, #2
   dc1d6:	4445      	add	r5, r8
   dc1d8:	f107 071c 	add.w	r7, r7, #28
   dc1dc:	f47f af74 	bne.w	dc0c8 <_tzset_unlocked_r+0x198>
   dc1e0:	6860      	ldr	r0, [r4, #4]
   dc1e2:	f7ff fdf5 	bl	dbdd0 <__tzcalc_limits>
   dc1e6:	4b08      	ldr	r3, [pc, #32]	; (dc208 <_tzset_unlocked_r+0x2d8>)
   dc1e8:	6a22      	ldr	r2, [r4, #32]
   dc1ea:	601a      	str	r2, [r3, #0]
   dc1ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dc1ee:	1a9b      	subs	r3, r3, r2
   dc1f0:	4a07      	ldr	r2, [pc, #28]	; (dc210 <_tzset_unlocked_r+0x2e0>)
   dc1f2:	bf18      	it	ne
   dc1f4:	2301      	movne	r3, #1
   dc1f6:	6013      	str	r3, [r2, #0]
   dc1f8:	b00d      	add	sp, #52	; 0x34
   dc1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc1fe:	bf00      	nop
   dc200:	000de05c 	.word	0x000de05c
   dc204:	2003e7e0 	.word	0x2003e7e0
   dc208:	2003e7e8 	.word	0x2003e7e8
   dc20c:	000de05f 	.word	0x000de05f
   dc210:	2003e7e4 	.word	0x2003e7e4
   dc214:	2003e018 	.word	0x2003e018
   dc218:	2003e7d3 	.word	0x2003e7d3
   dc21c:	000de063 	.word	0x000de063
   dc220:	000de086 	.word	0x000de086
   dc224:	000de072 	.word	0x000de072
   dc228:	000de085 	.word	0x000de085
   dc22c:	2003e7c8 	.word	0x2003e7c8

000dc230 <abs>:
   dc230:	2800      	cmp	r0, #0
   dc232:	bfb8      	it	lt
   dc234:	4240      	neglt	r0, r0
   dc236:	4770      	bx	lr

000dc238 <div>:
   dc238:	2900      	cmp	r1, #0
   dc23a:	b510      	push	{r4, lr}
   dc23c:	fb91 f4f2 	sdiv	r4, r1, r2
   dc240:	fb02 1314 	mls	r3, r2, r4, r1
   dc244:	db04      	blt.n	dc250 <div+0x18>
   dc246:	2b00      	cmp	r3, #0
   dc248:	da07      	bge.n	dc25a <div+0x22>
   dc24a:	3401      	adds	r4, #1
   dc24c:	1a9b      	subs	r3, r3, r2
   dc24e:	e004      	b.n	dc25a <div+0x22>
   dc250:	2b00      	cmp	r3, #0
   dc252:	bfc4      	itt	gt
   dc254:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   dc258:	189b      	addgt	r3, r3, r2
   dc25a:	6004      	str	r4, [r0, #0]
   dc25c:	6043      	str	r3, [r0, #4]
   dc25e:	bd10      	pop	{r4, pc}

000dc260 <rshift>:
   dc260:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc262:	6906      	ldr	r6, [r0, #16]
   dc264:	114b      	asrs	r3, r1, #5
   dc266:	42b3      	cmp	r3, r6
   dc268:	f100 0514 	add.w	r5, r0, #20
   dc26c:	da27      	bge.n	dc2be <rshift+0x5e>
   dc26e:	f011 011f 	ands.w	r1, r1, #31
   dc272:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   dc276:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   dc27a:	d101      	bne.n	dc280 <rshift+0x20>
   dc27c:	4629      	mov	r1, r5
   dc27e:	e016      	b.n	dc2ae <rshift+0x4e>
   dc280:	1d14      	adds	r4, r2, #4
   dc282:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   dc286:	f1c1 0e20 	rsb	lr, r1, #32
   dc28a:	40ca      	lsrs	r2, r1
   dc28c:	462b      	mov	r3, r5
   dc28e:	42b4      	cmp	r4, r6
   dc290:	d209      	bcs.n	dc2a6 <rshift+0x46>
   dc292:	6827      	ldr	r7, [r4, #0]
   dc294:	fa07 f70e 	lsl.w	r7, r7, lr
   dc298:	433a      	orrs	r2, r7
   dc29a:	f843 2b04 	str.w	r2, [r3], #4
   dc29e:	f854 2b04 	ldr.w	r2, [r4], #4
   dc2a2:	40ca      	lsrs	r2, r1
   dc2a4:	e7f3      	b.n	dc28e <rshift+0x2e>
   dc2a6:	601a      	str	r2, [r3, #0]
   dc2a8:	b152      	cbz	r2, dc2c0 <rshift+0x60>
   dc2aa:	3304      	adds	r3, #4
   dc2ac:	e008      	b.n	dc2c0 <rshift+0x60>
   dc2ae:	42b2      	cmp	r2, r6
   dc2b0:	460b      	mov	r3, r1
   dc2b2:	d205      	bcs.n	dc2c0 <rshift+0x60>
   dc2b4:	f852 3b04 	ldr.w	r3, [r2], #4
   dc2b8:	f841 3b04 	str.w	r3, [r1], #4
   dc2bc:	e7f7      	b.n	dc2ae <rshift+0x4e>
   dc2be:	462b      	mov	r3, r5
   dc2c0:	1b5b      	subs	r3, r3, r5
   dc2c2:	109b      	asrs	r3, r3, #2
   dc2c4:	6103      	str	r3, [r0, #16]
   dc2c6:	b903      	cbnz	r3, dc2ca <rshift+0x6a>
   dc2c8:	6143      	str	r3, [r0, #20]
   dc2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dc2cc <__hexdig_fun>:
   dc2cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dc2d0:	2b09      	cmp	r3, #9
   dc2d2:	d801      	bhi.n	dc2d8 <__hexdig_fun+0xc>
   dc2d4:	3820      	subs	r0, #32
   dc2d6:	e00a      	b.n	dc2ee <__hexdig_fun+0x22>
   dc2d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dc2dc:	2b05      	cmp	r3, #5
   dc2de:	d801      	bhi.n	dc2e4 <__hexdig_fun+0x18>
   dc2e0:	3847      	subs	r0, #71	; 0x47
   dc2e2:	e004      	b.n	dc2ee <__hexdig_fun+0x22>
   dc2e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dc2e8:	2b05      	cmp	r3, #5
   dc2ea:	d802      	bhi.n	dc2f2 <__hexdig_fun+0x26>
   dc2ec:	3827      	subs	r0, #39	; 0x27
   dc2ee:	b2c0      	uxtb	r0, r0
   dc2f0:	4770      	bx	lr
   dc2f2:	2000      	movs	r0, #0
   dc2f4:	4770      	bx	lr

000dc2f6 <__gethex>:
   dc2f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc2fa:	b08b      	sub	sp, #44	; 0x2c
   dc2fc:	468a      	mov	sl, r1
   dc2fe:	4690      	mov	r8, r2
   dc300:	9306      	str	r3, [sp, #24]
   dc302:	9002      	str	r0, [sp, #8]
   dc304:	f7fd fe00 	bl	d9f08 <_localeconv_r>
   dc308:	6803      	ldr	r3, [r0, #0]
   dc30a:	9303      	str	r3, [sp, #12]
   dc30c:	4618      	mov	r0, r3
   dc30e:	f7fe fdcb 	bl	daea8 <strlen>
   dc312:	9b03      	ldr	r3, [sp, #12]
   dc314:	9001      	str	r0, [sp, #4]
   dc316:	4403      	add	r3, r0
   dc318:	f04f 0b00 	mov.w	fp, #0
   dc31c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dc320:	9307      	str	r3, [sp, #28]
   dc322:	f8da 3000 	ldr.w	r3, [sl]
   dc326:	3302      	adds	r3, #2
   dc328:	461f      	mov	r7, r3
   dc32a:	f813 0b01 	ldrb.w	r0, [r3], #1
   dc32e:	2830      	cmp	r0, #48	; 0x30
   dc330:	d102      	bne.n	dc338 <__gethex+0x42>
   dc332:	f10b 0b01 	add.w	fp, fp, #1
   dc336:	e7f7      	b.n	dc328 <__gethex+0x32>
   dc338:	f7ff ffc8 	bl	dc2cc <__hexdig_fun>
   dc33c:	4604      	mov	r4, r0
   dc33e:	b9e0      	cbnz	r0, dc37a <__gethex+0x84>
   dc340:	9a01      	ldr	r2, [sp, #4]
   dc342:	9903      	ldr	r1, [sp, #12]
   dc344:	4638      	mov	r0, r7
   dc346:	f7fe fdb7 	bl	daeb8 <strncmp>
   dc34a:	2800      	cmp	r0, #0
   dc34c:	d134      	bne.n	dc3b8 <__gethex+0xc2>
   dc34e:	9b01      	ldr	r3, [sp, #4]
   dc350:	5cf8      	ldrb	r0, [r7, r3]
   dc352:	18fe      	adds	r6, r7, r3
   dc354:	f7ff ffba 	bl	dc2cc <__hexdig_fun>
   dc358:	b380      	cbz	r0, dc3bc <__gethex+0xc6>
   dc35a:	4633      	mov	r3, r6
   dc35c:	7818      	ldrb	r0, [r3, #0]
   dc35e:	2830      	cmp	r0, #48	; 0x30
   dc360:	461f      	mov	r7, r3
   dc362:	f103 0301 	add.w	r3, r3, #1
   dc366:	d0f9      	beq.n	dc35c <__gethex+0x66>
   dc368:	f7ff ffb0 	bl	dc2cc <__hexdig_fun>
   dc36c:	fab0 f580 	clz	r5, r0
   dc370:	096d      	lsrs	r5, r5, #5
   dc372:	4634      	mov	r4, r6
   dc374:	f04f 0b01 	mov.w	fp, #1
   dc378:	e001      	b.n	dc37e <__gethex+0x88>
   dc37a:	2500      	movs	r5, #0
   dc37c:	462c      	mov	r4, r5
   dc37e:	463a      	mov	r2, r7
   dc380:	4616      	mov	r6, r2
   dc382:	3201      	adds	r2, #1
   dc384:	7830      	ldrb	r0, [r6, #0]
   dc386:	f7ff ffa1 	bl	dc2cc <__hexdig_fun>
   dc38a:	2800      	cmp	r0, #0
   dc38c:	d1f8      	bne.n	dc380 <__gethex+0x8a>
   dc38e:	9a01      	ldr	r2, [sp, #4]
   dc390:	9903      	ldr	r1, [sp, #12]
   dc392:	4630      	mov	r0, r6
   dc394:	f7fe fd90 	bl	daeb8 <strncmp>
   dc398:	b950      	cbnz	r0, dc3b0 <__gethex+0xba>
   dc39a:	b954      	cbnz	r4, dc3b2 <__gethex+0xbc>
   dc39c:	9b01      	ldr	r3, [sp, #4]
   dc39e:	18f4      	adds	r4, r6, r3
   dc3a0:	4622      	mov	r2, r4
   dc3a2:	4616      	mov	r6, r2
   dc3a4:	3201      	adds	r2, #1
   dc3a6:	7830      	ldrb	r0, [r6, #0]
   dc3a8:	f7ff ff90 	bl	dc2cc <__hexdig_fun>
   dc3ac:	2800      	cmp	r0, #0
   dc3ae:	d1f8      	bne.n	dc3a2 <__gethex+0xac>
   dc3b0:	b134      	cbz	r4, dc3c0 <__gethex+0xca>
   dc3b2:	1ba4      	subs	r4, r4, r6
   dc3b4:	00a4      	lsls	r4, r4, #2
   dc3b6:	e003      	b.n	dc3c0 <__gethex+0xca>
   dc3b8:	463e      	mov	r6, r7
   dc3ba:	e000      	b.n	dc3be <__gethex+0xc8>
   dc3bc:	4604      	mov	r4, r0
   dc3be:	2501      	movs	r5, #1
   dc3c0:	7833      	ldrb	r3, [r6, #0]
   dc3c2:	2b50      	cmp	r3, #80	; 0x50
   dc3c4:	d001      	beq.n	dc3ca <__gethex+0xd4>
   dc3c6:	2b70      	cmp	r3, #112	; 0x70
   dc3c8:	d12a      	bne.n	dc420 <__gethex+0x12a>
   dc3ca:	7873      	ldrb	r3, [r6, #1]
   dc3cc:	2b2b      	cmp	r3, #43	; 0x2b
   dc3ce:	d008      	beq.n	dc3e2 <__gethex+0xec>
   dc3d0:	2b2d      	cmp	r3, #45	; 0x2d
   dc3d2:	d003      	beq.n	dc3dc <__gethex+0xe6>
   dc3d4:	1c71      	adds	r1, r6, #1
   dc3d6:	f04f 0900 	mov.w	r9, #0
   dc3da:	e005      	b.n	dc3e8 <__gethex+0xf2>
   dc3dc:	f04f 0901 	mov.w	r9, #1
   dc3e0:	e001      	b.n	dc3e6 <__gethex+0xf0>
   dc3e2:	f04f 0900 	mov.w	r9, #0
   dc3e6:	1cb1      	adds	r1, r6, #2
   dc3e8:	7808      	ldrb	r0, [r1, #0]
   dc3ea:	f7ff ff6f 	bl	dc2cc <__hexdig_fun>
   dc3ee:	1e43      	subs	r3, r0, #1
   dc3f0:	b2db      	uxtb	r3, r3
   dc3f2:	2b18      	cmp	r3, #24
   dc3f4:	d814      	bhi.n	dc420 <__gethex+0x12a>
   dc3f6:	f1a0 0210 	sub.w	r2, r0, #16
   dc3fa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dc3fe:	f7ff ff65 	bl	dc2cc <__hexdig_fun>
   dc402:	1e43      	subs	r3, r0, #1
   dc404:	b2db      	uxtb	r3, r3
   dc406:	2b18      	cmp	r3, #24
   dc408:	d804      	bhi.n	dc414 <__gethex+0x11e>
   dc40a:	230a      	movs	r3, #10
   dc40c:	fb03 0202 	mla	r2, r3, r2, r0
   dc410:	3a10      	subs	r2, #16
   dc412:	e7f2      	b.n	dc3fa <__gethex+0x104>
   dc414:	f1b9 0f00 	cmp.w	r9, #0
   dc418:	d000      	beq.n	dc41c <__gethex+0x126>
   dc41a:	4252      	negs	r2, r2
   dc41c:	4414      	add	r4, r2
   dc41e:	e000      	b.n	dc422 <__gethex+0x12c>
   dc420:	4631      	mov	r1, r6
   dc422:	f8ca 1000 	str.w	r1, [sl]
   dc426:	b12d      	cbz	r5, dc434 <__gethex+0x13e>
   dc428:	f1bb 0f00 	cmp.w	fp, #0
   dc42c:	bf14      	ite	ne
   dc42e:	2000      	movne	r0, #0
   dc430:	2006      	moveq	r0, #6
   dc432:	e17c      	b.n	dc72e <__gethex+0x438>
   dc434:	1bf3      	subs	r3, r6, r7
   dc436:	3b01      	subs	r3, #1
   dc438:	4629      	mov	r1, r5
   dc43a:	2b07      	cmp	r3, #7
   dc43c:	dd02      	ble.n	dc444 <__gethex+0x14e>
   dc43e:	3101      	adds	r1, #1
   dc440:	105b      	asrs	r3, r3, #1
   dc442:	e7fa      	b.n	dc43a <__gethex+0x144>
   dc444:	9802      	ldr	r0, [sp, #8]
   dc446:	f000 fa75 	bl	dc934 <_Balloc>
   dc44a:	9b01      	ldr	r3, [sp, #4]
   dc44c:	f100 0a14 	add.w	sl, r0, #20
   dc450:	f04f 0900 	mov.w	r9, #0
   dc454:	f1c3 0301 	rsb	r3, r3, #1
   dc458:	4605      	mov	r5, r0
   dc45a:	f8cd a010 	str.w	sl, [sp, #16]
   dc45e:	46cb      	mov	fp, r9
   dc460:	9308      	str	r3, [sp, #32]
   dc462:	42b7      	cmp	r7, r6
   dc464:	d22f      	bcs.n	dc4c6 <__gethex+0x1d0>
   dc466:	1e73      	subs	r3, r6, #1
   dc468:	9305      	str	r3, [sp, #20]
   dc46a:	9a07      	ldr	r2, [sp, #28]
   dc46c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dc470:	4293      	cmp	r3, r2
   dc472:	d00b      	beq.n	dc48c <__gethex+0x196>
   dc474:	f1bb 0f20 	cmp.w	fp, #32
   dc478:	d116      	bne.n	dc4a8 <__gethex+0x1b2>
   dc47a:	9b04      	ldr	r3, [sp, #16]
   dc47c:	f8c3 9000 	str.w	r9, [r3]
   dc480:	3304      	adds	r3, #4
   dc482:	f04f 0900 	mov.w	r9, #0
   dc486:	9304      	str	r3, [sp, #16]
   dc488:	46cb      	mov	fp, r9
   dc48a:	e00d      	b.n	dc4a8 <__gethex+0x1b2>
   dc48c:	9b05      	ldr	r3, [sp, #20]
   dc48e:	9a08      	ldr	r2, [sp, #32]
   dc490:	4413      	add	r3, r2
   dc492:	429f      	cmp	r7, r3
   dc494:	d8ee      	bhi.n	dc474 <__gethex+0x17e>
   dc496:	4618      	mov	r0, r3
   dc498:	9a01      	ldr	r2, [sp, #4]
   dc49a:	9903      	ldr	r1, [sp, #12]
   dc49c:	9309      	str	r3, [sp, #36]	; 0x24
   dc49e:	f7fe fd0b 	bl	daeb8 <strncmp>
   dc4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc4a4:	b168      	cbz	r0, dc4c2 <__gethex+0x1cc>
   dc4a6:	e7e5      	b.n	dc474 <__gethex+0x17e>
   dc4a8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dc4ac:	f7ff ff0e 	bl	dc2cc <__hexdig_fun>
   dc4b0:	f000 000f 	and.w	r0, r0, #15
   dc4b4:	fa00 f00b 	lsl.w	r0, r0, fp
   dc4b8:	9b05      	ldr	r3, [sp, #20]
   dc4ba:	ea49 0900 	orr.w	r9, r9, r0
   dc4be:	f10b 0b04 	add.w	fp, fp, #4
   dc4c2:	461e      	mov	r6, r3
   dc4c4:	e7cd      	b.n	dc462 <__gethex+0x16c>
   dc4c6:	9804      	ldr	r0, [sp, #16]
   dc4c8:	f840 9b04 	str.w	r9, [r0], #4
   dc4cc:	ebca 0000 	rsb	r0, sl, r0
   dc4d0:	1080      	asrs	r0, r0, #2
   dc4d2:	6128      	str	r0, [r5, #16]
   dc4d4:	0147      	lsls	r7, r0, #5
   dc4d6:	4648      	mov	r0, r9
   dc4d8:	f000 faf1 	bl	dcabe <__hi0bits>
   dc4dc:	f8d8 6000 	ldr.w	r6, [r8]
   dc4e0:	1a38      	subs	r0, r7, r0
   dc4e2:	42b0      	cmp	r0, r6
   dc4e4:	dd26      	ble.n	dc534 <__gethex+0x23e>
   dc4e6:	1b87      	subs	r7, r0, r6
   dc4e8:	4639      	mov	r1, r7
   dc4ea:	4628      	mov	r0, r5
   dc4ec:	f000 fdef 	bl	dd0ce <__any_on>
   dc4f0:	b1c8      	cbz	r0, dc526 <__gethex+0x230>
   dc4f2:	1e7b      	subs	r3, r7, #1
   dc4f4:	1159      	asrs	r1, r3, #5
   dc4f6:	f003 021f 	and.w	r2, r3, #31
   dc4fa:	f04f 0901 	mov.w	r9, #1
   dc4fe:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   dc502:	fa09 f202 	lsl.w	r2, r9, r2
   dc506:	420a      	tst	r2, r1
   dc508:	d00e      	beq.n	dc528 <__gethex+0x232>
   dc50a:	454b      	cmp	r3, r9
   dc50c:	dc02      	bgt.n	dc514 <__gethex+0x21e>
   dc50e:	f04f 0902 	mov.w	r9, #2
   dc512:	e009      	b.n	dc528 <__gethex+0x232>
   dc514:	1eb9      	subs	r1, r7, #2
   dc516:	4628      	mov	r0, r5
   dc518:	f000 fdd9 	bl	dd0ce <__any_on>
   dc51c:	2800      	cmp	r0, #0
   dc51e:	d0f6      	beq.n	dc50e <__gethex+0x218>
   dc520:	f04f 0903 	mov.w	r9, #3
   dc524:	e000      	b.n	dc528 <__gethex+0x232>
   dc526:	4681      	mov	r9, r0
   dc528:	4639      	mov	r1, r7
   dc52a:	4628      	mov	r0, r5
   dc52c:	f7ff fe98 	bl	dc260 <rshift>
   dc530:	443c      	add	r4, r7
   dc532:	e00c      	b.n	dc54e <__gethex+0x258>
   dc534:	da09      	bge.n	dc54a <__gethex+0x254>
   dc536:	1a37      	subs	r7, r6, r0
   dc538:	4629      	mov	r1, r5
   dc53a:	463a      	mov	r2, r7
   dc53c:	9802      	ldr	r0, [sp, #8]
   dc53e:	f000 fbf3 	bl	dcd28 <__lshift>
   dc542:	1be4      	subs	r4, r4, r7
   dc544:	4605      	mov	r5, r0
   dc546:	f100 0a14 	add.w	sl, r0, #20
   dc54a:	f04f 0900 	mov.w	r9, #0
   dc54e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc552:	429c      	cmp	r4, r3
   dc554:	dd08      	ble.n	dc568 <__gethex+0x272>
   dc556:	9802      	ldr	r0, [sp, #8]
   dc558:	4629      	mov	r1, r5
   dc55a:	f000 fa20 	bl	dc99e <_Bfree>
   dc55e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc560:	2300      	movs	r3, #0
   dc562:	6013      	str	r3, [r2, #0]
   dc564:	20a3      	movs	r0, #163	; 0xa3
   dc566:	e0e2      	b.n	dc72e <__gethex+0x438>
   dc568:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dc56c:	4284      	cmp	r4, r0
   dc56e:	da53      	bge.n	dc618 <__gethex+0x322>
   dc570:	1b04      	subs	r4, r0, r4
   dc572:	42a6      	cmp	r6, r4
   dc574:	dc2e      	bgt.n	dc5d4 <__gethex+0x2de>
   dc576:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc57a:	2b02      	cmp	r3, #2
   dc57c:	d01a      	beq.n	dc5b4 <__gethex+0x2be>
   dc57e:	2b03      	cmp	r3, #3
   dc580:	d01c      	beq.n	dc5bc <__gethex+0x2c6>
   dc582:	2b01      	cmp	r3, #1
   dc584:	d11d      	bne.n	dc5c2 <__gethex+0x2cc>
   dc586:	42a6      	cmp	r6, r4
   dc588:	d11b      	bne.n	dc5c2 <__gethex+0x2cc>
   dc58a:	2e01      	cmp	r6, #1
   dc58c:	dc0b      	bgt.n	dc5a6 <__gethex+0x2b0>
   dc58e:	9a06      	ldr	r2, [sp, #24]
   dc590:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dc594:	6013      	str	r3, [r2, #0]
   dc596:	2301      	movs	r3, #1
   dc598:	612b      	str	r3, [r5, #16]
   dc59a:	f8ca 3000 	str.w	r3, [sl]
   dc59e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc5a0:	2062      	movs	r0, #98	; 0x62
   dc5a2:	601d      	str	r5, [r3, #0]
   dc5a4:	e0c3      	b.n	dc72e <__gethex+0x438>
   dc5a6:	1e71      	subs	r1, r6, #1
   dc5a8:	4628      	mov	r0, r5
   dc5aa:	f000 fd90 	bl	dd0ce <__any_on>
   dc5ae:	2800      	cmp	r0, #0
   dc5b0:	d1ed      	bne.n	dc58e <__gethex+0x298>
   dc5b2:	e006      	b.n	dc5c2 <__gethex+0x2cc>
   dc5b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc5b6:	2b00      	cmp	r3, #0
   dc5b8:	d0e9      	beq.n	dc58e <__gethex+0x298>
   dc5ba:	e002      	b.n	dc5c2 <__gethex+0x2cc>
   dc5bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc5be:	2b00      	cmp	r3, #0
   dc5c0:	d1e5      	bne.n	dc58e <__gethex+0x298>
   dc5c2:	9802      	ldr	r0, [sp, #8]
   dc5c4:	4629      	mov	r1, r5
   dc5c6:	f000 f9ea 	bl	dc99e <_Bfree>
   dc5ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc5cc:	2300      	movs	r3, #0
   dc5ce:	6013      	str	r3, [r2, #0]
   dc5d0:	2050      	movs	r0, #80	; 0x50
   dc5d2:	e0ac      	b.n	dc72e <__gethex+0x438>
   dc5d4:	1e67      	subs	r7, r4, #1
   dc5d6:	f1b9 0f00 	cmp.w	r9, #0
   dc5da:	d106      	bne.n	dc5ea <__gethex+0x2f4>
   dc5dc:	b13f      	cbz	r7, dc5ee <__gethex+0x2f8>
   dc5de:	4639      	mov	r1, r7
   dc5e0:	4628      	mov	r0, r5
   dc5e2:	f000 fd74 	bl	dd0ce <__any_on>
   dc5e6:	4681      	mov	r9, r0
   dc5e8:	e001      	b.n	dc5ee <__gethex+0x2f8>
   dc5ea:	f04f 0901 	mov.w	r9, #1
   dc5ee:	117a      	asrs	r2, r7, #5
   dc5f0:	2301      	movs	r3, #1
   dc5f2:	f007 071f 	and.w	r7, r7, #31
   dc5f6:	fa03 f707 	lsl.w	r7, r3, r7
   dc5fa:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   dc5fe:	4621      	mov	r1, r4
   dc600:	421f      	tst	r7, r3
   dc602:	4628      	mov	r0, r5
   dc604:	bf18      	it	ne
   dc606:	f049 0902 	orrne.w	r9, r9, #2
   dc60a:	1b36      	subs	r6, r6, r4
   dc60c:	f7ff fe28 	bl	dc260 <rshift>
   dc610:	2702      	movs	r7, #2
   dc612:	f8d8 4004 	ldr.w	r4, [r8, #4]
   dc616:	e000      	b.n	dc61a <__gethex+0x324>
   dc618:	2701      	movs	r7, #1
   dc61a:	f1b9 0f00 	cmp.w	r9, #0
   dc61e:	f000 8081 	beq.w	dc724 <__gethex+0x42e>
   dc622:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc626:	2b02      	cmp	r3, #2
   dc628:	d00e      	beq.n	dc648 <__gethex+0x352>
   dc62a:	2b03      	cmp	r3, #3
   dc62c:	d010      	beq.n	dc650 <__gethex+0x35a>
   dc62e:	2b01      	cmp	r3, #1
   dc630:	d176      	bne.n	dc720 <__gethex+0x42a>
   dc632:	f019 0f02 	tst.w	r9, #2
   dc636:	d073      	beq.n	dc720 <__gethex+0x42a>
   dc638:	f8da 0000 	ldr.w	r0, [sl]
   dc63c:	ea49 0900 	orr.w	r9, r9, r0
   dc640:	f019 0f01 	tst.w	r9, #1
   dc644:	d107      	bne.n	dc656 <__gethex+0x360>
   dc646:	e06b      	b.n	dc720 <__gethex+0x42a>
   dc648:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc64a:	f1c3 0301 	rsb	r3, r3, #1
   dc64e:	9315      	str	r3, [sp, #84]	; 0x54
   dc650:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc652:	2b00      	cmp	r3, #0
   dc654:	d064      	beq.n	dc720 <__gethex+0x42a>
   dc656:	f8d5 a010 	ldr.w	sl, [r5, #16]
   dc65a:	f105 0314 	add.w	r3, r5, #20
   dc65e:	ea4f 098a 	mov.w	r9, sl, lsl #2
   dc662:	eb03 0109 	add.w	r1, r3, r9
   dc666:	2000      	movs	r0, #0
   dc668:	681a      	ldr	r2, [r3, #0]
   dc66a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dc66e:	d002      	beq.n	dc676 <__gethex+0x380>
   dc670:	3201      	adds	r2, #1
   dc672:	601a      	str	r2, [r3, #0]
   dc674:	e020      	b.n	dc6b8 <__gethex+0x3c2>
   dc676:	f843 0b04 	str.w	r0, [r3], #4
   dc67a:	4299      	cmp	r1, r3
   dc67c:	d8f4      	bhi.n	dc668 <__gethex+0x372>
   dc67e:	68ab      	ldr	r3, [r5, #8]
   dc680:	459a      	cmp	sl, r3
   dc682:	db12      	blt.n	dc6aa <__gethex+0x3b4>
   dc684:	6869      	ldr	r1, [r5, #4]
   dc686:	9802      	ldr	r0, [sp, #8]
   dc688:	3101      	adds	r1, #1
   dc68a:	f000 f953 	bl	dc934 <_Balloc>
   dc68e:	692a      	ldr	r2, [r5, #16]
   dc690:	3202      	adds	r2, #2
   dc692:	f105 010c 	add.w	r1, r5, #12
   dc696:	4683      	mov	fp, r0
   dc698:	0092      	lsls	r2, r2, #2
   dc69a:	300c      	adds	r0, #12
   dc69c:	f7fd fc38 	bl	d9f10 <memcpy>
   dc6a0:	4629      	mov	r1, r5
   dc6a2:	9802      	ldr	r0, [sp, #8]
   dc6a4:	f000 f97b 	bl	dc99e <_Bfree>
   dc6a8:	465d      	mov	r5, fp
   dc6aa:	692b      	ldr	r3, [r5, #16]
   dc6ac:	1c5a      	adds	r2, r3, #1
   dc6ae:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   dc6b2:	612a      	str	r2, [r5, #16]
   dc6b4:	2201      	movs	r2, #1
   dc6b6:	615a      	str	r2, [r3, #20]
   dc6b8:	2f02      	cmp	r7, #2
   dc6ba:	f105 0214 	add.w	r2, r5, #20
   dc6be:	d111      	bne.n	dc6e4 <__gethex+0x3ee>
   dc6c0:	f8d8 3000 	ldr.w	r3, [r8]
   dc6c4:	3b01      	subs	r3, #1
   dc6c6:	429e      	cmp	r6, r3
   dc6c8:	d127      	bne.n	dc71a <__gethex+0x424>
   dc6ca:	1171      	asrs	r1, r6, #5
   dc6cc:	2301      	movs	r3, #1
   dc6ce:	f006 061f 	and.w	r6, r6, #31
   dc6d2:	fa03 f606 	lsl.w	r6, r3, r6
   dc6d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   dc6da:	421e      	tst	r6, r3
   dc6dc:	bf0c      	ite	eq
   dc6de:	2702      	moveq	r7, #2
   dc6e0:	2701      	movne	r7, #1
   dc6e2:	e01a      	b.n	dc71a <__gethex+0x424>
   dc6e4:	692b      	ldr	r3, [r5, #16]
   dc6e6:	459a      	cmp	sl, r3
   dc6e8:	da0a      	bge.n	dc700 <__gethex+0x40a>
   dc6ea:	2101      	movs	r1, #1
   dc6ec:	4628      	mov	r0, r5
   dc6ee:	f7ff fdb7 	bl	dc260 <rshift>
   dc6f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc6f6:	3401      	adds	r4, #1
   dc6f8:	429c      	cmp	r4, r3
   dc6fa:	f73f af2c 	bgt.w	dc556 <__gethex+0x260>
   dc6fe:	e00b      	b.n	dc718 <__gethex+0x422>
   dc700:	f016 061f 	ands.w	r6, r6, #31
   dc704:	d008      	beq.n	dc718 <__gethex+0x422>
   dc706:	4491      	add	r9, r2
   dc708:	f1c6 0620 	rsb	r6, r6, #32
   dc70c:	f859 0c04 	ldr.w	r0, [r9, #-4]
   dc710:	f000 f9d5 	bl	dcabe <__hi0bits>
   dc714:	42b0      	cmp	r0, r6
   dc716:	dbe8      	blt.n	dc6ea <__gethex+0x3f4>
   dc718:	2701      	movs	r7, #1
   dc71a:	f047 0720 	orr.w	r7, r7, #32
   dc71e:	e001      	b.n	dc724 <__gethex+0x42e>
   dc720:	f047 0710 	orr.w	r7, r7, #16
   dc724:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc726:	601d      	str	r5, [r3, #0]
   dc728:	9b06      	ldr	r3, [sp, #24]
   dc72a:	4638      	mov	r0, r7
   dc72c:	601c      	str	r4, [r3, #0]
   dc72e:	b00b      	add	sp, #44	; 0x2c
   dc730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dc734 <L_shift>:
   dc734:	f1c2 0208 	rsb	r2, r2, #8
   dc738:	0092      	lsls	r2, r2, #2
   dc73a:	b570      	push	{r4, r5, r6, lr}
   dc73c:	f1c2 0620 	rsb	r6, r2, #32
   dc740:	6843      	ldr	r3, [r0, #4]
   dc742:	6805      	ldr	r5, [r0, #0]
   dc744:	fa03 f406 	lsl.w	r4, r3, r6
   dc748:	432c      	orrs	r4, r5
   dc74a:	40d3      	lsrs	r3, r2
   dc74c:	6004      	str	r4, [r0, #0]
   dc74e:	f840 3f04 	str.w	r3, [r0, #4]!
   dc752:	4288      	cmp	r0, r1
   dc754:	d3f4      	bcc.n	dc740 <L_shift+0xc>
   dc756:	bd70      	pop	{r4, r5, r6, pc}

000dc758 <__match>:
   dc758:	b530      	push	{r4, r5, lr}
   dc75a:	6803      	ldr	r3, [r0, #0]
   dc75c:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc760:	3301      	adds	r3, #1
   dc762:	b14c      	cbz	r4, dc778 <__match+0x20>
   dc764:	781a      	ldrb	r2, [r3, #0]
   dc766:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dc76a:	2d19      	cmp	r5, #25
   dc76c:	bf98      	it	ls
   dc76e:	3220      	addls	r2, #32
   dc770:	42a2      	cmp	r2, r4
   dc772:	d0f3      	beq.n	dc75c <__match+0x4>
   dc774:	2000      	movs	r0, #0
   dc776:	bd30      	pop	{r4, r5, pc}
   dc778:	6003      	str	r3, [r0, #0]
   dc77a:	2001      	movs	r0, #1
   dc77c:	bd30      	pop	{r4, r5, pc}

000dc77e <__hexnan>:
   dc77e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc782:	680b      	ldr	r3, [r1, #0]
   dc784:	f8d0 b000 	ldr.w	fp, [r0]
   dc788:	115e      	asrs	r6, r3, #5
   dc78a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dc78e:	f013 031f 	ands.w	r3, r3, #31
   dc792:	b085      	sub	sp, #20
   dc794:	bf18      	it	ne
   dc796:	3604      	addne	r6, #4
   dc798:	1f35      	subs	r5, r6, #4
   dc79a:	4617      	mov	r7, r2
   dc79c:	2200      	movs	r2, #0
   dc79e:	4682      	mov	sl, r0
   dc7a0:	9301      	str	r3, [sp, #4]
   dc7a2:	f846 2c04 	str.w	r2, [r6, #-4]
   dc7a6:	46a8      	mov	r8, r5
   dc7a8:	462c      	mov	r4, r5
   dc7aa:	9200      	str	r2, [sp, #0]
   dc7ac:	4691      	mov	r9, r2
   dc7ae:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   dc7b2:	2900      	cmp	r1, #0
   dc7b4:	d03c      	beq.n	dc830 <__hexnan+0xb2>
   dc7b6:	4608      	mov	r0, r1
   dc7b8:	9203      	str	r2, [sp, #12]
   dc7ba:	9102      	str	r1, [sp, #8]
   dc7bc:	f7ff fd86 	bl	dc2cc <__hexdig_fun>
   dc7c0:	9a03      	ldr	r2, [sp, #12]
   dc7c2:	bb00      	cbnz	r0, dc806 <__hexnan+0x88>
   dc7c4:	9902      	ldr	r1, [sp, #8]
   dc7c6:	2920      	cmp	r1, #32
   dc7c8:	d816      	bhi.n	dc7f8 <__hexnan+0x7a>
   dc7ca:	9b00      	ldr	r3, [sp, #0]
   dc7cc:	4599      	cmp	r9, r3
   dc7ce:	ddee      	ble.n	dc7ae <__hexnan+0x30>
   dc7d0:	4544      	cmp	r4, r8
   dc7d2:	d205      	bcs.n	dc7e0 <__hexnan+0x62>
   dc7d4:	2a07      	cmp	r2, #7
   dc7d6:	dc03      	bgt.n	dc7e0 <__hexnan+0x62>
   dc7d8:	4641      	mov	r1, r8
   dc7da:	4620      	mov	r0, r4
   dc7dc:	f7ff ffaa 	bl	dc734 <L_shift>
   dc7e0:	42bc      	cmp	r4, r7
   dc7e2:	d923      	bls.n	dc82c <__hexnan+0xae>
   dc7e4:	2300      	movs	r3, #0
   dc7e6:	f1a4 0804 	sub.w	r8, r4, #4
   dc7ea:	f844 3c04 	str.w	r3, [r4, #-4]
   dc7ee:	f8cd 9000 	str.w	r9, [sp]
   dc7f2:	4644      	mov	r4, r8
   dc7f4:	461a      	mov	r2, r3
   dc7f6:	e7da      	b.n	dc7ae <__hexnan+0x30>
   dc7f8:	2929      	cmp	r1, #41	; 0x29
   dc7fa:	d148      	bne.n	dc88e <__hexnan+0x110>
   dc7fc:	f10b 0301 	add.w	r3, fp, #1
   dc800:	f8ca 3000 	str.w	r3, [sl]
   dc804:	e014      	b.n	dc830 <__hexnan+0xb2>
   dc806:	3201      	adds	r2, #1
   dc808:	2a08      	cmp	r2, #8
   dc80a:	f109 0901 	add.w	r9, r9, #1
   dc80e:	dd06      	ble.n	dc81e <__hexnan+0xa0>
   dc810:	42bc      	cmp	r4, r7
   dc812:	d9cc      	bls.n	dc7ae <__hexnan+0x30>
   dc814:	2300      	movs	r3, #0
   dc816:	f844 3c04 	str.w	r3, [r4, #-4]
   dc81a:	2201      	movs	r2, #1
   dc81c:	3c04      	subs	r4, #4
   dc81e:	6821      	ldr	r1, [r4, #0]
   dc820:	f000 000f 	and.w	r0, r0, #15
   dc824:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   dc828:	6020      	str	r0, [r4, #0]
   dc82a:	e7c0      	b.n	dc7ae <__hexnan+0x30>
   dc82c:	2208      	movs	r2, #8
   dc82e:	e7be      	b.n	dc7ae <__hexnan+0x30>
   dc830:	f1b9 0f00 	cmp.w	r9, #0
   dc834:	d02b      	beq.n	dc88e <__hexnan+0x110>
   dc836:	4544      	cmp	r4, r8
   dc838:	d205      	bcs.n	dc846 <__hexnan+0xc8>
   dc83a:	2a07      	cmp	r2, #7
   dc83c:	dc03      	bgt.n	dc846 <__hexnan+0xc8>
   dc83e:	4641      	mov	r1, r8
   dc840:	4620      	mov	r0, r4
   dc842:	f7ff ff77 	bl	dc734 <L_shift>
   dc846:	42bc      	cmp	r4, r7
   dc848:	d90c      	bls.n	dc864 <__hexnan+0xe6>
   dc84a:	463b      	mov	r3, r7
   dc84c:	f854 2b04 	ldr.w	r2, [r4], #4
   dc850:	f843 2b04 	str.w	r2, [r3], #4
   dc854:	42a5      	cmp	r5, r4
   dc856:	d2f9      	bcs.n	dc84c <__hexnan+0xce>
   dc858:	2200      	movs	r2, #0
   dc85a:	f843 2b04 	str.w	r2, [r3], #4
   dc85e:	429d      	cmp	r5, r3
   dc860:	d2fb      	bcs.n	dc85a <__hexnan+0xdc>
   dc862:	e00b      	b.n	dc87c <__hexnan+0xfe>
   dc864:	9b01      	ldr	r3, [sp, #4]
   dc866:	b14b      	cbz	r3, dc87c <__hexnan+0xfe>
   dc868:	f1c3 0220 	rsb	r2, r3, #32
   dc86c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dc870:	40d3      	lsrs	r3, r2
   dc872:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dc876:	4013      	ands	r3, r2
   dc878:	f846 3c04 	str.w	r3, [r6, #-4]
   dc87c:	682b      	ldr	r3, [r5, #0]
   dc87e:	b943      	cbnz	r3, dc892 <__hexnan+0x114>
   dc880:	42bd      	cmp	r5, r7
   dc882:	d102      	bne.n	dc88a <__hexnan+0x10c>
   dc884:	2301      	movs	r3, #1
   dc886:	602b      	str	r3, [r5, #0]
   dc888:	e003      	b.n	dc892 <__hexnan+0x114>
   dc88a:	3d04      	subs	r5, #4
   dc88c:	e7f6      	b.n	dc87c <__hexnan+0xfe>
   dc88e:	2004      	movs	r0, #4
   dc890:	e000      	b.n	dc894 <__hexnan+0x116>
   dc892:	2005      	movs	r0, #5
   dc894:	b005      	add	sp, #20
   dc896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000dc89c <_findenv_r>:
   dc89c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc8a0:	4607      	mov	r7, r0
   dc8a2:	468b      	mov	fp, r1
   dc8a4:	4690      	mov	r8, r2
   dc8a6:	f000 fc49 	bl	dd13c <__env_lock>
   dc8aa:	4b19      	ldr	r3, [pc, #100]	; (dc910 <_findenv_r+0x74>)
   dc8ac:	681d      	ldr	r5, [r3, #0]
   dc8ae:	469a      	mov	sl, r3
   dc8b0:	b13d      	cbz	r5, dc8c2 <_findenv_r+0x26>
   dc8b2:	465c      	mov	r4, fp
   dc8b4:	4623      	mov	r3, r4
   dc8b6:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc8ba:	b142      	cbz	r2, dc8ce <_findenv_r+0x32>
   dc8bc:	2a3d      	cmp	r2, #61	; 0x3d
   dc8be:	461c      	mov	r4, r3
   dc8c0:	d1f8      	bne.n	dc8b4 <_findenv_r+0x18>
   dc8c2:	4638      	mov	r0, r7
   dc8c4:	f000 fc3b 	bl	dd13e <__env_unlock>
   dc8c8:	2000      	movs	r0, #0
   dc8ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc8ce:	ebcb 0404 	rsb	r4, fp, r4
   dc8d2:	46a9      	mov	r9, r5
   dc8d4:	f859 0b04 	ldr.w	r0, [r9], #4
   dc8d8:	2800      	cmp	r0, #0
   dc8da:	d0f2      	beq.n	dc8c2 <_findenv_r+0x26>
   dc8dc:	4622      	mov	r2, r4
   dc8de:	4659      	mov	r1, fp
   dc8e0:	f7fe faea 	bl	daeb8 <strncmp>
   dc8e4:	b988      	cbnz	r0, dc90a <_findenv_r+0x6e>
   dc8e6:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dc8ea:	191e      	adds	r6, r3, r4
   dc8ec:	5d1b      	ldrb	r3, [r3, r4]
   dc8ee:	2b3d      	cmp	r3, #61	; 0x3d
   dc8f0:	d10b      	bne.n	dc90a <_findenv_r+0x6e>
   dc8f2:	f8da 3000 	ldr.w	r3, [sl]
   dc8f6:	1aed      	subs	r5, r5, r3
   dc8f8:	10ad      	asrs	r5, r5, #2
   dc8fa:	4638      	mov	r0, r7
   dc8fc:	f8c8 5000 	str.w	r5, [r8]
   dc900:	f000 fc1d 	bl	dd13e <__env_unlock>
   dc904:	1c70      	adds	r0, r6, #1
   dc906:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc90a:	464d      	mov	r5, r9
   dc90c:	e7e1      	b.n	dc8d2 <_findenv_r+0x36>
   dc90e:	bf00      	nop
   dc910:	2003e060 	.word	0x2003e060

000dc914 <_getenv_r>:
   dc914:	b507      	push	{r0, r1, r2, lr}
   dc916:	aa01      	add	r2, sp, #4
   dc918:	f7ff ffc0 	bl	dc89c <_findenv_r>
   dc91c:	b003      	add	sp, #12
   dc91e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dc924 <__gettzinfo>:
   dc924:	4800      	ldr	r0, [pc, #0]	; (dc928 <__gettzinfo+0x4>)
   dc926:	4770      	bx	lr
   dc928:	2003e020 	.word	0x2003e020

000dc92c <labs>:
   dc92c:	2800      	cmp	r0, #0
   dc92e:	bfb8      	it	lt
   dc930:	4240      	neglt	r0, r0
   dc932:	4770      	bx	lr

000dc934 <_Balloc>:
   dc934:	b570      	push	{r4, r5, r6, lr}
   dc936:	6a45      	ldr	r5, [r0, #36]	; 0x24
   dc938:	4604      	mov	r4, r0
   dc93a:	460e      	mov	r6, r1
   dc93c:	b93d      	cbnz	r5, dc94e <_Balloc+0x1a>
   dc93e:	2010      	movs	r0, #16
   dc940:	f7fa fb7c 	bl	d703c <malloc>
   dc944:	6260      	str	r0, [r4, #36]	; 0x24
   dc946:	6045      	str	r5, [r0, #4]
   dc948:	6085      	str	r5, [r0, #8]
   dc94a:	6005      	str	r5, [r0, #0]
   dc94c:	60c5      	str	r5, [r0, #12]
   dc94e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   dc950:	68eb      	ldr	r3, [r5, #12]
   dc952:	b143      	cbz	r3, dc966 <_Balloc+0x32>
   dc954:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc956:	68db      	ldr	r3, [r3, #12]
   dc958:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   dc95c:	b178      	cbz	r0, dc97e <_Balloc+0x4a>
   dc95e:	6802      	ldr	r2, [r0, #0]
   dc960:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   dc964:	e017      	b.n	dc996 <_Balloc+0x62>
   dc966:	2221      	movs	r2, #33	; 0x21
   dc968:	2104      	movs	r1, #4
   dc96a:	4620      	mov	r0, r4
   dc96c:	f000 fbd1 	bl	dd112 <_calloc_r>
   dc970:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc972:	60e8      	str	r0, [r5, #12]
   dc974:	68db      	ldr	r3, [r3, #12]
   dc976:	2b00      	cmp	r3, #0
   dc978:	d1ec      	bne.n	dc954 <_Balloc+0x20>
   dc97a:	2000      	movs	r0, #0
   dc97c:	bd70      	pop	{r4, r5, r6, pc}
   dc97e:	2101      	movs	r1, #1
   dc980:	fa01 f506 	lsl.w	r5, r1, r6
   dc984:	1d6a      	adds	r2, r5, #5
   dc986:	0092      	lsls	r2, r2, #2
   dc988:	4620      	mov	r0, r4
   dc98a:	f000 fbc2 	bl	dd112 <_calloc_r>
   dc98e:	2800      	cmp	r0, #0
   dc990:	d0f3      	beq.n	dc97a <_Balloc+0x46>
   dc992:	6046      	str	r6, [r0, #4]
   dc994:	6085      	str	r5, [r0, #8]
   dc996:	2300      	movs	r3, #0
   dc998:	6103      	str	r3, [r0, #16]
   dc99a:	60c3      	str	r3, [r0, #12]
   dc99c:	bd70      	pop	{r4, r5, r6, pc}

000dc99e <_Bfree>:
   dc99e:	b570      	push	{r4, r5, r6, lr}
   dc9a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
   dc9a2:	4606      	mov	r6, r0
   dc9a4:	460d      	mov	r5, r1
   dc9a6:	b93c      	cbnz	r4, dc9b8 <_Bfree+0x1a>
   dc9a8:	2010      	movs	r0, #16
   dc9aa:	f7fa fb47 	bl	d703c <malloc>
   dc9ae:	6270      	str	r0, [r6, #36]	; 0x24
   dc9b0:	6044      	str	r4, [r0, #4]
   dc9b2:	6084      	str	r4, [r0, #8]
   dc9b4:	6004      	str	r4, [r0, #0]
   dc9b6:	60c4      	str	r4, [r0, #12]
   dc9b8:	b13d      	cbz	r5, dc9ca <_Bfree+0x2c>
   dc9ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
   dc9bc:	686a      	ldr	r2, [r5, #4]
   dc9be:	68db      	ldr	r3, [r3, #12]
   dc9c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dc9c4:	6029      	str	r1, [r5, #0]
   dc9c6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   dc9ca:	bd70      	pop	{r4, r5, r6, pc}

000dc9cc <__multadd>:
   dc9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc9d0:	690d      	ldr	r5, [r1, #16]
   dc9d2:	461f      	mov	r7, r3
   dc9d4:	4606      	mov	r6, r0
   dc9d6:	460c      	mov	r4, r1
   dc9d8:	f101 0e14 	add.w	lr, r1, #20
   dc9dc:	2300      	movs	r3, #0
   dc9de:	f8de 0000 	ldr.w	r0, [lr]
   dc9e2:	b281      	uxth	r1, r0
   dc9e4:	fb02 7101 	mla	r1, r2, r1, r7
   dc9e8:	0c0f      	lsrs	r7, r1, #16
   dc9ea:	0c00      	lsrs	r0, r0, #16
   dc9ec:	fb02 7000 	mla	r0, r2, r0, r7
   dc9f0:	b289      	uxth	r1, r1
   dc9f2:	3301      	adds	r3, #1
   dc9f4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   dc9f8:	429d      	cmp	r5, r3
   dc9fa:	ea4f 4710 	mov.w	r7, r0, lsr #16
   dc9fe:	f84e 1b04 	str.w	r1, [lr], #4
   dca02:	dcec      	bgt.n	dc9de <__multadd+0x12>
   dca04:	b1d7      	cbz	r7, dca3c <__multadd+0x70>
   dca06:	68a3      	ldr	r3, [r4, #8]
   dca08:	429d      	cmp	r5, r3
   dca0a:	db12      	blt.n	dca32 <__multadd+0x66>
   dca0c:	6861      	ldr	r1, [r4, #4]
   dca0e:	4630      	mov	r0, r6
   dca10:	3101      	adds	r1, #1
   dca12:	f7ff ff8f 	bl	dc934 <_Balloc>
   dca16:	6922      	ldr	r2, [r4, #16]
   dca18:	3202      	adds	r2, #2
   dca1a:	f104 010c 	add.w	r1, r4, #12
   dca1e:	4680      	mov	r8, r0
   dca20:	0092      	lsls	r2, r2, #2
   dca22:	300c      	adds	r0, #12
   dca24:	f7fd fa74 	bl	d9f10 <memcpy>
   dca28:	4621      	mov	r1, r4
   dca2a:	4630      	mov	r0, r6
   dca2c:	f7ff ffb7 	bl	dc99e <_Bfree>
   dca30:	4644      	mov	r4, r8
   dca32:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   dca36:	3501      	adds	r5, #1
   dca38:	615f      	str	r7, [r3, #20]
   dca3a:	6125      	str	r5, [r4, #16]
   dca3c:	4620      	mov	r0, r4
   dca3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dca42 <__s2b>:
   dca42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dca46:	460c      	mov	r4, r1
   dca48:	4615      	mov	r5, r2
   dca4a:	461f      	mov	r7, r3
   dca4c:	2209      	movs	r2, #9
   dca4e:	3308      	adds	r3, #8
   dca50:	4606      	mov	r6, r0
   dca52:	fb93 f3f2 	sdiv	r3, r3, r2
   dca56:	2100      	movs	r1, #0
   dca58:	2201      	movs	r2, #1
   dca5a:	429a      	cmp	r2, r3
   dca5c:	da02      	bge.n	dca64 <__s2b+0x22>
   dca5e:	0052      	lsls	r2, r2, #1
   dca60:	3101      	adds	r1, #1
   dca62:	e7fa      	b.n	dca5a <__s2b+0x18>
   dca64:	4630      	mov	r0, r6
   dca66:	f7ff ff65 	bl	dc934 <_Balloc>
   dca6a:	9b08      	ldr	r3, [sp, #32]
   dca6c:	6143      	str	r3, [r0, #20]
   dca6e:	2d09      	cmp	r5, #9
   dca70:	f04f 0301 	mov.w	r3, #1
   dca74:	6103      	str	r3, [r0, #16]
   dca76:	dd11      	ble.n	dca9c <__s2b+0x5a>
   dca78:	f104 0809 	add.w	r8, r4, #9
   dca7c:	46c1      	mov	r9, r8
   dca7e:	442c      	add	r4, r5
   dca80:	f819 3b01 	ldrb.w	r3, [r9], #1
   dca84:	4601      	mov	r1, r0
   dca86:	3b30      	subs	r3, #48	; 0x30
   dca88:	220a      	movs	r2, #10
   dca8a:	4630      	mov	r0, r6
   dca8c:	f7ff ff9e 	bl	dc9cc <__multadd>
   dca90:	45a1      	cmp	r9, r4
   dca92:	d1f5      	bne.n	dca80 <__s2b+0x3e>
   dca94:	eb08 0405 	add.w	r4, r8, r5
   dca98:	3c08      	subs	r4, #8
   dca9a:	e001      	b.n	dcaa0 <__s2b+0x5e>
   dca9c:	340a      	adds	r4, #10
   dca9e:	2509      	movs	r5, #9
   dcaa0:	1b2d      	subs	r5, r5, r4
   dcaa2:	1963      	adds	r3, r4, r5
   dcaa4:	429f      	cmp	r7, r3
   dcaa6:	dd08      	ble.n	dcaba <__s2b+0x78>
   dcaa8:	f814 3b01 	ldrb.w	r3, [r4], #1
   dcaac:	4601      	mov	r1, r0
   dcaae:	3b30      	subs	r3, #48	; 0x30
   dcab0:	220a      	movs	r2, #10
   dcab2:	4630      	mov	r0, r6
   dcab4:	f7ff ff8a 	bl	dc9cc <__multadd>
   dcab8:	e7f3      	b.n	dcaa2 <__s2b+0x60>
   dcaba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dcabe <__hi0bits>:
   dcabe:	0c03      	lsrs	r3, r0, #16
   dcac0:	041b      	lsls	r3, r3, #16
   dcac2:	b913      	cbnz	r3, dcaca <__hi0bits+0xc>
   dcac4:	0400      	lsls	r0, r0, #16
   dcac6:	2310      	movs	r3, #16
   dcac8:	e000      	b.n	dcacc <__hi0bits+0xe>
   dcaca:	2300      	movs	r3, #0
   dcacc:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dcad0:	bf04      	itt	eq
   dcad2:	0200      	lsleq	r0, r0, #8
   dcad4:	3308      	addeq	r3, #8
   dcad6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dcada:	bf04      	itt	eq
   dcadc:	0100      	lsleq	r0, r0, #4
   dcade:	3304      	addeq	r3, #4
   dcae0:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dcae4:	bf04      	itt	eq
   dcae6:	0080      	lsleq	r0, r0, #2
   dcae8:	3302      	addeq	r3, #2
   dcaea:	2800      	cmp	r0, #0
   dcaec:	db03      	blt.n	dcaf6 <__hi0bits+0x38>
   dcaee:	0042      	lsls	r2, r0, #1
   dcaf0:	d503      	bpl.n	dcafa <__hi0bits+0x3c>
   dcaf2:	1c58      	adds	r0, r3, #1
   dcaf4:	4770      	bx	lr
   dcaf6:	4618      	mov	r0, r3
   dcaf8:	4770      	bx	lr
   dcafa:	2020      	movs	r0, #32
   dcafc:	4770      	bx	lr

000dcafe <__lo0bits>:
   dcafe:	6803      	ldr	r3, [r0, #0]
   dcb00:	f013 0207 	ands.w	r2, r3, #7
   dcb04:	d00b      	beq.n	dcb1e <__lo0bits+0x20>
   dcb06:	07d9      	lsls	r1, r3, #31
   dcb08:	d422      	bmi.n	dcb50 <__lo0bits+0x52>
   dcb0a:	079a      	lsls	r2, r3, #30
   dcb0c:	bf4b      	itete	mi
   dcb0e:	085b      	lsrmi	r3, r3, #1
   dcb10:	089b      	lsrpl	r3, r3, #2
   dcb12:	6003      	strmi	r3, [r0, #0]
   dcb14:	6003      	strpl	r3, [r0, #0]
   dcb16:	bf4c      	ite	mi
   dcb18:	2001      	movmi	r0, #1
   dcb1a:	2002      	movpl	r0, #2
   dcb1c:	4770      	bx	lr
   dcb1e:	b299      	uxth	r1, r3
   dcb20:	b909      	cbnz	r1, dcb26 <__lo0bits+0x28>
   dcb22:	0c1b      	lsrs	r3, r3, #16
   dcb24:	2210      	movs	r2, #16
   dcb26:	f013 0fff 	tst.w	r3, #255	; 0xff
   dcb2a:	bf04      	itt	eq
   dcb2c:	0a1b      	lsreq	r3, r3, #8
   dcb2e:	3208      	addeq	r2, #8
   dcb30:	0719      	lsls	r1, r3, #28
   dcb32:	bf04      	itt	eq
   dcb34:	091b      	lsreq	r3, r3, #4
   dcb36:	3204      	addeq	r2, #4
   dcb38:	0799      	lsls	r1, r3, #30
   dcb3a:	bf04      	itt	eq
   dcb3c:	089b      	lsreq	r3, r3, #2
   dcb3e:	3202      	addeq	r2, #2
   dcb40:	07d9      	lsls	r1, r3, #31
   dcb42:	d402      	bmi.n	dcb4a <__lo0bits+0x4c>
   dcb44:	085b      	lsrs	r3, r3, #1
   dcb46:	d005      	beq.n	dcb54 <__lo0bits+0x56>
   dcb48:	3201      	adds	r2, #1
   dcb4a:	6003      	str	r3, [r0, #0]
   dcb4c:	4610      	mov	r0, r2
   dcb4e:	4770      	bx	lr
   dcb50:	2000      	movs	r0, #0
   dcb52:	4770      	bx	lr
   dcb54:	2020      	movs	r0, #32
   dcb56:	4770      	bx	lr

000dcb58 <__i2b>:
   dcb58:	b510      	push	{r4, lr}
   dcb5a:	460c      	mov	r4, r1
   dcb5c:	2101      	movs	r1, #1
   dcb5e:	f7ff fee9 	bl	dc934 <_Balloc>
   dcb62:	2201      	movs	r2, #1
   dcb64:	6144      	str	r4, [r0, #20]
   dcb66:	6102      	str	r2, [r0, #16]
   dcb68:	bd10      	pop	{r4, pc}

000dcb6a <__multiply>:
   dcb6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcb6e:	4614      	mov	r4, r2
   dcb70:	690a      	ldr	r2, [r1, #16]
   dcb72:	6923      	ldr	r3, [r4, #16]
   dcb74:	429a      	cmp	r2, r3
   dcb76:	bfb8      	it	lt
   dcb78:	460b      	movlt	r3, r1
   dcb7a:	4688      	mov	r8, r1
   dcb7c:	bfbc      	itt	lt
   dcb7e:	46a0      	movlt	r8, r4
   dcb80:	461c      	movlt	r4, r3
   dcb82:	f8d8 7010 	ldr.w	r7, [r8, #16]
   dcb86:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dcb8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dcb8e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   dcb92:	eb07 0609 	add.w	r6, r7, r9
   dcb96:	429e      	cmp	r6, r3
   dcb98:	bfc8      	it	gt
   dcb9a:	3101      	addgt	r1, #1
   dcb9c:	f7ff feca 	bl	dc934 <_Balloc>
   dcba0:	f100 0514 	add.w	r5, r0, #20
   dcba4:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   dcba8:	462b      	mov	r3, r5
   dcbaa:	2200      	movs	r2, #0
   dcbac:	4563      	cmp	r3, ip
   dcbae:	d202      	bcs.n	dcbb6 <__multiply+0x4c>
   dcbb0:	f843 2b04 	str.w	r2, [r3], #4
   dcbb4:	e7fa      	b.n	dcbac <__multiply+0x42>
   dcbb6:	f104 0214 	add.w	r2, r4, #20
   dcbba:	f108 0114 	add.w	r1, r8, #20
   dcbbe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dcbc2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   dcbc6:	9300      	str	r3, [sp, #0]
   dcbc8:	9b00      	ldr	r3, [sp, #0]
   dcbca:	9201      	str	r2, [sp, #4]
   dcbcc:	4293      	cmp	r3, r2
   dcbce:	d957      	bls.n	dcc80 <__multiply+0x116>
   dcbd0:	f8b2 b000 	ldrh.w	fp, [r2]
   dcbd4:	f1bb 0f00 	cmp.w	fp, #0
   dcbd8:	d023      	beq.n	dcc22 <__multiply+0xb8>
   dcbda:	4689      	mov	r9, r1
   dcbdc:	46ae      	mov	lr, r5
   dcbde:	f04f 0800 	mov.w	r8, #0
   dcbe2:	f859 4b04 	ldr.w	r4, [r9], #4
   dcbe6:	f8be a000 	ldrh.w	sl, [lr]
   dcbea:	b2a3      	uxth	r3, r4
   dcbec:	fb0b a303 	mla	r3, fp, r3, sl
   dcbf0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   dcbf4:	f8de 4000 	ldr.w	r4, [lr]
   dcbf8:	4443      	add	r3, r8
   dcbfa:	ea4f 4814 	mov.w	r8, r4, lsr #16
   dcbfe:	fb0b 840a 	mla	r4, fp, sl, r8
   dcc02:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   dcc06:	46f2      	mov	sl, lr
   dcc08:	b29b      	uxth	r3, r3
   dcc0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   dcc0e:	454f      	cmp	r7, r9
   dcc10:	ea4f 4814 	mov.w	r8, r4, lsr #16
   dcc14:	f84a 3b04 	str.w	r3, [sl], #4
   dcc18:	d901      	bls.n	dcc1e <__multiply+0xb4>
   dcc1a:	46d6      	mov	lr, sl
   dcc1c:	e7e1      	b.n	dcbe2 <__multiply+0x78>
   dcc1e:	f8ce 8004 	str.w	r8, [lr, #4]
   dcc22:	9b01      	ldr	r3, [sp, #4]
   dcc24:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   dcc28:	3204      	adds	r2, #4
   dcc2a:	f1ba 0f00 	cmp.w	sl, #0
   dcc2e:	d021      	beq.n	dcc74 <__multiply+0x10a>
   dcc30:	682b      	ldr	r3, [r5, #0]
   dcc32:	462c      	mov	r4, r5
   dcc34:	4689      	mov	r9, r1
   dcc36:	f04f 0800 	mov.w	r8, #0
   dcc3a:	f8b9 e000 	ldrh.w	lr, [r9]
   dcc3e:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   dcc42:	fb0a be0e 	mla	lr, sl, lr, fp
   dcc46:	44f0      	add	r8, lr
   dcc48:	46a3      	mov	fp, r4
   dcc4a:	b29b      	uxth	r3, r3
   dcc4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   dcc50:	f84b 3b04 	str.w	r3, [fp], #4
   dcc54:	f859 3b04 	ldr.w	r3, [r9], #4
   dcc58:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   dcc5c:	0c1b      	lsrs	r3, r3, #16
   dcc5e:	fb0a e303 	mla	r3, sl, r3, lr
   dcc62:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   dcc66:	454f      	cmp	r7, r9
   dcc68:	ea4f 4813 	mov.w	r8, r3, lsr #16
   dcc6c:	d901      	bls.n	dcc72 <__multiply+0x108>
   dcc6e:	465c      	mov	r4, fp
   dcc70:	e7e3      	b.n	dcc3a <__multiply+0xd0>
   dcc72:	6063      	str	r3, [r4, #4]
   dcc74:	3504      	adds	r5, #4
   dcc76:	e7a7      	b.n	dcbc8 <__multiply+0x5e>
   dcc78:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   dcc7c:	b913      	cbnz	r3, dcc84 <__multiply+0x11a>
   dcc7e:	3e01      	subs	r6, #1
   dcc80:	2e00      	cmp	r6, #0
   dcc82:	dcf9      	bgt.n	dcc78 <__multiply+0x10e>
   dcc84:	6106      	str	r6, [r0, #16]
   dcc86:	b003      	add	sp, #12
   dcc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dcc8c <__pow5mult>:
   dcc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dcc90:	4615      	mov	r5, r2
   dcc92:	f012 0203 	ands.w	r2, r2, #3
   dcc96:	4606      	mov	r6, r0
   dcc98:	460f      	mov	r7, r1
   dcc9a:	d007      	beq.n	dccac <__pow5mult+0x20>
   dcc9c:	3a01      	subs	r2, #1
   dcc9e:	4c21      	ldr	r4, [pc, #132]	; (dcd24 <__pow5mult+0x98>)
   dcca0:	2300      	movs	r3, #0
   dcca2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dcca6:	f7ff fe91 	bl	dc9cc <__multadd>
   dccaa:	4607      	mov	r7, r0
   dccac:	10ad      	asrs	r5, r5, #2
   dccae:	d036      	beq.n	dcd1e <__pow5mult+0x92>
   dccb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dccb2:	b93c      	cbnz	r4, dccc4 <__pow5mult+0x38>
   dccb4:	2010      	movs	r0, #16
   dccb6:	f7fa f9c1 	bl	d703c <malloc>
   dccba:	6270      	str	r0, [r6, #36]	; 0x24
   dccbc:	6044      	str	r4, [r0, #4]
   dccbe:	6084      	str	r4, [r0, #8]
   dccc0:	6004      	str	r4, [r0, #0]
   dccc2:	60c4      	str	r4, [r0, #12]
   dccc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dccc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dcccc:	b94c      	cbnz	r4, dcce2 <__pow5mult+0x56>
   dccce:	f240 2171 	movw	r1, #625	; 0x271
   dccd2:	4630      	mov	r0, r6
   dccd4:	f7ff ff40 	bl	dcb58 <__i2b>
   dccd8:	2300      	movs	r3, #0
   dccda:	f8c8 0008 	str.w	r0, [r8, #8]
   dccde:	4604      	mov	r4, r0
   dcce0:	6003      	str	r3, [r0, #0]
   dcce2:	f04f 0800 	mov.w	r8, #0
   dcce6:	07eb      	lsls	r3, r5, #31
   dcce8:	d50a      	bpl.n	dcd00 <__pow5mult+0x74>
   dccea:	4639      	mov	r1, r7
   dccec:	4622      	mov	r2, r4
   dccee:	4630      	mov	r0, r6
   dccf0:	f7ff ff3b 	bl	dcb6a <__multiply>
   dccf4:	4639      	mov	r1, r7
   dccf6:	4681      	mov	r9, r0
   dccf8:	4630      	mov	r0, r6
   dccfa:	f7ff fe50 	bl	dc99e <_Bfree>
   dccfe:	464f      	mov	r7, r9
   dcd00:	106d      	asrs	r5, r5, #1
   dcd02:	d00c      	beq.n	dcd1e <__pow5mult+0x92>
   dcd04:	6820      	ldr	r0, [r4, #0]
   dcd06:	b108      	cbz	r0, dcd0c <__pow5mult+0x80>
   dcd08:	4604      	mov	r4, r0
   dcd0a:	e7ec      	b.n	dcce6 <__pow5mult+0x5a>
   dcd0c:	4622      	mov	r2, r4
   dcd0e:	4621      	mov	r1, r4
   dcd10:	4630      	mov	r0, r6
   dcd12:	f7ff ff2a 	bl	dcb6a <__multiply>
   dcd16:	6020      	str	r0, [r4, #0]
   dcd18:	f8c0 8000 	str.w	r8, [r0]
   dcd1c:	e7f4      	b.n	dcd08 <__pow5mult+0x7c>
   dcd1e:	4638      	mov	r0, r7
   dcd20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dcd24:	000de188 	.word	0x000de188

000dcd28 <__lshift>:
   dcd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dcd2c:	460c      	mov	r4, r1
   dcd2e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dcd32:	6926      	ldr	r6, [r4, #16]
   dcd34:	6849      	ldr	r1, [r1, #4]
   dcd36:	68a3      	ldr	r3, [r4, #8]
   dcd38:	4456      	add	r6, sl
   dcd3a:	4607      	mov	r7, r0
   dcd3c:	4691      	mov	r9, r2
   dcd3e:	1c75      	adds	r5, r6, #1
   dcd40:	42ab      	cmp	r3, r5
   dcd42:	da02      	bge.n	dcd4a <__lshift+0x22>
   dcd44:	3101      	adds	r1, #1
   dcd46:	005b      	lsls	r3, r3, #1
   dcd48:	e7fa      	b.n	dcd40 <__lshift+0x18>
   dcd4a:	4638      	mov	r0, r7
   dcd4c:	f7ff fdf2 	bl	dc934 <_Balloc>
   dcd50:	2300      	movs	r3, #0
   dcd52:	4680      	mov	r8, r0
   dcd54:	f100 0114 	add.w	r1, r0, #20
   dcd58:	461a      	mov	r2, r3
   dcd5a:	4553      	cmp	r3, sl
   dcd5c:	da03      	bge.n	dcd66 <__lshift+0x3e>
   dcd5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   dcd62:	3301      	adds	r3, #1
   dcd64:	e7f9      	b.n	dcd5a <__lshift+0x32>
   dcd66:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   dcd6a:	6920      	ldr	r0, [r4, #16]
   dcd6c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   dcd70:	f019 091f 	ands.w	r9, r9, #31
   dcd74:	f104 0114 	add.w	r1, r4, #20
   dcd78:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   dcd7c:	d014      	beq.n	dcda8 <__lshift+0x80>
   dcd7e:	f1c9 0c20 	rsb	ip, r9, #32
   dcd82:	2200      	movs	r2, #0
   dcd84:	6808      	ldr	r0, [r1, #0]
   dcd86:	fa00 f009 	lsl.w	r0, r0, r9
   dcd8a:	4302      	orrs	r2, r0
   dcd8c:	469a      	mov	sl, r3
   dcd8e:	f843 2b04 	str.w	r2, [r3], #4
   dcd92:	f851 2b04 	ldr.w	r2, [r1], #4
   dcd96:	458e      	cmp	lr, r1
   dcd98:	fa22 f20c 	lsr.w	r2, r2, ip
   dcd9c:	d8f2      	bhi.n	dcd84 <__lshift+0x5c>
   dcd9e:	f8ca 2004 	str.w	r2, [sl, #4]
   dcda2:	b142      	cbz	r2, dcdb6 <__lshift+0x8e>
   dcda4:	1cb5      	adds	r5, r6, #2
   dcda6:	e006      	b.n	dcdb6 <__lshift+0x8e>
   dcda8:	3b04      	subs	r3, #4
   dcdaa:	f851 2b04 	ldr.w	r2, [r1], #4
   dcdae:	f843 2f04 	str.w	r2, [r3, #4]!
   dcdb2:	458e      	cmp	lr, r1
   dcdb4:	d8f9      	bhi.n	dcdaa <__lshift+0x82>
   dcdb6:	3d01      	subs	r5, #1
   dcdb8:	4638      	mov	r0, r7
   dcdba:	f8c8 5010 	str.w	r5, [r8, #16]
   dcdbe:	4621      	mov	r1, r4
   dcdc0:	f7ff fded 	bl	dc99e <_Bfree>
   dcdc4:	4640      	mov	r0, r8
   dcdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000dcdca <__mcmp>:
   dcdca:	6903      	ldr	r3, [r0, #16]
   dcdcc:	690a      	ldr	r2, [r1, #16]
   dcdce:	1a9b      	subs	r3, r3, r2
   dcdd0:	b510      	push	{r4, lr}
   dcdd2:	d111      	bne.n	dcdf8 <__mcmp+0x2e>
   dcdd4:	0092      	lsls	r2, r2, #2
   dcdd6:	3014      	adds	r0, #20
   dcdd8:	3114      	adds	r1, #20
   dcdda:	1883      	adds	r3, r0, r2
   dcddc:	440a      	add	r2, r1
   dcdde:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   dcde2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   dcde6:	428c      	cmp	r4, r1
   dcde8:	d002      	beq.n	dcdf0 <__mcmp+0x26>
   dcdea:	d307      	bcc.n	dcdfc <__mcmp+0x32>
   dcdec:	2001      	movs	r0, #1
   dcdee:	bd10      	pop	{r4, pc}
   dcdf0:	4298      	cmp	r0, r3
   dcdf2:	d3f4      	bcc.n	dcdde <__mcmp+0x14>
   dcdf4:	2000      	movs	r0, #0
   dcdf6:	bd10      	pop	{r4, pc}
   dcdf8:	4618      	mov	r0, r3
   dcdfa:	bd10      	pop	{r4, pc}
   dcdfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dce00:	bd10      	pop	{r4, pc}

000dce02 <__mdiff>:
   dce02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dce06:	460c      	mov	r4, r1
   dce08:	4607      	mov	r7, r0
   dce0a:	4611      	mov	r1, r2
   dce0c:	4620      	mov	r0, r4
   dce0e:	4615      	mov	r5, r2
   dce10:	f7ff ffdb 	bl	dcdca <__mcmp>
   dce14:	1e06      	subs	r6, r0, #0
   dce16:	d108      	bne.n	dce2a <__mdiff+0x28>
   dce18:	4631      	mov	r1, r6
   dce1a:	4638      	mov	r0, r7
   dce1c:	f7ff fd8a 	bl	dc934 <_Balloc>
   dce20:	2301      	movs	r3, #1
   dce22:	6103      	str	r3, [r0, #16]
   dce24:	6146      	str	r6, [r0, #20]
   dce26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dce2a:	bfbc      	itt	lt
   dce2c:	4623      	movlt	r3, r4
   dce2e:	462c      	movlt	r4, r5
   dce30:	4638      	mov	r0, r7
   dce32:	6861      	ldr	r1, [r4, #4]
   dce34:	bfba      	itte	lt
   dce36:	461d      	movlt	r5, r3
   dce38:	2601      	movlt	r6, #1
   dce3a:	2600      	movge	r6, #0
   dce3c:	f7ff fd7a 	bl	dc934 <_Balloc>
   dce40:	692b      	ldr	r3, [r5, #16]
   dce42:	60c6      	str	r6, [r0, #12]
   dce44:	6926      	ldr	r6, [r4, #16]
   dce46:	f105 0914 	add.w	r9, r5, #20
   dce4a:	3414      	adds	r4, #20
   dce4c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   dce50:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   dce54:	f100 0514 	add.w	r5, r0, #20
   dce58:	f04f 0c00 	mov.w	ip, #0
   dce5c:	f854 3b04 	ldr.w	r3, [r4], #4
   dce60:	f859 2b04 	ldr.w	r2, [r9], #4
   dce64:	fa1c f183 	uxtah	r1, ip, r3
   dce68:	fa1f fe82 	uxth.w	lr, r2
   dce6c:	0c12      	lsrs	r2, r2, #16
   dce6e:	ebce 0101 	rsb	r1, lr, r1
   dce72:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   dce76:	eb03 4321 	add.w	r3, r3, r1, asr #16
   dce7a:	b289      	uxth	r1, r1
   dce7c:	ea4f 4c23 	mov.w	ip, r3, asr #16
   dce80:	45c8      	cmp	r8, r9
   dce82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   dce86:	46a6      	mov	lr, r4
   dce88:	f845 3b04 	str.w	r3, [r5], #4
   dce8c:	d8e6      	bhi.n	dce5c <__mdiff+0x5a>
   dce8e:	45be      	cmp	lr, r7
   dce90:	d20e      	bcs.n	dceb0 <__mdiff+0xae>
   dce92:	f85e 1b04 	ldr.w	r1, [lr], #4
   dce96:	fa1c f281 	uxtah	r2, ip, r1
   dce9a:	1413      	asrs	r3, r2, #16
   dce9c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   dcea0:	b292      	uxth	r2, r2
   dcea2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   dcea6:	ea4f 4c23 	mov.w	ip, r3, asr #16
   dceaa:	f845 2b04 	str.w	r2, [r5], #4
   dceae:	e7ee      	b.n	dce8e <__mdiff+0x8c>
   dceb0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   dceb4:	b90b      	cbnz	r3, dceba <__mdiff+0xb8>
   dceb6:	3e01      	subs	r6, #1
   dceb8:	e7fa      	b.n	dceb0 <__mdiff+0xae>
   dceba:	6106      	str	r6, [r0, #16]
   dcebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dcec0 <__ulp>:
   dcec0:	4b12      	ldr	r3, [pc, #72]	; (dcf0c <__ulp+0x4c>)
   dcec2:	ee10 2a90 	vmov	r2, s1
   dcec6:	401a      	ands	r2, r3
   dcec8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   dcecc:	2b00      	cmp	r3, #0
   dcece:	dd02      	ble.n	dced6 <__ulp+0x16>
   dced0:	2000      	movs	r0, #0
   dced2:	4619      	mov	r1, r3
   dced4:	e017      	b.n	dcf06 <__ulp+0x46>
   dced6:	425b      	negs	r3, r3
   dced8:	151b      	asrs	r3, r3, #20
   dceda:	2b13      	cmp	r3, #19
   dcedc:	f04f 0000 	mov.w	r0, #0
   dcee0:	f04f 0100 	mov.w	r1, #0
   dcee4:	dc04      	bgt.n	dcef0 <__ulp+0x30>
   dcee6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   dceea:	fa42 f103 	asr.w	r1, r2, r3
   dceee:	e00a      	b.n	dcf06 <__ulp+0x46>
   dcef0:	3b14      	subs	r3, #20
   dcef2:	2b1e      	cmp	r3, #30
   dcef4:	f04f 0201 	mov.w	r2, #1
   dcef8:	bfda      	itte	le
   dcefa:	f1c3 031f 	rsble	r3, r3, #31
   dcefe:	fa02 f303 	lslle.w	r3, r2, r3
   dcf02:	4613      	movgt	r3, r2
   dcf04:	4618      	mov	r0, r3
   dcf06:	ec41 0b10 	vmov	d0, r0, r1
   dcf0a:	4770      	bx	lr
   dcf0c:	7ff00000 	.word	0x7ff00000

000dcf10 <__b2d>:
   dcf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dcf12:	6905      	ldr	r5, [r0, #16]
   dcf14:	f100 0614 	add.w	r6, r0, #20
   dcf18:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   dcf1c:	1f2f      	subs	r7, r5, #4
   dcf1e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dcf22:	4620      	mov	r0, r4
   dcf24:	f7ff fdcb 	bl	dcabe <__hi0bits>
   dcf28:	f1c0 0320 	rsb	r3, r0, #32
   dcf2c:	280a      	cmp	r0, #10
   dcf2e:	600b      	str	r3, [r1, #0]
   dcf30:	dc14      	bgt.n	dcf5c <__b2d+0x4c>
   dcf32:	f1c0 0e0b 	rsb	lr, r0, #11
   dcf36:	fa24 f10e 	lsr.w	r1, r4, lr
   dcf3a:	42be      	cmp	r6, r7
   dcf3c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   dcf40:	bf34      	ite	cc
   dcf42:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dcf46:	2100      	movcs	r1, #0
   dcf48:	3015      	adds	r0, #21
   dcf4a:	fa04 f000 	lsl.w	r0, r4, r0
   dcf4e:	fa21 f10e 	lsr.w	r1, r1, lr
   dcf52:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dcf56:	ea40 0201 	orr.w	r2, r0, r1
   dcf5a:	e023      	b.n	dcfa4 <__b2d+0x94>
   dcf5c:	42be      	cmp	r6, r7
   dcf5e:	bf3a      	itte	cc
   dcf60:	f1a5 0708 	subcc.w	r7, r5, #8
   dcf64:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dcf68:	2100      	movcs	r1, #0
   dcf6a:	380b      	subs	r0, #11
   dcf6c:	d015      	beq.n	dcf9a <__b2d+0x8a>
   dcf6e:	4084      	lsls	r4, r0
   dcf70:	f1c0 0520 	rsb	r5, r0, #32
   dcf74:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   dcf78:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   dcf7c:	42b7      	cmp	r7, r6
   dcf7e:	fa21 fe05 	lsr.w	lr, r1, r5
   dcf82:	ea44 030e 	orr.w	r3, r4, lr
   dcf86:	bf8c      	ite	hi
   dcf88:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   dcf8c:	2400      	movls	r4, #0
   dcf8e:	fa01 f000 	lsl.w	r0, r1, r0
   dcf92:	40ec      	lsrs	r4, r5
   dcf94:	ea40 0204 	orr.w	r2, r0, r4
   dcf98:	e004      	b.n	dcfa4 <__b2d+0x94>
   dcf9a:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   dcf9e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dcfa2:	460a      	mov	r2, r1
   dcfa4:	ec43 2b10 	vmov	d0, r2, r3
   dcfa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dcfaa <__d2b>:
   dcfaa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dcfae:	460e      	mov	r6, r1
   dcfb0:	2101      	movs	r1, #1
   dcfb2:	ec59 8b10 	vmov	r8, r9, d0
   dcfb6:	4615      	mov	r5, r2
   dcfb8:	f7ff fcbc 	bl	dc934 <_Balloc>
   dcfbc:	f3c9 540a 	ubfx	r4, r9, #20, #11
   dcfc0:	4607      	mov	r7, r0
   dcfc2:	f3c9 0313 	ubfx	r3, r9, #0, #20
   dcfc6:	b10c      	cbz	r4, dcfcc <__d2b+0x22>
   dcfc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dcfcc:	9301      	str	r3, [sp, #4]
   dcfce:	f1b8 0f00 	cmp.w	r8, #0
   dcfd2:	d019      	beq.n	dd008 <__d2b+0x5e>
   dcfd4:	a802      	add	r0, sp, #8
   dcfd6:	f840 8d08 	str.w	r8, [r0, #-8]!
   dcfda:	f7ff fd90 	bl	dcafe <__lo0bits>
   dcfde:	9b00      	ldr	r3, [sp, #0]
   dcfe0:	b148      	cbz	r0, dcff6 <__d2b+0x4c>
   dcfe2:	9a01      	ldr	r2, [sp, #4]
   dcfe4:	f1c0 0120 	rsb	r1, r0, #32
   dcfe8:	fa02 f101 	lsl.w	r1, r2, r1
   dcfec:	430b      	orrs	r3, r1
   dcfee:	40c2      	lsrs	r2, r0
   dcff0:	617b      	str	r3, [r7, #20]
   dcff2:	9201      	str	r2, [sp, #4]
   dcff4:	e000      	b.n	dcff8 <__d2b+0x4e>
   dcff6:	617b      	str	r3, [r7, #20]
   dcff8:	9b01      	ldr	r3, [sp, #4]
   dcffa:	61bb      	str	r3, [r7, #24]
   dcffc:	2b00      	cmp	r3, #0
   dcffe:	bf14      	ite	ne
   dd000:	2102      	movne	r1, #2
   dd002:	2101      	moveq	r1, #1
   dd004:	6139      	str	r1, [r7, #16]
   dd006:	e007      	b.n	dd018 <__d2b+0x6e>
   dd008:	a801      	add	r0, sp, #4
   dd00a:	f7ff fd78 	bl	dcafe <__lo0bits>
   dd00e:	9b01      	ldr	r3, [sp, #4]
   dd010:	617b      	str	r3, [r7, #20]
   dd012:	2101      	movs	r1, #1
   dd014:	6139      	str	r1, [r7, #16]
   dd016:	3020      	adds	r0, #32
   dd018:	b134      	cbz	r4, dd028 <__d2b+0x7e>
   dd01a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   dd01e:	4404      	add	r4, r0
   dd020:	6034      	str	r4, [r6, #0]
   dd022:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dd026:	e009      	b.n	dd03c <__d2b+0x92>
   dd028:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   dd02c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dd030:	6030      	str	r0, [r6, #0]
   dd032:	6918      	ldr	r0, [r3, #16]
   dd034:	f7ff fd43 	bl	dcabe <__hi0bits>
   dd038:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   dd03c:	6028      	str	r0, [r5, #0]
   dd03e:	4638      	mov	r0, r7
   dd040:	b003      	add	sp, #12
   dd042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dd046 <__ratio>:
   dd046:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dd04a:	4688      	mov	r8, r1
   dd04c:	4669      	mov	r1, sp
   dd04e:	4681      	mov	r9, r0
   dd050:	f7ff ff5e 	bl	dcf10 <__b2d>
   dd054:	a901      	add	r1, sp, #4
   dd056:	4640      	mov	r0, r8
   dd058:	ec55 4b10 	vmov	r4, r5, d0
   dd05c:	f7ff ff58 	bl	dcf10 <__b2d>
   dd060:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dd064:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dd068:	1a9a      	subs	r2, r3, r2
   dd06a:	e89d 000a 	ldmia.w	sp, {r1, r3}
   dd06e:	1ac9      	subs	r1, r1, r3
   dd070:	ec57 6b10 	vmov	r6, r7, d0
   dd074:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   dd078:	2b00      	cmp	r3, #0
   dd07a:	bfcc      	ite	gt
   dd07c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   dd080:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   dd084:	4632      	mov	r2, r6
   dd086:	463b      	mov	r3, r7
   dd088:	4620      	mov	r0, r4
   dd08a:	4629      	mov	r1, r5
   dd08c:	f7fc fb2e 	bl	d96ec <__aeabi_ddiv>
   dd090:	ec41 0b10 	vmov	d0, r0, r1
   dd094:	b003      	add	sp, #12
   dd096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dd09a <__copybits>:
   dd09a:	3901      	subs	r1, #1
   dd09c:	b510      	push	{r4, lr}
   dd09e:	1149      	asrs	r1, r1, #5
   dd0a0:	6914      	ldr	r4, [r2, #16]
   dd0a2:	3101      	adds	r1, #1
   dd0a4:	f102 0314 	add.w	r3, r2, #20
   dd0a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dd0ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dd0b0:	42a3      	cmp	r3, r4
   dd0b2:	4602      	mov	r2, r0
   dd0b4:	d204      	bcs.n	dd0c0 <__copybits+0x26>
   dd0b6:	f853 2b04 	ldr.w	r2, [r3], #4
   dd0ba:	f840 2b04 	str.w	r2, [r0], #4
   dd0be:	e7f7      	b.n	dd0b0 <__copybits+0x16>
   dd0c0:	2300      	movs	r3, #0
   dd0c2:	428a      	cmp	r2, r1
   dd0c4:	d202      	bcs.n	dd0cc <__copybits+0x32>
   dd0c6:	f842 3b04 	str.w	r3, [r2], #4
   dd0ca:	e7fa      	b.n	dd0c2 <__copybits+0x28>
   dd0cc:	bd10      	pop	{r4, pc}

000dd0ce <__any_on>:
   dd0ce:	f100 0214 	add.w	r2, r0, #20
   dd0d2:	6900      	ldr	r0, [r0, #16]
   dd0d4:	114b      	asrs	r3, r1, #5
   dd0d6:	4298      	cmp	r0, r3
   dd0d8:	b510      	push	{r4, lr}
   dd0da:	db0c      	blt.n	dd0f6 <__any_on+0x28>
   dd0dc:	dd0c      	ble.n	dd0f8 <__any_on+0x2a>
   dd0de:	f011 011f 	ands.w	r1, r1, #31
   dd0e2:	d009      	beq.n	dd0f8 <__any_on+0x2a>
   dd0e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dd0e8:	fa24 f001 	lsr.w	r0, r4, r1
   dd0ec:	fa00 f101 	lsl.w	r1, r0, r1
   dd0f0:	428c      	cmp	r4, r1
   dd0f2:	d10c      	bne.n	dd10e <__any_on+0x40>
   dd0f4:	e000      	b.n	dd0f8 <__any_on+0x2a>
   dd0f6:	4603      	mov	r3, r0
   dd0f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dd0fc:	4293      	cmp	r3, r2
   dd0fe:	d904      	bls.n	dd10a <__any_on+0x3c>
   dd100:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dd104:	2900      	cmp	r1, #0
   dd106:	d0f9      	beq.n	dd0fc <__any_on+0x2e>
   dd108:	e001      	b.n	dd10e <__any_on+0x40>
   dd10a:	2000      	movs	r0, #0
   dd10c:	bd10      	pop	{r4, pc}
   dd10e:	2001      	movs	r0, #1
   dd110:	bd10      	pop	{r4, pc}

000dd112 <_calloc_r>:
   dd112:	b538      	push	{r3, r4, r5, lr}
   dd114:	fb02 f401 	mul.w	r4, r2, r1
   dd118:	4621      	mov	r1, r4
   dd11a:	f7f9 ffcf 	bl	d70bc <_malloc_r>
   dd11e:	4605      	mov	r5, r0
   dd120:	b118      	cbz	r0, dd12a <_calloc_r+0x18>
   dd122:	4622      	mov	r2, r4
   dd124:	2100      	movs	r1, #0
   dd126:	f7fc fefe 	bl	d9f26 <memset>
   dd12a:	4628      	mov	r0, r5
   dd12c:	bd38      	pop	{r3, r4, r5, pc}
	...

000dd130 <nanf>:
   dd130:	ed9f 0a01 	vldr	s0, [pc, #4]	; dd138 <nanf+0x8>
   dd134:	4770      	bx	lr
   dd136:	bf00      	nop
   dd138:	7fc00000 	.word	0x7fc00000

000dd13c <__env_lock>:
   dd13c:	4770      	bx	lr

000dd13e <__env_unlock>:
   dd13e:	4770      	bx	lr

000dd140 <dynalib_user>:
   dd140:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dd150:	0000 0000                                   ....

000dd154 <_ZTV8MB85RC64>:
	...
   dd15c:	418d 000d 41a1 000d 5f3d 000d 5fe9 000d     .A...A..=_..._..
   dd16c:	6063 000d d595 000d d5d0 000d d5d5 000d     c`..............
   dd17c:	d5da 000d d5de 000d d5e3 000d d5e8 000d     ................
   dd18c:	d5ec 000d d5f7 000d d602 000d d595 000d     ................
   dd19c:	d59d 000d d5a1 000d d5aa 000d d5b2 000d     ................
   dd1ac:	d5be 000d d5c4 000d                         ........

000dd1b4 <_ZL17FRAMversionNumber>:
   dd1b4:	0002 0000 7325 5320 253a 2e32 6630 2525     ....%s S:%2.0f%%
   dd1c4:	202c 3a51 3225 302e 2566 2025 4100 2b54     , Q:%2.0f%% .AT+
   dd1d4:	4643 4e55 313d 0d35 000a 6f43 6e75 2c74     CFUN=15...Count,
   dd1e4:	6820 756f 6c72 3a79 2520 2c69 6420 6961      hourly: %i, dai
   dd1f4:	796c 203a 6925 4400 6265 756f 636e 6465     ly: %i.Debounced
   dd204:	4500 6576 746e 7b00 6822 756f 6c72 2279     .Event.{"hourly"
   dd214:	253a 2c69 2220 6164 6c69 2279 253a 2c69     :%i, "daily":%i,
   dd224:	6222 7461 6574 7972 3a22 6925 202c 2220     "battery":%i,  "
   dd234:	656b 3179 3a22 2522 2273 202c 7422 6d65     key1":"%s", "tem
   dd244:	2270 253a 2c69 2220 6572 6573 7374 3a22     p":%i, "resets":
   dd254:	6925 202c 6122 656c 7472 2273 253a 2c69     %i, "alerts":%i,
   dd264:	2220 616d 6d78 6e69 3a22 6925 007d 6255      "maxmin":%i}.Ub
   dd274:	6469 746f 2d73 6f43 6e75 6574 2d72 6f48     idots-Counter-Ho
   dd284:	6b6f 762d 0031 6f4e 4420 7461 0061 6255     ok-v1.No Data.Ub
   dd294:	6469 746f 2073 6f48 6b6f 5200 7365 6f70     idots Hook.Respo
   dd2a4:	736e 2065 6552 6563 7669 6465 5500 6b6e     nse Received.Unk
   dd2b4:	6f6e 6e77 7220 7365 6f70 736e 2065 6572     nown response re
   dd2c4:	6563 6976 6465 2520 0069 6148 6472 5220     cevied %i.Hard R
   dd2d4:	7365 7465 6920 206e 2032 6573 6f63 646e     eset in 2 second
   dd2e4:	0073 3225 312e 2066 6573 0063 6553 2074     s.%2.1f sec.Set 
   dd2f4:	6f53 616c 2072 6f50 6577 6572 2064 6f4d     Solar Powered Mo
   dd304:	6564 3000 4300 656c 7261 6465 5320 6c6f     de.0.Cleared Sol
   dd314:	7261 5020 776f 7265 6465 4d20 646f 0065     ar Powered Mode.
   dd324:	6553 2074 6556 6272 736f 2065 6f4d 6564     Set Verbose Mode
   dd334:	4300 656c 7261 6465 5620 7265 6f62 6573     .Cleared Verbose
   dd344:	4d20 646f 0065 3225 312e 2066 5455 0043      Mode.%2.1f UTC.
   dd354:	6954 656d 7a20 6e6f 2065 666f 7366 7465     Time zone offset
   dd364:	2520 0069 704f 6e65 7420 6d69 2065 6573      %i.Open time se
   dd374:	2074 6f74 2520 0069 6c43 736f 6e69 2067     t to %i.Closing 
   dd384:	6974 656d 7320 7465 7420 206f 6925 4c00     time set to %i.L
   dd394:	776f 5020 776f 7265 4d20 646f 0065 7254     ow Power Mode.Tr
   dd3a4:	6575 4e00 726f 616d 206c 704f 7265 7461     ue.Normal Operat
   dd3b4:	6f69 736e 4600 6c61 6573 4c00 616f 6964     ions.False.Loadi
   dd3c4:	676e 5320 7379 6574 206d 6544 6166 6c75     ng System Defaul
   dd3d4:	7374 4600 6f72 206d 7325 7420 206f 7325     ts.From %s to %s
   dd3e4:	5300 6174 6574 5420 6172 736e 7469 6f69     .State Transitio
   dd3f4:	006e 7552 6e6e 6e69 0067 6144 6c69 2079     n.Running.Daily 
   dd404:	6c43 6165 756e 0070 7073 7261 2f6b 6564     Cleanup.spark/de
   dd414:	6976 6563 732f 7365 6973 6e6f 652f 646e     vice/session/end
   dd424:	4500 7272 726f 5320 6174 6574 2d20 5220     .Error State - R
   dd434:	7365 7465 5300 6174 6574 4500 7272 726f     eset.State.Error
   dd444:	5320 6174 6574 2d20 5020 776f 7265 4320      State - Power C
   dd454:	6379 656c 4500 7272 726f 5320 6174 6574     ycle.Error State
   dd464:	2d20 4620 6c75 206c 6f4d 6564 206d 6552      - Full Modem Re
   dd474:	6573 0074 5344 2054 666f 7366 7465 2520     set.DST offset %
   dd484:	2e32 6631 4800 756f 6c72 4379 756f 746e     2.1f.HourlyCount
   dd494:	4400 6961 796c 6f43 6e75 0074 6953 6e67     .DailyCount.Sign
   dd4a4:	6c61 5200 7365 7465 6f43 6e75 0074 6554     al.ResetCount.Te
   dd4b4:	706d 7265 7461 7275 0065 6552 656c 7361     mperature.Releas
   dd4c4:	0065 7473 7461 4f65 4366 6768 6c00 776f     e.stateOfChg.low
   dd4d4:	6f50 6577 4d72 646f 0065 6c43 736f 5465     PowerMode.CloseT
   dd4e4:	6d69 0065 6c41 7265 7374 5400 6d69 4f65     ime.Alerts.TimeO
   dd4f4:	6666 6573 0074 6142 7474 7265 4379 6e6f     ffset.BatteryCon
   dd504:	6574 7478 7200 7365 7465 5246 4d41 7200     text.resetFRAM.r
   dd514:	7365 7465 6f43 6e75 7374 4800 7261 5264     esetCounts.HardR
   dd524:	7365 7465 5300 6e65 4e64 776f 4c00 776f     eset.SendNow.Low
   dd534:	6f50 6577 4d72 646f 0065 6f53 616c 2d72     PowerMode.Solar-
   dd544:	6f4d 6564 5600 7265 6f62 6573 4d2d 646f     Mode.Verbose-Mod
   dd554:	0065 6553 2d74 6954 656d 6f7a 656e 5300     e.Set-Timezone.S
   dd564:	7465 442d 5453 664f 7366 7465 5300 7465     et-DSTOffset.Set
   dd574:	4f2d 6570 546e 6d69 0065 6553 2d74 6c43     -OpenTime.Set-Cl
   dd584:	736f 0065 6553 2d74 6544 6f62 6e75 6563     ose.Set-Debounce
   dd594:	5500 6b6e 6f6e 6e77 4e00 746f 4320 6168     .Unknown.Not Cha
   dd5a4:	6772 6e69 0067 6843 7261 6567 0064 6944     rging.Charged.Di
   dd5b4:	6373 6168 6772 6e69 0067 6146 6c75 0074     scharging.Fault.
   dd5c4:	6944 6f63 6e6e 6365 6574 0064 6f4e 656e     Diconnected.None
   dd5d4:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
   dd5e4:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
   dd5f4:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
   dd604:	5f45 4143 5f54 424e 0031 7277 7469 4465     E_CAT_NB1.writeD
   dd614:	7461 2061 6166 6c69 6465 6420 7275 6e69     ata failed durin
   dd624:	2067 7265 7361 2065 7266 6d61 6441 7264     g erase framAddr
   dd634:	253d 0075 6572 6461 7320 7465 6120 6464     =%u.read set add
   dd644:	6572 7373 6620 6961 656c 2064 6425 6400     ress failed %d.d
   dd654:	6469 276e 2074 6572 6563 7669 2065 6e65     idn't receive en
   dd664:	756f 6867 6220 7479 7365 6320 756f 746e     ough bytes count
   dd674:	253d 0075 7277 7469 2065 6166 6c69 6465     =%u.write failed
   dd684:	2520 0064                                    %d.

000dd688 <_ZTV6MB85RC>:
	...
   dd690:	5e5d 000d 5e5f 000d 5f3d 000d 5fe9 000d     ]^.._^..=_..._..
   dd6a0:	6063 000d                                   c`..

000dd6a4 <_ZTV14MCP79410EEPROM>:
	...
   dd6ac:	612b 000d 614d 000d 6121 000d 6125 000d     +a..Ma..!a..%a..
   dd6bc:	6169 000d 659d 000d 69b9 000d               ia...e...i..

000dd6c8 <_ZTV12MCP79410SRAM>:
	...
   dd6d0:	6129 000d 613f 000d 6119 000d 611d 000d     )a..?a...a...a..
   dd6e0:	6169 000d 65d5 000d 6823 000d 6579 7261     ia...e..#h..year
   dd6f0:	253d 3230 2078 6f6d 746e 3d68 3025 7832     =%02x month=%02x
   dd700:	6420 7961 664f 6f4d 746e 3d68 3025 7832      dayOfMonth=%02x
   dd710:	6420 7961 664f 6557 6b65 253d 3230 2078      dayOfWeek=%02x 
   dd720:	6f68 7275 253d 3230 2078 696d 756e 6574     hour=%02x minute
   dd730:	253d 3230 2078 6573 6f63 646e 253d 3230     =%02x second=%02
   dd740:	2078 6f6d 6564 253d 0064 6564 6976 6563     x mode=%d.device
   dd750:	6552 6461 6620 6961 656c 2064 7473 7461     Read failed stat
   dd760:	253d 0064 6573 2074 6954 656d 6620 6f72     =%d.set Time fro
   dd770:	206d 5452 2043 7325 6400 7665 6369 5765     m RTC %s.deviceW
   dd780:	6972 6574 6620 6961 656c 2064 7473 7461     rite failed stat
   dd790:	253d 0064 6573 2074 5452 2043 7266 6d6f     =%d.set RTC from
   dd7a0:	6320 6f6c 6475 2520 0073 6c63 756f 2064      cloud %s.cloud 
   dd7b0:	6974 656d 6e20 746f 7620 6c61 6469 6400     time not valid.d
   dd7c0:	7665 6369 5765 6972 6574 4545 5250 4d4f     eviceWriteEEPROM
   dd7d0:	6620 6961 656c 2064 7473 7461 253d 0064      failed stat=%d.
   dd7e0:	7061 2e70 7472 0063                         app.rtc.

000dd7e8 <_ZTV12MCP79410Time>:
	...
   dd7f0:	612d 000d 6131 000d                         -a..1a..

000dd7f8 <_ZTV8MCP79410>:
	...
   dd800:	612f 000d 615b 000d                         /a..[a..

000dd808 <_ZTVN5spark13CellularClassE>:
	...
   dd810:	719f 000d 7195 000d 718b 000d 7141 000d     .q...q...q..Aq..
   dd820:	717f 000d 7173 000d 7167 000d 715f 000d     .q..sq..gq.._q..
   dd830:	7155 000d 714b 000d 7ec1 000d               Uq..Kq...~..

000dd83c <_ZTV14CellularSignal>:
	...
   dd844:	724d 000d 72ad 000d 724f 000d 72f1 000d     Mr...r..Or...r..
   dd854:	7255 000d 72bd 000d 7281 000d 737b 000d     Ur...r...r..{s..
   dd864:	fffc ffff 0000 0000 73a5 000d               .........s..

000dd870 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dd878:	73ad 000d 73b3 000d 7409 000d 73c1 000d     .s...s...t...s..
   dd888:	73af 000d                                   .s..

000dd88c <_ZTVN5spark13EthernetClassE>:
	...
   dd894:	7a1f 000d 7a15 000d 7a0b 000d 7a01 000d     .z...z...z...z..
   dd8a4:	79f5 000d 79e9 000d 79dd 000d 79d5 000d     .y...y...y...y..
   dd8b4:	79cb 000d 79c1 000d 7ec1 000d               .y...y...~..

000dd8c0 <_ZTV7TwoWire>:
	...
   dd8c8:	7a3d 000d 7a87 000d 7a5f 000d 7a3f 000d     =z...z.._z..?z..
   dd8d8:	7a67 000d 7a6f 000d 7a77 000d 7a7f 000d     gz..oz..wz...z..

000dd8e8 <_ZTV9IPAddress>:
	...
   dd8f0:	7bf9 000d 7be9 000d 7beb 000d 6162 6475     .{...{...{..baud
   dd900:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   dd910:	7974 6570 7000 7261 6d61 6300 646d 6800     type.param.cmd.h
   dd920:	646e 7300 7274 006d 6966 746c 6c00 6c76     nd.strm.filt.lvl
   dd930:	6100 6464 6148 646e 656c 0072 6572 6f6d     .addHandler.remo
   dd940:	6576 6148 646e 656c 0072 6e65 6d75 6148     veHandler.enumHa
   dd950:	646e 656c 7372 4a00 4f53 534e 7274 6165     ndlers.JSONStrea
   dd960:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
   dd970:	3025 3031 2075 5d00 0020 202c 2800 3a29     %010u .] ., .():
   dd980:	0020 5b20 6300 646f 2065 203d 6400 7465      . [.code = .det
   dd990:	6961 736c 3d20 0020 6e6c 6600 006e 6f63     ails = .ln.fn.co
   dd9a0:	6564 6400 7465 6961 006c 6f6e 656e 7400     de.detail.none.t
   dd9b0:	6172 6563 6900 666e 006f 6177 6e72 6500     race.info.warn.e
   dd9c0:	7272 726f 7000 6e61 6369 6100 6c6c 0000     rror.panic.all..

000dd9d0 <_ZTVN5spark9MeshClassE>:
	...
   dd9d8:	7d3b 000d 7d31 000d 7d27 000d 7d1d 000d     ;}..1}..'}...}..
   dd9e8:	7d11 000d 7d05 000d 7cf9 000d 7cf1 000d     .}...}...|...|..
   dd9f8:	7ce7 000d 7cdd 000d 7ec1 000d               .|...|...~..

000dda04 <_ZTVN5spark12NetworkClassE>:
	...
   dda0c:	7e59 000d 7e63 000d 7e6d 000d 7e77 000d     Y~..c~..m~..w~..
   dda1c:	7e81 000d 7e8d 000d 7e99 000d 7ea5 000d     .~...~...~...~..
   dda2c:	7ead 000d 7eb7 000d 7ec1 000d 6977 6972     .~...~...~..wiri
   dda3c:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   dda4c:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   dda5c:	6920 766e 6c61 6469 002e 2b25 3330 3a64      invalid..%+03d:
   dda6c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   dda7c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   dda8c:	0000 0000                                   ....

000dda90 <_ZTV11USARTSerial>:
	...
   dda98:	88f1 000d 8941 000d 894f 000d 80e9 000d     ....A...O.......
   ddaa8:	8905 000d 8927 000d 8913 000d 893b 000d     ....'.......;...
   ddab8:	88f3 000d 88f7 000d                         ........

000ddac0 <_ZTV9USBSerial>:
	...
   ddac8:	89f9 000d 8a49 000d 8a57 000d 80e9 000d     ....I...W.......
   ddad8:	8a35 000d 89fb 000d 8a11 000d 8a43 000d     5...........C...
   ddae8:	8a27 000d 89f5 000d                         '.......

000ddaf0 <_ZSt7nothrow>:
	...

000ddaf1 <day_name.4725>:
   ddaf1:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   ddb01:	6972 6153 4a74                                   riSat

000ddb06 <mon_name.4726>:
   ddb06:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   ddb16:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   ddb26:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   ddb36:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   ddb46:	6425 000a                                   %d..

000ddb4a <_ctype_>:
   ddb4a:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ddb5a:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ddb6a:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ddb7a:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ddb8a:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ddb9a:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ddbaa:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ddbba:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ddbca:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ddc4c <__sf_fake_stdin>:
	...

000ddc6c <__sf_fake_stdout>:
	...

000ddc8c <__sf_fake_stderr>:
	...
   ddcac:	4f50 4953 0058 0000                         POSIX...

000ddcb4 <_DAYS_BEFORE_MONTH>:
   ddcb4:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   ddcc4:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   ddcd4:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000ddce4 <DAYS_IN_MONTH>:
   ddce4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   ddcf4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddd04:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000ddd14 <__month_lengths>:
   ddd14:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   ddd24:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddd34:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   ddd44:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   ddd54:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddd64:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   ddd74:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   ddd84:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   ddd94:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   ddda4:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   dddb4:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   dddc4:	302b 6c33 2564 322e 646c 0000               +03ld%.2ld..

000dddd0 <fpi.5344>:
   dddd0:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   ddde0:	0000 0000                                   ....

000ddde4 <fpinan.5380>:
   ddde4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dddf4:	0000 0000 666e 6900 696e 7974 0000 0000     ....nf.inity....
   dde04:	0000 0000                                   ....

000dde08 <tinytens>:
   dde08:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dde18:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dde28:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
   dde38:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
   dde48:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
   dde58:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
   dde68:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
   dde78:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
   dde88:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
   dde98:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
   ddea8:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
   ddeb8:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
   ddec8:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
   dded8:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
   ddee8:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
   ddef8:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
   ddf08:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
   ddf18:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
   ddf28:	2065 4825 253a 3a4d 5325 2520 0059 4d50     e %H:%M:%S %Y.PM
   ddf38:	2500 2061 6225 2520 2065 4825 253a 3a4d     .%a %b %e %H:%M:
   ddf48:	5325 2520 205a 5925 2500 3a49 4d25 253a     %S %Z %Y.%I:%M:%
   ddf58:	2053 7025 0000 0000                         S %p....

000ddf60 <_C_time_locale>:
   ddf60:	de38 000d de3c 000d de40 000d de44 000d     8...<...@...D...
   ddf70:	de48 000d de4c 000d de50 000d de54 000d     H...L...P...T...
   ddf80:	de58 000d de5c 000d de60 000d de64 000d     X...\...`...d...
   ddf90:	de68 000d de70 000d de79 000d de7f 000d     h...p...y.......
   ddfa0:	de48 000d de85 000d de8a 000d de8f 000d     H...............
   ddfb0:	de96 000d dea0 000d dea8 000d deb1 000d     ................
   ddfc0:	deba 000d debe 000d dec2 000d dec6 000d     ................
   ddfd0:	deca 000d dece 000d ded2 000d ded6 000d     ................
   ddfe0:	dedd 000d dee4 000d deec 000d def6 000d     ................
   ddff0:	deff 000d df06 000d df0f 000d df18 000d     ................
   de000:	df21 000d d510 000d df36 000d df39 000d     !.......6...9...
   de010:	de68 000d de70 000d de79 000d de7f 000d     h...p...y.......
   de020:	de48 000d de85 000d de8a 000d de8f 000d     H...............
   de030:	de96 000d dea0 000d dea8 000d deb1 000d     ................
   de040:	d91c 000d df51 000d d1dd 000d d1dd 000d     ....Q...........
   de050:	d1dd 000d d1dd 000d d1dd 000d 5a54 4700     ............TZ.G
   de060:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   de070:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   de080:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   de090:	3a6e 6825 2575 006e                         n:%hu%n.

000de098 <__mprec_tens>:
   de098:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   de0a8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   de0b8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   de0c8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   de0d8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   de0e8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   de0f8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   de108:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   de118:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   de128:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   de138:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   de148:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   de158:	9db4 79d9 7843 44ea                         ...yCx.D

000de160 <__mprec_bigtens>:
   de160:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   de170:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   de180:	bf3c 7f73 4fdd 7515                         <.s..O.u

000de188 <p05.5387>:
   de188:	0005 0000 0019 0000 007d 0000               ........}...

000de194 <link_const_variable_data_end>:
   de194:	000d5d5d 	.word	0x000d5d5d
   de198:	000d6115 	.word	0x000d6115
   de19c:	000d69f1 	.word	0x000d69f1
   de1a0:	000d7119 	.word	0x000d7119
   de1a4:	000d721d 	.word	0x000d721d
   de1a8:	000d7a29 	.word	0x000d7a29
   de1ac:	000d7ccd 	.word	0x000d7ccd
   de1b0:	000d7e09 	.word	0x000d7e09
   de1b4:	000d7f8d 	.word	0x000d7f8d
   de1b8:	000d81b5 	.word	0x000d81b5
   de1bc:	000d84fd 	.word	0x000d84fd
   de1c0:	000d88dd 	.word	0x000d88dd
   de1c4:	000d8e99 	.word	0x000d8e99
   de1c8:	000d8f5d 	.word	0x000d8f5d
   de1cc:	000d8fe1 	.word	0x000d8fe1
   de1d0:	000d9065 	.word	0x000d9065

000de1d4 <link_constructors_end>:
	...
